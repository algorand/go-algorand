{
   "info" : {
      "description" : "API endpoint for algod operations.",
      "title" : "Algod REST API.",
      "contact" : {
         "url" : "https://www.algorand.com/get-in-touch/contact",
         "name" : "algorand",
         "email" : "contact@algorand.com"
      },
      "version" : "0.0.1"
   },
   "components" : {
      "securitySchemes" : {
         "api_key" : {
            "name" : "X-Algo-API-Token",
            "description" : "Generated header parameter. This token can be generated using the Goal command line tool. Example value ='b7e384d0317b8050ce45900a94a1931e28540e1f69b2d242b424659c341b4697'",
            "type" : "apiKey",
            "in" : "header"
         }
      },
      "schemas" : {
         "AssetParams" : {
            "properties" : {
               "unit-name" : {
                  "type" : "string",
                  "description" : "\\[un\\] Name of a unit of this asset, as supplied by the creator."
               },
               "default-frozen" : {
                  "type" : "boolean",
                  "description" : "\\[df\\] Whether holdings of this asset are frozen by default."
               },
               "reserve" : {
                  "description" : "\\[r\\] Address of account holding reserve (non-minted) units of this asset.",
                  "type" : "string"
               },
               "name" : {
                  "description" : "\\[an\\] Name of this asset, as supplied by the creator.",
                  "type" : "string"
               },
               "freeze" : {
                  "type" : "string",
                  "description" : "\\[f\\] Address of account used to freeze holdings of this asset.  If empty, freezing is not permitted."
               },
               "decimals" : {
                  "minimum" : 0,
                  "maximum" : 19,
                  "description" : "\\[dc\\] The number of digits to use after the decimal point when displaying this asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths. If 2, the base unit of the asset is in hundredths, and so on. This value must be between 0 and 19 (inclusive).",
                  "type" : "integer"
               },
               "clawback" : {
                  "type" : "string",
                  "description" : "\\[c\\] Address of account used to clawback holdings of this asset.  If empty, clawback is not permitted."
               },
               "manager" : {
                  "description" : "\\[m\\] Address of account used to manage the keys of this asset and to destroy it.",
                  "type" : "string"
               },
               "creator" : {
                  "type" : "string",
                  "description" : "The address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case."
               },
               "url" : {
                  "type" : "string",
                  "description" : "\\[au\\] URL where more information about the asset can be retrieved."
               },
               "total" : {
                  "x-algorand-format" : "uint64",
                  "description" : "\\[t\\] The total number of units of this asset.",
                  "type" : "integer"
               },
               "metadata-hash" : {
                  "format" : "byte",
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "description" : "\\[am\\] A commitment to some unspecified asset metadata. The format of this metadata is up to the application.",
                  "type" : "string"
               }
            },
            "description" : "AssetParams specifies the parameters for an asset.\n\n\\[apar\\] when part of an AssetConfig transaction.\n\nDefinition:\ndata/transactions/asset.go : AssetParams",
            "type" : "object",
            "required" : [
               "creator",
               "decimals",
               "total"
            ]
         },
         "AccountParticipation" : {
            "description" : "AccountParticipation describes the parameters used by this account in consensus protocol.",
            "type" : "object",
            "required" : [
               "selection-participation-key",
               "vote-first-valid",
               "vote-key-dilution",
               "vote-last-valid",
               "vote-participation-key"
            ],
            "properties" : {
               "vote-participation-key" : {
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "format" : "byte",
                  "type" : "string",
                  "description" : "\\[vote\\] root participation public key (if any) currently registered for this round."
               },
               "vote-first-valid" : {
                  "type" : "integer",
                  "description" : "\\[voteFst\\] First round for which this participation is valid."
               },
               "selection-participation-key" : {
                  "format" : "byte",
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type" : "string",
                  "description" : "\\[sel\\] Selection public key (if any) currently registered for this round."
               },
               "vote-last-valid" : {
                  "type" : "integer",
                  "description" : "\\[voteLst\\] Last round for which this participation is valid."
               },
               "vote-key-dilution" : {
                  "type" : "integer",
                  "description" : "\\[voteKD\\] Number of subkeys in each batch of participation keys."
               }
            }
         },
         "Asset" : {
            "description" : "Specifies both the unique identifier and the parameters for an asset",
            "type" : "object",
            "required" : [
               "index",
               "params"
            ],
            "properties" : {
               "params" : {
                  "$ref" : "#/components/schemas/AssetParams"
               },
               "index" : {
                  "description" : "unique asset identifier",
                  "type" : "integer"
               }
            }
         },
         "Version" : {
            "properties" : {
               "genesis-hash" : {
                  "type" : "string",
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "format" : "byte"
               },
               "build" : {
                  "$ref" : "#/components/schemas/VersionBuild"
               },
               "genesis-id" : {
                  "type" : "string"
               },
               "versions" : {
                  "type" : "array",
                  "items" : {
                     "type" : "string"
                  }
               }
            },
            "type" : "object",
            "description" : "Note that we annotate this as a model so that legacy clients\ncan directly import a swagger generated Version model.",
            "required" : [
               "build",
               "genesis-hash",
               "genesis-id",
               "versions"
            ],
            "x-go-package" : "github.com/algorand/go-algorand/daemon/algod/api/spec/common"
         },
         "AssetHolding" : {
            "required" : [
               "amount",
               "asset-id",
               "creator",
               "is-frozen"
            ],
            "description" : "Describes an asset held by an account.\n\nDefinition:\ndata/basics/userBalance.go : AssetHolding",
            "type" : "object",
            "properties" : {
               "asset-id" : {
                  "type" : "integer",
                  "x-go-name" : "AssetID",
                  "description" : "Asset ID of the holding."
               },
               "amount" : {
                  "type" : "integer",
                  "description" : "\\[a\\] number of units held."
               },
               "creator" : {
                  "type" : "string",
                  "description" : "Address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case."
               },
               "is-frozen" : {
                  "type" : "boolean",
                  "description" : "\\[f\\] whether or not the holding is frozen."
               }
            }
         },
         "ErrorResponse" : {
            "properties" : {
               "data" : {
                  "type" : "string"
               },
               "message" : {
                  "type" : "string"
               }
            },
            "description" : "An error response with optional data field.",
            "type" : "object",
            "required" : [
               "message"
            ]
         },
         "VersionBuild" : {
            "properties" : {
               "build-number" : {
                  "type" : "integer"
               },
               "major" : {
                  "type" : "integer"
               },
               "channel" : {
                  "type" : "string"
               },
               "minor" : {
                  "type" : "integer"
               },
               "branch" : {
                  "type" : "string"
               },
               "commit-hash" : {
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "format" : "byte",
                  "type" : "string"
               }
            },
            "description" : "the current algod build version information.",
            "type" : "object",
            "required" : [
               "branch",
               "build-number",
               "channel",
               "commit-hash",
               "major",
               "minor"
            ]
         },
         "Account" : {
            "properties" : {
               "type" : {
                  "type" : "string",
                  "description" : "Indicates what type of signature is used by this account, must be one of:\n* sig\n* msig\n* lsig",
                  "enum" : [
                     "sig",
                     "msig",
                     "lsig"
                  ]
               },
               "created-assets" : {
                  "items" : {
                     "$ref" : "#/components/schemas/Asset"
                  },
                  "type" : "array",
                  "description" : "\\[apar\\] parameters of assets created by this account.\n\nNote: the raw account uses `map[int] -> Asset` for this type."
               },
               "reward-base" : {
                  "description" : "\\[ebase\\] used as part of the rewards computation. Only applicable to accounts which are participating.",
                  "type" : "integer"
               },
               "participation" : {
                  "$ref" : "#/components/schemas/AccountParticipation"
               },
               "round" : {
                  "type" : "integer",
                  "description" : "The round for which this information is relevant."
               },
               "amount" : {
                  "type" : "integer",
                  "description" : "\\[algo\\] total number of MicroAlgos in the account"
               },
               "pending-rewards" : {
                  "description" : "amount of MicroAlgos of pending rewards in this account.",
                  "type" : "integer"
               },
               "assets" : {
                  "description" : "\\[asset\\] assets held by this account.\n\nNote the raw object uses `map[int] -> AssetHolding` for this type.",
                  "type" : "array",
                  "items" : {
                     "$ref" : "#/components/schemas/AssetHolding"
                  }
               },
               "status" : {
                  "type" : "string",
                  "description" : "\\[onl\\] delegation status of the account's MicroAlgos\n* Offline - indicates that the associated account is delegated.\n*  Online  - indicates that the associated account used as part of the delegation pool.\n*   NotParticipating - indicates that the associated account is neither a delegator nor a delegate."
               },
               "amount-without-pending-rewards" : {
                  "description" : "specifies the amount of MicroAlgos in the account, without the pending rewards.",
                  "type" : "integer"
               },
               "address" : {
                  "description" : "the account public key",
                  "type" : "string"
               },
               "rewards" : {
                  "type" : "integer",
                  "description" : "\\[ern\\] total rewards of MicroAlgos the account has received, including pending rewards."
               }
            },
            "required" : [
               "address",
               "amount",
               "amount-without-pending-rewards",
               "pending-rewards",
               "rewards",
               "round",
               "status"
            ],
            "description" : "Account information at a given round.\n\nDefinition:\ndata/basics/userBalance.go : AccountData\n",
            "type" : "object"
         }
      },
      "responses" : {
         "PostTransactionsResponse" : {
            "content" : {
               "application/json" : {
                  "schema" : {
                     "properties" : {
                        "txId" : {
                           "description" : "encoding of the transaction hash.",
                           "type" : "string"
                        }
                     },
                     "type" : "object",
                     "required" : [
                        "txId"
                     ]
                  }
               }
            },
            "description" : "Transaction ID of the submission."
         },
         "BlockResponse" : {
            "description" : "Encoded block object.",
            "content" : {
               "application/json" : {
                  "schema" : {
                     "properties" : {
                        "cert" : {
                           "description" : "Optional certificate object. This is only included when the format is set to message pack.",
                           "type" : "object",
                           "properties" : {},
                           "x-algorand-format" : "BlockCertificate"
                        },
                        "block" : {
                           "x-algorand-format" : "BlockHeader",
                           "properties" : {},
                           "type" : "object",
                           "description" : "Block header data."
                        }
                     },
                     "required" : [
                        "block"
                     ],
                     "type" : "object"
                  }
               }
            }
         },
         "AccountResponse" : {
            "content" : {
               "application/json" : {
                  "schema" : {
                     "$ref" : "#/components/schemas/Account"
                  }
               }
            },
            "description" : "(empty)"
         },
         "NodeStatusResponse" : {
            "content" : {
               "application/json" : {
                  "schema" : {
                     "required" : [
                        "catchup-time",
                        "last-round",
                        "last-version",
                        "next-version",
                        "next-version-round",
                        "next-version-supported",
                        "stopped-at-unsupported-round",
                        "time-since-last-round"
                     ],
                     "description" : "NodeStatus contains the information about a node status",
                     "type" : "object",
                     "properties" : {
                        "next-version" : {
                           "description" : "NextVersion of consensus protocol to use",
                           "type" : "string"
                        },
                        "next-version-supported" : {
                           "type" : "boolean",
                           "description" : "NextVersionSupported indicates whether the next consensus version is supported by this node"
                        },
                        "catchup-time" : {
                           "description" : "CatchupTime in nanoseconds",
                           "type" : "integer"
                        },
                        "next-version-round" : {
                           "description" : "NextVersionRound is the round at which the next consensus version will apply",
                           "type" : "integer"
                        },
                        "last-version" : {
                           "type" : "string",
                           "description" : "LastVersion indicates the last consensus version supported"
                        },
                        "stopped-at-unsupported-round" : {
                           "type" : "boolean",
                           "description" : "StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress"
                        },
                        "last-round" : {
                           "type" : "integer",
                           "description" : "LastRound indicates the last round seen"
                        },
                        "time-since-last-round" : {
                           "description" : "TimeSinceLastRound in nanoseconds",
                           "type" : "integer"
                        }
                     }
                  }
               }
            },
            "description" : "(empty)"
         },
         "PendingTransactionResponse" : {
            "content" : {
               "application/json" : {
                  "schema" : {
                     "properties" : {
                        "close-rewards" : {
                           "type" : "integer",
                           "description" : "Rewards in microalgos applied to the close remainder to account."
                        },
                        "receiver-rewards" : {
                           "type" : "integer",
                           "description" : "Rewards in microalgos applied to the receiver account."
                        },
                        "asset-index" : {
                           "type" : "integer",
                           "description" : "The asset index if the transaction was found and it created an asset."
                        },
                        "pool-error" : {
                           "description" : "Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error.\n",
                           "type" : "string"
                        },
                        "sender-rewards" : {
                           "type" : "integer",
                           "description" : "Rewards in microalgos applied to the sender account."
                        },
                        "closing-amount" : {
                           "type" : "integer",
                           "description" : "Closing amount for the transaction."
                        },
                        "txn" : {
                           "type" : "object",
                           "description" : "The raw signed transaction.",
                           "x-algorand-format" : "SignedTransaction",
                           "properties" : {}
                        },
                        "confirmed-round" : {
                           "type" : "integer",
                           "description" : "The round where this transaction was confirmed, if present."
                        }
                     },
                     "required" : [
                        "pool-error",
                        "txn"
                     ],
                     "type" : "object",
                     "description" : "Details about a pending transaction. If the transaction was recently confirmed, includes confirmation details like the round and reward details."
                  }
               }
            },
            "description" : "Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed:\n- transaction committed (committed round > 0)\n- transaction still in the pool (committed round = 0, pool error = \"\")\n- transaction removed from pool due to error (committed round = 0, pool error != \"\")\n\nOr the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error."
         },
         "PendingTransactionsResponse" : {
            "description" : "A potentially truncated list of transactions currently in the node's transaction pool. You can compute whether or not the list is truncated if the number of elements in the **top-transactions** array is fewer than **total-transactions**.",
            "content" : {
               "application/json" : {
                  "schema" : {
                     "required" : [
                        "top-transactions",
                        "total-transactions"
                     ],
                     "type" : "object",
                     "description" : "PendingTransactions is an array of signed transactions exactly as they were submitted.",
                     "properties" : {
                        "top-transactions" : {
                           "items" : {
                              "properties" : {},
                              "x-algorand-format" : "SignedTransaction",
                              "type" : "object"
                           },
                           "type" : "array",
                           "description" : "An array of signed transaction objects."
                        },
                        "total-transactions" : {
                           "description" : "Total number of transactions in the pool.",
                           "type" : "integer"
                        }
                     }
                  }
               }
            }
         },
         "PostCompileResponse" : {
            "description" : "Teal compile Result",
            "content" : {
               "application/json" : {
                  "schema" : {
                     "required" : [
                        "hash",
                        "result"
                     ],
                     "type" : "object",
                     "properties" : {
                        "result" : {
                           "description" : "base64 encoded program bytes",
                           "type" : "string"
                        },
                        "hash" : {
                           "type" : "string",
                           "description" : "base32 SHA512_256 of program bytes (Address style)"
                        }
                     }
                  }
               }
            }
         },
         "SupplyResponse" : {
            "content" : {
               "application/json" : {
                  "schema" : {
                     "required" : [
                        "current_round",
                        "online-money",
                        "total-money"
                     ],
                     "description" : "Supply represents the current supply of MicroAlgos in the system",
                     "type" : "object",
                     "properties" : {
                        "online-money" : {
                           "type" : "integer",
                           "description" : "OnlineMoney"
                        },
                        "current_round" : {
                           "description" : "Round",
                           "type" : "integer"
                        },
                        "total-money" : {
                           "description" : "TotalMoney",
                           "type" : "integer"
                        }
                     }
                  }
               }
            },
            "description" : "Supply represents the current supply of MicroAlgos in the system."
         },
         "TransactionParametersResponse" : {
            "description" : "TransactionParams contains the parameters that help a client construct a new transaction.",
            "content" : {
               "application/json" : {
                  "schema" : {
                     "x-go-package" : "github.com/algorand/go-algorand/daemon/algod/api/spec/v1",
                     "required" : [
                        "consensus-version",
                        "fee",
                        "genesis-hash",
                        "genesis-id",
                        "last-round",
                        "min-fee"
                     ],
                     "description" : "TransactionParams contains the parameters that help a client construct\na new transaction.",
                     "type" : "object",
                     "properties" : {
                        "min-fee" : {
                           "type" : "integer",
                           "description" : "The minimum transaction fee (not per byte) required for the\ntxn to validate for the current network protocol."
                        },
                        "genesis-hash" : {
                           "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                           "format" : "byte",
                           "type" : "string",
                           "description" : "GenesisHash is the hash of the genesis block."
                        },
                        "last-round" : {
                           "type" : "integer",
                           "description" : "LastRound indicates the last round seen"
                        },
                        "fee" : {
                           "type" : "integer",
                           "description" : "Fee is the suggested transaction fee\nFee is in units of micro-Algos per byte.\nFee may fall to zero but transactions must still have a fee of\nat least MinTxnFee for the current network protocol."
                        },
                        "genesis-id" : {
                           "description" : "GenesisID is an ID listed in the genesis block.",
                           "type" : "string"
                        },
                        "consensus-version" : {
                           "description" : "ConsensusVersion indicates the consensus protocol version\nas of LastRound.",
                           "type" : "string"
                        }
                     }
                  }
               }
            }
         }
      },
      "parameters" : {
         "currency-less-than" : {
            "in" : "query",
            "schema" : {
               "type" : "integer"
            },
            "description" : "Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.",
            "name" : "currency-less-than"
         },
         "account-id" : {
            "x-go-name" : "AccountID",
            "description" : "account string",
            "name" : "account-id",
            "schema" : {
               "type" : "string",
               "x-go-name" : "AccountID"
            },
            "in" : "path",
            "required" : true
         },
         "before-time" : {
            "x-algorand-format" : "RFC3339 String",
            "in" : "query",
            "schema" : {
               "x-algorand-format" : "RFC3339 String",
               "format" : "date-time",
               "type" : "string"
            },
            "name" : "before-time",
            "description" : "Include results before the given time. Must be an RFC 3339 formatted string."
         },
         "next" : {
            "name" : "next",
            "description" : "The next page of results. Use the next token provided by the previous results.",
            "schema" : {
               "type" : "string"
            },
            "in" : "query"
         },
         "format" : {
            "in" : "query",
            "schema" : {
               "enum" : [
                  "json",
                  "msgpack"
               ],
               "type" : "string"
            },
            "name" : "format",
            "description" : "Configures whether the response object is JSON or MessagePack encoded."
         },
         "round-number" : {
            "name" : "round-number",
            "description" : "Round number",
            "required" : true,
            "in" : "path",
            "schema" : {
               "type" : "integer"
            }
         },
         "sig-type" : {
            "name" : "sig-type",
            "description" : "SigType filters just results using the specified type of signature:\n* sig - Standard\n* msig - MultiSig\n* lsig - LogicSig",
            "in" : "query",
            "schema" : {
               "type" : "string",
               "enum" : [
                  "sig",
                  "msig",
                  "lsig"
               ]
            }
         },
         "after-time" : {
            "x-algorand-format" : "RFC3339 String",
            "name" : "after-time",
            "description" : "Include results after the given time. Must be an RFC 3339 formatted string.",
            "schema" : {
               "format" : "date-time",
               "x-algorand-format" : "RFC3339 String",
               "type" : "string"
            },
            "in" : "query"
         },
         "max-round" : {
            "schema" : {
               "type" : "integer"
            },
            "in" : "query",
            "name" : "max-round",
            "description" : "Include results at or before the specified max-round."
         },
         "currency-greater-than" : {
            "schema" : {
               "type" : "integer"
            },
            "in" : "query",
            "description" : "Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.",
            "name" : "currency-greater-than"
         },
         "limit" : {
            "in" : "query",
            "schema" : {
               "type" : "integer"
            },
            "name" : "limit",
            "description" : "Maximum number of results to return."
         },
         "tx-id" : {
            "x-algorand-format" : "Address",
            "schema" : {
               "type" : "string",
               "x-go-name" : "TxID",
               "x-algorand-format" : "Address"
            },
            "in" : "query",
            "x-go-name" : "TxID",
            "description" : "Lookup the specific transaction by ID.",
            "name" : "tx-id"
         },
         "tx-type" : {
            "in" : "query",
            "schema" : {
               "type" : "string",
               "enum" : [
                  "pay",
                  "keyreg",
                  "acfg",
                  "axfer",
                  "afrz"
               ]
            },
            "name" : "tx-type"
         },
         "max" : {
            "description" : "Truncated number of transactions to display. If max=0, returns all pending txns.",
            "name" : "max",
            "in" : "query",
            "schema" : {
               "type" : "integer"
            }
         },
         "address" : {
            "x-algorand-format" : "RFC3339 String",
            "schema" : {
               "type" : "string",
               "x-algorand-format" : "RFC3339 String"
            },
            "in" : "query",
            "description" : "Only include transactions with this address in one of the transaction fields.",
            "name" : "address"
         },
         "asset-id" : {
            "x-go-name" : "AssetID",
            "description" : "Asset ID",
            "name" : "asset-id",
            "schema" : {
               "x-go-name" : "AssetID",
               "type" : "integer"
            },
            "in" : "query"
         },
         "exclude-close-to" : {
            "in" : "query",
            "schema" : {
               "type" : "boolean"
            },
            "description" : "Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true.",
            "name" : "exclude-close-to"
         },
         "min-round" : {
            "in" : "query",
            "schema" : {
               "type" : "integer"
            },
            "name" : "min-round",
            "description" : "Include results at or after the specified min-round."
         },
         "address-role" : {
            "in" : "query",
            "schema" : {
               "enum" : [
                  "sender",
                  "receiver",
                  "freeze-target"
               ],
               "type" : "string"
            },
            "name" : "address-role",
            "description" : "Combine with the address parameter to define what type of address to search for."
         },
         "note-prefix" : {
            "in" : "query",
            "schema" : {
               "type" : "string"
            },
            "name" : "note-prefix",
            "description" : "Specifies a prefix which must be contained in the note field."
         },
         "round" : {
            "in" : "query",
            "schema" : {
               "type" : "integer"
            },
            "name" : "round",
            "description" : "Include results for the specified round."
         }
      }
   },
   "openapi" : "3.0.1",
   "tags" : [
      {
         "name" : "private"
      }
   ],
   "paths" : {
      "/v2/register-participation-keys/{address}" : {
         "post" : {
            "tags" : [
               "private"
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "type" : "object",
                           "required" : [
                              "txId"
                           ],
                           "properties" : {
                              "txId" : {
                                 "type" : "string",
                                 "description" : "encoding of the transaction hash."
                              }
                           }
                        }
                     }
                  },
                  "description" : "Transaction ID of the submission."
               }
            },
            "parameters" : [
               {
                  "in" : "path",
                  "schema" : {
                     "type" : "string"
                  },
                  "required" : true,
                  "name" : "address",
                  "description" : "The `account-id` to update, or `all` to update all accounts."
               },
               {
                  "in" : "query",
                  "schema" : {
                     "default" : 1000,
                     "type" : "integer"
                  },
                  "description" : "The fee to use when submitting key registration transactions. Defaults to the suggested fee.",
                  "name" : "fee"
               },
               {
                  "description" : "value to use for two-level participation key.",
                  "name" : "key-dilution",
                  "in" : "query",
                  "schema" : {
                     "type" : "integer"
                  }
               },
               {
                  "in" : "query",
                  "schema" : {
                     "type" : "integer"
                  },
                  "name" : "round-last-valid",
                  "description" : "The last round for which the generated participation keys will be valid."
               },
               {
                  "name" : "no-wait",
                  "description" : "Don't wait for transaction to commit before returning response.",
                  "in" : "query",
                  "schema" : {
                     "type" : "boolean"
                  }
               }
            ],
            "operationId" : "RegisterParticipationKeys",
            "description" : "Generate (or renew) and register participation keys on the node for a given account address."
         }
      },
      "/v2/teal/compile" : {
         "post" : {
            "summary" : "Compile TEAL source code to binary, produce its hash",
            "x-codegen-request-body-name" : "source",
            "responses" : {
               "500" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Internal Error"
               },
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "required" : [
                              "hash",
                              "result"
                           ],
                           "type" : "object",
                           "properties" : {
                              "result" : {
                                 "description" : "base64 encoded program bytes",
                                 "type" : "string"
                              },
                              "hash" : {
                                 "type" : "string",
                                 "description" : "base32 SHA512_256 of program bytes (Address style)"
                              }
                           }
                        }
                     }
                  },
                  "description" : "Teal compile Result"
               },
               "400" : {
                  "description" : "Bad Request - Teal Compile Error",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "401" : {
                  "description" : "Invalid API Token",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "default" : {
                  "content" : {},
                  "description" : "Unknown Error"
               }
            },
            "requestBody" : {
               "required" : true,
               "description" : "TEAL source code to be compiled",
               "content" : {
                  "text/plain" : {
                     "schema" : {
                        "type" : "string"
                     }
                  }
               }
            },
            "description" : "Given TEAL source code in plain text, return base64 encoded program bytes and base32 SHA512_256 hash of program bytes (Address style).",
            "operationId" : "TealCompile"
         }
      },
      "/v2/shutdown" : {
         "post" : {
            "description" : "Special management endpoint to shutdown the node. Optionally provide a timeout parameter to indicate that the node should begin shutting down after a number of seconds.",
            "operationId" : "ShutdownNode",
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "type" : "object"
                        }
                     }
                  },
                  "description" : "(empty)"
               }
            },
            "tags" : [
               "private"
            ],
            "parameters" : [
               {
                  "schema" : {
                     "default" : 0,
                     "type" : "integer"
                  },
                  "in" : "query",
                  "name" : "timeout"
               }
            ]
         }
      },
      "/v2/accounts/{address}" : {
         "get" : {
            "operationId" : "AccountInformation",
            "description" : "Given a specific account public key, this call returns the accounts status, balance and spendable amounts",
            "responses" : {
               "500" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Internal Error"
               },
               "default" : {
                  "description" : "Unknown Error",
                  "content" : {}
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Malformed address"
               },
               "200" : {
                  "description" : "(empty)",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/Account"
                        }
                     }
                  }
               },
               "401" : {
                  "description" : "Invalid API Token",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "parameters" : [
               {
                  "schema" : {
                     "type" : "string",
                     "pattern" : "[A-Z0-9]{58}"
                  },
                  "in" : "path",
                  "required" : true,
                  "name" : "address",
                  "description" : "An account public key"
               }
            ],
            "summary" : "Get account information."
         }
      },
      "/v2/accounts/{address}/transactions/pending" : {
         "get" : {
            "operationId" : "GetPendingTransactionsByAddress",
            "description" : "Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX = 0, returns all pending transactions.\n",
            "responses" : {
               "200" : {
                  "description" : "A potentially truncated list of transactions currently in the node's transaction pool. You can compute whether or not the list is truncated if the number of elements in the **top-transactions** array is fewer than **total-transactions**.",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "type" : "object",
                           "description" : "PendingTransactions is an array of signed transactions exactly as they were submitted.",
                           "required" : [
                              "top-transactions",
                              "total-transactions"
                           ],
                           "properties" : {
                              "top-transactions" : {
                                 "description" : "An array of signed transaction objects.",
                                 "type" : "array",
                                 "items" : {
                                    "type" : "object",
                                    "x-algorand-format" : "SignedTransaction",
                                    "properties" : {}
                                 }
                              },
                              "total-transactions" : {
                                 "type" : "integer",
                                 "description" : "Total number of transactions in the pool."
                              }
                           }
                        }
                     }
                  }
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Max must be a non-negative integer"
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Invalid API Token"
               },
               "default" : {
                  "description" : "Unknown Error",
                  "content" : {}
               },
               "500" : {
                  "description" : "Internal Error",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "parameters" : [
               {
                  "name" : "address",
                  "description" : "An account public key",
                  "required" : true,
                  "schema" : {
                     "pattern" : "[A-Z0-9]{58}",
                     "type" : "string"
                  },
                  "in" : "path"
               },
               {
                  "description" : "Truncated number of transactions to display. If max=0, returns all pending txns.",
                  "name" : "max",
                  "schema" : {
                     "type" : "integer"
                  },
                  "in" : "query"
               },
               {
                  "in" : "query",
                  "schema" : {
                     "type" : "string",
                     "enum" : [
                        "json",
                        "msgpack"
                     ]
                  },
                  "name" : "format",
                  "description" : "Configures whether the response object is JSON or MessagePack encoded."
               }
            ],
            "summary" : "Get a list of unconfirmed transactions currently in the transaction pool by address."
         }
      },
      "/v2/ledger/supply" : {
         "get" : {
            "summary" : "Get the current supply reported by the ledger.",
            "responses" : {
               "401" : {
                  "description" : "Invalid API Token",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "description" : "Supply represents the current supply of MicroAlgos in the system",
                           "type" : "object",
                           "required" : [
                              "current_round",
                              "online-money",
                              "total-money"
                           ],
                           "properties" : {
                              "total-money" : {
                                 "description" : "TotalMoney",
                                 "type" : "integer"
                              },
                              "online-money" : {
                                 "type" : "integer",
                                 "description" : "OnlineMoney"
                              },
                              "current_round" : {
                                 "type" : "integer",
                                 "description" : "Round"
                              }
                           }
                        }
                     }
                  },
                  "description" : "Supply represents the current supply of MicroAlgos in the system."
               },
               "default" : {
                  "content" : {},
                  "description" : "Unknown Error"
               }
            },
            "operationId" : "GetSupply"
         }
      },
      "/v2/blocks/{round}" : {
         "get" : {
            "summary" : "Get the block for the given round.",
            "parameters" : [
               {
                  "schema" : {
                     "type" : "string",
                     "enum" : [
                        "json",
                        "msgpack"
                     ]
                  },
                  "in" : "query",
                  "description" : "Configures whether the response object is JSON or MessagePack encoded.",
                  "name" : "format"
               },
               {
                  "required" : true,
                  "in" : "path",
                  "schema" : {
                     "minimum" : 0,
                     "type" : "integer"
                  },
                  "name" : "round",
                  "description" : "The round from which to fetch block information."
               }
            ],
            "responses" : {
               "default" : {
                  "content" : {},
                  "description" : "Unknown Error"
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     },
                     "application/msgpack" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Invalid API Token"
               },
               "200" : {
                  "description" : "Encoded block object.",
                  "content" : {
                     "application/msgpack" : {
                        "schema" : {
                           "type" : "object",
                           "required" : [
                              "block"
                           ],
                           "properties" : {
                              "cert" : {
                                 "description" : "Optional certificate object. This is only included when the format is set to message pack.",
                                 "type" : "object",
                                 "properties" : {},
                                 "x-algorand-format" : "BlockCertificate"
                              },
                              "block" : {
                                 "description" : "Block header data.",
                                 "type" : "object",
                                 "properties" : {},
                                 "x-algorand-format" : "BlockHeader"
                              }
                           }
                        }
                     },
                     "application/json" : {
                        "schema" : {
                           "required" : [
                              "block"
                           ],
                           "type" : "object",
                           "properties" : {
                              "block" : {
                                 "description" : "Block header data.",
                                 "type" : "object",
                                 "x-algorand-format" : "BlockHeader",
                                 "properties" : {}
                              },
                              "cert" : {
                                 "x-algorand-format" : "BlockCertificate",
                                 "properties" : {},
                                 "type" : "object",
                                 "description" : "Optional certificate object. This is only included when the format is set to message pack."
                              }
                           }
                        }
                     }
                  }
               },
               "400" : {
                  "content" : {
                     "application/msgpack" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     },
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Bad Request - Non integer number"
               },
               "404" : {
                  "description" : "None existing block ",
                  "content" : {
                     "application/msgpack" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     },
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "500" : {
                  "description" : "Internal Error",
                  "content" : {
                     "application/msgpack" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     },
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "operationId" : "GetBlock"
         }
      },
      "/v2/status" : {
         "get" : {
            "operationId" : "GetStatus",
            "summary" : "Gets the current node status.",
            "responses" : {
               "default" : {
                  "content" : {},
                  "description" : "Unknown Error"
               },
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "properties" : {
                              "next-version-supported" : {
                                 "description" : "NextVersionSupported indicates whether the next consensus version is supported by this node",
                                 "type" : "boolean"
                              },
                              "catchup-time" : {
                                 "description" : "CatchupTime in nanoseconds",
                                 "type" : "integer"
                              },
                              "next-version-round" : {
                                 "type" : "integer",
                                 "description" : "NextVersionRound is the round at which the next consensus version will apply"
                              },
                              "next-version" : {
                                 "description" : "NextVersion of consensus protocol to use",
                                 "type" : "string"
                              },
                              "time-since-last-round" : {
                                 "description" : "TimeSinceLastRound in nanoseconds",
                                 "type" : "integer"
                              },
                              "last-round" : {
                                 "type" : "integer",
                                 "description" : "LastRound indicates the last round seen"
                              },
                              "last-version" : {
                                 "type" : "string",
                                 "description" : "LastVersion indicates the last consensus version supported"
                              },
                              "stopped-at-unsupported-round" : {
                                 "type" : "boolean",
                                 "description" : "StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress"
                              }
                           },
                           "required" : [
                              "catchup-time",
                              "last-round",
                              "last-version",
                              "next-version",
                              "next-version-round",
                              "next-version-supported",
                              "stopped-at-unsupported-round",
                              "time-since-last-round"
                           ],
                           "type" : "object",
                           "description" : "NodeStatus contains the information about a node status"
                        }
                     }
                  },
                  "description" : "(empty)"
               },
               "401" : {
                  "description" : "Invalid API Token",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "type" : "string"
                        }
                     }
                  },
                  "description" : "Internal Error"
               }
            }
         }
      },
      "/v2/transactions/params" : {
         "get" : {
            "operationId" : "TransactionParams",
            "responses" : {
               "default" : {
                  "description" : "Unknown Error",
                  "content" : {}
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Invalid API Token"
               },
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "required" : [
                              "consensus-version",
                              "fee",
                              "genesis-hash",
                              "genesis-id",
                              "last-round",
                              "min-fee"
                           ],
                           "x-go-package" : "github.com/algorand/go-algorand/daemon/algod/api/spec/v1",
                           "description" : "TransactionParams contains the parameters that help a client construct\na new transaction.",
                           "type" : "object",
                           "properties" : {
                              "genesis-hash" : {
                                 "description" : "GenesisHash is the hash of the genesis block.",
                                 "type" : "string",
                                 "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                 "format" : "byte"
                              },
                              "min-fee" : {
                                 "description" : "The minimum transaction fee (not per byte) required for the\ntxn to validate for the current network protocol.",
                                 "type" : "integer"
                              },
                              "genesis-id" : {
                                 "type" : "string",
                                 "description" : "GenesisID is an ID listed in the genesis block."
                              },
                              "consensus-version" : {
                                 "description" : "ConsensusVersion indicates the consensus protocol version\nas of LastRound.",
                                 "type" : "string"
                              },
                              "last-round" : {
                                 "description" : "LastRound indicates the last round seen",
                                 "type" : "integer"
                              },
                              "fee" : {
                                 "type" : "integer",
                                 "description" : "Fee is the suggested transaction fee\nFee is in units of micro-Algos per byte.\nFee may fall to zero but transactions must still have a fee of\nat least MinTxnFee for the current network protocol."
                              }
                           }
                        }
                     }
                  },
                  "description" : "TransactionParams contains the parameters that help a client construct a new transaction."
               }
            },
            "summary" : "Get parameters for constructing a new transaction"
         }
      },
      "/v2/status/wait-for-block-after/{round}/" : {
         "get" : {
            "description" : "Waits for a block to appear after round {round} and returns the node's status at the time.",
            "operationId" : "WaitForBlock",
            "summary" : "Gets the node status after waiting for the given round.",
            "responses" : {
               "500" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Internal Error"
               },
               "default" : {
                  "content" : {},
                  "description" : "Unknown Error"
               },
               "200" : {
                  "description" : "(empty)",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "properties" : {
                              "last-round" : {
                                 "description" : "LastRound indicates the last round seen",
                                 "type" : "integer"
                              },
                              "time-since-last-round" : {
                                 "type" : "integer",
                                 "description" : "TimeSinceLastRound in nanoseconds"
                              },
                              "stopped-at-unsupported-round" : {
                                 "description" : "StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress",
                                 "type" : "boolean"
                              },
                              "last-version" : {
                                 "description" : "LastVersion indicates the last consensus version supported",
                                 "type" : "string"
                              },
                              "next-version-round" : {
                                 "type" : "integer",
                                 "description" : "NextVersionRound is the round at which the next consensus version will apply"
                              },
                              "catchup-time" : {
                                 "type" : "integer",
                                 "description" : "CatchupTime in nanoseconds"
                              },
                              "next-version-supported" : {
                                 "description" : "NextVersionSupported indicates whether the next consensus version is supported by this node",
                                 "type" : "boolean"
                              },
                              "next-version" : {
                                 "description" : "NextVersion of consensus protocol to use",
                                 "type" : "string"
                              }
                           },
                           "required" : [
                              "catchup-time",
                              "last-round",
                              "last-version",
                              "next-version",
                              "next-version-round",
                              "next-version-supported",
                              "stopped-at-unsupported-round",
                              "time-since-last-round"
                           ],
                           "type" : "object",
                           "description" : "NodeStatus contains the information about a node status"
                        }
                     }
                  }
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Bad Request -- number must be non-negative integer "
               },
               "401" : {
                  "description" : "Invalid API Token",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "parameters" : [
               {
                  "name" : "round",
                  "description" : "The round to wait until returning status",
                  "required" : true,
                  "schema" : {
                     "minimum" : 0,
                     "type" : "integer"
                  },
                  "in" : "path"
               }
            ]
         }
      },
      "/v2/transactions" : {
         "post" : {
            "summary" : "Broadcasts a raw transaction to the network.",
            "x-codegen-request-body-name" : "rawtxn",
            "requestBody" : {
               "required" : true,
               "content" : {
                  "application/x-binary" : {
                     "schema" : {
                        "type" : "string",
                        "format" : "binary"
                     }
                  }
               },
               "description" : "The byte encoded signed transaction to broadcast to network"
            },
            "responses" : {
               "default" : {
                  "content" : {},
                  "description" : "Unknown Error"
               },
               "200" : {
                  "description" : "Transaction ID of the submission.",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "type" : "object",
                           "required" : [
                              "txId"
                           ],
                           "properties" : {
                              "txId" : {
                                 "description" : "encoding of the transaction hash.",
                                 "type" : "string"
                              }
                           }
                        }
                     }
                  }
               },
               "400" : {
                  "description" : "Bad Request - Malformed Algorand transaction ",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Invalid API Token"
               },
               "500" : {
                  "description" : "Internal Error",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "operationId" : "RawTransaction"
         }
      },
      "/v2/transactions/pending/{txid}" : {
         "get" : {
            "summary" : "Get a specific pending transaction.",
            "parameters" : [
               {
                  "required" : true,
                  "in" : "path",
                  "schema" : {
                     "type" : "string",
                     "pattern" : "[A-Z0-9]+"
                  },
                  "description" : "A transaction id",
                  "name" : "txid"
               },
               {
                  "name" : "format",
                  "description" : "Configures whether the response object is JSON or MessagePack encoded.",
                  "schema" : {
                     "type" : "string",
                     "enum" : [
                        "json",
                        "msgpack"
                     ]
                  },
                  "in" : "query"
               }
            ],
            "responses" : {
               "default" : {
                  "content" : {},
                  "description" : "Unknown Error"
               },
               "400" : {
                  "description" : "Bad Request",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "required" : [
                              "pool-error",
                              "txn"
                           ],
                           "type" : "object",
                           "description" : "Details about a pending transaction. If the transaction was recently confirmed, includes confirmation details like the round and reward details.",
                           "properties" : {
                              "close-rewards" : {
                                 "type" : "integer",
                                 "description" : "Rewards in microalgos applied to the close remainder to account."
                              },
                              "pool-error" : {
                                 "type" : "string",
                                 "description" : "Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error.\n"
                              },
                              "asset-index" : {
                                 "description" : "The asset index if the transaction was found and it created an asset.",
                                 "type" : "integer"
                              },
                              "receiver-rewards" : {
                                 "type" : "integer",
                                 "description" : "Rewards in microalgos applied to the receiver account."
                              },
                              "sender-rewards" : {
                                 "type" : "integer",
                                 "description" : "Rewards in microalgos applied to the sender account."
                              },
                              "closing-amount" : {
                                 "description" : "Closing amount for the transaction.",
                                 "type" : "integer"
                              },
                              "confirmed-round" : {
                                 "description" : "The round where this transaction was confirmed, if present.",
                                 "type" : "integer"
                              },
                              "txn" : {
                                 "properties" : {},
                                 "x-algorand-format" : "SignedTransaction",
                                 "description" : "The raw signed transaction.",
                                 "type" : "object"
                              }
                           }
                        }
                     }
                  },
                  "description" : "Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed:\n- transaction committed (committed round > 0)\n- transaction still in the pool (committed round = 0, pool error = \"\")\n- transaction removed from pool due to error (committed round = 0, pool error != \"\")\n\nOr the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error."
               },
               "401" : {
                  "description" : "Invalid API Token",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "404" : {
                  "description" : "Transaction Not Found",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "description" : "Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed:\n- transaction committed (committed round > 0) - transaction still in the pool (committed round = 0, pool error = \"\") - transaction removed from pool due to error (committed round = 0, pool error != \"\")\nOr the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error.\n",
            "operationId" : "PendingTransactionInformation"
         }
      },
      "/v2/transactions/pending" : {
         "get" : {
            "operationId" : "GetPendingTransactions",
            "description" : "Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX = 0, returns all pending transactions.\n",
            "responses" : {
               "500" : {
                  "content" : {
                     "application/msgpack" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     },
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Internal Error"
               },
               "default" : {
                  "description" : "Unknown Error",
                  "content" : {}
               },
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "properties" : {
                              "total-transactions" : {
                                 "type" : "integer",
                                 "description" : "Total number of transactions in the pool."
                              },
                              "top-transactions" : {
                                 "description" : "An array of signed transaction objects.",
                                 "type" : "array",
                                 "items" : {
                                    "type" : "object",
                                    "properties" : {},
                                    "x-algorand-format" : "SignedTransaction"
                                 }
                              }
                           },
                           "required" : [
                              "top-transactions",
                              "total-transactions"
                           ],
                           "type" : "object",
                           "description" : "PendingTransactions is an array of signed transactions exactly as they were submitted."
                        }
                     },
                     "application/msgpack" : {
                        "schema" : {
                           "type" : "object",
                           "description" : "PendingTransactions is an array of signed transactions exactly as they were submitted.",
                           "required" : [
                              "top-transactions",
                              "total-transactions"
                           ],
                           "properties" : {
                              "total-transactions" : {
                                 "description" : "Total number of transactions in the pool.",
                                 "type" : "integer"
                              },
                              "top-transactions" : {
                                 "items" : {
                                    "type" : "object",
                                    "x-algorand-format" : "SignedTransaction",
                                    "properties" : {}
                                 },
                                 "type" : "array",
                                 "description" : "An array of signed transaction objects."
                              }
                           }
                        }
                     }
                  },
                  "description" : "A potentially truncated list of transactions currently in the node's transaction pool. You can compute whether or not the list is truncated if the number of elements in the **top-transactions** array is fewer than **total-transactions**."
               },
               "401" : {
                  "content" : {
                     "application/msgpack" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     },
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Invalid API Token"
               }
            },
            "parameters" : [
               {
                  "in" : "query",
                  "schema" : {
                     "type" : "integer"
                  },
                  "description" : "Truncated number of transactions to display. If max=0, returns all pending txns.",
                  "name" : "max"
               },
               {
                  "description" : "Configures whether the response object is JSON or MessagePack encoded.",
                  "name" : "format",
                  "schema" : {
                     "type" : "string",
                     "enum" : [
                        "json",
                        "msgpack"
                     ]
                  },
                  "in" : "query"
               }
            ],
            "summary" : "Get a list of unconfirmed transactions currently in the transaction pool."
         }
      }
   },
   "security" : [
      {
         "api_key" : []
      }
   ],
   "servers" : [
      {
         "url" : "http://localhost/"
      },
      {
         "url" : "https://localhost/"
      }
   ]
}
