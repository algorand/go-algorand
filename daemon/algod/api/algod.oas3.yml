{
   "servers" : [
      {
         "url" : "http://localhost/"
      },
      {
         "url" : "https://localhost/"
      }
   ],
   "components" : {
      "parameters" : {
         "address-role" : {
            "description" : "Combine with the address parameter to define what type of address to search for.",
            "in" : "query",
            "schema" : {
               "enum" : [
                  "sender",
                  "receiver",
                  "freeze-target"
               ],
               "type" : "string"
            },
            "name" : "address-role"
         },
         "currency-less-than" : {
            "description" : "Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.",
            "in" : "query",
            "name" : "currency-less-than",
            "schema" : {
               "type" : "integer"
            }
         },
         "note-prefix" : {
            "in" : "query",
            "description" : "Specifies a prefix which must be contained in the note field.",
            "name" : "note-prefix",
            "schema" : {
               "type" : "string"
            }
         },
         "min-round" : {
            "description" : "Include results at or after the specified min-round.",
            "in" : "query",
            "schema" : {
               "type" : "integer"
            },
            "name" : "min-round"
         },
         "account-id" : {
            "in" : "path",
            "required" : true,
            "description" : "account string",
            "x-go-name" : "AccountID",
            "schema" : {
               "type" : "string",
               "x-go-name" : "AccountID"
            },
            "name" : "account-id"
         },
         "next" : {
            "description" : "The next page of results. Use the next token provided by the previous results.",
            "in" : "query",
            "schema" : {
               "type" : "string"
            },
            "name" : "next"
         },
         "address" : {
            "schema" : {
               "type" : "string",
               "x-algorand-format" : "RFC3339 String"
            },
            "x-algorand-format" : "RFC3339 String",
            "name" : "address",
            "in" : "query",
            "description" : "Only include transactions with this address in one of the transaction fields."
         },
         "tx-type" : {
            "in" : "query",
            "name" : "tx-type",
            "schema" : {
               "type" : "string",
               "enum" : [
                  "pay",
                  "keyreg",
                  "acfg",
                  "axfer",
                  "afrz"
               ]
            }
         },
         "asset-id" : {
            "schema" : {
               "x-go-name" : "AssetID",
               "type" : "integer"
            },
            "name" : "asset-id",
            "in" : "query",
            "x-go-name" : "AssetID",
            "description" : "Asset ID"
         },
         "currency-greater-than" : {
            "name" : "currency-greater-than",
            "schema" : {
               "type" : "integer"
            },
            "description" : "Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.",
            "in" : "query"
         },
         "format" : {
            "schema" : {
               "enum" : [
                  "json",
                  "msgpack"
               ],
               "type" : "string"
            },
            "name" : "format",
            "in" : "query",
            "description" : "Configures whether the response object is JSON or MessagePack encoded."
         },
         "sig-type" : {
            "schema" : {
               "type" : "string",
               "enum" : [
                  "sig",
                  "msig",
                  "lsig"
               ]
            },
            "name" : "sig-type",
            "description" : "SigType filters just results using the specified type of signature:\n* sig - Standard\n* msig - MultiSig\n* lsig - LogicSig",
            "in" : "query"
         },
         "max-round" : {
            "description" : "Include results at or before the specified max-round.",
            "in" : "query",
            "name" : "max-round",
            "schema" : {
               "type" : "integer"
            }
         },
         "exclude-close-to" : {
            "schema" : {
               "type" : "boolean"
            },
            "name" : "exclude-close-to",
            "description" : "Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true.",
            "in" : "query"
         },
         "max" : {
            "description" : "Truncated number of transactions to display. If max=0, returns all pending txns.",
            "in" : "query",
            "schema" : {
               "type" : "integer"
            },
            "name" : "max"
         },
         "round-number" : {
            "in" : "path",
            "required" : true,
            "description" : "Round number",
            "schema" : {
               "type" : "integer"
            },
            "name" : "round-number"
         },
         "round" : {
            "schema" : {
               "type" : "integer"
            },
            "name" : "round",
            "in" : "query",
            "description" : "Include results for the specified round."
         },
         "limit" : {
            "description" : "Maximum number of results to return.",
            "in" : "query",
            "schema" : {
               "type" : "integer"
            },
            "name" : "limit"
         },
         "after-time" : {
            "x-algorand-format" : "RFC3339 String",
            "schema" : {
               "format" : "date-time",
               "type" : "string",
               "x-algorand-format" : "RFC3339 String"
            },
            "name" : "after-time",
            "description" : "Include results after the given time. Must be an RFC 3339 formatted string.",
            "in" : "query"
         },
         "before-time" : {
            "name" : "before-time",
            "x-algorand-format" : "RFC3339 String",
            "schema" : {
               "x-algorand-format" : "RFC3339 String",
               "type" : "string",
               "format" : "date-time"
            },
            "in" : "query",
            "description" : "Include results before the given time. Must be an RFC 3339 formatted string."
         },
         "tx-id" : {
            "x-algorand-format" : "Address",
            "schema" : {
               "x-go-name" : "TxID",
               "type" : "string",
               "x-algorand-format" : "Address"
            },
            "name" : "tx-id",
            "in" : "query",
            "x-go-name" : "TxID",
            "description" : "Lookup the specific transaction by ID."
         }
      },
      "responses" : {
         "PostTransactionsResponse" : {
            "content" : {
               "application/json" : {
                  "schema" : {
                     "type" : "object",
                     "properties" : {
                        "txId" : {
                           "type" : "string",
                           "description" : "encoding of the transaction hash."
                        }
                     },
                     "required" : [
                        "txId"
                     ]
                  }
               }
            },
            "description" : "Transaction ID of the submission."
         },
         "AccountResponse" : {
            "description" : "(empty)",
            "content" : {
               "application/json" : {
                  "schema" : {
                     "$ref" : "#/components/schemas/Account"
                  }
               }
            }
         },
         "NodeStatusResponse" : {
            "description" : "(empty)",
            "content" : {
               "application/json" : {
                  "schema" : {
                     "type" : "object",
                     "properties" : {
                        "last-version" : {
                           "type" : "string",
                           "description" : "LastVersion indicates the last consensus version supported"
                        },
                        "next-version-supported" : {
                           "description" : "NextVersionSupported indicates whether the next consensus version is supported by this node",
                           "type" : "boolean"
                        },
                        "catchup-time" : {
                           "description" : "CatchupTime in nanoseconds",
                           "type" : "integer"
                        },
                        "last-round" : {
                           "description" : "LastRound indicates the last round seen",
                           "type" : "integer"
                        },
                        "next-version" : {
                           "description" : "NextVersion of consensus protocol to use",
                           "type" : "string"
                        },
                        "time-since-last-round" : {
                           "description" : "TimeSinceLastRound in nanoseconds",
                           "type" : "integer"
                        },
                        "next-version-round" : {
                           "description" : "NextVersionRound is the round at which the next consensus version will apply",
                           "type" : "integer"
                        },
                        "stopped-at-unsupported-round" : {
                           "description" : "StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress",
                           "type" : "boolean"
                        }
                     },
                     "required" : [
                        "catchup-time",
                        "last-round",
                        "last-version",
                        "next-version",
                        "next-version-round",
                        "next-version-supported",
                        "stopped-at-unsupported-round",
                        "time-since-last-round"
                     ],
                     "description" : "NodeStatus contains the information about a node status"
                  }
               }
            }
         },
         "BlockResponse" : {
            "description" : "Encoded block object.",
            "content" : {
               "application/json" : {
                  "schema" : {
                     "properties" : {
                        "block" : {
                           "properties" : {},
                           "description" : "Block header data.",
                           "x-algorand-format" : "BlockHeader",
                           "type" : "object"
                        },
                        "cert" : {
                           "type" : "object",
                           "x-algorand-format" : "BlockCertificate",
                           "properties" : {},
                           "description" : "Optional certificate object. This is only included when the format is set to message pack."
                        }
                     },
                     "required" : [
                        "block"
                     ],
                     "type" : "object"
                  }
               }
            }
         },
         "TransactionParametersResponse" : {
            "content" : {
               "application/json" : {
                  "schema" : {
                     "type" : "object",
                     "description" : "TransactionParams contains the parameters that help a client construct\na new transaction.",
                     "x-go-package" : "github.com/algorand/go-algorand/daemon/algod/api/spec/v1",
                     "required" : [
                        "consensus-version",
                        "fee",
                        "genesis-hash",
                        "genesis-id",
                        "last-round",
                        "min-fee"
                     ],
                     "properties" : {
                        "min-fee" : {
                           "description" : "The minimum transaction fee (not per byte) required for the\ntxn to validate for the current network protocol.",
                           "type" : "integer"
                        },
                        "fee" : {
                           "type" : "integer",
                           "description" : "Fee is the suggested transaction fee\nFee is in units of micro-Algos per byte.\nFee may fall to zero but transactions must still have a fee of\nat least MinTxnFee for the current network protocol."
                        },
                        "consensus-version" : {
                           "description" : "ConsensusVersion indicates the consensus protocol version\nas of LastRound.",
                           "type" : "string"
                        },
                        "last-round" : {
                           "type" : "integer",
                           "description" : "LastRound indicates the last round seen"
                        },
                        "genesis-hash" : {
                           "format" : "byte",
                           "description" : "GenesisHash is the hash of the genesis block.",
                           "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                           "type" : "string"
                        },
                        "genesis-id" : {
                           "description" : "GenesisID is an ID listed in the genesis block.",
                           "type" : "string"
                        }
                     }
                  }
               }
            },
            "description" : "TransactionParams contains the parameters that help a client construct a new transaction."
         },
         "PendingTransactionResponse" : {
            "content" : {
               "application/json" : {
                  "schema" : {
                     "required" : [
                        "pool-error",
                        "txn"
                     ],
                     "properties" : {
                        "closing-amount" : {
                           "description" : "Closing amount for the transaction.",
                           "type" : "integer"
                        },
                        "close-rewards" : {
                           "description" : "Rewards in microalgos applied to the close remainder to account.",
                           "type" : "integer"
                        },
                        "sender-rewards" : {
                           "type" : "integer",
                           "description" : "Rewards in microalgos applied to the sender account."
                        },
                        "receiver-rewards" : {
                           "description" : "Rewards in microalgos applied to the receiver account.",
                           "type" : "integer"
                        },
                        "confirmed-round" : {
                           "type" : "integer",
                           "description" : "The round where this transaction was confirmed, if present."
                        },
                        "txn" : {
                           "properties" : {},
                           "description" : "The raw signed transaction.",
                           "type" : "object",
                           "x-algorand-format" : "SignedTransaction"
                        },
                        "pool-error" : {
                           "type" : "string",
                           "description" : "Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error.\n"
                        },
                        "asset-index" : {
                           "type" : "integer",
                           "description" : "The asset index if the transaction was found and it created an asset."
                        }
                     },
                     "description" : "Details about a pending transaction. If the transaction was recently confirmed, includes confirmation details like the round and reward details.",
                     "type" : "object"
                  }
               }
            },
            "description" : "Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed:\n- transaction committed (committed round > 0)\n- transaction still in the pool (committed round = 0, pool error = \"\")\n- transaction removed from pool due to error (committed round = 0, pool error != \"\")\n\nOr the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error."
         },
         "PendingTransactionsResponse" : {
            "description" : "A potentially truncated list of transactions currently in the node's transaction pool. You can compute whether or not the list is truncated if the number of elements in the **top-transactions** array is fewer than **total-transactions**.",
            "content" : {
               "application/json" : {
                  "schema" : {
                     "type" : "object",
                     "description" : "PendingTransactions is an array of signed transactions exactly as they were submitted.",
                     "properties" : {
                        "top-transactions" : {
                           "type" : "array",
                           "description" : "An array of signed transaction objects.",
                           "items" : {
                              "type" : "object",
                              "x-algorand-format" : "SignedTransaction",
                              "properties" : {}
                           }
                        },
                        "total-transactions" : {
                           "type" : "integer",
                           "description" : "Total number of transactions in the pool."
                        }
                     },
                     "required" : [
                        "top-transactions",
                        "total-transactions"
                     ]
                  }
               }
            }
         },
         "PostCompileResponse" : {
            "description" : "Teal compile Result",
            "content" : {
               "application/json" : {
                  "schema" : {
                     "type" : "object",
                     "required" : [
                        "hash",
                        "result"
                     ],
                     "properties" : {
                        "hash" : {
                           "description" : "base32 SHA512_256 of program bytes (Address style)",
                           "type" : "string"
                        },
                        "result" : {
                           "description" : "base64 encoded program bytes",
                           "type" : "string"
                        }
                     }
                  }
               }
            }
         },
         "SupplyResponse" : {
            "content" : {
               "application/json" : {
                  "schema" : {
                     "description" : "Supply represents the current supply of MicroAlgos in the system",
                     "properties" : {
                        "online-money" : {
                           "type" : "integer",
                           "description" : "OnlineMoney"
                        },
                        "total-money" : {
                           "description" : "TotalMoney",
                           "type" : "integer"
                        },
                        "current_round" : {
                           "type" : "integer",
                           "description" : "Round"
                        }
                     },
                     "required" : [
                        "current_round",
                        "online-money",
                        "total-money"
                     ],
                     "type" : "object"
                  }
               }
            },
            "description" : "Supply represents the current supply of MicroAlgos in the system."
         }
      },
      "schemas" : {
         "AssetParams" : {
            "properties" : {
               "url" : {
                  "description" : "\\[au\\] URL where more information about the asset can be retrieved.",
                  "type" : "string"
               },
               "unit-name" : {
                  "description" : "\\[un\\] Name of a unit of this asset, as supplied by the creator.",
                  "type" : "string"
               },
               "reserve" : {
                  "type" : "string",
                  "description" : "\\[r\\] Address of account holding reserve (non-minted) units of this asset."
               },
               "freeze" : {
                  "type" : "string",
                  "description" : "\\[f\\] Address of account used to freeze holdings of this asset.  If empty, freezing is not permitted."
               },
               "metadata-hash" : {
                  "format" : "byte",
                  "description" : "\\[am\\] A commitment to some unspecified asset metadata. The format of this metadata is up to the application.",
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type" : "string"
               },
               "total" : {
                  "description" : "\\[t\\] The total number of units of this asset.",
                  "type" : "integer",
                  "x-algorand-format" : "uint64"
               },
               "manager" : {
                  "type" : "string",
                  "description" : "\\[m\\] Address of account used to manage the keys of this asset and to destroy it."
               },
               "creator" : {
                  "description" : "The address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case.",
                  "type" : "string"
               },
               "clawback" : {
                  "type" : "string",
                  "description" : "\\[c\\] Address of account used to clawback holdings of this asset.  If empty, clawback is not permitted."
               },
               "default-frozen" : {
                  "type" : "boolean",
                  "description" : "\\[df\\] Whether holdings of this asset are frozen by default."
               },
               "decimals" : {
                  "maximum" : 19,
                  "type" : "integer",
                  "description" : "\\[dc\\] The number of digits to use after the decimal point when displaying this asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths. If 2, the base unit of the asset is in hundredths, and so on. This value must be between 0 and 19 (inclusive).",
                  "minimum" : 0
               },
               "name" : {
                  "description" : "\\[an\\] Name of this asset, as supplied by the creator.",
                  "type" : "string"
               }
            },
            "required" : [
               "creator",
               "decimals",
               "total"
            ],
            "description" : "AssetParams specifies the parameters for an asset.\n\n\\[apar\\] when part of an AssetConfig transaction.\n\nDefinition:\ndata/transactions/asset.go : AssetParams",
            "type" : "object"
         },
         "AssetHolding" : {
            "properties" : {
               "creator" : {
                  "type" : "string",
                  "description" : "Address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case."
               },
               "amount" : {
                  "type" : "integer",
                  "description" : "\\[a\\] number of units held."
               },
               "asset-id" : {
                  "type" : "integer",
                  "description" : "Asset ID of the holding.",
                  "x-go-name" : "AssetID"
               },
               "is-frozen" : {
                  "description" : "\\[f\\] whether or not the holding is frozen.",
                  "type" : "boolean"
               }
            },
            "required" : [
               "amount",
               "asset-id",
               "creator",
               "is-frozen"
            ],
            "description" : "Describes an asset held by an account.\n\nDefinition:\ndata/basics/userBalance.go : AssetHolding",
            "type" : "object"
         },
         "VersionBuild" : {
            "required" : [
               "branch",
               "build-number",
               "channel",
               "commit-hash",
               "major",
               "minor"
            ],
            "properties" : {
               "build-number" : {
                  "type" : "integer"
               },
               "branch" : {
                  "type" : "string"
               },
               "minor" : {
                  "type" : "integer"
               },
               "commit-hash" : {
                  "format" : "byte",
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type" : "string"
               },
               "major" : {
                  "type" : "integer"
               },
               "channel" : {
                  "type" : "string"
               }
            },
            "description" : "the current algod build version information.",
            "type" : "object"
         },
         "Version" : {
            "type" : "object",
            "properties" : {
               "build" : {
                  "$ref" : "#/components/schemas/VersionBuild"
               },
               "genesis-id" : {
                  "type" : "string"
               },
               "genesis-hash" : {
                  "type" : "string",
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "format" : "byte"
               },
               "versions" : {
                  "items" : {
                     "type" : "string"
                  },
                  "type" : "array"
               }
            },
            "x-go-package" : "github.com/algorand/go-algorand/daemon/algod/api/spec/common",
            "required" : [
               "build",
               "genesis-hash",
               "genesis-id",
               "versions"
            ],
            "description" : "Note that we annotate this as a model so that legacy clients\ncan directly import a swagger generated Version model."
         },
         "Asset" : {
            "description" : "Specifies both the unique identifier and the parameters for an asset",
            "properties" : {
               "params" : {
                  "$ref" : "#/components/schemas/AssetParams"
               },
               "index" : {
                  "type" : "integer",
                  "description" : "unique asset identifier"
               }
            },
            "required" : [
               "index",
               "params"
            ],
            "type" : "object"
         },
         "ErrorResponse" : {
            "description" : "An error response with optional data field.",
            "properties" : {
               "data" : {
                  "type" : "string"
               },
               "message" : {
                  "type" : "string"
               }
            },
            "required" : [
               "message"
            ],
            "type" : "object"
         },
         "AccountParticipation" : {
            "type" : "object",
            "properties" : {
               "vote-first-valid" : {
                  "description" : "\\[voteFst\\] First round for which this participation is valid.",
                  "type" : "integer"
               },
               "vote-last-valid" : {
                  "description" : "\\[voteLst\\] Last round for which this participation is valid.",
                  "type" : "integer"
               },
               "vote-key-dilution" : {
                  "description" : "\\[voteKD\\] Number of subkeys in each batch of participation keys.",
                  "type" : "integer"
               },
               "selection-participation-key" : {
                  "type" : "string",
                  "format" : "byte",
                  "description" : "\\[sel\\] Selection public key (if any) currently registered for this round.",
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
               },
               "vote-participation-key" : {
                  "format" : "byte",
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "description" : "\\[vote\\] root participation public key (if any) currently registered for this round.",
                  "type" : "string"
               }
            },
            "required" : [
               "selection-participation-key",
               "vote-first-valid",
               "vote-key-dilution",
               "vote-last-valid",
               "vote-participation-key"
            ],
            "description" : "AccountParticipation describes the parameters used by this account in consensus protocol."
         },
         "Account" : {
            "properties" : {
               "amount-without-pending-rewards" : {
                  "description" : "specifies the amount of MicroAlgos in the account, without the pending rewards.",
                  "type" : "integer"
               },
               "pending-rewards" : {
                  "description" : "amount of MicroAlgos of pending rewards in this account.",
                  "type" : "integer"
               },
               "participation" : {
                  "$ref" : "#/components/schemas/AccountParticipation"
               },
               "amount" : {
                  "type" : "integer",
                  "description" : "\\[algo\\] total number of MicroAlgos in the account"
               },
               "reward-base" : {
                  "type" : "integer",
                  "description" : "\\[ebase\\] used as part of the rewards computation. Only applicable to accounts which are participating."
               },
               "rewards" : {
                  "description" : "\\[ern\\] total rewards of MicroAlgos the account has received, including pending rewards.",
                  "type" : "integer"
               },
               "round" : {
                  "description" : "The round for which this information is relevant.",
                  "type" : "integer"
               },
               "address" : {
                  "type" : "string",
                  "description" : "the account public key"
               },
               "created-assets" : {
                  "type" : "array",
                  "items" : {
                     "$ref" : "#/components/schemas/Asset"
                  },
                  "description" : "\\[apar\\] parameters of assets created by this account.\n\nNote: the raw account uses `map[int] -> Asset` for this type."
               },
               "status" : {
                  "description" : "\\[onl\\] delegation status of the account's MicroAlgos\n* Offline - indicates that the associated account is delegated.\n*  Online  - indicates that the associated account used as part of the delegation pool.\n*   NotParticipating - indicates that the associated account is neither a delegator nor a delegate.",
                  "type" : "string"
               },
               "assets" : {
                  "type" : "array",
                  "description" : "\\[asset\\] assets held by this account.\n\nNote the raw object uses `map[int] -> AssetHolding` for this type.",
                  "items" : {
                     "$ref" : "#/components/schemas/AssetHolding"
                  }
               },
               "type" : {
                  "enum" : [
                     "sig",
                     "msig",
                     "lsig"
                  ],
                  "type" : "string",
                  "description" : "Indicates what type of signature is used by this account, must be one of:\n* sig\n* msig\n* lsig"
               }
            },
            "required" : [
               "address",
               "amount",
               "amount-without-pending-rewards",
               "pending-rewards",
               "rewards",
               "round",
               "status"
            ],
            "description" : "Account information at a given round.\n\nDefinition:\ndata/basics/userBalance.go : AccountData\n",
            "type" : "object"
         }
      },
      "securitySchemes" : {
         "api_key" : {
            "in" : "header",
            "description" : "Generated header parameter. This token can be generated using the Goal command line tool. Example value ='b7e384d0317b8050ce45900a94a1931e28540e1f69b2d242b424659c341b4697'",
            "type" : "apiKey",
            "name" : "X-Algo-API-Token"
         }
      }
   },
   "paths" : {
      "/v2/status/wait-for-block-after/{round}/" : {
         "get" : {
            "operationId" : "WaitForBlock",
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "description" : "NodeStatus contains the information about a node status",
                           "required" : [
                              "catchup-time",
                              "last-round",
                              "last-version",
                              "next-version",
                              "next-version-round",
                              "next-version-supported",
                              "stopped-at-unsupported-round",
                              "time-since-last-round"
                           ],
                           "properties" : {
                              "stopped-at-unsupported-round" : {
                                 "description" : "StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress",
                                 "type" : "boolean"
                              },
                              "last-version" : {
                                 "description" : "LastVersion indicates the last consensus version supported",
                                 "type" : "string"
                              },
                              "next-version-supported" : {
                                 "description" : "NextVersionSupported indicates whether the next consensus version is supported by this node",
                                 "type" : "boolean"
                              },
                              "catchup-time" : {
                                 "description" : "CatchupTime in nanoseconds",
                                 "type" : "integer"
                              },
                              "time-since-last-round" : {
                                 "type" : "integer",
                                 "description" : "TimeSinceLastRound in nanoseconds"
                              },
                              "next-version-round" : {
                                 "type" : "integer",
                                 "description" : "NextVersionRound is the round at which the next consensus version will apply"
                              },
                              "last-round" : {
                                 "description" : "LastRound indicates the last round seen",
                                 "type" : "integer"
                              },
                              "next-version" : {
                                 "description" : "NextVersion of consensus protocol to use",
                                 "type" : "string"
                              }
                           },
                           "type" : "object"
                        }
                     }
                  },
                  "description" : "(empty)"
               },
               "401" : {
                  "description" : "Invalid API Token",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Bad Request -- number must be non-negative integer "
               },
               "default" : {
                  "content" : {},
                  "description" : "Unknown Error"
               },
               "500" : {
                  "description" : "Internal Error",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "summary" : "Gets the node status after waiting for the given round.",
            "parameters" : [
               {
                  "in" : "path",
                  "description" : "The round to wait until returning status",
                  "required" : true,
                  "name" : "round",
                  "schema" : {
                     "type" : "integer",
                     "minimum" : 0
                  }
               }
            ],
            "description" : "Waits for a block to appear after round {round} and returns the node's status at the time."
         }
      },
      "/v2/transactions" : {
         "post" : {
            "summary" : "Broadcasts a raw transaction to the network.",
            "operationId" : "RawTransaction",
            "responses" : {
               "200" : {
                  "description" : "Transaction ID of the submission.",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "type" : "object",
                           "required" : [
                              "txId"
                           ],
                           "properties" : {
                              "txId" : {
                                 "type" : "string",
                                 "description" : "encoding of the transaction hash."
                              }
                           }
                        }
                     }
                  }
               },
               "500" : {
                  "description" : "Internal Error",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "default" : {
                  "content" : {},
                  "description" : "Unknown Error"
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Bad Request - Malformed Algorand transaction "
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Invalid API Token"
               }
            },
            "x-codegen-request-body-name" : "rawtxn",
            "requestBody" : {
               "description" : "The byte encoded signed transaction to broadcast to network",
               "required" : true,
               "content" : {
                  "application/x-binary" : {
                     "schema" : {
                        "format" : "binary",
                        "type" : "string"
                     }
                  }
               }
            }
         }
      },
      "/v2/transactions/params" : {
         "get" : {
            "summary" : "Get parameters for constructing a new transaction",
            "responses" : {
               "200" : {
                  "description" : "TransactionParams contains the parameters that help a client construct a new transaction.",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "description" : "TransactionParams contains the parameters that help a client construct\na new transaction.",
                           "properties" : {
                              "last-round" : {
                                 "description" : "LastRound indicates the last round seen",
                                 "type" : "integer"
                              },
                              "consensus-version" : {
                                 "description" : "ConsensusVersion indicates the consensus protocol version\nas of LastRound.",
                                 "type" : "string"
                              },
                              "min-fee" : {
                                 "type" : "integer",
                                 "description" : "The minimum transaction fee (not per byte) required for the\ntxn to validate for the current network protocol."
                              },
                              "fee" : {
                                 "description" : "Fee is the suggested transaction fee\nFee is in units of micro-Algos per byte.\nFee may fall to zero but transactions must still have a fee of\nat least MinTxnFee for the current network protocol.",
                                 "type" : "integer"
                              },
                              "genesis-id" : {
                                 "description" : "GenesisID is an ID listed in the genesis block.",
                                 "type" : "string"
                              },
                              "genesis-hash" : {
                                 "format" : "byte",
                                 "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                 "description" : "GenesisHash is the hash of the genesis block.",
                                 "type" : "string"
                              }
                           },
                           "x-go-package" : "github.com/algorand/go-algorand/daemon/algod/api/spec/v1",
                           "required" : [
                              "consensus-version",
                              "fee",
                              "genesis-hash",
                              "genesis-id",
                              "last-round",
                              "min-fee"
                           ],
                           "type" : "object"
                        }
                     }
                  }
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Invalid API Token"
               },
               "default" : {
                  "description" : "Unknown Error",
                  "content" : {}
               }
            },
            "operationId" : "TransactionParams"
         }
      },
      "/v2/compile" : {
         "post" : {
            "x-codegen-request-body-name" : "source",
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "required" : [
                              "hash",
                              "result"
                           ],
                           "properties" : {
                              "result" : {
                                 "description" : "base64 encoded program bytes",
                                 "type" : "string"
                              },
                              "hash" : {
                                 "type" : "string",
                                 "description" : "base32 SHA512_256 of program bytes (Address style)"
                              }
                           },
                           "type" : "object"
                        }
                     }
                  },
                  "description" : "Teal compile Result"
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Invalid API Token"
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Bad Request - Teal Compile Error"
               },
               "default" : {
                  "content" : {},
                  "description" : "Unknown Error"
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Internal Error"
               }
            },
            "operationId" : "TealCompile",
            "summary" : "Compile TEAL source code to binary, produce its hash",
            "requestBody" : {
               "required" : true,
               "description" : "Teal source code to be compiled",
               "content" : {
                  "text/plain" : {
                     "schema" : {
                        "type" : "string"
                     }
                  }
               }
            }
         }
      },
      "/v2/ledger/supply" : {
         "get" : {
            "summary" : "Get the current supply reported by the ledger.",
            "operationId" : "GetSupply",
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "type" : "object",
                           "description" : "Supply represents the current supply of MicroAlgos in the system",
                           "properties" : {
                              "online-money" : {
                                 "description" : "OnlineMoney",
                                 "type" : "integer"
                              },
                              "total-money" : {
                                 "description" : "TotalMoney",
                                 "type" : "integer"
                              },
                              "current_round" : {
                                 "description" : "Round",
                                 "type" : "integer"
                              }
                           },
                           "required" : [
                              "current_round",
                              "online-money",
                              "total-money"
                           ]
                        }
                     }
                  },
                  "description" : "Supply represents the current supply of MicroAlgos in the system."
               },
               "401" : {
                  "description" : "Invalid API Token",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "default" : {
                  "content" : {},
                  "description" : "Unknown Error"
               }
            }
         }
      },
      "/v2/blocks/{round}" : {
         "get" : {
            "summary" : "Get the block for the given round.",
            "operationId" : "GetBlock",
            "responses" : {
               "200" : {
                  "description" : "Encoded block object.",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "required" : [
                              "block"
                           ],
                           "properties" : {
                              "cert" : {
                                 "description" : "Optional certificate object. This is only included when the format is set to message pack.",
                                 "properties" : {},
                                 "x-algorand-format" : "BlockCertificate",
                                 "type" : "object"
                              },
                              "block" : {
                                 "type" : "object",
                                 "x-algorand-format" : "BlockHeader",
                                 "properties" : {},
                                 "description" : "Block header data."
                              }
                           },
                           "type" : "object"
                        }
                     },
                     "application/msgpack" : {
                        "schema" : {
                           "properties" : {
                              "block" : {
                                 "x-algorand-format" : "BlockHeader",
                                 "type" : "object",
                                 "description" : "Block header data.",
                                 "properties" : {}
                              },
                              "cert" : {
                                 "description" : "Optional certificate object. This is only included when the format is set to message pack.",
                                 "properties" : {},
                                 "x-algorand-format" : "BlockCertificate",
                                 "type" : "object"
                              }
                           },
                           "required" : [
                              "block"
                           ],
                           "type" : "object"
                        }
                     }
                  }
               },
               "404" : {
                  "description" : "None existing block ",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     },
                     "application/msgpack" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "401" : {
                  "content" : {
                     "application/msgpack" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     },
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Invalid API Token"
               },
               "400" : {
                  "description" : "Bad Request - Non integer number",
                  "content" : {
                     "application/msgpack" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     },
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "500" : {
                  "description" : "Internal Error",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     },
                     "application/msgpack" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "default" : {
                  "description" : "Unknown Error",
                  "content" : {}
               }
            },
            "parameters" : [
               {
                  "description" : "Configures whether the response object is JSON or MessagePack encoded.",
                  "in" : "query",
                  "schema" : {
                     "enum" : [
                        "json",
                        "msgpack"
                     ],
                     "type" : "string"
                  },
                  "name" : "format"
               },
               {
                  "schema" : {
                     "type" : "integer",
                     "minimum" : 0
                  },
                  "name" : "round",
                  "in" : "path",
                  "required" : true,
                  "description" : "The round from which to fetch block information."
               }
            ]
         }
      },
      "/v2/accounts/{address}" : {
         "get" : {
            "summary" : "Get account information.",
            "operationId" : "AccountInformation",
            "responses" : {
               "200" : {
                  "description" : "(empty)",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/Account"
                        }
                     }
                  }
               },
               "500" : {
                  "description" : "Internal Error",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "default" : {
                  "description" : "Unknown Error",
                  "content" : {}
               },
               "400" : {
                  "description" : "Malformed address",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Invalid API Token"
               }
            },
            "description" : "Given a specific account public key, this call returns the accounts status, balance and spendable amounts",
            "parameters" : [
               {
                  "name" : "address",
                  "schema" : {
                     "pattern" : "[A-Z0-9]{58}",
                     "type" : "string"
                  },
                  "in" : "path",
                  "description" : "An account public key",
                  "required" : true
               }
            ]
         }
      },
      "/v2/transactions/pending/{txid}" : {
         "get" : {
            "description" : "Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed:\n- transaction committed (committed round > 0) - transaction still in the pool (committed round = 0, pool error = \"\") - transaction removed from pool due to error (committed round = 0, pool error != \"\")\nOr the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error.\n",
            "parameters" : [
               {
                  "in" : "path",
                  "description" : "A transaction id",
                  "required" : true,
                  "name" : "txid",
                  "schema" : {
                     "pattern" : "[A-Z0-9]+",
                     "type" : "string"
                  }
               },
               {
                  "description" : "Configures whether the response object is JSON or MessagePack encoded.",
                  "in" : "query",
                  "name" : "format",
                  "schema" : {
                     "type" : "string",
                     "enum" : [
                        "json",
                        "msgpack"
                     ]
                  }
               }
            ],
            "operationId" : "PendingTransactionInformation",
            "responses" : {
               "200" : {
                  "description" : "Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed:\n- transaction committed (committed round > 0)\n- transaction still in the pool (committed round = 0, pool error = \"\")\n- transaction removed from pool due to error (committed round = 0, pool error != \"\")\n\nOr the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error.",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "type" : "object",
                           "required" : [
                              "pool-error",
                              "txn"
                           ],
                           "properties" : {
                              "sender-rewards" : {
                                 "type" : "integer",
                                 "description" : "Rewards in microalgos applied to the sender account."
                              },
                              "receiver-rewards" : {
                                 "description" : "Rewards in microalgos applied to the receiver account.",
                                 "type" : "integer"
                              },
                              "close-rewards" : {
                                 "description" : "Rewards in microalgos applied to the close remainder to account.",
                                 "type" : "integer"
                              },
                              "closing-amount" : {
                                 "type" : "integer",
                                 "description" : "Closing amount for the transaction."
                              },
                              "pool-error" : {
                                 "type" : "string",
                                 "description" : "Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error.\n"
                              },
                              "txn" : {
                                 "description" : "The raw signed transaction.",
                                 "properties" : {},
                                 "x-algorand-format" : "SignedTransaction",
                                 "type" : "object"
                              },
                              "asset-index" : {
                                 "description" : "The asset index if the transaction was found and it created an asset.",
                                 "type" : "integer"
                              },
                              "confirmed-round" : {
                                 "description" : "The round where this transaction was confirmed, if present.",
                                 "type" : "integer"
                              }
                           },
                           "description" : "Details about a pending transaction. If the transaction was recently confirmed, includes confirmation details like the round and reward details."
                        }
                     }
                  }
               },
               "404" : {
                  "description" : "Transaction Not Found",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "401" : {
                  "description" : "Invalid API Token",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "400" : {
                  "description" : "Bad Request",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "default" : {
                  "content" : {},
                  "description" : "Unknown Error"
               }
            },
            "summary" : "Get a specific pending transaction."
         }
      },
      "/v2/transactions/pending" : {
         "get" : {
            "parameters" : [
               {
                  "name" : "max",
                  "schema" : {
                     "type" : "integer"
                  },
                  "description" : "Truncated number of transactions to display. If max=0, returns all pending txns.",
                  "in" : "query"
               },
               {
                  "description" : "Configures whether the response object is JSON or MessagePack encoded.",
                  "in" : "query",
                  "name" : "format",
                  "schema" : {
                     "type" : "string",
                     "enum" : [
                        "json",
                        "msgpack"
                     ]
                  }
               }
            ],
            "description" : "Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX = 0, returns all pending transactions.\n",
            "summary" : "Get a list of unconfirmed transactions currently in the transaction pool.",
            "responses" : {
               "default" : {
                  "content" : {},
                  "description" : "Unknown Error"
               },
               "500" : {
                  "description" : "Internal Error",
                  "content" : {
                     "application/msgpack" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     },
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "401" : {
                  "description" : "Invalid API Token",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     },
                     "application/msgpack" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "type" : "object",
                           "required" : [
                              "top-transactions",
                              "total-transactions"
                           ],
                           "properties" : {
                              "total-transactions" : {
                                 "description" : "Total number of transactions in the pool.",
                                 "type" : "integer"
                              },
                              "top-transactions" : {
                                 "description" : "An array of signed transaction objects.",
                                 "items" : {
                                    "properties" : {},
                                    "type" : "object",
                                    "x-algorand-format" : "SignedTransaction"
                                 },
                                 "type" : "array"
                              }
                           },
                           "description" : "PendingTransactions is an array of signed transactions exactly as they were submitted."
                        }
                     },
                     "application/msgpack" : {
                        "schema" : {
                           "properties" : {
                              "top-transactions" : {
                                 "items" : {
                                    "properties" : {},
                                    "type" : "object",
                                    "x-algorand-format" : "SignedTransaction"
                                 },
                                 "description" : "An array of signed transaction objects.",
                                 "type" : "array"
                              },
                              "total-transactions" : {
                                 "type" : "integer",
                                 "description" : "Total number of transactions in the pool."
                              }
                           },
                           "required" : [
                              "top-transactions",
                              "total-transactions"
                           ],
                           "description" : "PendingTransactions is an array of signed transactions exactly as they were submitted.",
                           "type" : "object"
                        }
                     }
                  },
                  "description" : "A potentially truncated list of transactions currently in the node's transaction pool. You can compute whether or not the list is truncated if the number of elements in the **top-transactions** array is fewer than **total-transactions**."
               }
            },
            "operationId" : "GetPendingTransactions"
         }
      },
      "/v2/status" : {
         "get" : {
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "type" : "object",
                           "description" : "NodeStatus contains the information about a node status",
                           "required" : [
                              "catchup-time",
                              "last-round",
                              "last-version",
                              "next-version",
                              "next-version-round",
                              "next-version-supported",
                              "stopped-at-unsupported-round",
                              "time-since-last-round"
                           ],
                           "properties" : {
                              "last-round" : {
                                 "description" : "LastRound indicates the last round seen",
                                 "type" : "integer"
                              },
                              "next-version" : {
                                 "type" : "string",
                                 "description" : "NextVersion of consensus protocol to use"
                              },
                              "next-version-round" : {
                                 "description" : "NextVersionRound is the round at which the next consensus version will apply",
                                 "type" : "integer"
                              },
                              "time-since-last-round" : {
                                 "type" : "integer",
                                 "description" : "TimeSinceLastRound in nanoseconds"
                              },
                              "last-version" : {
                                 "type" : "string",
                                 "description" : "LastVersion indicates the last consensus version supported"
                              },
                              "next-version-supported" : {
                                 "type" : "boolean",
                                 "description" : "NextVersionSupported indicates whether the next consensus version is supported by this node"
                              },
                              "catchup-time" : {
                                 "description" : "CatchupTime in nanoseconds",
                                 "type" : "integer"
                              },
                              "stopped-at-unsupported-round" : {
                                 "description" : "StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress",
                                 "type" : "boolean"
                              }
                           }
                        }
                     }
                  },
                  "description" : "(empty)"
               },
               "401" : {
                  "description" : "Invalid API Token",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "500" : {
                  "description" : "Internal Error",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "type" : "string"
                        }
                     }
                  }
               },
               "default" : {
                  "description" : "Unknown Error",
                  "content" : {}
               }
            },
            "operationId" : "GetStatus",
            "summary" : "Gets the current node status."
         }
      },
      "/v2/register-participation-keys/{address}" : {
         "post" : {
            "tags" : [
               "private"
            ],
            "parameters" : [
               {
                  "in" : "path",
                  "description" : "The `account-id` to update, or `all` to update all accounts.",
                  "required" : true,
                  "name" : "address",
                  "schema" : {
                     "type" : "string"
                  }
               },
               {
                  "name" : "fee",
                  "schema" : {
                     "type" : "integer",
                     "default" : 1000
                  },
                  "description" : "The fee to use when submitting key registration transactions. Defaults to the suggested fee.",
                  "in" : "query"
               },
               {
                  "description" : "value to use for two-level participation key.",
                  "in" : "query",
                  "schema" : {
                     "type" : "integer"
                  },
                  "name" : "key-dilution"
               },
               {
                  "schema" : {
                     "type" : "integer"
                  },
                  "name" : "round-last-valid",
                  "in" : "query",
                  "description" : "The last round for which the generated participation keys will be valid."
               },
               {
                  "schema" : {
                     "type" : "boolean"
                  },
                  "name" : "no-wait",
                  "description" : "Don't wait for transaction to commit before returning response.",
                  "in" : "query"
               }
            ],
            "description" : "Generate (or renew) and register participation keys on the node for a given account address.",
            "responses" : {
               "200" : {
                  "description" : "Transaction ID of the submission.",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "type" : "object",
                           "properties" : {
                              "txId" : {
                                 "description" : "encoding of the transaction hash.",
                                 "type" : "string"
                              }
                           },
                           "required" : [
                              "txId"
                           ]
                        }
                     }
                  }
               }
            },
            "operationId" : "RegisterParticipationKeys"
         }
      },
      "/v2/shutdown" : {
         "post" : {
            "operationId" : "ShutdownNode",
            "responses" : {
               "200" : {
                  "description" : "(empty)",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "type" : "object"
                        }
                     }
                  }
               }
            },
            "parameters" : [
               {
                  "in" : "query",
                  "schema" : {
                     "type" : "integer",
                     "default" : 0
                  },
                  "name" : "timeout"
               }
            ],
            "description" : "Special management endpoint to shutdown the node. Optionally provide a timeout parameter to indicate that the node should begin shutting down after a number of seconds.",
            "tags" : [
               "private"
            ]
         }
      },
      "/v2/accounts/{address}/transactions/pending" : {
         "get" : {
            "description" : "Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX = 0, returns all pending transactions.\n",
            "parameters" : [
               {
                  "description" : "An account public key",
                  "required" : true,
                  "in" : "path",
                  "name" : "address",
                  "schema" : {
                     "type" : "string",
                     "pattern" : "[A-Z0-9]{58}"
                  }
               },
               {
                  "schema" : {
                     "type" : "integer"
                  },
                  "name" : "max",
                  "description" : "Truncated number of transactions to display. If max=0, returns all pending txns.",
                  "in" : "query"
               },
               {
                  "schema" : {
                     "enum" : [
                        "json",
                        "msgpack"
                     ],
                     "type" : "string"
                  },
                  "name" : "format",
                  "in" : "query",
                  "description" : "Configures whether the response object is JSON or MessagePack encoded."
               }
            ],
            "operationId" : "GetPendingTransactionsByAddress",
            "responses" : {
               "500" : {
                  "description" : "Internal Error",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "default" : {
                  "description" : "Unknown Error",
                  "content" : {}
               },
               "400" : {
                  "description" : "Max must be a non-negative integer",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Invalid API Token"
               },
               "200" : {
                  "description" : "A potentially truncated list of transactions currently in the node's transaction pool. You can compute whether or not the list is truncated if the number of elements in the **top-transactions** array is fewer than **total-transactions**.",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "description" : "PendingTransactions is an array of signed transactions exactly as they were submitted.",
                           "required" : [
                              "top-transactions",
                              "total-transactions"
                           ],
                           "properties" : {
                              "total-transactions" : {
                                 "description" : "Total number of transactions in the pool.",
                                 "type" : "integer"
                              },
                              "top-transactions" : {
                                 "type" : "array",
                                 "description" : "An array of signed transaction objects.",
                                 "items" : {
                                    "properties" : {},
                                    "x-algorand-format" : "SignedTransaction",
                                    "type" : "object"
                                 }
                              }
                           },
                           "type" : "object"
                        }
                     }
                  }
               }
            },
            "summary" : "Get a list of unconfirmed transactions currently in the transaction pool by address."
         }
      }
   },
   "openapi" : "3.0.1",
   "security" : [
      {
         "api_key" : []
      }
   ],
   "tags" : [
      {
         "name" : "private"
      }
   ],
   "info" : {
      "contact" : {
         "url" : "https://www.algorand.com/get-in-touch/contact",
         "name" : "algorand",
         "email" : "contact@algorand.com"
      },
      "title" : "Algod REST API.",
      "description" : "API endpoint for algod operations.",
      "version" : "0.0.1"
   }
}
