{
  "components": {
    "parameters": {
      "account-id": {
        "description": "account string",
        "in": "path",
        "name": "account-id",
        "required": true,
        "schema": {
          "type": "string",
          "x-go-name": "AccountID"
        },
        "x-go-name": "AccountID"
      },
      "address": {
        "description": "Only include transactions with this address in one of the transaction fields.",
        "in": "query",
        "name": "address",
        "schema": {
          "type": "string"
        }
      },
      "address-role": {
        "description": "Combine with the address parameter to define what type of address to search for.",
        "in": "query",
        "name": "address-role",
        "schema": {
          "enum": [
            "sender",
            "receiver",
            "freeze-target"
          ],
          "type": "string"
        }
      },
      "after-time": {
        "description": "Include results after the given time. Must be an RFC 3339 formatted string.",
        "in": "query",
        "name": "after-time",
        "schema": {
          "format": "date-time",
          "type": "string",
          "x-algorand-format": "RFC3339 String"
        },
        "x-algorand-format": "RFC3339 String"
      },
      "asset-id": {
        "description": "Asset ID",
        "in": "query",
        "name": "asset-id",
        "schema": {
          "type": "integer",
          "x-go-name": "AssetID"
        },
        "x-go-name": "AssetID"
      },
      "before-time": {
        "description": "Include results before the given time. Must be an RFC 3339 formatted string.",
        "in": "query",
        "name": "before-time",
        "schema": {
          "format": "date-time",
          "type": "string",
          "x-algorand-format": "RFC3339 String"
        },
        "x-algorand-format": "RFC3339 String"
      },
      "catchpoint": {
        "description": "A catch point",
        "in": "path",
        "name": "catchpoint",
        "required": true,
        "schema": {
          "format": "catchpoint",
          "pattern": "[0-9]{1,10}#[A-Z0-9]{1,53}",
          "type": "string",
          "x-algorand-format": "Catchpoint String"
        },
        "x-algorand-format": "Catchpoint String"
      },
      "currency-greater-than": {
        "description": "Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.",
        "in": "query",
        "name": "currency-greater-than",
        "schema": {
          "type": "integer"
        }
      },
      "currency-less-than": {
        "description": "Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.",
        "in": "query",
        "name": "currency-less-than",
        "schema": {
          "type": "integer"
        }
      },
      "exclude-close-to": {
        "description": "Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true.",
        "in": "query",
        "name": "exclude-close-to",
        "schema": {
          "type": "boolean"
        }
      },
      "format": {
        "description": "Configures whether the response object is JSON or MessagePack encoded.",
        "in": "query",
        "name": "format",
        "schema": {
          "enum": [
            "json",
            "msgpack"
          ],
          "type": "string"
        }
      },
      "limit": {
        "description": "Maximum number of results to return.",
        "in": "query",
        "name": "limit",
        "schema": {
          "type": "integer"
        }
      },
      "max": {
        "description": "Truncated number of transactions to display. If max=0, returns all pending txns.",
        "in": "query",
        "name": "max",
        "schema": {
          "type": "integer"
        }
      },
      "max-round": {
        "description": "Include results at or before the specified max-round.",
        "in": "query",
        "name": "max-round",
        "schema": {
          "type": "integer"
        }
      },
      "min-round": {
        "description": "Include results at or after the specified min-round.",
        "in": "query",
        "name": "min-round",
        "schema": {
          "type": "integer"
        }
      },
      "next": {
        "description": "The next page of results. Use the next token provided by the previous results.",
        "in": "query",
        "name": "next",
        "schema": {
          "type": "string"
        }
      },
      "note-prefix": {
        "description": "Specifies a prefix which must be contained in the note field.",
        "in": "query",
        "name": "note-prefix",
        "schema": {
          "type": "string",
          "x-algorand-format": "base64"
        },
        "x-algorand-format": "base64"
      },
      "round": {
        "description": "Include results for the specified round.",
        "in": "query",
        "name": "round",
        "schema": {
          "type": "integer"
        }
      },
      "round-number": {
        "description": "Round number",
        "in": "path",
        "name": "round-number",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "sig-type": {
        "description": "SigType filters just results using the specified type of signature:\n* sig - Standard\n* msig - MultiSig\n* lsig - LogicSig",
        "in": "query",
        "name": "sig-type",
        "schema": {
          "enum": [
            "sig",
            "msig",
            "lsig"
          ],
          "type": "string"
        }
      },
      "tx-id": {
        "description": "Lookup the specific transaction by ID.",
        "in": "query",
        "name": "tx-id",
        "schema": {
          "type": "string",
          "x-algorand-format": "Address",
          "x-go-name": "TxID"
        },
        "x-algorand-format": "Address",
        "x-go-name": "TxID"
      },
      "tx-type": {
        "in": "query",
        "name": "tx-type",
        "schema": {
          "enum": [
            "pay",
            "keyreg",
            "acfg",
            "axfer",
            "afrz",
            "appl"
          ],
          "type": "string"
        }
      }
    },
    "responses": {
      "AccountResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Account"
            }
          }
        },
        "description": "(empty)"
      },
      "ApplicationResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Application"
            }
          }
        },
        "description": "Application information"
      },
      "AssetResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Asset"
            }
          }
        },
        "description": "Asset information"
      },
      "BlockResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "block": {
                  "description": "Block header data.",
                  "properties": {},
                  "type": "object",
                  "x-algorand-format": "BlockHeader"
                },
                "cert": {
                  "description": "Optional certificate object. This is only included when the format is set to message pack.",
                  "properties": {},
                  "type": "object",
                  "x-algorand-format": "BlockCertificate"
                }
              },
              "required": [
                "block"
              ],
              "type": "object"
            }
          }
        },
        "description": "Encoded block object."
      },
      "CatchpointAbortResponse": {
        "content": {
          "application/json": {
            "schema": {
              "description": "An catchpoint abort response.",
              "properties": {
                "catchup-message": {
                  "description": "Catchup abort response string",
                  "type": "string"
                }
              },
              "required": [
                "catchup-message"
              ],
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "CatchpointStartResponse": {
        "content": {
          "application/json": {
            "schema": {
              "description": "An catchpoint start response.",
              "properties": {
                "catchup-message": {
                  "description": "Catchup start response string",
                  "type": "string"
                }
              },
              "required": [
                "catchup-message"
              ],
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "CompileResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "hash": {
                  "description": "base32 SHA512_256 of program bytes (Address style)",
                  "type": "string"
                },
                "result": {
                  "description": "base64 encoded program bytes",
                  "type": "string"
                }
              },
              "required": [
                "hash",
                "result"
              ],
              "type": "object"
            }
          }
        },
        "description": "Teal compile Result"
      },
      "DryrunResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "error": {
                  "type": "string"
                },
                "protocol-version": {
                  "description": "Protocol version is the protocol version Dryrun was operated under.",
                  "type": "string"
                },
                "txns": {
                  "items": {
                    "$ref": "#/components/schemas/DryrunTxnResult"
                  },
                  "type": "array"
                }
              },
              "required": [
                "error",
                "protocol-version",
                "txns"
              ],
              "type": "object"
            }
          }
        },
        "description": "DryrunResponse contains per-txn debug information from a dryrun."
      },
      "NodeStatusResponse": {
        "content": {
          "application/json": {
            "schema": {
              "description": "NodeStatus contains the information about a node status",
              "properties": {
                "catchpoint": {
                  "description": "The current catchpoint that is being caught up to",
                  "type": "string"
                },
                "catchpoint-acquired-blocks": {
                  "description": "The number of blocks that have already been obtained by the node as part of the catchup",
                  "type": "integer"
                },
                "catchpoint-processed-accounts": {
                  "description": "The number of account from the current catchpoint that have been processed so far as part of the catchup",
                  "type": "integer"
                },
                "catchpoint-total-accounts": {
                  "description": "The total number of accounts included in the current catchpoint",
                  "type": "integer"
                },
                "catchpoint-total-blocks": {
                  "description": "The total number of blocks that are required to complete the current catchpoint catchup",
                  "type": "integer"
                },
                "catchup-time": {
                  "description": "CatchupTime in nanoseconds",
                  "type": "integer"
                },
                "last-catchpoint": {
                  "description": "The last catchpoint seen by the node",
                  "type": "string"
                },
                "last-round": {
                  "description": "LastRound indicates the last round seen",
                  "type": "integer"
                },
                "last-version": {
                  "description": "LastVersion indicates the last consensus version supported",
                  "type": "string"
                },
                "next-version": {
                  "description": "NextVersion of consensus protocol to use",
                  "type": "string"
                },
                "next-version-round": {
                  "description": "NextVersionRound is the round at which the next consensus version will apply",
                  "type": "integer"
                },
                "next-version-supported": {
                  "description": "NextVersionSupported indicates whether the next consensus version is supported by this node",
                  "type": "boolean"
                },
                "stopped-at-unsupported-round": {
                  "description": "StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress",
                  "type": "boolean"
                },
                "time-since-last-round": {
                  "description": "TimeSinceLastRound in nanoseconds",
                  "type": "integer"
                }
              },
              "required": [
                "catchup-time",
                "last-round",
                "last-version",
                "next-version",
                "next-version-round",
                "next-version-supported",
                "stopped-at-unsupported-round",
                "time-since-last-round"
              ],
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "PendingTransactionResponse": {
        "content": {
          "application/json": {
            "schema": {
              "description": "Details about a pending transaction. If the transaction was recently confirmed, includes confirmation details like the round and reward details.",
              "properties": {
                "application-index": {
                  "description": "The application index if the transaction was found and it created an application.",
                  "type": "integer"
                },
                "asset-index": {
                  "description": "The asset index if the transaction was found and it created an asset.",
                  "type": "integer"
                },
                "close-rewards": {
                  "description": "Rewards in microalgos applied to the close remainder to account.",
                  "type": "integer"
                },
                "closing-amount": {
                  "description": "Closing amount for the transaction.",
                  "type": "integer"
                },
                "confirmed-round": {
                  "description": "The round where this transaction was confirmed, if present.",
                  "type": "integer"
                },
                "global-state-delta": {
                  "$ref": "#/components/schemas/StateDelta"
                },
                "local-state-delta": {
                  "description": "\\[ld\\] Local state key/value changes for the application being executed by this transaction.",
                  "items": {
                    "$ref": "#/components/schemas/AccountStateDelta"
                  },
                  "type": "array"
                },
                "pool-error": {
                  "description": "Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error.\n",
                  "type": "string"
                },
                "receiver-rewards": {
                  "description": "Rewards in microalgos applied to the receiver account.",
                  "type": "integer"
                },
                "sender-rewards": {
                  "description": "Rewards in microalgos applied to the sender account.",
                  "type": "integer"
                },
                "txn": {
                  "description": "The raw signed transaction.",
                  "properties": {},
                  "type": "object",
                  "x-algorand-format": "SignedTransaction"
                }
              },
              "required": [
                "pool-error",
                "txn"
              ],
              "type": "object"
            }
          }
        },
        "description": "Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed:\n- transaction committed (committed round > 0)\n- transaction still in the pool (committed round = 0, pool error = \"\")\n- transaction removed from pool due to error (committed round = 0, pool error != \"\")\n\nOr the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error."
      },
      "PendingTransactionsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "description": "PendingTransactions is an array of signed transactions exactly as they were submitted.",
              "properties": {
                "top-transactions": {
                  "description": "An array of signed transaction objects.",
                  "items": {
                    "properties": {},
                    "type": "object",
                    "x-algorand-format": "SignedTransaction"
                  },
                  "type": "array"
                },
                "total-transactions": {
                  "description": "Total number of transactions in the pool.",
                  "type": "integer"
                }
              },
              "required": [
                "top-transactions",
                "total-transactions"
              ],
              "type": "object"
            }
          }
        },
        "description": "A potentially truncated list of transactions currently in the node's transaction pool. You can compute whether or not the list is truncated if the number of elements in the **top-transactions** array is fewer than **total-transactions**."
      },
      "PostTransactionsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "txId": {
                  "description": "encoding of the transaction hash.",
                  "type": "string"
                }
              },
              "required": [
                "txId"
              ],
              "type": "object"
            }
          }
        },
        "description": "Transaction ID of the submission."
      },
      "SupplyResponse": {
        "content": {
          "application/json": {
            "schema": {
              "description": "Supply represents the current supply of MicroAlgos in the system",
              "properties": {
                "current_round": {
                  "description": "Round",
                  "type": "integer"
                },
                "online-money": {
                  "description": "OnlineMoney",
                  "type": "integer"
                },
                "total-money": {
                  "description": "TotalMoney",
                  "type": "integer"
                }
              },
              "required": [
                "current_round",
                "online-money",
                "total-money"
              ],
              "type": "object"
            }
          }
        },
        "description": "Supply represents the current supply of MicroAlgos in the system."
      },
      "TransactionParametersResponse": {
        "content": {
          "application/json": {
            "schema": {
              "description": "TransactionParams contains the parameters that help a client construct\na new transaction.",
              "properties": {
                "consensus-version": {
                  "description": "ConsensusVersion indicates the consensus protocol version\nas of LastRound.",
                  "type": "string"
                },
                "fee": {
                  "description": "Fee is the suggested transaction fee\nFee is in units of micro-Algos per byte.\nFee may fall to zero but transactions must still have a fee of\nat least MinTxnFee for the current network protocol.",
                  "type": "integer"
                },
                "genesis-hash": {
                  "description": "GenesisHash is the hash of the genesis block.",
                  "format": "byte",
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string"
                },
                "genesis-id": {
                  "description": "GenesisID is an ID listed in the genesis block.",
                  "type": "string"
                },
                "last-round": {
                  "description": "LastRound indicates the last round seen",
                  "type": "integer"
                },
                "min-fee": {
                  "description": "The minimum transaction fee (not per byte) required for the\ntxn to validate for the current network protocol.",
                  "type": "integer"
                }
              },
              "required": [
                "consensus-version",
                "fee",
                "genesis-hash",
                "genesis-id",
                "last-round",
                "min-fee"
              ],
              "type": "object",
              "x-go-package": "github.com/algorand/go-algorand/daemon/algod/api/spec/v1"
            }
          }
        },
        "description": "TransactionParams contains the parameters that help a client construct a new transaction."
      }
    },
    "schemas": {
      "Account": {
        "description": "Account information at a given round.\n\nDefinition:\ndata/basics/userBalance.go : AccountData\n",
        "properties": {
          "address": {
            "description": "the account public key",
            "type": "string"
          },
          "amount": {
            "description": "\\[algo\\] total number of MicroAlgos in the account",
            "type": "integer"
          },
          "amount-without-pending-rewards": {
            "description": "specifies the amount of MicroAlgos in the account, without the pending rewards.",
            "type": "integer"
          },
          "apps-local-state": {
            "description": "\\[appl\\] applications local data stored in this account.\n\nNote the raw object uses `map[int] -> AppLocalState` for this type.",
            "items": {
              "$ref": "#/components/schemas/ApplicationLocalState"
            },
            "type": "array"
          },
          "apps-total-schema": {
            "$ref": "#/components/schemas/ApplicationStateSchema"
          },
          "assets": {
            "description": "\\[asset\\] assets held by this account.\n\nNote the raw object uses `map[int] -> AssetHolding` for this type.",
            "items": {
              "$ref": "#/components/schemas/AssetHolding"
            },
            "type": "array"
          },
          "auth-addr": {
            "description": "\\[spend\\] the address against which signing should be checked. If empty, the address of the current account is used. This field can be updated in any transaction by setting the RekeyTo field.",
            "type": "string",
            "x-algorand-format": "Address"
          },
          "created-apps": {
            "description": "\\[appp\\] parameters of applications created by this account including app global data.\n\nNote: the raw account uses `map[int] -> AppParams` for this type.",
            "items": {
              "$ref": "#/components/schemas/Application"
            },
            "type": "array"
          },
          "created-assets": {
            "description": "\\[apar\\] parameters of assets created by this account.\n\nNote: the raw account uses `map[int] -> Asset` for this type.",
            "items": {
              "$ref": "#/components/schemas/Asset"
            },
            "type": "array"
          },
          "participation": {
            "$ref": "#/components/schemas/AccountParticipation"
          },
          "pending-rewards": {
            "description": "amount of MicroAlgos of pending rewards in this account.",
            "type": "integer"
          },
          "reward-base": {
            "description": "\\[ebase\\] used as part of the rewards computation. Only applicable to accounts which are participating.",
            "type": "integer"
          },
          "rewards": {
            "description": "\\[ern\\] total rewards of MicroAlgos the account has received, including pending rewards.",
            "type": "integer"
          },
          "round": {
            "description": "The round for which this information is relevant.",
            "type": "integer"
          },
          "sig-type": {
            "description": "Indicates what type of signature is used by this account, must be one of:\n* sig\n* msig\n* lsig",
            "enum": [
              "sig",
              "msig",
              "lsig"
            ],
            "type": "string"
          },
          "status": {
            "description": "\\[onl\\] delegation status of the account's MicroAlgos\n* Offline - indicates that the associated account is delegated.\n*  Online  - indicates that the associated account used as part of the delegation pool.\n*   NotParticipating - indicates that the associated account is neither a delegator nor a delegate.",
            "type": "string"
          }
        },
        "required": [
          "address",
          "amount",
          "amount-without-pending-rewards",
          "pending-rewards",
          "rewards",
          "round",
          "status"
        ],
        "type": "object"
      },
      "AccountParticipation": {
        "description": "AccountParticipation describes the parameters used by this account in consensus protocol.",
        "properties": {
          "selection-participation-key": {
            "description": "\\[sel\\] Selection public key (if any) currently registered for this round.",
            "format": "byte",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string"
          },
          "vote-first-valid": {
            "description": "\\[voteFst\\] First round for which this participation is valid.",
            "type": "integer"
          },
          "vote-key-dilution": {
            "description": "\\[voteKD\\] Number of subkeys in each batch of participation keys.",
            "type": "integer"
          },
          "vote-last-valid": {
            "description": "\\[voteLst\\] Last round for which this participation is valid.",
            "type": "integer"
          },
          "vote-participation-key": {
            "description": "\\[vote\\] root participation public key (if any) currently registered for this round.",
            "format": "byte",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string"
          }
        },
        "required": [
          "selection-participation-key",
          "vote-first-valid",
          "vote-key-dilution",
          "vote-last-valid",
          "vote-participation-key"
        ],
        "type": "object"
      },
      "AccountStateDelta": {
        "description": "Application state delta.",
        "properties": {
          "address": {
            "type": "string"
          },
          "delta": {
            "$ref": "#/components/schemas/StateDelta"
          }
        },
        "required": [
          "address",
          "delta"
        ],
        "type": "object"
      },
      "Application": {
        "description": "Application index and its parameters",
        "properties": {
          "id": {
            "description": "\\[appidx\\] application index.",
            "type": "integer"
          },
          "params": {
            "$ref": "#/components/schemas/ApplicationParams"
          }
        },
        "required": [
          "id",
          "params"
        ],
        "type": "object"
      },
      "ApplicationLocalState": {
        "description": "Stores local state associated with an application.",
        "properties": {
          "id": {
            "description": "The application which this local state is for.",
            "type": "integer"
          },
          "key-value": {
            "$ref": "#/components/schemas/TealKeyValueStore"
          },
          "schema": {
            "$ref": "#/components/schemas/ApplicationStateSchema"
          }
        },
        "required": [
          "id",
          "schema"
        ],
        "type": "object"
      },
      "ApplicationParams": {
        "description": "Stores the global information associated with an application.",
        "properties": {
          "approval-program": {
            "description": "\\[approv\\] approval program.",
            "format": "byte",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "x-algorand-format": "TEALProgram"
          },
          "clear-state-program": {
            "description": "\\[clearp\\] approval program.",
            "format": "byte",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "x-algorand-format": "TEALProgram"
          },
          "creator": {
            "description": "The address that created this application. This is the address where the parameters and global state for this application can be found.",
            "type": "string",
            "x-algorand-format": "Address"
          },
          "global-state": {
            "$ref": "#/components/schemas/TealKeyValueStore"
          },
          "global-state-schema": {
            "$ref": "#/components/schemas/ApplicationStateSchema"
          },
          "local-state-schema": {
            "$ref": "#/components/schemas/ApplicationStateSchema"
          }
        },
        "required": [
          "approval-program",
          "clear-state-program",
          "creator"
        ],
        "type": "object"
      },
      "ApplicationStateSchema": {
        "description": "Specifies maximums on the number of each type that may be stored.",
        "properties": {
          "num-byte-slice": {
            "description": "\\[nbs\\] num of byte slices.",
            "type": "integer"
          },
          "num-uint": {
            "description": "\\[nui\\] num of uints.",
            "type": "integer"
          }
        },
        "required": [
          "num-byte-slice",
          "num-uint"
        ],
        "type": "object"
      },
      "Asset": {
        "description": "Specifies both the unique identifier and the parameters for an asset",
        "properties": {
          "index": {
            "description": "unique asset identifier",
            "type": "integer"
          },
          "params": {
            "$ref": "#/components/schemas/AssetParams"
          }
        },
        "required": [
          "index",
          "params"
        ],
        "type": "object"
      },
      "AssetHolding": {
        "description": "Describes an asset held by an account.\n\nDefinition:\ndata/basics/userBalance.go : AssetHolding",
        "properties": {
          "amount": {
            "description": "\\[a\\] number of units held.",
            "type": "integer",
            "x-algorand-format": "uint64"
          },
          "asset-id": {
            "description": "Asset ID of the holding.",
            "type": "integer",
            "x-go-name": "AssetID"
          },
          "creator": {
            "description": "Address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case.",
            "type": "string"
          },
          "is-frozen": {
            "description": "\\[f\\] whether or not the holding is frozen.",
            "type": "boolean"
          }
        },
        "required": [
          "amount",
          "asset-id",
          "creator",
          "is-frozen"
        ],
        "type": "object"
      },
      "AssetParams": {
        "description": "AssetParams specifies the parameters for an asset.\n\n\\[apar\\] when part of an AssetConfig transaction.\n\nDefinition:\ndata/transactions/asset.go : AssetParams",
        "properties": {
          "clawback": {
            "description": "\\[c\\] Address of account used to clawback holdings of this asset.  If empty, clawback is not permitted.",
            "type": "string"
          },
          "creator": {
            "description": "The address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case.",
            "type": "string"
          },
          "decimals": {
            "description": "\\[dc\\] The number of digits to use after the decimal point when displaying this asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths. If 2, the base unit of the asset is in hundredths, and so on. This value must be between 0 and 19 (inclusive).",
            "maximum": 19,
            "minimum": 0,
            "type": "integer"
          },
          "default-frozen": {
            "description": "\\[df\\] Whether holdings of this asset are frozen by default.",
            "type": "boolean"
          },
          "freeze": {
            "description": "\\[f\\] Address of account used to freeze holdings of this asset.  If empty, freezing is not permitted.",
            "type": "string"
          },
          "manager": {
            "description": "\\[m\\] Address of account used to manage the keys of this asset and to destroy it.",
            "type": "string"
          },
          "metadata-hash": {
            "description": "\\[am\\] A commitment to some unspecified asset metadata. The format of this metadata is up to the application.",
            "format": "byte",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string"
          },
          "name": {
            "description": "\\[an\\] Name of this asset, as supplied by the creator.",
            "type": "string"
          },
          "reserve": {
            "description": "\\[r\\] Address of account holding reserve (non-minted) units of this asset.",
            "type": "string"
          },
          "total": {
            "description": "\\[t\\] The total number of units of this asset.",
            "type": "integer",
            "x-algorand-format": "uint64"
          },
          "unit-name": {
            "description": "\\[un\\] Name of a unit of this asset, as supplied by the creator.",
            "type": "string"
          },
          "url": {
            "description": "\\[au\\] URL where more information about the asset can be retrieved.",
            "type": "string"
          }
        },
        "required": [
          "creator",
          "decimals",
          "total"
        ],
        "type": "object"
      },
      "DryrunRequest": {
        "description": "Request data type for dryrun endpoint. Given the Transactions and simulated ledger state upload, run TEAL scripts and return debugging information.",
        "properties": {
          "accounts": {
            "items": {
              "$ref": "#/components/schemas/Account"
            },
            "type": "array"
          },
          "apps": {
            "items": {
              "$ref": "#/components/schemas/Application"
            },
            "type": "array"
          },
          "latest-timestamp": {
            "description": "LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to.",
            "format": "int64",
            "type": "integer"
          },
          "protocol-version": {
            "description": "ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in.",
            "type": "string"
          },
          "round": {
            "description": "Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to.",
            "type": "integer",
            "x-algorand-format": "uint64"
          },
          "sources": {
            "items": {
              "$ref": "#/components/schemas/DryrunSource"
            },
            "type": "array"
          },
          "txns": {
            "items": {
              "description": "SignedTxn object. Must be canonically encoded.",
              "format": "json",
              "type": "string",
              "x-algorand-format": "SignedTransaction"
            },
            "type": "array"
          }
        },
        "required": [
          "accounts",
          "apps",
          "latest-timestamp",
          "protocol-version",
          "round",
          "sources",
          "txns"
        ],
        "type": "object"
      },
      "DryrunSource": {
        "description": "DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into transactions or application state.",
        "properties": {
          "app-index": {
            "type": "integer",
            "x-algorand-format": "uint64"
          },
          "field-name": {
            "description": "FieldName is what kind of sources this is. If lsig then it goes into the transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the Approval Program or Clear State Program of application[this.AppIndex].",
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "txn-index": {
            "type": "integer"
          }
        },
        "required": [
          "app-index",
          "field-name",
          "source",
          "txn-index"
        ],
        "type": "object"
      },
      "DryrunState": {
        "description": "Stores the TEAL eval step data",
        "properties": {
          "error": {
            "description": "Evaluation error if any",
            "type": "string"
          },
          "line": {
            "description": "Line number",
            "type": "integer"
          },
          "pc": {
            "description": "Program counter",
            "type": "integer"
          },
          "scratch": {
            "items": {
              "$ref": "#/components/schemas/TealValue"
            },
            "type": "array"
          },
          "stack": {
            "items": {
              "$ref": "#/components/schemas/TealValue"
            },
            "type": "array"
          }
        },
        "required": [
          "line",
          "pc",
          "stack"
        ],
        "type": "object"
      },
      "DryrunTxnResult": {
        "description": "DryrunTxnResult contains any LogicSig or ApplicationCall program debug information and state updates from a dryrun.",
        "properties": {
          "app-call-messages": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "app-call-trace": {
            "items": {
              "$ref": "#/components/schemas/DryrunState"
            },
            "type": "array"
          },
          "disassembly": {
            "description": "Disassembled program line by line.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "global-delta": {
            "$ref": "#/components/schemas/StateDelta"
          },
          "local-deltas": {
            "items": {
              "$ref": "#/components/schemas/AccountStateDelta"
            },
            "type": "array"
          },
          "logic-sig-messages": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "logic-sig-trace": {
            "items": {
              "$ref": "#/components/schemas/DryrunState"
            },
            "type": "array"
          }
        },
        "required": [
          "disassembly"
        ],
        "type": "object"
      },
      "ErrorResponse": {
        "description": "An error response with optional data field.",
        "properties": {
          "data": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "EvalDelta": {
        "description": "Represents a TEAL value delta.",
        "properties": {
          "action": {
            "description": "\\[at\\] delta action.",
            "type": "integer"
          },
          "bytes": {
            "description": "\\[bs\\] bytes value.",
            "type": "string"
          },
          "uint": {
            "description": "\\[ui\\] uint value.",
            "type": "integer",
            "x-algorand-format": "uint64"
          }
        },
        "required": [
          "action"
        ],
        "type": "object"
      },
      "EvalDeltaKeyValue": {
        "description": "Key-value pairs for StateDelta.",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/EvalDelta"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "StateDelta": {
        "description": "Application state delta.",
        "items": {
          "$ref": "#/components/schemas/EvalDeltaKeyValue"
        },
        "type": "array"
      },
      "TealKeyValue": {
        "description": "Represents a key-value pair in an application store.",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/TealValue"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "TealKeyValueStore": {
        "description": "Represents a key-value store for use in an application.",
        "items": {
          "$ref": "#/components/schemas/TealKeyValue"
        },
        "type": "array"
      },
      "TealValue": {
        "description": "Represents a TEAL value.",
        "properties": {
          "bytes": {
            "description": "\\[tb\\] bytes value.",
            "type": "string"
          },
          "type": {
            "description": "\\[tt\\] value type.",
            "type": "integer"
          },
          "uint": {
            "description": "\\[ui\\] uint value.",
            "type": "integer",
            "x-algorand-format": "uint64"
          }
        },
        "required": [
          "bytes",
          "type",
          "uint"
        ],
        "type": "object"
      },
      "Version": {
        "description": "Note that we annotate this as a model so that legacy clients\ncan directly import a swagger generated Version model.",
        "properties": {
          "build": {
            "$ref": "#/components/schemas/VersionBuild"
          },
          "genesis-hash": {
            "format": "byte",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string"
          },
          "genesis-id": {
            "type": "string"
          },
          "versions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "build",
          "genesis-hash",
          "genesis-id",
          "versions"
        ],
        "type": "object",
        "x-go-package": "github.com/algorand/go-algorand/daemon/algod/api/spec/common"
      },
      "VersionBuild": {
        "description": "the current algod build version information.",
        "properties": {
          "branch": {
            "type": "string"
          },
          "build-number": {
            "type": "integer"
          },
          "channel": {
            "type": "string"
          },
          "commit-hash": {
            "format": "byte",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string"
          },
          "major": {
            "type": "integer"
          },
          "minor": {
            "type": "integer"
          }
        },
        "required": [
          "branch",
          "build-number",
          "channel",
          "commit-hash",
          "major",
          "minor"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "api_key": {
        "description": "Generated header parameter. This token can be generated using the Goal command line tool. Example value ='b7e384d0317b8050ce45900a94a1931e28540e1f69b2d242b424659c341b4697'",
        "in": "header",
        "name": "X-Algo-API-Token",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "contact": {
      "email": "contact@algorand.com",
      "name": "algorand",
      "url": "https://www.algorand.com/get-in-touch/contact"
    },
    "description": "API endpoint for algod operations.",
    "title": "Algod REST API.",
    "version": "0.0.1"
  },
  "openapi": "3.0.1",
  "paths": {
    "/health": {
      "get": {
        "operationId": "HealthCheck",
        "responses": {
          "200": {
            "content": {},
            "description": "OK."
          },
          "default": {
            "content": {},
            "description": "Unknown Error"
          }
        },
        "summary": "Returns OK if healthy.",
        "tags": [
          "common"
        ]
      }
    },
    "/metrics": {
      "get": {
        "operationId": "Metrics",
        "responses": {
          "200": {
            "content": {},
            "description": "text with \\#-comments and key:value lines"
          },
          "404": {
            "content": {},
            "description": "metrics were compiled out"
          }
        },
        "summary": "Return metrics about algod functioning.",
        "tags": [
          "common"
        ]
      }
    },
    "/swagger.json": {
      "get": {
        "description": "Returns the entire swagger spec in json.",
        "operationId": "SwaggerJSON",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "The current swagger spec"
          },
          "default": {
            "content": {},
            "description": "Unknown Error"
          }
        },
        "summary": "Gets the current swagger spec.",
        "tags": [
          "common"
        ]
      }
    },
    "/v2/accounts/{address}": {
      "get": {
        "description": "Given a specific account public key, this call returns the accounts status, balance and spendable amounts",
        "operationId": "AccountInformation",
        "parameters": [
          {
            "description": "Configures whether the response object is JSON or MessagePack encoded.",
            "in": "query",
            "name": "format",
            "schema": {
              "enum": [
                "json",
                "msgpack"
              ],
              "type": "string"
            }
          },
          {
            "description": "An account public key",
            "in": "path",
            "name": "address",
            "required": true,
            "schema": {
              "pattern": "[A-Z0-9]{58}",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "(empty)"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Malformed address"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Invalid API Token"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Error"
          },
          "default": {
            "content": {},
            "description": "Unknown Error"
          }
        },
        "summary": "Get account information."
      }
    },
    "/v2/accounts/{address}/transactions/pending": {
      "get": {
        "description": "Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX = 0, returns all pending transactions.\n",
        "operationId": "GetPendingTransactionsByAddress",
        "parameters": [
          {
            "description": "An account public key",
            "in": "path",
            "name": "address",
            "required": true,
            "schema": {
              "pattern": "[A-Z0-9]{58}",
              "type": "string"
            }
          },
          {
            "description": "Truncated number of transactions to display. If max=0, returns all pending txns.",
            "in": "query",
            "name": "max",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Configures whether the response object is JSON or MessagePack encoded.",
            "in": "query",
            "name": "format",
            "schema": {
              "enum": [
                "json",
                "msgpack"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "PendingTransactions is an array of signed transactions exactly as they were submitted.",
                  "properties": {
                    "top-transactions": {
                      "description": "An array of signed transaction objects.",
                      "items": {
                        "properties": {},
                        "type": "object",
                        "x-algorand-format": "SignedTransaction"
                      },
                      "type": "array"
                    },
                    "total-transactions": {
                      "description": "Total number of transactions in the pool.",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "top-transactions",
                    "total-transactions"
                  ],
                  "type": "object"
                }
              },
              "application/msgpack": {
                "schema": {
                  "description": "PendingTransactions is an array of signed transactions exactly as they were submitted.",
                  "properties": {
                    "top-transactions": {
                      "description": "An array of signed transaction objects.",
                      "items": {
                        "properties": {},
                        "type": "object",
                        "x-algorand-format": "SignedTransaction"
                      },
                      "type": "array"
                    },
                    "total-transactions": {
                      "description": "Total number of transactions in the pool.",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "top-transactions",
                    "total-transactions"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "A potentially truncated list of transactions currently in the node's transaction pool. You can compute whether or not the list is truncated if the number of elements in the **top-transactions** array is fewer than **total-transactions**."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Max must be a non-negative integer"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Invalid API Token"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Error"
          },
          "503": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Service Temporarily Unavailable"
          },
          "default": {
            "content": {},
            "description": "Unknown Error"
          }
        },
        "summary": "Get a list of unconfirmed transactions currently in the transaction pool by address."
      }
    },
    "/v2/applications/{application-id}": {
      "get": {
        "description": "Given a application id, it returns application information including creator, approval and clear programs, global and local schemas, and global state.",
        "operationId": "GetApplicationByID",
        "parameters": [
          {
            "description": "An application identifier",
            "in": "path",
            "name": "application-id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            },
            "description": "Application information"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Invalid API Token"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Application Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Error"
          },
          "default": {
            "content": {},
            "description": "Unknown Error"
          }
        },
        "summary": "Get application information."
      }
    },
    "/v2/assets/{asset-id}": {
      "get": {
        "description": "Given a asset id, it returns asset information including creator, name, total supply and special addresses.",
        "operationId": "GetAssetByID",
        "parameters": [
          {
            "description": "An asset identifier",
            "in": "path",
            "name": "asset-id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            },
            "description": "Asset information"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Invalid API Token"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Application Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Error"
          },
          "default": {
            "content": {},
            "description": "Unknown Error"
          }
        },
        "summary": "Get asset information."
      }
    },
    "/v2/blocks/{round}": {
      "get": {
        "operationId": "GetBlock",
        "parameters": [
          {
            "description": "Configures whether the response object is JSON or MessagePack encoded.",
            "in": "query",
            "name": "format",
            "schema": {
              "enum": [
                "json",
                "msgpack"
              ],
              "type": "string"
            }
          },
          {
            "description": "The round from which to fetch block information.",
            "in": "path",
            "name": "round",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "block": {
                      "description": "Block header data.",
                      "properties": {},
                      "type": "object",
                      "x-algorand-format": "BlockHeader"
                    },
                    "cert": {
                      "description": "Optional certificate object. This is only included when the format is set to message pack.",
                      "properties": {},
                      "type": "object",
                      "x-algorand-format": "BlockCertificate"
                    }
                  },
                  "required": [
                    "block"
                  ],
                  "type": "object"
                }
              },
              "application/msgpack": {
                "schema": {
                  "properties": {
                    "block": {
                      "description": "Block header data.",
                      "properties": {},
                      "type": "object",
                      "x-algorand-format": "BlockHeader"
                    },
                    "cert": {
                      "description": "Optional certificate object. This is only included when the format is set to message pack.",
                      "properties": {},
                      "type": "object",
                      "x-algorand-format": "BlockCertificate"
                    }
                  },
                  "required": [
                    "block"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Encoded block object."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad Request - Non integer number"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Invalid API Token"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "None existing block "
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Error"
          },
          "default": {
            "content": {},
            "description": "Unknown Error"
          }
        },
        "summary": "Get the block for the given round."
      }
    },
    "/v2/catchup/{catchpoint}": {
      "delete": {
        "description": "Given a catchpoint, it aborts catching up to this catchpoint",
        "operationId": "AbortCatchup",
        "parameters": [
          {
            "description": "A catch point",
            "in": "path",
            "name": "catchpoint",
            "required": true,
            "schema": {
              "format": "catchpoint",
              "pattern": "[0-9]{1,10}#[A-Z0-9]{1,53}",
              "type": "string",
              "x-algorand-format": "Catchpoint String"
            },
            "x-algorand-format": "Catchpoint String"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "An catchpoint abort response.",
                  "properties": {
                    "catchup-message": {
                      "description": "Catchup abort response string",
                      "type": "string"
                    }
                  },
                  "required": [
                    "catchup-message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "(empty)"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Invalid API Token"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Error"
          },
          "default": {
            "content": {},
            "description": "Unknown Error"
          }
        },
        "summary": "Aborts a catchpoint catchup.",
        "tags": [
          "private"
        ]
      },
      "post": {
        "description": "Given a catchpoint, it starts catching up to this catchpoint",
        "operationId": "StartCatchup",
        "parameters": [
          {
            "description": "A catch point",
            "in": "path",
            "name": "catchpoint",
            "required": true,
            "schema": {
              "format": "catchpoint",
              "pattern": "[0-9]{1,10}#[A-Z0-9]{1,53}",
              "type": "string",
              "x-algorand-format": "Catchpoint String"
            },
            "x-algorand-format": "Catchpoint String"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "An catchpoint start response.",
                  "properties": {
                    "catchup-message": {
                      "description": "Catchup start response string",
                      "type": "string"
                    }
                  },
                  "required": [
                    "catchup-message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "(empty)"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Invalid API Token"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Error"
          },
          "default": {
            "content": {},
            "description": "Unknown Error"
          }
        },
        "summary": "Starts a catchpoint catchup.",
        "tags": [
          "private"
        ]
      }
    },
    "/v2/ledger/supply": {
      "get": {
        "operationId": "GetSupply",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Supply represents the current supply of MicroAlgos in the system",
                  "properties": {
                    "current_round": {
                      "description": "Round",
                      "type": "integer"
                    },
                    "online-money": {
                      "description": "OnlineMoney",
                      "type": "integer"
                    },
                    "total-money": {
                      "description": "TotalMoney",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "current_round",
                    "online-money",
                    "total-money"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Supply represents the current supply of MicroAlgos in the system."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Invalid API Token"
          },
          "default": {
            "content": {},
            "description": "Unknown Error"
          }
        },
        "summary": "Get the current supply reported by the ledger."
      }
    },
    "/v2/register-participation-keys/{address}": {
      "post": {
        "description": "Generate (or renew) and register participation keys on the node for a given account address.",
        "operationId": "RegisterParticipationKeys",
        "parameters": [
          {
            "description": "The `account-id` to update, or `all` to update all accounts.",
            "in": "path",
            "name": "address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The fee to use when submitting key registration transactions. Defaults to the suggested fee.",
            "in": "query",
            "name": "fee",
            "schema": {
              "default": 1000,
              "type": "integer"
            }
          },
          {
            "description": "value to use for two-level participation key.",
            "in": "query",
            "name": "key-dilution",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The last round for which the generated participation keys will be valid.",
            "in": "query",
            "name": "round-last-valid",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Don't wait for transaction to commit before returning response.",
            "in": "query",
            "name": "no-wait",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "txId": {
                      "description": "encoding of the transaction hash.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "txId"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Transaction ID of the submission."
          }
        },
        "tags": [
          "private"
        ]
      }
    },
    "/v2/shutdown": {
      "post": {
        "description": "Special management endpoint to shutdown the node. Optionally provide a timeout parameter to indicate that the node should begin shutting down after a number of seconds.",
        "operationId": "ShutdownNode",
        "parameters": [
          {
            "in": "query",
            "name": "timeout",
            "schema": {
              "default": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "(empty)"
          }
        },
        "tags": [
          "private"
        ]
      }
    },
    "/v2/status": {
      "get": {
        "operationId": "GetStatus",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "NodeStatus contains the information about a node status",
                  "properties": {
                    "catchpoint": {
                      "description": "The current catchpoint that is being caught up to",
                      "type": "string"
                    },
                    "catchpoint-acquired-blocks": {
                      "description": "The number of blocks that have already been obtained by the node as part of the catchup",
                      "type": "integer"
                    },
                    "catchpoint-processed-accounts": {
                      "description": "The number of account from the current catchpoint that have been processed so far as part of the catchup",
                      "type": "integer"
                    },
                    "catchpoint-total-accounts": {
                      "description": "The total number of accounts included in the current catchpoint",
                      "type": "integer"
                    },
                    "catchpoint-total-blocks": {
                      "description": "The total number of blocks that are required to complete the current catchpoint catchup",
                      "type": "integer"
                    },
                    "catchup-time": {
                      "description": "CatchupTime in nanoseconds",
                      "type": "integer"
                    },
                    "last-catchpoint": {
                      "description": "The last catchpoint seen by the node",
                      "type": "string"
                    },
                    "last-round": {
                      "description": "LastRound indicates the last round seen",
                      "type": "integer"
                    },
                    "last-version": {
                      "description": "LastVersion indicates the last consensus version supported",
                      "type": "string"
                    },
                    "next-version": {
                      "description": "NextVersion of consensus protocol to use",
                      "type": "string"
                    },
                    "next-version-round": {
                      "description": "NextVersionRound is the round at which the next consensus version will apply",
                      "type": "integer"
                    },
                    "next-version-supported": {
                      "description": "NextVersionSupported indicates whether the next consensus version is supported by this node",
                      "type": "boolean"
                    },
                    "stopped-at-unsupported-round": {
                      "description": "StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress",
                      "type": "boolean"
                    },
                    "time-since-last-round": {
                      "description": "TimeSinceLastRound in nanoseconds",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "catchup-time",
                    "last-round",
                    "last-version",
                    "next-version",
                    "next-version-round",
                    "next-version-supported",
                    "stopped-at-unsupported-round",
                    "time-since-last-round"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "(empty)"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Invalid API Token"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Internal Error"
          },
          "default": {
            "content": {},
            "description": "Unknown Error"
          }
        },
        "summary": "Gets the current node status."
      }
    },
    "/v2/status/wait-for-block-after/{round}": {
      "get": {
        "description": "Waits for a block to appear after round {round} and returns the node's status at the time.",
        "operationId": "WaitForBlock",
        "parameters": [
          {
            "description": "The round to wait until returning status",
            "in": "path",
            "name": "round",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "NodeStatus contains the information about a node status",
                  "properties": {
                    "catchpoint": {
                      "description": "The current catchpoint that is being caught up to",
                      "type": "string"
                    },
                    "catchpoint-acquired-blocks": {
                      "description": "The number of blocks that have already been obtained by the node as part of the catchup",
                      "type": "integer"
                    },
                    "catchpoint-processed-accounts": {
                      "description": "The number of account from the current catchpoint that have been processed so far as part of the catchup",
                      "type": "integer"
                    },
                    "catchpoint-total-accounts": {
                      "description": "The total number of accounts included in the current catchpoint",
                      "type": "integer"
                    },
                    "catchpoint-total-blocks": {
                      "description": "The total number of blocks that are required to complete the current catchpoint catchup",
                      "type": "integer"
                    },
                    "catchup-time": {
                      "description": "CatchupTime in nanoseconds",
                      "type": "integer"
                    },
                    "last-catchpoint": {
                      "description": "The last catchpoint seen by the node",
                      "type": "string"
                    },
                    "last-round": {
                      "description": "LastRound indicates the last round seen",
                      "type": "integer"
                    },
                    "last-version": {
                      "description": "LastVersion indicates the last consensus version supported",
                      "type": "string"
                    },
                    "next-version": {
                      "description": "NextVersion of consensus protocol to use",
                      "type": "string"
                    },
                    "next-version-round": {
                      "description": "NextVersionRound is the round at which the next consensus version will apply",
                      "type": "integer"
                    },
                    "next-version-supported": {
                      "description": "NextVersionSupported indicates whether the next consensus version is supported by this node",
                      "type": "boolean"
                    },
                    "stopped-at-unsupported-round": {
                      "description": "StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress",
                      "type": "boolean"
                    },
                    "time-since-last-round": {
                      "description": "TimeSinceLastRound in nanoseconds",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "catchup-time",
                    "last-round",
                    "last-version",
                    "next-version",
                    "next-version-round",
                    "next-version-supported",
                    "stopped-at-unsupported-round",
                    "time-since-last-round"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "(empty)"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad Request -- number must be non-negative integer "
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Invalid API Token"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Error"
          },
          "503": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Service Temporarily Unavailable"
          },
          "default": {
            "content": {},
            "description": "Unknown Error"
          }
        },
        "summary": "Gets the node status after waiting for the given round."
      }
    },
    "/v2/teal/compile": {
      "post": {
        "description": "Given TEAL source code in plain text, return base64 encoded program bytes and base32 SHA512_256 hash of program bytes (Address style).",
        "operationId": "TealCompile",
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "description": "TEAL source code to be compiled",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "hash": {
                      "description": "base32 SHA512_256 of program bytes (Address style)",
                      "type": "string"
                    },
                    "result": {
                      "description": "base64 encoded program bytes",
                      "type": "string"
                    }
                  },
                  "required": [
                    "hash",
                    "result"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Teal compile Result"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad Request - Teal Compile Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Invalid API Token"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Error"
          },
          "default": {
            "content": {},
            "description": "Unknown Error"
          }
        },
        "summary": "Compile TEAL source code to binary, produce its hash",
        "x-codegen-request-body-name": "source"
      }
    },
    "/v2/teal/dryrun": {
      "post": {
        "description": "Executes TEAL program(s) in context and returns debugging information about the execution.",
        "operationId": "TealDryrun",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DryrunRequest"
              }
            },
            "application/msgpack": {
              "schema": {
                "$ref": "#/components/schemas/DryrunRequest"
              }
            }
          },
          "description": "Transaction (or group) and any accompanying state-simulation data.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "protocol-version": {
                      "description": "Protocol version is the protocol version Dryrun was operated under.",
                      "type": "string"
                    },
                    "txns": {
                      "items": {
                        "$ref": "#/components/schemas/DryrunTxnResult"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "error",
                    "protocol-version",
                    "txns"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "DryrunResponse contains per-txn debug information from a dryrun."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Invalid API Token"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Error"
          },
          "default": {
            "content": {},
            "description": "Unknown Error"
          }
        },
        "summary": "Provide debugging information for a transaction (or group).",
        "x-codegen-request-body-name": "request"
      }
    },
    "/v2/transactions": {
      "post": {
        "operationId": "RawTransaction",
        "requestBody": {
          "content": {
            "application/x-binary": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "description": "The byte encoded signed transaction to broadcast to network",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "txId": {
                      "description": "encoding of the transaction hash.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "txId"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Transaction ID of the submission."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad Request - Malformed Algorand transaction "
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Invalid API Token"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Error"
          },
          "503": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Service Temporarily Unavailable"
          },
          "default": {
            "content": {},
            "description": "Unknown Error"
          }
        },
        "summary": "Broadcasts a raw transaction to the network.",
        "x-codegen-request-body-name": "rawtxn"
      }
    },
    "/v2/transactions/params": {
      "get": {
        "operationId": "TransactionParams",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "TransactionParams contains the parameters that help a client construct\na new transaction.",
                  "properties": {
                    "consensus-version": {
                      "description": "ConsensusVersion indicates the consensus protocol version\nas of LastRound.",
                      "type": "string"
                    },
                    "fee": {
                      "description": "Fee is the suggested transaction fee\nFee is in units of micro-Algos per byte.\nFee may fall to zero but transactions must still have a fee of\nat least MinTxnFee for the current network protocol.",
                      "type": "integer"
                    },
                    "genesis-hash": {
                      "description": "GenesisHash is the hash of the genesis block.",
                      "format": "byte",
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string"
                    },
                    "genesis-id": {
                      "description": "GenesisID is an ID listed in the genesis block.",
                      "type": "string"
                    },
                    "last-round": {
                      "description": "LastRound indicates the last round seen",
                      "type": "integer"
                    },
                    "min-fee": {
                      "description": "The minimum transaction fee (not per byte) required for the\ntxn to validate for the current network protocol.",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "consensus-version",
                    "fee",
                    "genesis-hash",
                    "genesis-id",
                    "last-round",
                    "min-fee"
                  ],
                  "type": "object",
                  "x-go-package": "github.com/algorand/go-algorand/daemon/algod/api/spec/v1"
                }
              }
            },
            "description": "TransactionParams contains the parameters that help a client construct a new transaction."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Invalid API Token"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Error"
          },
          "503": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Service Temporarily Unavailable"
          },
          "default": {
            "content": {},
            "description": "Unknown Error"
          }
        },
        "summary": "Get parameters for constructing a new transaction"
      }
    },
    "/v2/transactions/pending": {
      "get": {
        "description": "Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX = 0, returns all pending transactions.\n",
        "operationId": "GetPendingTransactions",
        "parameters": [
          {
            "description": "Truncated number of transactions to display. If max=0, returns all pending txns.",
            "in": "query",
            "name": "max",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Configures whether the response object is JSON or MessagePack encoded.",
            "in": "query",
            "name": "format",
            "schema": {
              "enum": [
                "json",
                "msgpack"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "PendingTransactions is an array of signed transactions exactly as they were submitted.",
                  "properties": {
                    "top-transactions": {
                      "description": "An array of signed transaction objects.",
                      "items": {
                        "properties": {},
                        "type": "object",
                        "x-algorand-format": "SignedTransaction"
                      },
                      "type": "array"
                    },
                    "total-transactions": {
                      "description": "Total number of transactions in the pool.",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "top-transactions",
                    "total-transactions"
                  ],
                  "type": "object"
                }
              },
              "application/msgpack": {
                "schema": {
                  "description": "PendingTransactions is an array of signed transactions exactly as they were submitted.",
                  "properties": {
                    "top-transactions": {
                      "description": "An array of signed transaction objects.",
                      "items": {
                        "properties": {},
                        "type": "object",
                        "x-algorand-format": "SignedTransaction"
                      },
                      "type": "array"
                    },
                    "total-transactions": {
                      "description": "Total number of transactions in the pool.",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "top-transactions",
                    "total-transactions"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "A potentially truncated list of transactions currently in the node's transaction pool. You can compute whether or not the list is truncated if the number of elements in the **top-transactions** array is fewer than **total-transactions**."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Invalid API Token"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Error"
          },
          "503": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Service Temporarily Unavailable"
          },
          "default": {
            "content": {},
            "description": "Unknown Error"
          }
        },
        "summary": "Get a list of unconfirmed transactions currently in the transaction pool."
      }
    },
    "/v2/transactions/pending/{txid}": {
      "get": {
        "description": "Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed:\n- transaction committed (committed round > 0) - transaction still in the pool (committed round = 0, pool error = \"\") - transaction removed from pool due to error (committed round = 0, pool error != \"\")\nOr the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error.\n",
        "operationId": "PendingTransactionInformation",
        "parameters": [
          {
            "description": "A transaction id",
            "in": "path",
            "name": "txid",
            "required": true,
            "schema": {
              "pattern": "[A-Z0-9]+",
              "type": "string"
            }
          },
          {
            "description": "Configures whether the response object is JSON or MessagePack encoded.",
            "in": "query",
            "name": "format",
            "schema": {
              "enum": [
                "json",
                "msgpack"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Details about a pending transaction. If the transaction was recently confirmed, includes confirmation details like the round and reward details.",
                  "properties": {
                    "application-index": {
                      "description": "The application index if the transaction was found and it created an application.",
                      "type": "integer"
                    },
                    "asset-index": {
                      "description": "The asset index if the transaction was found and it created an asset.",
                      "type": "integer"
                    },
                    "close-rewards": {
                      "description": "Rewards in microalgos applied to the close remainder to account.",
                      "type": "integer"
                    },
                    "closing-amount": {
                      "description": "Closing amount for the transaction.",
                      "type": "integer"
                    },
                    "confirmed-round": {
                      "description": "The round where this transaction was confirmed, if present.",
                      "type": "integer"
                    },
                    "global-state-delta": {
                      "$ref": "#/components/schemas/StateDelta"
                    },
                    "local-state-delta": {
                      "description": "\\[ld\\] Local state key/value changes for the application being executed by this transaction.",
                      "items": {
                        "$ref": "#/components/schemas/AccountStateDelta"
                      },
                      "type": "array"
                    },
                    "pool-error": {
                      "description": "Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error.\n",
                      "type": "string"
                    },
                    "receiver-rewards": {
                      "description": "Rewards in microalgos applied to the receiver account.",
                      "type": "integer"
                    },
                    "sender-rewards": {
                      "description": "Rewards in microalgos applied to the sender account.",
                      "type": "integer"
                    },
                    "txn": {
                      "description": "The raw signed transaction.",
                      "properties": {},
                      "type": "object",
                      "x-algorand-format": "SignedTransaction"
                    }
                  },
                  "required": [
                    "pool-error",
                    "txn"
                  ],
                  "type": "object"
                }
              },
              "application/msgpack": {
                "schema": {
                  "description": "Details about a pending transaction. If the transaction was recently confirmed, includes confirmation details like the round and reward details.",
                  "properties": {
                    "application-index": {
                      "description": "The application index if the transaction was found and it created an application.",
                      "type": "integer"
                    },
                    "asset-index": {
                      "description": "The asset index if the transaction was found and it created an asset.",
                      "type": "integer"
                    },
                    "close-rewards": {
                      "description": "Rewards in microalgos applied to the close remainder to account.",
                      "type": "integer"
                    },
                    "closing-amount": {
                      "description": "Closing amount for the transaction.",
                      "type": "integer"
                    },
                    "confirmed-round": {
                      "description": "The round where this transaction was confirmed, if present.",
                      "type": "integer"
                    },
                    "global-state-delta": {
                      "$ref": "#/components/schemas/StateDelta"
                    },
                    "local-state-delta": {
                      "description": "\\[ld\\] Local state key/value changes for the application being executed by this transaction.",
                      "items": {
                        "$ref": "#/components/schemas/AccountStateDelta"
                      },
                      "type": "array"
                    },
                    "pool-error": {
                      "description": "Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error.\n",
                      "type": "string"
                    },
                    "receiver-rewards": {
                      "description": "Rewards in microalgos applied to the receiver account.",
                      "type": "integer"
                    },
                    "sender-rewards": {
                      "description": "Rewards in microalgos applied to the sender account.",
                      "type": "integer"
                    },
                    "txn": {
                      "description": "The raw signed transaction.",
                      "properties": {},
                      "type": "object",
                      "x-algorand-format": "SignedTransaction"
                    }
                  },
                  "required": [
                    "pool-error",
                    "txn"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed:\n- transaction committed (committed round > 0)\n- transaction still in the pool (committed round = 0, pool error = \"\")\n- transaction removed from pool due to error (committed round = 0, pool error != \"\")\n\nOr the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Invalid API Token"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Transaction Not Found"
          },
          "default": {
            "content": {},
            "description": "Unknown Error"
          }
        },
        "summary": "Get a specific pending transaction."
      }
    }
  },
  "security": [
    {
      "api_key": []
    }
  ],
  "servers": [
    {
      "url": "http://localhost/"
    },
    {
      "url": "https://localhost/"
    }
  ],
  "tags": [
    {
      "name": "private"
    }
  ]
}