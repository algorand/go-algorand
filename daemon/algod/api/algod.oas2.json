{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API endpoint for algod operations.",
    "title": "Algod REST API.",
    "contact": {
      "name": "algorand",
      "url": "https://www.algorand.com/get-in-touch/contact",
      "email": "contact@algorand.com"
    },
    "version": "0.0.1"
  },
  "host": "localhost",
  "basePath": "/",
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "public",
          "common"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Returns OK if healthy.",
        "operationId": "HealthCheck",
        "responses": {
          "200": {
            "description": "OK."
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/ready": {
      "get": {
        "tags": [
          "public",
          "common"
        ],
        "produces": [
          "application/json"
        ],
        "scheme": [
          "http"
        ],
        "summary": "Returns OK if healthy and fully caught up.",
        "operationId": "GetReady",
        "responses": {
          "200": {
            "description": "OK."
          },
          "500": {
            "description": "Internal Error"
          },
          "503": {
            "description": "Node not ready yet"
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "public",
          "common"
        ],
        "produces": [
          "text/plain"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Return metrics about algod functioning.",
        "operationId": "Metrics",
        "responses": {
          "200": {
            "description": "text with \\#-comments and key:value lines"
          },
          "404": {
            "description": "metrics were compiled out"
          }
        }
      }
    },
    "/genesis": {
      "get": {
        "description": "Returns the entire genesis file in json.",
        "tags": [
          "public",
          "common"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Gets the genesis information.",
        "operationId": "GetGenesis",
        "responses": {
          "200": {
            "description": "The genesis file in json.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/swagger.json": {
      "get": {
        "description": "Returns the entire swagger spec in json.",
        "tags": [
          "public",
          "common"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Gets the current swagger spec.",
        "operationId": "SwaggerJSON",
        "responses": {
          "200": {
            "description": "The current swagger spec",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/versions": {
      "get": {
        "description": "Retrieves the supported API versions, binary build versions, and genesis information.",
        "tags": [
          "public",
          "common"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "operationId": "GetVersion",
        "responses": {
          "200": {
            "$ref": "#/responses/VersionsResponse"
          }
        }
      }
    },
    "/v2/accounts/{address}": {
      "get": {
        "description": "Given a specific account public key, this call returns the accounts status, balance and spendable amounts",
        "tags": [
          "public",
          "nonparticipating"
        ],
        "produces": [
          "application/json",
          "application/msgpack"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get account information.",
        "operationId": "AccountInformation",
        "parameters": [
          {
            "pattern": "[A-Z0-9]{58}",
            "type": "string",
            "description": "An account public key",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "name": "exclude",
            "description": "When set to `all` will exclude asset holdings, application local state, created asset parameters, any created application parameters. Defaults to `none`.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "all",
              "none"
            ]
          },
          {
            "$ref": "#/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AccountResponse"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "address",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "json",
            "msgpack"
          ],
          "type": "string",
          "name": "format",
          "in": "query"
        }
      ]
    },
    "/v2/accounts/{address}/assets/{asset-id}": {
      "get": {
        "description": "Given a specific account public key and asset ID, this call returns the account's asset holding and asset parameters (if either exist). Asset parameters will only be returned if the provided address is the asset's creator.",
        "tags": [
          "public",
          "nonparticipating"
        ],
        "produces": [
          "application/json",
          "application/msgpack"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get account information about a given asset.",
        "operationId": "AccountAssetInformation",
        "parameters": [
          {
            "pattern": "[A-Z0-9]{58}",
            "type": "string",
            "description": "An account public key",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "An asset identifier",
            "name": "asset-id",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AccountAssetResponse"
          },
          "400": {
            "description": "Malformed address or asset ID",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "address",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "json",
            "msgpack"
          ],
          "type": "string",
          "name": "format",
          "in": "query"
        }
      ]
    },
    "/v2/accounts/{address}/applications/{application-id}": {
      "get": {
        "description": "Given a specific account public key and application ID, this call returns the account's application local state and global state (AppLocalState and AppParams, if either exists). Global state will only be returned if the provided address is the application's creator.",
        "tags": [
          "public",
          "nonparticipating"
        ],
        "produces": [
          "application/json",
          "application/msgpack"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get account information about a given app.",
        "operationId": "AccountApplicationInformation",
        "parameters": [
          {
            "pattern": "[A-Z0-9]{58}",
            "type": "string",
            "description": "An account public key",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "An application identifier",
            "name": "application-id",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AccountApplicationResponse"
          },
          "400": {
            "description": "Malformed address or application ID",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "address",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "json",
            "msgpack"
          ],
          "type": "string",
          "name": "format",
          "in": "query"
        }
      ]
    },
    "/v2/accounts/{address}/transactions/pending": {
      "get": {
        "description": "Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX = 0, returns all pending transactions.\n",
        "tags": [
          "public",
          "participating"
        ],
        "produces": [
          "application/json",
          "application/msgpack"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get a list of unconfirmed transactions currently in the transaction pool by address.",
        "operationId": "GetPendingTransactionsByAddress",
        "parameters": [
          {
            "pattern": "[A-Z0-9]{58}",
            "type": "string",
            "description": "An account public key",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/max"
          },
          {
            "$ref": "#/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PendingTransactionsResponse"
          },
          "400": {
            "description": "Max must be a non-negative integer",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "address",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/blocks/{round}": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "produces": [
          "application/json",
          "application/msgpack"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get the block for the given round.",
        "operationId": "GetBlock",
        "parameters": [
          {
            "minimum": 0,
            "type": "integer",
            "description": "The round from which to fetch block information.",
            "name": "round",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BlockResponse"
          },
          "400": {
            "description": "Bad Request - Non integer number",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "None existing block ",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "round",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "json",
            "msgpack"
          ],
          "type": "string",
          "name": "format",
          "in": "query"
        }
      ]
    },
    "/v2/blocks/{round}/txids": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get the top level transaction IDs for the block on the given round.",
        "operationId": "GetBlockTxids",
        "parameters": [
          {
            "minimum": 0,
            "type": "integer",
            "description": "The round from which to fetch block transaction IDs.",
            "name": "round",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BlockTxidsResponse"
          },
          "400": {
            "description": "Bad Request - Non integer number",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Non existing block",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/blocks/{round}/hash": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get the block hash for the block on the given round.",
        "operationId": "GetBlockHash",
        "parameters": [
          {
            "minimum": 0,
            "type": "integer",
            "description": "The round from which to fetch block hash information.",
            "name": "round",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BlockHashResponse"
          },
          "400": {
            "description": "Bad Request - Non integer number",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "None existing block ",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/blocks/{round}/transactions/{txid}/proof": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get a proof for a transaction in a block.",
        "operationId": "GetTransactionProof",
        "parameters": [
          {
            "type": "integer",
            "description": "The round in which the transaction appears.",
            "name": "round",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "pattern": "[A-Z0-9]+",
            "description": "The transaction ID for which to generate a proof.",
            "name": "txid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "enum": [
              "sha512_256",
              "sha256"
            ],
            "description": "The type of hash function used to create the proof, must be one of: \n* sha512_256 \n* sha256",
            "name": "hashtype",
            "in": "query",
            "required": false
          },
          {
            "$ref": "#/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TransactionProofResponse"
          },
          "400": {
            "description": "Malformed round number or transaction ID",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Non-existent block or transaction",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error, including protocol not supporting proofs.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown error"
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "name": "round",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "txid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/ledger/supply": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get the current supply reported by the ledger.",
        "operationId": "GetSupply",
        "responses": {
          "200": {
            "$ref": "#/responses/SupplyResponse"
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/participation": {
      "get": {
        "tags": [
          "private",
          "participating"
        ],
        "description": "Return a list of participation keys",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Return a list of participation keys",
        "operationId": "GetParticipationKeys",
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/responses/ParticipationKeysResponse"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Participation Key Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "post": {
        "tags": [
          "private",
          "participating"
        ],
        "consumes": [
          "application/msgpack"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Add a participation key to the node",
        "operationId": "AddParticipationKey",
        "parameters": [
          {
            "description": "The participation key to add to the node",
            "name": "participationkey",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PostParticipationResponse"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Participation Key Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/participation/generate/{address}": {
      "post": {
        "tags": [
          "private",
          "participating"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Generate and install participation keys to the node.",
        "operationId": "GenerateParticipationKeys",
        "parameters": [
          {
            "type": "string",
            "description": "An account public key",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Key dilution for two-level participation keys (defaults to sqrt of validity window).",
            "name": "dilution",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "First round for participation key.",
            "name": "first",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Last round for participation key.",
            "name": "last",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "An empty JSON object is returned if the generation process was started. Currently no status is available.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/participation/{participation-id}": {
      "delete": {
        "tags": [
          "private",
          "participating"
        ],
        "description": "Delete a given participation key by ID",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Delete a given participation key by ID",
        "operationId": "DeleteParticipationKeyByID",
        "responses": {
          "200": {
            "description": "Participation key got deleted by ID"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Participation Key Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "get": {
        "tags": [
          "private",
          "participating"
        ],
        "description": "Given a participation ID, return information about that participation key",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get participation key info given a participation ID",
        "operationId": "GetParticipationKeyByID",
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/responses/ParticipationKeyResponse"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Participation Key Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "post": {
        "tags": [
          "private",
          "participating"
        ],
        "description": "Given a participation ID, append state proof keys to a particular set of participation keys",
        "consumes": [
          "application/msgpack"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The state proof keys to add to an existing participation ID",
            "name": "keymap",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "schemes": [
          "http"
        ],
        "summary": "Append state proof keys to a participation key",
        "operationId": "AppendKeys",
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/responses/ParticipationKeyResponse"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Participation Key Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "participation-id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/shutdown": {
      "post": {
        "description": "Special management endpoint to shutdown the node. Optionally provide a timeout parameter to indicate that the node should begin shutting down after a number of seconds.",
        "tags": [
          "private",
          "nonparticipating"
        ],
        "operationId": "ShutdownNode",
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "name": "timeout",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/v2/status": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Gets the current node status.",
        "operationId": "GetStatus",
        "responses": {
          "200": {
            "$ref": "#/responses/NodeStatusResponse"
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/status/wait-for-block-after/{round}": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "description": "Waits for a block to appear after round {round} and returns the node's status at the time. There is a 1 minute timeout, when reached the current status is returned regardless of whether or not it is the round after the given round.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Gets the node status after waiting for a round after the given round.",
        "operationId": "WaitForBlock",
        "parameters": [
          {
            "minimum": 0,
            "type": "integer",
            "description": "The round to wait until returning status",
            "name": "round",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The round after the given round, or the current round if a timeout occurs.",
            "$ref": "#/responses/NodeStatusResponse"
          },
          "400": {
            "description": "Bad Request -- number must be non-negative integer",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "round",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/transactions": {
      "post": {
        "tags": [
          "public",
          "participating"
        ],
        "consumes": [
          "application/x-binary"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Broadcasts a raw transaction or transaction group to the network.",
        "operationId": "RawTransaction",
        "parameters": [
          {
            "description": "The byte encoded signed transaction to broadcast to network",
            "name": "rawtxn",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PostTransactionsResponse"
          },
          "400": {
            "description": "Bad Request - Malformed Algorand transaction ",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/transactions/async": {
      "post": {
        "tags": [
          "experimental"
        ],
        "consumes": [
          "application/x-binary"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Fast track for broadcasting a raw transaction or transaction group to the network through the tx handler without performing most of the checks and reporting detailed errors. Should be only used for development and performance testing.",
        "operationId": "RawTransactionAsync",
        "parameters": [
          {
            "description": "The byte encoded signed transaction to broadcast to network",
            "name": "rawtxn",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "type": "object"
          },
          "400": {
            "description": "Bad Request - Malformed Algorand transaction ",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/transactions/simulate": {
      "post": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "consumes": [
          "application/json",
          "application/msgpack"
        ],
        "produces": [
          "application/json",
          "application/msgpack"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.",
        "operationId": "SimulateTransaction",
        "parameters": [
          {
            "description": "The transactions to simulate, along with any other inputs.",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SimulateRequest"
            }
          },
          {
            "$ref": "#/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SimulateResponse"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/transactions/params": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get parameters for constructing a new transaction",
        "operationId": "TransactionParams",
        "responses": {
          "200": {
            "$ref": "#/responses/TransactionParametersResponse"
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/transactions/pending": {
      "get": {
        "description": "Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX = 0, returns all pending transactions.\n",
        "tags": [
          "public",
          "participating"
        ],
        "produces": [
          "application/json",
          "application/msgpack"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get a list of unconfirmed transactions currently in the transaction pool.",
        "operationId": "GetPendingTransactions",
        "parameters": [
          {
            "$ref": "#/parameters/max"
          },
          {
            "$ref": "#/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PendingTransactionsResponse"
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/transactions/pending/{txid}": {
      "get": {
        "description": "Given a transaction ID of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed:\n- transaction committed (committed round \u003e 0)\n- transaction still in the pool (committed round = 0, pool error = \"\")\n- transaction removed from pool due to error (committed round = 0, pool error != \"\")\nOr the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error.\n",
        "tags": [
          "public",
          "participating"
        ],
        "produces": [
          "application/json",
          "application/msgpack"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get a specific pending transaction.",
        "operationId": "PendingTransactionInformation",
        "parameters": [
          {
            "pattern": "[A-Z0-9]+",
            "type": "string",
            "description": "A transaction ID",
            "name": "txid",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "Given a transaction ID of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed:\n- transaction committed (committed round \u003e 0)\n- transaction still in the pool (committed round = 0, pool error = \"\")\n- transaction removed from pool due to error (committed round = 0, pool error != \"\")\n\nOr the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error.",
            "schema": {
              "$ref": "#/definitions/PendingTransactionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Transaction Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "txid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/deltas/{round}": {
      "get": {
        "description": "Get ledger deltas for a round.",
        "tags": [
            "public",
            "nonparticipating"
        ],
        "produces": [
          "application/json",
          "application/msgpack"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get a LedgerStateDelta object for a given round",
        "operationId": "GetLedgerStateDelta",
        "parameters": [
          {
            "type": "integer",
            "description": "The round for which the deltas are desired.",
            "name": "round",
            "in": "path",
            "required": true,
            "minimum": 0
          },
          {
            "$ref": "#/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LedgerStateDeltaResponse"
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Could not find a delta for round",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "408": {
            "description": "timed out on request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/deltas/{round}/txn/group": {
      "get": {
        "description": "Get ledger deltas for transaction groups in a given round.",
        "tags": [
          "public",
          "nonparticipating"
        ],
        "produces": [
          "application/json",
          "application/msgpack"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get LedgerStateDelta objects for all transaction groups in a given round",
        "operationId": "GetTransactionGroupLedgerStateDeltasForRound",
        "parameters": [
          {
            "type": "integer",
            "description": "The round for which the deltas are desired.",
            "name": "round",
            "in": "path",
            "required": true,
            "minimum": 0
          },
          {
            "$ref": "#/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TransactionGroupLedgerStateDeltasForRoundResponse"
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Could not find deltas for round",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "408": {
            "description": "timed out on request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "501": {
            "description": "Not Implemented",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/deltas/txn/group/{id}": {
      "get": {
        "description": "Get a ledger delta for a given transaction group.",
        "tags": [
          "public",
          "nonparticipating"
        ],
        "produces": [
          "application/json",
          "application/msgpack"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get a LedgerStateDelta object for a given transaction group",
        "operationId": "GetLedgerStateDeltaForTransactionGroup",
        "parameters": [
          {
            "pattern": "[A-Z0-9]+",
            "type": "string",
            "description": "A transaction ID, or transaction group ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LedgerStateDeltaForTransactionGroupResponse"
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Could not find a delta for transaction ID or group ID",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "408": {
            "description": "timed out on request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "501": {
            "description": "Not Implemented",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/stateproofs/{round}": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get a state proof that covers a given round",
        "operationId": "GetStateProof",
        "parameters": [
          {
            "type": "integer",
            "description": "The round for which a state proof is desired.",
            "name": "round",
            "in": "path",
            "required": true,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/StateProofResponse"
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Could not find a state proof that covers a given round",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "408": {
            "description": "timed out on request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "name": "round",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/blocks/{round}/lightheader/proof": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Gets a proof for a given light block header inside a state proof commitment",
        "operationId": "GetLightBlockHeaderProof",
        "parameters": [
          {
            "type": "integer",
            "description": "The round to which the light block header belongs.",
            "name": "round",
            "in": "path",
            "required": true,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LightBlockHeaderProofResponse"
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "408": {
            "description": "timed out on request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Could not create proof since some data is missing",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "name": "round",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/applications/{application-id}": {
      "get": {
        "description": "Given a application ID, it returns application information including creator, approval and clear programs, global and local schemas, and global state.",
        "tags": [
          "public",
          "nonparticipating"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get application information.",
        "operationId": "GetApplicationByID",
        "parameters": [
          {
            "type": "integer",
            "description": "An application identifier",
            "name": "application-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/responses/ApplicationResponse"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Application Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "name": "application-id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/applications/{application-id}/boxes": {
      "get": {
        "description": "Given an application ID, return all Box names. No particular ordering is guaranteed. Request fails when client or server-side configured limits prevent returning all Box names.",
        "tags": [
          "public",
          "nonparticipating"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get all box names for a given application.",
        "operationId": "GetApplicationBoxes",
        "parameters": [
          {
            "type": "integer",
            "description": "An application identifier",
            "name": "application-id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Max number of box names to return. If max is not set, or max == 0, returns all box-names.",
            "name": "max",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/responses/BoxesResponse"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "name": "application-id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/applications/{application-id}/box": {
      "get": {
        "description": "Given an application ID and box name, it returns the round, box name, and value (each base64 encoded). Box names must be in the goal app call arg encoding form 'encoding:value'. For ints, use the form 'int:1234'. For raw bytes, use the form 'b64:A=='. For printable strings, use the form 'str:hello'. For addresses, use the form 'addr:XYZ...'.",
        "tags": [
          "public",
          "nonparticipating"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get box information for a given application.",
        "operationId": "GetApplicationBoxByName",
        "parameters": [
          {
            "type": "integer",
            "description": "An application identifier",
            "name": "application-id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "A box name, in the goal app call arg form 'encoding:value'. For ints, use the form 'int:1234'. For raw bytes, use the form 'b64:A=='. For printable strings, use the form 'str:hello'. For addresses, use the form 'addr:XYZ...'.",
            "name": "name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/responses/BoxResponse"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Box Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "name": "application-id",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "name",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v2/assets/{asset-id}": {
      "get": {
        "description": "Given a asset ID, it returns asset information including creator, name, total supply and special addresses.",
        "tags": [
          "public",
          "nonparticipating"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get asset information.",
        "operationId": "GetAssetByID",
        "parameters": [
          {
            "type": "integer",
            "description": "An asset identifier",
            "name": "asset-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/responses/AssetResponse"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Application Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "name": "asset-id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/ledger/sync": {
      "delete": {
        "description": "Unset the ledger sync round.",
        "tags": [
          "public",
          "data"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Removes minimum sync round restriction from the ledger.",
        "operationId": "UnsetSyncRound",
        "responses": {
          "200": {
            "type": "object"
          },
          "400": {
            "description": "Sync round not set.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "get": {
        "description": "Gets the minimum sync round for the ledger.",
        "tags": [
          "public",
          "data"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Returns the minimum sync round the ledger is keeping in cache.",
        "operationId": "GetSyncRound",
        "responses": {
          "200": {
            "$ref": "#/responses/GetSyncRoundResponse"
          },
          "400": {
            "description": "Sync round not set.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/ledger/sync/{round}": {
      "post": {
        "description": "Sets the minimum sync round on the ledger.",
        "tags": [
          "public",
          "data"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Given a round, tells the ledger to keep that round in its cache.",
        "operationId": "SetSyncRound",
        "parameters": [
          {
            "type": "integer",
            "description": "The round for which the deltas are desired.",
            "name": "round",
            "in": "path",
            "required": true,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "type": "object"
          },
          "400": {
            "description": "Can not set sync round to an earlier round than the current round.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/teal/compile": {
      "post": {
        "description": "Given TEAL source code in plain text, return base64 encoded program bytes and base32 SHA512_256 hash of program bytes (Address style). This endpoint is only enabled when a node's configuration file sets EnableDeveloperAPI to true.",
        "tags": [
          "public",
          "nonparticipating"
        ],
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Compile TEAL source code to binary, produce its hash",
        "operationId": "TealCompile",
        "parameters": [
          {
            "description": "TEAL source code to be compiled",
            "name": "source",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          {
            "name": "sourcemap",
            "description": "When set to `true`, returns the source map of the program as a JSON. Defaults to `false`.",
            "in": "query",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful compilation",
            "$ref": "#/responses/CompileResponse"
          },
          "400": {
            "description": "Bad Request - Teal Compile Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Developer API not enabled"
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/teal/disassemble": {
      "post": {
        "description": "Given the program bytes, return the TEAL source code in plain text. This endpoint is only enabled when a node's configuration file sets EnableDeveloperAPI to true.",
        "tags": [
          "public",
          "nonparticipating"
        ],
        "consumes": [
          "application/x-binary"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Disassemble program bytes into the TEAL source code.",
        "operationId": "TealDisassemble",
        "parameters": [
          {
            "description": "TEAL program binary to be disassembled",
            "name": "source",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful disassembly",
            "$ref": "#/responses/DisassembleResponse"
          },
          "400": {
            "description": "Bad Request - Teal Compile Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Developer API not enabled"
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/catchup/{catchpoint}": {
      "post": {
        "tags": [
          "private",
          "nonparticipating"
        ],
        "description": "Given a catchpoint, it starts catching up to this catchpoint",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Starts a catchpoint catchup.",
        "operationId": "StartCatchup",
        "parameters": [
          {
            "$ref": "#/parameters/catchpoint"
          },
          {
            "name": "min",
            "description": "Specify the minimum number of blocks which the ledger must be advanced by in order to start the catchup. This is useful for simplifying tools which support fast catchup, they can run the catchup unconditionally and the node will skip the catchup if it is not needed.",
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/responses/CatchpointStartResponse"
          },
          "201": {
            "description": "OK",
            "$ref": "#/responses/CatchpointStartResponse"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "408": {
            "description": "Request Timeout",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "delete": {
        "tags": [
          "private",
          "nonparticipating"
        ],
        "description": "Given a catchpoint, it aborts catching up to this catchpoint",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Aborts a catchpoint catchup.",
        "operationId": "AbortCatchup",
        "parameters": [
          {
            "$ref": "#/parameters/catchpoint"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CatchpointAbortResponse"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "catchpoint",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/teal/dryrun": {
      "post": {
        "description": "Executes TEAL program(s) in context and returns debugging information about the execution. This endpoint is only enabled when a node's configuration file sets EnableDeveloperAPI to true.",
        "tags": [
          "public",
          "nonparticipating"
        ],
        "consumes": [
          "application/json",
          "application/msgpack"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Provide debugging information for a transaction (or group).",
        "operationId": "TealDryrun",
        "parameters": [
          {
            "description": "Transaction (or group) and any accompanying state-simulation data.",
            "name": "request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DryrunRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/responses/DryrunResponse"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Developer API not enabled"
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/experimental": {
      "get": {
        "tags": [
          "public",
          "experimental"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Returns OK if experimental API is enabled.",
        "operationId": "ExperimentalCheck",
        "responses": {
          "200": {
            "description": "Experimental API enabled"
          },
          "404": {
            "description": "Experimental API not enabled"
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/devmode/blocks/offset": {
      "get": {
        "description": "Gets the current timestamp offset.",
        "tags": [
          "public",
          "nonparticipating"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Returns the timestamp offset. Timestamp offsets can only be set in dev mode.",
        "operationId": "GetBlockTimeStampOffset",
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/responses/GetBlockTimeStampOffsetResponse"
          },
          "400": {
            "description": "TimeStamp offset not set.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/devmode/blocks/offset/{offset}": {
      "post": {
        "description": "Sets the timestamp offset (seconds) for blocks in dev mode. Providing an offset of 0 will unset this value and try to use the real clock for the timestamp.",
        "tags": [
          "public",
          "nonparticipating"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.",
        "operationId": "SetBlockTimeStampOffset",
        "parameters": [
          {
            "type": "integer",
            "description": "The timestamp offset for blocks in dev mode.",
            "name": "offset",
            "in": "path",
            "required": true,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "type": "object"
          },
          "400": {
            "description": "Cannot set timestamp offset to a negative integer.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid API Token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    }
  },
  "definitions": {
    "LedgerStateDelta": {
      "description": "Ledger StateDelta object",
      "type": "object",
      "x-algorand-format": "StateDelta"
    },
    "LedgerStateDeltaForTransactionGroup": {
      "description": "Contains a ledger delta for a single transaction group",
      "type": "object",
      "required": [
        "Delta",
        "Ids"
      ],
      "properties": {
        "Delta": {
          "$ref": "#/definitions/LedgerStateDelta"
        },
        "Ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Account": {
      "description": "Account information at a given round.\n\nDefinition:\ndata/basics/userBalance.go : AccountData\n",
      "type": "object",
      "required": [
        "round",
        "address",
        "amount",
        "pending-rewards",
        "amount-without-pending-rewards",
        "rewards",
        "status",
        "min-balance",
        "total-apps-opted-in",
        "total-assets-opted-in",
        "total-created-apps",
        "total-created-assets"
      ],
      "properties": {
        "address": {
          "description": "the account public key",
          "type": "string"
        },
        "amount": {
          "description": "\\[algo\\] total number of MicroAlgos in the account",
          "type": "integer"
        },
        "min-balance": {
          "description": "MicroAlgo balance required by the account.\n\nThe requirement grows based on asset and application usage.",
          "type": "integer"
        },
        "amount-without-pending-rewards": {
          "description": "specifies the amount of MicroAlgos in the account, without the pending rewards.",
          "type": "integer"
        },
        "apps-local-state": {
          "description": "\\[appl\\] applications local data stored in this account.\n\nNote the raw object uses `map[int] -\u003e AppLocalState` for this type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationLocalState"
          }
        },
        "total-apps-opted-in": {
          "description": "The count of all applications that have been opted in, equivalent to the count of application local data (AppLocalState objects) stored in this account.",
          "type": "integer"
        },
        "apps-total-schema": {
          "description": "\\[tsch\\] stores the sum of all of the local schemas and global schemas in this account.\n\nNote: the raw account uses `StateSchema` for this type.",
          "$ref": "#/definitions/ApplicationStateSchema"
        },
        "apps-total-extra-pages": {
          "description": "\\[teap\\] the sum of all extra application program pages for this account.",
          "type": "integer"
        },
        "assets": {
          "description": "\\[asset\\] assets held by this account.\n\nNote the raw object uses `map[int] -\u003e AssetHolding` for this type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetHolding"
          }
        },
        "total-assets-opted-in": {
          "description": "The count of all assets that have been opted in, equivalent to the count of AssetHolding objects held by this account.",
          "type": "integer"
        },
        "created-apps": {
          "description": "\\[appp\\] parameters of applications created by this account including app global data.\n\nNote: the raw account uses `map[int] -\u003e AppParams` for this type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Application"
          }
        },
        "total-created-apps": {
          "description": "The count of all apps (AppParams objects) created by this account.",
          "type": "integer"
        },
        "created-assets": {
          "description": "\\[apar\\] parameters of assets created by this account.\n\nNote: the raw account uses `map[int] -\u003e Asset` for this type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          }
        },
        "total-created-assets": {
          "description": "The count of all assets (AssetParams objects) created by this account.",
          "type": "integer"
        },
        "total-boxes": {
          "description": "\\[tbx\\] The number of existing boxes created by this account's app.",
          "type": "integer"
        },
        "total-box-bytes": {
          "description": "\\[tbxb\\] The total number of bytes used by this account's app's box keys and values.",
          "type": "integer"
        },
        "participation": {
          "$ref": "#/definitions/AccountParticipation"
        },
        "pending-rewards": {
          "description": "amount of MicroAlgos of pending rewards in this account.",
          "type": "integer"
        },
        "reward-base": {
          "description": "\\[ebase\\] used as part of the rewards computation. Only applicable to accounts which are participating.",
          "type": "integer"
        },
        "rewards": {
          "description": "\\[ern\\] total rewards of MicroAlgos the account has received, including pending rewards.",
          "type": "integer"
        },
        "round": {
          "description": "The round for which this information is relevant.",
          "type": "integer"
        },
        "status": {
          "description": "\\[onl\\] delegation status of the account's MicroAlgos\n* Offline - indicates that the associated account is delegated.\n*  Online  - indicates that the associated account used as part of the delegation pool.\n*   NotParticipating - indicates that the associated account is neither a delegator nor a delegate.",
          "type": "string"
        },
        "sig-type": {
          "description": "Indicates what type of signature is used by this account, must be one of:\n* sig\n* msig\n* lsig",
          "type": "string",
          "enum": [
            "sig",
            "msig",
            "lsig"
          ]
        },
        "auth-addr": {
          "description": "\\[spend\\] the address against which signing should be checked. If empty, the address of the current account is used. This field can be updated in any transaction by setting the RekeyTo field.",
          "type": "string",
          "x-algorand-format": "Address"
        }
      }
    },
    "AccountParticipation": {
      "description": "AccountParticipation describes the parameters used by this account in consensus protocol.",
      "type": "object",
      "required": [
        "vote-participation-key",
        "selection-participation-key",
        "vote-first-valid",
        "vote-last-valid",
        "vote-key-dilution"
      ],
      "properties": {
        "selection-participation-key": {
          "description": "\\[sel\\] Selection public key (if any) currently registered for this round.",
          "type": "string",
          "format": "byte"
        },
        "vote-first-valid": {
          "description": "\\[voteFst\\] First round for which this participation is valid.",
          "type": "integer"
        },
        "vote-key-dilution": {
          "description": "\\[voteKD\\] Number of subkeys in each batch of participation keys.",
          "type": "integer"
        },
        "vote-last-valid": {
          "description": "\\[voteLst\\] Last round for which this participation is valid.",
          "type": "integer"
        },
        "vote-participation-key": {
          "description": "\\[vote\\] root participation public key (if any) currently registered for this round.",
          "type": "string",
          "format": "byte"
        },
        "state-proof-key": {
          "description": "\\[stprf\\] Root of the state proof key (if any)",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "Asset": {
      "description": "Specifies both the unique identifier and the parameters for an asset",
      "type": "object",
      "required": [
        "index",
        "params"
      ],
      "properties": {
        "index": {
          "description": "unique asset identifier",
          "type": "integer"
        },
        "params": {
          "$ref": "#/definitions/AssetParams"
        }
      }
    },
    "AssetHolding": {
      "description": "Describes an asset held by an account.\n\nDefinition:\ndata/basics/userBalance.go : AssetHolding",
      "type": "object",
      "required": [
        "asset-id",
        "amount",
        "is-frozen"
      ],
      "properties": {
        "amount": {
          "description": "\\[a\\] number of units held.",
          "type": "integer",
          "x-algorand-format": "uint64"
        },
        "asset-id": {
          "description": "Asset ID of the holding.",
          "type": "integer",
          "x-go-name": "AssetID"
        },
        "is-frozen": {
          "description": "\\[f\\] whether or not the holding is frozen.",
          "type": "boolean"
        }
      }
    },
    "AssetParams": {
      "description": "AssetParams specifies the parameters for an asset.\n\n\\[apar\\] when part of an AssetConfig transaction.\n\nDefinition:\ndata/transactions/asset.go : AssetParams",
      "type": "object",
      "required": [
        "creator",
        "total",
        "decimals"
      ],
      "properties": {
        "clawback": {
          "description": "\\[c\\] Address of account used to clawback holdings of this asset.  If empty, clawback is not permitted.",
          "type": "string"
        },
        "creator": {
          "description": "The address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case.",
          "type": "string"
        },
        "decimals": {
          "description": "\\[dc\\] The number of digits to use after the decimal point when displaying this asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths. If 2, the base unit of the asset is in hundredths, and so on. This value must be between 0 and 19 (inclusive).",
          "type": "integer",
          "maximum": 19,
          "minimum": 0
        },
        "default-frozen": {
          "description": "\\[df\\] Whether holdings of this asset are frozen by default.",
          "type": "boolean"
        },
        "freeze": {
          "description": "\\[f\\] Address of account used to freeze holdings of this asset.  If empty, freezing is not permitted.",
          "type": "string"
        },
        "manager": {
          "description": "\\[m\\] Address of account used to manage the keys of this asset and to destroy it.",
          "type": "string"
        },
        "metadata-hash": {
          "description": "\\[am\\] A commitment to some unspecified asset metadata. The format of this metadata is up to the application.",
          "type": "string",
          "format": "byte"
        },
        "name": {
          "description": "\\[an\\] Name of this asset, as supplied by the creator. Included only when the asset name is composed of printable utf-8 characters.",
          "type": "string"
        },
        "name-b64": {
          "description": "Base64 encoded name of this asset, as supplied by the creator.",
          "type": "string",
          "format": "byte"
        },
        "reserve": {
          "description": "\\[r\\] Address of account holding reserve (non-minted) units of this asset.",
          "type": "string"
        },
        "total": {
          "description": "\\[t\\] The total number of units of this asset.",
          "type": "integer",
          "x-algorand-format": "uint64"
        },
        "unit-name": {
          "description": "\\[un\\] Name of a unit of this asset, as supplied by the creator. Included only when the name of a unit of this asset is composed of printable utf-8 characters.",
          "type": "string"
        },
        "unit-name-b64": {
          "description": "Base64 encoded name of a unit of this asset, as supplied by the creator.",
          "type": "string",
          "format": "byte"
        },
        "url": {
          "description": "\\[au\\] URL where more information about the asset can be retrieved. Included only when the URL is composed of printable utf-8 characters.",
          "type": "string"
        },
        "url-b64": {
          "description": "Base64 encoded URL where more information about the asset can be retrieved.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "AssetHoldingReference": {
      "description": "References an asset held by an account.",
      "type": "object",
      "required": [
        "account",
        "asset"
      ],
      "properties": {
        "account": {
          "description": "Address of the account holding the asset.",
          "type": "string",
          "x-algorand-format": "Address"
        },
        "asset": {
          "description": "Asset ID of the holding.",
          "type": "integer",
          "x-algorand-format": "uint64"
        }
      }
    },
    "ApplicationLocalReference": {
      "description": "References an account's local state for an application.",
      "type": "object",
      "required": [
        "account",
        "app"
      ],
      "properties": {
        "account": {
          "description": "Address of the account with the local state.",
          "type": "string",
          "x-algorand-format": "Address"
        },
        "app": {
          "description": "Application ID of the local state application.",
          "type": "integer",
          "x-algorand-format": "uint64"
        }
      }
    },
    "ApplicationStateSchema": {
      "description": "Specifies maximums on the number of each type that may be stored.",
      "type": "object",
      "required": [
        "num-uint",
        "num-byte-slice"
      ],
      "properties": {
        "num-uint": {
          "description": "\\[nui\\] num of uints.",
          "type": "integer"
        },
        "num-byte-slice": {
          "description": "\\[nbs\\] num of byte slices.",
          "type": "integer"
        }
      }
    },
    "ApplicationLocalState": {
      "description": "Stores local state associated with an application.",
      "type": "object",
      "required": [
        "id",
        "schema"
      ],
      "properties": {
        "id": {
          "description": "The application which this local state is for.",
          "type": "integer"
        },
        "schema": {
          "description": "\\[hsch\\] schema.",
          "$ref": "#/definitions/ApplicationStateSchema"
        },
        "key-value": {
          "description": "\\[tkv\\] storage.",
          "$ref": "#/definitions/TealKeyValueStore"
        }
      }
    },
    "ParticipationKey": {
      "description": "Represents a participation key used by the node.",
      "type": "object",
      "required": [
        "id",
        "key",
        "address"
      ],
      "properties": {
        "id": {
          "description": "The key's ParticipationID.",
          "type": "string"
        },
        "address": {
          "description": "Address the key was generated for.",
          "type": "string",
          "x-algorand-format": "Address"
        },
        "effective-first-valid": {
          "description": "When registered, this is the first round it may be used.",
          "type": "integer",
          "x-algorand-format": "uint64"
        },
        "effective-last-valid": {
          "description": "When registered, this is the last round it may be used.",
          "type": "integer",
          "x-algorand-format": "uint64"
        },
        "last-vote": {
          "description": "Round when this key was last used to vote.",
          "type": "integer"
        },
        "last-block-proposal": {
          "description": "Round when this key was last used to propose a block.",
          "type": "integer"
        },
        "last-state-proof": {
          "description": "Round when this key was last used to generate a state proof.",
          "type": "integer"
        },
        "key": {
          "description": "Key information stored on the account.",
          "$ref": "#/definitions/AccountParticipation"
        }
      }
    },
    "TealKeyValueStore": {
      "description": "Represents a key-value store for use in an application.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/TealKeyValue"
      }
    },
    "TealKeyValue": {
      "description": "Represents a key-value pair in an application store.",
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/TealValue"
        }
      }
    },
    "TealValue": {
      "description": "Represents a TEAL value.",
      "type": "object",
      "required": [
        "type",
        "uint",
        "bytes"
      ],
      "properties": {
        "type": {
          "description": "\\[tt\\] value type. Value `1` refers to **bytes**, value `2` refers to **uint**",
          "type": "integer"
        },
        "bytes": {
          "description": "\\[tb\\] bytes value.",
          "type": "string"
        },
        "uint": {
          "description": "\\[ui\\] uint value.",
          "type": "integer",
          "x-algorand-format": "uint64"
        }
      }
    },
    "AvmValue": {
      "description": "Represents an AVM value.",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "description": "value type. Value `1` refers to **bytes**, value `2` refers to **uint64**",
          "type": "integer"
        },
        "bytes": {
          "description": "bytes value.",
          "type": "string",
          "format": "byte"
        },
        "uint": {
          "description": "uint value.",
          "type": "integer",
          "x-algorand-format": "uint64"
        }
      }
    },
    "AvmKeyValue": {
      "description": "Represents an AVM key-value pair in an application store.",
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string",
          "format": "byte"
        },
        "value": {
          "$ref": "#/definitions/AvmValue"
        }
      }
    },
    "StateDelta": {
      "description": "Application state delta.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/EvalDeltaKeyValue"
      }
    },
    "AccountStateDelta": {
      "description": "Application state delta.",
      "type": "object",
      "required": [
        "address",
        "delta"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "delta": {
          "$ref": "#/definitions/StateDelta"
        }
      }
    },
    "EvalDeltaKeyValue": {
      "description": "Key-value pairs for StateDelta.",
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/EvalDelta"
        }
      }
    },
    "EvalDelta": {
      "description": "Represents a TEAL value delta.",
      "type": "object",
      "required": [
        "action"
      ],
      "properties": {
        "action": {
          "description": "\\[at\\] delta action.",
          "type": "integer"
        },
        "bytes": {
          "description": "\\[bs\\] bytes value.",
          "type": "string"
        },
        "uint": {
          "description": "\\[ui\\] uint value.",
          "type": "integer",
          "x-algorand-format": "uint64"
        }
      }
    },
    "Application": {
      "description": "Application index and its parameters",
      "type": "object",
      "required": [
        "id",
        "params"
      ],
      "properties": {
        "id": {
          "description": "\\[appidx\\] application index.",
          "type": "integer"
        },
        "params": {
          "description": "\\[appparams\\] application parameters.",
          "$ref": "#/definitions/ApplicationParams"
        }
      }
    },
    "ApplicationParams": {
      "description": "Stores the global information associated with an application.",
      "type": "object",
      "required": [
        "creator",
        "approval-program",
        "clear-state-program"
      ],
      "properties": {
        "creator": {
          "description": "The address that created this application. This is the address where the parameters and global state for this application can be found.",
          "type": "string",
          "x-algorand-format": "Address"
        },
        "approval-program": {
          "description": "\\[approv\\] approval program.",
          "type": "string",
          "format": "byte",
          "x-algorand-format": "TEALProgram"
        },
        "clear-state-program": {
          "description": "\\[clearp\\] approval program.",
          "type": "string",
          "format": "byte",
          "x-algorand-format": "TEALProgram"
        },
        "extra-program-pages": {
          "description": "\\[epp\\] the amount of extra program pages available to this app.",
          "type": "integer"
        },
        "local-state-schema": {
          "description": "\\[lsch\\] local schema",
          "$ref": "#/definitions/ApplicationStateSchema"
        },
        "global-state-schema": {
          "description": "\\[gsch\\] global schema",
          "$ref": "#/definitions/ApplicationStateSchema"
        },
        "global-state": {
          "description": "\\[gs\\] global state",
          "$ref": "#/definitions/TealKeyValueStore"
        }
      }
    },
    "DryrunState": {
      "description": "Stores the TEAL eval step data",
      "type": "object",
      "required": [
        "line",
        "pc",
        "stack"
      ],
      "properties": {
        "line": {
          "description": "Line number",
          "type": "integer"
        },
        "pc": {
          "description": "Program counter",
          "type": "integer"
        },
        "stack": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TealValue"
          }
        },
        "scratch": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TealValue"
          }
        },
        "error": {
          "description": "Evaluation error if any",
          "type": "string"
        }
      }
    },
    "DryrunTxnResult": {
      "description": "DryrunTxnResult contains any LogicSig or ApplicationCall program debug information and state updates from a dryrun.",
      "type": "object",
      "required": [
        "disassembly"
      ],
      "properties": {
        "disassembly": {
          "description": "Disassembled program line by line.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "logic-sig-disassembly": {
          "description": "Disassembled lsig program line by line.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "logic-sig-trace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DryrunState"
          }
        },
        "logic-sig-messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "app-call-trace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DryrunState"
          }
        },
        "app-call-messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "global-delta": {
          "$ref": "#/definitions/StateDelta"
        },
        "local-deltas": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountStateDelta"
          }
        },
        "logs": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "budget-added": {
          "description": "Budget added during execution of app call transaction.",
          "type": "integer"
        },
        "budget-consumed": {
          "description": "Budget consumed during execution of app call transaction.",
          "type": "integer"
        }
      }
    },
    "ErrorResponse": {
      "description": "An error response with optional data field.",
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "data": {
          "type": "object"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "DryrunRequest": {
      "description": "Request data type for dryrun endpoint. Given the Transactions and simulated ledger state upload, run TEAL scripts and return debugging information.",
      "type": "object",
      "required": [
        "txns",
        "accounts",
        "apps",
        "protocol-version",
        "round",
        "latest-timestamp",
        "sources"
      ],
      "properties": {
        "txns": {
          "type": "array",
          "items": {
            "description": "SignedTxn object. Must be canonically encoded.",
            "type": "string",
            "format": "json",
            "x-algorand-format": "SignedTransaction"
          }
        },
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Account"
          }
        },
        "apps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Application"
          }
        },
        "protocol-version": {
          "description": "ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in.",
          "type": "string"
        },
        "round": {
          "description": "Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to.",
          "type": "integer",
          "x-algorand-format": "uint64"
        },
        "latest-timestamp": {
          "description": "LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to.",
          "type": "integer",
          "format": "int64"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DryrunSource"
          }
        }
      }
    },
    "DryrunSource": {
      "description": "DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into transactions or application state.",
      "type": "object",
      "required": [
        "field-name",
        "source",
        "txn-index",
        "app-index"
      ],
      "properties": {
        "field-name": {
          "description": "FieldName is what kind of sources this is. If lsig then it goes into the transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the Approval Program or Clear State Program of application[this.AppIndex].",
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "txn-index": {
          "type": "integer"
        },
        "app-index": {
          "type": "integer",
          "x-algorand-format": "uint64"
        }
      }
    },
    "SimulateRequest": {
      "description": "Request type for simulation endpoint.",
      "type": "object",
      "required": [
        "txn-groups"
      ],
      "properties": {
        "txn-groups": {
          "description": "The transaction groups to simulate.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SimulateRequestTransactionGroup"
          }
        },
        "round": {
          "description": "If provided, specifies the round preceding the simulation. State changes through this round will be used to run this simulation. Usually only the 4 most recent rounds will be available (controlled by the node config value MaxAcctLookback). If not specified, defaults to the latest available round.",
          "type": "integer"
        },
        "allow-empty-signatures": {
          "description": "Allows transactions without signatures to be simulated as if they had correct signatures.",
          "type": "boolean"
        },
        "allow-more-logging": {
          "description": "Lifts limits on log opcode usage during simulation.",
          "type": "boolean"
        },
        "allow-unnamed-resources": {
          "description": "Allows access to unnamed resources during simulation.",
          "type": "boolean"
        },
        "extra-opcode-budget": {
          "description": "Applies extra opcode budget during simulation for each transaction group.",
          "type": "integer"
        },
        "exec-trace-config": {
          "$ref": "#/definitions/SimulateTraceConfig"
        }
      }
    },
    "SimulateRequestTransactionGroup": {
      "description": "A transaction group to simulate.",
      "type": "object",
      "required": [
        "txns"
      ],
      "properties": {
        "txns": {
          "description": "An atomic transaction group.",
          "type": "array",
          "items": {
            "description": "SignedTxn object. Must be canonically encoded.",
            "type": "string",
            "format": "json",
            "x-algorand-format": "SignedTransaction"
          }
        }
      }
    },
    "SimulateTraceConfig": {
      "description": "An object that configures simulation execution trace.",
      "type": "object",
      "properties": {
        "enable": {
          "description": "A boolean option for opting in execution trace features simulation endpoint.",
          "type": "boolean"
        },
        "stack-change": {
          "description": "A boolean option enabling returning stack changes together with execution trace during simulation.",
          "type": "boolean"
        },
        "scratch-change": {
          "description": "A boolean option enabling returning scratch slot changes together with execution trace during simulation.",
          "type": "boolean"
        },
        "state-change": {
          "description": "A boolean option enabling returning application state changes (global, local, and box changes) with the execution trace during simulation.",
          "type": "boolean"
        }
      }
    },
    "Box": {
      "description": "Box name and its content.",
      "type": "object",
      "required": [
        "round",
        "name",
        "value"
      ],
      "properties": {
        "round": {
          "description": "The round for which this information is relevant",
          "type": "integer"
        },
        "name": {
          "description": "\\[name\\] box name, base64 encoded",
          "type": "string",
          "format": "byte"
        },
        "value": {
          "description": "\\[value\\] box value, base64 encoded.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "BoxDescriptor": {
      "description": "Box descriptor describes a Box.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Base64 encoded box name",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "BoxReference": {
      "description": "References a box of an application.",
      "type": "object",
      "required": [
        "app",
        "name"
      ],
      "properties": {
        "app": {
          "description": "Application ID which this box belongs to",
          "type": "integer"
        },
        "name": {
          "description": "Base64 encoded box name",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "KvDelta": {
      "description": "A single Delta containing the key, the previous value and the current value for a single round.",
      "type": "object",
      "properties": {
        "key": {
          "description": "The key, base64 encoded.",
          "type": "string",
          "format": "byte"
        },
        "value": {
          "description": "The new value of the KV store entry, base64 encoded.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "Version": {
      "description": "algod version information.",
      "type": "object",
      "title": "Version contains the current algod version.",
      "required": [
        "versions",
        "genesis_id",
        "genesis_hash_b64",
        "build"
      ],
      "properties": {
        "build": {
          "$ref": "#/definitions/BuildVersion"
        },
        "genesis_hash_b64": {
          "type": "string",
          "format": "byte"
        },
        "genesis_id": {
          "type": "string"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BuildVersion": {
      "tags": [
        "common"
      ],
      "type": "object",
      "title": "BuildVersion contains the current algod build version information.",
      "required": [
        "major",
        "minor",
        "build_number",
        "commit_hash",
        "branch",
        "channel"
      ],
      "properties": {
        "branch": {
          "type": "string"
        },
        "build_number": {
          "type": "integer",
          "format": "int64"
        },
        "channel": {
          "type": "string"
        },
        "commit_hash": {
          "type": "string"
        },
        "major": {
          "type": "integer",
          "format": "int64"
        },
        "minor": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PendingTransactionResponse": {
      "description": "Details about a pending transaction. If the transaction was recently confirmed, includes confirmation details like the round and reward details.",
      "type": "object",
      "required": [
        "txn",
        "pool-error"
      ],
      "properties": {
        "asset-index": {
          "description": "The asset index if the transaction was found and it created an asset.",
          "type": "integer"
        },
        "application-index": {
          "description": "The application index if the transaction was found and it created an application.",
          "type": "integer"
        },
        "close-rewards": {
          "description": "Rewards in microalgos applied to the close remainder to account.",
          "type": "integer"
        },
        "closing-amount": {
          "description": "Closing amount for the transaction.",
          "type": "integer"
        },
        "asset-closing-amount": {
          "description": "The number of the asset's unit that were transferred to the close-to address.",
          "type": "integer"
        },
        "confirmed-round": {
          "description": "The round where this transaction was confirmed, if present.",
          "type": "integer"
        },
        "pool-error": {
          "description": "Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error.\n",
          "type": "string"
        },
        "receiver-rewards": {
          "description": "Rewards in microalgos applied to the receiver account.",
          "type": "integer"
        },
        "sender-rewards": {
          "description": "Rewards in microalgos applied to the sender account.",
          "type": "integer"
        },
        "local-state-delta": {
          "description": "Local state key/value changes for the application being executed by this transaction.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountStateDelta"
          }
        },
        "global-state-delta": {
          "description": "Global state key/value changes for the application being executed by this transaction.",
          "$ref": "#/definitions/StateDelta"
        },
        "logs": {
          "description": "Logs for the application being executed by this transaction.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "inner-txns": {
          "description": "Inner transactions produced by application execution.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PendingTransactionResponse"
          }
        },
        "txn": {
          "description": "The raw signed transaction.",
          "type": "object",
          "x-algorand-format": "SignedTransaction"
        }
      }
    },
    "SimulateTransactionGroupResult": {
      "description": "Simulation result for an atomic transaction group",
      "type": "object",
      "required": [
        "txn-results"
      ],
      "properties": {
        "txn-results": {
          "description": "Simulation result for individual transactions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SimulateTransactionResult"
          }
        },
        "failure-message": {
          "description": "If present, indicates that the transaction group failed and specifies why that happened",
          "type": "string"
        },
        "failed-at": {
          "description": "If present, indicates which transaction in this group caused the failure. This array represents the path to the failing transaction. Indexes are zero based, the first element indicates the top-level transaction, and successive elements indicate deeper inner transactions.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "app-budget-added": {
          "description": "Total budget added during execution of app calls in the transaction group.",
          "type": "integer"
        },
        "app-budget-consumed": {
          "description": "Total budget consumed during execution of app calls in the transaction group.",
          "type": "integer"
        },
        "unnamed-resources-accessed": {
          "$ref": "#/definitions/SimulateUnnamedResourcesAccessed"
        }
      }
    },
    "SimulateTransactionResult": {
      "description": "Simulation result for an individual transaction",
      "type": "object",
      "required": [
        "txn-result"
      ],
      "properties": {
        "txn-result": {
          "$ref": "#/definitions/PendingTransactionResponse"
        },
        "app-budget-consumed": {
          "description": "Budget used during execution of an app call transaction. This value includes budged used by inner app calls spawned by this transaction.",
          "type": "integer"
        },
        "logic-sig-budget-consumed": {
          "description": "Budget used during execution of a logic sig transaction.",
          "type": "integer"
        },
        "exec-trace": {
          "$ref": "#/definitions/SimulationTransactionExecTrace"
        },
        "unnamed-resources-accessed": {
          "$ref": "#/definitions/SimulateUnnamedResourcesAccessed"
        }
      }
    },
    "StateProof": {
      "description": "Represents a state proof and its corresponding message",
      "type": "object",
      "required": [
        "Message",
        "StateProof"
      ],
      "properties": {
        "Message": {
          "$ref": "#/definitions/StateProofMessage"
        },
        "StateProof": {
          "description": "The encoded StateProof for the message.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "LightBlockHeaderProof": {
      "description": "Proof of membership and position of a light block header.",
      "type": "object",
      "required": [
        "index",
        "treedepth",
        "proof"
      ],
      "properties": {
        "index": {
          "description": "The index of the light block header in the vector commitment tree",
          "type": "integer"
        },
        "treedepth": {
          "description": "Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root.",
          "type": "integer"
        },
        "proof": {
          "description": "The encoded proof.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "StateProofMessage": {
      "description": "Represents the message that the state proofs are attesting to.",
      "type": "object",
      "required": [
        "BlockHeadersCommitment",
        "VotersCommitment",
        "LnProvenWeight",
        "FirstAttestedRound",
        "LastAttestedRound"
      ],
      "properties": {
        "BlockHeadersCommitment": {
          "description": "The vector commitment root on all light block headers within a state proof interval.",
          "type": "string",
          "format": "byte"
        },
        "VotersCommitment": {
          "description": "The vector commitment root of the top N accounts to sign the next StateProof.",
          "type": "string",
          "format": "byte"
        },
        "LnProvenWeight": {
          "description": "An integer value representing the natural log of the proven weight with 16 bits of precision. This value would be used to verify the next state proof.",
          "type": "integer",
          "x-algorand-format": "uint64"
        },
        "FirstAttestedRound": {
          "description": "The first round the message attests to.",
          "type": "integer",
          "x-algorand-format": "uint64"
        },
        "LastAttestedRound": {
          "description": "The last round the message attests to.",
          "type": "integer",
          "x-algorand-format": "uint64"
        }
      }
    },
    "SimulationEvalOverrides": {
      "description": "The set of parameters and limits override during simulation. If this set of parameters is present, then evaluation parameters may differ from standard evaluation in certain ways.",
      "type": "object",
      "properties": {
        "allow-empty-signatures": {
          "description": "If true, transactions without signatures are allowed and simulated as if they were properly signed.",
          "type": "boolean"
        },
        "allow-unnamed-resources": {
          "description": "If true, allows access to unnamed resources during simulation.",
          "type": "boolean"
        },
        "max-log-calls": {
          "description": "The maximum log calls one can make during simulation",
          "type": "integer"
        },
        "max-log-size": {
          "description": "The maximum byte number to log during simulation",
          "type": "integer"
        },
        "extra-opcode-budget": {
          "description": "The extra opcode budget added to each transaction group during simulation",
          "type": "integer"
        }
      }
    },
    "ScratchChange": {
      "description": "A write operation into a scratch slot.",
      "type": "object",
      "required": [
        "slot",
        "new-value"
      ],
      "properties": {
        "slot": {
          "description": "The scratch slot written.",
          "type": "integer"
        },
        "new-value": {
          "$ref": "#/definitions/AvmValue"
        }
      }
    },
    "ApplicationStateOperation": {
      "description": "An operation against an application's global/local/box state.",
      "required": [
        "operation",
        "app-state-type",
        "key"
      ],
      "properties": {
        "operation": {
          "description": "Operation type. Value `w` is **write**, `d` is **delete**.",
          "type": "string"
        },
        "app-state-type": {
          "description": "Type of application state. Value `g` is **global state**, `l` is **local state**, `b` is **boxes**.",
          "type": "string"
        },
        "key": {
          "description": "The key (name) of the global/local/box state.",
          "type": "string",
          "format": "byte"
        },
        "new-value": {
          "$ref": "#/definitions/AvmValue"
        },
        "account": {
          "description": "For local state changes, the address of the account associated with the local state.",
          "type": "string",
          "x-algorand-format": "Address"
        }
      }
    },
    "ApplicationKVStorage": {
      "description": "An application's global/local/box state.",
      "required": [
        "kvs"
      ],
      "properties": {
        "kvs": {
          "description": "Key-Value pairs representing application states.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvmKeyValue"
          }
        },
        "account": {
          "description": "The address of the account associated with the local state.",
          "type": "string",
          "x-algorand-format": "Address"
        }
      }
    },
    "ApplicationInitialStates": {
      "description": "An application's initial global/local/box states that were accessed during simulation.",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "Application index.",
          "type": "integer",
          "x-algorand-format": "uint64"
        },
        "app-locals": {
          "description": "An application's initial local states tied to different accounts.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationKVStorage"
          }
        },
        "app-globals": {
          "$ref": "#/definitions/ApplicationKVStorage"
        },
        "app-boxes": {
          "$ref": "#/definitions/ApplicationKVStorage"
        }
      }
    },
    "SimulationOpcodeTraceUnit": {
      "description": "The set of trace information and effect from evaluating a single opcode.",
      "type": "object",
      "required": [
        "pc"
      ],
      "properties": {
        "pc": {
          "description": "The program counter of the current opcode being evaluated.",
          "type": "integer"
        },
        "scratch-changes": {
          "description": "The writes into scratch slots.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScratchChange"
          }
        },
        "state-changes": {
          "description": "The operations against the current application's states.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationStateOperation"
          }
        },
        "spawned-inners": {
          "description": "The indexes of the traces for inner transactions spawned by this opcode, if any.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "stack-pop-count": {
          "description": "The number of deleted stack values by this opcode.",
          "type": "integer"
        },
        "stack-additions": {
          "description": "The values added by this opcode to the stack.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvmValue"
          }
        }
      }
    },
    "SimulationTransactionExecTrace": {
      "description": "The execution trace of calling an app or a logic sig, containing the inner app call trace in a recursive way.",
      "type": "object",
      "properties": {
        "approval-program-trace": {
          "description": "Program trace that contains a trace of opcode effects in an approval program.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SimulationOpcodeTraceUnit"
          }
        },
        "approval-program-hash": {
          "description": "SHA512_256 hash digest of the approval program executed in transaction.",
          "type": "string",
          "format": "byte"
        },
        "clear-state-program-trace": {
          "description": "Program trace that contains a trace of opcode effects in a clear state program.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SimulationOpcodeTraceUnit"
          }
        },
        "clear-state-program-hash": {
          "description": "SHA512_256 hash digest of the clear state program executed in transaction.",
          "type": "string",
          "format": "byte"
        },
        "clear-state-rollback": {
          "description": "If true, indicates that the clear state program failed and any persistent state changes it produced should be reverted once the program exits.",
          "type": "boolean"
        },
        "clear-state-rollback-error": {
          "description": "The error message explaining why the clear state program failed. This field will only be populated if clear-state-rollback is true and the failure was due to an execution error.",
          "type": "string"
        },
        "logic-sig-trace": {
          "description": "Program trace that contains a trace of opcode effects in a logic sig.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SimulationOpcodeTraceUnit"
          }
        },
        "logic-sig-hash": {
          "description": "SHA512_256 hash digest of the logic sig executed in transaction.",
          "type": "string",
          "format": "byte"
        },
        "inner-trace": {
          "description": "An array of SimulationTransactionExecTrace representing the execution trace of any inner transactions executed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SimulationTransactionExecTrace"
          }
        }
      }
    },
    "SimulateUnnamedResourcesAccessed": {
      "description": "These are resources that were accessed by this group that would normally have caused failure, but were allowed in simulation. Depending on where this object is in the response, the unnamed resources it contains may or may not qualify for group resource sharing. If this is a field in SimulateTransactionGroupResult, the resources do qualify, but if this is a field in SimulateTransactionResult, they do not qualify. In order to make this group valid for actual submission, resources that qualify for group sharing can be made available by any transaction of the group; otherwise, resources must be placed in the same transaction which accessed them.",
      "type": "object",
      "properties": {
        "accounts": {
          "description": "The unnamed accounts that were referenced. The order of this array is arbitrary.",
          "type": "array",
          "items": {
            "type": "string",
            "x-algorand-format": "Address"
          }
        },
        "assets": {
          "description": "The unnamed assets that were referenced. The order of this array is arbitrary.",
          "type": "array",
          "items": {
            "type": "integer",
            "x-algorand-format": "uint64"
          }
        },
        "apps": {
          "description": "The unnamed applications that were referenced. The order of this array is arbitrary.",
          "type": "array",
          "items": {
            "type": "integer",
            "x-algorand-format": "uint64"
          }
        },
        "boxes": {
          "description": "The unnamed boxes that were referenced. The order of this array is arbitrary.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BoxReference"
          }
        },
        "extra-box-refs": {
          "description": "The number of extra box references used to increase the IO budget. This is in addition to the references defined in the input transaction group and any referenced to unnamed boxes.",
          "type": "integer"
        },
        "asset-holdings": {
          "description": "The unnamed asset holdings that were referenced. The order of this array is arbitrary.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetHoldingReference"
          }
        },
        "app-locals": {
          "description": "The unnamed application local states that were referenced. The order of this array is arbitrary.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationLocalReference"
          }
        }
      }
    },
    "SimulateInitialStates": {
      "description": "Initial states of resources that were accessed during simulation.",
      "type": "object",
      "properties": {
        "app-initial-states": {
          "description": "The initial states of accessed application before simulation. The order of this array is arbitrary.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationInitialStates"
          }
        }
      }
    }
  },
  "parameters": {
    "account-id": {
      "type": "string",
      "x-go-name": "AccountID",
      "description": "account string",
      "name": "account-id",
      "in": "path",
      "required": true
    },
    "address": {
      "type": "string",
      "description": "Only include transactions with this address in one of the transaction fields.",
      "name": "address",
      "in": "query"
    },
    "address-role": {
      "enum": [
        "sender",
        "receiver",
        "freeze-target"
      ],
      "type": "string",
      "description": "Combine with the address parameter to define what type of address to search for.",
      "name": "address-role",
      "in": "query"
    },
    "after-time": {
      "type": "string",
      "format": "date-time",
      "x-algorand-format": "RFC3339 String",
      "description": "Include results after the given time. Must be an RFC 3339 formatted string.",
      "name": "after-time",
      "in": "query"
    },
    "asset-id": {
      "type": "integer",
      "x-go-name": "AssetID",
      "description": "Asset ID",
      "name": "asset-id",
      "in": "query"
    },
    "before-time": {
      "type": "string",
      "format": "date-time",
      "x-algorand-format": "RFC3339 String",
      "description": "Include results before the given time. Must be an RFC 3339 formatted string.",
      "name": "before-time",
      "in": "query"
    },
    "catchpoint": {
      "type": "string",
      "format": "catchpoint",
      "pattern": "[0-9]{1,10}#[A-Z0-9]{1,53}",
      "x-algorand-format": "Catchpoint String",
      "description": "A catch point",
      "name": "catchpoint",
      "in": "path",
      "required": true
    },
    "currency-greater-than": {
      "type": "integer",
      "description": "Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.",
      "name": "currency-greater-than",
      "in": "query"
    },
    "currency-less-than": {
      "type": "integer",
      "description": "Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.",
      "name": "currency-less-than",
      "in": "query"
    },
    "exclude-close-to": {
      "type": "boolean",
      "description": "Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true.",
      "name": "exclude-close-to",
      "in": "query"
    },
    "format": {
      "enum": [
        "json",
        "msgpack"
      ],
      "type": "string",
      "description": "Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.",
      "name": "format",
      "in": "query"
    },
    "limit": {
      "type": "integer",
      "description": "Maximum number of results to return.",
      "name": "limit",
      "in": "query"
    },
    "max": {
      "type": "integer",
      "description": "Truncated number of transactions to display. If max=0, returns all pending txns.",
      "name": "max",
      "in": "query"
    },
    "max-round": {
      "type": "integer",
      "description": "Include results at or before the specified max-round.",
      "name": "max-round",
      "in": "query"
    },
    "min-round": {
      "type": "integer",
      "description": "Include results at or after the specified min-round.",
      "name": "min-round",
      "in": "query"
    },
    "next": {
      "type": "string",
      "description": "The next page of results. Use the next token provided by the previous results.",
      "name": "next",
      "in": "query"
    },
    "note-prefix": {
      "type": "string",
      "description": "Specifies a prefix which must be contained in the note field.",
      "name": "note-prefix",
      "in": "query",
      "x-algorand-format": "base64"
    },
    "round": {
      "type": "integer",
      "description": "Include results for the specified round.",
      "name": "round",
      "in": "query"
    },
    "round-number": {
      "type": "integer",
      "description": "Round number",
      "name": "round-number",
      "in": "path",
      "required": true
    },
    "sig-type": {
      "enum": [
        "sig",
        "msig",
        "lsig"
      ],
      "type": "string",
      "description": "SigType filters just results using the specified type of signature:\n* sig - Standard\n* msig - MultiSig\n* lsig - LogicSig",
      "name": "sig-type",
      "in": "query"
    },
    "tx-id": {
      "type": "string",
      "x-algorand-format": "Address",
      "x-go-name": "TxID",
      "description": "Lookup the specific transaction by ID.",
      "name": "tx-id",
      "in": "query"
    },
    "tx-type": {
      "enum": [
        "pay",
        "keyreg",
        "acfg",
        "axfer",
        "afrz",
        "appl",
        "stpf"
      ],
      "type": "string",
      "name": "tx-type",
      "in": "query"
    }
  },
  "responses": {
    "GetBlockTimeStampOffsetResponse": {
      "description": "Response containing the timestamp offset in seconds",
      "schema": {
        "type": "object",
        "required": [
          "offset"
        ],
        "properties": {
          "offset": {
            "description": "Timestamp offset in seconds.",
            "type": "integer"
          }
        }
      }
    },
    "GetSyncRoundResponse": {
      "description": "Response containing the ledger's minimum sync round",
      "schema": {
        "type": "object",
        "required": [
          "round"
        ],
        "properties": {
          "round": {
            "description": "The minimum sync round for the ledger.",
            "type": "integer"
          }
        }
      }
    },
    "LedgerStateDeltaForTransactionGroupResponse": {
      "description": "Response containing a ledger state delta for a single transaction group.",
      "schema": {
        "$ref": "#/definitions/LedgerStateDelta"
      }
    },
    "TransactionGroupLedgerStateDeltasForRoundResponse": {
      "description": "Response containing all ledger state deltas for transaction groups, with their associated Ids, in a single round.",
      "schema": {
        "type": "object",
        "required": [
          "Deltas"
        ],
        "properties": {
          "Deltas": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LedgerStateDeltaForTransactionGroup"
            }
          }
        }
      }
    },
    "LedgerStateDeltaResponse": {
      "description": "Contains ledger deltas",
      "schema": {
        "$ref": "#/definitions/LedgerStateDelta"
      }
    },
    "LightBlockHeaderProofResponse": {
      "description": "Proof of a light block header.",
      "schema": {
        "$ref": "#/definitions/LightBlockHeaderProof"
      }
    },
    "StateProofResponse": {
      "description": "StateProofResponse wraps the StateProof type in a response.",
      "schema": {
        "$ref": "#/definitions/StateProof"
      }
    },
    "AccountResponse": {
      "description": "AccountResponse wraps the Account type in a response.",
      "schema": {
        "$ref": "#/definitions/Account"
      }
    },
    "AccountAssetResponse": {
      "description": "AccountAssetResponse describes the account's asset holding and asset parameters (if either exist) for a specific asset ID. Asset parameters will only be returned if the provided address is the asset's creator.",
      "schema": {
        "type": "object",
        "required": [
          "round"
        ],
        "properties": {
          "round": {
            "description": "The round for which this information is relevant.",
            "type": "integer"
          },
          "asset-holding": {
            "description": "\\[asset\\] Details about the asset held by this account.\n\nThe raw account uses `AssetHolding` for this type.",
            "$ref": "#/definitions/AssetHolding"
          },
          "created-asset": {
            "description": "\\[apar\\] parameters of the asset created by this account.\n\nThe raw account uses `AssetParams` for this type.",
            "$ref": "#/definitions/AssetParams"
          }
        }
      }
    },
    "AccountApplicationResponse": {
      "description": "AccountApplicationResponse describes the account's application local state and global state (AppLocalState and AppParams, if either exists) for a specific application ID. Global state will only be returned if the provided address is the application's creator.",
      "schema": {
        "type": "object",
        "required": [
          "round"
        ],
        "properties": {
          "round": {
            "description": "The round for which this information is relevant.",
            "type": "integer"
          },
          "app-local-state": {
            "description": "\\[appl\\] the application local data stored in this account.\n\nThe raw account uses `AppLocalState` for this type.",
            "$ref": "#/definitions/ApplicationLocalState"
          },
          "created-app": {
            "description": "\\[appp\\] parameters of the application created by this account including app global data.\n\nThe raw account uses `AppParams` for this type.",
            "$ref": "#/definitions/ApplicationParams"
          }
        }
      }
    },
    "BlockResponse": {
      "description": "Encoded block object.",
      "schema": {
        "type": "object",
        "required": [
          "block"
        ],
        "properties": {
          "block": {
            "description": "Block header data.",
            "type": "object",
            "x-algorand-format": "BlockHeader"
          },
          "cert": {
            "description": "Optional certificate object. This is only included when the format is set to message pack.",
            "type": "object",
            "x-algorand-format": "BlockCertificate"
          }
        }
      }
    },
    "BlockTxidsResponse": {
      "description": "Top level transaction IDs in a block.",
      "schema": {
        "type": "object",
        "required": [
          "blockTxids"
        ],
        "properties": {
          "blockTxids": {
            "description": "Block transaction IDs.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "BlockHashResponse": {
      "description": "Hash of a block header.",
      "schema": {
        "type": "object",
        "required": [
          "blockHash"
        ],
        "properties": {
          "blockHash": {
            "description": "Block header hash.",
            "type": "string"
          }
        }
      }
    },
    "TransactionProofResponse": {
      "description": "Proof of transaction in a block.",
      "schema": {
        "type": "object",
        "required": [
          "proof",
          "stibhash",
          "idx",
          "treedepth",
          "hashtype"
        ],
        "properties": {
          "proof": {
            "description": "Proof of transaction membership.",
            "type": "string",
            "format": "byte"
          },
          "stibhash": {
            "description": "Hash of SignedTxnInBlock for verifying proof.",
            "type": "string",
            "format": "byte"
          },
          "treedepth": {
            "description": "Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root.",
            "type": "integer"
          },
          "idx": {
            "description": "Index of the transaction in the block's payset.",
            "type": "integer"
          },
          "hashtype": {
            "type": "string",
            "enum": [
              "sha512_256",
              "sha256"
            ],
            "description": "The type of hash function used to create the proof, must be one of: \n* sha512_256 \n* sha256"
          }
        }
      }
    },
    "CatchpointStartResponse": {
      "tags": [
        "private"
      ],
      "schema": {
        "description": "An catchpoint start response.",
        "type": "object",
        "required": [
          "catchup-message"
        ],
        "properties": {
          "catchup-message": {
            "description": "Catchup start response string",
            "type": "string"
          }
        }
      }
    },
    "CatchpointAbortResponse": {
      "tags": [
        "private"
      ],
      "schema": {
        "description": "An catchpoint abort response.",
        "type": "object",
        "required": [
          "catchup-message"
        ],
        "properties": {
          "catchup-message": {
            "description": "Catchup abort response string",
            "type": "string"
          }
        }
      }
    },
    "NodeStatusResponse": {
      "schema": {
        "description": "NodeStatus contains the information about a node status",
        "type": "object",
        "required": [
          "catchup-time",
          "last-version",
          "last-round",
          "next-version",
          "next-version-round",
          "next-version-supported",
          "stopped-at-unsupported-round",
          "time-since-last-round"
        ],
        "properties": {
          "catchup-time": {
            "description": "CatchupTime in nanoseconds",
            "type": "integer"
          },
          "last-round": {
            "description": "LastRound indicates the last round seen",
            "type": "integer"
          },
          "last-version": {
            "description": "LastVersion indicates the last consensus version supported",
            "type": "string"
          },
          "next-version": {
            "description": "NextVersion of consensus protocol to use",
            "type": "string"
          },
          "next-version-round": {
            "description": "NextVersionRound is the round at which the next consensus version will apply",
            "type": "integer"
          },
          "next-version-supported": {
            "description": "NextVersionSupported indicates whether the next consensus version is supported by this node",
            "type": "boolean"
          },
          "stopped-at-unsupported-round": {
            "description": "StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress",
            "type": "boolean"
          },
          "time-since-last-round": {
            "description": "TimeSinceLastRound in nanoseconds",
            "type": "integer"
          },
          "last-catchpoint": {
            "description": "The last catchpoint seen by the node",
            "type": "string"
          },
          "catchpoint": {
            "description": "The current catchpoint that is being caught up to",
            "type": "string"
          },
          "catchpoint-total-accounts": {
            "description": "The total number of accounts included in the current catchpoint",
            "type": "integer"
          },
          "catchpoint-processed-accounts": {
            "description": "The number of accounts from the current catchpoint that have been processed so far as part of the catchup",
            "type": "integer"
          },
          "catchpoint-verified-accounts": {
            "description": "The number of accounts from the current catchpoint that have been verified so far as part of the catchup",
            "type": "integer"
          },
          "catchpoint-total-kvs": {
            "description": "The total number of key-values (KVs) included in the current catchpoint",
            "type": "integer"
          },
          "catchpoint-processed-kvs": {
            "description": "The number of key-values (KVs) from the current catchpoint that have been processed so far as part of the catchup",
            "type": "integer"
          },
          "catchpoint-verified-kvs": {
            "description": "The number of key-values (KVs) from the current catchpoint that have been verified so far as part of the catchup",
            "type": "integer"
          },
          "catchpoint-total-blocks": {
            "description": "The total number of blocks that are required to complete the current catchpoint catchup",
            "type": "integer"
          },
          "catchpoint-acquired-blocks": {
            "description": "The number of blocks that have already been obtained by the node as part of the catchup",
            "type": "integer"
          },
          "upgrade-delay": {
            "description": "Upgrade delay",
            "type": "integer"
          },
          "upgrade-node-vote": {
            "description": "This node's upgrade vote",
            "type": "boolean"
          },
          "upgrade-votes-required": {
            "description": "Yes votes required for consensus upgrade",
            "type": "integer"
          },
          "upgrade-votes": {
            "description": "Total votes cast for consensus upgrade",
            "type": "integer"
          },
          "upgrade-yes-votes": {
            "description": "Yes votes cast for consensus upgrade",
            "type": "integer"
          },
          "upgrade-no-votes": {
            "description": "No votes cast for consensus upgrade",
            "type": "integer"
          },
          "upgrade-next-protocol-vote-before": {
            "description": "Next protocol round",
            "type": "integer"
          },
          "upgrade-vote-rounds": {
            "description": "Total voting rounds for current upgrade",
            "type": "integer"
          }
        }
      }
    },
    "PendingTransactionsResponse": {
      "description": "A potentially truncated list of transactions currently in the node's transaction pool. You can compute whether or not the list is truncated if the number of elements in the **top-transactions** array is fewer than **total-transactions**.",
      "schema": {
        "description": "PendingTransactions is an array of signed transactions exactly as they were submitted.",
        "type": "object",
        "required": [
          "top-transactions",
          "total-transactions"
        ],
        "properties": {
          "top-transactions": {
            "description": "An array of signed transaction objects.",
            "type": "array",
            "items": {
              "type": "object",
              "x-algorand-format": "SignedTransaction"
            }
          },
          "total-transactions": {
            "description": "Total number of transactions in the pool.",
            "type": "integer"
          }
        }
      }
    },
    "ParticipationKeysResponse": {
      "description": "A list of participation keys",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ParticipationKey"
        }
      }
    },
    "ParticipationKeyResponse": {
      "description": "A detailed description of a participation ID",
      "schema": {
        "$ref": "#/definitions/ParticipationKey"
      }
    },
    "PostParticipationResponse": {
      "description": "Participation ID of the submission",
      "schema": {
        "type": "object",
        "required": [
          "partId"
        ],
        "properties": {
          "partId": {
            "description": "encoding of the participation ID.",
            "type": "string"
          }
        }
      }
    },
    "PostTransactionsResponse": {
      "description": "Transaction ID of the submission.",
      "schema": {
        "type": "object",
        "required": [
          "txId"
        ],
        "properties": {
          "txId": {
            "description": "encoding of the transaction hash.",
            "type": "string"
          }
        }
      }
    },
    "SimulateResponse": {
      "description": "Result of a transaction group simulation.",
      "schema": {
        "type": "object",
        "required": [
          "version",
          "last-round",
          "txn-groups"
        ],
        "properties": {
          "version": {
            "description": "The version of this response object.",
            "type": "integer"
          },
          "last-round": {
            "description": "The round immediately preceding this simulation. State changes through this round were used to run this simulation.",
            "type": "integer"
          },
          "txn-groups": {
            "description": "A result object for each transaction group that was simulated.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/SimulateTransactionGroupResult"
            }
          },
          "eval-overrides": {
            "$ref": "#/definitions/SimulationEvalOverrides"
          },
          "exec-trace-config": {
            "$ref": "#/definitions/SimulateTraceConfig"
          },
          "initial-states": {
            "$ref": "#/definitions/SimulateInitialStates"
          }
        }
      }
    },
    "SupplyResponse": {
      "description": "Supply represents the current supply of MicroAlgos in the system.",
      "schema": {
        "description": "Supply represents the current supply of MicroAlgos in the system",
        "type": "object",
        "required": [
          "online-money",
          "current_round",
          "total-money"
        ],
        "properties": {
          "current_round": {
            "description": "Round",
            "type": "integer"
          },
          "online-money": {
            "description": "OnlineMoney",
            "type": "integer"
          },
          "total-money": {
            "description": "TotalMoney",
            "type": "integer"
          }
        }
      }
    },
    "TransactionParametersResponse": {
      "description": "TransactionParams contains the parameters that help a client construct a new transaction.",
      "schema": {
        "description": "TransactionParams contains the parameters that help a client construct\na new transaction.",
        "type": "object",
        "required": [
          "consensus-version",
          "fee",
          "genesis-id",
          "genesis-hash",
          "last-round",
          "min-fee"
        ],
        "properties": {
          "consensus-version": {
            "description": "ConsensusVersion indicates the consensus protocol version\nas of LastRound.",
            "type": "string"
          },
          "fee": {
            "description": "Fee is the suggested transaction fee\nFee is in units of micro-Algos per byte.\nFee may fall to zero but transactions must still have a fee of\nat least MinTxnFee for the current network protocol.",
            "type": "integer"
          },
          "genesis-hash": {
            "description": "GenesisHash is the hash of the genesis block.",
            "type": "string",
            "format": "byte"
          },
          "genesis-id": {
            "description": "GenesisID is an ID listed in the genesis block.",
            "type": "string"
          },
          "last-round": {
            "description": "LastRound indicates the last round seen",
            "type": "integer"
          },
          "min-fee": {
            "description": "The minimum transaction fee (not per byte) required for the\ntxn to validate for the current network protocol.",
            "type": "integer"
          }
        }
      }
    },
    "ApplicationResponse": {
      "description": "Application information",
      "schema": {
        "$ref": "#/definitions/Application"
      }
    },
    "BoxesResponse": {
      "description": "Box names of an application",
      "schema": {
        "type": "object",
        "required": [
          "boxes"
        ],
        "properties": {
          "boxes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/BoxDescriptor"
            }
          }
        }
      }
    },
    "BoxResponse": {
      "description": "Box information",
      "schema": {
        "$ref": "#/definitions/Box"
      }
    },
    "AssetResponse": {
      "description": "Asset information",
      "schema": {
        "$ref": "#/definitions/Asset"
      }
    },
    "CompileResponse": {
      "description": "Teal compile Result",
      "schema": {
        "type": "object",
        "required": [
          "hash",
          "result"
        ],
        "properties": {
          "hash": {
            "description": "base32 SHA512_256 of program bytes (Address style)",
            "type": "string"
          },
          "result": {
            "description": "base64 encoded program bytes",
            "type": "string"
          },
          "sourcemap": {
            "description": "JSON of the source map",
            "type": "object"
          }
        }
      }
    },
    "DisassembleResponse": {
      "description": "Teal disassembly Result",
      "schema": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "description": "disassembled Teal code",
            "type": "string"
          }
        }
      }
    },
    "DryrunResponse": {
      "description": "DryrunResponse contains per-txn debug information from a dryrun.",
      "schema": {
        "type": "object",
        "required": [
          "txns",
          "protocol-version",
          "error"
        ],
        "properties": {
          "txns": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DryrunTxnResult"
            }
          },
          "error": {
            "type": "string"
          },
          "protocol-version": {
            "description": "Protocol version is the protocol version Dryrun was operated under.",
            "type": "string"
          }
        }
      }
    },
    "VersionsResponse": {
      "description": "VersionsResponse is the response to 'GET /versions'",
      "schema": {
        "$ref": "#/definitions/Version"
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "description": "Generated header parameter. This token can be generated using the Goal command line tool. Example value ='b7e384d0317b8050ce45900a94a1931e28540e1f69b2d242b424659c341b4697'",
      "type": "apiKey",
      "name": "X-Algo-API-Token",
      "in": "header",
      "x-example": "b7e384d0317b8050ce45900a94a1931e28540e1f69b2d242b424659c341b4697"
    }
  },
  "security": [
    {
      "api_key": []
    }
  ],
  "tags": [
    {
      "name": "private"
    }
  ]
}
