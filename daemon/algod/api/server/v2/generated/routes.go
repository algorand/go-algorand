// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string) error
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address)
	return err
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET("/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.GET("/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET("/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET("/v2/status", wrapper.GetStatus, m...)
	router.GET("/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST("/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST("/v2/transactions", wrapper.RawTransaction, m...)
	router.GET("/v2/transactions/params", wrapper.TransactionParams, m...)
	router.GET("/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET("/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"EZxO7qcAAA==",
	"EZxO7qcAAA==",
>>>>>>> variant B
	"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",
####### Ancestor
	"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",
======= end
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
