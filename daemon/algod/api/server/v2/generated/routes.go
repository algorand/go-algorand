// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"format":  true,
		"exclude": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------
	if paramValue := ctx.QueryParam("exclude"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":   true,
		"hashtype": true,
		"format":   true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------
	if paramValue := ctx.QueryParam("hashtype"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":    true,
		"sourcemap": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------
	if paramValue := ctx.QueryParam("sourcemap"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET("/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET("/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET("/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.GET("/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET("/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET("/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET("/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET("/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET("/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET("/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET("/v2/status", wrapper.GetStatus, m...)
	router.GET("/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST("/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST("/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST("/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.POST("/v2/transactions", wrapper.RawTransaction, m...)
	router.GET("/v2/transactions/params", wrapper.TransactionParams, m...)
	router.GET("/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET("/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
