// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64, params GetApplicationByIDParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64, params GetAssetByIDParams) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Create a speculation context starting at the given block.
	// (POST /v2/blocks/{round}/speculation)
	CreateSpeculation(ctx echo.Context, round uint64) error
	// Get a Merkle proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetProof(ctx echo.Context, round uint64, txid string, params GetProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Operates on a speculation object.
	// (POST /v2/speculation/{speculation}/{operation})
	SpeculationOperation(ctx echo.Context, speculation string, operation string) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context, params RawTransactionParams) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context, params TransactionParamsParams) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
		"format":      true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationByIDParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetByIDParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId, params)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// CreateSpeculation converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSpeculation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSpeculation(ctx, round)
	return err
}

// GetProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetProof(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProofParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// SpeculationOperation converts echo context to params.
func (w *ServerInterfaceWrapper) SpeculationOperation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "speculation" -------------
	var speculation string

	err = runtime.BindStyledParameter("simple", false, "speculation", ctx.Param("speculation"), &speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// ------------- Path parameter "operation" -------------
	var operation string

	err = runtime.BindStyledParameter("simple", false, "operation", ctx.Param("operation"), &operation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter operation: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SpeculationOperation(ctx, speculation, operation)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RawTransactionParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx, params)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TransactionParamsParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx, params)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET("/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.GET("/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET("/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET("/v2/blocks/:round", wrapper.GetBlock, m...)
	router.POST("/v2/blocks/:round/speculation", wrapper.CreateSpeculation, m...)
	router.GET("/v2/blocks/:round/transactions/:txid/proof", wrapper.GetProof, m...)
	router.GET("/v2/ledger/supply", wrapper.GetSupply, m...)
	router.POST("/v2/speculation/:speculation/:operation", wrapper.SpeculationOperation, m...)
	router.GET("/v2/status", wrapper.GetStatus, m...)
	router.GET("/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST("/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST("/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.POST("/v2/transactions", wrapper.RawTransaction, m...)
	router.GET("/v2/transactions/params", wrapper.TransactionParams, m...)
	router.GET("/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET("/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"V++v/n8AAAD//9khuCw1BAEA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
