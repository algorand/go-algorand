// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryRun(ctx echo.Context) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {

	validQueryParams := map[string]bool{}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {

	validQueryParams := map[string]bool{}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealDryRun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryRun(ctx echo.Context) error {

	validQueryParams := map[string]bool{}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryRun(ctx)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {

	validQueryParams := map[string]bool{}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET("/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.GET("/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET("/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET("/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET("/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET("/v2/status", wrapper.GetStatus, m...)
	router.GET("/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST("/v2/teal/dryrun", wrapper.TealDryRun, m...)
	router.POST("/v2/transactions", wrapper.RawTransaction, m...)
	router.GET("/v2/transactions/params", wrapper.TransactionParams, m...)
	router.GET("/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET("/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/fTl/wcAAP//3V3h0sTBAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
