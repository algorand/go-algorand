// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get a Merkle proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetProof(ctx echo.Context, round uint64, txid string, params GetProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// get a state proof for a given round
	// (GET /v2/stateproofs/{round})
	StateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"format":  true,
		"exclude": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------
	if paramValue := ctx.QueryParam("exclude"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetProof(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":   true,
		"hashtype": true,
		"format":   true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProofParams
	// ------------- Optional query parameter "hashtype" -------------
	if paramValue := ctx.QueryParam("hashtype"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// StateProof converts echo context to params.
func (w *ServerInterfaceWrapper) StateProof(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":    true,
		"sourcemap": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------
	if paramValue := ctx.QueryParam("sourcemap"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

<<<<<<< HEAD
=======
// StateproofBlockproof converts echo context to params.
func (w *ServerInterfaceWrapper) StateproofBlockproof(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StateproofBlockproof(ctx, round)
	return err
}

// StateProof converts echo context to params.
func (w *ServerInterfaceWrapper) StateProof(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StateProof(ctx, round)
	return err
}

>>>>>>> block-proof
// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET("/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET("/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET("/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.GET("/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET("/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET("/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET("/v2/blocks/:round/transactions/:txid/proof", wrapper.GetProof, m...)
	router.GET("/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET("/v2/stateproofs/:round", wrapper.StateProof, m...)
	router.GET("/v2/status", wrapper.GetStatus, m...)
	router.GET("/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST("/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST("/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST("/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.POST("/v2/transactions", wrapper.RawTransaction, m...)
	router.GET("/v2/transactions/params", wrapper.TransactionParams, m...)
	router.GET("/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET("/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)
<<<<<<< HEAD
=======
	router.GET("/v2/transactions/state-proof/blockproof/:round", wrapper.StateproofBlockproof, m...)
	router.GET("/v2/transactions/state-proof/:round", wrapper.StateProof, m...)
>>>>>>> block-proof

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

<<<<<<< HEAD
	"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",
=======
	"H4sIAAAAAAAC/+y9e3fbOJIo/lXw0+45Sbyi5Lx6Jj6nz/7cST+8k6RzYvfs7LZzuyGyJGFMAhwAtKXO",
	"zXe/BwWABElQkh9xHu2/Eot4FAqFQqGe70epKErBgWs1Ong/KqmkBWiQ+BdNU1FxnbDM/JWBSiUrNRN8",
	"dOC/EaUl44vReMTMryXVy9F4xGkBTRvTfzyS8K+KSchGB1pWMB6pdAkFNQPrdWla1yOtkoVI3BCHdoij",
	"F6MPGz7QLJOgVB/Kn3m+JoyneZUB0ZJyRVPzSZELppdEL5kirjNhnAgORMyJXrYakzmDPFMTv8h/VSDX",
	"wSrd5MNL+tCAmEiRQx/O56KYMQ4eKqiBqjeEaEEymGOjJdXEzGBg9Q21IAqoTJdkLuQWUC0QIbzAq2J0",
	"8OtIAc9A4m6lwM7xv3MJ8AckmsoF6NG7cWxxcw0y0ayILO3IYV+CqnKtCLbFNS7YOXBiek3Iq0ppMgNC",
	"OXn7w3Py+PHjZ2YhBdUaMkdkg6tqZg/XZLuPDkYZ1eA/92mN5gshKc+Suv3bH57j/Mdugbu2okpB/LAc",
	"mi/k6MXQAnzHCAkxrmGB+9CiftMjciian2cwFxJ23BPb+EY3JZz/k+5KSnW6LAXjOrIvBL8S+znKw4Lu",
	"m3hYDUCrfWkwJc2gv+4nz969fzh+uP/h3349TP7X/fn08Ycdl/+8HncLBqIN00pK4Ok6WUigeFqWlPfx",
	"8dbRg1qKKs/Ikp7j5tMCWb3rS0xfyzrPaV4ZOmGpFIf5QihCHRllMKdVromfmFQ8N2zKjOaonTBFSinO",
	"WQbZ2HDfiyVLlySlyg6B7cgFy3NDg5WCbIjW4qvbcJg+hCgxcF0JH7igzxcZzbq2YAJWyA2SNBcKEi22",
	"XE/+xqE8I+GF0txV6nKXFTlZAsHJzQd72SLuuKHpPF8TjfuaEaoIJf5qGhM2J2tRkQvcnJydYX+3GoO1",
	"ghik4ea07lFzeIfQ10NGBHkzIXKgHJHnz10fZXzOFpUERS6WoJfuzpOgSsEVEDH7J6TabPt/Hf/8mghJ",
	"XoFSdAFvaHpGgKciG95jN2nsBv+nEmbDC7UoaXoWv65zVrAIyK/oihVVQXhVzECa/fL3gxZEgq4kHwLI",
	"jriFzgq66k96Iiue4uY207YENUNKTJU5XU/I0ZwUdPXt/tiBowjNc1ICzxhfEL3ig0KamXs7eIkUFc92",
	"kGG02bDg1lQlpGzOICP1KBsgcdNsg4fxy8HTSFYBOH6QQXDqWbaAw2EVoRlzdM0XUtIFBCQzIb84zoVf",
	"tTgDXjM4Mlvjp1LCOROVqjsNwIhTbxavudCQlBLmLEJjxw4dhnvYNo69Fk7ASQXXlHHIDOdFoIUGy4kG",
	"YQom3PyY6V/RM6rgmydDF3jzdcfdn4vurm/c8Z12Gxsl9khG7kXz1R3YuNjU6r/D4y+cW7FFYn/ubSRb",
	"nJirZM5yvGb+afbPo6FSyARaiPAXj2ILTnUl4eCU75m/SEKONeUZlZn5pbA/vapyzY7ZwvyU259eigVL",
	"j9liAJk1rNHXFHYr7D9mvDg71qvoo+GlEGdVGS4obb1KZ2ty9GJok+2YlyXMw/opG74qTlb+pXHZHnpV",
	"b+QAkIO4K6lpeAZrCQZams7xn9Uc6YnO5R/mn7LMYzg1BOwuWlQKOGXBYVnmLKUGe2/dZ/PVnH6wzwPa",
	"tJjiTXrwPoCtlKIEqZkdlJZlkouU5onSVONI/y5hPjoY/du00apMbXc1DSZ/aXodYycjiFrhJqFleYkx",
	"3hiBRm3gEoYz4yfkD5bfoSjEuN09Q0PM8N4czinXk+Yh0mIE9cn91c3U4NvKMBbfnYfVIMKJbTgDZeVa",
	"2/CeIgHqCaKVIFpRzFzkYlb/cP+wLBsM4vfDsrT4QJkQGIpbsGJKqwe4fNocoXCeoxcT8mM4NgrYgudr",
	"cytYGcNcCnN3Xbnrq9YYuTU0I95TBLdTyInZGo8GI7zfBMXhY2EpciPubKUV0/gn1zYkM/P7Tp2/DBIL",
	"cTtMXPh8cpizLxf8JXiy3O9QTp9wnBJnQg67fa9GNmaUOMFciVY27qcddwMeaxReSFpaAN0Xe4kyjk8v",
	"28jCek1uuiOji8IcnOGA1hCqK5+1rechCgmSQgeG73KRnr2RQsxvHJBm6Bg0yBHxaygpTGqYboAHzcw4",
	"fVaAw5Ml0AwkyaimwVl3ZzguQGDHn7AfcimQkVfGz/gfmhPz2RxGw6vtsBNyghxH2fPndP2ZeXRbUd7O",
	"ZBqgMkCQwr6ziXkfXwrK583kPb5l0bIL3/rePu0J9vCLMEtvFHeHMyGvRsMd4uSkUUcSakYNjvC4s7PY",
	"tCoTh5+ISsM26AzUWID6km2Ioe7wMVy1sHCs6UfAgjKj3gQW2gPdNBZEUbIcbuC8Lqla9hdh3piPH5Hj",
	"nw6fPnz026On35hHUinFQtKCzNYaFLnvRHui9DqHB/2VoYxd5To++jdPvBKrPe5WDCHA9di7nKgTMJzB",
	"YoxYla2B7gVT5ootZjeCx6G1Zs0sGXGQZLB1lZddXjPNOlyiXMvqJt4yIKWQEc0Kng4tUpEn5yAVExEl",
	"+RvXgrgWXr4pu79baMkFVcTMjUq/imcgJzHi0iuOoDENhdp2LdqhT1a8wY0bkEpJ1z302/VGVufm3WVf",
	"2sj3OiRFSpCJXnGSwaxatEThuRQFoSTDjsjzX4sMzKVdqRtgdM1gDTBmI0IQ6ExUmlDCRQb45qlUnAUO",
	"WMxQVY8WBh1yVb20V+wMjHyd0mqx1KQqCerPe1vbdExoajclwetQDSgYa82wbWWns9aYXALNjNwNnIiZ",
	"0+I5/SIukqLyX3u7vmPAkZdIC65SihSUMu8lKwVvBc23s7usN+AJAUeA61mIEmRO5RWB1ULTfAug2CYG",
	"bi0xOdVnH+rdpt+0gd3Jw22k0jyZLBUY8cyc7hw0DKFwR5ycg0QV4EfdPz/JVbevKgcM9E7IOGEFvrw4",
	"5UJBKnimooPlVOlk27E1jVqSkFlBcFJiJxUHHnj9v6RKW0Uw4xlKxZbd4DxWLWCmGAZ48EYxI//dXyb9",
	"sVPDJ7mqVH2zqKoshdSQxdbAYbVhrtewqucS82Ds+vrSglQKto08hKVgfIcsuxKLIKprtYmzlPQXh8oF",
	"cw+so6hsAdEgYhMgx75VgN3QSDkAiHlC1T2RcJjqUE5tGR2PlBZlac6fTipe9xtC07Ftfah/adr2iYvq",
	"hq9nAszs2sPkIL+wmLXm6SU14iuOTAp6Zu4mFEatxroPszmMiWI8hWQT5ZtjeWxahUdgyyEdeAc4B5hg",
	"ts7h6NBvlOgGiWDLLgwteOBR8oZKzVJWoiTxN1jfuHKjO0FU4UIy0JQZaTv4gAwceW/dn1gTRHfMqwla",
	"OwmhffB7UmhkOTlTeGG0gT+DNWpe31jb9klgEb8BSTEyqjndlBME1FvMzIUcNoEVTXW+NtecXsKaXIAE",
	"oqpZwbS2zgptQVKLMgkHiL7NN8zotCPWLux3YBd1zTEOFSyvvxXjkRVbNsN30hFcWuhwAlMpRL6DZruH",
	"jCgEO2m+SSnMrjPnG+MdKDwltYB0QgyqxmrmeU+10IwrIP8jKpJSjgJYpaG+EYRENovXr5nBXGD1nE7H",
	"3WAIcijAypX4ZW+vu/C9PbfnTJE5XHiHMtOwi469PXwlvRFKtw7XDbx4zXE7ivB2VFqYi8LJcF2eMtn6",
	"tHcj77KTbzqD+0nxTCnlCNcs/9oMoHMyV7usPaSRJVXL7WvHcXdSagRDx9Zt9/3KKvS+DizuUICPE+cj",
	"YFqRecUtUJVyzxE0m3mFhpiPa6cR6yx+QNCjYEm9Is39+ejpN6Nx4wlQfzd3sv36LiJRsmwV8/fIYBXb",
	"E3fE8DV1zzw91gqiRjZkzGIecfkCeZa7lXVYBynAnGm1ZKUZsnFPWWtoubb+n/v/efDrYfK/NPljP3n2",
	"H9N37598eLDX+/HRh2+//b/tnx5/+PbBf/57TLJWms3imsufzC6JOXEsfsWPuLU9zIW077G1E/PE/Pbh",
	"1hIgg1IvY76kpQSFrNH6hJZ62WwqQEeHUkpxDnxM2AQmXRabLUB5ZVIOdI4+jfimELvYWOvjYOnNE0eA",
	"9XAhO/GxGP2gxRBpEw9zY5u6cbmxGfqSRjHzEMrXNyBQ2YGIbO+xVyAo+1XMQ+dgd3jVWmko+jo42/W3",
	"gRfIWy+/9w664DnjkBSCwzoaD8M4vMKPsd72Ch7ojMLQUN/u+6YFfwes9jy7ENh18Yu7Hdw5b2rb/Q1s",
	"fnfcjvo1dItG9RHkJaEkzRkqlwRXWlapPuUUn68tGu2RhX+UDys0nvsmcQ1KRMHhhjrlVBkc1o/aqFp+",
	"DpFr9AcAr9dQ1WIBSncE+TnAKXetGCcVZxrnKsx+JXbDSpBoIprYlgVdkznNUf/yB0hBZpVui7Z4ESvN",
	"8tzpgs00RMxPOdWGLypNXjF+ssLhvJOkpxkO+kLIsxoL8WtzARwUU0n8LvrRfsUryS1/6a4nDKWxnz0P",
	"vO27yMMe8y10kB+9cM++oxco2zda4B7st6YaLBhPokRmZLWCcXRR79AWuW9eKJ6AHjT6ZLfrp1yvuCGk",
	"c5qzzMhzVyGHLovrnUV7OjpU09qIjqbHr/VdzAthIZKSpmdohB4tmF5Ws0kqiql/7k4Xon76TjMKheD4",
	"LZvSkk1VCen0/OEW2fsa/IpE2NWH8chxHXXjl7wbOLag7py1jtX/rQW59+P3J2Tqdkrds47GdujAQzSi",
	"oXBOUC0jmlm8DZSzntan/JS/gDnjzHw/OOUZ1XQ6o4qlalopkN/RnPIUJgtBDrxf1Quq6SnvsfjBWNbA",
	"o42U1SxnKTkLr+LmaNr4pP4Ip6e/GgI5PX3Xs8j0L043VfSM2gmSC6aXotKJC8BIJFxQmUVAV7UDPo5s",
	"w6c2zTombmxLkS7Aw40fZ9W0LFXXH7e//LLMzfIDMlTO29RsGVFaSM8EDWe00OD+vhbuGSjphY/eqRQo",
	"8ntBy18Z1+9Iclrt7z8G0nJQ/d3xGkOT6xJauqwr+Qt39Vi4cCtQwUpLmpR0ASq6fA20xN3Hi7pArWme",
	"E+zWcoz1Lhs4VLMAj4/hDbBwXNrJDxd3bHv5SNr4EvATbiG2MdypMUZcdb8CV9krb1fH3ba3S5VeJuZs",
	"R1elDIn7nakD7BaGJ3sLkWILbg6Bi0WcAUmXkJ5BhmFRUJR6PW5190ZId8N51sGUDR+0fnMY44JqvxmQ",
	"qsyokwEoX3eDDRRo7SMs3sIZrE9EEyJzmeiCts+7GjqoSKnBZWSINTy2bozu5juDNvr5lqV3HUeXRE8W",
	"BzVd+D7DB9nekDdwiGNE0fLJHkIElRFEWOIfQMEVFmrGuxbpx5ZnxJuZvfkiqifP+4lr0khtzigdrgZd",
	"ze33AjAWWVwoMqMKMiJcGK316w64WKXoAgb0YaHmdUfv6Za2FgfZdu9Fbzox715ovfsmCrJtnJg1RykF",
	"zBdDKqi67Lgi+Jmsch9XMCGYHcMhbJajmFR7QVimQ2VLA27D/YdAixMwSN4IHB6MNkZCyWZJlY/wxUBo",
	"f5Z3kgE+YpzCprC0o8CKHkQ710Fnnud2z2lPl+yC03xEmg9DCxXJO4SUjUfOsSu2HYKjAJRBDgu7cNvY",
	"E0oTM9FskIHj5/k8ZxxIEjPIU6VEymyIdnPNuDnAyMd7hFjdE9l5hBgZB2Cj0QoHJq9FeDb54jJAchfz",
	"Qf3YaO4K/oa4d6J1uTIijygNC2d8wFnOcwDqvDjq+6vjS4TDEMbHxLC5c5obNucUu80gvSApFFs7IVHO",
	"bPpgSJzdoPqzF8ul1mSvoqusJpSZPNBxgW4DxJtFidgWKMSXe/rWuBq6S3eZeuD6HsLV/SC86koAdDQR",
	"TQYi9/Lb+kJr3839m6xh6eMmXth7i8Zof4h+ors0gL++IrgOiHrTva6jj/S2ObUdCxbITzFWbM5IXzXa",
	"V8AqyAEl4qQlQSRnMYW5EewB2e2x7xa83DHijPL1g8BGL2HBlIZGdWVuJa+LvW0THMUIdyHmw6vTpZyb",
	"9b0VoubRNpLSmhTDZd76Cs6FhmTOpNIJ6v2iSzCNflD4ovzBNI0LCm0vAJvshWVx3oDTnsE6yVhexenV",
	"zfu3F2ba17USRlWzM1ijOAg0XZIZJieK+gZtmNq6j21c8Eu74Jf0xta722kwTc3E0pBLe44v5Fx0OO8m",
	"dhAhwBhx9HdtEKUbGCRe/C8g17EAqEBosIczMw0nm1SPvcOU+bG3GmItFMN3lB0pupbgtbxxFQw9Isxz",
	"j+kgt08/lGHgDNCyZNmqowi0ow4+F+mlXvs+drqDBdxdN9gWDARKv5i3rATVDpNvpFubpYmHa5vshJmT",
	"djB7yBDCqZjyOQb7iDKkjYmwtuHqBGj+N1j/3bTF5Yw+jEfX0xvGcO1G3ILrN/X2RvGMBjGrR2qZAS6J",
	"clqWUpzTPHHa1SHSlOLckSY298rYW2Z1cR3eyfeHL9848D+MR2kOVCa1qDC4KmxXfjGrshH5AwfE5zAz",
	"Dx4vs1tRMtj8Oio51MheLMHliwqk0V5+i0bbHhxFp6Gdx+3yW/WtzjBgl7jBQABlbR9odFfWPNA2CdBz",
	"ynKvNPLQDtjQcXG7JUmJcoVwgGubFgILUXKj7KZ3uuOno6GuLTwpnGtDRqvCJm1TRPCum5gRIVEXhaRa",
	"UMxOYVUCfebEqyIxxy9ROUvjCkY+U4Y4uDUcmcYEGw8Io2bEig3YIXnFgrFMM7XDQ7cDZDBHFJk+08kQ",
	"7mbCZdutOPtXBYRlwLX5JPFUdg4qpgNxqub+dWpkh/5cbmCrnm6Gv46MEWZm6d54CMRmASM0U/XAfVE/",
	"mf1Ca3WM+SHQx1/C2h3O2LsSN1iqHX04arYuQ8u2uSlMjtvnf4YwbCK17Zl5/ePVpYgZmCOaaZepZC7F",
	"HxB/5+HzOOJK73PRMPTk/AP4JBKR1GUxtXanSRjczD643UPSTaiFalvoB6gedz6wSWGODa+epdxutU18",
	"2fILiRNM6Ms1teM3BONg7vm/5fRiRmMJSIyQYWA6bKyfLUWyFsR39rh3Om/m0gNNSGBIrdsyG2RWgmyi",
	"XPoBzVcUGOy0O4sKjWSAVBvKBGNr/MqViAxT8QvKbf5U088eJddbgVV+mV4XQmKIqIrrvDNIWUHzuOSQ",
	"IfbbIbUZWzCbPbRSEKSndAPZtMuWilyKT2tfblBzNCf74yABrtuNjJ0zxWY5YIuHtsWMKuTktSKq7mKW",
	"B1wvFTZ/tEPzZcUzCZleKotYJUgt1OHzprbczEBfAHCyj+0ePiP30Wal2Dk8MFh09/Po4OEzVLraP/Zj",
	"F4BLE7yJm2TITv7bsZM4HaPRzo5hGLcbdRINeLS53YcZ14bTZLvucpawpeN1289SQTldQNxNotgCk+2L",
	"u4mKtA5eeGYTEystxZowHZ8fNDX8acDn07A/CwZJRVEwXTjLhhKFoacm96Sd1A9nsxy7ZEQeLv8RDYSl",
	"t490HpG3qzS191ts1WjGfU0LaKN1TKiNC85ZY7r3Oc3Ikc8ugNmZ6qRMFjdmLrN0FHPQkj8npWRc48Oi",
	"0vPkryRdUklTw/4mQ+Ams2+eRDJStZPQ8MsBfut4l6BAnsdRLwfI3ssQri+5zwVPCsNRsgeNj3VwKgct",
	"mXFvMc/Ru86Cm4feVSgzoySD5Fa1yI0GnPpahMc3DHhNUqzXcyl6vPTKbp0yKxknD1qZHfrl7UsnZRRC",
	"xnLNNMfdSRwStGRwjo5r8U0yY15zL2S+0y5cB/pPa3nwImcglvmzHHsIBHkDB3L31RFz/b4Vy7O/N/Em",
	"nYSAkvJ0GbUZzEzH35ok0jW6LA+IpkVZUs4hjw5n79vf/L0ckRz+KXadp2B8x7bdRH92uZ3FNYC3wfRA",
	"+QnN1jCdmwlCrLYd8GuPzXwhMoLzNDk4GgqN7pVPSvWvCpSOBSHiB+s1groh86awCakI8Awl8gn50RaB",
	"WQJppQhASZgVVW7DzSFbgHRKy6rMBc3GxIxz8v3hS2JntX1sRlSbEGuBgmB7FR2dQJCwZzf/Q5/cNO4b",
	"vfs4m501zaqVxowdStOijIW9mBYnvgHG1oR6UhQRQ+xMyAsrnSsv+9lJDD3MmSyMVFuPZu8HpAnzH61p",
	"ukSxt8WJhkl+90xunipVkDe/ToNb59zBc2fgdsncbC63MRHmbXLBlK39AefQjrSpw87cs8tH3rSXJyvO",
	"LaVE+fumsMiroN0DZ43hXpUahayD+EsKPUpUMoXLJrY7xl7RJBbdLHm9hPk2SrrOluprOqWUC85STCER",
	"VBupQXZ1RHaxM+yQbaOryPJH3J3QyOGK5uarXZEcFgez9XlG6BDXV3QGX82mWuqwf2osWLGkmixAK8fZ",
	"IBv7FJNO18K4ApdDCUvKBHxSyJbtBjlk1ByY1GrjS5IR+t0PCM8/mG+v3dMKHVLPGEchyqHN+b5abQiW",
	"OdBG8mKaLAQot552qgH1q+kzwXD7DFbvJr4sAo5hTR9m2dbO1x/q0Fv9nJXNtH1u2hLrsVj/3HJxtJMe",
	"lqWbNOqmVO9wLIPkIIIj1pvEq88D5Nbjh6NtILeN5nq8Tw2hwTka+6DEe7hHGHUyzk7i4HOaV5aisAWx",
	"bjLR2EzGI2C8ZByaoh2RCyKNXgm4MXheB/qpVFJtRcCdeNoJ0BwtfDGGprRT7153qM4GI0pwjX6O4W1s",
	"8ogOMI66QSO4Ub6ua4UY6g6EiedYpMghsp8VFKUqJ0Rl6LLcyRMaYxyGcfskwu0LoH8M+jKR7a4ltSfn",
	"MjfRUBRaKmLy5vcrSCtrwBbKezCTFMO6g/siqg1tMt5GtiHMuutRi+7lszX+G0sZNYwSZ2G+tI+TNydj",
	"x0sLrO2ReuKmIaZEsUWyOyaQmV8fHc3UV6Owpv+NklguFm1Abjm3yyb2Eu5RjLF8bzh2GBPdy4NmeXod",
	"soweRcLnvcf3Wh1s12YHeIf0EqOhJrtOYb5ZlzCcjHyMt86AX2GQ0Ybai82aRoa8C9NBZ1iqXUyKpqRJ",
	"fdHnCTaDeGwE65pgM5fbQoxRtdCQO4L1RjCfe713E8l6Ai6OvRGh3s+lD9DfvBMdKSlzdr+GWfQx69xt",
	"+w7QuzjiNRvcXYRzYsVBYivp5TvcTCE9J+bAEd+mpZvsHgx/WBtV0dSDScUXwF1W8bZ74s5OUvM5pJqd",
	"b3Ea/28jLDcOyWMvTttqE4EPOaudbny9zktK+Q1Am3y6N8ITZNy4NjhDLqNnsL6nSIsaonnyxp5QrxJr",
	"iRjAbCSJIRGhYkYL+/53emSmaspALHgjoe0OTXKqwQTFQQjEFefyJEloGBaxYcpzEXtA7DSX6XqpYCH0",
	"HxnyK++nCB2+vV5gRlZVJ5evC3IGPiDmndjNX3fhYj3Rxb9WefmoT1D+Nx/PY2exhV6bFMqoYLygMvMt",
	"ohKzF8aTAU+tru+zdTFncaDn9cyscenou/9GciSg406aC8X4Ihnyfmp7UYS1otBWhLoJzL2KcM1ButTp",
	"2tfRTbTwLiCb4NiEClfX6CpIUINZCC1wg9HCb5twaEwMRW0VZWcHCxdIJBTUQCeDoOXhOTch+7n97v1d",
	"fWKgThquyLieXpOtUcfemYepHhJDqp8Td1tu96O9ylOFcW4rU6hYBDM3qAyVWKUUWZXaCzo8GOCfdDvn",
	"B9jASqJSftpfZU9gyzFbxssgKuEM1lMrNKVLypu0Je1jbZMr2jUEUYCd3b7RV1xcYM0XdgGLG4HzU76E",
	"xqNSiDwZ0Fod9QOxu2fgjKVnkBFzd3gz+ECSYnIflSW1WeJiufaBx2UJHLIHE0LMW6oo9dpbKNopyDqT",
	"83t60/wrnDWrbG4E90ibnPK4B4etS35N/uaH2czVFBjmd82p7CBbIp1XA0Hgkl5EUnbvWlAtYjPoplFu",
	"iMpCEZNSrhj2ttP57j/UIqQfpB6NqH3jiUe70smmMQymvbNCMF5QB+/2HUIaOF4NFUkbANspGj6x60SA",
	"79hiYnQWxqVseeaetR7vNpdSxxwkJNzwIz7Qg1/yEd+PuNl1ebgOvLwqBf117nzOWriNHLFmbbtqoPrI",
	"HVYc6dkuiqN43hfTHTVXFiGYNIkgqOT3h78TCXNMoijI3h5OsLc3dk1/f9T+bB7Ze3tRBnxrOqtWeT43",
	"b4xi/j7kPmBN5AOeKp39qFieba11GvodNQlN0bPmN+fd9UlSqv5mNSH9o+qyS15GW97dBERMZK2tyYOp",
	"Ao+iHZyJXLeI6xDKFGklmV5j0Jl/OLPfosH8P9a6NlfztQ5TcF7yWpxBHbbYaOaaIv0/Clu1sTAiHdoq",
	"NJah+H5FizIHd1C+vTf7Czz+65Ns//HDv8z+uv90P4UnT5/t79NnT+jDZ48fwqO/Pn2yDw/n3zybPcoe",
	"PXk0e/LoyTdPn6WPnzycPfnm2V/u+Qr5FtCm+vw/MO9wcvjmKDkxwDY4oSWrq88YMvY5TGmKJ9E8PfPR",
	"gf/p//cnbJKKohne/zpyHpSjpdalOphOLy4uJmGX6QKf4okWVbqc+nn6VT/eHNUeWjYqB3fUOt8YUsBN",
	"daRwiN/efn98Qg7fHE0aghkdjPYn+5OHmCq8BE5LNjoYPcaf8PQscd+njthGB+8/jEfTJdAcc9qbPwrQ",
	"kqX+k7qgiwXIiUvman46fzT1Dh7T904N8cGMuoiF41lfs7DOdi/HqVNpotnQ+pK1coYpl8JqXGeSc68E",
	"nqELkH3ZG9ZWI+soa7LGHAXFm13snE0mcPBrJLf2nC0q2amXVRttXJpJpsh/Hf/8mghJnFDxhqZnoZsN",
	"EuS/KpDrhmAcKwuj4H3WL+eMU6hF2bZcNxJOrLJOLFkszmz2OaDUWiPYcCItKwghafiq4ZX7ybN375/+",
	"9cNoB0BQPe1KL/9O8/x3W9AMVqjja1dmV+NIhiuU3ceNhqlTfH2Mpvf6a5jEtG7Tdvj6nQsOvw9tgwMs",
	"ug80z01DwSG2B+/Qix8pAQ/Ro/39j1DAfdwaxZPEJ60E/+QGF9o2lF57ud3heov+jmaYWBKUtkt5+MUu",
	"5YijhchwfGJvtA/j0dMveG+OuOE5NCfYMgiR698iv/AzLi64b2mkmaooqFyjrBJkvw2l0g+Dt9U0zNQ3",
	"fd+yH2TXust6SUqPXmy53u6pIabYzx3RSQRovtep7lDD7LIdwooprR5MyI9hb2TMGIphAx0qyZsSX6UU",
	"58y8531sqY9YbWC7p8IolehlGyhl7u7dj3rvHra1Dq3kAzFgWiS+EaaegfG6F1/fva2Tx/1KedKDlINX",
	"SNz0UZPJdovBD1Xd3IHB3uFuqGLpgHgTwFtLOu1UkR+f79r3W3BNtO6Dj8iVv3Bh7RXNDZ0Ey+242tuM",
	"HHdC3J9GiKt9Tmw5FkxCtUmsw0yz0/c+gcoNiHIugcwOQlz40g36Bgk+7nc4xYOJzYYStrkaO3D+I1vF",
	"M0xrcyeYfWzBrJ8PKgZGk+Xn0wljCMOySRh1mRoorfzOl0ps9YVKX39iZA2KWwbS7YLWFXhjT4hynPij",
	"8cyvUnhySLsTm/7UYpN12dwgOLWStTn/3mHZCYJy8UG5m5Z/4Wzt6XBMlJDOy62UTEim12PCOMnAnD20",
	"GAqJseVN4XnnSwYc//vq8B/oYfzq8B/kW7I/rkUwDL2LTG99uNoy0I+g+66K6rv1YS0ObJSFPhsB46RG",
	"UuBEHKJeC59vDZFW0NW3QyhbWbtiTDwr6Gq0URIZfznS4nWFpk7QbJ+KXJ1VNPr72kBtzzlFYEVTna8J",
	"xftnbV28sSS+T5bWKeIvyiQcIBpWtmFGX3okFhx4Wee9SGYCLPGxGb6TTmKpFjpcUkKs87NdMOkhIwrB",
	"1aS8u939Yne3L5aSUpgzzTDzRXOf+LuqBWRTgMKBO+CXPCH/Iyp0drH11SCW8RVnQB9uP6cTQIOUzTlW",
	"t6uxs7fXXfjenttzpsgcLpCDUo4Nu+jY2/sKRNZVnWiTEi54wrH81zmQwEPuTm79rOXWp/uPv9jVHIM8",
	"ZymQEyhKIalk+Zr8wuvsQtcTy2ueU/Eg39NG/tMLiGik6EB8v5btumubZrqRDFvxcYEKoa7S6N7K46bM",
	"g3nLY1YYn5dAjb3pBB3/rFXF7se4Z1iZxIT0wILz3froxS5y+RdiCN05O1nkXovvzce+AaL+NG9vx59m",
	"N2b6ZP/J7UEQ7sJrockPqC77yCz9o+oO4mQVMJtLW1Qai0nIWly86UamYk7o2GWjxfSoa1LHgxl+Yhmh",
	"rUfR5xpmhl35xWesn9+hEnOELrvoveMLd3zhWnyhS1ANR8CsCmr6Hk0FITvoHUlMPPsVmRgDe4sUhTe4",
	"CDIHnS5ttoluWEyErfgkh8M8ZVMZgRu2/yHQQymDXegHprffMe4TO/5kIzE+jEcpyAjx/ezTHgVhjnUC",
	"S18tA805zCeQrnNHuwz7THmfcxdzSMwuXgrK583k/TAdRMtN2AzvEHw5BPeY2vcuzNQeL7eIr8Er3edq",
	"TshrFIfwgPv8jV+j2uNj3sgfe0GvBQdrlzYSq6XFOxNkLS5gwR1Eik92YQ2ProZvXHRoGx3f6xXLPkzr",
	"bExDQoUP7N4oVDQ3NWvKnLbVK7QsgUp15Ut6uznspDPj0YvQT6OVPKpOGxUBxeDlkpbE/xjtKM1gwI+Y",
	"kyVVSzKvuAW0LqiFLiveiULMx7Wy1pwGMT8gp3yPqCV9+vDRb4+efuP/fPT0mwF5zMzj4o/7ElkzkPls",
	"h9lFLPt6zY5tUaJG3sFtb+Xldmg8YtkqmikGVj7hVXgunO4TmcM9RUq6HkwwNZCr7RXIs9zXpG8beUgB",
	"5kJVS1Z+ihr7bBYvM/WT2SUxJ3UC9yP+Xc0/z0GyOdZKq/nCLScAkgAZlHq5MSWDLfVW6mWzqeCKkTLl",
	"MhyVUpwDHxM2gUnXGJYtmlzIOdB5nSFHiF1c1QJeYujNE0eA9XAhu4iab2L0g+GQLpPgbStVGpcue5l5",
	"5MnOvfJJNS76k2hcXgueoDwGXPu3QQstn077gkmNxoGCsy6JwYVGxaaQKEaGbEtNdhLAYNDY1OKB1nVy",
	"kIydOJZSnS6rcvoe/4OZBz40Mf62/svUKmI3SWTHtsWNutjYMYlscxuf7MIph8WcvGKpFIeY/MpdI2qt",
	"NBT9yqK262+bKotErxzBc8YhKQSP5cn4Gb++wo/R9Fpoth/ojA4UQ3279aBa8HfAas+zC6u7Ln4nn4eS",
	"91oPls5qJZS1myL6cyD9N6elld+4OSatn6fvW386e4lrqZaVzsRF0Nfmtdh4tmyLGz1br0UGdtx2KpmY",
	"/ygXGbj0G/0jVXONuETq8du06wgHKa0WS20rY0bL7tYdE5rao2BTBKttOVVtK5878BwIzSXQbE1mAJyI",
	"mVl0Ozc1oaoudYzEYXljPDVoA1cpRQpKQZaEZa02gVYnNUHJR2/AEwKOANezECXInMorAmuZxGZAu7Ug",
	"a3BrTaHjA32od5t+0wZ2Jw+3kUogniHii0YUZQ7uTRNB4Y44QVmbfeT985NcdfuqEisnRZLb2q8nrMC8",
	"HZxyoSAVPFPDKai3HVtMOh2sRYEtNOxPSrQgjRl44Gp9SZV2hbtamTqD1OVmig05s4cSkpmR/16nI+uN",
	"nRp+yVWlmppmVvaCLFpqFlYb5noNq3ouMQ/GroU7WwZ728hDWArGr6ucBUmwdaDFMsNFFodBMNSJYn1U",
	"toBoELEJkGPfKsBuqGEZAISpBtF1Zts25QQlqpUWZWnOn04qXvcbQtOxbX2of2na9onLBQ8gX88EqFDw",
	"dpBfWMzaAoZLqoiDgxT0zMnsC+fD34fZHMZEMZ66zP1D8VmsgGPTKjwCWw5pV+wLj3/rnHUOR4d+o0Q3",
	"SARbdmFowTFB87MQCy/77uvq7T6iqrwtaAfiVSNo2r+nF5TpZC6kq4qA5fUjVvdONi7KtHLPP/sq1sKp",
	"ul2BfstQ3DhB+U4VOkBbEHwQjtn9vs+NmeoHIXcy8jf6eC2IWRipuGY+ktqct1rG/Pws5nfS8530fCc9",
	"30nPd9LznfR8Jz3fSc8fW3r+NF67JEk8n/am4VhAFhl9kRL+FxTzdJtBSo3QX4v8+EgwIro5xxu9eTTQ",
	"fOqKZqO3QrRErA0LCAtwp2Y6xkmZUyMNwUr74HQyowq+eVKXlvClTm36fsNrTIPHj8jxT4feUWHpLOnt",
	"tvd9AUGl1zk8cF6PdX5t7/4InGJhVfR+pP71kzqHEivMz1kORBlcfY+tX8A55EaSt8ZPYt4i/dfRCdD8",
	"ucONZUqg9HciW3foxix/iphoU0xj8GecykgV6D6d9HCsBVaCd2XNew+oDzfundLf/f5+bduqeOmdeLXm",
	"TeSytUyIcxFwY+9iNDN76tFJXAXpT8qxCULkyKzhTp9N8EW3jKA7ONjWCBXu+H2pgRIe8dGDh8d27Mus",
	"EaYVcRS3SkyjBfDEsYVkJrK1q/bvC9K3mGxTfXgro0VPqg3Homa1dbX6Qa78aZhmUPB6I+MMyWOVOC45",
	"wEKtz9RuDLTGFo7oeGiwAR+bjw7xuhAE4jhR7DnZTeh1SfYWFLq+Y3F3LC44jZ1rm3HnrtdlIpOrsTis",
	"DT/M3b63pRIVCQ/pffXAsCzE6Eq3lNkZzKrFwtYH7CpmMbFUXeby03A5u9xdGdzliMMOXkdjXjeQoDtc",
	"n3EEfmb3hSQLKarygU3zx9eo8ytKytdez28ew0WVu7K/GPx0szy0rlXZkyS9vmlYVfXGa6QChYxzm27/",
	"btGCFS7t/kJGKp6BjFcYW3XqRm3H+MmKNxx4Y1UpX0axtzo37y7c3++yc5qvbRulLSprD1TrMDnXXXty",
	"J3cRx3+OG+GNTac5wGD7jqcNQ9h+MciAZeHN0Mk/5a+GNj99Sy/CbFY3JTTu/u42IvdaNxUxI8m6jBgp",
	"Bc1SqjCokoO+EPLsI8uSenUUUawimJh0sR+LYZ4ok61CJY67k0jZDn9yE2JWNGUL1X1a4bJxsD90Mawt",
	"bNzpOr8WXed3/vApQrG0cedwWrMGnskd2BS90Cse5VLT0iZtHnLpDQ6ES+98o84JveHbPgpBymRrY4W8",
	"JJSkOUMLrOBKyyrVp5yijWdjVePacjUsSj33TeJmxogV0A11yo1QNSe15ScqUs0hYtP9AcBLbKpaLEDp",
	"DieeA5xy14pxUnGmcS4so51YV3dzXRuOPrEtC7omc5qjkfIPkILMzCMiTOSFFhOlWZ47hwkzDRHzU041",
	"ycEw/VfMCHRmOK9Ur52ALN3VWIiHvrmKjUlcz/qj/YphZW75XjGO+nv72QeAjD9NXdWEZYOQH71wSTaP",
	"XmDetMZVogf7rdnPC8aTKJGZG9+5HHVpi9w3Mp4noAeN04Xb9VNuhGktCDJ6qq9GDl07Z+8s2tPRoZrW",
	"RnTMoX6t72IJHhYiMU9GLAU+WjC9rGZY2dQnfpguRJ0EYppRKATHb9mUlmyqSkin5w+3yAfX4Fckwq7u",
	"bu6vx0oZ0oE5LfXGYzGB7t4P3Ms3kNP8805kvtUH8y5t+F3a8LvE0ndpw+929y5t+F1S7buk2n/WpNqT",
	"jRKiS0S1Nc2t7qk2KZGQ2plrBh42ayXE7VslmZ4QcrI0/J+aOwDOQdKcpFRZwYhbV+CCLZaaqCpNAbKD",
	"U560IElF4Sa+3/zXPnNPq/39x0D2H3T7WL1FwHn7fVFUxU9oaiLfktPR6ag3koRCnINLj4nNswq9YWyv",
	"rcP+f/W4P8ve1hV0bZUrS1qWYK41Vc3nLGUW5bkwj4GF6Dgwc4FfQBrgbCogwrTNRI74RMdv5xNDXYKN",
	"mNDdv98vUUfxsJuw5VYzfX29AvYmPtXfsJvjgRvH7jHEO5ZxGyzjkzONrygp6V3+0c9sQaEhtZVg/BqS",
	"VF1ZM6J3GpCRrPcO5piyyTztf7flAseq6dj0u7pT/8q8tcjf2E7U7aYIIqaCazbkT5fQ3ta5t8nEQn5q",
	"Xq3zzyS5/Vej3kZjZYBwn3HbOtMEsTfbD+VOJ/HNZ33+GhDvzt/d+fsU569l0h04g9bOaqgax4O0kkyv",
	"8RzRkv12Bub/78wJUCDP/RGrZD46GC21Lg+mU6yNtRRKT0fmzdZ8U52P5uFEF3YEdzBLyc4xr/67D/8v",
	"AAD////LH07kIQEA",
>>>>>>> block-proof
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
