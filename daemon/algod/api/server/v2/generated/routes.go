// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string) error
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{addr}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, addr string, params GetPendingTransactionsByAddressParams) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error

	// (GET /v2/register-participation-keys/{account-id})
	GetV2RegisterParticipationKeysAccountId(ctx echo.Context, accountId string, params GetV2RegisterParticipationKeysAccountIdParams) error

	// (GET /v2/shutdown)
	GetV2Shutdown(ctx echo.Context, params GetV2ShutdownParams) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round}/)
	WaitForBlock(ctx echo.Context, round uint64) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address)
	return err
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "addr" -------------
	var addr string

	err = runtime.BindStyledParameter("simple", false, "addr", ctx.Param("addr"), &addr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter addr: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, addr, params)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "raw" -------------
	if paramValue := ctx.QueryParam("raw"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "raw", ctx.QueryParams(), &params.Raw)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter raw: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetV2RegisterParticipationKeysAccountId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2RegisterParticipationKeysAccountId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2RegisterParticipationKeysAccountIdParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV2RegisterParticipationKeysAccountId(ctx, accountId, params)
	return err
}

// GetV2Shutdown converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2Shutdown(ctx echo.Context) error {
	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2ShutdownParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV2Shutdown(ctx, params)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts/:address", wrapper.AccountInformation)
	router.GET("/v2/accounts/:addr/transactions/pending", wrapper.GetPendingTransactionsByAddress)
	router.GET("/v2/blocks/:round", wrapper.GetBlock)
	router.GET("/v2/ledger/supply", wrapper.GetSupply)
	router.GET("/v2/register-participation-keys/:account-id", wrapper.GetV2RegisterParticipationKeysAccountId)
	router.GET("/v2/shutdown", wrapper.GetV2Shutdown)
	router.GET("/v2/status", wrapper.GetStatus)
	router.GET("/v2/status/wait-for-block-after/:round/", wrapper.WaitForBlock)
	router.POST("/v2/transactions", wrapper.RawTransaction)
	router.GET("/v2/transactions/params", wrapper.TransactionParams)
	router.GET("/v2/transactions/pending", wrapper.GetPendingTransactions)
	router.GET("/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
