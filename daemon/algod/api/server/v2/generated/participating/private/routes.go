// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address basics.Address, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
