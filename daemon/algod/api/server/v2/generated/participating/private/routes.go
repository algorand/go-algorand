// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
