// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PcNrLoX0HNOVV+3KEkP5Jdqyp1rmwnWd04jstSsves7ZtgyJ4ZrEiAC4DziK/+",
	"+yk0ABIkwRmOpNibKn+yNcSj0Wg0+o2Pk1QUpeDAtZqcfpyUVNICNEj8i6apqLhOWGb+ykClkpWaCT45",
	"9d+I0pLxxWQ6YebXkurlZDrhtICmjek/nUj4V8UkZJNTLSuYTlS6hIKagfW2NK3rkTbJQiRuiDM7xPnL",
	"yfWODzTLJCjVh/Innm8J42leZUC0pFzR1HxSZM30kuglU8R1JowTwYGIOdHLVmMyZ5Bn6sgv8l8VyG2w",
	"Sjf58JKuGxATKXLow/lCFDPGwUMFNVD1hhAtSAZzbLSkmpgZDKy+oRZEAZXpksyF3AOqBSKEF3hVTE7f",
	"TRTwDCTuVgpshf+dS4DfIdFULkBPPkxji5trkIlmRWRp5w77ElSVa0WwLa5xwVbAiel1RH6slCYzIJST",
	"t9+9IE+ePHlmFlJQrSFzRDa4qmb2cE22++R0klEN/nOf1mi+EJLyLKnbv/3uBc5/4RY4thVVCuKH5cx8",
	"IecvhxbgO0ZIiHENC9yHFvWbHpFD0fw8g7mQMHJPbOM73ZRw/s+6KynV6bIUjOvIvhD8SuznKA8Luu/i",
	"YTUArfalwZQ0g747SZ59+Pho+ujk+j/enSX/cH9+9eR65PJf1OPuwUC0YVpJCTzdJgsJFE/LkvI+Pt46",
	"elBLUeUZWdIVbj4tkNW7vsT0taxzRfPK0AlLpTjLF0IR6sgogzmtck38xKTiuWFTZjRH7YQpUkqxYhlk",
	"U8N910uWLklKlR0C25E1y3NDg5WCbIjW4qvbcZiuQ5QYuG6ED1zQvy8ymnXtwQRskBskaS4UJFrsuZ78",
	"jUN5RsILpbmr1GGXFblcAsHJzQd72SLuuKHpPN8SjfuaEaoIJf5qmhI2J1tRkTVuTs6usL9bjcFaQQzS",
	"cHNa96g5vEPo6yEjgryZEDlQjsjz566PMj5ni0qCIusl6KW78ySoUnAFRMz+Cak22/5/Ln56TYQkP4JS",
	"dAFvaHpFgKcig+yInM8JFzogDUdLiEPTc2gdDq7YJf9PJQxNFGpR0vQqfqPnrGCRVf1IN6yoCsKrYgbS",
	"bKm/QrQgEnQl+RBAdsQ9pFjQTX/SS1nxFPe/mbYlyxlqY6rM6RYRVtDNNydTB44iNM9JCTxjfEH0hg/K",
	"cWbu/eAlUlQ8GyHmaLOnwcWqSkjZnEFG6lF2QOKm2QcP44fB0whfATh+kEFw6ln2gMNhE6EZc7rNF1LS",
	"BQQkc0R+dswNv2pxBbwmdDLb4qdSwoqJStWdBmDEqXdL4FxoSEoJcxahsQuHDsNgbBvHgQsnA6WCa8o4",
	"ZIY5I9BCg2VWgzAFE+7Wd/q3+Iwq+Prp0B3ffB25+3PR3fWdOz5qt7FRYo9k5Oo0X92BjUtWrf4j9MNw",
	"bsUWif25t5FscWlumznL8Sb6p9k/j4ZKIRNoIcLfTYotONWVhNP3/KH5iyTkQlOeUZmZXwr7049VrtkF",
	"W5ifcvvTK7Fg6QVbDCCzhjWqcGG3wv5jxouzY72J6hWvhLiqynBBaUtxnW3J+cuhTbZjHkqYZ7W2Gyoe",
	"lxuvjBzaQ2/qjRwAchB3JTUNr2ArwUBL0zn+s5kjPdG5/N38U5a56a3LeQy1ho7dlYzmA2dWOCvLnKXU",
	"IPGt+2y+GiYAVpGgTYtjvFBPPwYgllKUIDWzg9KyTHKR0jxRmmoc6T8lzCenk/84buwvx7a7Og4mf2V6",
	"XWAnI7JaMSihZXnAGG+M6KN2MAvDoPETsgnL9lBoYtxuoiElZlhwDivK9VGjsrT4QX2A37mZGnxbacfi",
	"u6OCDSKc2IYzUFYCtg3vKRKgniBaCaIVBdJFLmb1D/fPyrLBIH4/K0uLD5QegaFgBhumtHqAy6fNSQrn",
	"OX95RL4Px0ZRXPB8ay4HK2qYu2Hubi13i9W2JbeGZsR7iuB2CnlktsajwYj5d0FxqFYsRW6knr20Yhr/",
	"zbUNycz8Pqrzn4PEQtwOExcqWg5zVsfBXwLl5n6HcvqE48w9R+Ss2/dmZGNGiRPMjWhl537acXfgsUbh",
	"WtLSAui+2LuUcVTSbCML6y256UhGF4U5OMMBrSFUNz5re89DFBIkhQ4Mz3ORXv2NquUdnPmZH6t//HAa",
	"sgSagSRLqpZHk5iUER6vZrQxR8w0RAWfzIKpjuol3tXy9iwto5oGS3PwxsUSi3rsh0wPZER3+Qn/Q3Ni",
	"PpuzbVi/HfaIXCIDU/Y4OydDZrR9qyDYmUwDtEIIUlgFnxit+yAoXzSTx/dp1B59a20KbofcInCHxObO",
	"j8FzsYnB8FxsekdAbEDdBX2YcVCM1FCoEfC9dJAJ3H+HPiol3faRjGOPQbJZoBFdFZ4GHt74ZpbGOHs2",
	"E/Jm3KfDVjhpTM6EmlED5jvtIAmbVmXiSDFitrINOgM1Xr7dTKM7fAxjLSxcaPoHYEGZUe8CC+2B7hoL",
	"oihZDndA+sso059RBU8ek4u/nX316PGvj7/62pBkKcVC0oLMthoUue90M6L0NocH/ZWhdlTlOj7610+9",
	"obI9bmwcJSqZQkHL/lDWAGpFINuMmHZ9rLXRjKuuARxzOC/BcHKLdmJt+wa0l0wZCauY3clmDCEsa2bJ",
	"iIMkg73EdOjymmm24RLlVlZ3ocqClEJG7Gt4xLRIRZ6sQComIt6UN64FcS28eFt2f7fQkjVVxMyNpt+K",
	"o0ARoSy94eP5vh36csMb3Ozk/Ha9kdW5ecfsSxv53pKoSAky0RtOMphVi5YmNJeiIJRk2BHv6O9Boyhw",
	"yQq40LQof5rP70ZVFDhQRGVjBSgzE7EtjFyvIBXcRkLs0c7cqGPQ00WMN9HpYQAcRi62PEU7410c22HF",
	"tWAcnR5qy9NAizUw5pAtWmR5e211CB12qnsqAo5Bxyv8jIaOl5BreucSXXeCGOwvPGlbYElmGuJuvWKL",
	"pQ5E7jdSiPndwxibJQYofrAKS2769NWW1yIzB01X6g7Ek2aw5vSbPQ3PPJ2JShNKuMgAbUyVigsuA7EM",
	"6ERF368OZSG9tDrIDAwhpbQyq61Kgp7NHi9tOiY0tdSbIGrUgF+ndsjZVnY66yfPJdBsS2YAnIiZc544",
	"tw4ukqJbVvur34lNkbPUgquUIgWlIEuc0WYvaL6dZat6B54QcAS4noUoQeZU3hrYq9VeOK9gm2AQgSL3",
	"f/hFPfgM8Gqhab4Hsdgmht5aBXYesj7U46bfRXDdyUOyoxKI57lG3zYMIgcNQyg8CCeD+9eFqLeLt0fL",
	"CiT6qv5QiveT3I6AalD/YHq/LbRVORAa51Q/I/2YDeOUCy90xAbLqdLJPrZsGrX0U7OCgBPGODEOPCCU",
	"vKJKW/8q4xmahex1gvNYAcVMMQzwoIhuRv7FS+f9sVNzD3JVqVpUV1VZCqkhi62Bw2bHXK9hU88l5sHY",
	"tT6gBakU7Bt5CEvB+A5ZdiUWQVTXbggXgNBfHBrrzT2/jaKyBUSDiF2AXPhWAXbD8KABQJhqEG0Jh6kO",
	"5dQxSdOJ0qIsDbfQScXrfkNourCtz/TPTds+cVHd3NuZAIVRSa69g3xtMWsDw5ZUEQcHKeiVkT3QRGAd",
	"wX2YzWFMFOMpJLsoH9Uf0yo8AnsPaVUuJM0gySCn2/6gP9vPxH7eNQDueKMKCg2JjfCJb3pDyT6gYsfQ",
	"AsdTMeGR4BeSmiNoNI+GQFzvPSNngGPHmJOjo3v1UDhXdIv8eLhsu9WREfE2XAltdtzRA4LsOPoYgAfw",
	"UA99c1Rg56TRy7pT/DcoN0EtRxw+yRbU0BKa8Q9awIB90QVPB+elw947HDjKNgfZ2B4+MnRkB4ydb6jU",
	"LGUl6jo/wPbOVb/uBFEXHMlAU5ZDRoIPVg0sw/7ExqZ0x7yZKjjKLtUHv2eYiiwnZwpFnjbwV7BFnfuN",
	"DXq8DEIl70CXjYxq7ifKCQLqQ6mMCB42gQ1Ndb41gppewpasQQJR1axgWttg5raqq0WZhANEbf47ZnQO",
	"Lhsw6HdgjMftAocKltffiunE6gS74bvsKAYtdDhdoBQiH2E96iEjCsGoWAhSCrPrzMVV+8haT0ktIB3T",
	"Ru9mff3fUy004wrIf4uKpJSjylVpqGUaIVFQQAHSzGBEsHpOF/XQYAhyKMBqkvjl4cPuwh8+dHvOFJnD",
	"2icjmIZddDx8iHacN0Lp1uG6A1uhOW7nkesDnSHm4nNaSJen7Pe6u5HH7OSbzuC1B8WcKaUc4Zrl35oB",
	"dE7mZszaQxoZF3GA447ycwRDx9aN+37Biiqn+i48OrCieSJWICXLYC8ndxMzwb9d0fynutsena6JkGJF",
	"ARmjGvItKSWkYCPXjaim6rGPiI1pS5eUL1BCl6JauKAqOw5y2EpZW4iseG+IqBSjNzxZSFGVMY7rAml9",
	"8oKRX4AaHSrYEexsNYY1redz+SpjrkK/c8E2f2/GHPLYTCeDKqZB6qpRMS1y2hkYI7hvS8AK8NNMPNKu",
	"j6gzwkYfX+G2GOo1m/vH2MiboWNQ9icOwryaj0ORXka/zbd3IGXYgYiEUoLCOyG0Cyn7VczDbCt3aait",
	"0lD0Tee2668Dx+/toIImeM44JIXgsI0mGDMOP+LH6HHCe2mgM0oIQ327Qn8L/g5Y7XnGUONt8Yu7HZzQ",
	"N3WI4x1sfnfcjtckzDNDqyDkJaEkzRnaDAVXWlapfs8pWiWCwxYJBfHq17Cd6oVvEjeMRexWbqj3nGIY",
	"UG2riLqv5xBRzL8D8OYqVS0WoHRHup0DvOeuFeOk4kzjXIXZr8RuWAkS4zGObMuCbsmc5mhW+x2kILNK",
	"t+U9zHVRmuW5c+GYaYiYv+dUkxyMyvoj45cbHM67QD3NcNBrIa9qLMSvlwVwUEwl8ZCV7+1XjCZ0y1+6",
	"yELMTbafrdHfjN8kxGzRaNHk2/6/+/91+u4s+QdNfj9Jnv2v4w8fn14/eNj78fH1N9/8//ZPT66/efBf",
	"/xnbKQ97LBPDQX7+0ulC5y9R4G2s/j3YP5nFt2A8iRJZ6Nvu0Ba5j1mHjoAetM0hegnvud5wQ0grmrPM",
	"CCI3IYcui+udRXs6OlTT2oiO+cOv9UAx8hZchkSYTIc13vga70d5xXOe0A3l0pjwvMwrbrfSi382pN9H",
	"24j5tM5rsyUvTgkmPS2pDxVzfz7+6uvJtElWqr9PphP39UOEklm2iaWkZbCJaQfugODBuKdISbcKdJx7",
	"IOzRwCLrzQ+HLcColWrJyk/PKZRmsziH84HSzsqw4efcRjCb84NOra2zlYv5p4dbS4AMSr2MpcK3JAVs",
	"1ewmQCfQoJRiBXxK2BEcdbX8zCgsLsQpBzrHlGxUf8QYcbw+B5bQPFUEWA8XMkqVjtEPCreOW19PJ+7y",
	"V3cuj7uBY3B156w9WP5vLci977+9JMeOYap7NjvSDh3ks0V0OZey0QpBMdzMFgCx6aHv+Xv+EuaMM/P9",
	"9D3PqKbHM6pYqo4rBfI5zSlP4WghyKnPAnlJNX3Pe5LWYI2eIP+GlNUsZym5CiXihjxt3YX+CO/fv6P5",
	"Qrx//6Hnje/Lr26qKH+xEyRrppei0onLGk8krKmMeTtUnTWMI9uyELtmnRI3tmXFLivdjR/nebQsVTd7",
	"sL/8sszN8gMyVC43zmwZUVpIL4sYAcVCg/v7WriLQdK1V+wrBYr8VtDyHeP6A0neVycnT4C00ul+c1e+",
	"ocltCaPV+8Hsxq5Wjwu3eg1stKRJSRcxp8r79+800BJ3H+XlApXsPCfYrZXG58OUcahmAR4fwxtg4Tg4",
	"JQkXd2F7+QpB8SXgJ9xCbGPEjcbVe9P9ChL7brxdneTA3i5VepmYsx1dlTIk7nemLhyyMEKW978rtsAY",
	"R1djZQYkXUJ65YpfQFHq7bTV3Yd4OEHTsw6mbFkUm5aDiflokp4BqcqMOlGc8m03Q1qB1j7I8i1cwfZS",
	"NHn9h6REtzN01dBBRUoNpEtDrOGxdWN0N9/FEWFWYln6RFfMePJkcVrThe8zfJCtyHsHhzhGFK0M0iFE",
	"UBlBhCX+ARTcYKFmvFuRfmx5RsuY2ZsvUiLF837imjTKkwv5CVeDZl/7vQCssSTWisyokduFKw9ks1AD",
	"LlYpuoABCTn0CozM9Wx5EnCQffde9KYT8+6F1rtvoiDbxolZc5RSwHwxpILKTCfQy89kHU/ONI5V/xzC",
	"ZjmKSXVEnGU6VLa8M7aM2RBocQIGyRuBw4PRxkgo2Syp8pWLsMCTP8ujZIA/MKt6Vy2N8yBGKajiVFfK",
	"8Dy3e0572qWrqOHLaPjaGaFqOaIOhpHwMSw6th2CowCUQQ4Lu3Db2BNKk+HdbJCB46f5PGccSBILd6JK",
	"iZTZ0lPNNePmACMfPyTEmoDJ6BFiZByAjQ5VHJi8FuHZ5ItDgOQuQ536sdEVG/wN8WQaGwBsRB5RGhbO",
	"BtwqqecA1MXI1fdXJ1IThyGMT4lhcyuaGzbnNL5mkF5JBxRbOwUcnEv/wZA4u8MCby+Wg9Zkr6KbrCaU",
	"mTzQcYFuB8QzsUlsNl1U4p1tZobeozHRmNsXO5i2eMY9RWZig2EieLXYGNw9sAzD4cEINPwNU0iv2G/o",
	"NrfA7Jp2tzQVo0KFJOPMeTW5DIkTY6YekGCGyOV+UA/jRgB0jB1NcVmn/O5VUtviSf8yb261aVPnyaeb",
	"xI7/0BGK7tIA/vpWmLqCxZuuxBK1U7SjHdrFOwIRMkb0hk30nTR9V5CCHFApSFpCVHIVc90Z3Qbwxrnw",
	"3QLjBZYIoXz7IAihkbBgSkNjRPeO+s9hnqRYmUyI+fDqdCnnZn1vhaivKVv6Bju2lvnJV4AxqHMmlU7Q",
	"AxFdgmn0nUKl+jvTNC4rtYN0bB1PlsV5A057BdskY3kVp1c37w8vzbSva5aoqhnyW8ZtxMQM685GQ/d2",
	"TG2jO3cu+JVd8Ct6Z+sddxpMUzOxNOTSnuNPci46nHcXO4gQYIw4+rs2iNIdDDJIuexzx0BusocTUy6P",
	"dllfe4cp82PvDRvxiZ9Dd5QdKbqWwGCwcxUM3URGLGE6KNvaz4UcOAO0LFm26dhC7aiDGjM9yODhi111",
	"sIC76wbbg4HA7hlLx5Cg2nXNGgHfFuBtlRU5GoWZy3b1sZAhhFMx5cvH9xFVp2vtw9Ul0PwH2P5i2uJy",
	"JtfTye1MpzFcuxH34PpNvb1RPKNr3prSWp6QA1FOy1KKFc0TZ2AeIk0pVo40sbm3R39iVhc3Y15+e/bq",
	"jQP/ejpJc6AyqUWFwVVhu/JPsypbQm3ggPjy1Ebn8zK7FSWDza/rPoVG6fUSXJ3fQBrtFSRsHA7BUXRG",
	"6nk8Qmivydn5RuwSd/hIoKxdJI35znpI2l4RuqIs93YzD+1ANA8ublxVyyhXCAe4tXclcJIld8pueqc7",
	"fjoa6trDk8K5dlQiLmyxbUUE77rQMeh2Wzqve0GxnKC1ivSZE68KtCQkKmdp3MbKZ8oQB7e+M9OYYOMB",
	"YdSMWLEBVyyvWDCWaTamYEgHyGCOKDJVtGZJg7uZcA+pVJz9qwLCMuDafJJ4KjsHFes3Omt7/zo1skN/",
	"LjewtdA3w99GxghLaXZvPARit4AReup64L6sVWa/0NoiZX4IXBIHOPzDGXtX4g5nvaMPR802eHHZ9riF",
	"7570+Z8hDFsAe/+jK155dTU9B+aIPqLCVDKX4neI63moHkcyXXzxUIZRLr9DGGkfPh3QYjG1dad5C6aZ",
	"fXC7h6Sb0ArVDlIYoHrc+cAth1UMvYWacrvV9k2DVqxbnGDCqNJjO35DMA7mXiRuTtczGivxaIQMA9NZ",
	"4wBu2dK1IL6zx72qw/3t7CTwJddtmc1iLkE2SWj9iig3FBjstKNFhUYyQKoNZYKp9f/lSkSGqfiacvs0",
	"hulnj5LrrcAav0yvtZBYg0DFzf4ZpKygeVxyyNK+iTdjC2ZffagUBM8KuIHsizqWitzTDHUSi0PN+Zyc",
	"TIO3TdxuZGzFFJvlgC0e2RYzqpCT14aouotZHnC9VNj88Yjmy4pnEjK9VBaxSpBaqEP1pnZezUCvATg5",
	"wXaPnpH76LZTbAUPDBbd/Tw5ffQMja72j5PYBeBe7djFTTJkJ3937CROx+i3tGMYxu1GPYqma9tnu4YZ",
	"147TZLuOOUvY0vG6/WepoJwuIB4pUuyByfbF3URDWgcvPLNvzigtxZYwHZ8fNDX8aSD63LA/CwZJRVEw",
	"XTjnjhKFoafmzQA7qR/OPmDjyr16uPxH9JGW3kXUUSI/rdHU3m+xVaMn+zUtoI3WKaG28ETOmugFX4Sa",
	"nPu6Nlj/ti57a3Fj5jJLRzEHgxnmpJSMa1QsKj1P/krSJZU0NezvaAjcZPb100jN33btSX4Y4J8c7xIU",
	"yFUc9XKA7L0M4fqS+1zwpDAcJXvQZHsEp3LQmRt32w35DncPPVYoM6Mkg+RWtciNBpz6VoTHdwx4S1Ks",
	"13MQPR68sk9OmZWMkwetzA79/PaVkzIKIWPF6prj7iQOCVoyWGHsXnyTzJi33AuZj9qF20D/eT0PXuQM",
	"xDJ/lmOKwHMR0U59Heraku5i1SPWgaFjaj4YMpi5oaakXfP30/PRu4mCinu6vGG779gyXzwe8I8uIj4z",
	"ueAGNr58u5IBQglqnkdJJqu/Bz52Sp6LzVjC6ZxCTzz/BiiKoqRiefZLk/nZKSkvKU+XUZ/ZzHT8tXn8",
	"ql6cvQOjdeeWlHPIo8NZefNXL5dGJOd/irHzFIyPbNutcm+X21lcA3gbTA+Un9Cgl+ncTBBitZ1UVwdt",
	"5wuREZynKXLWHNf+6whBDet/VaB0LEEJP9jAMbSNGnZgSygT4BlqpEfke/u+7RJIq4INaoK+VIEvX2uN",
	"9lWZC5pNsYTC5bdnr4id1faxT7jYEs4LVITaq+jYxIL6jeNCkP1rLPH0iPHj7I7XNqtWOqkrLscSUE2L",
	"piY06/gJUEUKsXNEXgYvVdpcVTOEoYc5k4XR6urRrHyENGH+ozVNl6j2tVjrMMmPrz3uqVIF7/3V7/bU",
	"RQ3x3Bm4XflxW318SoTRzddM2WdNYQXtnNc6AdyZHXwObHt5suLcUsrRAbdcXcLwULR74OwV6V0JUcg6",
	"iD9Q6Lel+w8txX6BvaI1lrp13XsP/dkMyvo9Fv9cdUq54CzFCkexK9q9fzrGzzaiGFTXkOuPuDuhkcMV",
	"rSZfh+I5LA7Wl/eM0CGub+gPvppNtdRh/9T40OaSarIArRxng2zqH0VwtkbGFbgilfhabsAnhWz5LpFD",
	"Rt3hSe02OZCMMPVmQHn8znx77UwLGJN+xTgqEQ5tTvCz1kB8nlEbzYNpshCg3Hra+cfqnelzhKm4GWw+",
	"HPnnHHEM6/ozy7Z+7v5QZ97r7bzMpu0L09ZV6Kl/bkU520nPytJNOvxkRlQe0Bs+iOCI9zLx7qMAufX4",
	"4Wg7yG1nuArep4bQYIXObijxHu4RRv18ROdpIiO0WorCFsSGiUWrJDAeAeMV49A8Nhq5INLolYAbg+d1",
	"oJ9KJdVWBBzF0y6B5ujhjjE0pZ1747ZDdesTGZTgGv0cw9vYvHwxwDjqBo3gRvm2fuPUUHcgTLzAx5Ud",
	"IvvvWKBU5YSoDLMWOi9bxBiHYdz+7Zz2BdA/Bn2ZyHbXktqTc8hNNJSIOquyBeiEZlmsZuhz/ErwK8kq",
	"lBxgA2lV15YsS5Ji3ZV2IZo+tbmJUsFVVeyYyze45XTBUzERagifq/E7jIkusy3+GyusOLwzLtDj4FBD",
	"H9XhXpI4UG5uj9STeg1NJ4otkvGYwDvl9uhopr4ZoTf975TSc7FoA/KJy0/s4nLhHsX427fm4girM/Sq",
	"hdqrpS6egIF9wj/wh2pjnfbb5kp4lfXKh6JDqX5AbLcBYvgpsClefgPhvUHRDWrvV+uhHAryTQdj0ql2",
	"2XGakp0saDDjyEYI2dwihCJunR2KCrJBQeZzr/c4ybAnZ+t45b0AoT7crA/QDz6WlZSUOfd7wyz6mHVR",
	"7/08hDHxsM0GdxfhYskHLXY/rIbivolifJEDwe/dp4KuwKXM16/n27X6yCevEtpf3eO1drw68j66/r7h",
	"Faf6vObQQePtpStLb5fpdPIffrFxcgS4ltt/A1Nub9N7Dy31pV1rnmqakLqi8agKx61bMf5m0nCNpaau",
	"EtJTKRRrqmjHHlMaGU93ie8hBTWi+mP5YJYVpBpLpzdOeglwSMUoM1nwdOGXWksDumMdduhKLO2qq9Sv",
	"l77nQuulPgXpe7bW9NH4KkJndSgWMiWsPbsA7l4PbCc1jA6tns8h1Wy1J9Xs70vgQRrT1Bsh7CvAQeYZ",
	"q0N1sVLJ4Sa2BqBdmWA74QkqBt4anKFEkyvY3lOkRQ3R4tdTf6/cpEgFYgC5Q2JIRKhYqIO1mjrvM1M1",
	"ZSAWfGiR7Q5Nua/Bd3OCxMkbzuVJ0ty4TTLljinjD3eMmst0PSjFGKNOh7LR+nX/h4Xtl/jMgqrftPNF",
	"LkKVlJz3SwGuXZEMTAysHQW+XAYo/5vPAraz5OwKwpd90C2zpjLzLaJ2Bm/CSHbcR70UMl+zvgv0vJ6Z",
	"NYGg/aShSHEpDPdNc2Hkr2QoZrode1kHLtxTNsLEFtvGqFID1xykewENhb1cKEi08IGju+DYhQr3fP1N",
	"kKAGCzpa4AbLrLxt6shgYVuKZVWoi54JF0gkFNRAJ4NqL8Nz7kL2C/vdZ8n4wqZ7zSk1ve4v8e5DgJnq",
	"ITGk+jlxt+X+7JubWFYY5/YFWhUr/cINKkPTfylFVqX2gg4PRm19Gl1YaQcriRol0v4qOwJxkMJ4Bdtj",
	"K/H72vh+B0OgreRkQQ9KBnQ2+U5tTSoG9+JOwPucZprppBQiTwYs++f9ejVdir9i6RVkxNwUPlRu4J0R",
	"ch8NyrXrdr3c+vosZQkcsgdHhJxxG5zsvbjtgsmdyfk9vWv+Dc6aVbaElLMgHb3n8ShPLO4kb8nN/DC7",
	"eZgCw+puOZUdZE81lM1ArRxJ15FXd47GqqB9v2r3JZSGqCwUMZmkeeRjT1BIHQ/SvLPQxIT0pYM8F+sE",
	"qSipi13FdA7Trs0kfXnPppvB9gyC4BKq3AW6JUuakVRICWnYIx7Pb4EqhIQkFxhrEnODzbWRhwoM4uUk",
	"FwsiSqPm2ppx3mEQfQQkmMvmlNqeifVKDGTtg3I5pG4a27g/z463Qg5/h+Syc5BtO4yHcFg++LERRyjd",
	"N0f2WqUDMEcQaG/4iGEv8pZKe13d13iG3sbSomBpHN1/rpCKwUCIPS/FRNZXk6N7yManwA3gKuqf3O0O",
	"tK9+zcY6BesCwSOPRQDAsJuwBcMoZ+GhYMzxFb2ERpB8Xkut09Yjp6xz9n3xNkvjKbVa6xKIGbuS4FKy",
	"7HNfnXdKSqqX/hYzzfu6pdFTQGG+lH3rgiprCfEWGffWWFc8EGWSwwpa3lOXJ1alKSjFVhC+U2Y7kwyg",
	"RPtkV2qOuQVDLtcRpdzak8CxNAa7UdnKItbuFNkjOEXFvA1P7DFRY4+SgWjFsoq28Kdu8fLT0KNPETbs",
	"YR3JKQ5mEvHF7WIRex35SPPRc8njfvwwTbE2iuBsWW08tUTYnGxV0jUfViIidqfauXz7dRAcjKhO2vDg",
	"lS/rXbmpAjlIGbsIo/daW1TmUOBf2wwrfHhxy/WNyFjW1MVUZACmmvOMoWrQhEIFzQq6JRmbz0FaY77S",
	"lGdUZmFzxkkKUlNmNJuturlYa6CVFUz3SraGu+KgnsHEZFy0S1lA8q1TGW4hdaLnJiJx2qtWi6EH6Xq7",
	"Eo+dpxsjXWMQ0QARuKxflK3tARMcBSRS0Cs4cB7Ffofd02AtDmf70wJnHTNFzLF4w0Jio1h33+ceud2C",
	"p+d2e4bCOoNNApO0oRtoSfYXZJfGf2wuznGP4PkOe8ALHYbBM3jeduPA+cyZQD/WSAmW8mGIElrL3+eD",
	"dAtsJI1gixwj0Bps1VcbPd7el8DBrF7UftuhFxu77l0sKig4Flrtu4Utb8L3WkLCMWdBrmj+6V27WG3y",
	"DPHh3tKPLzT0DYZItqhUNwvDf0VHzR34Ae9uav4GXdF/B7NHUa3UDeVEmFqs95EreLPQ3Bou5v69qhVw",
	"ssYxbdDWo6/JzKUplxJSprqi0do/JVG7wvBlJZf6sNF7fG/71vmL0Lcg47nXNMjrpiw96vgL3kDYHNHP",
	"zFQGTm6UymPU1yOLCP5iPCqsF7bnurhqRXPZZz46aQpCwh1HdQXx2QdGdfUroY1dno1cMpdOpaC/ztG3",
	"dQu3kYu6WdvYkMQ+cnfVLh8TSRh/ksB0x1BGixB8z4MgqOS3R78RCXN8sE+Qhw9xgocPp67pb4/bn81x",
	"fvgwKp19siBGiyM3hps3RjG/DKW12dStgQzKzn5ULM/2EUYrH7Z58hIzPn91Wfef5dHNX22sSf+ouofP",
	"Dgmf7m4CIiay1tbkwVRBpuuIJFfXLZLSin6ctJJMb7EYoLcfsF+j4Zbf19FMLhqu1g/d3afFFdTlJJvY",
	"p0r52/V7QXO8j6zays0tJPIj8u2GFmUO7qB8c2/2F3jy16fZyZNHf5n99eSrkxSefvXs5IQ+e0ofPXvy",
	"CB7/9aunJ/Bo/vWz2ePs8dPHs6ePn3791bP0ydNHs6dfP/vLPcOHDMgW0IkvPTP5v/gybXL25jy5NMA2",
	"OKEl+wG29hE8Q8b+eT2a4kmEgrJ8cup/+t/+hB2lomiG979OXGWLyVLrUp0eH6/X66Owy/ECgx0SLap0",
	"eezn6b2/d/bmvPYSWSsQ7qhNCvXWPU8KZ/jt7bcXl+TszflR8Dr46eTk6OToET4mXQKnJZucTp7gT3h6",
	"lrjvx47YJqcfr6eT4yXQHGMDzR8FaMlS/0kCzbbu/2pNFwuQR+7NQfPT6vGxFyuOP7qgj+td347D5zuO",
	"P7ZiY7I9PbG8//FHX7Vud+tWWTgXExR0GAnFrmbHMyyGMbYpqKDx8FJQ2VDHH1FcHvz92GXvxz+i2mLP",
	"w7EPIIu3bGHpo94YWDs9UqrTZVUef8T/IH0GYNlcmT64GawKkYGfT8zntojmrs/HH+2/wTCwKUEyI7dh",
	"xJ371abMH9uXw/s/b3ka/bEPZe8Fq6gZ6K3Nu6f4ynK8jv4Ej5s9qecZMlDdjVC1z2FY0yGewscnJwe9",
	"7Dku3qUbF9u/kvq8Z9fKrqeTpwcCutN400qdiQDznGbE+9hx7kefbu5zjmGuhqkSe2kgBE8/HQTtt0d+",
	"gC15LTT5DrWb6+nkq0+5E+fcyFo0J9gyKC3YPyI/8ysu1ty3NNJGVRRUbkcfH00XCmMxJFtRJ+sFz1FN",
	"PmDwj427aB+1syzrEb2VukDp5wKvryGMFWpRukTZBmmN0Mm4WUJfa+2/772ESIi5DYT0zkMuMpiE4qCW",
	"FVzfkie05W4DwnnECIPWRHwgau6LgQagRuOluyEyduRRLxx3Bq8fdKlmBVNe2v/CU77wFGmnf/Lppr8A",
	"uWIpkEsoSiGpZPmW/MzrMic35nFnWRZNMmkf/b08zij0qchgATxxDCyZiWzry0W3JrgCq1/2BJnjj+03",
	"X6x8OckgBx0NoDe/169x9xcx25Lzlz0Jx3brct7nW2wavKVy+u6jVdCM9tHoT10Qe5wxfMajy5s+xLnm",
	"LrI3C1kITSwWMreoL4zoCyO6lXAz+vCMkW+i2octIkZ7d/bU1wOLVZukug/KGB3lsx7fO9n4vv4T03ds",
	"sg5kJPhgY0i6aP7CIr6wiNuxiO8hchjx1DqmESG6w/ShsQwDA/Cy7suK6KPwzaucyiB0aJ+Z4wxHdMaN",
	"T8E1PrVSF8WV1ekobx6fjWzg3ep5X1jeF5b352F5Z/sZTVswubVmdAXbgpa1PqSWlc7EOnBTICw2hKhv",
	"B67fem/9fbymTCdzIV3qN7480u+sgebHrqhh59emjlDvCxZHCn4MQ5ijvx7XDztFP3Y9HLGvzsI/0MhH",
	"VPrPjbcz9B4ia6/9hu8+GLaMzwY4rt84w06PjzGdcimUPp5cTz92HGXhxw81CXys7wpHCtcfrv8nAAD/",
	"/zB0GVM60gAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
