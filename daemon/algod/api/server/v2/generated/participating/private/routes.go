// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//b6FkyasMAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
