// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
