// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9/5PbNpIo/q+gdFflLyfO2I6T2/hTW/eZ2El2Lk7i8ji5d2f77UJkS8IOBXABcEaK",
	"n//3V+gGSJAEJWpm4mzq5Sd7RHxpNBqN/obuD7NcbSolQVoze/ZhVnHNN2BB4188z1UtbSYK91cBJtei",
	"skLJ2bPwjRmrhVzN5jPhfq24Xc/mM8k30LZx/eczDf+ohYZi9szqGuYzk69hw93Adle51s1I22ylMj/E",
	"GQ1x/mL2cc8HXhQajBlC+aMsd0zIvKwLYFZzaXjuPhl2Leya2bUwzHdmQjIlgakls+tOY7YUUBbmJCzy",
	"HzXoXbRKP/n4kj62IGZalTCE87naLISEABU0QDUbwqxiBSyx0Zpb5mZwsIaGVjEDXOdrtlT6AKgERAwv",
	"yHoze/Z2ZkAWoHG3chBX+N+lBvgFMsv1Cuzs/Ty1uKUFnVmxSSzt3GNfg6lLaxi2xTWuxBVI5nqdsO9r",
	"Y9kCGJfs9TfP2WefffalW8iGWwuFJ7LRVbWzx2ui7rNns4JbCJ+HtMbLldJcFlnT/vU3z3H+C7/Aqa24",
	"MZA+LGfuCzt/MbaA0DFBQkJaWOE+dKjf9UgcivbnBSyVhol7Qo3vdFPi+X/TXcm5zdeVEtIm9oXhV0af",
	"kzws6r6PhzUAdNpXDlPaDfr2Ufbl+w+P548fffyXt2fZ//g/P//s48TlP2/GPYCBZMO81hpkvstWGjie",
	"ljWXQ3y89vRg1qouC7bmV7j5fIOs3vdlri+xzite1o5ORK7VWblShnFPRgUseV1aFiZmtSwdm3KjeWpn",
	"wrBKqytRQDF33Pd6LfI1y7mhIbAduxZl6WiwNlCM0Vp6dXsO08cYJQ6uG+EDF/TPi4x2XQcwAVvkBlle",
	"KgOZVQeup3DjcFmw+EJp7ypz3GXF3qyB4eTuA122iDvpaLosd8zivhaMG8ZZuJrmTCzZTtXsGjenFJfY",
	"36/GYW3DHNJwczr3qDu8Y+gbICOBvIVSJXCJyAvnbogyuRSrWoNh12uwa3/naTCVkgaYWvwdcuu2/T8v",
	"fvyBKc2+B2P4Cl7x/JKBzFUBxQk7XzKpbEQanpYQh67n2Do8XKlL/u9GOZrYmFXF88v0jV6KjUis6nu+",
	"FZt6w2S9WYB2WxquEKuYBltrOQYQjXiAFDd8O5z0ja5ljvvfTtuR5Ry1CVOVfIcI2/Dtnx/NPTiG8bJk",
	"FchCyBWzWzkqx7m5D4OXaVXLYoKYY92eRherqSAXSwEFa0bZA4mf5hA8Qh4HTyt8ReCEQUbBaWY5AI6E",
	"bYJm3Ol2X1jFVxCRzAn7yTM3/GrVJciG0Nlih58qDVdC1abpNAIjTr1fApfKQlZpWIoEjV14dDgGQ208",
	"B954GShX0nIhoXDMGYFWFohZjcIUTbhf3xne4gtu4IunY3d8+3Xi7i9Vf9f37vik3cZGGR3JxNXpvvoD",
	"m5asOv0n6Ifx3EasMvp5sJFi9cbdNktR4k30d7d/AQ21QSbQQUS4m4xYSW5rDc/eyYfuL5axC8tlwXXh",
	"ftnQT9/XpRUXYuV+Kumnl2ol8guxGkFmA2tS4cJuG/rHjZdmx3ab1CteKnVZV/GC8o7iutix8xdjm0xj",
	"HkuYZ422Gyseb7ZBGTm2h902GzkC5CjuKu4aXsJOg4OW50v8Z7tEeuJL/Yv7p6pK19tWyxRqHR37KxnN",
	"B96scFZVpci5Q+Jr/9l9dUwASJHgbYtTvFCffYhArLSqQFtBg/KqykqV8zIzllsc6V81LGfPZv9y2tpf",
	"Tqm7OY0mf+l6XWAnJ7KSGJTxqjpijFdO9DF7mIVj0PgJ2QSxPRSahKRNdKQkHAsu4YpLe9KqLB1+0Bzg",
	"t36mFt8k7RC+eyrYKMIZNVyAIQmYGt4zLEI9Q7QyRCsKpKtSLZof7p9VVYtB/H5WVYQPlB5BoGAGW2Gs",
	"eYDL5+1Jiuc5f3HCvo3HRlFcyXLnLgcSNdzdsPS3lr/FGtuSX0M74j3DcDuVPnFbE9DgxPy7oDhUK9aq",
	"dFLPQVpxjf/i28Zk5n6f1Pn3QWIxbseJCxUtjznScfCXSLm536OcIeF4c88JO+v3vRnZuFH2EIw5b7F4",
	"18SDvwgLG3OQEiKIImry28O15ruZFxIzFPaGZPKTAaKQiq+ERGjnTn2SbMMvaT8U4t0RAphGLyJaIgmy",
	"MaF6mdOj/mRgZ/kdUGtqY4Mk6iTVUhiLejU2ZmsoUXDmMhB0TCo3oowJG75nEQ3M15pXRMv+C4ldQqI+",
	"T40I1ltevBPvxCTMEbuPNhqhujFbPsg6k5Ag1+jB8FWp8su/cLO+gxO+CGMNaR+nYWvgBWi25madODg9",
	"2m5Hm0LfriHSLFtEU500S3ypVuYOlliqY1hXVT3nZemmHrKs3mpx4EkHuSyZa8xgI9Bg7hVHsrCT/sW+",
	"5vnaiQUs52U5b01FqspKuILSKe1CStBzZtfctocfRw56DZ4jA47ZWWDRaryZCU1surFFaGAbjjfQxmkz",
	"Vdnt03BQwzfQk4LwRlQ1WhEiReP8RVgdXIFEntQMjeA3a0RrTTz4iZvbf8KZpaLFkQXQBvddg7+GX3SA",
	"dq3b+1S2UyhdkM3aut+EZrnSNATd8H5y9x/guu1M1Hm/0pD5ITS/Am146VbXW9SDhnzv6nQeOJkFtzw6",
	"mZ4K0woYcQ7sh+Id6ISV5kf8Dy+Z++ykGEdJLfUIFEZU5E4t6GJ2qKKZXAO0tyq2IVMmq3h+eRSUz9vJ",
	"02xm0sn7mqynfgv9IpoderMVhbmrbcLBxvaqe0LIdhXY0UAW2ct0ormmIOCNqhixjx4IxClwNEKI2t75",
	"tfaV2qZg+kptB1ea2sKd7IQbZzKz/0ptX3jIlD6MeRx7CtLdAiXfgMHbTcaM083S+uXOFkrfTJroXTCS",
	"td5Gxt2okTA17yEJm9ZV5s9mwmNBDXoDtQEe+4WA/vApjHWwcGH5r4AF40a9Cyx0B7prLKhNJUq4A9Jf",
	"J4W4BTfw2RN28Zezzx8/+euTz79wJFlptdJ8wxY7C4bd92Y5ZuyuhAdJ7Qili/ToXzwNPqruuKlxjKp1",
	"DhteDYci3xdpv9SMuXZDrHXRjKtuAJzEEcFdbYR2Rm5dB9oLWNSrC7DWabqvtFreOTcczJCCDhu9qrQT",
	"LEzXT+ilpdPCNTmFrdX8tMKWIAuKM3DrEMbpgJvFnRDV2MYX7SwF8xgt4OChOHab2ml28Vbpna7vwrwB",
	"WiudvIIrrazKVZk5OU+ohIHilW/BfIuwXVX/d4KWXXPD3NzovaxlMWKHsFs5/f6iod9sZYubvTcYrTex",
	"Oj/vlH3pIr/VQirQmd1KhtTZMY8stdowzgrsiLLGt2BJ/hIbuLB8U/24XN6NtVPhQAk7jtiAcTMxauGk",
	"HwO5khTMd8Bk40edgp4+YoKXyY4D4DFysZM5usru4tiOW7M2QqLf3uxkHpm2HIwlFKsOWd7ehDWGDprq",
	"nkmA49DxEj+jrf4FlJZ/o/SbVnz9Vqu6unP23J9z6nK4X4z3BhSubzADC7kquwGkKwf7SWqNv8mCnjdG",
	"BFoDQo8U+VKs1jbSF19p9SvciclZUoDiBzIWla7P0GT0gyocM7G1uQNRsh2s5XCObmO+xheqtowzqQrA",
	"za9NWsgcCTnEWCcM0bKx3Ir2CWHYAhx15bx2q60rhgFIg/ui7ZjxnE5ohqgxI+EXTdwMtaLpKJyt1MCL",
	"HVsASKYWPsbBR1/gIjlGT9kgpnkRN8EvOnBVWuVgDBSZN0UfBC20o6vD7sETAo4AN7Mwo9iS61sDe3l1",
	"EM5L2GUY62fY/e9+Ng9+A3itsrw8gFhsk0Jv3542hHra9PsIrj95THZkqSOqdeKtYxAlWBhD4VE4Gd2/",
	"PkSDXbw9Wq5AY0jJr0rxYZLbEVAD6q9M77eFtq5GIti9mu4kPLdhkksVBKvUYCU3NjvEll2jji3BrSDi",
	"hClOjAOPCF4vubEUBiVkgTZNuk5wHhLC3BTjAI+qIW7kn4MGMhw7d/egNLVp1BFTV5XSForUGtAjOzrX",
	"D7Bt5lLLaOxG57GK1QYOjTyGpWh8jyyvAeMf3Db+V+/RHS4Oferunt8lUdkBokXEPkAuQqsIu3EU7wgg",
	"wrSIJsIRpkc5TejwfGasqirHLWxWy6bfGJouqPWZ/altOyQucnLQvV0oMOhA8e095NeEWYrfXnPDPBzB",
	"xY7mHIrXGsLsDmNmhMwh20f5qOK5VvEROHhI62qleQFZASXfJYID6DOjz/sGwB1v1V1lIaNA3PSmt5Qc",
	"4h73DK1wPJMSHhl+Ybk7gk4VaAnE9z4wcgE4doo5eTq61wyFcyW3KIyHy6atToyIt+GVsm7HPT0gyJ6j",
	"TwF4BA/N0DdHBXbOWt2zP8V/g/ETNHLE8ZPswIwtoR3/qAWM2IL9G6fovPTYe48DJ9nmKBs7wEfGjuyI",
	"YfoV11bkokJd5zvY3bnq158g6ThnBVguSihY9IHUwCruzyiEtD/mzVTBSba3IfgD41tiOSFMpwv8JexQ",
	"535FbxMiU8dd6LKJUd39xCVDQEPEsxPB4yaw5bktd05Qs2vYsWvQwEy9oBCGoT/FqiqLB0j6Z/bM6L2z",
	"Sd/oXnfxBQ4VLS8Va0Y6wX743vQUgw46vC5QKVVOsJANkJGEYFLsCKuU23Xhnz+FBzCBkjpAeqaNrvnm",
	"+r9nOmjGFbD/VjXLuUSVq7bQyDRKo6CAAqSbwYlgzZw+OLHFEJSwAdIk8cvDh/2FP3zo91wYtoTr8GbQ",
	"Neyj4+FDtOO8UsZ2Dtcd2EPdcTtPXB/ouHIXn9dC+jzlcMSTH3nKTr7qDd54u9yZMsYTrlv+rRlA72Ru",
	"p6w9ppFp0V447iRfTjc+aLBu3PcLsalLbu/CawVXvMzUFWgtCjjIyf3EQsmvr3j5Y9MN30NC7mg0hyzH",
	"V3wTx4I3rg89/HPjCCncAaag/6kAwTn1uqBOB1TMNlJVbDZQCG6h3LFKQw703s1JjqZZ6gmjSPh8zeUK",
	"FQat6pUPbqVxkOHXhkwzupaDIZJCld3KDI3cqQvAh6mFJ49OnALuVLq+hZwUmGvezOdfuU65maM96HsM",
	"kk6y+WxU43VIvWo1XkJO993mhMugI+9F+GknnuhKQdQ52WeIr3hb3GFym/vrmOzboVNQDieOIn7bj2NB",
	"v07dLnd3IPTQQExDpcHgFRWbqQx9Vcv4jXYIFdwZC5uhJZ+6/nXk+L0e1ReVLIWEbKMk7JJpSYSE7/Fj",
	"8jjhNTnSGQWWsb59HaQDfw+s7jxTqPG2+MXd7p/QvsfKfKP0XblEacDJ4v0ED+RBd7uf8qZ+Ul6WCdei",
	"f8HZZwBm3gTrCs24MSoXKLOdF2buo4LJG+mfe3bR/6p5l3IHZ68/bs+HFicHQBsxlBXjLC8FWpCVNFbX",
	"uX0nOdqooqUmgriCMj5utXwemqTNpAkrph/qneQYwNdYrpIBG0tImGm+AQjGS1OvVmBsT9dZAryTvpWQ",
	"rJbC4lwbd1wyOi8VaIykOqGWG75jS0cTVrFfQCu2qG1X+scHysaKsvQOPTcNU8t3kltWAjeWfS/kmy0O",
	"F5z+4chKsNdKXzZYSN/uK5BghMnSwWbf0leM6/fLX/sYfwx3p88h6LTNmDBzy+wkSfnf9//j2duz7H94",
	"9suj7Mt/O33/4enHBw8HPz75+Oc//5/uT599/POD//jX1E4F2FPPZz3k5y+8Znz+AtWfKFS/D/sns/9v",
	"hMySRBZHc/Roi93HVBGegB50jWN2De+k3UpHSFe8FIXjLTchh/4NMziLdDp6VNPZiJ4xLKz1SKXiFlyG",
	"JZhMjzXeWIoaxmemH6qjU9K/PcfzsqwlbWWQvukdZogvU8t5k4yA8pQ9Y/hSfc1DkKf/88nnX8zm7Qvz",
	"5vtsPvNf3ycoWRTbVB6BArYpXTF+JHHPsIrvDNg090DYk6F0FNsRD7uBzQK0WYvq03MKY8UizeHCkyVv",
	"c9rKc0kB/u78oItz5z0navnp4bYaoIDKrlP5izqCGrZqdxOgF3ZSaXUFcs7ECZz0bT6F0xd9UF8JfBkC",
	"U7VSU7Sh5hwQoQWqiLAeL2SSYSVFP73nDf7yN3euDvmBU3D150xF9N779us37NQzTHOPUlrQ0FESgoQq",
	"7R9PdgKSHDeL35S9k+/kC1ii9UHJZ+9kwS0/XXAjcnNaG9Bf8ZLLHE5Wij0L7zFfcMvfyYGkNZpYMXo0",
	"zap6UYqcXcYKSUuelCxrOMK7d295uVLv3r0fxGYM1Qc/VZK/0ASZE4RVbTOf6ifTcM11yvdlmlQvODLl",
	"8to3KwnZqiYDaUgl5MdP8zxeVaaf8mG4/Koq3fIjMjQ+oYHbMmasat6jOQHFP+l1+/uD8heD5tfBrlIb",
	"MOxvG169FdK+Z9m7+tGjz/BlX5sD4W/+ync0uatgsnVlNCVF36iCCye1EmPVs4qvUi62d+/eWuAV7j7K",
	"yxu0cZQlw26dV4fhgQEO1S6geeI8ugEEx9GPg3FxF9QrpHVMLwE/4RZ2H2Dfar+i9/M33q4Db/B5bdeZ",
	"O9vJVRlH4mFnmmxvKydkhWgMI1aorfrEeAtg+RryS5+xDDaV3c073UPAjxc0A+sQhnLZ0QtDzKaEDooF",
	"sLoquBfFudz109oYelGBg76GS9i9UW0ypmPy2HTTqpixg4qUGkmXjljjY+vH6G++jyoLD019dhJ8vBnI",
	"4llDF6HP+EEmkfcODnGKKDppP8YQwXUCEUT8Iyi4wULdeLci/dTyhMxBWnEFGZRiJRapNLz/NfSHBVgd",
	"VfrMgz4KuRnQMLFkTpVf0MXq1XvN5Qrc9eyuVGV4SVlVk0EbqA+tgWu7AG732vllnJAiQIcq5TW+vEYL",
	"39wtAbZuv4VFi52Ea6dVoKGI2vjo5ZPx+DMCHIobwhO6t5rCyaiu61GXyDgYbuUGu41a60PzYjpDuOj7",
	"BjBlqbp2++KgUD7bJiV1ie6X2vAVjOgusfduYj6MjscPBzkkkSRlELXsixoDSSAJMjXO3JqTZxjcF3eI",
	"Uc3sBWSGmchB7H1GmETbI2xRogDbRK7S3nPd8aJSVuAx0NKsBbRsRcEARhcj8XFccxOOI+ZLDVx2knT2",
	"K6Z92Zea7jyKJYySojaJ58Jt2OegA73fJ6gLWelCKrpY6Z+QVs7pXvh8IbUdSqJoWkAJK1o4NQ6E0iZM",
	"ajfIwfHjcom8JUuFJUYG6kgA8HOA01weMka+ETZ5hBQZR2Bj4AMOzH5Q8dmUq2OAlD7hEw9j4xUR/Q3p",
	"h30UqO+EUVW5y1WM+BvzwAF8KopWsuhFVOMwTMg5c2zuipeOzXldvB1kkCENFYpePjQfevNgTNHY45qi",
	"K/+oNZGQcJPVxNJsADotau+BeKG2Gb1QTuoii+3C0Xvy7QK+l04dTMpFd8+whdpiOBdeLRQrfwCWcTgC",
	"GJHtZSsM0iv2G5OzCJh90+6Xc1NUaJBkvKG1IZcxQW/K1COy5Ri53I/Sy90IgJ4Zqq3V4M0SB80HXfFk",
	"eJm3t9q8TZsanoWljv/YEUru0gj+hvaxbkK4v7SJ/8aTi4UT9Uky4Q0tS7fJUEidK8o6eEyCwj45dIDY",
	"g9VXfTkwidZurFcXrxHWUqzEMd+hU3KINgMloBKcdUTT7DIVKeB0ecB7/CJ0i4x1uHtc7h5EAYQaVsJY",
	"aJ1GIS7otzDHc0yfrNRyfHW20ku3vtdKNZc/uc2xY2eZn3wFGIG/FNrYDD1uySW4Rt8YNCJ945qmJdBu",
	"iCIVGxBFmuPitJewywpR1ml69fN+98JN+0Nz0Zh6gbeYkBSgtcDiGMnA5T1TU2z73gW/pAW/5He23mmn",
	"wTV1E2tHLt05fifnosfA9rGDBAGmiGO4a6Mo3cMgowfnQ+4YSaNRTMvJPm/D4DAVYeyDUWrh2fvYzU8j",
	"JdcSpQFMvxBUqxUUIb1Z8IfJKIlcqeQqquJUVfty5p0wSl2Hmef2JK3zYfgwFoQfifuZkAVs09DHWgFC",
	"3r6sw4R7OMkKJKUrSZuFkqiJQ/yxRWSr+8S+0P4DgGQQ9JueM7uNTqZdarYTN6AEXnidxEBY3/5jOdwQ",
	"j7r5WPh0J/Pp/iOEAyJNCRsVNhmmIRhhwLyqRLHtOZ5o1FEjGD/KujwibSFr8YMdwEA3CDpJcJ1U2j7U",
	"2hvYT1HnPXVaGcVe+8BiR9889w/wi1qjB6MT2TzM297oahPX/t3PF1ZpvgLvhcoIpFsNgcs5Bg1RVnTD",
	"rKBwkkIslxB7X8xNPAcd4AY29mIC6SaILO2iqYW0XzxNkdEB6mlhPIyyNMUkaGHMJ/9m6OUKMn1kSmqu",
	"hGhrbuCqSj7X/w522c+8rJ2SIbRpw3O926l7+R6x61eb72CHIx+MenWAHdgVtDy9BqTBlKW/+WSiBNb3",
	"TCfFP6qXnS08YqfO0rt0R1vjizKME397y3SKFnSXcpuD0QZJOFim7MZFOjbBnR7oIr5Pyoc2QRSHZZBI",
	"3o+nEiaUsBxeRU0uikO0+wZ4GYgXlzP7OJ/dLhIgdZv5EQ/g+lVzgSbxjJGm5BnuBPYciXJeVVpd8TLz",
	"8RJjl79WV/7yx+YhvOITazJpyn7z9dnLVx78j/NZXgLXWWMJGF0Vtqt+N6uiMg77rxLK9u0NnWQpija/",
	"ycgcx1hcY2bvnrFpUBSljZ+JjqKPuVimA94P8j4f6kNL3BPyA1UT8dP6PCngpxvkw6+4KIOzMUA7EpyO",
	"i5tWWSfJFeIBbh0sFMV8ZXfKbganO306Wuo6wJNwrh8xNWVa45A+cSWyIh/8w+9cevpG6Q7z9y8Tk8FD",
	"v55Y5YRswuNIrHaoX9kXpk4YCV5/W/3NncaHD+Oj9vDhnP2t9B8iAPH3hf8d9YuHD5Pew6QZyzEJtFJJ",
	"voEHzSuL0Y34tAq4hOtpF/TZ1aaRLNU4GTYUSlFAAd3XHnvXWnh8Fv6XAkpwP51MUdLjTSd0x8BMOUEX",
	"Yy8RmyDTDZXMNEzJfkw1PoJ1pIXM3pdkIGfs8AjJeoMOzMyUIk+HdsiFcexVUjCla8yw8Yi11o1Yi5HY",
	"XFmLaCzXbErO1B6Q0RxJZJpk2tYWdwvlj3ctxT9qYKJwWs1SgMZ7rXfVBeUARx0IpGm7mB+Y/FTt8Lex",
	"g+zxNwVb0D4jyF7/3YvGpxQWmir6c2QEeDzjgHHvid729OGpmV6zrbshmNP0mCml0wOj8866kTmSpdCF",
	"yZZa/QJpRwj6jxKJMILjU6CZ9xeQqci9PktpnMptRfd29kPbPV03Htv4W+vCYdFN1bGbXKbpU33cRt5E",
	"6TXpdM0eyWNKWBxh0H0aMMJa8HhFwbBYBiVEH3FJ54myQHRemKVPZfyW85TGb0+lh3nw/rXk1wueqhHj",
	"dCEHU7S9nTgpq1joHDbANDkOaHYWRXA3bQVlkqtAtz6IYVbaG+o1NO1kjaZVYJCiYtVlTmEKpVGJYWp5",
	"zSVVEXf9iF/53gbIBe96XSuNeSBNOqSrgFxskubYd+/eFvkwfKcQK0EFsmsDUQVmPxCjZJNIRb6KdZO5",
	"w6PmfMkezaMy8H43CnEljFiUgC0eU4sFN3hdNu7wpotbHki7Ntj8yYTm61oWGgq7NoRYo1ije6KQ1wQm",
	"LsBeA0j2CNs9/pLdx5BMI67ggcOiF4Jmzx5/iQE19Mej1C3rC5zvY9kF8uwQrJ2mY4xJpTEck/SjpqOv",
	"lxrgFxi/HfacJuo65SxhS3+hHD5L+y4sHa8+WvHem8rtgeQrSD/52BxYJvVFAsEIgR6qJTkYwFitdkzY",
	"5JI2YLljeSPPyB1HJTBYrjYbYTc+FtCojSPRtmIzTRqGw9pmoQRVgCt8xJDaKkQU9sxnn1gz4puRZ2AY",
	"+PwDun1jtM4Zp3yipWiD3UMJUHYe0hVjTa6mFBfhxs3llo7iKca+L1mlhbRoUqntMvuT07Q1zx1HPRkD",
	"N1t88TRR26pb/kUeB/gnx7sGA/oqjXo9QvZBDPJ92X2pZLZxTKp40KZtiA76aOxvOspzLNR0/9BThWk3",
	"SjZKbnWH3HjE/G9FeHLPgLckxWY9R9Hj0Sv75JRZ6zR58Nrt0E+vX3rBZaN0qgZBe9y9EKPBagFX+Agv",
	"vUluzFvuhS4n7cJtoP9tQ6qCFBtJeuEsJ3WLyEm67/29Uwx+/r5Npo6+Wnrc2DMrKp0woHpT4CcOYDzO",
	"kNd3CVMMGn4bwdxktOEoQ6yMBPRTxH7T57cIQeqDRHvesWE+/hvTTq1H1eDhQwT64cO5l6z/9qT7mdj7",
	"w4fpnMZJK577tcXCbZRs7Jvaw69UwqYWCiE2MUo+5ULCpjl2SbkPjgku/FBz1i069+mliLt5MpYOYE2f",
	"gnfv3uKXgAf8o4+I35hZ4ga2Dx/GD3u36GaSZIrmexQ6z9lXajuVcHp3UCCefwIUjaBkosUPVzIoKpqM",
	"ADgYghLRqBt1AaVyemtcZyh2Efx+8OwWP9+D7VqUxc9turjeRaK5zNfJwOOF6/hXktE7VzCxymTpkjWX",
	"EsrkcKTb/jXowEMtmf9dTZ1nI+TEtv2itrTc3uJawLtgBqDChA69wpZughir3UxcTaaHcqUKhvO0dTJa",
	"5jisDp2qypl4Mo3DbmrrQ2HxebnPYbQUJUZ2pl3R2DLT3I7k5MIS6qFkkRsHK5obMjPQ6KAZFxu8mA3f",
	"VCXgybwCzVfYVUnodcesbDhyVASDmcp9wpaYA0MxW2vJ1HIZLQOkFRrK3ZxV3Bga5JFbFmxx7tmzx48e",
	"JS1piJ0JKyUshmX+2C7l8Sk2oS++bhNVFzgK2MOwfmwp6piNHRKOL1P5jxqMTfFU/ECPYdHx6m5tKlHZ",
	"lFM9Yd9iMiVHxJ3s+WgBDXmJuzk666pUvJhjvuQ3X5+9ZDQr9aGq9FQic4UGwC75Jz0203OWhmRRI8l4",
	"po+zPzuIW7WxWVPRMpXu0LVoa26KXhgP2vFi7JywF2SVNcFAR5MwzLqtN1BEBTRJiUficP+xludrtE12",
	"JKBxXjm9tmtgZ60zKHrQ2BRUQobt4PblXam665wpuwZ9LQzgI3+4gm6GxSbdqDe3h4yL3eXpWkqilJMj",
	"hNGmfNKxaA/AkSQb4hSSkPUQf6Rliko8H1vq9gJ7pZ939Orm9gIJQr6+kLWbfe/9FTmXSoocqyukJGnM",
	"BjfN8zmhEEXaZWlm/oQmDleyWm/zvNhjcbR+b2CEHnHDKILoq9tUog7608LWV3FbgTWes0ExD8WzvY9N",
	"SAO+QJYjophPKp2Ik0q+rWhiMo4kI0z0NGLh/MZ9+8HbvzHPxqWQaOnyaPP6GXnBSiPQ2S2ZsGylwPj1",
	"dB8Imbeuzwkmfixg+/7kpVqJ/EKscAyKzHPLpjDU4VBnISjVB4G6ts9dW5+Ov/m5E2FGk55VlZ90vLR6",
	"UpC0WzmK4FQoVIhNiZDbjB+Ptofc9kaT433qCA2uMBAOKryHB4TRlOfujvK10y2JorAFo0eayZy8QibA",
	"eClk8MqmL4g8eSXgxuB5Helncs0t6Q6TeNob4OXImwp89Exu/dsO1S9G4FCCawxzjG9jW1l8hHE0DVqJ",
	"n8sdC4fCUXckTDznZRONnagTjlKVF6IKfK/UqxyeYhyOcWfhFWYHXQdfBDbdscDHsTfRWNrDRV2swGa8",
	"KFLZsr7Crwy/hndnsIW8bupaNQ8Ou2nPh9TmJ8qVNPVmz1yhwS2ni0rxJ6ih+QhFs8OYvGexw39TRZ3G",
	"d8bHYR/90DcEXRfH5fofPlxOSb2OpjMjVtl0TOCdcnt0tFPfjNDb/ndK6eEF8D/FA98el4v3KMXfvnYX",
	"R5wLeBDyTldLk6oXw8sVfg85lJokk12uhFfZoHQZRj3g5iW2rAd8aJgE/IqXI4/rY18J3a/kPxh7Yp+P",
	"ZoTg1mf8spztZUGjWZQo/LjnfRm6EMdCjini+O68Fn6texE67rv7ruOpo7CzllmMeuhu5kRrN/hYL9p3",
	"V2NZF0LpD/welxjxUTxzn1keroSqQ0BXCKsOKiH96rP6dEqJjKw/+Vjht/ZajPpY3viSuLRMr5N/9zN5",
	"YRlIq3f/BB6Xwab369QkpF0yT7VNWFNNcVJ1xc6tOKUsTqoCi5cNg62MWEuHlgYVbQZk9WKKODDAx8f5",
	"7Lw46sJMVfGZ0SipY/dSrNYWiwD8BXgB+tWBIgdtYQM8YpUyoi1qWrrBfFbZNQ53MvX9giNgERdpGI4V",
	"4lqvILdYybYNrtMAx5RscJMFp88fxQ7G1enmmYevcbCvsMGwfO2BO36QiynKJ0alP0+mp/E/a6Ky6VHZ",
	"NTdtBpjeM+zJj0GXS8gx0fLe3Ff/tQYZ5VWaB7sMwrKMUmGJ5mkUpgo/3urYArQvNdVeeKKSPbcGZ+xp",
	"/CXs7hnWoYZkLdLmXeBNchEjBsgFFtJSjxmSfdSYMA1lIBZCSLDP7tzW2xhNIx1lcrvhXIEk3cXRZnfb",
	"M2W6jvqkuVzXozJJ4iufsfRYwzLM4/rHC6x6bXyAHG9yGcdaOjsf1uK59rmQMVNZ4zsJWZHBhN9CWkKa",
	"pRSXviQBYoU8VddcF6HFneSZortJpIFeNjOL9k3IMMghUd0Bn1flpXJiRDb2Rq37DKMJOLxnKDK0zQmE",
	"cC1Baygal0ipDGRWhTck++DYhwoKf70REsxoRSUCbjSb9us2XThWluOYPZv7qNd4gUzDhjvodJTUe3zO",
	"fch+Tt/Du/5QWeyghamh18MlbsNrIGEGSIypfsn8bXk4X8BNjE1CStBZ8Dz1M3zLbpI3TOVZ1Dld0PHB",
	"aAxyk9Px7GElSTtNPlxlT0eI3t1fwu6UlKBQGzjsYAw0SU4EepTDtLfJd2p+Mym4V3cC3m+bmq5SqsxG",
	"nB3nw7TkfYq/FPklYFrBJsR9pOw7u4829sabfb3ehTTcVQUSigcnjJ1JeqcUHNvdioW9yeU9u2/+Lc5a",
	"1FQpwBvVTt7J9OsMzOGvb8nNwjD7eZgBx+puORUNciDp9VaOhdxcY77/bmHQk6la+dDV3C9M3xIVQZGS",
	"SS7IY/UcD3rKcIRZFaL0H+jI5Mx7upgpVSqW9yaZH9xQaUzFkyFAFuSUBAQNFH7wJAKSpdYTp5Cy6fk8",
	"emrJNLRO5JsmFBxWhU9p9P2Zm1m6/G6pNHTqu7velDy0efiCmTnxPwthNde7m6T9G1SlH1hPRrF8MByr",
	"icRqF9JGYw1xWJbqOkNmlTWlM1KqrWtnupdxqOPW9nOnegFRXBc3XlDbsTUvWK60hjzukX5cSVBtlIas",
	"VBjmlfJAL62Tuzf4yEuyUq2YqnJVAJWgSVPQ2Fy1lBzFJoiiapIoINrBB8jUJ6LjiVO6O5X8SBmKWqsj",
	"yvHnQI/h20RRtOiMfJkjEctgfGIojyFqPIQXCYcyqfRtiWnevBRbpBvQqSO/ZFbXMGe+Rb/stj/4XAPb",
	"CGMIlIaWrkVZ4lt0sY08r03gQhq1I2LvOYZVXgmMvenmJSBpuHJ3XpOsIeYBF3EmJWbXWtWrdZSzuoEz",
	"qLy69gpxPMpPpsbwKHxB5qZ4yjbKWK9p0kjtktuQs/u5klarsuwapUhEX3lL+/d8e5bn9qVSlwueXz5A",
	"vVYq26y0mIcn2/3gwHYm3ctW1r2AM6qQfjj7L7XDUDlPtJMZZI/FHV0rPgLz/WEOetjmfjZcWH9dXWaa",
	"VmPOJONWbUSePlO/r2i70Ri5FItKpkGjco2UuAKb4WGPL6smuAJZ5BDNIHmy3twZ84zAO5mR3bj/ogTe",
	"H5ctwTOakYtyyFy8FJXlo7JeDwCElJ4+21pTjcdYEmu4ilpR/gF0kfcBnXirYCTS7WBzI9w5UBZuBdQg",
	"+rEB8D4ZH+aUro4iKRdqG74/aPPZ3Qj4j/upvMM8xkK8LlrS0hTkFXLfjHCEdNbsvfFQb/DZ+2JqVFRT",
	"j3fiDR8BMB4n1YFhUrTUsWAsuSihyFLlHM8bG9U80rT906x+lXVhPCfPeR2qKbqxaw0+FwuJ+Lrr/6q4",
	"IyXVNB9akmUBW6B3Hb+AVlQmcR75X6CkKoo9Y4CqshKuoBM+5hPE1ChqiisIfU3TmRUAFXoj+zayVFxU",
	"fJf3DCd+7VkUWTMFu0lLCiGWdoodMJMkjTpbmdExMVOPkoPoShQ17+DPHCtydM2A7ignUDXQEbKgR06d",
	"5ica4XUY4Cz0T4kyARPvp/Gho1lQGnX7GNDBOMnajJ16mQ6TjLMfNQ4WnK1oHLFE4i3fMBW/luMGySHJ",
	"t+rWxH0SSkaI/XoLOUo1Xt+Bwms8I04Kn/UEqV0CFKQVuC4Ja/saJJMqqlp5zU2jqrRpGcMPNDE2EtJr",
	"0zdwKrfRjLffWYaDMdPLzzaqSOiGTm9unv9NTuLegzg6XopGDPjnf3vsX4G6vdqBDbA6uHT76WR/rPvo",
	"bzHPxedsUYeBylJdUxnKWA99AcEPStQXXEBeLBfNtRyiNuc+Y2jf1CGiePUN3zGl8R+ndf6j5qVY7pDP",
	"EPihGzNr7kjIO14pIsBHgbqJ94tX8wBYsLaoMBWtW0wdMxpu50aJgHYXeagXpNiGX0K8DRjsQPwzt45x",
	"mnqBlgt3Zfe2c4gFv/iQomXDi1jTx9yT3crsIRux6/3/tW/h4qlCyriq5HkoOuqrHnX5DBYWDsRl17DZ",
	"/1hyyNcCCTTFilui1eF1fXEDk+mRrCv1AmGsoksH7EER10Exm1stY6Llt1e2Y88z00lLuetdmBp1MwA6",
	"Lv14CPy4EuanwX8yLezYMqaA/8+C95HatzG8VOb2E2C5k4EjAStZqxdqm2lYmkMBJmSuduq8bnN3BBOr",
	"kLkGbiji5vxHr3i2WU+FdIowxYQ2Ps1mlAKWQrbMUsiqtgk9BpOfyl2EsNjoj2gdcaGNSQlOmLzi5Y9X",
	"oLUoxjbOnQ6qEhlXnQiODt83YcJo7tThAMK0Ohy+z2zN6HEzd4FTXSsK1zSWy4LrIm4uJMtBu3ufXfOd",
	"ublHqXEOHPIp8Uia6WYNiLxLSNoESLnzTuFb+nsaAPkdOn4mOGwwLjjhrCHTjlUj/pkhDL8Lh82Gb7NS",
	"rfAV4ciB8Olu0cNHKqCSaAYn+WzausM8RvwC+6fBTP+eEVmFs06ZYv+5/xG3EtXIn6Swe08+2Sj7zzop",
	"7pYOZkCqXLXB/0Qsw/OYeonrk6/Er3GDsBmeqgTag2gTYcQ/1LWLj+wihkH4Z9yxEXx6BbVupEXqvS9Z",
	"BjK0GJg94f1g2lB2nvvwrKEpbWBqIKTM/WvpIy1tZJ8P99IIeFTu3p/17rRNyIwb55iyc/vfR2eVqrJ8",
	"SswnFQMpvJvAQ9qFcYQ+IifAyLqb8BjTlMfp5D3q1Mk5tvLeaJ2eQ96uKt+n9I+ZiUY4etcFoZbIy6gY",
	"PFq38CVPY0yZ99+Ydc1gDZNgnGnIa41m4mu+O1zJbCRj9MVfzj5//OSvTz7/grkGrBArMG0i814lsDYu",
	"UMi+3efTRgIOlmfTmxCyDxDigv8xPKpqNsWfNeK2pk0pOqiDdox9OXEBJI5jogLVjfYKx2lD+/+5tiu1",
	"yDvfsRQKfv0906os04UkGrkq4UBJ7VbkQnEaSAXaCGMdI+x6QIVtI6LNGs2DmPv3irLJKJlDsB97KhB2",
	"JOQqtZCxgFrkZ/i223uNGGyr0vMq8vTsW5fX08hCh0IjRsUsgFWq8qK9WLIURPiCSEcva73hEy3iUYxs",
	"w2wpWjZFiD7yPE16cQ3u/dy+Wx/Wpjm928SEeBEO5Q1Ic8w/MZ634CacpDXt/9Pwj0QihjvjGs1yfw1e",
	"kdQPblbnfxJow0f5CfJAAEZe23beSUYPxaJExJq8BOhPCA7kvvjxfetYPvgsBCEJHQ6AFz+fbds1Lxk8",
	"OL9xRt/vG6RES3k/Rgmd5R96kRtYb3ORRFvkjSbWgiG2pIZiYfTc2jxvXjGPaCWDx85aKcucZlqWiUfS",
	"ZMfBMxUTjlMJ9BUvPz3X+EZoY88QH1C8Hn8aFb+UjZFMqDQ3y9P3kk+aO3oVe3dTy1f4MPu/wO1R8p7z",
	"Q3kn/OA2Q+MOFsFfhVuB3nqzaxyTgqwef8EWvthGpSEXpu/cvw7CSfMwFLRY+oBW2NoDL1EPrfNnZW9B",
	"xssQicN+iNxbjc/eQ9ge0d+YqYyc3CSVp6hvQBYJ/KV4VFzv98B1ccvCDDdL+xIlcDsy7cuwkvHU5VFq",
	"E3fp1AaG65x8W3dwm7io27VNzVk0ub7Du3dv7WJKqqF0LQbXHXMd3UlRhqNKMvwKWY4IR34MP2+KYn4e",
	"y3tLuV1HcnP39qMW5cGAlU6m9Y/z2QokGGEwl/hffe2YT3uXBggo88LwqBKst0kXQ4hJrLUzeTRVlEN9",
	"Qvp03y2R8xpfNea1FnaHpYiDAU38NZmP6dsmt4fPDdP40vzdZ9UlNOXg20wgtQm367eKl3gfkYtPultI",
	"lSfsa8rw7Q/Kn+8t/h0++9PT4tFnj/998adHnz/K4ennXz56xL98yh9/+dljePKnz58+gsfLL75cPCme",
	"PH2yePrk6Reff5l/9vTx4ukXX/77PceHHMgEaEjt/2z2v7KzcqWys1fn2RsHbIsTXonvwO0N6spLhaUy",
	"HVJzPImw4aKcPQs//f/hhJ3katMOH36d+fpMs7W1lXl2enp9fX0Sdzld4dP/zKo6X5+GebCAYUdeeXXe",
	"xOhTHA7uaGs9xk31pHCG315/ffGGnb06P2kJZvZs9ujk0cljXy1b8krMns0+w5/w9Kxx308xv+ap8anz",
	"T9u3Wkm/3WsMWQ/CuV5Bwe43r27+rfHcmgfh8c5SlHhl/N0QMTarOC+QuHzZ0xlWXcNgLATryaNHYS+8",
	"pBNdOKf4+uPZh1lbLr8vTAyQ+qYFOAlZW0ZyuOif5KVU15JhMkA6QPVmw/WOVtDBRjQ4bhNfGTSya3HF",
	"Lczeu959nFeVL1gwhnKsctU95aEzEkiT8d6dMEqE78sOmBTKh8USbon9vckhB5MldgcbvXIwh/Q5TUJF",
	"7xDyOEOfMSGsOSNkdhggej6r6gQ6v8aHNWYfzuZREn6CRpVFg/EBRl/V/49g1JGuv5tmzz64v9bAS0ys",
	"5f7YOELNwycNvNj5/5trvlqBPvHrdD9dPTkNWsjpB58x5eO+b6dxRNjph05imeJAzxDxdKjJ6YdQhXv/",
	"gJ0KzD7WNOowEdB9zU4XWCZralOIVze+FKR5c/oBFfDR30+9FTX9EQ0hdMOehgRNIy0pFUf6YweFH+zW",
	"LWT/cK5NNF7Obb6uq9MP+B8k22hFlNn31G7lKQaOnH7oIMJ/HiCi+3vbPW5xtVEFBODUckmly/d9Pv1A",
	"/0YTwbYCLZwWitm0/K+U9fAUy03uhj/vZJ78cbiOTsa3A5c5ZhM0IZqqmygueX30s8+Z2zK7abls+jnv",
	"hgL2UJLat7KP89nTO+TK3UzBCWC+4gULiQ1w7sefbu5zSVHdTrQkERghePrpIOhsH/sOduwHZdk3aKv5",
	"OJ99/il34lw6zZGXQaC7oeg37fj0r1EnezfN5IoEFUXJLrpH7awoBkRPOiQY+5XC23UMYxuzqryXtkVa",
	"q0IL6ZYwnyY2D9NHUpKzIEhIVcAsVm6truHjLXlCL76La3ueMCmjbwQfeixDzf8I1GQuxH70C408NH8c",
	"IuHzF2HS9n3EHzzlD57S8JTPH3326aa/AH0lcmBvYFMpzbUod+wn2Ty8uTGPOyuKZALZ7tE/yOPms22W",
	"qwJWIDPPwLKFKna+Is+sM8ElkLVsIMicButSR2MY4Z7BbpWSVtpw8Nmzt6mwCP+8saoXpcgZWdbRtFRx",
	"u44sP01Gzy7zm++xTMwTWeNZIcq6yeZgr5V/LT28UCJri1XM/EPjxYMHUdgduxayUNcPTgK4/6gB+byH",
	"N0wzSwAYxfgOCyS1DkMH4ACssfnQ0zgFO3smf8lvNnfJj536/a9tg2oy5v3nxY8/RK8RydJAAUH4Fo5I",
	"Fx8uaIUB+dccI0KpkOJzsgGVO3xVa7mtTaeG28kf99AfvP/2vP/bJoUyVW+zWJZpyJKiu+BkksCb5O0f",
	"On96u8WMwrFTiY/d74yzFVbeHF5Qix07fzHQXqlb/0r4aodNe7dCgt/3QTyK8Y+wl30ijVvIStkmKJ0W",
	"9YeQ+YeQeSvFdfLhmaK7Ji1LVA+XD/SxeSht23n4g8nLMcRrAMoU+9NvenzvZOOHtq2ULYuSrEPBog+U",
	"naKP5j9YxB8s4nYs4ltIHEY8tZ5pJIjuOFvXVIaBqZSKTohlkDpC87rkOnoQfMiEfYYjplXBX4VrfGqD",
	"XRJXZK/DdwOCAmYTG3i3Nrw/WN4fLO/3w/LODjOarmBya6vXJew2vGpsXWZd20JdRx5yhIWC3Yc+PlL8",
	"+3+fXnNhs6XSvmQPX1rQw84WeHnq63P3fm1LYg6+YJ3P6Mc4GV3y11PedVp2HeeO9Y51HHjVU1+943ik",
	"UcihED63MXtxDByy/Sb67e17x7IN6KtwI7QhXc9OTzGpzloZezr7OP/QC/eKP75vyONDc494MvmIdKG0",
	"WAnJy8zHRmRt2NaTk0ezj/83AAD//4wrLjxnHQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
