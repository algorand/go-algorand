// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Cp8/fv5/AQAA//85p88tztAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
