// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
