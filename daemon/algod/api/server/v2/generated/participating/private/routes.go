// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9/5PbtpI4+K+gtFvl2CfO2I6TffHVq71JnOTNxklcHid7u7YvgciWhDcUwADgjBSf",
	"//dPoRsgQRKUqJmJnVeVn+wRSaDRaDT6e7+b5WpTKQnSmtnTd7OKa74BCxr/4nmuamkzUbi/CjC5FpUV",
	"Ss6ehmfMWC3kajafCfdrxe16Np9JvoH2Hff9fKbht1poKGZPra5hPjP5GjbcDWx3lXu7GWmbrVTmhzij",
	"Ic6fzd7vecCLQoMxQyh/lOWOCZmXdQHMai4Nz90jw66FXTO7Fob5j5mQTElgasnsuvMyWwooC3MSFvlb",
	"DXoXrdJPPr6k9y2ImVYlDOH8Sm0WQkKAChqgmg1hVrEClvjSmlvmZnCwhhetYga4ztdsqfQBUAmIGF6Q",
	"9Wb29PXMgCxA427lIK7wv0sN8DtklusV2NnbeWpxSws6s2KTWNq5x74GU5fWMHwX17gSVyCZ++qEfV8b",
	"yxbAuGQvv/mKffrpp1+4hWy4tVB4IhtdVTt7vCb6fPZ0VnAL4fGQ1ni5UprLImvef/nNVzj/hV/g1Le4",
	"MZA+LGfuCTt/NraA8GGChIS0sMJ96FC/+yJxKNqfF7BUGibuCb18p5sSz/9RdyXnNl9XSkib2BeGTxk9",
	"TvKw6PN9PKwBoPN+5TCl3aCvH2ZfvH33aP7o4ft/e32W/a//87NP309c/lfNuAcwkHwxr7UGme+ylQaO",
	"p2XN5RAfLz09mLWqy4Kt+RVuPt8gq/ffMvctsc4rXtaOTkSu1Vm5UoZxT0YFLHldWhYmZrUsHZtyo3lq",
	"Z8KwSqsrUUAxd9z3ei3yNcu5oSHwPXYtytLRYG2gGKO19Or2HKb3MUocXDfCBy7oz4uMdl0HMAFb5AZZ",
	"XioDmVUHrqdw43BZsPhCae8qc9xlxV6tgeHk7gFdtog76Wi6LHfM4r4WjBvGWbia5kws2U7V7Bo3pxSX",
	"+L1fjcPahjmk4eZ07lF3eMfQN0BGAnkLpUrgEpEXzt0QZXIpVrUGw67XYNf+ztNgKiUNMLX4J+TWbft/",
	"Xfz4A1OafQ/G8BW84PklA5mrAooTdr5kUtmINDwtIQ7dl2Pr8HClLvl/GuVoYmNWFc8v0zd6KTYisarv",
	"+VZs6g2T9WYB2m1puEKsYhpsreUYQDTiAVLc8O1w0le6ljnufzttR5Zz1CZMVfIdImzDt39/OPfgGMbL",
	"klUgCyFXzG7lqBzn5j4MXqZVLYsJYo51expdrKaCXCwFFKwZZQ8kfppD8Ah5HDyt8BWBEwYZBaeZ5QA4",
	"ErYJmnGn2z1hFV9BRDIn7CfP3PCpVZcgG0Jnix0+qjRcCVWb5qMRGHHq/RK4VBaySsNSJGjswqPDMRh6",
	"x3PgjZeBciUtFxIKx5wRaGWBmNUoTNGE+/Wd4S2+4AY+fzJ2x7dPJ+7+UvV3fe+OT9ptfCmjI5m4Ot1T",
	"f2DTklXn+wn6YTy3EauMfh5spFi9crfNUpR4E/3T7V9AQ22QCXQQEe4mI1aS21rD0zfygfuLZezCcllw",
	"XbhfNvTT93VpxYVYuZ9K+um5Won8QqxGkNnAmlS48LMN/ePGS7Nju03qFc+VuqyreEF5R3Fd7Nj5s7FN",
	"pjGPJcyzRtuNFY9X26CMHPuF3TYbOQLkKO4q7l68hJ0GBy3Pl/jPdon0xJf6d/dPVZXua1stU6h1dOyv",
	"ZDQfeLPCWVWVIucOiS/9Y/fUMQEgRYK3b5zihfr0XQRipVUF2goalFdVVqqcl5mx3OJI/65hOXs6+7fT",
	"1v5ySp+b02jy5+6rC/zIiawkBmW8qo4Y44UTfcweZuEYND5CNkFsD4UmIWkTHSkJx4JLuOLSnrQqS4cf",
	"NAf4tZ+pxTdJO4Tvngo2inBGLy7AkARML94zLEI9Q7QyRCsKpKtSLZofPjmrqhaD+PysqggfKD2CQMEM",
	"tsJYcx+Xz9uTFM9z/uyEfRuPjaK4kuXOXQ4kari7YelvLX+LNbYlv4Z2xHuG4XYqfeK2JqDBifl3QXGo",
	"VqxV6aSeg7TiXv6HfzcmM/f7pI//NUgsxu04caGi5TFHOg7+Eik3n/QoZ0g43txzws76396MbNwoaYK5",
	"Ea3s3U8adw8eGxRea14RgP4J3aVCopJGLxGst+SmExldEuboDEe0hlDd+KwdPA9JSJAUejB8War88h/c",
	"rO/gzC/CWMPjh9OwNfACNFtzsz6ZpaSM+Hi1o005Yu5FVPDZIprqpFnic7Uyd7DEUq3wX2FhYw7tRJgY",
	"pQxaANea7wZLxVEnMRJ3dumoum/YUqsNU7VTqRyjEFK6/1UVy3lZmqAokEWV2FXAx11t94GtLrjl0Vb7",
	"laXFNCJF/A4vAdAJXe5H/A8vmXvseJ27CmnYE/YKGboh9uadLgW7XgPhgWZyL6BVRrENGTxYxfPLo6D8",
	"qp08TbeTdvNrsrF4ivWLaHbo1VYU5q62CQcb26tYYD9/RhpuoO/eGT1AyNFcUxDwSlWshCso+yAQC8fR",
	"CCFqe+d88ku1TcH0pdoOeKTawp3shBtnOvdQ22ceMqUPYx7HnoJ0t0Cn2xhklzIWCd0srfX+bKH0za6n",
	"HtOSrPVJMO5GjW7neQ9J+GpdZf5sJuya9EJvoNYNvP9W6Q+fwlgHCxeW/wFYMG7Uu8BCd6C7xoLaVKKE",
	"OyD9dVIqWHADnz5mF/84++zR418ef/a5I8lKq5XmG7bYWTDsE6+8M2N3JdwfrgzV57q06dE/fxIs2d1x",
	"U+MYVescNrwaDkUWcrp46TXm3htirYtmXHUD4CSOCO5qI7Qzcv440J4J40TwzeJONmMMYUU7S8E8JAUc",
	"JKZjl9dOs4uXqHe6vgtbB2itdPLqqrSyKldldgXaCJVwt73wbzD/RtB/qv7vBC275oa5udE3UEuUOBOU",
	"ZbdyOt+noV9tZYubvZyf1ptYnZ93yr50kR9MzYZVoDO7layARb3qqMooeXJW4Id4R38LluQWsYELyzfV",
	"j8vl3dgSFA6U0OnFBoybidEbTmowkCtJoTIH1Hc/6hT09BETbLh2HACPkYudzNEQfRfHdtyysRESvWJm",
	"J/PIzIF6AhSrDlne3pwxhg6a6p5JgOPQ8RwfoyXsGZSWf6P0q1bs+1arurpzIa8/59TlcL8Yb2sr3LfB",
	"yCLkquyGZ60c7CepNX6UBX0Vjq9fA0KPFPlcrNY20rNeaKWWdw9japYUoPiAtPbSfTPU3X9QhWMmtjZ3",
	"IIK1g7UcztFtzNf4QtWWcSZVAbj5tUkLZyMBPRhJgAEQNpb37JoUzwU46sp57VZbVwzd+4P7ov0w4zmd",
	"0AxRY0acm41Xmt6i6ShYpNTAix1bAEimFt6D6H2buEiOsQk2iDdeNEzwiw5clVY5GANF5i2XB0EL79HV",
	"YffgCQFHgJtZmFFsyfWtgb28OgjnJewyjKQx7JPvfjb3PwK8VlleHkAsvpNCb2P38NafIdTTpt9HcP3J",
	"Y7LjGli4V5hVKM2WYGEMhUfhZHT/+hANdvH2aLkCjQ7bP5TiwyS3I6AG1D+Y3m8LbV2NxId69dZJeG7D",
	"JJcqCFapwUpubHaILbuXOjq4W0HECVOcGAceEbyec2MpyEDIAm2BdJ3gPCSEuSnGAR5VQ9zIPwcNZDh2",
	"7u5BaWrTqCOmriqlLRSpNUjY7pnrB9g2c6llNHaj81jFagOHRh7DUjS+RxathBDEbeOL81E4w8Whx8rd",
	"87skKjtAtIjYB8hFeCvCbhwjNwKIMC2iiXCE6VFOE5g3nxmrqspxC5vVsvluDE0X9PaZ/al9d0hc3Lb3",
	"dqHAYGief99Dfk2YpejINTfMw8E2/NLJHmgGoWiIIczuMGZGyByyfZSPKp57Kz4CBw9pXa00LyAroOS7",
	"4aA/0WNGj/cNgDveqrvKQkZhbulNbyk5RBXtGVrheCYlPDJ8wnJ3BJ0q0BKI//rAyAXg2Cnm5OnoXjMU",
	"zpXcojAeLpu2OjEi3oZXyrod9/SAIHuOPgXgETw0Q98cFfhx1uqe/Sn+B4yfoJEjjp9kB2ZsCe34Ry1g",
	"xIbqMwii89Jj7z0OnGSbo2zsAB8ZO7IjBt0XXFuRiwp1ne9gd+eqX3+CpBOTFWC5KKFg0QNSA6v4e0YB",
	"Wv0xb6YKTrK9DcEfGN8SyymFQZGnC/wl7FDnfkGRv5Gp4y502cSo7n7ikiGgIZ7QieDxK7DluS13TlCz",
	"a9ixa9DATL3YCGspor+r6lpVZfEASb/Gnhm9VzPpU9zrZr3AoaLlDbdiPiOdYD98r3qKQQcdXheolCon",
	"WMgGyEhCMMmPzyrldl345IIQXh4oqQOkZ9ro0m6u/3umg2ZcAfsfVbOcS1S5aguNTKM0CgooQLoZnAjW",
	"zOlDf1oMQQkbIE0Snzx40F/4gwd+z4VhS7gOGTnuxT46HjxAO84LZWzncN2BPdQdt/PE9YEOH3fxeS2k",
	"z1MOh574kafs5Ive4I2XyJ0pYzzhuuXfmgH0TuZ2ytpjGpkWdoPjTvLldFz2w3Xjvl+ITV1yexdeK7ji",
	"ZaauQGtRwEFO7icWSn59xcsfm88w2whyR6M5ZDnmyEwcC165byitxo0jpHAHmEJqpwIE5/TVBX10QMVs",
	"oxbFZgOF4BbKHas05EDZJE5yNM1STxjFmeZrLleoMGhVr3ygI42DDL82ZJrRtRwMkRSq7FZmaOROXQA+",
	"uD0kFDlxCrhT6foWclJgrnkzn88hm3IzR3vQ9xgknWTz2ajG65B61Wq8hJxuVtSEy6Aj70X4aSee6EpB",
	"1DnZZ4iveFvcYXKb+8eY7NuhU1AOJ45CL9uHY9GXTt0ud3cg9NBATEOlweAVFZupDD1VyzgD0t9hZmcs",
	"bIaWfPr0l5Hj93JUX1SyFBKyjZKwSyb9Cwnf48PkccJrcuRjFFjGvu3rIB34e2B155lCjbfFL+52/4T2",
	"PVbmG6XvyiVKA04W7yd4IA+62/2UN/WT8rJMuBZ9flSfAZh5U49BaMaNUblAme28MHM6aN4b6ZOpuuh/",
	"0UR938HZ64/b86HFqbdoI4ayYpzlpUALspLG6jq3byRHG1W01ETwU1DGx62WX4VX0mbShBXTD/VGcgx8",
	"ayxXyYCNJSTMNN8ABOOlqVcrMLan6ywB3kj/lpCslsLiXBt3XDI6LxVojEA6oTc3fMeWjiasYr+DVmxR",
	"2670j+l/xoqy9A49Nw1TyzeSW1YCN5Z9L+SrLQ4XnP7hyEqw10pfNlhI3+4rkGCEydJBWt/SUwyw9stf",
	"+2BrDC6mxyFYs81HnrlldkoQ/H+f/OfT12fZ//Ls94fZF//X6dt3T97ffzD48fH7v//9/+/+9On7v9//",
	"z39P7VSAPZWc5iE/f+Y14/NnqP60PqAB7B/M/r8RMksSWRzN0aMt9gkmYnsCut81jtk1vJF2Kx0hXfFS",
	"FI633IQc+jfM4CzS6ehRTWcjesawsNYjlYpbcBmWYDI91nhjKWoY15hOA0WnpM/sxPOyrCVtZZC+Kcsp",
	"xJep5bxJ9aUqQE8Z5oGueQiO9H8+/uzz2bzN32yez+Yz//RtgpJFsU1l6RawTemK/oDgwbhnWMV3Bmya",
	"eyDsyVA6iu2Ih93AZgHarEX14TmFsWKR5nAhd8TbnLbyXFJgvDs/6OLcec+JWn54uK0GKKCy61R1kI6g",
	"hm+1uwnQCzuptLoCOWfiBE76Np/C6Ys+qK8EvsQqFah9qinaUHMOiNACVURYjxcyybCSop9eWoC//M2d",
	"q0N+4BRc/Tkbf2b42yp279uvX7FTzzDNPUoYp6GjFN+EKu2z2DoBSY6bRRk8J2/kG/kMlmh9UPLpG1lw",
	"y08X3IjcnNYG9Je85DKHk5ViT0Ni3DNu+Rs5kLRGy5ZFKYmsqhelyNllrJC05EmlaIYjvHnzmpcr9ebN",
	"20FsxlB98FMl+QtNkDlBWNU284U0Mg3XXKd8X6YppIAjU6WcfbOSkK1qMpCGQh1+/DTP41Vl+gnVw+VX",
	"VemWH5Gh8enCbsuYsUoHWcQJKAQN7u8Pyl8Mml8Hu0ptwLBfN7x6LaR9y7I39cOHnwLrZBj/6q98R5O7",
	"CiZbV0YTvvtGFVw4qZWwtZpnFV+lXGxv3ry2wCvcfZSXN2jjKEuGn3Uym0NgPg7VLiDgY3wDCI6jszRx",
	"cRf0VSiall4CPsItxHecuNE6/m+6X1Gu8423q5cvPdil2q4zd7aTqzKOxMPONLWUVk7ICtEYRqxQW/Vl",
	"pxbA8jXkl74eEGwqu5t3Pg8BP17QDKxDGKoURZl5WKsEHRQLYHVVcC+Kc7nrF40wYG0IK34Jl7B7pdpS",
	"J8dUiegWLTBjBxUpNZIuHbHGx9aP0d98H1WGin1Vhdx/THoMZPG0oYvwzfhBJpH3Dg5xiig6SfVjiOA6",
	"gQgi/hEU3GChbrxbkX5qeU7LWNDNl6gaFXg/86+0ypMPAItXg1Z3er4BLDunrg1bcCe3K18xjRLzIy5W",
	"G76CEQk59hFNTH/v+JVwkEP3XvKmU8v+hTa4b5Ig08uZW3OSUsA9caSCykwv7C/MRG5I75nAQqgeYYsS",
	"xaQmPpKYDtcdXx1VdhwDLU3AoGUrcAQwuhiJJZs1N6GYG9a8C2d5kgzwBxaa2Fde6DyKWIsK2zXFgwLP",
	"7Z/TgXbpiwyFykKhnFCsWk4oDeQkfAyST22HkigAFVDCihZOLwdCaYtetBvk4PhxuSyFBJalgt8iM2h0",
	"zfg5wMnHDxgjCzybPEKKjCOw0b2OA7MfVHw25eoYIKUv2sHD2OiYj/6GdPoYhYM7kUdVjoWLEa9WHjgA",
	"9xGTzf3Vi9vFYZiQc+bY3BUvHZvzGl87yKDKDYqtvZo2PsDj/pg4u8cBQhfLUWuiq+gmq4llpgB0WqDb",
	"A/FCbTPKH01KvIvtwtF7MkIes1lTB5PqCd0zbKG2GDSEVwtFZB+AZRyOAEak4W+FQXrF78ZucwJm37T7",
	"pakUFRokGW/Oa8hlTJyYMvWIBDNGLp9EJYJuBEDP2NHW2/bK70EltSueDC/z9labt6XvQvJR6viPHaHk",
	"Lo3gb2iFaYr6vOhLLEk7RTf2pVvPKBIhU0Tv2MTQSTN0BRkoAZWCrCNEZZcpz6nTbQBvnIvwWWS8wKpJ",
	"XO7uRwFVGlbCWGiN6CFO4mOYJzkWa1RqOb46W+mlW99LpZprityI+GFnmR98BRiRvBTa2Aw9EMkluJe+",
	"MahUf+NeTctK3ZAtKm0sijRvwGkvYZcVoqzT9Orn/e6Zm/aHhiWaeoH8VkgKWFlgKe5kIOeeqSnWd++C",
	"n9OCn/M7W++00+BedRNrRy7dOf5FzkWP8+5jBwkCTBHHcNdGUbqHQUYJuEPuGMlNkY//ZJ/1dXCYijD2",
	"waidkAY8dkfRSMm1RAaDvasQ6CbCClM2qmQ9zIwdOQO8qkSx7dlCadRRjZkfZfAI9f96WMDd9YMdwEA3",
	"Li8Z5typneij/7zN5xQF5FMnwlE4oI91A41aDuWEFrVGo1on2G5YqLMR7Cau/bufL6zSfAXeMJoRSLca",
	"ApdzDBqiMpiGWUEezkIslxAbBM1NjFkd4Ppmn2SziwlElrYa1kLaz5+kyOgA9bQwHkZZmmIStDDmJno1",
	"NLwGsSrSO5tOLtHW3MB6mswg/Q522c9OQ2EVF9q0EWPeEtrlf0fs+tXmO9jhyAcDsRxgB3YF1dSXgDSY",
	"Mgs2jyhxolGB4pquWPShs4VH7NRZepfuaGt8Fd5x4m/DsjtVartLuc3BaP12DpYpu3GRdpe50wNdxPdJ",
	"+dAmiBFjXEyOkcgVTyVM6Fk0vIqa9OhDtPsKeBmIF5czez+f3c45lbrN/IgHcP2iuUCTeMbgJ3JWdHzN",
	"R6KcV5VWV7zMvAtv7PLX6spf/vh68Ph9YGEyTdmvvj57/sKD/34+y0vgOmuUsdFV4XvVv8yqqG7v/qsE",
	"JZZgFSFlPdr8prhm7Pa7XoNvLhHp+4Mq2K1LNzqK3g24TMdgHuR93vtMS9zjhYaqcUK3DhLyQXf9zvyK",
	"izJ4JgK0I/GSuLhppdSTXCEe4Nb+6ygMIbtTdjM43enT0VLXAZ6Ec/2I1dLSGof0tdSQFXl/NL9z6ekb",
	"pTvM3yfLJP3Zf5xY5YRswuNI+GBoWNQXpk4YCV6/rn51p/HBg/ioPXgwZ7+W/kEEIP6+8L+jfvHgQdLV",
	"kLQkOCaBhgLJN3C/Cfwd3YgPa3aScD3tgj672jSSpRonw4ZCyTEd0H3tsXethcdn4X8poAT30+Hcut6m",
	"E7pjYKacoIux5Jgm7mlDPZIMU7If5od5WY60kNlvOFaBJ8/N8AjJeoPejsyUIk/7geXCOPYqKb7Hvczw",
	"5RGDmRuxFiPhYrIW0VjutSll/HpARnMkkWmSlQRb3C2UP961FL/VwEThtJql8BW2e1ddUA5w1IFA6lTP",
	"4Vx+YIoiaIe/jR0k7oDQlxkRiP1GkDiaaADus8asHxbaeM1anenYoMR4xgHj3hNQ6OnDUzMlWKy7UUHT",
	"9JgpvTIDo/OtGEbmSPa+FCZbavU7pG3RaMJP5GaHng8CI3F/h1g9izu+dVhK44FqW3i2sx/a7um68djG",
	"31oXDotu2kzc5DJNn+rjNvImSq9JVxD1SB5TwmJ3ZDdadYS14PGK4rOwon0IVeCSzhMlJneSHtKnMk4v",
	"OqXx21PpYR6kZJX8esFT5f6dLuRgira3E1RhFQsfhw0wTdotzc6ioMLmXUHFjSrQbW2KYaHEG+o1NO1k",
	"jaZVYJCiYtVlToFgpVGJYWp5zSW1jXTfEb/yXxsgL6j76lppLE1m0vEfBeRikzTHvnnzusiHvv5CrAR1",
	"RKwNRC33/EDUbZaoyLctbJLJPWrOl+zhPOr76XejEFfCiEUJ+MYjemPBDV6XjUey+cQtD6RdG3z98YTX",
	"17UsNBR2bQixRrFG90Qhr4liWoC9BpDsIb736Av2CcZvGXEF9x0WvRA0e/roC/S+0x8PU7es72i5j2UX",
	"yLP/2/PsNB1jABuN4ZikH/UkWcWJWlqP3w57ThN9OuUs4Zv+Qjl8ljZc8hWkQ4Y3B2Cib3E30aPaw4sk",
	"bwAYq9WOCZueHyx3/GkkDdGxPwKD5WqzEXbjo3yM2jh6avvp0aRhOGru6lt/BLjCQwyWq0KsUM/W9YHV",
	"GL4ZSSPAkMYf+Aa6aJ0zTvXoStGGsYYGTew8lLvEXihNCxTCjZvLLR1lSYxqXbJKC2nR/lHbZfY3pxZr",
	"njv2dzIGbrb4/Emip0i37L48DvAPjncNBvRVGvV6hOyDzOK/ZZ9IJbON4yjF/TbtNzqVo1F96fitsSCy",
	"/UNPlXzdKNkoudUdcuMRp74V4ck9A96SFJv1HEWPR6/sg1NmrdPkwWu3Qz+9fO6ljI3SqRrW7XH3EocG",
	"qwVcYRJHepPcmLfcC11O2oXbQP9xQ1CCyBmJZeEsJxWByKO5L3/TSfE/f98W40XHKiXH9GyASiesnd5u",
	"94EDvo6zuvX9txSzg89GMDcZbdT5foCVkVBdisVtvvnA6bxJcy/tecfg+OhXpp0OjnL8gwcI9IMHcy8G",
	"//q4+5jY+4MH6ZqYSZOb+7XFwm00Yvw2tYdNB7y9ZQOplR3GwVOia7fvKcqP1OSu2yYs5Y8M32Uj1re+",
	"RxhTntsSxAgKRu2sQFJfl3T9Zt8HcP+i4rCHj0FlUaXE7Zh73CbLuPmegr6TIKnQJfDCi8oGwvoOGrx7",
	"G+JR5yFK0oxKbFtoWtYEofk074TRekywcQ/cxbnwQ81Zt0HUh5c87yaBKB0kmuacb968xicBD/hHHxEf",
	"+YLFDWzD4McviG6DvCTJFM3zKDydsy/Vdirh9OSWQDx/AhSNoGSiSRdXMmgAmAzxOBhjFNGoG3UBpZIr",
	"0+ltEvuA/nXw7BY/34PtWpTFz22Jqp7wobnM18ng3oX78BfS6zp3A12vyXYJay4llMnhyB7yS7CbJCw7",
	"/1RT59kIOfHdfgNKWm5vcS3gXTADUGFCh15hSzdBjNVu9Z8mu7xcqYLhPG1t/pY5Dju5Ru3lfqvB2NTR",
	"wAeU4YYOUsd8qbsZA1mgxfSEfYviiYOlU3gZLZWhpGW3vFtdlYoXcyy1+errs+eMZqVvqP02dVdboaGu",
	"u4qkZ2V6ubumk3a6jsP0cfYnlrtVG5s1zdBSlbLcG227NtELt0ETXoydE/aMrKcm2OZoEoYFW/UGiqj3",
	"GunvSBPuP9byfI1myc5FNk7y09sCBqpsnTZRz/WmFweeOwe37wxIjQHnTNk16GthADN34Qq6xbmaSnVe",
	"BAvFurrL07WURCknR8gUTeeNY9EegCOBJMQTJCHrIf5IoxR11Ty2S+IFfpUWeHstF3sO/1Dqqekd/b33",
	"K+RcKilyLMydEoiwkNA0D+WEGuZp16KZ+ROaOFzJRo9NzqDH4mjrx8AIPeKG3v7oqdtUog7608LWNwBa",
	"gTWes0ExD/1KvS9MSAO+t4ojophPKp2IZ0rmQDTa25FkhDVCRoyb37hnP3jTNybPXwqJRi6PNi9mk7eq",
	"NAKd0pIJy1YKjF9PV2Uyr903J1gzrIDt25PnaiXyC7HCMSiCzi2bwkWHQ52F4FEfrOne/cq96ys5Nz93",
	"IsFo0rOq8pOOd7NNt/DeylEEp0KWguYWIbcZPx5tD7ntjfrG+9QRGlxhwBpUeA8PCKPp7Npro+5UBKIo",
	"fINRPluynKOQCTCeCxm8p+kLIk9eCbgxeF5HvjO55pZEwEk87RXwciT3AfNDyf1+26H6dawdSnCNYY7x",
	"bWyb0o4wjuaFVnDjcsfCoXDUHQkTX/GyiZpOtJhFqcoLUQXmFfWazqYYh2Pcoa119wI4aCNpPsfa8Mfe",
	"RGMVsxZ1sQKb8aJItbr5Ep8yfBryw2ALed20RGlMMN2KuUNq8xPlSpp6s2eu8MItp4u6OCeoIe4kHXYY",
	"K3Isdvhvqh/I+M74eOmjcyJDcHRxXJnoYY5nSup1NJ0ZscqmYwLvlNujo536ZoTefn+nlB5son8Kk2eP",
	"y8V7lOJvX7uLIy4jOTDs0tXSVHnEMHCFz0NhlKY+WZcr4VU26HqDAQ9Nb//9ZojxLv1zvPxG8pBjNwnd",
	"r+Q6GMtGzkeT57n1ZXwsZ3tZ0GhpFAoT7jleht7DsdBgigy+O4eFX+tehI677b7rOOnIddEyi1Hn3M38",
	"Z+0GH+tA++5qLEE9VI3H5/0u3pfga/tVGq6EqkPgVQh/Dioh/drpid2UCEiuP5lU8LGNz6Om8le+myIt",
	"0+vk3/1MDlgG0urdn8BwPtj0QX/wobRL5qn2FdY04prUmKtzK07pqJAq3u9lw06H8gP91Qdk9WyKODDs",
	"lz6fnRdHXZipBhAzGiV17NLdz8frY7c1sfGIVcqIth9eqi36xDyDV9jZPKrvPRwrxJ9eQW6xCWIbV6cB",
	"jqn27SYLtvu/6mSPq9NNOoYvj72vJvaw8+GBO35QtiYqvURd406mV4A+a6KnKfnrmpvWJ95Ll56ctLlc",
	"Qm7F1YEyQf+9BhmVoJkHuwzCsoyqBokmhQmrzB5vdWwB2lfFZy88UbeHW4Mz5qO/hN09wzrUkGxj1+Tv",
	"3aTAKGIAuUPmSESZVHQiGZJ9wJgwDWUgFkI0MH0Oban20Q7YUdGrG84VSNJdHG0hrD1TplvwTprLfXpU",
	"eTjMxhmrJDTs4DmufzzDhqnGx8bxpkBprKWz82Ebh2tf4BSLOjW+k1DqFEz4LVRwo1lKcQlxj270VF1z",
	"XYQ3Tu4i8obuJpEGetnMLNrcjaGvOlEYHNOg8lI5MSIbyyXrpks0sYb3DAWFtrV7EK4laA1F4xIplYHM",
	"qpDrsQ+OfaigyNcbIcGMNuMg4EZL5L5sawBjUyKOJXG5D3iNF8g0bLiDTkeVesfn3Ifsr+h5yL8PTWkO",
	"Wpgaej3cHTFk7QgzQGJM9Uvmb8vDef03MTYJKUFnwfPUL9sru/FrWPWwqHO6oOOD0RjkJpfN2cNKknaa",
	"fLjKno4Q5cdfwu6UlKDQVjLsYAw0SU4EelTusbfJd2p+Mym4V3cC3scN1quUKrMRZ8f5sNZwn+IvRX4J",
	"GDHZRLePdAxmn6CNvfFmX693obZuVYGE4v4JY2eS8omCY7vb7Ko3ubxn982/xVmLmsp/e6PayRuZTszA",
	"wtz6ltwsDLOfhxlwrO6WU9EgByrZbkfqHGt+neiffTJVKx+6mvs9jVuiIihSMskFeay+woOeMhxh9YOo",
	"TAc6Mjnzni5mSpUKybxJhQY3VBpT8WQIkAU5pVBAA4UfPImAZJfexCmkqne+3p1aMg2tE/mmhf+GDYVT",
	"Gn1/5maWLr9bKg2d1sDua6WLIPII0/bw5nohrOZ6d5PyfIOGxgPrySiWD4ZjNZFY7ULaaKwhDstSXWfI",
	"rLKmHn5KtXXvme5lHFoAtd+5U72AKK6LGy+o7diaFyxXWkMef5FO9SSoNkpDVioM80p5oJfWyd0bzO+S",
	"rFQrpqpcFUB9JdIUNDZXLSVHsQmiqJokCoh2MFGYvonoeOKUd9VNmwo60aIz8mWOBJ6C8QWcPIbo5SG8",
	"ezpRH9XR4XyJFiGBsS7dfH2SPuN+3HBkO25RlsFgMNaRm/1kagxHwmQtN8UTtlHGes2ORjLNUG2I1ye5",
	"klarsuwagUgkXnnL9vd8e5bn9rlSlwueX95HPVIq26y0mIdU5n4wXjuT7lXxmtg6vJ9/QO9haJonkqP7",
	"g3vOcXRb3wjMt4c51mEb91mq/Xl3Xf1+/nIko8SqjcjTNPyvFd02GpOWYgnJ8mDUWYsKOuBryKjjy6EJ",
	"ZkCWNEQzSEewqf3yPM07dZF5uP+ixNsfly3BXxIjF9OQT3qpJctHZaseAAgpZRnbWlM7rljyabiKWlFV",
	"AnRJ9wGdyMUx8ud2sLkR7hwoC7cCahBt2AD4CSn7cyrjRpGLC7UNz++3dd5uBPz7/VTeYR5jIVUXLWlp",
	"CqoKNWFGOEK6mvTe+CNsNh9u0MNRSE3rxIk3agTAeFxSB4ZJ0UnHgrHkooQi43bkckeb0DzSbH1GS78h",
	"rjCek+ecLuw1MDd2rcHXKCGRutdAv+KOlFTz+tByKwvYgsECItQFnBvyMwR/B5TUiqynfKsqK+EKOuFa",
	"vnBKjaKduILwrWk+ZgVAhd6/vk0qFYcU3+U9Q4VfexZFskzBbtJyQYilnWIHzBJJI8pWZnRMzNSj5CC6",
	"EkXNO/gzx4ocXbObO8oJVA1k8izobVOn+YlGeBkGOAvfp0SZgIm30/jQ0Swojbp9DOhgXGJtxk69TIcl",
	"xlWBGocGzlY0jk8i8ZZvmIpfy3ED4JDkW/Vm4j4JJSPEfr2FHKWabtzd7XHCcDBmehW/RkVw3ezwzQ3J",
	"H4WG95Lw6HgpVcMAMti9lppAF15gxxewBap0Yq+TmrHtmOf/nv/N2aIOAzm9mrqgxRrcMwgeOyxC3jgr",
	"vEArmgstxBfOfQ3KvlIuosjqDd8xpfEfp6/9VvNSLHd4Qgn88Bkza+5IyLsIyXft4xXdxPsFk3kALNgF",
	"VJiK1i2mjhkNt3OjREC7K9Abp7Ca1CXE24BueeI8uXUsx9SLjTAGL7vedg6x4Bcf6ohseBHryFjNsNt+",
	"NtS3dV//323WVjxVKEJWlTwPPe+AGb7pGcSpr2UgLruGzf60vqF6HEig6ZXZEq0O6bzFDYx7R0ZupGLl",
	"x3qEdMAe9BActEe51TKOaWrdZkbvSYictJS73oWp8SEDoNHJHCrBHQCfKniGqnEfAv/JQqNjy5gC/p8F",
	"7yOtF2N4qcviB8ByJ+U/ASvZVRdqm2lYmkOhEGRYdYqwbosFBOOkkLkGbig25PxHr7K1dTSFdCokRS82",
	"3rdmlAKWQrbMUsiqtgkNAMtpyl2EsNg8jWgdcfaMSQlODLvi5Y9XoLUoxjbOnQ5q/Rb3MQgmef9tQvlv",
	"7tThAMK02g9mEkKbqRa95i5w6pREgYXGcllwXcSvC8ly0O7eZ9d8Z27u+3DQ6trJFwe8HzySZrr57ZEf",
	"BEmbACl33n15S89EAyC/QxfFBNcCRrAm3ApkFLFqxJMwhCFdVoFvs1KtML9shAB9wVL0/ZCyoiQabEke",
	"Om4eI36H/dNgrXZ/8K3CWadMsf+c/YioQ4XnJyns3pNG1rR+wh9FZNJBCPQvV21YOG3OkP5TOZqvMImh",
	"k6cZhLuQxBD2msJDaD4Y8WR0Lbgju4gOcp/gG5trp/fA6vrgU5mgpMNmqNuaPYHfYNogZ577wJ2h0Weg",
	"FBNS5j6P9kibEFmSwz0wAh51N/ZnqzttE0zhxjmmcdj+zNmsUlWWT4kGpHYOhTdoe0i7MI7QR2SuHll3",
	"EzhhmgYnncImnU4nx/ZOG+20csgvU+X7lOwxg8YIB+0ay9USeRkeYTLjYI5HY7yY97OPugabhkkwzjTk",
	"tUaD5jXfHe5FNVJG+OIfZ589evzL488+Z+4FVogVmLYUda+XUxsxJmTfzvJhY8QGy7PpTQh56YS44CkL",
	"6TbNpvizRtzWtHUmB52sjrGEJi6AxHFM9BC60V7hOG3Q959ru1KLvPMdS6Hgj98zrcoy3QqgEd0Spv7U",
	"bkXGfifxV6CNMNYxwq6vTtg2Vtas0RyHBWGvqM6Ikrmv2N9QgbAjwTiphYyFWiI/w6xf799gsK1Kz6vI",
	"J7FvXV4vIosYBmdg/MYCWKUqL0qLJUtBhLklOsq59IZGDO+MoicbZktxlClC9DHJadKL61Xu5/bdDp82",
	"zendJibEi3Aob0CaY5b08Yz2m3CS1pT+p+EfiRT9O+MazXL/CF6R1A9u1ix7EmjDdO0EeSAAI3mYnQy6",
	"uJd+W2lUk1Ue7ffB1dkXP75vXaAHEwYQkvDBAfDixMr2vSbG3YPzkUt2ft8gJVrK2zFK6Cz/UK5mYL3N",
	"RRJtkTdSWAuG2JIaioVRIq75qslvHdFKBmmw2DjfaaZlmUifJbsJnqmYcJxKoK94+eG5xjdCG3uG+IDi",
	"5XjSTJxDGSOZUGluVsHtOZ80d5QveXdTyxeYsvvf4PYoec/5oby7eHCbodUL25ivwq1AWcDsGsekcKBH",
	"n7OF78BQaciF6buhr4Nw0qQMghZLH3oJW3sgR/HQOn9W9hZkvAwxI+yHyJ2k0GzXQtge0Y/MVEZObpLK",
	"U9Q3IIsE/lI8Ku7YeuC6uGW1/psVBIlKex1ZEGTYi3bq8qjohbt0agPDdU6+rTu4TVzU7dqmVrOZXPT/",
	"zZvXdjGlCE26QL/7HKvg3Eml/qPq9P8B9W8IR34MP2+KYn4eq4hKVT9Hiu/29qMW5cEAkU4p5ffz2Qok",
	"GGGwWPAvvqHIh71LAwSUkz88qgTrbQqJEGISa+1MHk0VFUmeUB/Zf5aohoz5bnmthd1hM9lgQBO/JCv1",
	"fNtUffBVQxrflb/7rLqEpqF3WyOiNuF2/VbxEu8jcqlJdwup8oR9veWbqvTmYPb3e4v/gE//9qR4+Omj",
	"/1j87eFnD3N48tkXDx/yL57wR198+gge/+2zJw/h0fLzLxaPi8dPHi+ePH7y+Wdf5J8+ebR48vkX/3HP",
	"8SEHMgEaanc/nf2/2Vm5UtnZi/PslQO2xQmvxHfg9gZ15aXCZocOqTmeRNhwUc6ehp/+n3DCTnK1aYcP",
	"v858057Z2trKPD09vb6+Pok/OV1hUnhmVZ2vT8M82IKuI6+8OG+iySnuBXe0tR7jpnpSOMNnL7++eMXO",
	"XpyftAQzezp7ePLw5JHvdyx5JWZPZ5/iT3h61rjvp57YZk/fvZ/PTtfAS6yh4v7YgNUiD4808GLn/2+u",
	"+WoF+gQTBuinq8enQaw4feeT49/ve3Yah1ScvuvUECgOfInhAKfvQtfT/W93Ol76SKzog4lQ7HvtdIFd",
	"K6a+CiZ6eXwpqGyY03coLo/+fuptHumHqLbQeTgNhTZG3qSU6vTDDgrf2a1byP7h3DvReDm3+bquTt/h",
	"f5C0oxVRhcZTu5Wn6FY9fddBhH88QET39/bz+I2rjSogAKeWS2oVu+/x6Tv6N5oIthVo4WRGrIrif6Xq",
	"VafYMWw3/Hkn8+SPw3V0Kve4Q5l0Ub+kcvGclcKEWINuwR8TdxM/L5B5234VIfdSiDNEDvD44cPA9rxS",
	"EZHsqT/hM9P0HZ9Wk6Bfu2h4HQ753r6VvZ/PnhwJ6F7DUafiYwKYL3nBQoIqzv3ow819Linm0V0EdGEh",
	"BE8+HASd7WPfwY79oCz7BjWr9/PZZx9yJ86lk/N4yfDNqGPr8Ij8JC+lupbhTSfp1JsN17vJx8dyxwVf",
	"zyotrriXM5vX5Gr2Fgs0UNJy96idFcWA6EniA2O/VHh1jmFsY1aV96m0SGsFXiHdEoYa8wBVr6hxca8M",
	"GBWrCZ51qQqYxaKo1TW8vyVP6EVjcG3PEwYgtGRiGPQy9FiOQE3WtOr7qmnkobJyiITb3lZt9PBfPOUv",
	"ntLwlM8efvrhpr8AfSVyYK9gUynNtSh37CfZhKXfmMedFUWyEGD36B/kcfPZNstVASuQmWdg2UIVO99Z",
	"YdaZ4BJItx0IMqdBF+yoAyPcM2iZKWmlDZacPX2dcmL6vrxVvShFzsgOhoqg03IiPa2pzNZlfvNoWwfs",
	"J1H9lxWirJssYXutfBbe8EJhn8S58+Y3atmPB1HYHbsWslDX2K8cwf2tBuTzHt4wzSwBYBSRN2x00Zr3",
	"HYADsMbmQ7/AFOzsmfw5v9ncJT926re3vLIOXqZN5aP/uvjxhyhXh/KLyX2PmSJEuhjWqxWGq15zjN/S",
	"FooT9hXZZcodkwo9ALXp9OI5+ese+ov33573f9uUwqQuPBbbawxZUnQXnEwSeJO8/V3nT2+3mFHwZKqA",
	"pfu9afA6vKAWO2ro2r0U6LP+lfDljnq/dm+FBL/vg3gU4x9hL/tEGreQlbJNCCkt6i8h8y8h81aK6+TD",
	"M0V3TVqWqK8hH+hj89CiMNWgndshKFPsTx/1+N7Jxg9tWylbFhXLhYJFDyh3u4/mv1jEXyzidiziW0gc",
	"Rjy1oaX6kOiOs3VNZRhYoqPoBEQFqSO8XpdcR+lyh0zYZzhiWhX8Q7jGhzbYJXFF9jqM8hUU3pbYwLu1",
	"4f3F8v5ief86LO/sMKPpCia3tnpdwm7Dq8bWZda1LdR15P5GWCg0dejjI8W///fpNRc2WyrtWy/wpQU9",
	"/NgCL099n9Xer21rs8ET7NcW/RgXOUr+esq7Tsuu49yx3rEPB1711FPvOB55KWQYh8dthE0csYJsv4lV",
	"ef3WsWwD+ircCG0AxtPTUyw5sVbGns7ez9/1gjPih28b8njX3COeTN4jXSgtVkLyMvOBD22z6Nnjk4ez",
	"9/8nAAD///9Q6EXIDAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
