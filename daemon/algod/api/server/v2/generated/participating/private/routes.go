// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
