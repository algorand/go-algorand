// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
