// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address basics.Address, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
