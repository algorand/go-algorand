// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Cz9+rEngU31XOFK4/nj9/wIAAP//QAj1qArRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
