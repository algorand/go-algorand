// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"mgQ+1XeFI4Xrj9f/LwAA//9kQn/Nzc4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
