// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/x8AAP//xl6onk/2AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
