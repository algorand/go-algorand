// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
