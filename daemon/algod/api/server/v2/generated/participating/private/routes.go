// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
