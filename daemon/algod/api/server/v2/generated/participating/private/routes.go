// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
