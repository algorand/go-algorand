// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
