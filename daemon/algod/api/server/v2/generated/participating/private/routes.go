// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
