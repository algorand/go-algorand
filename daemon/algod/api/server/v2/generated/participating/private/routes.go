// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9e5PbtpIo/lVQ2q3yY8UZ23GyJ/7Vqf1N7CRnNk7i8jjZuxvnJhDZknCGAngAcEaK",
	"r7/7LXQDJEiCEjUzsU/q5i97RDwajUajX+h+N8vVplISpDWzZ+9mFdd8AxY0/sXzXNXSZqJwfxVgci0q",
	"K5ScPQvfmLFayNVsPhPu14rb9Ww+k3wDbRvXfz7T8I9aaChmz6yuYT4z+Ro23A1sd5Vr3Yy0zVYq80Oc",
	"0RDnL2bv93zgRaHBmCGU38tyx4TMy7oAZjWXhufuk2HXwq6ZXQvDfGcmJFMSmFoyu+40ZksBZWFOwiL/",
	"UYPeRav0k48v6X0LYqZVCUM4n6vNQkgIUEEDVLMhzCpWwBIbrbllbgYHa2hoFTPAdb5mS6UPgEpAxPCC",
	"rDezZz/NDMgCNO5WDuIK/7vUAL9BZrlegZ39PE8tbmlBZ1ZsEks799jXYOrSGoZtcY0rcQWSuV4n7Nva",
	"WLYAxiV7/dVz9sknn3zuFrLh1kLhiWx0Ve3s8Zqo++zZrOAWwuchrfFypTSXRda0f/3Vc5z/wi9waitu",
	"DKQPy5n7ws5fjC0gdEyQkJAWVrgPHep3PRKHov15AUulYeKeUOM73ZR4/o+6Kzm3+bpSQtrEvjD8yuhz",
	"kodF3ffxsAaATvvKYUq7QX96lH3+87vH88eP3v/LT2fZ//g/P/3k/cTlP2/GPYCBZMO81hpkvstWGjie",
	"ljWXQ3y89vRg1qouC7bmV7j5fIOs3vdlri+xzite1o5ORK7VWblShnFPRgUseV1aFiZmtSwdm3KjeWpn",
	"wrBKqytRQDF33Pd6LfI1y7mhIbAduxZl6WiwNlCM0Vp6dXsO0/sYJQ6uG+EDF/TPi4x2XQcwAVvkBlle",
	"KgOZVQeup3DjcFmw+EJp7ypz3GXF3qyB4eTuA122iDvpaLosd8zivhaMG8ZZuJrmTCzZTtXsGjenFJfY",
	"36/GYW3DHNJwczr3qDu8Y+gbICOBvIVSJXCJyAvnbogyuRSrWoNh12uwa3/naTCVkgaYWvwdcuu2/T8v",
	"vv+OKc2+BWP4Cl7x/JKBzFUBxQk7XzKpbEQanpYQh67n2Do8XKlL/u9GOZrYmFXF88v0jV6KjUis6lu+",
	"FZt6w2S9WYB2WxquEKuYBltrOQYQjXiAFDd8O5z0ja5ljvvfTtuR5Ry1CVOVfIcI2/DtXx/NPTiG8bJk",
	"FchCyBWzWzkqx7m5D4OXaVXLYoKYY92eRherqSAXSwEFa0bZA4mf5hA8Qh4HTyt8ReCEQUbBaWY5AI6E",
	"bYJm3Ol2X1jFVxCRzAn7wTM3/GrVJciG0Nlih58qDVdC1abpNAIjTr1fApfKQlZpWIoEjV14dDgGQ208",
	"B954GShX0nIhoXDMGYFWFohZjcIUTbhf3xne4gtu4LOnY3d8+3Xi7i9Vf9f37vik3cZGGR3JxNXpvvoD",
	"m5asOv0n6Ifx3EasMvp5sJFi9cbdNktR4k30d7d/AQ21QSbQQUS4m4xYSW5rDc/eyofuL5axC8tlwXXh",
	"ftnQT9/WpRUXYuV+Kumnl2ol8guxGkFmA2tS4cJuG/rHjZdmx3ab1CteKnVZV/GC8o7iutix8xdjm0xj",
	"HkuYZ422Gyseb7ZBGTm2h902GzkC5CjuKu4aXsJOg4OW50v8Z7tEeuJL/Zv7p6pK19tWyxRqHR37KxnN",
	"B96scFZVpci5Q+Jr/9l9dUwASJHgbYtTvFCfvYtArLSqQFtBg/KqykqV8zIzllsc6V81LGfPZv9y2tpf",
	"Tqm7OY0mf+l6XWAnJ7KSGJTxqjpijFdO9DF7mIVj0PgJ2QSxPRSahKRNdKQkHAsu4YpLe9KqLB1+0Bzg",
	"n/xMLb5J2iF891SwUYQzargAQxIwNbxnWIR6hmhliFYUSFelWjQ/3D+rqhaD+P2sqggfKD2CQMEMtsJY",
	"8wCXz9uTFM9z/uKEfR2PjaK4kuXOXQ4kari7YelvLX+LNbYlv4Z2xHuG4XYqfeK2JqDBifl3QXGoVqxV",
	"6aSeg7TiGv/Nt43JzP0+qfMfg8Ri3I4TFypaHnOk4+AvkXJzv0c5Q8Lx5p4TdtbvezOycaPsIRhz3mLx",
	"rokHfxEWNuYgJUQQRdTkt4drzXczLyRmKOwNyeQHA0QhFV8JidDOnfok2YZf0n4oxLsjBDCNXkS0RBJk",
	"Y0L1MqdH/cnAzvIHoNbUxgZJ1EmqpTAW9WpszNZQouDMZSDomFRuRBkTNnzPIhqYrzWviJb9FxK7hER9",
	"nhoRrLe8eCfeiUmYI3YfbTRCdWO2fJB1JiFBrtGD4YtS5Zd/42Z9Byd8EcYa0j5Ow9bAC9Bszc06cXB6",
	"tN2ONoW+XUOkWbaIpjpplvhSrcwdLLFUx7CuqnrOy9JNPWRZvdXiwJMOclky15jBRqDB3CuOZGEn/Yt9",
	"yfO1EwtYzsty3pqKVJWVcAWlU9qFlKDnzK65bQ8/jhz0GjxHBhyzs8Ci1XgzE5rYdGOL0MA2HG+gjdNm",
	"qrLbp+Gghm+gJwXhjahqtCJEisb5i7A6uAKJPKkZGsFv1ojWmnjwEze3/4QzS0WLIwugDe67Bn8Nv+gA",
	"7Vq396lsp1C6IJu1db8JzXKlaQi64f3k7j/AdduZqPN+pSHzQ2h+Bdrw0q2ut6gHDfne1ek8cDILbnl0",
	"Mj0VphUw4hzYD8U70Akrzff4H14y99lJMY6SWuoRKIyoyJ1a0MXsUEUzuQZob1VsQ6ZMVvH88igon7eT",
	"p9nMpJP3JVlP/Rb6RTQ79GYrCnNX24SDje1V94SQ7Sqwo4EsspfpRHNNQcAbVTFiHz0QiFPgaIQQtb3z",
	"a+0LtU3B9IXaDq40tYU72Qk3zmRmj/D9KZd6wkLUzY+QT3HT8AKX8d3gwG5dj2cLpW8mMPXuUMlahyrj",
	"btRIXpz36ACb1lXm2U/CKUMNegO1MSz75Zz+8ClsdbBwYfnvgAXjRr0LLHQHumssqE0lSriD071OyqkL",
	"buCTJ+zib2efPn7yy5NPP3MkWWm10nzDFjsLht33lkdm7K6EB8mDhgJUevTPngY3XHfc1DhG1TqHDa+G",
	"Q5F7jxR8asZcuyHWumjGVTcATmL64G5vQjsjz7UD7QUs6tUFWOuU+VdaLe+c4Q9mSEGHjV5V2slOpusK",
	"9QLhaeGanMLWan5aYUuQBYVSuHUI49TczeJOiGps44t2loJ5jBZw8FAcu03tNLt4q/RO13dhwQGtlU5K",
	"GZVWVuWqzJwoK1TirnvlWzDfImxX1f+doGXX3DA3Nzpoa1mMXGl2K6df0TT0m61scbNXPKL1Jlbn552y",
	"L13kt4pWBTqzW8mQOjs37VKrDeOswI4oTn0NlkRMsYELyzfV98vl3Rh0FQ6UEAnEBoybiVELJ+AZyJWk",
	"eMUDt78fdQp6+ogJjjQ7DoDHyMVO5ugNvItjOy4YbYTE0ASzk3kkJTkYSyhWHbK8vZVuDB001T2TAMeh",
	"4yV+RnfECygt/0rpN62E/rVWdXXn7Lk/59TlcL8Y7/AoXN9g6RZyVXZjZFcO9pPUGj/Kgp43dhJaA0KP",
	"FPlSrNY2UolfafU73InJWVKA4geyh5Wuz9Aq9p0qHDOxtbkDUbIdrOVwjm5jvsYXqraMM6kKwM2vTVrI",
	"HImqxHAujEKzsdyKJhhh2AIcdeW8dqutK4YxVoP7ou2Y8ZxOaIaoMSMRJk1oELWi6Shir9TAix1bAEim",
	"Fj6MwweY4CI5BojZIKZ5ETfBLzpwVVrlYAwUmbe2HwQttKOrw+7BEwKOADezMKPYkutbA3t5dRDOS9hl",
	"GM5o2P1vfjQPPgK8VlleHkAstkmht28yHEI9bfp9BNefPCY7MkYS1Trx1jGIEiyMofAonIzuXx+iwS7e",
	"Hi1XoDFq5nel+DDJ7QioAfV3pvfbQltXI0H6Xk13Ep7bMMmlCoJVarCSG5sdYsuuUceW4FYQccIUJ8aB",
	"RwSvl9xYivQSskCzLV0nOA8JYW6KcYBH1RA38o9BAxmOnbt7UJraNOqIqatKaQtFag1o3Bud6zvYNnOp",
	"ZTR2o/NYxWoDh0Yew1I0vkeW14DxD24bU543Dg4Xh2ED7p7fJVHZAaJFxD5ALkKrCLtxoPIIIMK0iCbC",
	"EaZHOU109HxmrKoqxy1sVsum3xiaLqj1mf2hbTskLvLj0L1dKDDoI/LtPeTXhFkKUV9zwzwcwVqL5hwK",
	"SRvC7A5jZoTMIdtH+ajiuVbxETh4SOtqpXkBWQEl3yXszPSZ0ed9A+COt+quspBRrHF601tKDqGde4ZW",
	"OJ5JCY8Mv7DcHUGnCrQE4nsfGLkAHDvFnDwd3WuGwrmSWxTGw2XTVidGxNvwSlm3454eEGTP0acAPIKH",
	"ZuibowI7Z63u2Z/iv8H4CRo54vhJdmDGltCOf9QCRmzB/hlXdF567L3HgZNsc5SNHeAjY0d2xDD9imsr",
	"clGhrvMN7O5c9etPkIwNYAVYLkooWPSB1MAq7s8oSrY/5s1UwUm2tyH4A+NbYjkhEqkL/CXsUOd+Rc8v",
	"IlPHXeiyiVHd/cQlQ0BDULcTweMmsOW5LXdOULNr2LFr0MBMvaAojaE/xaoqiwdI+mf2zOgd0En3716P",
	"+AUOFS0v5bYknWA/fG96ikEHHV4XqJQqJ1jIBshIQjApPIZVyu268C+8whufQEkdID3TxuiD5vq/Zzpo",
	"xhWw/1Y1y7lElau20Mg0SqOggAKkm8GJYM2cPv6yxRCUsAHSJPHLw4f9hT986PdcGLaE6/As0jXso+Ph",
	"Q7TjvFLGdg7XHdhD3XE7T1wf6LhyF5/XQvo85XBQlx95yk6+6g3eeLvcmTLGE65b/q0ZQO9kbqesPaaR",
	"aQFtOO4kX043BGqwbtz3C7GpS27vwmsFV7zM1BVoLQo4yMn9xELJL694+X3TDZ98Qu5oNIcsx4eKE8eC",
	"N64PvW104wgp3AGmdw1TAYJz6nVBnQ6omG3Qg9hsoBDcQrljlYYc6EmfkxxNs9QTRsH++ZrLFSoMWtUr",
	"HydB4yDDrw2ZZnQtB0MkhSq7lRkauVMXgI/EC686nTgF3Kl0fQs5KTDXvJnPP+SdcjNHe9D3GCSdZPPZ",
	"qMbrkHrVaryEnO7T1AmXQUfei/DTTjzRlYKoc7LPEF/xtrjD5Db39zHZt0OnoBxOHAU1tx/H4pqdul3u",
	"7kDooYGYhkqDwSsqNlMZ+qqW8TP0EA25MxY2Q0s+df1l5Pi9HtUXlSyFhGyjJOySmVeEhG/xY/I44TU5",
	"0hkFlrG+fR2kA38PrO48U6jxtvjF3e6f0L7Hynyl9F25RGnAyeL9BA/kQXe7n/KmflJelgnXon+k2mcA",
	"Zt5EzgnNuDEqFyiznRdm7gOfyRvpX7R20f+qeXpzB2evP27PhxbnP0AbMZQV4ywvBVqQlTRW17l9Kzna",
	"qKKlJoK4gjI+brV8HpqkzaQJK6Yf6q3kGMDXWK6SARtLSJhpvgIIxktTr1ZgbE/XWQK8lb6VkKyWwuJc",
	"G3dcMjovFWiMpDqhlhu+Y0tHE1ax30ArtqhtV/rHN9jGirL0Dj03DVPLt5JbVgI3ln0r5JstDhec/uHI",
	"SrDXSl82WEjf7iuQYITJ0sFmX9NXfLrgl7/2zxgwop8+h7jaNinEzC2zkwfmf9//j2c/nWX/w7PfHmWf",
	"/9vpz++evn/wcPDjk/d//ev/6f70yfu/PviPf03tVIA99ULYQ37+wmvG5y9Q/YleI/Rh/2D2/42QWZLI",
	"4miOHm2x+5gNwxPQg65xzK7hrbRb6QjpipeicLzlJuTQv2EGZ5FOR49qOhvRM4aFtR6pVNyCy7AEk+mx",
	"xhtLUcP4zPRbfHRK+uf1eF6WtaStDNI3PTUN8WVqOW/yLVAqtmcMH+OveQjy9H8++fSz2bx9RN98n81n",
	"/uvPCUoWxTaVKqGAbUpXjN+B3DOs4jsDNs09EPZkKB3FdsTDbmCzAG3WovrwnMJYsUhzuPAqy9uctvJc",
	"0hsGd37QxbnznhO1/PBwWw1QQGXXqRRNHUENW7W7CdALO6m0ugI5Z+IETvo2n8Lpiz6orwS+DIGpWqkp",
	"2lBzDojQAlVEWI8XMsmwkqKf3gsOf/mbO1eH/MApuPpzpiJ673395Rt26hmmuUdZO2joKM9CQpX270M7",
	"AUmOm8XP5t7Kt/IFLNH6oOSzt7Lglp8uuBG5Oa0N6C94yWUOJyvFnoUnpy+45W/lQNIazR0ZvQtnVb0o",
	"Rc4uY4WkJU/KBzYc4e3bn3i5Um/f/jyIzRiqD36qJH+hCTInCKvaZj6bUabhmuuU78s02WxwZEpXtm9W",
	"ErJVTQbSkC3Jj5/mebyqTD+rxXD5VVW65UdkaHzOBrdlzFjVPLlzAop/tez29zvlLwbNr4NdpTZg2K8b",
	"Xv0kpP2ZZW/rR48+wceLbZqHX/2V72hyV8Fk68po1o2+UQUXTmolxqpnFV+lXGxv3/5kgVe4+ygvb9DG",
	"UZYMu3UeVoYHBjhUu4DmFffoBhAcR79/xsVdUK+QuTK9BPyEW9h9Y36r/YpSBNx4uw6kGeC1XWfubCdX",
	"ZRyJh51pEtqtnJAVojGMWKG26nP/LYDla8gvfVI22FR2N+90DwE/XtAMrEMYStdHjygxYRQ6KBbA6qrg",
	"XhTnctfP3GPoRQUO+houYfdGtfmmjknV080cY8YOKlJqJF06Yo2PrR+jv/k+qiy8pfUJWPB9aiCLZw1d",
	"hD7jB5lE3js4xCmi6GQ2GUME1wlEEPGPoOAGC3Xj3Yr0U8sTMgdpxRVkUIqVWKQyDf/X0B8WYHVU6ZMr",
	"+ijkZkDDxJI5VX5BF6tX7zWXK3DXs7tSleElJY5NBm2gPrQGru0CuN1r55fx28YAHaqU1/i4HC18c7cE",
	"2Lr9FhYtdhKunVaBhiJq46OXT8bjzwhwKG4IT+jeagono7quR10iqWK4lRvsNmqtD82L6Qzhou8bwKys",
	"6trti4NC+YSilLcmul9qw1cworvE3ruJKT86Hj8c5JBEkpRB1LIvagwkgSTI1Dhza06eYXBf3CFGNbMX",
	"kBlmIgex9xlhnnCPsEWJAmwTuUp7z3XHi0qJj8dAS7MW0LIVBQMYXYzEx3HNTTiOmBI2cNlJ0tnv+IJ4",
	"X/a98yiWMMr72uTWC7dhn4MO9H6fgy8k3gvZ9mKlf0LmPKd74fOF1HYoiaJpASWsaOHUOBBKmxOq3SAH",
	"x/fLJfKWLBWWGBmoIwHAzwFOc3nIGPlG2OQRUmQcgY2BDzgw+07FZ1OujgFS+pxWPIyNV0T0N6Qf9lGg",
	"vhNGVeUuVzHib8wDB/DZNlrJohdRjcMwIefMsbkrXjo253XxdpBBEjhUKHop33zozYMxRWOPa4qu/KPW",
	"RELCTVYTS7MB6LSovQfihdpm9EI5qYsstgtH78m3C/heOnUwKd3ePcMWaovhXHi1UKz8AVjG4QhgRLaX",
	"rTBIr9hvTM4iYPZNu1/OTVGhQZLxhtaGXMYEvSlTj8iWY+RyP8qgdyMAemaothyFN0scNB90xZPhZd7e",
	"avM2M2x4FpY6/mNHKLlLI/gb2se6Oe/+1uY2HM+fFk7UB0n2N7Qs3SYJI3WuKLHiMTkY++TQAWIPVl/1",
	"5cAkWruxXl28RlhLsRLHfIdOySHaDJSASnDWEU2zy1SkgNPlAe/xi9AtMtbh7nG5exAFEGpYCWOhdRqF",
	"uKCPYY7nmCFaqeX46myll259r5VqLn9ym2PHzjI/+AowAn8ptLEZetySS3CNvjJoRPrKNU1LoN0QRaqn",
	"IIo0x8VpL2GXFaKs0/Tq5/3mhZv2u+aiMfUCbzEhKUBrgfU/koHLe6am2Pa9C35JC37J72y9006Da+om",
	"1o5cunP8Qc5Fj4HtYwcJAkwRx3DXRlG6h0FGD86H3DGSRqOYlpN93obBYSrC2Aej1MKz97Gbn0ZKriXK",
	"dJh+IahWKyhCBrfgD5NRnrxSyVVUqKqq9qUFPGGUnQ+T6+3Jy+fD8GEsCD8S9zMhC9imoY+1AoS8fVmH",
	"OQVxkhVISleSNgslUROH+GOLyFb3gX2h/QcAySDoNz1ndhudTLvUbCduQAm88DqJgbC+/cdyuCEedfOx",
	"8OlOctf9RwgHRJoSNqrdMkxDMMKAeVWJYttzPNGoo0YwfpR1eUTaQtbiBzuAgW4QdJLgOtnCfai1N7Cf",
	"os576rQyir32gcWOvnnuH+AXtUYPRieyeZiavtHVJq79mx8vrNJ8Bd4LlRFItxoCl3MMGqLE74ZZQeEk",
	"hVguIfa+mJt4DjrADWzsxQTSTRBZ2kVTC2k/e5oiowPU08J4GGVpiknQwphP/s3QyxVk+siU1FwJ0dbc",
	"wFWVfK7/DeyyH3lZOyVDaNOG53q3U/fyPWLXrzbfwA5HPhj16gA7sCtoeXoNSIMpS3/zyUQ5uu+ZThUD",
	"VC87W3jETp2ld+mOtsbXnRgn/vaW6dRl6C7lNgejDZJwsEzZjYt0bII7PdBFfJ+UD22CKA7LIJG8H08l",
	"TKjSObyKmlwUh2j3DfAyEC8uZ/Z+PrtdJEDqNvMjHsD1q+YCTeIZI03JM9wJ7DkS5byqtLriZebjJcYu",
	"f62u/OWPzUN4xQfWZNKU/ebLs5evPPjv57O8BK6zxhIwuipsV/1hVkWVKvZfJZTQ3Bs6yVIUbX6TdDqO",
	"sbjG5OU9Y9Og7ksbPxMdRR9zsUwHvB/kfT7Uh5a4J+QHqibip/V5UsBPN8iHX3FRBmdjgHYkOB0XN614",
	"UJIrxAPcOlgoivnK7pTdDE53+nS01HWAJ+Fc32NqyrTGIX3iSmRFPviH37n09JXSHebvXyYmg4d+P7HK",
	"CdmEx5FY7VCisy9MnTASvH5d/epO48OH8VF7+HDOfi39hwhA/H3hf0f94uHDpPcwacZyTAKtVJJv4EHz",
	"ymJ0Iz6sAi7hetoFfXa1aSRLNU6GDYVSFFBA97XH3rUWHp+F/6WAEtxPJ1OU9HjTCd0xMFNO0MXYS8Qm",
	"yHRDVUENU7IfU42PYB1pIbP3VSfIGTs8QrLeoAMzM6XI06EdcmEce5UUTOkaM2w8Yq11I9ZiJDZX1iIa",
	"yzWbkjO1B2Q0RxKZJpm2tcXdQvnjXUvxjxqYKJxWsxSg8V7rXXVBOcBRBwJp2i7mByY/VTv8bewge/xN",
	"wRa0zwiy13/3ovEphYWm6hodGQEezzhg3Huitz19eGqm12zrbgjmND1mSnX4wOi8s25kjmS1d2GypVa/",
	"QdoRgv6jRCKM4PgUaOb9DWQqcq/PUhqnclu0vp390HZP143HNv7WunBYdFNY7SaXafpUH7eRN1F6TTpd",
	"s0fymBIWRxh0nwaMsBY8XlEwLJa6CNFHXNJ5oiwQnRdm6VMZv+U8pfHbU+lhHrx/Lfn1gqfK4DhdyMEU",
	"bW8nTsoqFjqHDTBNjgOanUUR3E1bQZnkKtCtD2KYlfaGeg1NO1mjaRUYpKhYdZlTmEJpVGKYWl5zSYXS",
	"XT/iV763AXLBu17XSmMeSJMO6SogF5ukOfbt25+KfBi+U4iVoBrgtYGoyLQfiFGySaQiX6i7ydzhUXO+",
	"ZI/mUaV7vxuFuBJGLErAFo+pxYIbvC4bd3jTxS0PpF0bbP5kQvN1LQsNhV0bQqxRrNE9UchrAhMXYK8B",
	"JHuE7R5/zu5jSKYRV/DAYdELQbNnjz/HgBr641HqlvU13Pex7AJ5dgjWTtMxxqTSGI5J+lHT0ddLDfAb",
	"jN8Oe04TdZ1ylrClv1AOn6UNl3wF6fcZmwMwUV/cTXTn9/AiyRsAxmq1Y8Km5wfLHX8aefPt2B+BwXK1",
	"2Qi78YF7Rm0cPbUVpGnSMBzWWgslsQJc4SPGv1Yh/K9n6/rAagzfjLzZwijl79BHG6N1zjgl/yxFG5ke",
	"SpKy85BbGGuENaXBCDduLrd0lCUxUH3JKi2kRftHbZfZX5xarHnu2N/JGLjZ4rOniVpb3Vot8jjAPzje",
	"NRjQV2nU6xGyDzKL78vuSyWzjeMoxYM2x0J0KkcDddMhmWNxofuHnir5ulGyUXKrO+TGI059K8KTewa8",
	"JSk26zmKHo9e2QenzFqnyYPXbod+eP3SSxkbpVMFA9rj7iUODVYLuMIXc+lNcmPeci90OWkXbgP9x41/",
	"CiJnJJaFs5xUBCKP5r7H8k6K//HbNvM5OlbpJWLPBqh0wtrp7XYfONrwOKtb339LAWP4bQRzk9GGowyx",
	"MhJ9T+H1TZ+PES/UB4n2vGNwfPwr004HRzn+4UME+uHDuReDf33S/Uzs/eHDdALipMnN/dpi4TYaMfZN",
	"7eEXKmEA+0JtiQuHgCKfHyFhgExeUu5mXPgx5qxbGu7Diw9387ArHWaaJv+wfvzcR8BH5o64Y/tONVY4",
	"nWR0wjUO6lomndAHoyCiDXCjLqBUTnWKS93EVuok2fVusECBHxffbvEe4CS2a1EWP7YZy3rsUXOZr5Ox",
	"rwvX8ReSPDsXCzGAZPWMNZcSyuRwpLH9EjS7hO75dzV1no2QE9v2a6vScnuLawHvghmAChM69Apbugli",
	"rHaTQTXJBsqVKhjO05ZqaE/+sAZzqjBk4tUuDruprY/GxBfOPo3OUpQYXJj2hmLLTHM7wk+wUHmomuPG",
	"wbrhhpRnGh0042KD143hm6oEPJlXoJ3mr5b4UrTbHROD4chRHQZmKvcJW2IaBsVsrSVTy2W0DJBWaCh3",
	"c1ZxY2iQR25ZsMW5Z88eP3qUNOYgdiaslLAYlvl9u5THp9iEvvjSQZTg/ihgD8P6vqWoYzZ2SDi+UiKW",
	"Ok7xVKqBjPYO9P25K4mqJDYVPU/Y15jPxxFxJ4E7GuFCatxumsi6KhUv5piy982XZy8ZzUp9qPY7VWlc",
	"oQ2qS/5Jp8H0tJkhX9FIPpjp4+xPUOFWbWzWFFVMZdxzLdqyj6IXSYLWqRg7J+wFGQabyvs0CcPEz3oD",
	"RVTDkVRTJA73H2t5vkaLW+eaH+eV08uLBnbW+iOiN3VNTR9k2A5uX2GUCozOGVbbvhYG8J05XEE3yV+T",
	"8dJbfEPSv+7ydC0lUcoxRbibCj7Hoj0AR2JacJUnIesh/kh7C1UZPrba6gX2Sr8w6JVu7fmyQ8q4kDia",
	"fetN5jmXSoocE/ynxEVMSDbN+TahFkLaa2Zm/oQmDleyYGzzwtVjcbSEbGCEHnFDR3b01W0qUQf9aWHr",
	"C4mtwBrP2aCYh/rN3s0jpAFfo8kRUcwnlU6E6iTD+5uwgCPJCHMNjdjtvnLfvvNWXUz1cCkk2m882rzy",
	"QY6Y0gj0t0omLFspMH493Tcq5ifX5wRzDxaw/fnkpVqJ/EKscAwKDnPLpkjI4VBnIS7SxyG6ts9dW58R",
	"vvm5E+REk55VlZ90vLp3UpC0WzmK4FQ0TgiPiJDbjB+Ptofc9gY0433qCA2uMBYLKryHB4TRVIjujvKl",
	"U6SIorAFo3eCybSwQibAeClkcAymL4g8eSXgxuB5Helncs0t6Q6TeNob4OVIWD++uyXP8m2H6ufDdyjB",
	"NYY5xrexLW49wjiaBq3Ez+WOhUPhqDsSJp7zsgkITpSqRqnKC1EFPpnpFa9OMQ7HuEOZ/+4FcPBRWtMd",
	"a0wcexONZd5b1MUKbMaLIpWw6Qv8yvBrePoEW8jrprRS8+atm3l7SG1+olxJU2/2zBUa3HK6qBp8ghri",
	"ivRhhzF/zGKH/6bqCo3vjA8FPvqtaYj7LY5LNz98O5uSeh1NZ0assumYwDvl9uhop74Zobf975TSwyPU",
	"f4o3pj0uF+9Rir996S6OOB3tIOqarpYmWyxGOCv8HtL4NHkOu1wJr7JB9Sz05ePmJbasB3xomAT8ipcj",
	"77tjDwDdr2QVH3vlnY8mJeDWJ52ynO1lQaOJfCgCtudTGDrGxqJeKej17mzxfq17ETrukfqm43+iyKeW",
	"WYz6nW7mGmo3+FjfkE+jPzRp8rJU+eRT74c5c53Gk1SqzcZnb05EZl1tVBHTeRzjA5BmWhR0mghkR90z",
	"+Q0Vo+QXfZ0erWOz8F+9IDggGUSaB3hOz8wCMGFqmigeNjKIejyyr0SJxXb+8+L772bj2xbhe7iBPkVs",
	"0oQ8tg3NS5w+MaxUYvVYkyb5uxkxX2PSlzSd++qpyQ9fGZuchhKhjH56mew22LOVSiUtH6agmLW4C5iK",
	"tq7dCzrs8VamtvCbq7GUG6HuC36P68v4qLC5LysAV0LVIZovxNQHYwz96lM6derIjHCe5EuVj+0U2+u6",
	"k3Dtl+mtYd/8SF59BtLq3T+BQ2+w6f0iRQk9kwzDbRPWlNKcVFqzI49OqYmUKr/jtbJgpaZLvUNLg3JG",
	"A7J6MUUQH+Dj/Xx2XhwlqqZKOM1olNSF91Ks1hYrQPwNeAH61YEKF21VCzxilTKirWhbusF8SuE1Dncy",
	"9fGKI2ARV+gYjhWCmq8gt1jGuA3W1ADH1OtwkwV365+VLsYNWc0bH1/gYl9Vi2Ht4gPS9SARV5RMjuq+",
	"nkyv4XDWhOTTi8Jrbtr0P703+JNfAi+XkGOW7b2Jz/5rDTJKqjUPFlGEZRnlQRPNuzjME3+8vb8FaF9e",
	"sr3wRPWabg3OWF6ES9jdM6xDDclCtM2j0JskokYMkPM55CQfc+H4KERhGspALIQQc5/auy22MppDPErj",
	"d8O5Akm6i6NN7bdnynQR/Ulzua5HpRFF8XwsN9qwBve45v8CS54bH3DJm0TWsX2MnQ8LMV37RNiYpq7x",
	"WoaU2GDCbyEnJc1SiktfjwKxQj7ia66L0OJOkozR3STSQC+bmUX7IGgYXpQo7YFv6/JSOTEiG3ug2H2D",
	"0wSw3jMUadwmhEK4lqA1FI0zslQGMqvCA6J9cOxDBYVT3wgJZrScFgE3mkr9dZsrHssKckydzn0UdbxA",
	"pmHDHXQ6yug+Puc+ZD+n7yGpQygrd9C229Dr4frG4SmYMAMkxlS/ZP62PJws4iZmXiEl6Cz4fPvp3WU3",
	"wx/mcS3qnC7o+GA0pvDJuZj2sJKkhTQfrrKnI0RJFy5hd0pKUCgMHXYwBpokJwI9SmDb2+Q7NXybFNyr",
	"OwHv4+YlrJQqsxE34/kwJ32f4i9FfgmYU7J5MjFS85/dR+9WE0dyvd6FHOxVBRKKByeMnUl6pBZCSrrl",
	"KnuTy3t23/xbnLWoqUyEN2efvJXp1z5YwEHfkpuFYfbzMAOO1d1yKhrkQMbzrRwLdrvGYg/dqrAnU7Xy",
	"YZBHTyqJiIqgSMkkF+Qrfo4HPWU4wpQaUe4XDCHgzPuYmSlVKjb8Jmk/3FBpTMWTIUAW5JTsEw0UfvAk",
	"ApJ19hOnkFIp+iSKask0tOEbN80m6RM0Ems2Yxp9f+Zmli6/WyoNneL+rjdljm0eUmFaVvzPQljN9e4m",
	"OR+7qEpZT0axfDAQsomBbBfSxkEOcViW6jpDZpU1dVNSqq1rZ7qXcSji1/Zzp3oBUUQlN15Q27E1L1iu",
	"tIY87pF+P0xQbZSGrFQYYJmK/VhaJ3dv8NGgZKVaMVXlqgCqP5SmoLG5aik5ik0QxbMlUUC0g6/PqU9E",
	"xxOndHcqeXAzFLUOpusPm//G9aFMCG2WMFp0RlEEI28FwPisYB5D1HgILxIOpdHp2xLTvHkptkg3oFNH",
	"fsmsrmHOfIt+zXV/8LkGthHGECgNLV2LssREBGIbxTw0IUNp1I6IvecY0HwlMOqtm5SCpOHK3XlNpo6Y",
	"B1zEabSYXWtVr9ZRwvIGzqDy6torxPEoP5gaAxPxRaKb4inbKGO9pkkjtUtugz3v50parcqya5QiEX3l",
	"Le3f8u1ZntuXSl0ueH75APVaqWyz0mIe3uv3w3LbmXQvVV33As6oPP7h1M/UDoNUPdFOZpA9Fjcwih+y",
	"Mkdg/nyYgx62uZ8NF9ZfV5eZptWYM8m4VRuRp8/UHyvOdTQ6NcWikjnwqFYnZS3BZnjY48uqCWtCFjlE",
	"M0ieLDZ4xjwj8OEdyG7cf1EC74/LluAZzchFOWQuXorK8lFZrwcAQkpP6W2tqcBnLIk1XEWtKPUGBqf0",
	"AZ14q2AM4O1gcyPcOVAWbgXUIO64AfA+GR/mlKuQYpgXahu+P2iTGd4I+Pf7qbzDPMaCKy9a0tIUXhkS",
	"H41whHTK9L2RiG8wjcJiajxiU4x54g0fATAeodiBYVKc4rFgLLkoochStTzPGxvVPNK0/aPIfol9YTwn",
	"z3kdSmm6sWsNPhEPifi66/+quCMl1TQfWpJlAVugF1W/gVZUI3Me+V+gpBKaPWOAqrISrqATuOmzA9Uo",
	"aoorCH1N05kVABV6I/s2slREYnyX9wwnfu1ZFNM2BbtJSwohlnaKHTCTJI06W5nRMTFTj5KD6EoUNe/g",
	"zxwrcnTNgO4oJ1A10BGyoEdOneYHGuF1GOAs9E+JMgETP0/jQ0ezoDTq9jGggxHKtRk79TIdoBynvmoc",
	"LDhb0ThiicRbvmEqfi3HDZJDkm/VrYn7JJSMEPvlFnKUary+A4XXeEacFD6LDlK7BChIK3BdEtb2NUgm",
	"VVSy9JqbRlVpc3KGH2hibCSk16Zv4FRu44hvv7MMB2Oml5xvVJHQDZ3e3Dz/UU7i3oM4Ol6KRgz4h7d7",
	"7F+Bur3agQ2wNLx0++lkfyz66W8xz8XnbFGHgcpSXVMN0lgPfQHBD0rUF1xAXiwXzbUc4qXnPl1s39Qh",
	"opciG75jSuM/Tuv8R81LsdwhnyHwQzdm1tyRkHe8UkSAj792E+8Xr+YBsGBtUWEqWreYOmY03M6NEgHt",
	"LvJQLEqxDb+EeBsw2IH4Z24d4zT1Ai0X7srubecQC37xIeXPhhexpo+JR7tl+UMqatf7/2tfocZThXyB",
	"VcnzUHHWl7zq8hmsKh2Iy65hs/+Z8pCvBRJoKlW3RKtDXoviBibTI1lX6u3PWDmfDtiDCr6DSka3WsZE",
	"y2+vZsueB96TlnLXuzA16mYAdFz38xD4cRnUD4P/ZE7gsWVMAf+fBe8jhY9jeKnG8QfAcif3TQJWslYv",
	"1DbTsDSHAkzIXO3Ued1mzQkmViFzDdxQxM35917xbFPeCukUYYoJbXyazSgFLIVsmaWQVW0TegxmvpW7",
	"CGGx0R/ROuJCG5MSnDB5xcvvr0BrUYxtnDsdVCI0LjkSHB2+b8KE0dypwwGEaXU4fBndmtHjZu4Cp6Jm",
	"FK5pLJcF10XcXEiWg3b3PrvmO3Nzj1LjHDjkU+KRNNPN1xF5l5C0CZBy553Ct/T3NADyO3T8THDYYFxw",
	"wllDph2rRvwzQxj+EA6bDd9mpVrh+92RA+FzHaOHj1RAJdEMTvLZtHWHeYz4DfZPg2UePCOyCmedMsX+",
	"c/89biWqkT9IYfeefLJR9h9UU9wtHcyAVLlqg/+JWIbnMfUG3qc9it/BB2EzPFUJtAfRJsKIf6hrFx/Z",
	"RQyD8AkUYiP49PJ53UiL1Et7sgxkaDEwe8L7wbSh7Dz34VlDU9rA1EBImfs8BUda2sg+H+6lEfDQFGL8",
	"We9O24TMuHGOqTm4PzNBVqkqy6fEfFIlmMK7CTykXRhH6CNyAoysuwmPMU1tpE7GsU6RpGPLLo4WaTrk",
	"7aryfUr/mJlohKN3XRBqibwMjzAZx/AlT2NMmfffmHXNYA2TYJxpyGuNZuJrvjtcxm4kA/nF384+ffzk",
	"lyeffsZcA1aIFZg2i32vDFwbFyhk3+7zYSMBB8uz6U0IeT8IccH/GB5VNZvizxpxW9OmqB0UwTvGvpy4",
	"AFJPcYflx260VzhOG9r/z7VdqUXe+Y6lUPD775lWZZmuItLIVQkHSmq3IheK00Aq0EYY6xhh1wMqbBsR",
	"bdZoHsRc0leUx0nJHIL92FOBsCMhV6mFjAXUIj/DrArea8RgW5WeV5GnZ9+6vJ5GFjoUGjEqZgGsUpUX",
	"7cWSpSDCF0Q6elnrDZ9oEY9iZBtmS9GyKUL0kedp0osLsO/n9t3iwDbN6d0mJsSLcChvQJpj/onxjCE3",
	"4SStaf+fhn8kUqDcGddolvt78IqkfrDnzfHZIO6hSf8xCbRhOowEeSAAI69tO+8ko4diUWJrTV4C9CcE",
	"B3Jf/Pi2dSwffBaCkIQOB8CLn8+27ZqXDB6cj5ww+tsGKdFSfh6jhM7yD73IDay3uUiiLfJGE2vBEFtS",
	"Q7Ewem5tnjevmEe0ksFjZ62UZU4zLcvEI2my4+CZignHqQT6ipcfnmt8JbSxZ4gPKF6PP42KX8rGSCZU",
	"mptlyHzJJ80dvYq9u6nlK3yY/V/g9ih5z/mhvBN+cJuhcYeXFF69bLzRINk1jklBVo8/YwtfvKXSkAvT",
	"d+5fB+GkeRgKWix9QCts7YGXqIfW+aOytyDjZYjEYd9F7q3GZ+8hbI/oR2YqIyc3SeUp6huQRQJ/KR4V",
	"F3s+cF3cstDHzRIuRakTj0y4NCxjPXV5lNrEXTq1geE6J9/WHdwmLup2bVOzhU2uF/L27U92MSXJV7q2",
	"h+uOWcbupMjHUSU+fof8YoQjP4afN0UxP45lnKasyiNZ8Xv7UYvyYMBKp8bB+/lsRRmMMIv/L74W0Ye9",
	"SwMEI3m+/NJvky6GEJNYa2fyaKoo49OEwgW+WyLbPL5qzGst7A7rUAcDmvglmY/p6ya3h88N0/jS/N1n",
	"1SXIEO/RZgKpTbhdv1a8xPuIXHzS3UKqPGFfUm59f1D+em/x7/DJX54Wjz55/O+Lvzz69FEOTz/9/NEj",
	"/vlT/vjzTx7Dk798+vQRPF5+9vniSfHk6ZPF0ydPP/v08/yTp48XTz/7/N/vOT7kQCZAQ1GNZ7P/lZ2V",
	"K5WdvTrP3jhgW5zwSnwDbm9QV15iqjFEao4nETZclLNn4af/P5ywk1xt2uHDrzNf72u2trYyz05Pr6+v",
	"T+Iupyt8+p9ZVefr0zAP5qDryCuvzpsYfYrDwR1trce4qU3yL/ft9ZcXb9jZq/OTlmBmz2aPTh6dPPal",
	"0iWvxOzZ7BP8CU/PGvf9FDPbnhpftOK0fauV9Nu9xpD1IJzrFRTsfvPq5t8az615EB7vLH0+ub8bIsZm",
	"FecFEpeveTvDKn4YjIVgPXn0KOyFl3SiC+cUX388ezczTR31vjAxQOqbFuAkZG0N0eGif5CXUl1Lhmk4",
	"6QDVmw3XO1pBBxvR4LhNfGXQyK7FFaZtc737OK8qXypkDOVYNa17ykNnJJCm1oQ7YVSCwhf8MCmUD8uU",
	"3BL7e9OyDiZL7A42euVgDulzmlSm3iHkcYY+Y0JYc0bI7DBA9HxW1Ql0fokPa8w+nM2j8hcEjSqLBuMD",
	"jL6q/x/BqCPdVZO20/21Bl5iYi33x8YRah4+aeDFzv/fXPPVCvSJX6f76erJadBCTt/5jCnv9307jSPC",
	"Tt91EssUB3qGiKdDTU7fhRLs+wfslN/2saZRh4mA7mt2usCya1ObQry68aUgzZvTd6iAj/5+6q2o6Y9o",
	"CKEb9jQkaBppSak40h87KHxnt24h+4dzbaLxcm7zdV2dvsP/INlGK6Kc2qd2K08xcOT0XQcR/vMAEd3f",
	"2+5xC0wXG4BTyyXVrd/3+fQd/RtNBNsKtHBaKGbT8r9S1sNTLF+6G/68k3nyx+E6OhnfDlzmmE3QhGiq",
	"bqK45PXRzz5nbsvspuWy6ee8GwrYQ0lq38rez2dP75Ard3N0J4D5ghcsJDbAuR9/uLnPJUV1O9GSRGCE",
	"4OmHg6Czfewb2LHvlGVfoa3m/Xz26YfciXPpNEdeBoHuhqLftOPTv0ad7N00kysSVBQlu+getbOiGBA9",
	"6ZBg7BcKb9cxjG3MqvJe2hZprQotpFvCfJrYPEwfSUnOgiAhVQGzWLm1uob3t+QJvfguru15wqSMvhF8",
	"6OGtth1Qk7kQ+9EvNHIiDfMBEj5/ESZt30f8yVP+5CkNT/n00ScfbvoL0FciB/YGNpXSXItyx36QzcOb",
	"G/O4s6JIJpDtHv2DPG4+22a5KmAFMvMMLFuoYudrYc06E1wCWcsGgsxpsC51NIYR7hnsVilppQ0Hnz37",
	"KRUW4Z83VvWiFDkjyzqalipu15Hlp8no2WV+8z2WiXmiXgMrRFk32RzstfKvpYcXSmRtsYqZf2i8ePAg",
	"Crtj10IW6vrBSQD3HzUgn/fwhmlmCQCjGN9habLWYegAHIA1Nh96GqdgZ8/kL/nN5i75sVP//HvboJqM",
	"ef958f130WtEsjRQQBC+hSPSxYcLWmFA/jXHiFAqYfqcbEDlDl/VWm5r06meePLnPfQn77897/+6SaFM",
	"dRMtFkQbsqToLjiZJPAmefu7zp/ebjGjcOxU4mP3O+NshTVvhxfUYsfOXwy0V+rWvxK+2GHT3q2Q4Pd9",
	"EI9i/CPsZZ9I4xayUrYJSqdF/Slk/ilk3kpxnXx4puiuScsSVaLmA31sHopKdx7+YPJyDPEagDLF/vRR",
	"j++dbPzQtpWyZVGSdShY9IGyU/TR/CeL+JNF3I5FfA2Jw4in1jONBNEdZ+uayjAwlVLRCbEMUkdoXpdc",
	"Rw+CD5mwz3DEtCr4u3CND22wS+KK7HX4bkBQwGxiA+/Whvcny/uT5f1xWN7ZYUbTFUxubfW6hN2GV42t",
	"y6xrW6jryEOOsFCw+9DHR4p//+/Tay5stlTal+zhSwt62NkCL099Zfzer20x2sEXrLAb/Rgno0v+esq7",
	"Tsuu49yx3rGOA6966qt3HI80CjkUwuc2Zi+OgUO230S//fSzY9kG9FW4EdqQrmenp5hUZ62MPZ29n7/r",
	"hXvFH39uyONdc494MnmPdKG0WAnJy8zHRmRt2NaTk0ez9/83AAD//9C/6X9HIAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
