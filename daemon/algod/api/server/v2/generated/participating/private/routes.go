// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
