// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
