// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
