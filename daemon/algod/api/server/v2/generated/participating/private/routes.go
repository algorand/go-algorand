// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
