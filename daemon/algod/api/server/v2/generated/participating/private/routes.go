// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/xcAAP//vJIG6DHhAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
