// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//9i4ArN6NAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
