// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /debug/extra/pprof)
	GetDebugExtraProf(ctx echo.Context) error

	// (PUT /debug/extra/pprof)
	PutDebugExtraProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDebugExtraProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugExtraProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugExtraProf(ctx)
	return err
}

// PutDebugExtraProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugExtraProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugExtraProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/extra/pprof", wrapper.GetDebugExtraProf, m...)
	router.PUT(baseURL+"/debug/extra/pprof", wrapper.PutDebugExtraProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
