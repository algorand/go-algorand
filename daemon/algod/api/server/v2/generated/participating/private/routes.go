// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+Pn/BQAA///R+YExQdIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
