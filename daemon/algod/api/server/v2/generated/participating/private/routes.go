// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
