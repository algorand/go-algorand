// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
