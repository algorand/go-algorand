// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7PHJw9mH/xMAAP//R/F5Rs4MAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
