// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"5NHsw/8NAAD//4E1DblrHwEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
