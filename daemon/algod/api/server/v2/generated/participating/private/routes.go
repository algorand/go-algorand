// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
