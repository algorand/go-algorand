// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"evb45OHsw/8JAAD////+/P3ODAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
