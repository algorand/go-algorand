// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"5PGuuUc8mbx/+/7/BwAA///V0uWKkPYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
