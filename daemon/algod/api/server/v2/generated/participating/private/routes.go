// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address basics.Address, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"mbhRIgEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
