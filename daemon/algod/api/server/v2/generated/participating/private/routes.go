// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
