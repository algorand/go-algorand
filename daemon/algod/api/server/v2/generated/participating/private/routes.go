// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"fNuQx7vmHvFk8v7t+/8fAAD//wbADiDz9AAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
