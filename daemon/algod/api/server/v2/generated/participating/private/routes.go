// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4f8GAAD//wWPBup9HwEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
