// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/wrNGOTAIQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
