// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
