// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
