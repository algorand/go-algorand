// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
