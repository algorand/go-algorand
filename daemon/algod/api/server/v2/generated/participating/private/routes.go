// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

<<<<<<< HEAD
	"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",
=======
	"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",
>>>>>>> master
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
