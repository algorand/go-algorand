// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Xv+/AAAA///G/Qeax84AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
