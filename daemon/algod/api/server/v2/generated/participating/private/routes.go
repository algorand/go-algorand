// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
