// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
