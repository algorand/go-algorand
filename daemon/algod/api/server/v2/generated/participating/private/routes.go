// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address basics.Address, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
