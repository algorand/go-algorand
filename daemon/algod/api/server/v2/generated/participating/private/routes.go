// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
