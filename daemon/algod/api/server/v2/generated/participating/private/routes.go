// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
