// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"jZBHueAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
