// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
