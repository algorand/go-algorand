// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
