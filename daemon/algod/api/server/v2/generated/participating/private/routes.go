// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
