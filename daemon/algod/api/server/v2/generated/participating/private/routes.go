// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
