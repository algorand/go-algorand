// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"njw5eTT58P8CAAD///Eo63BNCwEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
