// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"///1m++lZrsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
