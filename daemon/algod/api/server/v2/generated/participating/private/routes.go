// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9f5PbtpLgV0Fpt8qxT5zxr2RffPVqbxIn2bk4icueZG/X9r1AZEvCGwrgA8AZKT5/",
	"9yt0AyRIghI1M7FfqvKXPSIJNBqNRv/u97NcbSolQVoze/Z+VnHNN2BB4188z1UtbSYK91cBJteiskLJ",
	"2bPwjBmrhVzN5jPhfq24Xc/mM8k30L7jvp/PNPyjFhqK2TOra5jPTL6GDXcD213l3m5G2mYrlfkhzmiI",
	"8+ezD3se8KLQYMwQyp9kuWNC5mVdALOaS8Nz98iwa2HXzK6FYf5jJiRTEphaMrvuvMyWAsrCnIRF/qMG",
	"vYtW6ScfX9KHFsRMqxKGcH6tNgshIUAFDVDNhjCrWAFLfGnNLXMzOFjDi1YxA1zna7ZU+gCoBEQML8h6",
	"M3v2ZmZAFqBxt3IQV/jfpQb4DTLL9Qrs7N08tbilBZ1ZsUks7dxjX4OpS2sYvotrXIkrkMx9dcJ+qI1l",
	"C2Bcslfffs2ePHnypVvIhlsLhSey0VW1s8dros9nz2YFtxAeD2mNlyuluSyy5v1X336N87/2C5z6FjcG",
	"0oflzD1h58/HFhA+TJCQkBZWuA8d6ndfJA5F+/MClkrDxD2hl+90U+L5P+mu5Nzm60oJaRP7wvApo8dJ",
	"HhZ9vo+HNQB03q8cprQb9M3D7Mt37x/NHz388C9vzrL/9n9+/uTDxOV/3Yx7AAPJF/Naa5D5Lltp4Hha",
	"1lwO8fHK04NZq7os2Jpf4ebzDbJ6/y1z3xLrvOJl7ehE5FqdlStlGPdkVMCS16VlYWJWy9KxKTeap3Ym",
	"DKu0uhIFFHPHfa/XIl+znBsaAt9j16IsHQ3WBooxWkuvbs9h+hCjxMF1I3zggv55kdGu6wAmYIvcIMtL",
	"ZSCz6sD1FG4cLgsWXyjtXWWOu6zYxRoYTu4e0GWLuJOOpstyxyzua8G4YZyFq2nOxJLtVM2ucXNKcYnf",
	"+9U4rG2YQxpuTucedYd3DH0DZCSQt1CqBC4ReeHcDVEml2JVazDseg127e88DaZS0gBTi79Dbt22/+/X",
	"P/3IlGY/gDF8BS95fslA5qqA4oSdL5lUNiINT0uIQ/fl2Do8XKlL/u9GOZrYmFXF88v0jV6KjUis6ge+",
	"FZt6w2S9WYB2WxquEKuYBltrOQYQjXiAFDd8O5z0Qtcyx/1vp+3Ico7ahKlKvkOEbfj2rw/nHhzDeFmy",
	"CmQh5IrZrRyV49zch8HLtKplMUHMsW5Po4vVVJCLpYCCNaPsgcRPcwgeIY+DpxW+InDCIKPgNLMcAEfC",
	"NkEz7nS7J6ziK4hI5oT97JkbPrXqEmRD6Gyxw0eVhiuhatN8NAIjTr1fApfKQlZpWIoEjb326HAMht7x",
	"HHjjZaBcScuFhMIxZwRaWSBmNQpTNOF+fWd4iy+4gS+ejt3x7dOJu79U/V3fu+OTdhtfyuhIJq5O99Qf",
	"2LRk1fl+gn4Yz23EKqOfBxspVhfutlmKEm+iv7v9C2ioDTKBDiLC3WTESnJba3j2Vj5wf7GMvbZcFlwX",
	"7pcN/fRDXVrxWqzcTyX99EKtRP5arEaQ2cCaVLjwsw3948ZLs2O7TeoVL5S6rKt4QXlHcV3s2PnzsU2m",
	"MY8lzLNG240Vj4ttUEaO/cJum40cAXIUdxV3L17CToODludL/Ge7RHriS/2b+6eqSve1rZYp1Do69lcy",
	"mg+8WeGsqkqRc4fEV/6xe+qYAJAiwds3TvFCffY+ArHSqgJtBQ3KqyorVc7LzFhucaR/1bCcPZv9y2lr",
	"fzmlz81pNPkL99Vr/MiJrCQGZbyqjhjjpRN9zB5m4Rg0PkI2QWwPhSYhaRMdKQnHgku44tKetCpLhx80",
	"B/iNn6nFN0k7hO+eCjaKcEYvLsCQBEwv3jMsQj1DtDJEKwqkq1Itmh8+O6uqFoP4/KyqCB8oPYJAwQy2",
	"wlhzH5fP25MUz3P+/IR9F4+NoriS5c5dDiRquLth6W8tf4s1tiW/hnbEe4bhdip94rYmoMGJ+XdBcahW",
	"rFXppJ6DtOJe/g//bkxm7vdJH/8xSCzG7ThxoaLlMUc6Dv4SKTef9ShnSDje3HPCzvrf3oxs3ChpgrkR",
	"rezdTxp3Dx4bFF5rXhGA/gndpUKikkYvEay35KYTGV0S5ugMR7SGUN34rB08D0lIkBR6MHxVqvzyP7hZ",
	"38GZX4SxhscPp2Fr4AVotuZmfTJLSRnx8WpHm3LE3Iuo4LNFNNVJs8S7Wt6BpRXc8mhpHt60WEKox++Q",
	"6YFO6C4/4X94ydxjd7Yd66dhT9gFMjBDx9k7GQqn7ZOCQDO5F9AKodiGFHzmtO6joPy6nTy9T5P26Buy",
	"Kfgd8otoduhiKwpzV9uEg43tVSygnj8njc7CxiS0tmZVXGu+S6+d5pqCgAtVsRKuoOyDQCwLRyOEqO2d",
	"84Wv1DYF01dqO+AJagt3shNuHJSrA3YPwPfcQ6b0Yczj2FOQ7hboZHmD7EHGIpCbpbVWny2Uvhk77vFZ",
	"yVobPONu1Og2mveQhK/WVebPZsKORy/0Bmrdnvu5aH/4FMY6WHht+e+ABeNGvQssdAe6ayyoTSVKuAPS",
	"XydvwQU38OQxe/0fZ58/evy3x59/4Uiy0mql+YYtdhYM+8wrq8zYXQn3hytDdbEubXr0L54Gy2133NQ4",
	"RtU6hw2vhkORRZhkQnqNufeGWOuiGVfdADiJI4K72gjtjJwdDrTnwjiRc7O4k80YQ1jRzlIwD0kBB4np",
	"2OW10+ziJeqdru9CtwetlU5eXZVWVuWqzK5AG6ES7qWX/g3m3wjyftX/naBl19wwNzfawmuJElaCsuxW",
	"Tuf7NPTFVra42cv5ab2J1fl5p+xLF/nBtGpYBTqzW8kKWNSrjmq41GrDOCvwQ7yjvwNLcovYwGvLN9VP",
	"y+Xd6M4KB0rosGIDxs3E6A0nNRjIlaTQkAPqqh91Cnr6iAk2SzsOgMfI653M0fB6F8d2XJPfCIleILOT",
	"eaTWOxhLKFYdsry9+j6GDprqnkmA49DxAh+j5ec5lJZ/q/RFK/Z9p1Vd3bmQ159z6nK4X4y3LRXu22BU",
	"EHJVdsORVg72k9QaP8mCvg7H168BoUeKfCFWaxvpWS+1Usu7hzE1SwpQfEBaaum+GeqqP6rCMRNbmzsQ",
	"wdrBWg7n6Dbma3yhass4k6oA3PzapIWzkQAW9Jyjw9/G8p5dk+K5AEddOa/dauuKoTt7cF+0H2Y8pxOa",
	"IWrMiDOv8cLSWzQdBUeUGnixYwsAydTCe8y8Lw8XydEXb4N440XDBL/owFVplYMxUGTeUncQtPAeXR12",
	"D54QcAS4mYUZxZZc3xrYy6uDcF7CLsPIEcM++/4Xc/8TwGuV5eUBxOI7KfQ2dg/vFh1CPW36fQTXnzwm",
	"O66BhXuFWYXSbAkWxlB4FE5G968P0WAXb4+WK9DooPxdKT5McjsCakD9nen9ttDW1Ug8pFdvnYTnNkxy",
	"qYJglRqs5MZmh9iye6mjg7sVRJwwxYlx4BHB6wU3lpzqQhZoC6TrBOchIcxNMQ7wqBriRv4laCDDsXN3",
	"D0pTm0YdMXVVKW2hSK1BwnbPXD/CtplLLaOxG53HKlYbODTyGJai8T2yaCWEIG4b35OPOhkuDj007p7f",
	"JVHZAaJFxD5AXoe3IuzGMWEjgAjTIpoIR5ge5TSBaPOZsaqqHLewWS2b78bQ9JrePrM/t+8OiYvb9t4u",
	"FBgMRfPve8ivCbMUDbjmhnk42IZfOtkDzSDk/R/C7A5jZoTMIdtH+ajiubfiI3DwkNbVSvMCsgJKvhsO",
	"+jM9ZvR43wC44626qyxkFNaV3vSWkkMUzZ6hFY5nUsIjwycsd0fQqQItgfivD4xcAI6dYk6eju41Q+Fc",
	"yS0K4+GyaasTI+JteKWs23FPDwiy5+hTAB7BQzP0zVGBH2et7tmf4r/A+AkaOeL4SXZgxpbQjn/UAkZs",
	"qD5iPjovPfbe48BJtjnKxg7wkbEjO2LQfcm1FbmoUNf5HnZ3rvr1J0j6XVkBlosSChY9IDWwir9nFJDU",
	"H/NmquAk29sQ/IHxLbGcUhgUebrAX8IOde6XFOkamTruQpdNjOruJy4ZAhri55wIHr8CW57bcucENbuG",
	"HbsGDczUi42wliLYu6quVVUWD5D0a+yZ0Xs1kz7FvW7W1zhUtLzhVsxnpBPsh++ipxh00OF1gUqpcoKF",
	"bICMJASTAmBYpdyuCx9MH8KpAyV1gPRMG13azfV/z3TQjCtg/6VqlnOJKldtoZFplEZBAQVIN4MTwZo5",
	"fahLiyEoYQOkSeKTBw/6C3/wwO+5MGwJ1yEDxb3YR8eDB2jHeamM7RyuO7CHuuN2nrg+0OHjLj6vhfR5",
	"yuFQCz/ylJ182Ru88RK5M2WMJ1y3/FszgN7J3E5Ze0wj08JMcNxJvpyOy364btz312JTl9zehdcKrniZ",
	"qSvQWhRwkJP7iYWS31zx8qfmM8yugdzRaA5ZjjkhE8eCC/cNpZEc0g3b8Dqx2UAhuIVyxyoNOVDagxP5",
	"TAPjCaOAyHzN5Qolfa3qlY/Io3GQU9eGbCq6loMhktKQ3coMrdMpzu2jsEPmi5ODgDtdrG/aJs3jmjfz",
	"+WSnKVdqhLy+qT/p3ZrPRlVVh9SrVlUl5HTTdyZw8Y6gFuGnnXiiDwRR54SWIb7ibXGnwG3u72Nrb4dO",
	"QTmcOIoRbB+OhQk6Pbnc3YG0QgMxDZUGg3dLbF8y9FQt41Q9f/mYnbGwGZrg6dO/jRy/V6OKnpKlkJBt",
	"lIRdMjtdSPgBHyaPE95vIx+jpDH2bV956MDfA6s7zxRqvC1+cbf7J7TvajLfKn1XvkwacLJcPsF1eNBP",
	"7qe8qYOTl2XCJ+gTefoMwMybwgFCM26MygUKW+eFmdNB825En/XTRf/LJjz5Ds5ef9ye8yvOEUXjLpQV",
	"4ywvBZp+lTRW17l9Kzkal6KlJqKWghY9bm78OryStm8mzI9+qLeSY8RaY3JKRlosIWFf+RYgWB1NvVqB",
	"sT0lZQnwVvq3hGS1FBbn2rjjktF5qUBj6NAJvbnhO7Z0NGEV+w20YovadsV2zFMzVpSl98S5aZhavpXc",
	"shK4sewHIS+2OFzw1ocjK8FeK33ZYCF9u69AghEmS0dXfUdPMRLYL3/to4KxrgA9DlGWbeLszC2zkyv/",
	"fz/792dvzrL/5tlvD7Mv/8fpu/dPP9x/MPjx8Ye//vX/dX968uGv9//9X1M7FWBPZVF5yM+fe5X2/Dnq",
	"La3zZgD7RzPcb4TMkkQWh2H0aIt9hhnDnoDud61adg1vpd1KR0hXvBSF4y03IYf+DTM4i3Q6elTT2Yie",
	"FSus9Uht4BZchiWYTI813liKGgYkpvMV0ZvoUxDxvCxrSVsZpG9KxwmBYWo5b3JSqVzNM4YJi2seohr9",
	"n48//2I2bxMNm+ez+cw/fZegZFFsU+mkBWxTSp4/IHgw7hlW8Z0Bm+YeCHsyBo6CMuJhN7BZgDZrUX18",
	"TmGsWKQ5XEhy8MairTyXFNHuzg/6Jnfe5aGWHx9uqwEKqOw6VcaiI6jhW+1uAvTiRSqtrkDOmTiBk76x",
	"pnD6oo/GK4EvsZwCap9qijbUnAMitEAVEdbjhUyyiKTopxfP7y9/c+fqkB84BVd/zsYRGf62it377psL",
	"duoZprlHmc00dJSLmlClfbpVJ5LIcTMq3kNC3lv5Vj6HpZDCPX/2Vhbc8tMFNyI3p7UB/RUvuczhZKXY",
	"s5DB9Zxb/lYOJK3R+lpR7hyr6kUpcnYZKyQteVLNlOEIb9++4eVKvX37bhBUMVQf/FRJ/kITZE4QVrXN",
	"fMWHTMM11ymnlWky/nFkKumyb1YSslVNls1QUcKPn+Z5vKpMP/N3uPyqKt3yIzI0Pq/VbRkzVukgizgB",
	"haDB/f1R+YtB8+tgV6kNGPbrhldvhLTvWPa2fvjwCbBOKuyv/sp3NLmrYLJ1ZTQzuW9UwYWTWglbq3lW",
	"8VXKN/b27RsLvMLdR3l5gzaOsmT4WScFN0TU41DtAgI+xjeA4Dg6nRAX95q+CtW90kvAR7iF+I4TN1qP",
	"/U33K0rKvfF29RJ7B7tU23XmznZyVcaReNiZpujPyglZIYzCiBVqq74+0gJYvob80heugU1ld/PO5yFS",
	"xwuagXUIQyWNKKUOi2qgZ2EBrK4K7kVxLnf96gYGrA3xwK/gEnYXqq3JcUw5g252vRk7qEipkXTpiDU+",
	"tn6M/ub7cDBU7KsqJKljtmIgi2cNXYRvxg8yibx3cIhTRNHJ/h5DBNcJRBDxj6DgBgt1492K9FPLc1rG",
	"gm6+RHmjwPuZf6VVnnzkVrwatLrT8w1gfTR1bdiCO7ld+dJelEEecbHa8BWMSMixc2dinnbHIYSDHLr3",
	"kjedWvYvtMF9kwSZXs7cmpOUAu6JIxVUZnrxemEm8h96zwRW7PQIW5QoJjWBjcR0uO442agE4RhoaQIG",
	"LVuBI4DRxUgs2ay5CVXHsDhbOMuTZIDfsSLCvjo451GoWVSBralyE3hu/5wOtEtfDSeUwAl1b2LVckIN",
	"GyfhY3R7ajuURAGogBJWtHB6ORBKW52h3SAHx0/LZSkksCwVtRaZQaNrxs8BTj5+wBhZ4NnkEVJkHIGN",
	"fnEcmP2o4rMpV8cAKX11CR7GRo969Dek874ojtuJPKpyLFyMeLXywAG4D3Vs7q9ewC0Ow4ScM8fmrnjp",
	"2JzX+NpBBuVYUGztFV/xkRn3x8TZPQ4QuliOWhNdRTdZTSwzBaDTAt0eiBdqm1HiZ1LiXWwXjt6Toe2Y",
	"hpo6mFT45p5hC7XFaB+8WiiU+gAs43AEMCINfysM0it+N3abEzD7pt0vTaWo0CDJeHNeQy5j4sSUqUck",
	"mDFy+SyqZXMjAHrGjrYwtFd+DyqpXfFkeJm3t9q8rdEWsoZSx3/sCCV3aQR/QytMU33mZV9iSdopukEr",
	"3cI7kQiZInrHJoZOmqEryEAJqBRkHSEqu0x5Tp1uA3jjvA6fRcYLLO/D5e5+FAmlYSWMhdaIHuIkPoV5",
	"kmNVQaWW46uzlV669b1SqrmmyI2IH3aW+dFXgKHES6GNzdADkVyCe+lbg0r1t+7VtKzUjbWiGryiSPMG",
	"nPYSdlkhyjpNr37e75+7aX9sWKKpF8hvhaSAlQXWjE5GYO6ZmoJ09y74BS34Bb+z9U47De5VN7F25NKd",
	"4w9yLnqcdx87SBBgijiGuzaK0j0MMsqcHXLHSG6KfPwn+6yvg8NUhLEPRu2E/N2xO4pGSq4lMhjsXYVA",
	"N5ETS4SNSi4PU1pHzgCvKlFse7ZQGnVUY+ZHGTxCoboeFnB3/WAHMIAi7StYgoakCaF5RNHRjbgUFyrE",
	"zO5OKZzEpo8a/7umtHBRNp0jooluYATzpSXH97iNveyUXuwuJdG7YDhrLaT94umQIhsbv4Nlym68TpvW",
	"XztFo4v4SN2iUuYHNkGMKO4xeUbsOZ5KmNCIY0i2TQ7kIcq9AF5+D7tf3Lu4nNmH+ex2huwU5fsRD+D6",
	"ZXPYknjGQAkybHb8UkeinFeVVle8zLy5f4xRaHXlGQW+HrwDH/niSVP2xTdnL1568D/MZ3kJXGeN4Da6",
	"Knyv+sOsiopRjhyQUOjfaeBBgyLBPtr8poJe7CK4XoOvmB7pBoPSrq37JzqK3mWwTMdrHeR93lNFS9zj",
	"sYKqcVi1xlTyV3V9VPyKizJYMQO0I7FVuLhp9YGTXCEe4Na+rshlmd0puxmc7vTpaKnrAE/CuX7Ckkhp",
	"6UT6gknIirzvqsuC7hlPWae46tOF2ra358Q7+VulO8zfB9YnfV/hwu4zxju5uz0eR0KNQheOvuB5wpCW",
	"2K+rX91pfPAgPmoPHszZr6V/EAGIvy/872gsevAgaZZMah2OSaBSIfkG7jdBgqMb8XFVVAnX0y7os6sN",
	"og5jvcfJsKFQcmIFdF977F1r4fFZ+F8KKMH9dDiBprfphO4YmCkn6PVYIH0TI7Ghxh+GKdkPCcIcDkda",
	"yOw3HEsbk5V3eIRkvUHLaGZKkad9RnJhHHuVFAvgXmb48ohy7UasxUhoiaxFNJZ7bUqtrh6Q0RxJZJpk",
	"ubAWdwvlj3ctxT9qYKIAad0jjfda76oLygGOOhBInS40nMsPTB7Hdvjb6ExxWe++zIhA7FeY4siDAbjP",
	"GxNgWGhjYW91pmMDmOIZB4x7T/CRpw9PzRSMve5GEEzTY6Y0gAuMztcXH5kj2dBNmGyp1W+QtluhuS+R",
	"gBkKmQuM2vsNYvUsbmPUYSmNtbrtS9fOfmi7p+vGYxt/a104LLqpnX6TyzR9qo/byJsovSZdJtAjeUwJ",
	"i10X3ci2EdaCxyuK5cCy1cGtySWdJ8o+7ARIp09lnIpwSuO3p9LDPEjfKPn1gqdqejtdyMEUbW/HAWsV",
	"Cx+HDTBNih7NzqIApOZdQRVMKtBtAvqwGtoN9RqadrJG0yowSFGx6jKnoJHSqMQwtbzmknqhue+IX/mv",
	"DZDHxH11rTTWHzJpX3EBudjwMq3gFPnQL1iIlaA2X7WBqI+UH4haKBIV+V5cTeKpR835kj2cR83s/G4U",
	"4koYsSgB33hEbyy4weuy8V40n7jlgbRrg68/nvD6upaFhsKuDSHWKNbonijkNREPC7DXAJI9xPcefck+",
	"w1gPI67gvsOiF4Jmzx59iZ46+uNh6pb1bdr2sewCefZ/ep6dpmMMdqExHJP0o54kS7VQn9bx22HPaaJP",
	"p5wlfNNfKIfP0oZLvoJ0eOHmAEz0Le4mel96eJEFNRk0VqsdEzY9P1ju+NNIypJjfwQGy9VmI+zGRwQY",
	"tXH01DaJoknDcNSx0Nf3D3CFhxhYU4W4gp6t6yOrMXwzEnKM4U8/8g100TpnnIpOlaINeQtdR9h5qGmH",
	"DQ+aPgeEGzeXWzrKkhgBt2SVFtKi/aO2y+wvTi3WPHfs72QM3GzxxdNE44BubW15HOAfHe8aDOirNOr1",
	"CNkHmcV/yz6TSmYbx1GK+22KYHQqRyOA0rEeYwEn+4eeKvm6UbJRcqs75MYjTn0rwpN7BrwlKTbrOYoe",
	"j17ZR6fMWqfJg9duh35+9cJLGRulU4Vq2+PuJQ4NVgu4woDv9Ca5MW+5F7qctAu3gf7TuquDyBmJZeEs",
	"JxWBYHTal+jlRPhffvBNiQey90hwGkWfNd985AS2pNGSJLSO2ezRr0w7TRKl0QcPEOgHD+ZemPv1cfcx",
	"MakHD9Ll25KGI/dri4Xb6HX4bWoPv1IJM07oldK40H2SWsKMNsZq3QN3lBd+qDnr9qX4+Hfh3YQ/p0Nc",
	"0qfg7ds3+CTgAf/oI+ITH3ncwDaIj1YyQihRX54kyRTN8yi4jrOv1HYq4fQ4aSCefwIUjaBkopEJVzLo",
	"O5R0Oh+Meoho1I26gFI5VSkuqR5bpf84eHaLn+/Bdi3K4pe2wEbvItFc5utkaNLCffi3tj9ws0Rilckq",
	"zWsuJZTJ4UhD+1vQ5BK65t/V1Hk2Qk58t9/3ipbbW1wLeBfMAFSY0KFX2NJNEGO1W7ugyY0rV6pgOE9b",
	"ErhljsMGclFXm3/UYGzqaOADis9Hl41jvtRUhYEs0IZzwr7DLGIHS6feI9pOQkGubnGauioVL+ZYKOzi",
	"m7MXjGalb6jLJTV1WaHpoLuKpK13erGepmFlOgt1+jj70+Lcqo3Nmh4sqTof7o22S4zoBQCgUSHGzgl7",
	"HjXzp5IgbgiGdeL0Boqo5QtpFEgT7j/W8nyNhpLORTZO8tO7EQWqNFFL9Ka1aVMCHM+dg9s3JKJ+RHOm",
	"7Br0tTCAeUdwBd3SIk2dHW+oC6VGusvTtZREKSdHyBRNwe9j0R6AI4EkeDiTkPUQf6SaTM28jm3O9Bq/",
	"SlYk7Xd6GvRCp0IVTcvKH0I3ey6VFDnWA00JRFgGYZrPZELp1LSzw8z8CU0crmR/qSbjwWNxtONUYIQe",
	"cUP/Y/TUbSpRB/1pYev7DqzAGs/ZoJiHNmneOi+kAV/S3RFRzCeVTkRYpESOrPHmHklGmOE8Ym751j37",
	"0RvjMPXvUkhUuz3avJhN9nPsYG+dri4sWykwfj3dMi/mjfvmBCueFLB9dxI63uMYFNPjlk0BbMOhzkI4",
	"mw8fc+9+7d71dSibnzuxKTTpWVX5Sceb6KU7h27lKIJTQRTBqx0htxk/Hm0Pue2NQ8X71BEaXGEIDVR4",
	"Dw8Io2ko1+ve6lQEoih8g1E0frIYlZAJMF4IGfw56QsiT14JuDF4Xke+M7nmlkTASTztAnjZxMz0GZqx",
	"3iF426H6VTgdSnCNYY7xbWx74Y0wjuaFVnDjcsfCoXDUHQkTX/OyieNMdLZDqcoLUQUmh/Z63aUYh2Pc",
	"oZtm9wI40EB33n6OJWmPvYnG6n0s6mIFNuNFkaqw/xU+ZfiUFTVKDrCFvG4qsVcVy7G8Xbfe35Da/ES5",
	"kqbe7JkrvHDL6aLmkQlqiBtYhh3GfOLFDv89prVxE8F5dEZHCNcsjityOcxQSUm9jqYzI1bZdEzgnXJ7",
	"dLRT34zQ2+/vlNJLteoC8imMpCNcLt6jFH/7xl0ccRGsQbAsXS1NjSoMTFWhBzqqjU11lS5XwqtsUGwf",
	"XbBNS+H9Zojx5sBzvPxGsqhikzfdr2QGHsulykdT/7j1RQgsZ3tZ0GhiNwUu9ozoQ3/GWLAixSrenfHZ",
	"r3UvQkMc+RCg70OSCqu48AErLbMYYtaH+Q7TPafE0bYb3F+ET9kbtY9+fzWWXhdq3uLzfvPQS/CViSoN",
	"V0LVIRQkBGQGlZB+7bTibBIck+tPhjl/auPzqKn8wjdxomV6nfz7Xyh8l4G0evdPYDgfbPqgLelQ2iXz",
	"VPsKa/p/TOoH0rkVp9SDTpUe9rJhpzHqgbauA7J6PkUcGLZpnc/Oi6MuzFT56hmNkjp26aar49U924qe",
	"eMQqZUTbhifVjXVi5PMFNlSNqpMOxwoRcVeQW+y91Eb6aIBjapW6yaL+7n9W+RxRp5sAcV/cc19Fz2HD",
	"pQN3/CDpPiocQc1qTqbXrzxr4jkpHeWaG6z2TC3Wuwmck9PIlkvIrbg6UOTgP9cgowT6ebDLICzLqOaB",
	"aJIqsEbe8VbHFqB9NQj2whPVqr41OGNJtZewu2dYhxqS3XOajKKblEdDDCB3yByJKJOKlyJDsg9hEaah",
	"DMRCiE+kz6EtNDvaeDMq2XHDuQJJuoujLeOxZ8p0579Jc7lPjypug/kBY3UQho3DxvWP59inzTRNsUN5",
	"tVhLZ+fDItTXvjwblqRofCehUBuY8FuoP0OzlOIS4tag6Km65roIbyRNL8Gqk+25jwbFC0LTqz7Qy2Zm",
	"0UaTD33VibKmmJiRl8qJEdlYdks3gLuJfrpnKEyNuuxgaLqDawnat1BG+bdUBjKrQvT5Pjj2oYJi8W6E",
	"BDNaSpyAGy3w96qtYIgtFTgW9OM+BC9eINOw4Q46HdUZHJ9zH7K/puchIziU1D9oYWro9XBvp5BHIMwA",
	"iTHVL5m/LQ9nGt/E2CSkBJ0Fz1O/6KAE3fWGVFoVdU4XdHwwGoPc5JKee1hJ0k6TD1fZ0xGijN1L2J2S",
	"EhSaYoUdjIEmyYlAj4pV9Tb5Ts1vJgX36k7A+5SWq/msUqrMRpwd58NKiX2KvxT5JRTM3RQh3nakUSH7",
	"DG3sjTf7er0LlQGrCiQU908YO5OU4RAc291WHb3J5T27b/4tzlrUVLzUG9VO3sp0qDiWFdW35GZhmP08",
	"zIBjdbecigY5UIdvO1KlUfPrRNvOk6la+dDV3G+l2BIVQZGSSV6Tx+prPOgpwxHmY0eFA9CRyZn3dDFT",
	"qlRI5k1yxt1QaUzFkyFAFuSU1OUGCj94EgFNm8QDgUJNjFDbYa6NExqKR2WprjM8RllTZzaldLn3TPea",
	"CKX12+8cvS0gijjixosQO7bmBcuV1pDHX6TTogiqjdKQlQoDkFK+0aV1EuEGcyEkK9WKqcop+lSvOXiR",
	"kv0PB3PVUnK80CGK90iigOc5ap+K+W9Y883UKe+qvSQVP6FFZ+RlGwmJBOOLnXgM0ctDePd0eDy+e+TF",
	"OmEsQ8wFAjm6RaQn8qM7u0VgTjhchw2FZ6kOmN119XuxjnVGtmoj8jS6/1ghQqOBPSnqTVZ9oeYKlKeL",
	"ryFPiflY4xHG0zNEM0i+KJP3gz9+3jOGdO7+i2JDf1y2BM/PRnjo8Eh71p/loxdUDwCElJLHbK2pI0N8",
	"fTR9XtWKkk3Rr9cHdCLDwfCJ28HmRrhzoCzcCqhByFYD4GekMc2pOg+Ffy3UNjy/35bvuRHwH/ZTeaqL",
	"beIUN6Tlm+yGVP8RjpCMKtkfxEGdzRdTQzma7jkTmX8EwHhwRweGSSEex4Kx5KKEIuMJJJ83ivU8Ug98",
	"WkC/J5ownpPnnAxra2Bu7FqDTz2nlua9HqoVd6SkmteH5i9ZwBYM5oVTI0huyFgbjMa+n3pfg1FVVsIV",
	"dGJefD58jVKIuIK4Fzt9zAqACl0ofcU+FcwR3+U9bc+vPYvCAaZgN6n+EWJpp9gB3S6piW5lRsfETD1K",
	"DqIrUdS8gz9zi67U4w2pB+JjRmIiHYgp0/xMI7wKA5yF71OiTMDEu2l86GgWlEbdPgZ0MLgLT1Ty1Mt0",
	"bFdc7KGxCuNsReM9IhJv+Yap+LUct6IMSb6VxKd3i48Q+80WcpRqusFLt8cJw8GY6RVyGRXBdbPDN7fG",
	"fRIa3kvCo+OlVA0DyGBbZay1lYd1NHQRt6zHLljSib1OasbOE57/e/43x8a9NJBTAakRRtyZ/zkEtwfW",
	"lm0svl6gFc2FFoK05r60WF9/FFF46obvmNL4j1SW/aPmpVju8IQS+OEzZtbckZD3s5AD0Ad9uYn3Cybz",
	"AFhQYVWYitYtpo4ZDbdzo0RAuyuQKe1N9ht+CfE2oG+TOE9uHcsx9WIjjMHLrredQyz4xYf08A0vIMol",
	"wSJV3Q5koWyh+/p/tqkv8VShtkxV8rztKGz4pmdVpNZGgbjsGjb7c6OG6nEggaZdUku0OuREFlS6hPDX",
	"1ClASQT/sxBWc73bE6l50P2dCjhGyfkQ2IM2MiiG39kyjulr2KaX7skqm7SUu96FqU72AdDoqQsFfg6A",
	"T4XZQjGgj4H/ZP24sWVMAf+fBe8j3XdieKnRzkfAcidvOgErmQAXaptpWJpD/mSyATpFWLcZ1yGIQMhc",
	"AzfkYD//yatsbXk0IZ0KSSFgjQujGaWApZAtsxSy6na79+waq6TJXYSw2JKKaB2xmI9JCU4Mu+LlT1eg",
	"tSjGNs6dDur+EZenDtZj/21C+W/u1OEAwrTaD6ZjQZvuE73mLvBCLJegKTrLWC4Lrov4dSFZDtrd++ya",
	"78zNzfQOWl07+eKAoZ5H0kw3STgy2SNpEyDlzvuAbmlEbwDkd2hNn2AFxzDAhAWcjCJWjRi9hzCkc9P5",
	"NivVCpN0RgjQ16FDNwUpK0qiwZbkoePmMeI32D8NluD1B98qnHXKFPvP2U+IOlR4fpbC7j1pZE3rZ01R",
	"WBsdhED/ctXG1tLmDOk/leh2Qc3142S3fq/asNfkY6f5YKT3TteCO7KL6GX0WZKxudZM92R0HJmpdDrS",
	"YTPUbc2e6FkwUXf/3Ec/DI0+A6WYkDL3yYhH2oTIkhzugRHwqMGdP1vdaRuPtBtnuqwRuV/TEFWqyvIp",
	"IVVUpbvwBm0PaRfGEfqIzNUj6268z23P5U51iE4Be5KUbyLu9groH/LLVPk+JXvMoDHCQbvGcrVEXoZH",
	"mMw4GCjfGC/m/RSOrsGmYRKMMw15rdGgec13h1uMtEabdPYrjRxcSSGov4HaEyOxIxJtZLKDxzGmwgSH",
	"TPVqHvZOuPvFUFp3G3j6+y3Hh5alF3Amveyrlmw/vbVG9UAqCVpzgmOCwYXgqRsscMyWNyEx8c62qjkt",
	"v8cGJS/0mzU4mwTaMEktgU0EYCT7pJM3EPc/bOuraTKjocEt+Cb6/OKH1mdxMEwSIQkfHAAvTidp32si",
	"+zw4n7hQ2Q8NUqKlvBujhM7yD2Wo+AW2Tp5oi7xWYS1QN1oqt9Ldlyj9yHzdZPWMiBGD5B9sduhEybJM",
	"JA2RooNnKiYcd4frK15+/MQf7IJ5hviA4tV4qHCcORIjmVBpbla35gWfNHeUJXJ3U8uXmKj0n+D2KHkt",
	"+KG8f2fA/FFN5SUFdS190qcbkl3jmOS/f/QFW/hKuJWGXJi+34iM+z7tBRMlQIulzzqCrT2QmXFonb8o",
	"ewsyXgYnL/sxsv8q1LNbCNsj+omZysjJTVJ5ivoGZJHAX4pHxZ2zDlwXl53051aqi240peGO06CjgiZH",
	"pkEPe4JNXR6l+rpLpzYwXOfk27qD28RF3a5tag7/5LK12Mt8Sup9usSs+xxz/++k1uxRlWZ/h6x/wpEf",
	"w8+bophfxurAUa2zkZKDvf2oRXnQo9spIPlhPluBBCMMlkj8my/s/HHv0gABZSIOjyrBepv0aUJMYq2d",
	"yaOpotKQE6pC+s8SNSAxyj+vtbA7bOoVNF7xt2R9gu+aXFefK90Ym/3dZ9UlNI0V28zY2oTb9TvFS7yP",
	"yAYu3S2kyhP2zZZvqtLbb9hf7y3+DZ785Wnx8Mmjf1v85eHnD3N4+vmXDx/yL5/yR18+eQSP//L504fw",
	"aPnFl4vHxeOnjxdPHz/94vMv8ydPHy2efvHlv91zfMiBTICGiqXPZv8nOytXKjt7eZ5dOGBbnPBKfA9u",
	"b1C1XCpsOuOQmuNJhA0X5exZ+Ol/hRN2kqtNO3z4deaLp8/W1lbm2enp9fX1SfzJ6QpT4TKr6nx9GubB",
	"ViAdeeXleRP+SY5q3NHW3IOb6knhDJ+9+ub1BTt7eX7SEszs2ezhycOTR77vnOSVmD2bPcGf8PSscd9P",
	"PbHNnr3/MJ+droGXmDnu/tiA1SIPjzTwYuf/b675agX6BCN86aerx6dBrDh971MCP+x7dhr7QE/fdzIn",
	"iwNfov/u9H3oPrX/7U7nIR86EX0wEYp9r50usFb31FfBRC+PLwWVDXP6HsXl0d9Pfbnb9ENUW+g8nIb0",
	"4vSbHSy9t1sH64EvtqKIVpJzm6/r6vQ9/gepNwKaSk+d2q08RVfH6fvOWv3jwVq7v7efx29cbVQBATi1",
	"XFJXrn2PT9/Tv9FEsK1ACycWYrq3/5XKcpxic4bd8OedzJM/DtfRKUngzl3SbfSK6uByVgoT/H/dSgYm",
	"btx4XiB/tv3yCO6lEPuDh/zxw4eBs3m9IaLKU3+Io67R05It+0UZhjfekLXtW9mH+ezpkYDutQ11Slkl",
	"gPmKFyzkN+Hcjz7e3OeS4pAcr6c7CSF4+vEg6Gwf+x527Edl2beoPH2Yzz7/mDtxLp0ox0uGb0bNsYZH",
	"5Gd5KdW1DG86YabebLjeTT4+lq8MOiq0uOJelGxek6vZO8w8pZy37lE7K4oB0ZNQB8Z+pfB2HMPYxqwq",
	"X7iyRVor0wrpljBUigeouqAecb36JpSFH7xdUhUwi6VNq2v4cEue0POQcm3PEzYeNFZiaOIytLOLQE0W",
	"6+j7j2jkoT5yiITbjottRN+fPOVPntLwlM8fPvl4078GfSVyYBewqZTmWpQ79rNsQkVvzOPOiiJZ4ah7",
	"9A/yuPlsm+WqgBXIzDOwbKGKXegq25ngEkh9HQgyp+87f3rxdUZO71T1Fvc742yF7QOGi1js2PnzgYRD",
	"n/U571c7fLUNfZo9e/Oe9D+n3LTqWR/EAWecR3ve503v0lxzH9m7hayUbVz/tKg/GdGfjOhWws3kwzNF",
	"vklqH9TUgw/u7Hnoz5Hql8btEJQpOsonPb53svFD/Sel71ClKChY9IBybvpo/pNF/MkibscivoPEYcRT",
	"65lGguiO04emMgxMrSw6fnHs0ItFUuj1uuQ6CnM+ZOY4wxG9ceNjcI2PrdQlcUU6HZcMtoKiHBIbeLd6",
	"3p8s70+W98dheWeHGU1XMLm1ZnQJuw2vGn3IrGtbqOvIC4KwUITS0A7sHtam//fpNRc2Wyrt645i7/zh",
	"xxZ4eeqbDPV+bev6D55gs4Loxzg5PfnrKe8atrv+E8d6xz4cOFdST71zYeSlkBkSHreO1thxiWy/cVm+",
	"eedYNjbF9jdC64d7dnqKqYJrZezp7MP8fc9HFz9815DH++Ye8WTy4d2H/x8AAP//v9ks9gn3AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
