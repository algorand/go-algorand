// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
