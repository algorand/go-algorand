// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
