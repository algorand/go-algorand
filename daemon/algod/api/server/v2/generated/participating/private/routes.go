// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
