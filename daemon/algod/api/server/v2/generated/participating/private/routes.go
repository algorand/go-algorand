// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+NDcFZ4UPr7/+P8CAAD//2xse1aG3QAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
