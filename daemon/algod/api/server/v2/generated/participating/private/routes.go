// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
