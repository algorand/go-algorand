// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
