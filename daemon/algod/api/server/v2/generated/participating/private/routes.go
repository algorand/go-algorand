// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
