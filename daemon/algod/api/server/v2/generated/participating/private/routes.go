// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"e/y1ugzcXl9/uf6/AQAA//++7G9U9c8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
