// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address basics.Address, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
