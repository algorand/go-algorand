// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3zXk8b65RzyZfHj34f8HAAD//w2Fuvhe8gAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
