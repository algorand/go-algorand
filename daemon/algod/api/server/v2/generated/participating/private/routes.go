// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/x8AAP//1GsJW8+8AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
