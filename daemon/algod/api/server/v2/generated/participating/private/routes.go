// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
