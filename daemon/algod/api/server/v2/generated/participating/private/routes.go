// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
