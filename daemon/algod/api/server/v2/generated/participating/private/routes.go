// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"6+vP1/83AAD//0hV2yJOzwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
