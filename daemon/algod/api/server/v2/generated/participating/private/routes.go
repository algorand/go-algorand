// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address basics.Address, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
