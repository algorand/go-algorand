// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
