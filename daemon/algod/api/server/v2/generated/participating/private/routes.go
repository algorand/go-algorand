// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address basics.Address, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
