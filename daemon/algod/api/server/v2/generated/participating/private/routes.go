// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
