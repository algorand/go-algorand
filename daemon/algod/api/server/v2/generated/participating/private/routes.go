// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
