// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"mYuNaKuGT56cPJp8+H8BAAD///BS//bkFQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
