// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
