// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"35DAh+au8KTw8f3H/xcAAP//8tF36lXwAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
