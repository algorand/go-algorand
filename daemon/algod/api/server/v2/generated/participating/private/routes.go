// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Zs6jImucvZ6cPJp8+L8BAAD//4YkEC8kJQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
