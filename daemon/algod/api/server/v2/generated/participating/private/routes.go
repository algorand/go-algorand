// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
