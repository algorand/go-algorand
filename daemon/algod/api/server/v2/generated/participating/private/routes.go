// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
