// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
