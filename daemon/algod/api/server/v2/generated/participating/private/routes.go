// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"BD7Xd4UjhatPV/8vAAD//xVsHQFjwgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
