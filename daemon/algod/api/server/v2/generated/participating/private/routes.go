// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9e3PctpIo/lVQs1vlx28o+ZXsiX91aq9iJznaOInLUnLuruWbYMieGRxxAAYA5xFf",
	"f/dbaAAkSAIzHEmxk6r8ZWtIAo1Go9Hvfj/JxaoSHLhWk+fvJxWVdAUaJP5F81zUXGesMH8VoHLJKs0E",
	"nzz3z4jSkvHFZDph5teK6uVkOuF0Be075vvpRMKvNZNQTJ5rWcN0ovIlrKgZWO8q83Yz0jZbiMwNcWaH",
	"OH85+bDnAS0KCUoNofyBlzvCeF7WBRAtKVc0N48U2TC9JHrJFHEfE8aJ4EDEnOhl52UyZ1AW6sQv8tca",
	"5C5YpZs8vaQPLYiZFCUM4XwhVjPGwUMFDVDNhhAtSAFzfGlJNTEzGFj9i1oQBVTmSzIX8gCoFogQXuD1",
	"avL87UQBL0DibuXA1vjfuQT4DTJN5QL05N00tri5Bplptoos7dxhX4KqS60IvotrXLA1cGK+OiHf1UqT",
	"GRDKyZuvX5CnT59+YRayolpD4Ygsuap29nBN9vPJ80lBNfjHQ1qj5UJIyousef/N1y9w/gu3wLFvUaUg",
	"fljOzBNy/jK1AP9hhIQY17DAfehQv/kicijan2cwFxJG7ol9+U43JZz/k+5KTnW+rATjOrIvBJ8S+zjK",
	"w4LP9/GwBoDO+5XBlDSDvn2UffHu/ePp40cf/u3tWfY/7s/Pnn4YufwXzbgHMBB9Ma+lBJ7vsoUEiqdl",
	"SfkQH28cPailqMuCLOkaN5+ukNW7b4n51rLONS1rQycsl+KsXAhFqCOjAua0LjXxE5Oal4ZNmdEctROm",
	"SCXFmhVQTA333SxZviQ5VXYIfI9sWFkaGqwVFClai69uz2H6EKLEwHUjfOCC/rjIaNd1ABOwRW6Q5aVQ",
	"kGlx4HryNw7lBQkvlPauUsddVuRyCQQnNw/sZYu444amy3JHNO5rQagilPiraUrYnOxETTa4OSW7xu/d",
	"agzWVsQgDTenc4+aw5tC3wAZEeTNhCiBckSeP3dDlPE5W9QSFNksQS/dnSdBVYIrIGL2L8i12fb/uvjh",
	"eyIk+Q6Uogt4TfNrAjwXBRQn5HxOuNABaThaQhyaL1PrcHDFLvl/KWFoYqUWFc2v4zd6yVYssqrv6Jat",
	"6hXh9WoG0mypv0K0IBJ0LXkKIDviAVJc0e1w0ktZ8xz3v522I8sZamOqKukOEbai278/mjpwFKFlSSrg",
	"BeMLorc8KceZuQ+Dl0lR82KEmKPNngYXq6ogZ3MGBWlG2QOJm+YQPIwfB08rfAXg+EGS4DSzHACHwzZC",
	"M+Z0myekogsISOaE/OiYGz7V4hp4Q+hktsNHlYQ1E7VqPkrAiFPvl8C50JBVEuYsQmMXDh2Gwdh3HAde",
	"ORkoF1xTxqEwzBmBFhoss0rCFEy4X98Z3uIzquDzZ6k7vn06cvfnor/re3d81G7jS5k9kpGr0zx1BzYu",
	"WXW+H6EfhnMrtsjsz4ONZItLc9vMWYk30b/M/nk01AqZQAcR/m5SbMGpriU8v+IPzV8kIxea8oLKwvyy",
	"sj99V5eaXbCF+am0P70SC5ZfsEUCmQ2sUYULP1vZf8x4cXast1G94pUQ13UVLijvKK6zHTl/mdpkO+ax",
	"hHnWaLuh4nG59crIsV/obbORCSCTuKuoefEadhIMtDSf4z/bOdITncvfzD9VVZqvdTWPodbQsbuS0Xzg",
	"zApnVVWynBokvnGPzVPDBMAqErR94xQv1OfvAxArKSqQmtlBaVVlpchpmSlNNY707xLmk+eTfztt7S+n",
	"9nN1Gkz+ynx1gR8ZkdWKQRmtqiPGeG1EH7WHWRgGjY+QTVi2h0IT43YTDSkxw4JLWFOuT1qVpcMPmgP8",
	"1s3U4ttKOxbfPRUsiXBiX5yBshKwffGeIgHqCaKVIFpRIF2UYtb8cP+sqloM4vOzqrL4QOkRGApmsGVK",
	"qwe4fNqepHCe85cn5JtwbBTFBS935nKwooa5G+bu1nK3WGNbcmtoR7ynCG6nkCdmazwajJh/FxSHasVS",
	"lEbqOUgr5uV/uHdDMjO/j/r4z0FiIW7TxIWKlsOc1XHwl0C5ud+jnCHhOHPPCTnrf3szsjGjxAnmRrSy",
	"dz/tuHvw2KBwI2llAXRP7F3KOCpp9iUL6y256UhGF4U5OMMBrSFUNz5rB89DFBIkhR4MX5Yiv/4HVcs7",
	"OPMzP9bw+OE0ZAm0AEmWVC1PJjEpIzxe7Whjjph5ERV8MgumOmmW+Eos1B0ssRQL/JdpWKkRlPGClqWZ",
	"GgUNuwYqJd0NVosDj+Il5vja02q+IXMpVkTURqsyvIJxbv5XVSSnZam8rmCNqlbkJl/RfNm80oimeGo4",
	"bEgAtjMSTIle1njQJJAVWyxRIVkZQbQqvSVBtb4DRVfQu7wQOAtmKB+ev/QQwhq4Nitrhu0vRYvO4CcG",
	"UPcIZ+bCYsQabrT3ujT6UocjIFHcFc0foPeCahrQu9vbuKxqzyN+hzchyIhC+wP+h5bEPDYM38gDdtgT",
	"com3mrI8vsHBZgkWC3Ym8wKapgRZWasPqWh+fRSUL9rJ44d3FD1/ZQ1N7ti6RTQ7dLllhbqrbcLBUnvV",
	"pUqr5vtD3mNUB45yMNcYBFyKipSwhrIPgj2ROJpFiNje+WXxpdjGYPpSbAcXhdjCneyEGWc0C/1SbF86",
	"yIQ8jHkcewzSzQKNgqfwzuAhszKztC6Ms5mQN7uje2ybk9YxQ6gZNWBI0x6S8NW6ytzZjBh37Qu9gVpf",
	"+P6rtT98DGMdLFxo+jtgQZlR7wIL3YHuGgtiVbES7oD0l1HRaEYVPH1CLv5x9tnjJz8/+exzQ5KVFAtJ",
	"V2S206DIfWfBIErvSngwXBnaEOpSx0f//Jk353fHjY2jRC1zWNFqOJR1E1jRw75GzHtDrHXRjKtuABzF",
	"EcFcbRbtxHrADGgvmTJ6yGp2J5uRQljRzlIQB0kBB4np2OW10+zCJcqdrO/C4ANSChm9uioptMhFma1B",
	"KiYiPsfX7g3i3vBKYNX/3UJLNlQRMzc6SGqOYneEsvSWj+f7dujLLW9xs5fz2/VGVufmHbMvXeR7e7si",
	"FchMbzkpYFYvOvYClL0pKfBDvKO/AW3lFraCC01X1Q/z+d0YVAQOFDFssBUoMxOxbxipQUEuuI0XOmDD",
	"cKOOQU8fMd6QrdMAOIxc7HiO1vi7OLZp886KcXQNqh3PA1sPakpQLDpkeXubTgoddqp7KgKOQccrfIzm",
	"wJdQavq1kJet2PeNFHV150Jef86xy6FuMc7gWJhvvaWJ8UXZjVFbGNhPYmv8JAt64Y+vWwNCjxT5yiiw",
	"gZ71Wgoxv3sYY7PEAMUH1nRRWtW6b8D4XhSGmeha3YEI1g7WcjhDtyFfozNRa0IJFwXg5tcqLpwlopow",
	"nAKjQHQo7+mlVTxnYKgrp7VZbV0RjHEY3BfthxnN7QnNEDUq4eFtXPP2LTudjZgpJdBiR2YAnIiZc6M6",
	"By8ukmKAhvbijRMNI/yiA1clRQ5KQZE58+1B0Px79urQe/CEgCPAzSxECTKn8tbAXq8PwnkNuwzDiRS5",
	"/+1P6sEngFcLTcsDiMV3Yujt236GUI+bfh/B9ScPyY5KIP5eIVqgNFuChhQKj8JJcv/6EA128fZoWYNE",
	"r/XvSvF+ktsRUAPq70zvt4W2rhJBsk69NRKe2TBOufCCVWywkiqdHWLL5qWODm5WEHDCGCfGgROC1yuq",
	"tI20YLxAW6C9TnAeK4SZKdIAJ9UQM/JPXgMZjp2be5CrWjXqiKqrSkgNRWwNHLZ75voets1cYh6M3eg8",
	"WpBawaGRU1gKxnfIsiuxCKK6cUi6UKTh4tBtZ+75XRSVHSBaROwD5MK/FWA3DBRMAMJUi2hLOEz1KKeJ",
	"TpxOlBZVZbiFzmrefJdC04V9+0z/2L47JC6q23u7EKDQ2O/ed5BvLGZtiOiSKuLgICt6bWQPNIPYkJAh",
	"zOYwZorxHLJ9lI8qnnkrPAIHD2ldLSQtICugpLvhoD/ax8Q+3jcA7nir7goNmY31i296S8k+tGrP0ALH",
	"UzHhkeATkpsjaFSBlkDc1wdGLgDHjjEnR0f3mqFwrugW+fFw2XarIyPibbgW2uy4owcE2XH0MQAn8NAM",
	"fXNU4MdZq3v2p/hvUG6CRo44fpIdqNQS2vGPWkDChurSKILz0mPvPQ4cZZtJNnaAj6SObMKg+5pKzXJW",
	"oa7zLezuXPXrTxB145ICNGUlFCR4YNXAKvye2Ci1/pg3UwVH2d6G4A+Mb5HllEyhyNMF/hp2qHO/tuHP",
	"ganjLnTZyKjmfqKcIKA+qNKI4OErsKW5LndGUNNL2JENSCCqnq2Y1jatoavqalFl4QBRv8aeGb2DPOZT",
	"3OtmvcChguUNt2I6sTrBfvgue4pBBx1OF6iEKEdYyAbIiEIwKpKBVMLsOnMZFj7G3lNSB0jHtNGl3Vz/",
	"91QHzbgC8t+iJjnlqHLVGhqZRkgUFFCANDMYEayZ08U/tRiCElZgNUl88vBhf+EPH7o9Z4rMYePTksyL",
	"fXQ8fIh2nNdC6c7hugN7qDlu55HrAx0+5uJzWkifpxyOv3Ejj9nJ173BGy+ROVNKOcI1y781A+idzO2Y",
	"tYc0Mi72CMcd5cvpxrIM1o37fsFWdUn1XXitYE3LTKxBSlbAQU7uJmaCf7Wm5Q/NZ5hyBbmh0RyyHBOF",
	"Ro4Fl+Ybm1tkxmGcmQNs44rHAgTn9qsL+9EBFbMN3WSrFRSMaih3pJKQg02pMZKjapZ6Qmywbb6kfIEK",
	"gxT1wkV72nGQ4dfKmmZkzQdDRIUqveUZGrljF4ALo/JZVUacAmpUur6F3CowG9rM5xLpxtzMwR70PQZR",
	"J9l0ktR4DVLXrcZrkdNNDRtxGXTkvQA/7cQjXSmIOiP7DPEVbos5TGZzfx+TfTt0DMrhxEH8afswFYJq",
	"1O1ydwdCjx2ISKgkKLyiQjOVsk/FPEwDdXeY2ikNq6El3376c+L4vUnqi4KXjEO2Ehx20coHjMN3+DB6",
	"nPCaTHyMAkvq274O0oG/B1Z3njHUeFv84m73T2jfY6W+FvKuXKJ2wNHi/QgP5EF3u5vypn5SWpYR16JL",
	"EuszADVtAkuZJFQpkTOU2c4LNbUHzXkjXUZZF/2vm9D3Ozh7/XF7PrQw/xhtxFBWhJK8ZGhBFlxpWef6",
	"ittA22CpkeAnr4ynrZYv/CtxM2nEiumGuuIUA98ay1U0YGMOETPN1wDeeKnqxQKU7uk6c4Ar7t5inNSc",
	"aZxrZY5LZs9LBRIjkE7smyu6I3NDE1qQ30AKMqt1V/rHHEilWVk6h56Zhoj5FaealECVJt8xfrnF4bzT",
	"3x9ZDnoj5HWDhfjtvgAOiqksHqT1jX2KUeZu+UsXcY7h1faxD9Zsk7InZpmdOgz/5/5/Pn97lv0PzX57",
	"lH3x/52+e//sw4OHgx+ffPj73/9v96enH/7+4D//PbZTHvZYhp6D/Pyl04zPX6L60/qABrB/NPv/ivEs",
	"SmRhNEePtsh9zEZ3BPSgaxzTS7jiessNIa1pyQrDW25CDv0bZnAW7enoUU1nI3rGML/WI5WKW3AZEmEy",
	"PdZ4YylqGNcYz4VFp6RLb8XzMq+53UovfdtULx9fJubTJt/ZlkJ6TjAZdkl9cKT788lnn0+mbRJr83wy",
	"nbin7yKUzIptLFW5gG1MV3QHBA/GPUUqulOg49wDYY+G0tnYjnDYFaxmINWSVR+fUyjNZnEO5xNonM1p",
	"y8+5DYw35wddnDvnORHzjw+3lgAFVHoZK5HSEdTwrXY3AXphJ5UUa+BTwk7gpG/zKYy+6IL6SqBzn3Ii",
	"hRijDTXnwBKap4oA6+FCRhlWYvTTSwtwl7+6c3XIDRyDqz9n48/0f2tB7n3z1SU5dQxT3bNZ83boIM85",
	"okq7VL5OQJLhZmEO0xW/4i9hjtYHwZ9f8YJqejqjiuXqtFYgv6Ql5TmcLAR57rMDX1JNr/hA0krWbgvy",
	"MklVz0qWk+tQIWnJ09bjGY5wdfWWlgtxdfVuEJsxVB/cVFH+YifIjCAsap25aiKZhA2VMd+XaqpJ4Mi2",
	"XNC+Wa2QLWprIPXVStz4cZ5Hq0r1s8qHy6+q0iw/IEPlcqbNlhGlhfSyiBFQLDS4v98LdzFIuvF2lVqB",
	"Ir+saPWWcf2OZFf1o0dPgXTSrH9xV76hyV0Fo60ryaz3vlEFF27VSthqSbOKLmIutqurtxpohbuP8vIK",
	"bRxlSfCzToacD8zHodoFeHykN8DCcXSqKi7uwn7lK8fFl4CPcAvxHSNutI7/m+5XkPB94+3qJY0PdqnW",
	"y8yc7eiqlCFxvzNNQamFEbJ8NIZiC9RWXe2tGZB8Cfm1K4oEq0rvpp3PfcCPEzQ962DKlsuymXlYsAUd",
	"FDMgdVVQJ4pTvutXzlCgtQ8rfgPXsLsUbb2XY0pldCs3qNRBRUoNpEtDrOGxdWP0N99FlaFiX1W+AAIm",
	"PXqyeN7Qhf8mfZCtyHsHhzhGFJ3KAilEUBlBhCX+BApusFAz3q1IP7Y8xnPgmq0hg5It2CxW6fOfQ3+Y",
	"h9VQpStu5qKQmwEVYXNiVPmZvVidei8pX4C5ns2VKhQtbeHGaNAG6kNLoFLPgOq9dn4eVmjw0KFKucEs",
	"YbTwTc0SYGv2m2m02HHYGK0CDUX2HRe9fJKOP7OAQ3FDePznraZwktR1HeoiRc38rdxgt1FrXWheSGcI",
	"l32+AqyKKDZmXwwUwhX0s3UjgvulVnQBCd0l9N6NrM7Q8fjhIIckkqgMIuZ9UWMgCURBti9nZs3RMwzm",
	"iTnEqGb2AjL9TNZB7HxGWKfXIWxWogDbRK7avaey40W1hUdToMVZC0jeioIejC5GwuO4pMofRyzJ6Lns",
	"KOnsd6yDsq/61XkQSxjUXWxqW/nbsM9BB3q/q4HlC1/5aleh0j+icpXRvTB9IbYdgqNoWkAJC7tw+7In",
	"lLYmS7tBBo4f5nPkLVksLDEwUAcCgJsDjObykBDrGyGjR4iRcQA2Bj7gwOR7EZ5NvjgGSO5qylA/Nl4R",
	"wd8QT+yzgfpGGBWVuVxZwt+Yew5AXSxrI1n0IqpxGML4lBg2t6alYXNOF28HGRRhQoWiV3LJhd48SCka",
	"e1xT9so/ak1WSLjJakJptimoERW190A8E9vMZvZGdZHZdmboPZq7gHnGsYNpy13dU2QmthjOhVeLjZU/",
	"AEsaDg9GYHvZMoX0it+l5CwLzL5p98u5MSpUSDLO0NqQS0rQGzN1QrZMkcv9oILVjQDomaHacvDOLHHQ",
	"fNAVT4aXeXurTdvKjD4tLHb8U0couksJ/A3tY03Nqdd9iSVqQepGJXXLbQXCfYzoDZsYus+GTjoFJaC6",
	"lnWEqOw65tM2WifgjXPhPwvMSljUi/LdgyDUTcKCKQ2te8NHsHwKwzHFWqJCzNOr05Wcm/W9EaK5pqyD",
	"Fz/sLPOjrwBjxedMKp2hbyi6BPPS1wrNHV+bV+OyUjeYzlbeZkWcN+C017DLClbWcXp183770kz7fcMS",
	"VT1Dfsu4DSWaYaX4aIjtnqltFPbeBb+yC35F72y9406DedVMLA25dOf4k5yLHufdxw4iBBgjjuGuJVG6",
	"h0EGqdFD7hjITUH0xck+u/jgMBV+7IPxVD5BO3VH2ZGiawnKp8Vz2cRiAYUvYOU9N7wtbUZLwRdBS5Oq",
	"2leJLIKBFlUZ4wVs43CEkijC0GZzYUEyDDdcALclMuKmiOgiw7ByfCOwD31k/1s/6DwaeHvZc6C2EbGu",
	"QJ3fGJSQS6CFk4MV+PXtP2DDDXGom6ZCdju1H/cfBhzQFtHTQb3+Yep7gpXSqmLFtufssKMmDS/0KIum",
	"r3LawwoyCTfYAQx0A2+jBNepEOvCe51R9xT1rFOjCdh4XxfMauib5i7pu6glWs070bTDcsSNfjBy7d/+",
	"dKGFpAtwno/MgnSrIXA5x6AhKPariGY2hKFg8zmEFn91E2t1B7iBXbcYQboRIou7BWrG9efPYmR0gHpa",
	"GA+jLE4xEVpI+YEvh54VL50H5ouGuQdbcwP3SDRF/FvYZT8ZRZdUlEnVhoQ6V0f3Gj1i19erb2GHIx+M",
	"tDSAHdgVtHa8AaTBmHW5eWQzoxpNOqxcjVVdOlt4xE6dxXfpjrbG1RpPE397y3RqcXeXcpuD0TrmDSxj",
	"duMi7g83pwe6iO+T8qFNYMVhGSSQ3MOpmPKd2YZXUVP/4BDtXgItPfHiciYfppPbeZ9jt5kb8QCuXzcX",
	"aBTPGN1ovZGdYJIjUU6rSoo1LTPno09d/lKs3eWPr3uX/kfWSeKUffnV2avXDvwP00leApVZo9MnV4Xv",
	"VX+aVdnq5PuvEpRYvHHN2nyCzW+q54Z+/Q3WPe6ZjQa1/tuYjeAoOj//PB5kfZD3ufASu8Q9YSZQNVEm",
	"rZ/NBpl0A0vomrLSO7g8tImAaFzcuIYRUa4QDnDrAJUgzii7U3YzON3x09FS1wGehHP9gOUQ4xoHd8US",
	"kRW5gBN659LT10J2mL/LhosGrPx+YpURsi0eE/HBvi1bX5g6IVbw+mXxizmNDx+GR+3hwyn5pXQPAgDx",
	"95n7HfWLhw+jHquoQcowCbQ3cbqCB01kf3IjPq4CzmEz7oI+W68ayVKkybChUBt54tG9cdjbSObwWbhf",
	"CijB/HQyRkkPN92iOwRmzAm6SGW/NYGNK9sJThHB+3G8mHhpSAuZ/YpirwvrABweIV6v0GmWqZLl8XAC",
	"PlOGvXIbwGdeJvhywu5qRqxZIh6U1ywYy7w2pk5nD8hgjigyVbRUaIu7mXDHu+bs1xoIK4xWM2euiUDv",
	"qvPKAY46EEjjdjE3sA1GaYe/jR0k7PPSlxmdLWifESQMFxyA+7LxDvmFNs7XVmc6Nuo4nHHAuPdEDDv6",
	"cNRsM6iW3bC/cXrMmI7AntG5hjOJOaIdfpnK5lL8BnGXBnqCIsUXfGcbhgbb34DHosX6LKVxZLaNitvZ",
	"D233eN04tfG31oX9optmOje5TOOn+riNvInSq+Ilgh2SU0pY6NXuhqMnWAseryAAE1tW+IgXyu15spUH",
	"OllN8VMZ5g+e2vHbU+lgHuRclnQzo7F+HkYXMjAF29uJzdGC+I/9Bqgmr97OToKo4eZdZquXVSDb4jPD",
	"Sqg31GvstKM1mlaBQYoKVZepjScslYgMU/MN5bY5rvnO8iv3tQLrTDdfbYTE2oMqHkZUQM5WUXPs1dXb",
	"Ih+GjBRswWzf11pB0FjUDWR7alsqcs1Zm2oRDjXnc/JoGnQ3drtRsDVTbFYCvvHYvjGjCq/LxrHdfGKW",
	"B1wvFb7+ZMTry5oXEgq9VBaxSpBG90QhrwmGm4HeAHDyCN97/AW5j2GAiq3hgcGiE4Imzx9/gUEc9o9H",
	"sVvW9e3dx7IL5Nk+QDhOxxgHaccwTNKNGo/4tY3707fDntNkPx1zlvBNd6EcPksryukC4jkBqwMw2W9x",
	"N9Ex38MLt94AUFqKHWE6Pj9oavhTIs/YsD8LBsnFasX0ygWLKbEy9NR2DbWT+uFsC2vX28fD5R9izGXl",
	"Q856tq6PrMbQVSJPCCNjv6cr6KJ1SqgtOFmyNhrat6Ej576eLTY7anocWdyYuczSUZbE4Og5qSTjGu0f",
	"tZ5nfzNqsaS5YX8nKXCz2efPIk2Dun01+HGAf3S8S1Ag13HUywTZe5nFfUvuc8GzleEoxYM2rz84lcng",
	"0HgYYCoWcf/QYyVfM0qWJLe6Q2404NS3Ijy+Z8BbkmKznqPo8eiVfXTKrGWcPGhtdujHN6+clLESMlak",
	"vj3uTuKQoCWDNWZpxTfJjHnLvZDlqF24DfSfNpLJi5yBWObPclQRCDya+xK0jRT/03dttW10rNrst54N",
	"UMiItdPZ7T5y3OBxVre+/9aGfuGzBOZGow1HGWIlEfFtQ7qbbz5FvFAfJLvnHYPj41+INDo4yvEPHyLQ",
	"Dx9OnRj8y5PuY8veHz6MF72NmtzMry0WbqMR47exPfxSRAxgvsNcE1DkcvIjBsjUJWUeGCY4c0NNSbeb",
	"18eXIu4mpygeNxo/BVdXb/GJxwP+0UfEJ2aWuIFtZHz6sHe7GUZJpmieBxHrlHwptmMJp3cHeeL5A6Ao",
	"gZKR5jlcyaBbY9RdfzBeJKBRM+oMSmGUzLARTWjP//Pg2Sx+ugfbNSuLn9p6Yr2LRFKeL6PxvjPz4c9W",
	"Ru9cwZZVRntbLCnnUEaHs7rtz14Hjmjp/xJj51kxPvLdfrdQu9ze4lrAu2B6oPyEBr1Ml2aCEKvdUk1N",
	"KYByIQqC87SNFFrmOGy7G/QC/LUGpWNHAx/YpDd0dhnma1vREeAFWr9OyDdYNMXA0qmSjVYnX3+0W4uv",
	"rkpBiynWRb386uwVsbPab2zDeNsKb4FGl+4qolbyIzpm+97v8aIbx3Te3lcFwKxa6azpXBcra2beaHvr",
	"sV7oBJpjQuyckJfWEtb0qbaTEKyuK1dQBI3yrC6GNGH+ozXNl2hi6lxkaZIf38PRU2VrgKf+/3nbOAXP",
	"nYHbtXG0XRynROglyA1TgMm8sIZuJbWmrKAzcfrKat3lyZpzSyknR8gUTZuUY9HugbMCifcNRyHrIf5I",
	"A4NtgXpsS8sL/CoeUt/rj9lz3vq6XE2j7++cjTinXHCWYxX1mECEVZ/GeZtGFJyPu4nUxJ3QyOGKduVs",
	"0ggdFpN9Oj0jdIgbem6Dp2ZTLXXYPzVsXbemBWjlOBsUU99c1vk1GFfgGuEYIgr5pJCR2JRoPHvjBz+S",
	"jLCgS8JQ9bV59r0zY2I+/TXjaLBwaHNitvU8lIqhg5ETpslCgHLr6SZlqLfmmxMs8FbA9t3JK7Fg+QVb",
	"4Bg2Gsos24b+DYc684GALvDOvPvCvOvKbjc/d6J67KRnVeUmTbcejvdb3/IkgmPhJz4eIEBuM3442h5y",
	"2xvBi/epITRYY/ARVHgPDwijacPb63lvVARLUfgGsSlu0dqbjEfAeMW494TFL4g8eiXgxuB5TXynckm1",
	"FQFH8bRLoGUijh1TRq0r9bZD9YuOG5TgGv0c6W1sOwgnGEfzQiu4Ub4j/lAY6g6EiRe0bCJgI/2AUapy",
	"QlSBOSK9DsExxmEYt+9B3r0ADmZhNZ9jIf9jb6JUebNZXSxAZ7QoYlVxvsSnBJ/6XB/YQl43/WuaJK9u",
	"eeMhtbmJcsFVvdozl3/hltMFLbcj1BC2/fY7jEU6Zjv8N9a8Jb0zLvb16DRJH+haHFfTe5j2GZN6DU1n",
	"ii2y8ZjAO+X26Ginvhmht9/fKaX7rMs/RFJlj8uFexTjb1+ZiyOs+TkIM7ZXS1OSE0N6BT73tVKaYnJd",
	"roRX2aBFETqvcfMiW9YD3r8YBXxNy0RqcmjytverNQOnEpTzZD491a6yj6ZkLwtKVkuxIZ89I/rQE5QK",
	"87RRnndnfHZr3YvQtAvm247DxYb6tMwi6Wi5mS+k3eBjnSHfrlM5677EPz7vt1y/BleIsZKwZqL2QTQ+",
	"lNWrhPbXTgPzpmpAdP3RAPFPbXxOmsovXetLu0ynk3/7k3WmEeBa7v4AhvPBpg+auQ+lXWueal8hTde0",
	"UV3UOrfimPYXsU4LTjbstJM/0Ax/QFYvx4gDw+b208l5cdSFGevWMbGjxI5dvFV9uph5W8Acj1glFGub",
	"F8Z62I+MGb/ENvRBMfbhWD6WcA25xo6VbYyUBDimNLuZzNvu/ypqnlanm9B6V8t8XwHzYZvKA3f8oJJN",
	"UI3Jtvg7GV+u+6yJhLWJPBuq2qobvdTX0Ql48znkWFB1b+Wgfy6BB1Vppt4ug7DMg0JCrElHwZLAx1sd",
	"W4D2FfbZC0/QmuPW4KTSka9hd0+RDjVEew42uVg3qTmKGEDukPnysylDsgv+YaqhDMSCj+x0VVzbuvrJ",
	"crFBHawbzuVJ0lwcbW2sPVPG+yWPmst8elTFOMysSBUXGrZbTesfL7G7rXJxTrSpWRpq6eR82HNj42qe",
	"Yp2nxnfiq5+C8r/5om52lpJdQ9hQHT1VGyoL/8ad1PaxdxOLAz1vZmZtHP7QVx2p4o4pLXkpjBiRpfKC",
	"uqHvTdzYPWUD/No6LAjXHKSEonGJlEJBpoWP298Hxz5U2CjGGyFBJTunWOCSVXPftGWBsYMUxSq51AUv",
	"hgskElbUQCeD4r3pOfch+4V97nOpfQehgxamhl4Pt7L0GRhMDZAYUv2cuNvycI72TYxNjHOQmfc89Sv5",
	"8m6JLCyEWNS5vaDDg9EY5EaXQNnDSqJ2mny4yp6OEOQ6X8Pu1CpBvgeo38EQaCs5WdCDCpC9Tb5T85uK",
	"wb24E/A+bTmwSogySzg7zoflh/sUf83ya8CibE2kcqK9M7mPNvbGm71Z7ny53aoCDsWDE0LOuM0N8Y7t",
	"bmey3uT8nt43/xZnLWpbEdwZ1U6ueDzIHmt1y1tyMz/Mfh6mwLC6W05lBzlQ3HabKH0s6SbS7PxkrFY+",
	"dDX3G1C3RGWhiMkkF9Zj9QIPesxwhJnsQckFdGRS4jxdRJUiFpJ5k2x7M1QcU+FkCJAGPibpu4HCDR5F",
	"QLSlcuQU2gpmrnaZmBMJrRP5pkXcht2fYxp9f+Zmli6/mwsJnT7O5mshCy/yMNU2XKdyxrSkcneTUmuD",
	"7tMD60kSywfDsZpIrHYhbTTWEIdlKTYZMqusKZEfU23Ne6p7Gft+Te135lTPIIjrosoJajuypAXJhZSQ",
	"h1/E0/YsVCshISsFhnnFPNBzbeTuFebqcFKKBRFVLgqwrSbiFJSaq+acotgEQVRNFAWWdjDp034T0PHI",
	"Ke+q9bktzmMXnVlfZiLwFJQrxuMwZF8ewrunbfhRTR7O52gRYhjr0s29ttJn2DwdjuydzsrSGwxS7dPJ",
	"j6rGcCRMvDFTPCMrobTT7OxIqhmqDfG6nwuupSjLrhHIisQLZ9n+jm7P8ly/EuJ6RvPrB6hHcqGblRZT",
	"n5baD8ZrZ5K9ikwj+7z3K5za9zA0zRHJ0c3cHec4ugdzAOa7wxzrsI37LNarvruuLvOKqw1nnFAtViyP",
	"0/CfK7otGZMWYwnRUk+2DZpNzsfXkFGHl0MTzIAsaYhm4DTax+mMOJ7mnLrIPMx/UeLtj0vm4C6JxMU0",
	"5JNOasnypGzVAwAhtRmjupa2d1oo+TRcRSxshjm6pPuAjuTiGPlzO9jMCHcOlIZbATWINmwAvG+V/akt",
	"yWUjF2di658/aGt23Qj4D/upvMM8UiFVFy1pSRtU5et7JDhCvDLw3vijS8wWno2NQmr6XI68UQMA0nFJ",
	"HRhGRScdC8acshKKLNYm7byxCU0DzdZltPS7FzPlOHlOa9+lzIxdS3D1JqxILbv+pooaUhLN60PLLS9g",
	"CwqLQdiW7VRZP4P3d0Bpu5P1lG9RZSWsoROu5Ypg1CjasTX4b1XzMSkAKvT+9W1SsTik8C7vGSrc2rMg",
	"kmUMdqOWC4tYu1PkgFkiakTZ8sweEzX2KBmI1qyoaQd/6liRo2t2M0c5gqqBTJ55vW3sND/aEd74Ac78",
	"9zFRxmPi3Tg+dDQLiqNuHwM6GJdYq9Sp5/GwxLDCS+PQwNmKxvFpSbzlG6qiG542AA5JvlVvRu4TEzxA",
	"7FdbyFGq6cbd3R4nBAcjqle9KSmCy2aHb25I/iQ0vJeEk+PFVA0FyGD3Wmo8XTiBHV/AfrXciL1GasZO",
	"ZI7/O/43JbPaD2T0atsYLdTgXoL32GFB6cZZ4QRa1lxoPr5w6uoJ9pVyFkRWr+iOCIn/GH3t15qWbL7D",
	"E2rB958RtaSGhJyL0PquXbyimXi/YDL1gHm7gPBT2XWzsWMGw+3MKAHQ5gp0ximsDHQN4TagW95ynlwb",
	"lqPq2YophZddbzuHWHCL9zUhVrQIdWSsTNftFexrlZqv//82ayucyheUqkqa+zZ4QBRd9QzittWlJy69",
	"hNX+tL6heuxJoGmf2RKt9Om8xQ2Me0dGbsRi5VP9HjpgD9oKDlpd3GoZx3QgbzOj9yREjlrKXe/C2PiQ",
	"AdDoZPZVvQ6Ab6sx+gpgHwP/0aKRqWWMAf+PgvdEN8YQXtt48SNguZPyH4HV2lVnYptJmKtDoRDWsGoU",
	"YdkWC/DGScZzCVTZ2JDzH5zK1tZEZNyokDZ6sfG+NaMUMGe8ZZaMV7WOaABYGpHvAoSF5mlEa8LZk5IS",
	"jBi2puUPa5CSFamNM6fDdoMLa9J7k7z7NqL8N3fqcACmWu0HMwmhzVQLXjMXuO16YwMLlaa8oLIIX2ec",
	"5CDNvU82dKdu7vsw0MrayBcHvB80kGa6+e2BHwRJ2wJS7pz78paeiQZAeocuihGuBYxgjbgVrFFEi4Qn",
	"YQhDvKwC3WalWGB+WYIAXfFJ9P1YZUVwNNhaeei4eRT7DfZPg3W33cHXAmcdM8X+c/YDog4Vnh8503tP",
	"mrWm9RP+bESmPQie/vmiDQu3mzOk/1iO5iUmMXTyNL1w55MY/F7b8BA7HyQ8GV0LbmIX0UHuEnxDc+34",
	"fkZdH3wsE9TqsBnqtmpP4DeoNsiZ5i5wZ2j0GSjFFilTl0d7pE3IWpL9PZAAzzY8dmerO20TTGHGOaYJ",
	"1P7M2awSVZaPiQa0pfkLZ9B2kHZhTNBHYK5OrLsJnFBNs4pOYZNO14pj+2Alu2Yc8stU+T4lO2XQSHDQ",
	"rrFczJGX4RG2ZhzM8WiMF9N+9lHXYNMwCUKJhLyWaNDc0N3hvkKJkrAX/zj77PGTn5989jkxL5CCLUC1",
	"ZYV7fXnaiDHG+3aWjxsjNliejm+Cz0u3iPOeMp9u02yKO2uW26q2ZuCgK9ExltDIBRA5jpF+MDfaKxyn",
	"Dfr+Y21XbJF3vmMxFPz+eyZFWcbLujeiW8TUH9utwNhvJP4KpGJKG0bY9dUx3cbKqiWa47C459rWGRE8",
	"d9XXGypgOhGME1tIKtQS+Rlm/Tr/BoFtVTpeZX0S+9bl9CJrEcPgDIzfmAGpROVEaTYnMYgwt0QGOZfO",
	"0IjhnUH0ZMNsbRxljBBdTHKc9MKOuPu5fbdbo45zerOJEfHCH8obkGbKkp7OaL8JJ2lN6X8Y/hFJ0b8z",
	"rtEs9/fgFVH94Gb9s0eBNkzXjpAHApDIw+xk0IXt9dtKo9Ja5dF+712dffHju9YFejBhACHxHxwAL0ys",
	"bN9rYtwdOJ+4ZOd3DVKCpbxLUUJn+YdyNT3rbS6SYIuckUJrUJYtiaFYGCTiqhdNfmtCKxmkwWIvfaOZ",
	"lmUkfdbaTfBMhYRjVAK5puXH5xpfM6n0GeIDijfppJkwhzJEskWlulkFt1d01NxBvuTdTc1fY8ruP8Hs",
	"UfSec0M5d/HgNkOrF7akXvhbwWYBkw2OacOBHn9OZq6afiUhZ6rvht544aRJGQTJ5i70Erb6QI7ioXX+",
	"JPQtyHjuY0bI94E7SaDZroWwPaKfmKkkTm6UymPUNyCLCP5iPCrsvnngurhl5fWbFQQJSnsdWRBk2Fd0",
	"7PJs0Qtz6dQKhuscfVt3cBu5qNu1ja1mM7qA+9XVWz0bU4QmXmzdfI5VcO6k6vpRNdd/h/o3FkduDDdv",
	"jGJ+SlVEtVU/E8V3e/tRs/JggEinlPKH6WQBHBRTWCz4Z9cc4uPepR4Cm5M/PKoW1tsUErGIiay1M3kw",
	"VVAkeUR9ZPdZpBoy5rvltWR6h41BvQGN/Ryt1PNNU/XBVQ1pfFfu7tPiGprmzG2NiFr52/UbQUu8j6xL",
	"jZtbSJQn5KstXVWlMweTv9+b/Qc8/duz4tHTx/8x+9ujzx7l8OyzLx49ol88o4+/ePoYnvzts2eP4PH8",
	"8y9mT4onz57Mnj159vlnX+RPnz2ePfv8i/+4Z/iQAdkC6mt3P5/87+ysXIjs7PV5dmmAbXFCK/YtmL1B",
	"XXkusHGdQWqOJxFWlJWT5/6n/+VP2EkuVu3w/teJa8AyWWpdqeenp5vN5iT85HSBSeGZFnW+PPXzYDux",
	"jrzy+ryJJrdxL7ijrfUYN9WRwhk+e/PVxSU5e31+0hLM5Pnk0cmjk8eudy2nFZs8nzzFn/D0LHHfTx2x",
	"TZ6//zCdnC6BllhDxfyxAi1Z7h9JoMXO/V9t6GIB8gQTBuxP6yenXqw4fe+S4z/se3YahlScvu/UECgO",
	"fInhAKfvfQfL/W93uhe6SKzgg5FQ7HvtdIZdK8a+Cip4Ob0UVDbU6XsUl5O/nzqbR/whqi32PJz6QhuJ",
	"N21KdfxhB4Xv9dYsZP9w5p1gvJzqfFlXp+/xP0jawYpshcZTveWn6FY9fd9BhHs8QET39/bz8I31ShTg",
	"gRPzuW37ue/x6Xv7bzARbCuQzMiMWBXF/WqrV51i96fd8Ocdz6M/DtfRqdxjDmXURf3GlounpGTKxxp0",
	"C/6osDP0eYHMW/erCJmXfJwhcoAnjx55tueUioBkT90Jn7R94sfVJOjXLhpeh0O+t29lH6aTZ0cCutdw",
	"1Kn4GAHmS1oQn6CKcz/+eHOfcxvzaC4Ce2EhBM8+HgSd7SPfwo58LzT5GjWrD9PJZx9zJ865kfNoSfDN",
	"oPvm8Ij8yK+52HD/ppF06tWKyt3o46Op4YJvJ5Vka+rkzOY1vpi8wwINNmm5e9TOimJA9FbiA6W/FHh1",
	"pjC2UovK+VRapLUCL+NmCUONeYCqS9uEtlcGzBar8Z51LgqYhKKoljV8uCVP6EVjUKnPIwYgtGRiGPTc",
	"98sNQI3WtOr7qu3IQ2XlEAm3LZ3b6OG/eMpfPKXhKZ89evrxpr8AuWY5kEtYVUJSycod+ZE3Yek35nFn",
	"RREtBNg9+gd53HSyzXJRwAJ45hhYNhPFzret70xwDVa3HQgyp14X7KgDCe7ptcyYtNIGS06ev405MV2P",
	"1aqelSwn1g6GiqDRcgI9ranM1mV+02BbB+wnUv2XFKysmyxhvREuC294oZD7Ye68+tW2X8eDyPSObBgv",
	"xAZ7TyO4v9aAfN7B66eZRAAMIvKGjS5a874BcABWaj70C4zBzp7JX9GbzV3SY6d+d8sr6+Bl2lQ++q+L",
	"H74PcnVsfrF132OmiCVdDOuVAsNVNxTjt6SG4oS8sHaZcke4QA9ArTq9eE7+uof+4v235/3fNKUwbRce",
	"je01hiwpuAtORgm8Ud7+vvOns1tMbPBkrICl+Z1QssAOasMLarYj5y8H2qv9rH8lfLnDV3u3QoTf90E8",
	"ivEn2Ms+kcYsZCF0E0JqF/WXkPmXkHkrxXX04Rmju0YtS7avIR3oY1PfojDWbJvqIShj7E+f9PjeycYP",
	"bVsxW5YtlgsFCR7Y3O0+mv9iEX+xiNuxiG8gchjx1DqmESG642xdYxkGlugoOgFRXurwr9cllUG63CET",
	"9hmOGFcFfxeu8bENdlFcWXsdRvkyG94W2cC7teH9xfL+Ynl/HpZ3dpjRdAWTW1u9rmG3olVj61LLWhdi",
	"E7i/ERYbmjr08VnFv//36YYync2FdK0X6FyDHH6sgZanrs9q79e2tdngCfZrC34MixxFfz2lXadl13Fu",
	"WG/qw4FXPfbUOY4TL/kMY/+4jbAJI1aQ7TexKm/fGZatQK79jdAGYDw/PcWSE0uh9Onkw/R9LzgjfPiu",
	"IY/3zT3iyOQD0oWQbME4LTMX+NA2i548OXk0+fD/AgAA///ZJpeNeg8BAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
