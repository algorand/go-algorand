// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
