// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
