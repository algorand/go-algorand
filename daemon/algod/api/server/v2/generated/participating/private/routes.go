// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
