// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"azCaAQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
