// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
