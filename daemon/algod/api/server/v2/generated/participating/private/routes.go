// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"h9sPStEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
