// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address basics.Address, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
