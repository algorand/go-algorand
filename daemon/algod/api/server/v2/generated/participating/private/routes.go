// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9/5PbNpI4+q+gdFflL0+csR0nt/GrrXsTO8nOxUlcHif37my/XYhsSdihAAYAZ6T4",
	"+X//FLoBEiRBiZqZONmq/GSPSAKNRqPR3/vDLFebSkmQ1syefZhVXPMNWND4F89zVUubicL9VYDJtais",
	"UHL2LDxjxmohV7P5TLhfK27Xs/lM8g2077jv5zMNv9RCQzF7ZnUN85nJ17DhbmC7q9zbzUjbbKUyP8QZ",
	"DXH+YvZxzwNeFBqMGUL5oyx3TMi8rAtgVnNpeO4eGXYt7JrZtTDMf8yEZEoCU0tm152X2VJAWZiTsMhf",
	"atC7aJV+8vElfWxBzLQqYQjnc7VZCAkBKmiAajaEWcUKWOJLa26Zm8HBGl60ihngOl+zpdIHQCUgYnhB",
	"1pvZs7czA7IAjbuVg7jC/y41wK+QWa5XYGfv56nFLS3ozIpNYmnnHvsaTF1aw/BdXONKXIFk7qsT9n1t",
	"LFsA45K9/uY5++yzz750C9lwa6HwRDa6qnb2eE30+ezZrOAWwuMhrfFypTSXRda8//qb5zj/hV/g1Le4",
	"MZA+LGfuCTt/MbaA8GGChIS0sMJ96FC/+yJxKNqfF7BUGibuCb18p5sSz/+77krObb6ulJA2sS8MnzJ6",
	"nORh0ef7eFgDQOf9ymFKu0HfPsq+fP/h8fzxo4//9vYs+1//5+effZy4/OfNuAcwkHwxr7UGme+ylQaO",
	"p2XN5RAfrz09mLWqy4Kt+RVuPt8gq/ffMvctsc4rXtaOTkSu1Vm5UoZxT0YFLHldWhYmZrUsHZtyo3lq",
	"Z8KwSqsrUUAxd9z3ei3yNcu5oSHwPXYtytLRYG2gGKO19Or2HKaPMUocXDfCBy7oj4uMdl0HMAFb5AZZ",
	"XioDmVUHrqdw43BZsPhCae8qc9xlxd6sgeHk7gFdtog76Wi6LHfM4r4WjBvGWbia5kws2U7V7Bo3pxSX",
	"+L1fjcPahjmk4eZ07lF3eMfQN0BGAnkLpUrgEpEXzt0QZXIpVrUGw67XYNf+ztNgKiUNMLX4J+TWbft/",
	"Xfz4A1OafQ/G8BW84vklA5mrAooTdr5kUtmINDwtIQ7dl2Pr8HClLvl/GuVoYmNWFc8v0zd6KTYisarv",
	"+VZs6g2T9WYB2m1puEKsYhpsreUYQDTiAVLc8O1w0je6ljnufzttR5Zz1CZMVfIdImzDt399NPfgGMbL",
	"klUgCyFXzG7lqBzn5j4MXqZVLYsJYo51expdrKaCXCwFFKwZZQ8kfppD8Ah5HDyt8BWBEwYZBaeZ5QA4",
	"ErYJmnGn2z1hFV9BRDIn7CfP3PCpVZcgG0Jnix0+qjRcCVWb5qMRGHHq/RK4VBaySsNSJGjswqPDMRh6",
	"x3PgjZeBciUtFxIKx5wRaGWBmNUoTNGE+/Wd4S2+4Aa+eDp2x7dPJ+7+UvV3fe+OT9ptfCmjI5m4Ot1T",
	"f2DTklXn+wn6YTy3EauMfh5spFi9cbfNUpR4E/3T7V9AQ22QCXQQEe4mI1aS21rDs3fyofuLZezCcllw",
	"XbhfNvTT93VpxYVYuZ9K+umlWon8QqxGkNnAmlS48LMN/ePGS7Nju03qFS+VuqyreEF5R3Fd7Nj5i7FN",
	"pjGPJcyzRtuNFY8326CMHPuF3TYbOQLkKO4q7l68hJ0GBy3Pl/jPdon0xJf6V/dPVZXua1stU6h1dOyv",
	"ZDQfeLPCWVWVIucOia/9Y/fUMQEgRYK3b5zihfrsQwRipVUF2goalFdVVqqcl5mx3OJI/65hOXs2+7fT",
	"1v5ySp+b02jyl+6rC/zIiawkBmW8qo4Y45UTfcweZuEYND5CNkFsD4UmIWkTHSkJx4JLuOLSnrQqS4cf",
	"NAf4rZ+pxTdJO4Tvngo2inBGLy7AkARML94zLEI9Q7QyRCsKpKtSLZof7p9VVYtBfH5WVYQPlB5BoGAG",
	"W2GseYDL5+1Jiuc5f3HCvo3HRlFcyXLnLgcSNdzdsPS3lr/FGtuSX0M74j3DcDuVPnFbE9DgxPy/qdIJ",
	"K+YuKA/Vi7UfEA+ZhY05SD1DaPCs0mZyrflu5u/7DO/tIVH9ZIDoqeIrIRHauZOEJdvwS8eFuVSIfEc2",
	"YBoRlyiPhIHGGubFBy/CnwxU5j84bac2NQgUTuAohbGoHrkXDVtDifKPUw9phAGJ3DVpHCSIHiU0nMj9",
	"Punjfw0uFON2nP+gLu4xR2ow/hLpv/d7zGXIW7xF8ISd9b+9GWdxo6R5yo1oZQJ32IPHBoXXmlcEoH9C",
	"4paQqMfTSwTrLS/ciXdhEuaIzUe0hlDd+KwdPA9JSJAUejB8Var88m/crO/gzC/CWMPjh9OwNfACNFtz",
	"s05w2d7xakebcsTci8jk2CKa6qRZ4kt1JzdeqY6556rqOS9LN/XwfuutFgeexEvKkrmXGWwEGsq9wkiW",
	"ddK72Nc8XztxgOW8LOetiUhVWQlXUDplXUgJes7smtv2tsCRgz6D58iAYx4WWLQab15C05pubBAa2IYj",
	"W9k4LaYqu980163hG+hJP8jmVI3Wg0jBOH8RVgdXIPESa4ZG8Js1opUmHvzEze0f4cxS0eLI8meD267B",
	"X8MvOkC7t1smKdsplC7IVm3db0KzXGkagti2n9z9B7huPybqvF9pyPwQml+BNrx0q+st6kFDvnd1Og+c",
	"zIJbHp1MT4VpxYs4B36HdzbohHXmR/wPL5l77K4mR0kt9Qi8YVTkRi1IinOoopncC2hnVWxDJkxW8fzy",
	"KCift5On2cykk/c1WU39FvpFNDv0ZisKc1fbhION7VX3hJDNKrCjgeC6l+lEc01BwBtVMWIfPRCIU+Bo",
	"hBC1vfNr7Su1TcH0ldoOrjS1hTvZCTfOZGb/ldq+8JApfRjzOPYUpLsFSr4Bg7ebjBmnm6X1x50tlL6Z",
	"NNG7YCRrvYyMu1EjYWreQxK+WleZP5sJTwW90BuoDezYLwT0h09hrIOFC8t/AywYN+pdYKE70F1jQW0q",
	"UcIdkP46KcQtuIHPnrCLv519/vjJ3598/oUjyUqrleYbtthZMOy+N8cxY3clPEiq0ihdpEf/4mnwTXXH",
	"TY1jVK1z2PBqOBT5vEilodeYe2+ItS6acdUNgJM4IrirjdDOyJ3rQHshjNOYNos72YwxhBXtLAXzkBRw",
	"kJiOXV47zS5eot7p+i6sl6C10smrq9LKqlyVmZOPhEpYgV75N5h/I6irVf93gpZdc8Pc3Ojtq2UxYuyx",
	"Wzmd79PQb7ayxc1ezk/rTazOzztlX7rIb6X3CnRmt5IVsKhXHcvGUqsN46zAD/GO/hYsyS1iAxeWb6of",
	"l8u7Mf0oHChhghEbMG4mRm84qcFAriQFvx2wtvhRp6Cnj5jglbHjAHiMXOxkjq6luzi244aojZDo5zY7",
	"mUdWKQdjCcWqQ5a3tz6NoYOmumcS4Dh0vMTHaNt+AaXl3yj9phX7vtWqru5cyOvPOXU53C/GW88L922w",
	"iQm5KrsBlysH+0lqjb/Lgp43yjetAaFHinwpVmsb6VmvtFLLu4cxNUsKUHxARpbSfTM0tfygCsdMbG3u",
	"QARrB2s5nKPbmK/xhaot40yqAnDza5MWzkZC9DA2CEOabCzvoV4vDFuAo66c1261dcUwYGdwX7QfZjyn",
	"E5ohasxIuEITZ0Jv0XQU/lVq4MWOLQAkUwsfE+CjFXCRHKONbBBvvGiY4BcduCqtcjAGiswbmg+CFt6j",
	"q8PuwRMCjgA3szCj2JLrWwN7eXUQzkvYZRgbZ9j97342D34HeK2yvDyAWHwnhd6+HWoI9bTp9xFcf/KY",
	"7MjCRVTLrEJptgQLYyg8Ciej+9eHaLCLt0fLFWgMwfhNKT5McjsCakD9jen9ttDW1UjEt1dvnYTnNkxy",
	"qYJglRqs5MZmh9iye6mjg7sVRJwwxYlx4BHB6yU3lsKGhCzQFkjXCc5DQpibYhzgUTXEjfxz0ECGY+fu",
	"HpSmNo06YuqqUtpCkVoDur1H5/oBts1cahmN3eg8VrHawKGRx7AUje+RRSshBHHbuE6923y4OHQwunt+",
	"l0RlB4gWEfsAuQhvRdiNo15HABGmRTQRjjA9ymlCbeczY1VVOW5hs1o2342h6YLePrM/te8OiYucA3Rv",
	"FwoMOh78+x7ya8IsxTuvuWEejhDHgGYQim8awuwOY2aEzCHbR/mo4rm34iNw8JDW1UrzArICSr5LRGDQ",
	"Y0aP9w2AO96qu8pCRoGr6U1vKTnECe4ZWuF4JiU8MnzCcncEnSrQEoj/+sDIBeDYKebk6eheMxTOldyi",
	"MB4um7Y6MSLehlfKuh339IAge44+BeARPDRD3xwV+HHW6p79Kf4HjJ+gkSOOn2QHZmwJ7fhHLWDEhupz",
	"gqLz0mPvPQ6cZJujbOwAHxk7siMG3VdcW5GLCnWd72B356pff4Kkw5kVYLkooWDRA1IDq/h7RiGX/TFv",
	"pgpOsr0NwR8Y3xLLCfFQXeAvYYc69yuK5Y9MHXehyyZGdfcTlwwBDRHCTgSPX4Etz225c4KaXcOOXYMG",
	"ZuoFuf6HfgirqiweIOnX2DOj92omfYp73awXOFS0vFRAH+kE++F701MMOujwukClVDnBQjZARhKCSTEX",
	"rFJu14VPFwoJI4GSOkB6po0u7eb6v2c6aMYVsP9RNcu5RJWrttDINEqjoIACpJvBiWDNnD5Sq8UQlLAB",
	"0iTxycOH/YU/fOj3XBi2hOuQY+de7KPj4UO047xSxnYO1x3YQ91xO09cH+jwcRef10L6POVwpJAfecpO",
	"vuoN3niJ3JkyxhOuW/6tGUDvZG6nrD2mkWlRUjjuJF9ON65msG7c9wuxqUtu78JrBVe8zNQVaC0KOMjJ",
	"/cRCya+vePlj8xnmD0LuaDSHLMest4ljwRv3DSXKuXGEFO4AU5D8VIDgnL66oI8OqJhtkKnYbKAQ3EK5",
	"Y5WGHCg/zEmOplnqCaPI8XzN5QoVBq3qlY9LpXGQ4deGTDO6loMhkkKV3coMjdypC8CHd4UUQSdOAXcq",
	"Xd9CTgrMNW/m81mhU27maA/6HoOkk2w+G9V4HVKvWo2XkNPNc5xwGXTkvQg/7cQTXSmIOif7DPEVb4s7",
	"TG5zfxuTfTt0CsrhxFGkbPtwLFjWqdvl7g6EHhqIaag0GLyiYjOVoadqGec0hxC7nbGwGVry6dO/jxy/",
	"16P6opKlkJBtlIRdsoyHkPA9PkweJ7wmRz5GgWXs274O0oG/B1Z3ninUeFv84m73T2jfY2W+UfquXKI0",
	"4GTxfoIH8qC73U95Uz8pL8uEa9FnPPYZgJk3Qa5CM26MygXKbOeFmftoWvJG+vTILvpfNUH6d3D2+uP2",
	"fGhxMj3aiKGsGGd5KdCCrKSxus7tO8nRRhUtNRH8FJTxcavl8/BK2kyasGL6od5JjoFvjeUqGbCxhISZ",
	"5huAYLw09WoFxvZ0nSXAO+nfEpLVUlica+OOS0bnpQKNEUgn9OaG79jS0YRV7FfQii1q25X+MaHXWFGW",
	"3qHnpmFq+U5yy0rgxrLvhXyzxeGC0z8cWQn2WunLBgvp230FEowwWTpI61t6ivHwfvlrHxuPYeL0OARr",
	"thUGZm6ZnaIi/9/9/3z29iz7X579+ij78v86ff/h6ccHDwc/Pvn417/+/92fPvv41wf/+e+pnQqwp9JN",
	"PeTnL7xmfP4C1Z8oxL0P+yez/2+EzJJEFkdz9GiL3cfSCp6AHnSNY3YN76TdSkdIV7wUheMtNyGH/g0z",
	"OIt0OnpU09mInjEsrPVIpeIWXIYlmEyPNd5YihrGNaYTu9Ep6XO18bwsa0lbGaRvSkoL8WVqOW+S96mu",
	"1zOGmd1rHoIj/Z9PPv9iNm8zspvns/nMP32foGRRbFN59wVsU7pinFxwz7CK7wzYNPdA2JOhdBTbEQ+7",
	"gc0CtFmL6tNzCmPFIs3hQqqPtzlt5bmkwHh3ftDFufOeE7X89HBbDVBAZdepej8dQQ3fancToBd2Uml1",
	"BXLOxAmc9G0+hdMXfVBfCXwZ0l+0UlO0oeYcEKEFqoiwHi9kkmElRT+9tAB/+Zs7V4f8wCm4+nM2/szw",
	"t1Xs3rdfv2GnnmGae1QCgoaOkvYTqrRPOuwEJDluFudivZPv5AtYovVByWfvZMEtP11wI3JzWhvQX/GS",
	"yxxOVoo9C3mML7jl7+RA0hotRBhlkLKqXpQiZ5exQtKSJxWXGo7w7t1bXq7Uu3fvB7EZQ/XBT5XkLzRB",
	"5gRhVdvMl8bJNFxznfJ9maY0Co5Mta/2zUpCtqrJQBpK7/jx0zyPV5Xpl0gYLr+qSrf8iAyNLwDgtowZ",
	"q5o8Lieg+Nxpt78/KH8xaH4d7Cq1AcP+seHVWyHte5a9qx89+gwz4tqaAf/wV76jyV0Fk60royUc+kYV",
	"XDiplbC1mmcVX6VcbO/evbXAK9x9lJc3aOMoS4afdbL1QmA+DtUuoMklH90AguPopFpc3AV9FcogppeA",
	"j3ALu5nut9qvKDX9xtt1oNABr+06c2c7uSrjSDzsTFMdbeWErBCNYcQKtVVfSG4BLF9DfukrfMGmsrt5",
	"5/MQ8OMFzcA6hKHab5SZh9WH0EGxAFZXBfeiOJe7fhkYA9aGsOLXcAm7N6otXnRM3ZduGRIzdlCRUiPp",
	"0hFrfGz9GP3N91FlIUHTV/PApMdAFs8augjfjB9kEnnv4BCniKJTA2EMEVwnEEHEP4KCGyzUjXcr0k8t",
	"T8gcpBVXkEEpVmKRKlv730N/WIDVUaWv1OejkJsBDRNL5lT5BV2sXr3XXK7AXc/uSlWGl1SFNBm0gfrQ",
	"Gri2C+B2r51fxrUkAnSoUl5jxjJa+OZuCbB1+y0sWuwkXDutAg1F9I6PXj4Zjz8jwKG4ITzh81ZTOBnV",
	"dT3qEhX6wq3cYLdRa31oXkxnCBc93wCW+FTXbl8cFMpXp6QKF9H9Uhu+ghHdJfbeTawj0fH44SCHJJKk",
	"DKKWfVFjIAkkQaaXM7fm5BkG98QdYlQzewGZYSZyEHufERad9ghblCjANpGrtPdcd7yoVEV3DLQ0awEt",
	"W1EwgNHFSHwc19yE44j1RQOXnSSd/YYVW/aVcjuPYgmjIqJNobZwG/Y56EDv9wXdQhW3ULotVvonlGFz",
	"uhemL6S2Q0kUTQsoYUULp5cDobTVY9oNcnD8uFwib8lSYYmRgToSAPwc4DSXh4yRb4RNHiFFxhHYGPiA",
	"A7MfVHw25eoYIKWvfsPD2HhFRH9DOrGPAvWdMKoqd7mKEX9jHjiAL+HQSha9iGochgk5Z47NXfHSsTmv",
	"i7eDDCqKoULRqx/mQ28ejCkae1xTdOUftSYSEm6ymliaDUCnRe09EC/UNqPM3qQustguHL0ncxcwzzh1",
	"MKl22z3DFmqL4Vx4tVCs/AFYxuEIYES2l60wSK/43ZicRcDsm3a/nJuiQoMk4w2tDbmMCXpTph6RLcfI",
	"5X5Ua+tGAPTMUG1vA2+WOGg+6Ionw8u8vdXmbZnRkBaWOv5jRyi5SyP4G9rHkhX3Rg1InRP1ScqCDS1L",
	"tynXRh9XVILtmGptfXLoALEHq6/6cmASrd1Yry5eI6ylWIljvkOn5BBtBkpAJTjriKbZZSpSwOnygPf4",
	"RfgsMtbh7nG5exAFEGpYCWOhdRqFuKDfwxzPsdywUsvx1dlKL936XivVXP7kNscPO8v85CvACPyl0MZm",
	"6HFLLsG99I1BI9I37tW0BNoNUaTi/KJIc1yc9hJ2WSHKOk2vft7vXrhpf2guGlMv8BYTkgK0FthMIhm4",
	"vGdqim3fu+CXtOCX/M7WO+00uFfdxNqRS3eOf5Fz0WNg+9hBggBTxDHctVGU7mGQUcL5kDtG0mgU03Ky",
	"z9swOExFGPtglFpIex+7+Wmk5Fqi8nnpDEG1WkERyoIFf5iMiq+VSq6irkdVta/W3Amjkm9YsW1PsTcf",
	"hg9jQfiRuJ8JWcA2DX2sFSDkbWYdFqrDSVYgqVxJ2iyURE0c4o9vRLa6T+wL7ScAJIOg3/Sc2W10Mu1S",
	"s524ASXwwuskBsL69h/L4YZ41M3Hwqc7FUP3HyEcEGlK2KgRyLAMwQgD5lUlim3P8USjjhrB+FHW5RFp",
	"C1mLH+wABrpB0EmC65Se9qHW3sB+ijrvqdPKKPbaBxY7+ua5T8Avao0ejE5k87DOeaOrTVz7dz9fWKX5",
	"CrwXKiOQbjUELucYNERVxA2zgsJJCrFcQux9MTfxHHSAG9jYiwmkmyCytIumFtJ+8TRFRgeop4XxMMrS",
	"FJOghTGf/JuhlyvI9JEpqbkSoq25gasqma7/Heyyn3lZOyVDaNOG53q3U/fyPWLXrzbfwQ5HPhj16gA7",
	"sCtoeXoNSIMpS3/zyESVwu+ZTkl8VC87W3jETp2ld+mOtsY3MRgn/vaW6RT57y7lNgejDZJwsEzZjYt0",
	"bII7PdBFfJ+UD22CKA7LIJG8H08lTGj5OLyKmloUh2j3DfAyEC8uZ/ZxPrtdJEDqNvMjHsD1q+YCTeIZ",
	"I03JM9wJ7DkS5byqtLriZebjJcYuf62u/OWPr4fwik+syaQp+83XZy9fefA/zmd5CVxnjSVgdFX4XvUv",
	"syqqab//KqEq2d7QSZaiaPObSsZxjMU1VsTuGZsGTUTa+JnoKPqYi2U64P0g7/OhPrTEPSE/UDURP63P",
	"kwJ+ukE+/IqLMjgbA7Qjwem4uGmdaJJcIR7g1sFCUcxXdqfsZnC606ejpa4DPAnn+hFLU6Y1DukLVyIr",
	"8sE//M6lp2+U7jB/n5mYDB767cQqJ2QTHkditUO/x74wdcJI8PrH6h/uND58GB+1hw/n7B+lfxABiL8v",
	"/O+oXzx8mPQeJs1YjkmglUryDTxosixGN+LTKuASrqdd0GdXm0ayVONk2FAoRQEFdF977F1r4fFZ+F8K",
	"KMH9dDJFSY83ndAdAzPlBF2MZSI2QaYbajFpmJL9mGpMgnWkhczetzIgZ+zwCMl6gw7MzJQiT4d2yIVx",
	"7FVSMKV7meHLI9ZaN2ItRmJzZS2isdxrU2qm9oCM5kgi0yTLtra4Wyh/vGspfqmBicJpNUsBGu+13lUX",
	"lAMcdSCQpu1ifmDyU7XD38YOssffFGxB+4wge/13LxqfUlhoqrvSkRHg8YwDxr0netvTh6dmymZbd0Mw",
	"p+kxU1qNB0bnnXUjcyRbhwuTLbX6FdKOEPQfJQphBMenQDPvryBTkXt9ltI4ldsO6O3sh7Z7um48tvG3",
	"1oXDopsWTDe5TNOn+riNvInSa9Llmj2Sx5SwOMKgmxowwlrweEXBsNg+JEQfcUnniapAdDLM0qcyzuU8",
	"pfHbU+lhHuS/lvx6wVO9VZwu5GCKtrcTJ2UVCx+HDTBNjQOanUUR3M27girJVaBbH8SwKu0N9RqadrJG",
	"0yowSFGx6jKnMIXSqMQwtbzmkrpuu++IX/mvDZAL3n11rTTWgTTpkK4CcrFJmmPfvXtb5MPwnUKsBDWU",
	"rg1EHYv9QNSsn6jId31uKnd41Jwv2aN51Dbd70YhroQRixLwjcf0xoIbvC4bd3jziVseSLs2+PqTCa+v",
	"a1loKOzaEGKNYo3uiUJeE5i4AHsNINkjfO/xl+w+hmQacQUPHBa9EDR79vhLDKihPx6lblnfEHwfyy6Q",
	"Z4dg7TQdY0wqjeGYpB81HX291AC/wvjtsOc00adTzhK+6S+Uw2dpwyVfQTo/Y3MAJvoWdxPd+T28SPIG",
	"gLFa7Ziw6fnBcsefRnK+HfsjMFiuNhthNz5wz6iNo6e2HTFNGoaj3vi+z1KAKzzE+NcqhP/1bF2fWI3h",
	"m5GcLYxS/gF9tDFa54xT8c9StJHpoXkhOw+1hbHxVNNvinDj5nJLR1kSA9WXrNJCWrR/1HaZ/cWpxZrn",
	"jv2djIGbLb54mmjg1O1xIo8D/JPjXYMBfZVGvR4h+yCz+G/ZfalktnEcpXjQ1liITuVooG46JHMsLnT/",
	"0FMlXzdKNkpudYfceMSpb0V4cs+AtyTFZj1H0ePRK/vklFnrNHnw2u3QT69feiljo3SqYUB73L3EocFq",
	"AVeYMZfeJDfmLfdCl5N24TbQ/77xT0HkjMSycJaTikDk0dyXLO+k+J+/byufo2OVMhF7NkClE9ZOb7f7",
	"xNGGx1nd+v5bChjDZyOYm4w2HGWIlZHoewqvb775PeKF+iDRnncMjo//wbTTwVGOf/gQgX74cO7F4H88",
	"6T4m9v7wYboAcdLk5n5tsXAbjRi/Te3hVyphAAvd/pqAIl8fIWGAHLuk3APHBBd+qDnrdlb79FLE3eR3",
	"paNN06fg3bu3+CTgAf/oI+J3Zpa4gW2Wwvhh73aWTJJM0TyP4tw5+0ptpxJO7w4KxPMHQNEISiaa53Al",
	"g86ZSXf9wXiRiEbdqAsolVMy46ZAsT3/XwfPbvHzPdiuRVn83NZ2610kmst8nYwSXrgP/04yeucKJlaZ",
	"7DOy5lJCmRyOdNu/Bx04oaX/U02dZyPkxHf7nVtpub3FtYB3wQxAhQkdeoUt3QQxVrtls5qyDOVKFQzn",
	"aZtatMxx2AI56sv4Sw3Gpo4GPqAERHR2OeZLbQEZyAKtXyfsWyxg42DpVCxHq1OoBduti1hXpeLFHGvU",
	"vvn67CWjWekb6qBNbQlXaHTpriJpJT+iz7o3Oo8UQDmmX/u+igxu1cZmTRfBVIk590bb51D0QifQHBNj",
	"54S9IEtY07+cJmFY6VhvoIiaFpIuhjTh/mMtz9doYupcZOMkP72fZqDK1gAfJZE1TWzw3Dm4fUtN6qg5",
	"Z8quQV8LA5hYDVfQrWrXlHj0Js5Q5a67PF1LSZRycoRM0bSsORbtATgSSIJvOAlZD/FHGhioHe2x7UUv",
	"8Kt0SH2vV2nPeRtqpDVN17/3NuKcSyVFjhXtUwIRVuCa5m2aUPw/7SYyM39CE4cr2SG1Sen0WBztmRoY",
	"oUfc0HMbPXWbStRBf1rY+s5ZK7DGczYo5qHRr/drCGnANyVyRBTzSaUTsSnJePbGD34kGWFxnRFD1Tfu",
	"2Q/ejIm1DS6FRIOFR5sXs8nzUBqBDkbJhGUrBcavp5uUYd66b06w2F4B2/cnL9VK5BdihWNQNJRbNoX+",
	"DYc6C4GAPvDOvfvcvetLoDc/d6J6aNKzqvKTjreBTve+38pRBKfCT0I8QITcZvx4tD3ktjeCF+9TR2hw",
	"hcFHUOE9PCCMpiVyd5SvnYpAFIVvMEqMS9ZBFTIBxkshgycsfUHkySsBNwbP68h3Jtfckgg4iae9AV6O",
	"xLFjoim5Um87VL8AvEMJrjHMMb6NbTfnEcbRvNAKblzuWDgUjrojYeI5L5sI2ERvZpSqvBBVYI5Ir1tz",
	"inE4xh36wXcvgINZWM3n2FTh2JtorNTcoi5WYDNeFKkKRV/hU4ZPQ64PbCGvm15CTZJXt9T0kNr8RLmS",
	"pt7smSu8cMvpovbnCWqIW7CHHcaCKYsd/ptqpDO+Mz729ejkyhDoWhxXX32YLJqSeh1NZ0assumYwDvl",
	"9uhop74Zobff3ymlh6zLP0RSZY/LxXuU4m9fu4sjrr86CDOmq6Upj4ohvQqfh7o1TWG/LlfCq2zQLgqd",
	"17h5iS3rAR9eTAJ+xcuRhObY5E33K5mBx9Ka89EsfG59lSXL2V4WNFq5hkI+e0b0oSdoLMyTojzvzvjs",
	"17oXoeMumO86DhcK9WmZxaij5Wa+kHaDj3WGfHc1luke2i3g8377+0vwRTErDVdC1SGIJoSyBpWQfu00",
	"k29qDSTXnwwQ/72Nz6Om8je+DSkt0+vk3/1MzjQG0urdH8BwPtj0QWP9obRL5qn2FdZ0sJvU0a5zK05p",
	"RZLqeuFlw05r/y4tDbqIDMjqxRRxYICPj/PZeXHUhZnqnDKjUVLH7qVYrS0WXv8b8AL0qwOF5dti8njE",
	"KmVE20iydIP5Sp5rHO5kasy4I2ARF8YfjhViCa8gt9g9tI2R0gDHlMl3kwXb/Z8F5sfV6Sa03teV31dM",
	"ftgy9MAdP6h/E9VwonaLJ9NLp581kbCUyHPNTVt1o5f6OjkBb7mEHIvb7q039N9rkFEtm3mwyyAsy6j8",
	"kGjSUbA88/FWxxagfeWA9sITtUm5NThj6ciXsLtnWIcakv0fm1ysm9R/RQwgd8hCKeAxQ7IP/hGmoQzE",
	"Qojs9BV12x4Ho6V7o+pZN5wrkKS7ONqKWnumTPeunjSX+/So6n2YWTFWkmjY+nZc/3iBnYaNj3PiTf3Y",
	"WEtn58P+J9e+/ixWh2p8J6ESLZjwWygFR7OU4hLi5vboqbrmughv3EltH7qbRBroZTOzaOPwh77qREV9",
	"TGnJS+XEiGwsL6gb+t7Ejd0zFODX1mFBuJagNRSNS6RUBjKrQtz+Pjj2oYKiGG+EBDPaxYaAG61g/Lot",
	"0YzdvDhWLOY+eDFeINOw4Q46HRVSHp9zH7Kf0/OQSx26OR20MDX0eritaMjAEGaAxJjql8zflodztG9i",
	"bBJSgs6C56lfVVl2C2th+cSizumCjg9GY5CbXAJlDytJ2mny4Sp7OkKU63wJu1NSgkI/1rCDMdAkORHo",
	"Ud3I3ibfqfnNpOBe3Ql4v285sEqpMhtxdpwPS0H3Kf5S5JeApdyaSOWRVtvsPtrYG2/29XoXSh9XFUgo",
	"HpwwdiYpNyQ4trtd4nqTy3t23/xbnLWoqTq7N6qdvJPpIHusm65vyc3CMPt5mAHH6m45FQ1yoNDwdqQM",
	"tebXicbzJ1O18qGrud8MvCUqgiIlk1yQx+o5HvSU4Qgz2aOSC+jI5Mx7upgpVSok8ybZ9m6oNKbiyRAg",
	"C3JK0ncDhR88iYBke+vEKaQKZr52mVoyDa0T+aZF3IaduFMafX/mZpYuv1sqDZ2e2u5rKtjY5C+E5vdc",
	"L4TVXO9uUmpt0Al8YD0ZxfLBcKwmEqtdSBuNNcRhWarrDJlV1rQrSKm27j3TvYxD76z2O3eqFxDFdXHj",
	"BbUdW/OC5UpryOMv0ml7BNVGachKhWFeKQ/00jq5e4O5OpKVasVUlasCqO1HmoLG5qql5Cg2QRRVk0QB",
	"0Q4mfdI3ER1PnPKu2tBTcR5adEa+zJHAUzC+GI/HEL08hHdPC/ejGm6cL9EiJDDWpZt7TdJn3Mgejuxj",
	"L8oyGAzGWtmzn0yN4UiYeOOmeMo2yliv2dFIphmqDfG6nytptSrLrhGIROKVt2x/z7dneW5fKnW54Pnl",
	"A9QjpbLNSot5SEvtB+O1M+leRaaJPff7FU7pPQxN80RydGN9zzmO7ocdgfn+MMc6bOM+S/TB762ry7zS",
	"asOZZNyqjcjTNPyvFd02GpOWYgnJUk/Uko6S8/E1ZNTx5dAEMyBLGqIZJE/21Dpjnqd5py4yD/dflHj7",
	"47Il+Eti5GIa8kkvtWT5qGzVAwAhpYxRW2vqYxdLPg1XUSvKMEeXdB/QiVwcI39uB5sb4c6BsnAroAbR",
	"hg2A90nZn1NJLopcXKhteP6grdl1I+A/7qfyDvMYC6m6aElLU1BVqO8xwhHSlYH3xh+9wWzhxdQopKbn",
	"6MQbNQJgPC6pA8Ok6KRjwVhyUUKRpVrWnTc2oXmk2fqMln4naWE8J895HTrGubFrDb7eBInUuutvqrgj",
	"JdW8PrTcygK2YLAYBLXP54b8DMHfASV1iusp36rKSriCTriWL4JRo2gnriB8a5qPWQFQofevb5NKxSHF",
	"d3nPUOHXnkWRLFOwm7RcEGJpp9gBs0TSiLKVGR0TM/UoOYiuRFHzDv7MsSJH1+zmjnICVQOZPAt629Rp",
	"fqIRXocBzsL3KVEmYOL9ND50NAtKo24fAzoYl1ibsVMv02GJcYWXxqGBsxWN45NIvOUbpuLXctwAOCT5",
	"Vr2ZuE9CyQixX28hR6mmG3d3e5wwHIyZXvWmURFcNzt8c0Py70LDe0l4dLyUqmEAGexeS02gCy+w4wvY",
	"O1g6sddJzdgVzvN/z//mbFGHgZxeTU3qYg3uBQSPHRaUbpwVXqAVzYUW4gvnvp5gXykXUWT1hu+Y0viP",
	"09d+qXkpljs8oQR++IyZNXck5F2E5Lv28Ypu4v2CyTwAFuwCKkxF6xZTx4yG27lRIqDdFRi6iSi24ZcQ",
	"bwO65Ynz5NaxHFMvNsIYvOx62znEgl98qAmx4UWsI2Nlum7f5lCr1H39f7dZW/FUoaBUVfI8tCT0PVE6",
	"BnFqOxqIy65hsz+tb6geBxJoWpm2RKtDOm9xA+PekZEbqVj5sX4PHbAHLR4HrS5utYxjusG3mdF7EiIn",
	"LeWud2FqfMgA6Lgx3CHw4z55nwb/yaKRY8uYAv4fBe8jnTFjeKkJ5ifAciflPwEr2VUXaptpWJpDoRBk",
	"WHWKsG6LBQTjpJC5Bm4oNuT8R6+ytTURhXQqJEUvNt63ZpQClkK2zFLIqrYJDQBLI8pdhLDYPI1oHXH2",
	"jEkJTgy74uWPV6C1KMY2zp0O6iEX16QPJnn/bUL5b+7U4QDCtNoPZhJCm6kWveYucOp6Q4GFxnJZcF3E",
	"rwvJctDu3mfXfGdu7vtw0OrayRcHvB88kma6+e2RHwRJmwApd959eUvPRAMgv0MXxQTXAkawJtwKZBSx",
	"asSTMIQhXVaBb7NSrTC/bIQAffFJ9P2QsqIkGmxJHjpuHiN+hf3TYN1tf/CtwlmnTLH/nP2IqEOF5ycp",
	"7N6TRta0fsIfRWTSQQj0L1dtWDhtzpD+UzmabzCJoZOnGYS7kMQQ9prCQ2g+GPFkdC24I7uIDnKf4Bub",
	"a6f3M+r64FOZoKTDZqjbmj2B32DaIGee+8CdodFnoBQTUuY+j/ZImxBZksM9MAIeNZ/2Z6s7bRNM4cY5",
	"pgnU/szZrFJVlk+JBqTS/IU3aHtIuzCO0Edkrh5ZdxM4YZpmFZ3CJp2uFcf2wRrtmnHIL1Pl+5TsMYPG",
	"CAftGsvVEnkZtWZGOwzmeDTGi3k/+6hrsGmYBONMQ15rNGhe893hvkIjJWEv/nb2+eMnf3/y+RfMvcAK",
	"sQLTlhXu9eVpI8aE7NtZPm2M2GB5Nr0JIS+dEBc8ZSHdptkUf9aI25q2ZuCgK9ExltDEBZA4jol+MDfa",
	"KxynDfr+Y21XapF3vmMpFPz2e6ZVWabLujeiW8LUn9qtyNjvJP4KtBHGOkbY9dUJ28bKmjWa47C45xXV",
	"GVEy99XXGyoQdiQYJ7WQsVBL5GeY9ev9Gwy2Vel5Ffkk9q3L60VkEcPgDIzfWACrVOVFabFkKYgwt0RH",
	"OZfe0IjhnVH0ZMNsKY4yRYg+JjlNenFH3P3cvtut0aY5vdvEhHgRDuUNSHPMkj6e0X4TTtKa0v8w/COR",
	"on9nXKNZ7m/BK5L6wc26bk8CbZiunSAPBGAkD7OTQRc35W8rjWqyyqP9Prg6++LH960L9GDCAEISPjgA",
	"XpxY2b7XxLh7cH7nkp3fN0iJlvJ+jBI6yz+UqxlYb3ORRFvkjRTWgiG2pIZiYZSIa543+a0jWskgDRY7",
	"8DvNtCwT6bNkN8EzFROOUwn0FS8/Pdf4RmhjzxAfULweT5qJcyhjJBMqzc0quL3kk+aO8iXvbmr5ClN2",
	"/xvcHiXvOT+UdxcPbjO0emFL6lW4FSgLmF3jmBQO9PgLtvDV9CsNuTB9N/R1EE6alEHQYulDL2FrD+Qo",
	"Hlrnz8regoyXIWaE/RC5kxSa7VoI2yP6OzOVkZObpPIU9Q3IIoG/FI+Ku28euC5uWXn9ZgVBotJeRxYE",
	"GfYVnbo8KnrhLp3awHCdk2/rDm4TF3W7tqnVbCYXcH/37q1dTClCky627j7HKjh3UnX9qJrrv0H9G8KR",
	"H8PPm6KYn8cqolLVz5Hiu739qEV5MECkU0r543y2AglGGCwW/HffHOLT3qUBAsrJHx5VgvU2hUQIMYm1",
	"diaPpoqKJE+oj+w/S1RDxny3vNbC7rAxaDCgib8nK/V821R98FVDGt+Vv/usuoSmOXNbI6I24Xb9VvES",
	"7yNyqUl3C6nyhH295Zuq9OZg9td7i/+Az/7ytHj02eP/WPzl0eePcnj6+ZePHvEvn/LHX372GJ785fOn",
	"j+Dx8osvF0+KJ0+fLJ4+efrF51/mnz19vHj6xZf/cc/xIQcyARpqdz+b/b/ZWblS2dmr8+yNA7bFCa/E",
	"d+D2BnXlpcLGdQ6pOZ5E2HBRzp6Fn/6fcMJOcrVphw+/znwDltna2so8Oz29vr4+iT85XWFSeGZVna9P",
	"wzzYTqwjr7w6b6LJKe4Fd7S1HuOmelI4w2evv754w85enZ+0BDN7Nnt08ujkse9dK3klZs9mn+FPeHrW",
	"uO+nnthmzz58nM9O18BLrKHi/tiA1SIPjzTwYuf/b675agX6BBMG6KerJ6dBrDj94JPjP+57dhqHVJx+",
	"6NQQKA58GUIGDr1y+iE0udw/YKfBoQ/Wij6YCOi+104X2Nhi6qsQr258KaiPmNMPKFGP/n7qzSLph6jZ",
	"0JE5DbU4Rt6krOv0ww4KP9itW8j+4dw70Xg5t/m6rk4/4H+Q+qMVURHHU7uVp+h5Pf3QQYR/PEBE9/f2",
	"8/iNq40qIACnlkvqDLrv8ekH+jeaCLYVaOHESiyc4n+lAlen2CBqN/x5J/Pkj8N1dIr7uHOb9GK/pory",
	"nJXChHCEbk0gEzePPi+Qv9t+oSH3UghFRCbx5NGjwBm93hGR7KlnArO2lfy0sgX98kbDG3PIGvet7ON8",
	"9vRIQPfaljpFIRPAfMULFnJYce7Hn27uc0lhke6uoDsNIXj66SDobB/7DnbsB2XZN6h8fZzPPv+UO3Eu",
	"nSjIS4ZvRg06h0fkJ3kp1bUMbzphqN5suN5NPj6WOy74dlZpccW9KNq8Jlez91jDgfKau0ftrCgGRE9C",
	"IRj7lcLbdQxjG7OqvNulRVorEwvpljBUqgeoekN9anuVwqieTXC+S1XALJZWra7h4y15Qi9gg2t7nrAR",
	"obETI6WXoaVuBGqy7FXfnU0jD/WZQyTcdn1uA4z/5Cl/8pSGp3z+6LNPN/0F6CuRA3sDm0pprkW5Yz/J",
	"JnL9xjzurCiStQK7R/8gj5vPtlmuCliBzDwDyxaq2IXO9p0JLoHU34EgcxrUxY7GMMI9gyKaklbaeMrZ",
	"s7cpP6dvw1rVi1LkjExlqCs6RShS5ZribV3mN4+2dcB+EgWCWSHKukkkttfKJ+oNLxR2P06vN79Qh3Y8",
	"iMLu2LWQhbrG9tQI7i81IJ/38IZpZgkAo6C9YS+M1gPgAByANTYfug6mYGfP5C/5zeYu+bFTv7/llXXw",
	"Mm2KI/3XxY8/ROk8lIJMHn5MJiHSxchfrTCi9ZpjiJe2UJyw52S6KXdMKnQS1KbTrufkz3voT95/e97/",
	"bVMtkxr1WOzAMWRJ0V1wMkngTfL2D50/vd1iRvGVqRqX7nfG2QqbrA0vqMWOnb8YaK/0Wf9K+GqHr/Zu",
	"hQS/74N4FOMfYS/7RBq3kJWyTZQpLepPIfNPIfNWiuvkwzNFd01alqj1IR/oY/PQxTDVj5vbIShT7E+/",
	"6/G9k40f2rZStiyqpwsFix5QencfzX+yiD9ZxO1YxLeQOIx4aj3TSBDdcbauqQwDq3gUnZipIHWE1+uS",
	"6yij7pAJ+wxHTKuCvwnX+NQGuySuyF6HgcCCIuASG3i3Nrw/Wd6fLO9fh+WdHWY0XcHk1lavS9hteNXY",
	"usy6toW6jjzkCAtFrw59fKT49/8+vebCZkulfXcGvrSghx9b4OWpb8Xa+7XtfjZ4gi3doh/jOkjJX095",
	"12nZdZw71jv24cCrnnrqHccjL4Uk5PC4DcKJg1qQ7TfhLG/fO5ZtQF+FG6GN0Xh2eopVKdbK2NPZx/mH",
	"XvxG/PB9Qx4fmnvEk8lHpAulxUpIXmY+NqLtJz17cvJo9vH/BAAA///hG5tY9hMBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
