// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
