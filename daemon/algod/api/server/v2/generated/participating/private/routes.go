// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
