// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"0G3hAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
