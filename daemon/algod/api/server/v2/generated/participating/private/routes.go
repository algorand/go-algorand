// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
