// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
