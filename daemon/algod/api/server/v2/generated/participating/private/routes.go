// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (GET /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.GET(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
