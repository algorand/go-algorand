// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8aG5RxyZfHz/8f8HAAD//yrxrgdFAAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
