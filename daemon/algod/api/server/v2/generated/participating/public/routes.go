// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
