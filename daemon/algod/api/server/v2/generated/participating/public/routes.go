// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
