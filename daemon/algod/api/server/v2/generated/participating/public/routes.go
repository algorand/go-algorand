// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
