// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
