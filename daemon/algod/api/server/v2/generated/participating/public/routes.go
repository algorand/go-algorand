// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XPctpLgv4Kb3Srb2qEkfyT74qvUnmwnedrYsctSsvvW8iUYsmcGTyTAB4DzEZ//",
	"9ys0ABIkwRmOpNjJbn6yNSSBRqPR6O/+MElFUQoOXKvJ0w+TkkpagAaJf9E0FRXXCcvMXxmoVLJSM8En",
	"T/0zorRkfDGZTpj5taR6OZlOOC2gecd8P51I+EfFJGSTp1pWMJ2odAkFNQPrbWnerkfaJAuRuCHO7BDn",
	"LyYfdzygWSZBqT6Ur3m+JYyneZUB0ZJyRVPzSJE100uil0wR9zFhnAgORMyJXrZeJnMGeaaO/SL/UYHc",
	"Bqt0kw8v6WMDYiJFDn04n4tixjh4qKAGqt4QogXJYI4vLakmZgYDq39RC6KAynRJ5kLuAdUCEcILvCom",
	"T99NFPAMJO5WCmyF/51LgF8h0VQuQE/eT2OLm2uQiWZFZGnnDvsSVJVrRfBdXOOCrYAT89UxeVUpTWZA",
	"KCdvv31OHj9+/JVZSEG1hswR2eCqmtnDNdnPJ08nGdXgH/dpjeYLISnPkvr9t98+x/kv3ALHvkWVgvhh",
	"OTNPyPmLoQX4DyMkxLiGBe5Di/rNF5FD0fw8g7mQMHJP7Mt3uinh/J91V1Kq02UpGNeRfSH4lNjHUR4W",
	"fL6Lh9UAtN4vDaakGfTdafLV+w8Ppw9PP/7Tu7Pkv9yfXzz+OHL5z+tx92Ag+mJaSQk83SYLCRRPy5Ly",
	"Pj7eOnpQS1HlGVnSFW4+LZDVu2+J+dayzhXNK0MnLJXiLF8IRagjowzmtMo18ROTiueGTZnRHLUTpkgp",
	"xYplkE0N910vWbokKVV2CHyPrFmeGxqsFGRDtBZf3Y7D9DFEiYHrRvjABf1+kdGsaw8mYIPcIElzoSDR",
	"Ys/15G8cyjMSXijNXaUOu6zI5RIITm4e2MsWcccNTef5lmjc14xQRSjxV9OUsDnZioqscXNydo3fu9UY",
	"rBXEIA03p3WPmsM7hL4eMiLImwmRA+WIPH/u+ijjc7aoJCiyXoJeujtPgioFV0DE7O+QarPt/37x+gci",
	"JHkFStEFvKHpNQGeigyyY3I+J1zogDQcLSEOzZdD63BwxS75vythaKJQi5Km1/EbPWcFi6zqFd2woioI",
	"r4oZSLOl/grRgkjQleRDANkR95BiQTf9SS9lxVPc/2balixnqI2pMqdbRFhBN1+fTh04itA8JyXwjPEF",
	"0Rs+KMeZufeDl0hR8WyEmKPNngYXqyohZXMGGalH2QGJm2YfPIwfBk8jfAXg+EEGwaln2QMOh02EZszp",
	"Nk9ISRcQkMwx+dExN3yqxTXwmtDJbIuPSgkrJipVfzQAI069WwLnQkNSSpizCI1dOHQYBmPfcRy4cDJQ",
	"KrimjENmmDMCLTRYZjUIUzDhbn2nf4vPqIIvnwzd8c3Tkbs/F91d37njo3YbX0rskYxcneapO7Bxyar1",
	"/Qj9MJxbsUVif+5tJFtcmttmznK8if5u9s+joVLIBFqI8HeTYgtOdSXh6RU/Mn+RhFxoyjMqM/NLYX96",
	"VeWaXbCF+Sm3P70UC5ZesMUAMmtYowoXflbYf8x4cXasN1G94qUQ11UZLihtKa6zLTl/MbTJdsxDCfOs",
	"1nZDxeNy45WRQ7/Qm3ojB4AcxF1JzYvXsJVgoKXpHP/ZzJGe6Fz+av4py9x8rct5DLWGjt2VjOYDZ1Y4",
	"K8ucpdQg8a17bJ4aJgBWkaDNGyd4oT79EIBYSlGC1MwOSssyyUVK80RpqnGkf5Ywnzyd/NNJY385sZ+r",
	"k2Dyl+arC/zIiKxWDEpoWR4wxhsj+qgdzMIwaHyEbMKyPRSaGLebaEiJGRacw4pyfdyoLC1+UB/gd26m",
	"Bt9W2rH47qhggwgn9sUZKCsB2xfvKRKgniBaCaIVBdJFLmb1D/fPyrLBID4/K0uLD5QegaFgBhumtHqA",
	"y6fNSQrnOX9xTL4Lx0ZRXPB8ay4HK2qYu2Hubi13i9W2JbeGZsR7iuB2CnlstsajwYj5d0FxqFYsRW6k",
	"nr20Yl7+q3s3JDPz+6iP/xgkFuJ2mLhQ0XKYszoO/hIoN/c7lNMnHGfuOSZn3W9vRjZmlDjB3IhWdu6n",
	"HXcHHmsUriUtLYDuib1LGUclzb5kYb0lNx3J6KIwB2c4oDWE6sZnbe95iEKCpNCB4Vku0uu/UrW8gzM/",
	"82P1jx9OQ5ZAM5BkSdXyeBKTMsLj1Yw25oiZF1HBJ7NgquN6iS/FQt3BEnOxwH+ZhkKNoIznNM/N1Cho",
	"2DVQKem2t1oceBQvMcfXnlbzDZlLURBRGa3K8ArGuflfWZKU5rnyuoI1qlqRm3xD02X9Si2a4qnhsCYB",
	"2M5IMCV6WeFBk0AKtliiQlIYQbTMvSVBNb4DRQvoXF4InAUzlA/PX3gIYQVcm5XVw3aXokVr8GMDqHuE",
	"M3NhMWINN9p7XWp9qcURkCjuiub30HtGNQ3o3e1tXFa15xG/w5sQZEShfY3/oTkxjw3DN/KAHfaYXOKt",
	"piyPr3GwXoLFgp3JvICmKUEKa/UhJU2vD4LyeTN5/PCOoudvrKHJHVu3iHqHLjcsU3e1TTjY0F61qdKq",
	"+f6QdxjVnqMczDUGAZeiJDmsIO+CYE8kjmYRIjZ3flk8E5sYTM/EpndRiA3cyU6YcUaz0Gdi88JBJuR+",
	"zOPYY5BuFmgUPIV3Bg+ZlZmlcWGczYS82R3dYducNI4ZQs2oAUOadpCEr1Zl4s5mxLhrX+gM1PjCd1+t",
	"3eFjGGth4ULT3wALyox6F1hoD3TXWBBFyXK4A9JfRkWjGVXw+BG5+OvZFw8f/fzoiy8NSZZSLCQtyGyr",
	"QZH7zoJBlN7m8KC/MrQhVLmOj/7lE2/Ob48bG0eJSqZQ0LI/lHUTWNHDvkbMe32stdGMq64BHMURwVxt",
	"Fu3EesAMaC+YMnpIMbuTzRhCWNbMkhEHSQZ7ienQ5TXTbMMlyq2s7sLgA1IKGb26Sim0SEWerEAqJiI+",
	"xzfuDeLe8Epg2f3dQkvWVBEzNzpIKo5id4Sy9IaP5/t26MsNb3Czk/Pb9UZW5+Ydsy9t5Ht7uyIlyERv",
	"OMlgVi1a9gKUvSnJ8EO8o78DbeUWVsCFpkX5ej6/G4OKwIEihg1WgDIzEfuGkRoUpILbeKE9Ngw36hj0",
	"dBHjDdl6GACHkYstT9EafxfHdti8UzCOrkG15Wlg60FNCbJFiyxvb9MZQoed6p6KgGPQ8RIfoznwBeSa",
	"fivkZSP2fSdFVd65kNedc+xyqFuMMzhm5ltvaWJ8kbdj1BYG9uPYGj/Lgp774+vWgNAjRb40CmygZ72R",
	"QszvHsbYLDFA8YE1XeRWte4aMH4QmWEmulJ3III1gzUcztBtyNfoTFSaUMJFBrj5lYoLZwNRTRhOgVEg",
	"OpT39NIqnjMw1JXSyqy2KgnGOPTui+bDhKb2hCaIGjXg4a1d8/YtO52NmMkl0GxLZgCciJlzozoHLy6S",
	"YoCG9uKNEw0j/KIFVylFCkpBljjz7V7Q/Hv26tA78ISAI8D1LEQJMqfy1sBer/bCeQ3bBMOJFLn//U/q",
	"wWeAVwtN8z2IxXdi6O3afvpQj5t+F8F1Jw/Jjkog/l4hWqA0m4OGIRQehJPB/etC1NvF26NlBRK91r8p",
	"xftJbkdANai/Mb3fFtqqHAiSdeqtkfDMhnHKhResYoPlVOlkH1s2L7V0cLOCgBPGODEOPCB4vaRK20gL",
	"xjO0BdrrBOexQpiZYhjgQTXEjPyT10D6Y6fmHuSqUrU6oqqyFFJDFlsDh82OuX6ATT2XmAdj1zqPFqRS",
	"sG/kISwF4ztk2ZVYBFFdOyRdKFJ/cei2M/f8NorKFhANInYBcuHfCrAbBgoOAMJUg2hLOEx1KKeOTpxO",
	"lBZlabiFTipefzeEpgv79pn+sXm3T1xUN/d2JkChsd+97yBfW8zaENElVcTBQQp6bWQPNIPYkJA+zOYw",
	"JorxFJJdlI8qnnkrPAJ7D2lVLiTNIMkgp9v+oD/ax8Q+3jUA7nij7goNiY31i296Q8k+tGrH0ALHUzHh",
	"keATkpojaFSBhkDc13tGzgDHjjEnR0f36qFwrugW+fFw2XarIyPibbgS2uy4owcE2XH0MQAP4KEe+uao",
	"wI+TRvfsTvE3UG6CWo44fJItqKElNOMftIABG6pLowjOS4e9dzhwlG0OsrE9fGToyA4YdN9QqVnKStR1",
	"voftnat+3QmiblySgaYsh4wED6waWIbfExul1h3zZqrgKNtbH/ye8S2ynJwpFHnawF/DFnXuNzb8OTB1",
	"3IUuGxnV3E+UEwTUB1UaETx8BTY01fnWCGp6CVuyBglEVbOCaW3TGtqqrhZlEg4Q9WvsmNE7yGM+xZ1u",
	"1gscKlhefyumE6sT7IbvsqMYtNDhdIFSiHyEhayHjCgEoyIZSCnMrjOXYeFj7D0ltYB0TBtd2vX1f0+1",
	"0IwrIH8TFUkpR5Wr0lDLNEKioIACpJnBiGD1nC7+qcEQ5FCA1STxydFRd+FHR27PmSJzWPu0JPNiFx1H",
	"R2jHeSOUbh2uO7CHmuN2Hrk+0OFjLj6nhXR5yv74GzfymJ180xm89hKZM6WUI1yz/FszgM7J3IxZe0gj",
	"42KPcNxRvpx2LEtv3bjvF6yocqrvwmsFK5onYgVSsgz2cnI3MRP8mxXNX9efYcoVpIZGU0hSTBQaORZc",
	"mm9sbpEZh3FmDrCNKx4LEJzbry7sR3tUzCZ0kxUFZIxqyLeklJCCTakxkqOql3pMbLBtuqR8gQqDFNXC",
	"RXvacZDhV8qaZmTFe0NEhSq94QkauWMXgAuj8llVRpwCalS6roXcKjBrWs/nEunG3MzBHnQ9BlEn2XQy",
	"qPEapK4ajdcip50aNuIyaMl7AX6aiUe6UhB1Rvbp4yvcFnOYzOb+Nib7ZugYlP2Jg/jT5uFQCKpRt/Pt",
	"HQg9diAioZSg8IoKzVTKPhXzMA3U3WFqqzQUfUu+/fTngeP3dlBfFDxnHJJCcNhGKx8wDq/wYfQ44TU5",
	"8DEKLEPfdnWQFvwdsNrzjKHG2+IXd7t7QrseK/WtkHflErUDjhbvR3gg97rb3ZQ39ZPSPI+4Fl2SWJcB",
	"qGkdWMokoUqJlKHMdp6pqT1ozhvpMsra6H9Th77fwdnrjtvxoYX5x2gjhrwklKQ5Qwuy4ErLKtVX3Aba",
	"BkuNBD95ZXzYavncvxI3k0asmG6oK04x8K22XEUDNuYQMdN8C+CNl6paLEDpjq4zB7ji7i3GScWZxrkK",
	"c1wSe15KkBiBdGzfLOiWzA1NaEF+BSnIrNJt6R9zIJVmee4cemYaIuZXnGqSA1WavGL8coPDeae/P7Ic",
	"9FrI6xoL8dt9ARwUU0k8SOs7+xSjzN3yly7iHMOr7WMfrNkkZU/MMlt1GP7v/X97+u4s+S+a/HqafPUv",
	"J+8/PPn44Kj346OPX3/9/9o/Pf749YN/++fYTnnYYxl6DvLzF04zPn+B6k/jA+rB/sns/wXjSZTIwmiO",
	"Dm2R+5iN7gjoQds4ppdwxfWGG0Ja0ZxlhrfchBy6N0zvLNrT0aGa1kZ0jGF+rQcqFbfgMiTCZDqs8cZS",
	"VD+uMZ4Li05Jl96K52VecbuVXvq2qV4+vkzMp3W+sy2F9JRgMuyS+uBI9+ejL76cTJsk1vr5ZDpxT99H",
	"KJllm1iqcgabmK7oDggejHuKlHSrQMe5B8IeDaWzsR3hsAUUM5BqycpPzymUZrM4h/MJNM7mtOHn3AbG",
	"m/ODLs6t85yI+aeHW0uADEq9jJVIaQlq+FazmwCdsJNSihXwKWHHcNy1+WRGX3RBfTnQuU85kUKM0Ybq",
	"c2AJzVNFgPVwIaMMKzH66aQFuMtf3bk65AaOwdWds/Zn+r+1IPe+++aSnDiGqe7ZrHk7dJDnHFGlXSpf",
	"KyDJcLMwh+mKX/EXMEfrg+BPr3hGNT2ZUcVSdVIpkM9oTnkKxwtBnvrswBdU0yvek7QGa7cFeZmkrGY5",
	"S8l1qJA05Gnr8fRHuLp6R/OFuLp634vN6KsPbqoof7ETJEYQFpVOXDWRRMKaypjvS9XVJHBkWy5o16xW",
	"yBaVNZD6aiVu/DjPo2Wpulnl/eWXZW6WH5ChcjnTZsuI0kJ6WcQIKBYa3N8fhLsYJF17u0qlQJFfClq+",
	"Y1y/J8lVdXr6GEgrzfoXd+UbmtyWMNq6Mpj13jWq4MKtWgkbLWlS0kXMxXZ19U4DLXH3UV4u0MaR5wQ/",
	"a2XI+cB8HKpZgMfH8AZYOA5OVcXFXdivfOW4+BLwEW4hvmPEjcbxf9P9ChK+b7xdnaTx3i5VepmYsx1d",
	"lTIk7nemLii1MEKWj8ZQbIHaqqu9NQOSLiG9dkWRoCj1dtr63Af8OEHTsw6mbLksm5mHBVvQQTEDUpUZ",
	"daI45dtu5QwFWvuw4rdwDdtL0dR7OaRURrtygxo6qEipgXRpiDU8tm6M7ua7qDJU7MvSF0DApEdPFk9r",
	"uvDfDB9kK/LewSGOEUWrssAQIqiMIMIS/wAKbrBQM96tSD+2PKNlzOzNFymd5Xk/ca80ypMLAAtXg1Z3",
	"+7wArL0n1orMqJHbhSsbZ6sTBFysUnQBAxJy6CMaWQOg5VfCQfbde9GbTsy7F1rvvomCbF9OzJqjlALm",
	"iSEVVGY6YX9+JuuGdJ4JrAbrEDbLUUyq4yMt06Gy5auz5S2HQIsTMEjeCBwejDZGQslmSZWvaIeF//xZ",
	"HiUD/IbVNnbVWDoPItaC6n51BSXPc7vntKddukpLvrySr6kUqpYj6iMZCR+D5GPbITgKQBnksLALty97",
	"QmkqfzQbZOB4PZ/njANJYsFvgRk0uGbcHGDk4yNCrAWejB4hRsYB2Ohex4HJDyI8m3xxCJDcVS6hfmx0",
	"zAd/Qzx9zIaDG5FHlIaFswGvVuo5AHURk/X91YnbxWEI41Ni2NyK5obNOY2vGaRX6gfF1k5hHxfg8WBI",
	"nN3hALEXy0FrslfRTVYTykx12YaoQLcD4pnYJDZ/NCrxzjYzQ+/RCHnMZo0dTFtU6Z4iM7HBoCG8WmxE",
	"9h5YhuHwYAQa/oYppFf8bug2t8Dsmna3NBWjQoUk48x5NbkMiRNjph6QYIbI5X5QJ+lGAHSMHU3Rcaf8",
	"7lVS2+JJ/zJvbrVpU//PJx/Fjv/QEYru0gD++laYurLRm67EErVTtGNf2kWdAhEyRvSGTfSdNH1XkIIc",
	"UClIWkJUch3znBrdBvDGufCfBcYLLB1F+fZBEFAlYcGUhsaI7uMkPod5kmLFSiHmw6vTpZyb9b0Vor6m",
	"rBsRP2wt85OvACOS50wqnaAHIroE89K3CpXqb82rcVmpHbJl6zuzLM4bcNpr2CYZy6s4vbp5v39hpv2h",
	"ZomqmiG/ZdwGrMywHnk0kHPH1DbWd+eCX9oFv6R3tt5xp8G8aiaWhlzac/xBzkWH8+5iBxECjBFHf9cG",
	"UbqDQQYJuH3uGMhNgY//eJf1tXeYMj/23qgdnwY8dEfZkaJrCYp0xTOmxGIBmS+T5P0DvCmgRXPBF0Hj",
	"jLLcVe8qgoEGVQnjGWzicISSKMLQ5Axh2SsMalsAt4UY4glX0UWGwcv4RmCF+MRenm5oczS887Ljpmvi",
	"Ll0ZNL8xKCHnQDMnByvw69t9wPob4lA3HQoMbVUY3H0YcEBbqk0HVeH7CdYDrJSWJcs2HZO6HXXQ8EIP",
	"spv5WpodrCCTcIPtwUA7vDNKcK06pC6I1JkOT1DPOjGagI0qdSGThr5p6lKLs0qibbYVs9kvelvrByPX",
	"/v1PF1pIugBnX08sSLcaApdzCBqCkrKKaGYd5RmbzyG0K6ub2ERbwHWPW7RxzAgiixufK8b1l09iZLSH",
	"ehoY96MsTjERWhjyNl727fdeOg/MFzVzD7bmBkb4aCLy97BNfjKKLikpk6oJPHQG9fY1esCur4rvYYsj",
	"743nM4Dt2RW0drwFpMGYdbl+ZPNvak06rI+MtUNaW3jATp3Fd+mOtsZVtB4m/uaWaVV8bi/lNgejcf8a",
	"WMbsxkXc62pOD7QR3yXlfZvAsv0ySCC5h1Mx5ft/9a+iOst+H+1eAs098eJyJh+nk9v5OGO3mRtxD67f",
	"1BdoFM8YQ2d9Xq2QhQNRTstSihXNE+cJHrr8pVi5yx9f947jT6yTxCn78puzl28c+B+nkzQHKpNapx9c",
	"Fb5X/mFWZWtg775KUGLxxjVr8wk2v67RGnqP11hdt2M26lWUbyIDgqPovMnzeCjvXt7nghjsEncEM0BZ",
	"xzI0fjYbytAOX6ArynLv4PLQDoTd4uLGtSWIcoVwgFuHQQTRLMmdspve6Y6fjoa69vAknOs1Ft2Laxzc",
	"leRDVuTCGuidS0/fCtli/i7nKhoW8duJVUbItngciEL1zb+6wtQxsYLXL4tfzGk8OgqP2tHRlPySuwcB",
	"gPj7zP2O+sXRUdRjFTVIGSaB9iZOC3hQx48PbsSnVcA5rMdd0GeropYsxTAZ1hRq4xs8utcOe2vJHD4z",
	"90sGOZifjsco6eGmW3SHwIw5QRdDOVZ1+Fxh+40pIng3WhTT+wxpIbMvKHZUsA7A/hHiVYFOs0TlLI2H",
	"E/CZMuyV2zAx8zLBlwfsrmbEig1EHfKKBWOZ18ZUg+wAGcwRRaaKFqRscDcT7nhXnP2jAsIyo9XMmStV",
	"37nqvHKAo/YE0rhdzA1sg1Ga4W9jBwm7iXRlRmcL2mUECYPSeuC+qL1DfqG187XRmQ6NbQ1n7DHuHXGp",
	"jj4cNds8nWU7uGycHjOm76xndK6tycAc0T6yTCVzKX6FuEsDPUGRFH/fP4WhwfZXCNWzsHtii6XUjsym",
	"HW4z+77tHq8bD238rXVhv+i6ZctNLtP4qT5sI2+i9Kp4IVqH5CElLPRqt4OeB1gLHq8gzA8bI/iIF8rt",
	"ebL57a3cmfipDLPUTuz4zal0MPcy+3K6ntFY1wijCxmYgu1txeZoQfzHfgNUnb1tZydBbGr9LrM1skqQ",
	"TYmTfr3NG+o1dtrRGk2jwCBFharL1MYT5kpEhqn4mnLbgtV8Z/mV+1qBdaabr9ZCYoU7FQ8jyiBlRdQc",
	"e3X1Lkv7ISMZWzDbXbRSELSvdAPZzs2WilwL0LomgUPN+ZycToMeum43MrZiis1ywDce2jdmVOF1WTu2",
	"60/M8oDrpcLXH414fVnxTEKml8oiVglS654o5NXBcDPQawBOTvG9h1+R+xgGqNgKHhgsOiFo8vThVxjE",
	"Yf84jd2yrjvsLpadIc/+D8ez43SMcZB2DMMk3ajH0WJgtj388O2w4zTZT8ecJXzTXSj7z1JBOV1APPK8",
	"2AOT/RZ3Ex3zHbxw6w0ApaXYEqbj84Omhj8NZLMa9mfBIKkoCqYLFyymRGHoqelNaSf1w9lGya6DjIfL",
	"P8SYy9KHnHVsXZ9YjaHFQDYKRsb+QAtoo3VKqC1rmLMmGto3OyPnvmoqttSpO+lY3Ji5zNJRlsTg6Dkp",
	"JeMa7R+Vnid/MWqxpKlhf8dD4CazL59EWtO0uzfwwwD/5HiXoECu4qiXA2TvZRb3LbnPBU8Kw1GyB032",
	"eHAqB4ND42GAQ7GIu4ceK/maUZJBcqta5EYDTn0rwuM7BrwlKdbrOYgeD17ZJ6fMSsbJg1Zmh358+9JJ",
	"GYWQsVLozXF3EocELRmsMBcovklmzFvuhcxH7cJtoP+8kUxe5AzEMn+Wo4pA4NHclQZspPifXjU1ndGx",
	"anOsOjZAISPWTme3+8Rxg4dZ3br+Wxv6hc8GMDcabThKHysDEd82pLv+5nPEC3VBsnveMjg+/IVIo4Oj",
	"HH90hEAfHU2dGPzLo/Zjy96PjuKlVaMmN/Nrg4XbaMT4bWwPn4mIAcz3MasDilzmd8QAOXRJmQeGCc7c",
	"UFPS7hn16aWIu8kpiseNxk/B1dU7fOLxgH90EfGZmSVuYBMZP3zY2z3zoiST1c+DiHVKnonNWMLp3EGe",
	"eH4HKBpAyUjzHK6k1xMw6q7fGy8S0KgZdQa5MEpm2O4ktOf/cfBsFj/dge2K5dlPTdWqzkUiKU+X0Xjf",
	"mfnwZyujt65gyyqjHRSWlHPIo8NZ3fZnrwNHtPS/i7HzFIyPfLfbk9Iut7O4BvA2mB4oP6FBL9O5mSDE",
	"arsgUJ1wni9ERnCeplx/wxz7zV2DjnP/qEDp2NHABzbpDZ1dhvnahmcEeIbWr2PyHZbmMLC0ajGj1clX",
	"uWxXfKvKXNBsitU3L785e0nsrPYb25bcNlxboNGlvYqolfyAvsy+w3i8tMMh/Z135ZqbVSud1P3RYsWz",
	"zBtNBzfWCZ1Ac0yInWPywlrC6m7IdhKCNVxlAVnQjs3qYkgT5j9a03SJJqbWRTZM8uM7BXqqbAzwQS/6",
	"uj0HnjsDt2sWaHsFTonQS5BrpgCTeWEF7XpddfE6Z+L09bvay5MV55ZSjg+QKepmHIei3QNnBRLvG45C",
	"1kH8gQYG22jz0MaJF/hVPKS+04Wx47z11Z/qdtKvnI04pVxwlmKt7phAhLWFxnmbRpQ1j7uJ1MSd0Mjh",
	"ivZ+rNMIHRYHu0F6RugQ1/fcBk/NplrqsH9q2LieQAvQynE2yKa+hanzazCuwLVbMUQU8kkhI7Ep0Xj2",
	"2g9+IBlh2ZABQ9W35tkPzoyJ+fTXjKPBwqHNidnW85Arhg5GTpgmCwHKraedlKHemW+OsYxYBpv3xy/F",
	"gqUXbIFj2Ggos2wb+tcf6swHArrAO/Puc/OuK+5c/9yK6rGTnpWlm3S4wW28q/eGDyI4Fn7i4wEC5Nbj",
	"h6PtILedEbx4nxpCgxUGH0GJ93CPMOpmr53O6kZFsBSFbxCb4hat8Mh4BIyXjHtPWPyCSKNXAm4MnteB",
	"71QqqbYi4Ciedgk0H4hjx5RR60q97VDd0tYGJbhGP8fwNjZ9agcYR/1CI7hRviX+UBjqDoSJ5zSvI2Aj",
	"XWdRqnJCVIY5Ip0+tDHGYRi373TdvgD2ZmHVn2O5+ENvoqEiWrMqW4BOaJbFut88w6cEn/pcH9hAWtVd",
	"Uuokr3YR3T61uYlSwVVV7JjLv3DL6YLGzhFqCJtL+x3GIh2zLf4baxEyvDMu9vXgNEkf6JodVjm6n/YZ",
	"k3oNTSeKLZLxmMA75fboaKa+GaE3398ppfusy99FUmWHy4V7FONv35iLI6ws2QsztldLXfgRQ3oFPve1",
	"UuqSZW2uhFdZrxEOOq/rdv+7zRDDjfunePkNpCaHJm97v1oz8FCCcjqYT0+1q+yjKdnJggarpdiQz44R",
	"ve8JGgrztFGed2d8dmvdidBhF8z3LYeLDfVpmMWgo+VmvpBmgw91hny/GspZ94Xk8Xm3sfc1uHJ/pYQV",
	"E5UPovGhrF4ltL+22mTXVQOi648GiH9u4/OgqfzSNVi0y3Q6+fc/WWcaAa7l9ndgOO9teq9leF/ateap",
	"5hVS9+Ya1aurdSuOabIQq+fvZMNW0/I9Ldd7ZPVijDjQb6E+nZxnB12YsZ4QEztK7NjFG6IPl8xuymTj",
	"ESuFYk2LvFin9JEx45fY7Dwo+d0fy8cSriDV2BexiZGSAIcUADeTedv9n6Wzh9XpOrTeVczeVSa73wxx",
	"zx3fq2QTVGOyjeSOxxeFPqsjYW0iz5qqpupGJ/V1dALefA6pZqs9lYP+Ywk8qEoz9XYZhGUeFBJidToK",
	"Fp493OrYALSrsM9OeIIGELcGZygd+Rq29xRpUUO0s12di3WTmqOIAeQOiSERoWKRZtaQ7IJ/mKopA7Hg",
	"Izvt59BUbx9sih3UwbrhXJ4kzcXR1MbaMWW8K++oucynB1WMw8yKoeJC/aaew/rHC+yhqlycE61rloZa",
	"Ojnvd3ZYu5qnWOep9p346qeg/G++qJudJWfXELbtRk/VmsrMv3EntX3s3cTiQM/rmVkTh9/3VUdqhWNK",
	"S5oLI0YkQ3lB7dD3Om7snrIBfk0dFoRrDlJCVrtEcqEg0cLH7e+CYxcqbBTjjZCgBvtzWOAGq+a+bcoC",
	"Y58iilVyqQteDBdIJBTUQCeD4r3Dc+5C9nP73OdS+z41ey1MNb3ub5joMzCY6iExpPo5cbfl/hztmxib",
	"GOcgE+956lby5e0SWVgIMatSe0GHB6M2yI0ugbKDlUTtNGl/lR0dIch1vobtiVWCfKdJv4Mh0FZysqAH",
	"FSA7m3yn5jcVg3txJ+B93nJgpRB5MuDsOO+XH+5S/DVLrwGLstWRygNNhMl9tLHX3uz1cuvL7ZYlcMge",
	"HBNyxm1uiHdst/tfdSbn9/Su+Tc4a1bZiuDOqHZ8xeNB9lirW96Sm/lhdvMwBYbV3XIqO8ie4rabgdLH",
	"kq4jLbWPx2rlfVdzt81xQ1QWiphMcmE9Vs/xoMcMR5jJHpRcQEcmJc7TRVQuYiGZN8m2N0PFMRVOhgBp",
	"4GOSvmso3OBRBEQb90ZOoa1g5mqXiTmR0DiRb1rErd9jOKbRd2euZ2nzu7mQ0OoWbL4WMvMiD1NNW28q",
	"Z0xLKrc3KbXW63Hcs54MYnlvOFYdidUspInG6uMwz8U6QWaV1CXyY6qteU+1L2PfFaj5zpzqGQRxXVQ5",
	"QW1LljQjqZAS0vCLeNqehaoQEpJcYJhXzAM910buLjBXh5NcLIgoU5GBbTURp6ChuSrOKYpNEETVRFFg",
	"aQeTPu03AR2PnPKuGmzb4jx20Yn1ZQ4EnoJyxXgchuzLfXh3NKc+qMnD+RwtQgxjXdq511b6DFt0w4Ed",
	"ulmee4PBUJNu8qOqMBwJE2/MFE9IIZR2mp0dSdVDNSFe91PBtRR53jYCWZF44Szbr+jmLE31SyGuZzS9",
	"foB6JBe6Xmk29Wmp3WC8ZibZqcg0spt4t8KpfQ9D0xyRHNwy3HGOgzv9BmC+38+x9tu4z2Id0dvr6rb4",
	"5wO1M7UoWBqn4T9WdNtgTFqMJURLPdlmWzY5H19DRh1eDnUwA7KkPpqBG4KN7Zfjac6pi8zD/Bcl3u64",
	"ZA7ukhi4mPp80kktSTooW3UAQEhtxqiupO3QFUo+NVcRC5thji7pLqAjuThG/twONjPCnQOl4VZA9aIN",
	"awDvW2V/akty2cjFmdj45w+aml03Av7jbipvMY+hkKqLhrSkDary9T0GOEK8MvDO+CPsP+9v0P1RSHU3",
	"xZE3agDAcFxSC4ZR0UmHgjGnLIcsoXrgckeb0DTQbF1GS7dHLlOOk6fUXthLIGbsSoKrN2FF6k5P/ZIa",
	"UhL1633LLc9gAwqLQdjG4FRZP4P3d0Buu5N1lG9RJjmsoBWu5YpgVCjasRX4b1X9MckASvT+dW1SsTik",
	"8C7vGCrc2pMgkmUMdqOWC4tYu1Nkj1kiakTZ8MQeEzX2KBmIViyraAt/6lCRo212M0c5gqqeTJ54vW3s",
	"ND/aEd76Ac789zFRxmPi/Tg+dDALiqNuFwPaG5dYqaFTz+NhiWGFl9qhgbNltePTknjDN1RJ13zYANgn",
	"+Ua9GblPTPAAsd9sIEWpph13d3ucEByMqE71pkERXNY7fHND8meh4Z0kPDheTNVQgAx2p6XG04UT2PEF",
	"7IrKjdhrpGbsROb4v+N/UzKr/EBGr7aN0UIN7gV4jx0WlK6dFU6gZfWF5uMLp66eYFcpZ0FkdUG3REj8",
	"x+hr/6hozuZbPKEWfP8ZUUtqSMi5CK3v2sUrmol3CyZTD5i3Cwg/lV03GztmMNzWjBIAba5AZ5zCykDX",
	"EG4DuuUt50m1YTmqmhVMKbzsOtvZx4JbvK8JUdAs1JGxMl27I62vVWq+/t9N1lY4lS8oVeY09W3wgCha",
	"dAzittWlJy69hGJ3Wl9fPfYkULfPbIhW+nTe7AbGvQMjN2Kx8kP9Hlpg99oK9lpd3GoZh/S5bjKjdyRE",
	"jlrKXe/C2PiQHtDoZPZVvfaAb6sx+gpgnwL/0aKRQ8sYA/7vBe8D3RhDeG3jxU+A5VbKfwRWa1ediU0i",
	"Ya72hUJYw6pRhGVTLMAbJxlPJVBlY0POXzuVramJyLhRIW30Yu19q0fJYM54wywZLysd0QCwNCLfBggL",
	"zdOI1gFnz5CUYMSwFc1fr0BKlg1tnDkdthtcWJPem+TdtxHlv75T+wMw1Wg/mEkITaZa8Jq5wG3XGxtY",
	"qDTlGZVZ+DrjJAVp7n2yplt1c9+HgVZWRr7Y4/2ggTTTzm8P/CBI2haQfOvcl7f0TNQA0jt0UYxwLWAE",
	"a8StYI0iWgx4EvowxMsq0E2SiwXmlw0QoCs+ib4fq6wIjgZbKw8dNo9iv8LuabDutjv4WuCsY6bYfc5e",
	"I+pQ4fmRM73zpFlrWjfhz0Zk2oPg6Z8vmrBwuzl9+o/laF5iEkMrT9MLdz6Jwe+1DQ+x88GAJ6NtwR3Y",
	"RXSQuwTf0Fw7vp9R2wcfywS1OmyCuq3aEfgNqglypqkL3OkbfXpKsUXK1OXRHmgTspZkfw8MgGcbHruz",
	"1Z62DqYw4xzSBGp35mxSijJJx0QD2tL8mTNoO0jbMA7QR2CuHlh3HTih6mYVrcImra4Vh/bBGuyasc8v",
	"U6a7lOwhg8YAB20by8UceRkeYWvGwRyP2ngx7WYftQ02NZMglEhIK4kGzTXd7u8rNFAS9uKvZ188fPTz",
	"oy++JOYFkrEFqKascKcvTxMxxnjXzvJpY8R6y9PxTfB56RZx3lPm023qTXFnzXJb1dQM7HUlOsQSGrkA",
	"Iscx0g/mRnuF4zRB37+v7Yot8s53LIaC337PpMjzeFn3WnSLmPpjuxUY+43EX4JUTGnDCNu+OqabWFm1",
	"RHMcFvdc2Tojgqeu+npNBUwPBOPEFjIUaon8DLN+nX+DwKbMHa+yPold63J6kbWIYXAGxm/MgJSidKI0",
	"m5MYRJhbIoOcS2doxPDOIHqyZrY2jjJGiC4mOU56YUfc3dy+3a1Rxzm92cSIeOEP5Q1Ic8iSPpzRfhNO",
	"0pjSfzf8I5Kif2dco17ub8ErovrBzfpnjwKtn64dIQ8EYCAPs5VBF7bXbyqNSmuVR/u9d3V2xY9XjQt0",
	"b8IAQuI/2ANemFjZvFfHuDtwPnPJzlc1UoKlvB+ihNby9+VqetZbXyTBFjkjhdagLFsSfbEwSMRVz+v8",
	"1gGtpJcGi730jWaa55H0WWs3wTMVEo5RCeSK5p+ea3zLpNJniA/I3g4nzYQ5lCGSLSrVzSq4vaSj5g7y",
	"Je9uav4GU3b/A8weRe85N5RzF/duM7R6YUvqhb8VbBYwWeOYNhzo4Zdk5qrplxJSprpu6LUXTuqUQZBs",
	"7kIvYaP35CjuW+dPQt+CjOc+ZoT8ELiTBJrtGgibI/qZmcrAyY1SeYz6emQRwV+MR4XdN/dcF7esvH6z",
	"giBBaa8DC4L0+4qOXZ4temEunUpBf52jb+sWbiMXdbO2sdVsRhdwv7p6p2djitDEi62bz7EKzp1UXT+o",
	"5vpvUP/G4siN4eaNUcxPQxVRbdXPgeK7nf2oWL43QKRVSvnjdLIADoopLBb8s2sO8WnvUg+BzcnvH1UL",
	"620KiVjERNbamjyYKiiSPKI+svssUg0Z893SSjK9xcag3oDGfo5W6vmurvrgqobUvit392lxDXVz5qZG",
	"RKX87fqdoDneR9alxs0tJPJj8s2GFmXuzMHk63uzf4XHf3mSnT5++K+zv5x+cZrCky++Oj2lXz2hD796",
	"/BAe/eWLJ6fwcP7lV7NH2aMnj2ZPHj358ouv0sdPHs6efPnVv94zfMiAbAH1tbufTv4zOcsXIjl7c55c",
	"GmAbnNCSfQ9mb1BXngtsXGeQmuJJhIKyfPLU//R//Ak7TkXRDO9/nbgGLJOl1qV6enKyXq+Pw09OFpgU",
	"nmhRpcsTPw+2E2vJK2/O62hyG/eCO9pYj3FTHSmc4bO331xckrM358cNwUyeTk6PT48fut61nJZs8nTy",
	"GH/C07PEfT9xxDZ5+uHjdHKyBJpjDRXzRwFastQ/kkCzrfu/WtPFAuQxJgzYn1aPTrxYcfLBJcd/3PXs",
	"JAypOPnQqiGQ7fkSwwFOPvgOlrvfbnUvdJFYZulRR+B3oF25HGshiNRaQH+AG31KlJAup7iUTJhTNTVX",
	"ZAboLcegL4kFoLWseGpdqHYK4PjfV2f/iW7kV2f/Sb4mp1MXwK5Q7YhNbzNma3I4zyzY/eg99Wx7Vlej",
	"aFzOk6fvYqYg16mqrGY5S4mVJvA4GVoJqL0eseFmaPebNK3EG95s+O1p8tX7D1/85WNM5utJsDWSggIN",
	"Ieq18A0IEWkF3Xw9hLKNi2g24/6jArltFlHQzSQEuO/njFSt8gknvg9rGLEXxPL9+8XrH4iQxOm4b2h6",
	"XSfb+OyqJqMsTK4yXw5B7K6/EGjgVWFuEpe1U6hF2S7gWqP5PTYtQ0Dx0D86PfWczukRwek7cYc6mKlj",
	"fOoTGgavBObEfiqzIrChqc63hKogegBj+XyDwU5KlCiTVmD2TgNmf0a3JdGo9kOzqSMVxoWm+R74LjvN",
	"2FrocIEwpbkK96cv95ARheB97LIPt9bTyJ+7+99jd/uyAymFOdMMo5WbK8dfZy0gncSYbz24A4Uijsnf",
	"RIUSnpHdKw2xVtQ4g/VcuDldXZsgvKxJRcEnR0fdhR8dNcFwc1gjk6UcX+yi4+jo2OzUkwNZ2U5rcqsM",
	"7Kizc8hwvc16RTd1LDElXPCEw4JqtgISqIVPTh/+YVd4zm30thFprej9cTr54g+8ZefcCDY0J/imXc3j",
	"P+xqLkCuWArkEopSSCpZviU/8jo8Puh03Gd/P/JrLtbcI8JolVVRULl1QjSteU7Fg74tO/lPr0JNI2gj",
	"F6ULhRErKKJamdZXseOLyfuPXgcYqVjseu1kho3oxr4KKnh5WDtB/4E6+YAW8MHfT5wbM/4QPRFWxT3x",
	"tfMG3rRVkuIPW1rRB70xC9k9nHknGC+lOl1W5ckH/A9qq8GKbNH1E73hJxgpefKhhQj3uIeI9u/N5+Eb",
	"q0Jk4IET87nt5L/r8ckH+28wEWxKkMxcR1jo0P1qC9KeYEPXbf/nLU+jP/bX0SrGOfDziTeWxPTl9psf",
	"Wn+2aUotK52JdTALuhmsj6wPmXlYqe7fJ2vKtBGSXA1I7ADf/1gDzU9cw5fOr02N9d4TLBwf/NgRq0ph",
	"i8C0Ndq3dH3Zyi2UtvjCM4FWiCGGu0lmjCMXCrlkYzy0D/sqUo83Xi7BRsl6/2tEBtWCzKSgWUoVNhZ3",
	"rZF6uvHHW+pf3VoR5xHvGoKJ5oZ+OUHDT473ulxw3DFCZrAv5PyFn7BJy/rNBbMeRM9oRnzVoIS8ornZ",
	"cMjImRP/W9j4rYWqzy8FfWax5ZPJGc/84VOEYgm1loIo40VYgh5mY4QKo0UaBrAAnjgWlMxEtnVtpiaS",
	"rvXG1nzoMrcT2r4x2oZIKmmhhh7egZXy922a3GeR/NMQ+Kch8E9T0Z+GwD93909D4EhD4J9msj/NZP8j",
	"zWSH2MZiYqYz/wxLm9j3mrbmtXofbfoL1Cy+XY2K6VomayV7YisDpo8JucSCKNTcErACSXOSUmWlK1d1",
	"q8AYTKxpBdnTK560ILGRjmbi+81/bYjpVXV6+hjI6YPuN0qzPA95c/9blHfxkc0C+ZpcTa4mvZEkFGIF",
	"mU1ZDetb26/2Dvu/6nFf9wrjY244Vpzxpa+IquZzljKL8lzwBaEL0YRHY4FPLvAJSAOcbS9EmJ66dBLm",
	"aoW67uPtMtxtyb0vAZw3W7g3pKBDLvFoAkN4B4YS/MuYOIL/0VL6TWs83ZaR7hy7x1X/5Cqfgqt8dr7y",
	"R3fSBqbF/5Zi5pPTJ3/YBYWG6B+EJt9i6P/txDFXeDKNdlm6qaDly6d4c18TPhyG4+ItWgfivntvLgIF",
	"cuUv2Ca69OnJCdbTWgqlTybm+mtHnoYP39cwf/C3UynZCtv4onVTSLZgnOaJi+pMmgjSR8enk4//PwAA",
	"//+YJDGivRYBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
