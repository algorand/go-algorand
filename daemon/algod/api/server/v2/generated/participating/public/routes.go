// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
