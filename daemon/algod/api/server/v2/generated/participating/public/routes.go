// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9RxyBQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
