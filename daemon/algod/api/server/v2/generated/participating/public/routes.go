// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"HZ9OPvz/AAAA//8ezQsLGSMBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
