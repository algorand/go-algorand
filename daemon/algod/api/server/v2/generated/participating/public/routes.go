// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"a5h92Z5JKdkKswC///j/AgAA//+6FpPGod8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
