// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"///HOUKLdtwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
