// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
