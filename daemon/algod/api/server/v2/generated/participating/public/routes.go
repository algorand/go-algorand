// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
