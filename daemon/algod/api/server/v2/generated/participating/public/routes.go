// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7yuYfR31SSHZGouGvf/4/wIAAP//pW2Igr76AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
