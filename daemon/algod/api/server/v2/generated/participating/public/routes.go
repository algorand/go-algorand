// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a5fbNpLoX8HV7jl+rCi1X5lxn5Ozt/1Ipndsx8fdycxdt28CkSUJ0yTAAGC3FF//",
	"93tQAEiQBCX2I/Zk1p/sFvEoFAqFeuPjJBVFKThwrSaHHycllbQADRL/omkqKq4Tlpm/MlCpZKVmgk8O",
	"/TeitGR8NZlOmPm1pHo9mU44LaBpY/pPJxJ+rZiEbHKoZQXTiUrXUFAzsN6WpnU90iZZicQNcWSHOH4x",
	"+bTjA80yCUr1ofyB51vCeJpXGRAtKVc0NZ8UuWR6TfSaKeI6E8aJ4EDEkuh1qzFZMsgzNfOL/LUCuQ1W",
	"6SYfXtKnBsREihz6cD4XxYJx8FBBDVS9IUQLksESG62pJmYGA6tvqAVRQGW6Jksh94BqgQjhBV4Vk8P3",
	"EwU8A4m7lQK7wP8uJcBvkGgqV6AnH6axxS01yESzIrK0Y4d9CarKtSLYFte4YhfAiek1I68rpckCCOXk",
	"3XfPyaNHj56ahRRUa8gckQ2uqpk9XJPtPjmcZFSD/9ynNZqvhKQ8S+r27757jvOfuAWObUWVgvhhOTJf",
	"yPGLoQX4jhESYlzDCvehRf2mR+RQND8vYCkkjNwT2/hWNyWc/4vuSkp1ui4F4zqyLwS/Evs5ysOC7rt4",
	"WA1Aq31pMCXNoO8PkqcfPj6YPjj49G/vj5L/dn8+efRp5PKf1+PuwUC0YVpJCTzdJisJFE/LmvI+Pt45",
	"elBrUeUZWdML3HxaIKt3fYnpa1nnBc0rQycsleIoXwlFqCOjDJa0yjXxE5OK54ZNmdEctROmSCnFBcsg",
	"mxrue7lm6ZqkVNkhsB25ZHluaLBSkA3RWnx1Ow7TpxAlBq5r4QMX9M+LjGZdezABG+QGSZoLBYkWe64n",
	"f+NQnpHwQmnuKnW1y4qcroHg5OaDvWwRd9zQdJ5vicZ9zQhVhBJ/NU0JW5KtqMglbk7OzrG/W43BWkEM",
	"0nBzWveoObxD6OshI4K8hRA5UI7I8+eujzK+ZKtKgiKXa9Brd+dJUKXgCohY/ANSbbb9v05+eEOEJK9B",
	"KbqCtzQ9J8BTkQ3vsZs0doP/Qwmz4YValTQ9j1/XOStYBOTXdMOKqiC8KhYgzX75+0ELIkFXkg8BZEfc",
	"Q2cF3fQnPZUVT3Fzm2lbgpohJabKnG5n5HhJCrr59mDqwFGE5jkpgWeMr4je8EEhzcy9H7xEiopnI2QY",
	"bTYsuDVVCSlbMshIPcoOSNw0++Bh/GrwNJJVAI4fZBCcepY94HDYRGjGHF3zhZR0BQHJzMiPjnPhVy3O",
	"gdcMjiy2+KmUcMFEpepOAzDi1LvFay40JKWEJYvQ2IlDh+Eeto1jr4UTcFLBNWUcMsN5EWihwXKiQZiC",
	"CXcrM/0rekEVfPN46AJvvo7c/aXo7vrOHR+129gosUcyci+ar+7AxsWmVv8Ryl84t2KrxP7c20i2OjVX",
	"yZLleM38w+yfR0OlkAm0EOEvHsVWnOpKwuEZv2/+Igk50ZRnVGbml8L+9LrKNTthK/NTbn96JVYsPWGr",
	"AWTWsEa1KexW2H/MeHF2rDdRpeGVEOdVGS4obWmliy05fjG0yXbMqxLmUa3KhlrF6cZrGlftoTf1Rg4A",
	"OYi7kpqG57CVYKCl6RL/2SyRnuhS/mb+Kcvc9NblMoZaQ8fuvkXbgLMZHJVlzlJqkPjOfTZfDRMAqyXQ",
	"psUcL9TDjwGIpRQlSM3soLQsk1ykNE+UphpH+ncJy8nh5N/mjXFlbrureTD5K9PrBDsZedTKOAktyyuM",
	"8dbINWoHszAMGj8hm7BsDyUixu0mGlJihgXncEG5njX6SIsf1Af4vZupwbcVZSy+O/rVIMKJbbgAZcVb",
	"2/COIgHqCaKVIFpR2lzlYlH/cPeoLBsM4vejsrT4QNEQGEpdsGFKq3u4fNqcpHCe4xcz8n04NsrZgudb",
	"czlYUcPcDUt3a7lbrDYcuTU0I95RBLdTyJnZGo8GI8PfBsWhzrAWuZF69tKKafwX1zYkM/P7qM5/DBIL",
	"cTtMXKhFOcxZBQZ/CTSXux3K6ROOs+XMyFG37/XIxowSJ5hr0crO/bTj7sBjjcJLSUsLoPti71LGUQOz",
	"jSysN+SmIxldFObgDAe0hlBd+6ztPQ9RSJAUOjA8y0V6/heq1rdw5hd+rP7xw2nIGmgGkqypWs8mMSkj",
	"PF7NaGOOmGmI2jtZBFPN6iXe1vL2LC2jmgZLc/DGxRKLeuyHTA9kRHf5Af9Dc2I+m7NtWL8ddkZOkYEp",
	"e5ydByEzqrxVEOxMpgGaGAQprPZOjNZ9JSifN5PH92nUHr20BgO3Q24RuENic+vH4JnYxGB4Jja9IyA2",
	"oG6DPsw4KEZqKNQI+F44yATuv0MflZJu+0jGsccg2SzQiK4KTwMPb3wzS2N5PVoIeT3u02ErnDT2ZELN",
	"qAHznXaQhE2rMnGkGLFJ2QadgRoX3m6m0R0+hrEWFk40/R2woMyot4GF9kC3jQVRlCyHWyD9dZTpL6iC",
	"Rw/JyV+Onjx4+PPDJ98YkiylWElakMVWgyJ3nW5GlN7mcK+/MtSOqlzHR//msbdCtseNjaNEJVMoaNkf",
	"ylo3rQhkmxHTro+1Nppx1TWAYw7nKRhObtFOrOHegPaCKSNhFYtb2YwhhGXNLBlxkGSwl5iuurxmmm24",
	"RLmV1W2osiClkBH7Gh4xLVKRJxcgFRMRV8lb14K4Fl68Lbu/W2jJJVXEzI2m34qjQBGhLL3h4/m+Hfp0",
	"wxvc7OT8dr2R1bl5x+xLG/nekqhICTLRG04yWFSrlia0lKIglGTYEe/oV2y11oHI8lYKsbz1Wzs6S2xJ",
	"+MEKfLnp0xf73ogMjNpdqVtg781gDfYM5YQ4owtRaUIJFxmgjl6pOOMfcPSihwkdYzq8S/TaynALMPpg",
	"Siuz2qok6Pbp0WLTMaGppaIEUaMG7OK1Q8O2stNZJ2IugWZGTwROxMIZn51ZHBdJ0WelPet0105Ec27B",
	"VUqRglJGv7da217QfDtLlnoHnhBwBLiehShBllTeGNjzi71wnsM2QQ+rInf/+pO69wXg1ULTfA9isU0M",
	"vbUK4TwMfajHTb+L4LqTh2RHJRDP+4y+YhhEDhqGUHglnAzuXxei3i7eHC0XINHW/7tSvJ/kZgRUg/o7",
	"0/tNoa3KgbghJzqfsgItQZxyoSAVPFPRwXKqdLKPLZtGLfnerCDghDFOjAMPWCNfUaWtf4rxDNVqe53g",
	"PNZMaaYYBnhQxDEj/+Slm/7YqbkHuapULeqoqiyF1JDF1sBhs2OuN7Cp5xLLYOxantKCVAr2jTyEpWB8",
	"hyy7EosgqmszrnPg9heHxk5zz2+jqGwB0SBiFyAnvlWA3TB2YgAQphpEW8JhqkM5dcDGdKK0KEvDLXRS",
	"8brfEJpObOsj/WPTtk9cVDf3dibAzK49TA7yS4tZGzWzpkYpw5FJQc+N7IEqlnWk9WE2hzFRjKeQ7KJ8",
	"cyxPTKvwCOw9pFW5kjSDhJalFBeRQ/+jbUB8gxiEfpAMcrodHsJ+3gUFF8O9uSAXoqWBRgYwMqFQO5bh",
	"G0QOjh9DryWotciz4VGaJnt9GS2W2uJdHYbT4QnRgzx4sPZQ9hARDZgv3lKpWcpKlL7/CttbV0a6E0SN",
	"6iQDTZlRqYMPVjEpw/7Eepu7Y15PORmlafbB76makeXkTOEl3Ab+HLboXXtrw5hOg+CnW9CuIqMajkk5",
	"QUB9cIQRCsMmsKGpzrdGdNBr2JJLkEBUtSiY1jYura18aVEm4QBRK96OGZ3J2oYA+R0YY0M/waGC5fW3",
	"YjqxUupu+E47omoLHU46LYXIR3gve8iIQjDKu0lKYXaduTBIHyvnKakFpBMM0V9RX0h3VAvNuALyf0RF",
	"UspRCag01LeskHh1oUhjZjBCQT2n82M2GIIcCrC6DX65f7+78Pv33Z4zRZZw6WOHTcMuOu7fR8vCW6F0",
	"63DdglnLHLfjCC9H86a5fJ1c3OUp+/1obuQxO/m2M3htEzVnSilHuGb5N2YAnZO5GbP2kEbG+RBx3FGW",
	"y2Do2Lpx3zGI4/exezVDx6DrTxy4vpuPQ95vI7Pm21vg03YgIqGUoPBUhbqesl/FMgwvd8dObZWGom8O",
	"s11/HhAW33mxoCdJCZ4zDkkhOGyjGVWMw2v8GOttT/ZAZ+SxQ327YlML/g5Y7XnGUOFN8Yu7HZDy2zrs",
	"4xY2vztuxxIaBtajpg95SShJc4Z2AMGVllWqzzhFTSM4yxH3mNefhnXP575JXNmN6KJuqDNO0TVa6x9R",
	"k/4SItL5dwBeBVXVagVKd+SDJcAZd60YJxVnGucqzH4ldsNKkOijmtmWBd2SJc1RVf4NpCCLSrdvTIz/",
	"VdpostYsa6YhYnnGqSY5GK3+NeOnGxzOh9l6muGgL4U8r7Ewi56HFXBQTCVxN9739itGWLjlr120BSZj",
	"2c/WkGfGb4KEtxpaCUb/9+5/Hr4/Sv6bJr8dJE//Y/7h4+NP9+73fnz46dtv/1/7p0efvr33n/8e2ykP",
	"eyw61UF+/MJJk8cvUGRoLHk92D+bFadgPIkS2ekaSME4Jjl0aIvcNYKPJ6B7janU7foZ1xtuCOmC5iyj",
	"+nrk0GVxvbNoT0eHalob0VEg/Vo/xCJOViIpaXqOXvDJiul1tZiloph7KXq+ErVEPc8oFILjt2xOSzZX",
	"JaTziwd7rvQb8CsSYVcdJnttgaDvQ49HlKOR2gWJ48lbVtwSRaWcoRwDJr0vUyynddaAzRY+JBhSvqbe",
	"Ee/+fPjkm8m0CQWvvxtN3X79EDkTLNvEAv4z2MQkNXfU8IjdUaSkWwU6zocQ9qjb1vr6wmELMCK+WrPy",
	"8/Mcpdkizit9GJrT+Db8mNv4MHMS0eS9dZY0sfz8cGsJkEGp17EswpbMga2a3QTouCHRysanhM1g1tW4",
	"shUo70DOgS4xmw3NtmJMWG19DiyheaoIsB4uZJRaE6MfFJMd3/80nTgxQt26ZO8GjsHVnbO2b/u/tSB3",
	"vn95SuaO9ao7NvfEDh1kC0QsGS4gtuWgNtzM5k7b5JszfsZfwJJxZr4fnvGMajpfUMVSNa8UyGc0pzyF",
	"2UqQQx9j+4JqesZ7MttgeYMgupmU1SJnKTkPZeuGPG3Kan+Es7P3huOfnX3o+er6krCbKspf7ATJJdNr",
	"UenE5eQlEi6pzCKgqzonC0e2GbW7Zp0SN7ZlxS7nz40f53m0LFU3N6O//LLMzfIDMlQu88BsGVFaSC/V",
	"GFHHQoP7+0a4i0HSS5/QWSlQ5JeClu8Z1x9IclYdHDwC0kpW+MUJD4YmtyW0bF7Xyh3p2rtw4VZDgo2W",
	"NCnpClR0+RpoibuPkneB1tU8J9itlSThg8BwqGYBHh/DG2DhuHLANy7uxPbyxRXiS8BPuIXYxogbjSPo",
	"uvsVpE1ce7s6qRe9Xar0OjFnO7oqZUjc70ydc70yQpb3zim24uYQuPT0BZB0Dek5ZJgpC0Wpt9NWd+8A",
	"diKrZx1M2YxyG/SMaY9oHlwAqcqMOqGe8m03/0yB1j7p7h2cw/ZUNFmTV0k4a+c/qaGDipQaSJeGWMNj",
	"68bobr6LMsCcj7L0aUQYT+7J4rCmC99n+CBbkfcWDnGMKFr5OUOIoDKCCEv8Ayi4xkLNeDci/djyjL6y",
	"sDdfJAHd837imjRqmAsICFeDaUf2ewFYnkJcKrKgRm4XrrKCzfEJuFil6AoGJOTQQjsyk6Zl1cVB9t17",
	"0ZtOLLsXWu++iYJsGydmzVFKAfPFkAoqM50wED+TdQLgCmYECyY5hC1yFJPqeBnLdKhsWcptBZgh0OIE",
	"DJI3AocHo42RULJZU+WLPmBtDH+WR8kAv2PO2q5M5eMggiEogFHnIXue2z2nPe3S5Sv7JGWfmRyqliOy",
	"jI2Ej0GTse0QHAWgDHJY2YXbxp5Qmvy5ZoMMHD8slznjQJJYMARVSqTMVu1orhk3Bxj5+D4h1phMRo8Q",
	"I+MAbHRu4cDkjQjPJl9dBUju8v+oHxvdYsHfEA9VtuGBRuQRpWHhjA8EonoOQF0ETX1/deK4cBjC+JQY",
	"NndBc8PmnMbXDNJLmEWxtZMe69yr94bE2R22fHuxXGlN9iq6zmpCmckDHRfodkC8EJvE5ipEJd7FZmHo",
	"PRoxiZkTsYNpU5PvKLIQG3TZ49ViI/T2wDIMhwcj0PA3TCG9Yr+h29wCs2va3dJUjAoVkowz59XkMiRO",
	"jJl6QIIZIpe7QbbxtQDoGDuaunxO+d2rpLbFk/5l3txq06aKhg9Gjx3/oSMU3aUB/PWtMHV+8NuuxBK1",
	"U7Q9z+3U6ECEjBG9YRN9d0/fqaQgB1QKkpYQlZzHnIBGtwG8cU58t8B4gQnYlG/vBeEMElZMaWjM8eZi",
	"9v6lz22epFj3RYjl8Op0KZdmfe+EqK8pW1gAO7aW+dlXcCE0JEsmlU7QlxFdgmn0nUKl+jvTNC4rtQMm",
	"bAk0lsV5A057DtskY3kVp1c3719fmGnf1CxRVQvkt4wToOmaLLBkXzSMasfUNtJu54Jf2QW/ore23nGn",
	"wTQ1E0tDLu05/iDnosN5d7GDCAHGiKO/a4Mo3cEgUfZ5AbmOZZUGcpM9nJlpONtlfe0dpsyPvTcAxUIx",
	"fEfZkaJrCQwGO1fB0E1kxBKmg4p3/UypgTNAy5Jlm44t1I46qDHTKxk8fCmRDhZwd91gezAQ2D1jwdoS",
	"VLtqTCPg29qFraTt2SjMnLZru4QMIZyKKV95t4+oOpljH65OgeZ/he1Ppi0uZ/JpOrmZ6TSGazfiHly/",
	"rbc3imd08ltTWssTckWU27BymifOwDxEmlJcONLE5t4e/ZlZXdyMefry6NVbB/6n6STNgcqkFhUGV4Xt",
	"yj/MqmyBmoED4it7Gp3Py+xWlAw2v66qERqlL9fgqigG0miv3FPjcAiOojNSL+OxRntNzs43Ype4w0cC",
	"Ze0iacx31kPS9orQC8pybzfz0A7EBeHixtUMi3KFcIAbe1cCJ1lyq+ymd7rjp6Ohrj08KZxrR53HwpYy",
	"VUTwrgvdiJBojkNSLSgWa7JWkT5z4lWBloRE5SyN21j5Qhni4NZ3ZhoTbDwgjJoRKzbgiuUVC8YyzdQI",
	"RbcDZDBHFJm+8NcQ7hbC1aCvOPu1AsIy4Np8kngqOwcVq2M5a3v/OjWyQ38uN7C10DfD30TGCAuVdW88",
	"BGK3gBF66nrgvqhVZr/Q2iJlfghcEldw+Icz9q7EHc56Rx+Omm0Y5LrtcQtLxvf5nyEMW150f716r7y6",
	"imkDc0TrzzOVLKX4DeJ6HqrHkawDX5qNYZTLb8BnkXSzLouprTtNGf1m9sHtHpJuQitUO0hhgOpx5wO3",
	"HNaI8hZqyu1W23LQrVi3OMGE8alzO35DMA7mXkxvTi8XNFZAywgZBqajxgHcsqVrQXxnj3tn9meuWt6M",
	"BL7kui2zOY4lyCYhqF8v4ZoCg512tKjQSAZItaFMMLX+v1yJyDAVv6TcVhU3/exRcr0VWOOX6XUpJGYo",
	"q7jZP4OUFTSPSw5Z2jfxZmzFbE3tSkFQtNkNZB8jsFTkCl9bF3uDmuMlOZgGZeHdbmTsgim2yAFbPLAt",
	"FlQhJ68NUXUXszzgeq2w+cMRzdcVzyRkeq0sYpUgtVCH6k3tvFqAvgTg5ADbPXhK7qLbTrELuGew6O7n",
	"yeGDp2h0tX8cxC4AVzx/FzfJkJ38zbGTOB2j39KOYRi3G3UWzWa1L54MM64dp8l2HXOWsKXjdfvPUkE5",
	"XUE8UqTYA5Pti7uJhrQOXnhmy/UrLcWWMB2fHzQ1/Gkgjt2wPwsGSUVRMF04544ShaGnpiKzndQPZ2v/",
	"u2J6Hi7/EX2kpXcRdZTIz2s0tfdbbNXoyX5DC2ijdUqoTUvPWRO94Et8kmNf9QKrC9ZFBS1uzFxm6Sjm",
	"YDDDkpSScY2KRaWXyZ9JuqaSpob9zYbATRbfPI5UVGxX9uJXA/yz412CAnkRR70cIHsvQ7i+5C4XPCkM",
	"R8nuNXkjwakcdObG3XZDvsPdQ48VyswoySC5VS1yowGnvhHh8R0D3pAU6/VciR6vvLLPTpmVjJMHrcwO",
	"/fjulZMyCiFjpaya4+4kDglaMrjA2L34Jpkxb7gXMh+1CzeB/st6HrzIGYhl/izHFIFnIqKd+iqftSXd",
	"xapHrANDx9R8MGSwcENNSbui4ud3+nnjc9/5ZL54WPGPLrBfeEsRyX4FA5sYVHuNbmdWfw/835Q8E5ux",
	"m9o5IX5j/wlQE0VJxfLspya/s1NMV1KerqP+rIXp+HPz7Ee9OHs/RStGrSnnkEeHs7Lgz15mjEi1/xBj",
	"5ykYH9m2W9/XLrezuAbwNpgeKD+hQS/TuZkgxGo74a0OqM5XIiM4T1OeqOGe/brQQfXOXytQOpY8hB9s",
	"UBfaLY2+a4tHEuAZaosz8r19tm8NpFXpA7U0VlS5rRoB2QqkM6hXZS5oNiVmnNOXR6+IndX2scXrbfHK",
	"FSop7VV07FVB5bVx4cG+Dn08dWH8OLtjqc2qlcbCO0rTooylmZoWp74B5rKGNnxUX0LszMgLqzkqr5fY",
	"SQw9LJksjMZVj2ZlF6QJ8x+tabpGlazFUodJfnzVVU+VKnjpqH6xoC5HhufOwO0Kr9q6q1MijN58yZR9",
	"rQ0uoJ3ZWqd5O5OAz3RtL09WnFtKicoeu8oQXAftHjgbqOHN/FHIOoi/okBuixZftQjtCfaK1qLpVrTt",
	"PXFksxvrSvT+Fc6UcsFZipVgYleze/ltjA9sRNGcrpHVH3F3QiOHK1pHtw6Tc1gcrKzrGaFDXN8IH3w1",
	"m2qpw/6p8YmxNdVkBVo5zgbZ1JeDdnZAxhW48nL4CGDAJ4Vs+RWRQ0Zd1Unt0rgiGWFazIBi95359sap",
	"/Rgvfs44CvgObS403Vrq8GEqbbQCpslKgHLraecGq/emzwzTZDPYfJj5h6xwDOuWM8u2Puj+UEfeI+08",
	"wKbtc9PWFkVpfm5FINtJj8rSTTpcLDwqD+gNH0RwxLOYeNdOgNx6/HC0HeS2M5QE71NDaHCBjmgo8R7u",
	"EUZdOLvzKIMRWi1FYQtiQ7iitRAYj4DxinFonlmLXBBp9ErAjcHzOtBPpZJqKwKO4mmnQHP0PscYmtLO",
	"9XDToTobjCjBNfo5hrexqfk9wDjqBo3gRvm2ft3NUHcgTDzHZyUdIvsVvFGqckJUhhkFnZreMcZhGLd/",
	"NaB9AfSPQV8mst21pPbkXOUmGkoSXVTZCnRCsyxWl/MZfiX4lWQVSg6wgbSqa/CVJUmxukq73Eyf2txE",
	"qeCqKnbM5RvccLpUxOToNziB8ikTzeAzguzXsN4XL9++e/n86PTlC3tfKKIqmyVqZG4JhWGIM3LMlQYj",
	"OlcKyC8hGn/Bfr90FhwHM6jlHyHa8D0BT4iYK7PY4r+xOnnDBORiRa4cregDQ7DjlcX79kg94dwcvUSx",
	"VTIeE3j13RwdzdTXO49N/1s9kLlYtQH5zBUsdjHjcI9ibPilud/CAg+94o/2BqzrL2BsoPAvMKF2W2cO",
	"t5kn3ri9apDok6pfeNltJxl+q2WKd/RAhHBQt4NaMcA6OYfihNPBsHaqXYKdpmQnpxxMWrJBRjY9yT40",
	"HjXwDgUW2bgi87nXe5wA21MHcOydCPURa32A/urDYUlJmfPgN8yij1kXOD9s1dx16JoN7i7ChaMPGhbj",
	"D2YMl9BpyubgNVAKxZqCtbGXNEaGS53iYxhBCaD+WD5W4QJSbYT6wAcrAa5SEMhMFrz787WUzoD6UUeV",
	"uQo6u8rm9EsT72E2vcyWIDvLlnWdjS8Sc1RH2qD/H1/eWQF3T++0Y9ZHR84ul5BqdrEnk+hvRkttslSm",
	"Xo+1T+gFiUWsjsTEQhRXt9I0AO1K9NkJT1Ba7sbgDOURnMP2jiItaojWmZ16nnedGgSIAeQOrhp6zJNt",
	"DW/OuchUTRmIBR854mqlN9WcBh9NCPLirjmXJ0lCw1y5HVNeiJjmPmou0/VKGaQYVDiUbNQvsT0sCL3A",
	"iuaqftDI1zAItRpy3K/0dulqIGDeV21r9tUQQPnffJKnnSVn5xA+64CW/UsqM98iqqp6LTjZcR/1MoR8",
	"eegu0Mt6ZtbE+fVzQiK1gzCaM82FYnyVDIXEtkPrwvd0MYAArwOsXY5wLUG652/QhJwLBYkWPi5wFxy7",
	"UOHefr0OEtRgvT4L3GAVjXdNmRCsgEqxagZ1wRHhAo3eSg10MijmMTznLmQ/t999EoSvgDlCI3f0muyt",
	"xuEjPJnqITGk+iVxt+X+5IrraL2Mc/t8m4pV9uAGlaH1uJQiq1J7QYcHo7ExjK2bs4OVRBXGtL/Knuyf",
	"YxWpV0Gq2jls51b+TteUN+W82sfailB2DUFqeGe3b9UgENd98pVdwOpW4PySSvV0UgqRJwPm4uN+gZLu",
	"GThn6TlkxNwdPjZqoMg/uYtWytofeLne+oIcZQkcsnszQoxaXpR6612D7Vq7ncn5Hb1r/g3OmlW2ZpDT",
	"92dnPB7Wh9V85A35mx9mN1dTYJjfDaeyg+wpf7EZKI4i6WXkyYuxr0RHnHXdZwgaorJQxKSUa+ZCjzrf",
	"fZ0/QvpBHf7d2k9YKqGJwZLWdITSkjfodIWX141FaNyLAL7DHvBCpTh4E8BzIwfOFw6Uel0jJVjKICW0",
	"lr9Pz/aPm9d8KdgihZH1Zpm2cI11srf3JTCiqOe1bSKO574JA+siCI61YvqmD4WmRCw5GxKOOZfyguaf",
	"33yBBTOOEB/usbD4QkP9N0SyRaW6XrTCKzpq7kDXvb2p+Vs0t/wNzB5FbcBuKGdHrd9i8CUksTQazUku",
	"mjdZcEhyiWNao/GDb8jCRVqXElKmWCcJ5dJXw6zVPSwO3bwht1u/3LfOn4S+ARk7BUGU5E1TWU8LvB8a",
	"CJsj+oWZysDJjVJ5jPp6ZBHBX4xHhSnPe66L85Y12VYq7URzCAm3bFUO3NhXtCr3k7nHLg/XgZdOpaC/",
	"ztG3dQu3kYu6WdtYl0gfubvKr43xZMSrKpru6EqxCMGSpARBJb88+IVIWOKbA4Lcv48T3L8/dU1/edj+",
	"bI7z/fvxlwQ/lxOl9Zy+mzdGMT8NRf/ZCLeBQNPOflTMPme4izBaYcPN+x8YGPuzSxz4Ii+Q/Gztqf2j",
	"6mq3X8V9290ERExkra3Jg6mCgOARscCuWyTyFzWTtJJMb7GegTe/sZ+jdaK+ry32zuNTZ8C6u0+Lc6gr",
	"YjT2/Ur52/V7QXO8j4xMjc5zjY/BvdzQoszBHZRv7yz+BI/+/Dg7ePTgT4s/Hzw5SOHxk6cHB/TpY/rg",
	"6aMH8PDPTx4fwIPlN08XD7OHjx8uHj98/M2Tp+mjxw8Wj795+qc7hg8ZkC2gE589N/k7PtOTHL09Tk4N",
	"sA1OaMnqNyANGfsXAmiKJxEKyvLJof/pf/sTNktF0Qzvf5245JzJWutSHc7nl5eXs7DLfIUGvUSLKl3P",
	"/Tz9t/feHtcB1jbhG3fUxs4aUsBNdaRwhN/evTw5JUdvj2cNwUwOJwezg9kDfFmrBE5LNjmcPMKf8PSs",
	"cd/njtgmhx8/TSfzNdAc/V/mjwK0ZKn/pC7pagVy5p5KMD9dPJx7UWL+0RkzP+36Ng+rjs4/tmy+2Z6e",
	"WJVw/tEn2+9u3cpmd7Zus9xVrATF9xA8PRiURG7Z2hZbb66dElW/+VtKJsxJmpprMYNUAkW6FxIDnJtH",
	"DJ3+AvaR49dHf0dr++ujv5NvycHUxb0rVDVi01t7Rk0Cx5kFO/LI5rPtUe09CEpxHb6PvYsZe8IBj5Ch",
	"j4DC6xEbDqZlBWGJqIYfGx57kDz98PHJnz/F5Lz+I2QeSQOPYGrhE9IRaQXdfDuEso09HbiGXyuQ22YR",
	"Bd1MQoD7PpjIe2RLtqpk5znoOpTEVfJnivzXyQ9viJDE6bVvaXoehkrHwHH3WQiRL6zsAqoLtSrb0Yc1",
	"Dj9ghipCgaf44cHB16da/2c81Tptba2nka+7+/Uh3n+Nh3gfX5GV7TQPt4IDR52dqwzX26zXdFNXIqGE",
	"C55wLBF/ASTQ8x4fPPjDrvCYY4SLkTWJlaU/TSdP/sBbdsyN1EJzgi3tah79YVdzAvKCpUBOoSiFpJLl",
	"W/Ijr1PcgrI2ffb3Iz/n4pJ7RBg1sSoKKrdOQqY1z6l4kHS4k//0nIONFI1clK4U+pFQ/py0nkLhq8mH",
	"T17AH6k17Go2X2DO/dimoILGw6oHOgTU/COatAd/n7tE5PhHdC1YnXXuA5niLVtazUe9MbB2eqRUp+uq",
	"nH/E/6AOGYBlE3Hn9tXh5ufuCzSxn+cf2xWQW2hQ60pn4jLoi6Zu66fpY6d+E6T19/ySMm3udRdDhhWq",
	"+p010HzuEuw6vzbB4r0vGAEf/NiRBEqXu9HWsN7Ry1CusHc8KP1MZNsdPGKTLBjHgxMe7MaAZT/2pfr+",
	"c6drsIUdvQ8wIjZpQRZS0CylCgsfuVTUnq726YYqwx/xcfffU5boQfSMZsQnzSfkNc3NhkNGjpzE2sLG",
	"7y0HfPmL+wvftJ/tanzmD58iFAMuOoczSA8fc+UZHcec9RXwxHGbZCGyra90Keml3thIjC4fm9clS6Mf",
	"b8EI9s9t+dpn8PpqZ/pqZ/pqifhqZ/q6u1/tTF+tMF+tMP9jrTBXMb3EZEhnehgWJbEmGG3Na3U02uQS",
	"1Sw+bDYlTNcCV7/8I9MzQk4xU4OaWwIuQNIcS2SrIPWqwJg9VaUpQHZ4xpMWJDYyzkx8t/mvDUl0LxAf",
	"3Ov2UZrlecib+31RmMVPNuH8W3I2OZv0RsJiDpDZBNAwct322jvs/6rH/aGXBIO5g/jupY+1J6paLlnK",
	"LMpzwVeErkQTTmv4NuECvwBWmrCpxITpqXt0gSlyaRbvKrO1A+zbYnlfAjhutnCvO7pDLnFPtCG8K7qh",
	"/2OMD/pfVwS/btbPTbnkzrF7LPMry/gcLOOLM40/uoMvsPH9S8qQjw8e/2EXFFqE3whNvsM48JvJWnUp",
	"y1i69GgpqgkWDYMv8Q6swy7ffzCcHgvHu+uxiSU8nM8x43ItlJ5PzOXVjjMMP36ogfIVhSelZBdY+efD",
	"p/8fAAD//27zabl3yQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
