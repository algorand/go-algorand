// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
