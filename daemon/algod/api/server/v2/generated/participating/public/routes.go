// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Oj6dfPj/AQAA//9Wdhe4VyMBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
