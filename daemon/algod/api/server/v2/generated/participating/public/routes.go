// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
