// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9fXPcNpIw/lXwm7sqv9xQkl+SW6sqdT/ZTnK62I7LUrK7Z/nJYsieGaw4ABcARzPx",
	"o+/+FBoACZIghyPJ9ubOf9kakkCj0Wj0e3+cpGJVCA5cq8nxx0lBJV2BBol/0TQVJdcJy8xfGahUskIz",
	"wSfH/hlRWjK+mEwnzPxaUL2cTCecrqB+x3w/nUj4R8kkZJNjLUuYTlS6hBU1A+ttYd6uRtokC5G4IU7s",
	"EKcvJ9cDD2iWSVCqC+XPPN8SxtO8zIBoSbmiqXmkyBXTS6KXTBH3MWGcCA5EzIleNl4mcwZ5pg78Iv9R",
	"gtwGq3ST9y/pugYxkSKHLpwvxGrGOHiooAKq2hCiBclgji8tqSZmBgOrf1ELooDKdEnmQu4A1QIRwgu8",
	"XE2O308U8Awk7lYKbI3/nUuA3yHRVC5ATz5MY4uba5CJZqvI0k4d9iWoMteK4Lu4xgVbAyfmqwPyulSa",
	"zIBQTt798II8efLkmVnIimoNmSOy3lXVs4drsp9PjicZ1eAfd2mN5gshKc+S6v13P7zA+c/cAse+RZWC",
	"+GE5MU/I6cu+BfgPIyTEuIYF7kOD+s0XkUNR/zyDuZAwck/sy3e6KeH8X3RXUqrTZSEY15F9IfiU2MdR",
	"HhZ8PsTDKgAa7xcGU9IM+v4oefbh46Ppo6Prf3l/kvy3+/ObJ9cjl/+iGncHBqIvpqWUwNNtspBA8bQs",
	"Ke/i452jB7UUZZ6RJV3j5tMVsnr3LTHfWta5pnlp6ISlUpzkC6EIdWSUwZyWuSZ+YlLy3LApM5qjdsIU",
	"KaRYswyyqeG+V0uWLklKlR0C3yNXLM8NDZYKsj5ai69u4DBdhygxcN0IH7igf15k1OvagQnYIDdI0lwo",
	"SLTYcT35G4fyjIQXSn1Xqf0uK3K+BIKTmwf2skXccUPTeb4lGvc1I1QRSvzVNCVsTraiJFe4OTm7xO/d",
	"agzWVsQgDTencY+aw9uHvg4yIsibCZED5Yg8f+66KONztiglKHK1BL10d54EVQiugIjZ3yHVZtv/6+zn",
	"N0RI8hqUogt4S9NLAjwVGWQH5HROuNABaThaQhyaL/vW4eCKXfJ/V8LQxEotCppexm/0nK1YZFWv6Yat",
	"yhXh5WoG0mypv0K0IBJ0KXkfQHbEHaS4opvupOey5Cnufz1tQ5Yz1MZUkdMtImxFN98dTR04itA8JwXw",
	"jPEF0RveK8eZuXeDl0hR8myEmKPNngYXqyogZXMGGalGGYDETbMLHsb3g6cWvgJw/CC94FSz7ACHwyZC",
	"M+Z0myekoAsISOaA/OKYGz7V4hJ4RehktsVHhYQ1E6WqPuqBEacelsC50JAUEuYsQmNnDh2Gwdh3HAde",
	"ORkoFVxTxiEzzBmBFhoss+qFKZhwWN/p3uIzquDbp313fP105O7PRXvXB3d81G7jS4k9kpGr0zx1BzYu",
	"WTW+H6EfhnMrtkjsz52NZItzc9vMWY430d/N/nk0lAqZQAMR/m5SbMGpLiUcX/CH5i+SkDNNeUZlZn5Z",
	"2Z9el7lmZ2xhfsrtT6/EgqVnbNGDzArWqMKFn63sP2a8ODvWm6he8UqIy7IIF5Q2FNfZlpy+7NtkO+a+",
	"hHlSabuh4nG+8crIvl/oTbWRPUD24q6g5sVL2Eow0NJ0jv9s5khPdC5/N/8URW6+1sU8hlpDx+5KRvOB",
	"MyucFEXOUmqQ+M49Nk8NEwCrSND6jUO8UI8/BiAWUhQgNbOD0qJIcpHSPFGaahzpXyXMJ8eTfzms7S+H",
	"9nN1GEz+ynx1hh8ZkdWKQQktij3GeGtEHzXALAyDxkfIJizbQ6GJcbuJhpSYYcE5rCnXB7XK0uAH1QF+",
	"72aq8W2lHYvvlgrWi3BiX5yBshKwffGeIgHqCaKVIFpRIF3kYlb9cP+kKGoM4vOTorD4QOkRGApmsGFK",
	"qwe4fFqfpHCe05cH5MdwbBTFBc+35nKwooa5G+bu1nK3WGVbcmuoR7ynCG6nkAdmazwajJh/FxSHasVS",
	"5Ebq2Ukr5uX/dO+GZGZ+H/XxH4PEQtz2ExcqWg5zVsfBXwLl5n6LcrqE48w9B+Sk/e3NyMaMEieYG9HK",
	"4H7acQfwWKHwStLCAuie2LuUcVTS7EsW1lty05GMLgpzcIYDWkOobnzWdp6HKCRICi0YnucivfxPqpZ3",
	"cOZnfqzu8cNpyBJoBpIsqVoeTGJSRni86tHGHDHzIir4ZBZMdVAt8a6Wt2NpGdU0WJqDNy6WWNTjd8j0",
	"QEZ0l5/xPzQn5rE524b122EPyDkyMGWPs3MyZEbbtwqCncm8gFYIQVZWwSdG694Lyhf15PF9GrVH31ub",
	"gtshtwjcIbG582PwXGxiMDwXm84REBtQd0EfZhwUIzWs1Aj4XjrIBO6/Qx+Vkm67SMaxxyDZLNCIrgpP",
	"Aw9vfDNLbZw9mQl5M+7TYiuc1CZnQs2oAfOdtpCEr5ZF4kgxYrayL7QGqr18w0yjPXwMYw0snGn6CbCg",
	"zKh3gYXmQHeNBbEqWA53QPrLKNOfUQVPHpOz/zz55tHj3x5/860hyUKKhaQrMttqUOS+082I0tscHnRX",
	"htpRmev46N8+9YbK5rixcZQoZQorWnSHsgZQKwLZ14h5r4u1Jppx1RWAYw7nORhObtFOrG3fgPaSKSNh",
	"rWZ3shl9CMvqWTLiIMlgJzHtu7x6mm24RLmV5V2osiClkBH7Gh4xLVKRJ2uQiomIN+Wte4O4N7x4W7R/",
	"t9CSK6qImRtNvyVHgSJCWXrDx/N9O/T5hte4GeT8dr2R1bl5x+xLE/nekqhIATLRG04ymJWLhiY0l2JF",
	"KMnwQ7yjfwSNosA5W8GZpqvi5/n8blRFgQNFVDa2AmVmIvYNI9crSAW3kRA7tDM36hj0tBHjTXS6HwCH",
	"kbMtT9HOeBfHtl9xXTGOTg+15WmgxRoYc8gWDbK8vbbahw471T0VAceg4xU+RkPHS8g1/UHI89oS+KMU",
	"ZXHnQl57zrHLoW4xzpSSmW+9Ds34Im9G3ywM7AexNX6RBb3wx9etAaFHinzFFksdqBVvpRDzu4cxNksM",
	"UHxglbLcfNNVzd6IzDATXao7EMHqwWoOZ+g25Gt0JkpNKOEiA9z8UsWFs554DXQUo39bh/KeXlo9awaG",
	"ulJamtWWBUHvbee+qD9MaGpPaIKoUT2+q8rpaN+y09lYgFwCzbZkBsCJmDkHkXNd4SIpup61F2+caBjh",
	"Fw24CilSUAqyxBmmdoLm37NXhx7AEwKOAFezECXInMpbA3u53gnnJWwTDJRQ5P5Pv6oHXwBeLTTNdyAW",
	"34mht1LznRewC/W46YcIrj15SHZUAvH3CtECpdkcNPShcC+c9O5fG6LOLt4eLWuQ6I/7pBTvJ7kdAVWg",
	"fmJ6vy20ZdET/ufUWyPhmQ3jlAsvWMUGy6nSyS62bF5q6OBmBQEnjHFiHLhH8HpFlbY+ZMYzNH3Z6wTn",
	"sUKYmaIf4F41xIz8q9dAumOn5h7kqlSVOqLKohBSQxZbA4fNwFxvYFPNJebB2JXOowUpFewauQ9LwfgO",
	"WXYlFkFUV64WF2TRXRw6JMw9v42isgFEjYghQM78WwF2wxCoHkCYqhFtCYepFuVUcVfTidKiKAy30EnJ",
	"q+/60HRm3z7Rv9TvdomL6vrezgQojLxy7zvIryxmbfDbkiri4CAremlkDzSDWGd3F2ZzGBPFeArJEOWj",
	"imfeCo/AzkNaFgtJM0gyyOm2O+gv9jGxj4cGwB2v1V2hIbFRTPFNrynZB40MDC1wPBUTHgk+Iak5gkYV",
	"qAnEfb1j5Axw7BhzcnR0rxoK54pukR8Pl223OjIi3oZroc2OO3pAkB1HHwNwDx6qoW+OCvw4qXXP9hR/",
	"BeUmqOSI/SfZgupbQj3+XgvosaG6APHgvLTYe4sDR9lmLxvbwUf6jmyPQfctlZqlrEBd5yfY3rnq154g",
	"6mYkGWjKcshI8MCqgUX4PbHxN+0xb6YKjrK9dcHvGN8iy8mZQpGnCfwlbFHnfmsDOwNTx13ospFRzf1E",
	"OUFAfbiYEcHDV2BDU51vjaCml7AlVyCBqHK2YlrbgO2mqqtFkYQDRP0aAzM6J54NivQ7MMareIZDBcvr",
	"bsV0YnWCYfjOW4pBAx1OFyiEyEdYyDrIiEIwKt6DFMLsOnOx4z562FNSA0jHtNGDW13/91QDzbgC8ldR",
	"kpRyVLlKDZVMIyQKCihAmhmMCFbN6SI7agxBDiuwmiQ+efiwvfCHD92eM0XmcOUTLsyLbXQ8fIh2nLdC",
	"6cbhugN7qDlup5HrAx0+5uJzWkibp+yOLHAjj9nJt63BKy+ROVNKOcI1y781A2idzM2YtYc0Mi6qAscd",
	"5csJho6tG/f9jK3KnOq78FrBmuaJWIOULIOdnNxNzAT/fk3zn6vPMJkEUkOjKSQppkCMHAvOzTc2a2KX",
	"blhHk7HVCjJGNeRbUkhIwUb5G5FPVTAeEBv/ly4pX6CkL0W5cAFodhzk1KWyNhVZ8s4QUWlIb3iC1ukY",
	"53ZBxz7Rw8hBQI0u1jZtW83jilbzudyeMVdqgLy2qT/q3ZpOelVVg9R1rapa5DSzVUZw8YagFuCnnnik",
	"DwRRZ4SWLr7CbTGnwGzup7G110PHoOxOHITE1Q/7ouKMnpxv70BasQMRCYUEhXdLaF9S9qmYh5lp7vJR",
	"W6Vh1TXB209/6zl+73oVPcFzxiFZCQ7baDI24/AaH0aPE95vPR+jpNH3bVt5aMDfAqs5zxhqvC1+cbfb",
	"J7TtalI/CHlXvkw74Gi5fITrcKef3E15UwcnzfOIT9DlrbQZgJpWefJMEqqUSBkKW6eZmtqD5tyILsml",
	"if63VTTuHZy99rgt51eYEonGXcgLQkmaMzT9Cq60LFN9wSkal4KlRqKWvBbdb2584V+J2zcj5kc31AWn",
	"GLFWmZyikRZziNhXfgDwVkdVLhagdEtJmQNccPcW46TkTONcK3NcEnteCpAYOnRg31zRLZkbmtCC/A5S",
	"kFmpm2I7pmUpzfLceeLMNETMLzjVJAeqNHnN+PkGh/Peen9kOegrIS8rLMRv9wVwUEwl8eiqH+1TDHx1",
	"y1+6IFhMo7ePre/GjF/nbm3R9lSnhv+f+/9x/P4k+W+a/H6UPPu3ww8fn14/eNj58fH1d9/93+ZPT66/",
	"e/Af/xrbKQ97LGnIQX760qm0py9Rb6mdNx3YP5vhfsV4EiWyMAyjRVvkPibIOgJ60LRq6SVccL3hhpDW",
	"NGeZ4S03IYf2DdM5i/Z0tKimsREtK5Zf657awC24DIkwmRZrvLEU1Q1IjKfnoTfRZdzheZmX3G6ll75t",
	"9okPDBPzaZWCaauzHBPMz1tSH9Xo/nz8zbeTaZ1XVz2fTCfu6YcIJbNsE8uezGATU/LcAcGDcU+Rgm4V",
	"6Dj3QNijMXA2KCMcdgWrGUi1ZMXn5xRKs1mcw/mYfmcs2vBTboPtzflB3+TWuTzE/PPDrSVABoVexqo2",
	"NAQ1fKveTYBWvEghxRr4lLADOGgbazKjL7povBzoHKsHoPYpxmhD1TmwhOapIsB6uJBRFpEY/aDI47j1",
	"9XTiLn915+qQGzgGV3vOyhHp/9aC3Pvx+3Ny6BimumcTee3QQeplRJV22UWNSCLDzWytGivkXfAL/hLm",
	"jDPz/PiCZ1TTwxlVLFWHpQL5nOaUp3CwEOTYJyy9pJpe8I6k1VtOKkgVI0U5y1lKLkOFpCZPWyKkO8LF",
	"xXuaL8TFxYdOUEVXfXBTRfmLnSAxgrAodeIKHCQSrqiMOa1UleCOI9sKJkOzWiFblNay6QsouPHjPI8W",
	"hWonunaXXxS5WX5AhsqlcZotI0oL6WURI6BYaHB/3wh3MUh65e0qpQJF/raixXvG9QeSXJRHR0+ANDI/",
	"/+aufEOT2wJGW1d6E3HbRhVcuFUrYaMlTQq6iPnGLi7ea6AF7j7Kyyu0ceQ5wc8aGac+oh6Hqhfg8dG/",
	"ARaOvbPncHFn9itfzCq+BHyEW4jvGHGj9tjfdL+CHNQbb1crj7WzS6VeJuZsR1elDIn7nalq3CyMkOXD",
	"KBRboLbqygHNgKRLSC9dnRZYFXo7bXzuI3WcoOlZB1O2go/NIMMaEuhZmAEpi4w6UZzybTuZX4HWPh74",
	"HVzC9lzUJSj2yd5vJpOrvoOKlBpIl4ZYw2PrxmhvvgsHQ8W+KHxONibnebI4rujCf9N/kK3IeweHOEYU",
	"jWTnPkRQGUGEJf4eFNxgoWa8W5F+bHlGy5jZmy9SzcfzfuJeqZUnF7kVrgat7vb5CrAcmLhSZEaN3C5c",
	"JSubMB1wsVLRBfRIyKFzZ2RacsMhhIPsuveiN52Yty+0zn0TBdm+nJg1RykFzBNDKqjMtOL1/EzWf+g8",
	"E1ig0iFslqOYVAU2WqZDZcPJZivu9YEWJ2CQvBY4PBhNjISSzZIqX2QLa5H5szxKBviEBQCGyr6cBqFm",
	"QcGxqqiL57ntc9rRLl3xF1/xxZd5CVXLESVbjISP0e2x7RAcBaAMcljYhduXPaHUxQjqDTJw/Dyf54wD",
	"SWJRa4EZNLhm3Bxg5OOHhFgLPBk9QoyMA7DRL44DkzciPJt8sQ+Q3BVToH5s9KgHf0M878vGcRuRRxSG",
	"hbMer1bqOQB1oY7V/dUKuMVhCONTYtjcmuaGzTmNrx6kU30ExdZWrREXmfGgT5wdcIDYi2WvNdmr6Car",
	"CWUmD3RcoBuAeCY2iU38jEq8s83M0Hs0tB3TUGMH09Z5uafITGww2gevFhtKvQOWfjg8GIGGv2EK6RW/",
	"67vNLTBD0w5LUzEqVEgyzpxXkUufODFm6h4Jpo9c7gelW24EQMvYUddBdsrvTiW1KZ50L/P6VpvWJcl8",
	"1lDs+Pcdoegu9eCva4Wpiq28bUssUTtFM2ilWWcmECFjRG/YRNdJ03UFKcgBlYKkIUQllzHPqdFtAG+c",
	"M/9ZYLzAajaUbx8EkVASFkxpqI3oPk7iS5gnKRbRE2LevzpdyLlZ3zshqmvKuhHxw8YyP/sKMJR4zqTS",
	"CXogokswL/2gUKn+wbwal5WasVa25CzL4rwBp72EbZKxvIzTq5v3p5dm2jcVS1TlDPkt4zZgZYYlkqMR",
	"mANT2yDdwQW/sgt+Re9sveNOg3nVTCwNuTTn+IOcixbnHWIHEQKMEUd313pROsAgg8zZLncM5KbAx38w",
	"ZH3tHKbMj70zasfn7/bdUXak6FoCg8HgKhi6iYxYwnRQYbib0tpzBmhRsGzTsoXaUXs1ZrqXwcPXZWth",
	"AXfXDbYDAyjSvoM5SIiaEKpHNjq6EpfCunyY2d0ohRPZ9F7jf9OU5i/KqlFCMNENjGCukmL/Htexl41K",
	"g82l7BKMKjO+mW4Mws/i1vMzo0s0cRtoVLY49w48sx7dPKTAgAOHUzHlW0t0KbNKc9xFnOdA859g+6t5",
	"F5czuZ5ObmerjhG3G3EHrt9W5ymKZ4yFsLbLhutpT5TTopBiTfPEWfT7eIEUa8cL8HXvAPjMd0v8yJx/",
	"f/LqrQP/ejpJc6AyqWSz3lXhe8UfZlW2vGLPAfGl642S7ZUkK7sHm1/VhAu9AFdLcDXAA/G/U6y09vAE",
	"R9F5BebxkKyd7M05o+wSB5xSUFQ+qdpeal1STTcUXVOWe0Olh7YnfAoXN67ibZQrhAPc2p0VeCWTO2U3",
	"ndMdPx01de3gSeFcA1XKV7YQvyKCt2MWMMh8W7gwhxXFUqPWDNVlTrxcoekmUTlL40ZtPlOGOLh1VpqX",
	"Cb7cI/2bEUvW4/vmJQvGMq+NKSbUAjKYI4pMFa1nVONuJpzsUHL2jxIIy4Br80jiqWwdVC+94Kid69QI",
	"a9253MDWJVIPfxuhLiyz277xEIhhiS50jXbAfVnZKPxCKxNgLdTtG2ERzti5EgeiIxx9OGq20aLLposz",
	"7InU5X+GMGxx/N0Nmbxw5+r99swRbbDEVDKX4neIK9Zoj4hkiPnCwgzDin6HUH4M24o0WExlTqv7RNWz",
	"79ru8cJ738bfWlj3i65qGd9EUo+f6vEbOSCVq3ipMofHPikxNJ82o2t6uAeeoMCfjJVivWuFcntkbAZU",
	"I0gzfvDCcOhDO3598BzMnRDynF7NaKyMrhHWDEzBDjacQFoQ/7HHsarShOzsJAiCqN5ltopCAbJOgu1W",
	"ZLqh4GWnHS1y1RIWEk0oW02t4zpXIjJMya8ot+2HzHeWJbmvFVirrfnqSkisgaLi/qoMUraieVwCy9Ku",
	"byJjC2Y765QKgtYtbiDbtcxSkWt/UyW/OdSczsnRNOgf5XYjY2um2CwHfOORfWNGFd6IlQW1+sQsD7he",
	"Knz98YjXlyXPJGR6qSxilSCVcIxqYuV1nYG+AuDkCN979IzcR3+zYmt4YLDo5JzJ8aNn6C2wfxzFLlLX",
	"GWmIK2fIlv/s2HKcjtHhbscwfNCNehAtF2FbI/ZfAAOnyX465izhm+7O2H2WVpTTBcRDnFY7YLLf4m6i",
	"BbiFF57Zvl5KS7ElTMfnB00Nf+pJmzDsz4JBUrFaMb1yXkklVoae6r4sdlI/nG0S5kpqe7j8Q3TuF963",
	"2VLGP6+138oJsVVjCMYbuoImWqeE2sI3OavDbnyhf3Lq62phjfGqtLjFjZnLLB3FRYzCmZNCMq5RQSv1",
	"PPkTSZdU0tSwv4M+cJPZt08jddWb9X35foB/drxLUCDXcdTLHrL3Yon7ltzngicrw1GyB3WaUnAqe6MQ",
	"4v7mPqf38NBjhVszStJLbmWD3GjAqW9FeHxgwFuSYrWevehx75V9dsosZZw8aGl26Jd3r5yUsRIyViyz",
	"Pu5O4pCgJYM1Bp3GN8mMecu9kPmoXbgN9F/WZeZFzkAs82c5qgisV79683ZvsokR4X997fqAdmTvngAZ",
	"GwFTffOZk2iisXRWQsP4U4KrJn979DcijbKI0ujDhwj0w4dTJ8z97XHzsWVSDx/GS0hFbUPm1xoLe7HC",
	"dokN821sD5+LiKXG92uo3HguUSZiKetjteaBOcozN9SUNGvjf/678G5CMONu9vgpuLh4j088HvCPNiK+",
	"8JHHDawDiexKeggl6A0SJZmseh4E+FDyXGzGEk6Lk3ri+SdAUQ9KBuxI+2Kkz+tKTl+GdGlwMoNcGPUo",
	"LOUcGpv/OLg1i54OYLhkefZrndjfujwk5ekyGhIxMx/+VrfhrJZo2WO0OuyScg55dDirlf3mtbeIfvl3",
	"MXaeFeMj323327HLbS2uBrwJpgfKT2jQy3RuJgix2syZrnJy8oXICM5TlyKtGWK3T1PQTeMfJSgdEwnw",
	"gY0LRk+MYbi2mQMBnqHd5oD8aDvtL4E06syhvcQXAmoWxSiLXNBsigWKzr8/eUXsrPYb20zONpNYoLmg",
	"uYqoCXd8kZCqL1w8+238OMPpOGbVSidV74dYfQHzRt2dgrW8kmhICLFzQF4GPbNtKQIzBMH6VHIFWdBq",
	"wmoRSBPmP1rTdInGkcbl1U/y47ugeKpUQefhqoNgVXoYz52B2zVCsX1QpkToJcgrpmyDdVhDs6RBVd/D",
	"Ged8iYPm8mTJuaWUgz3kiKrQ8L5o98BZIcQ7LqOQtRC/p2psmwjt2xTmDL+KVkJsd5jptBy2CfJVZ7jX",
	"vmk05YKzFOsQxoQg14l9jCtkRMnGuINDTdwJjRyuaF+bKtLaYbG3041nhA5xXbdi8NRsqqUO+6fGlt9L",
	"qskCtHKcDbKpb8/kLPKMK3ClpLFvf8AnhWxESlQRYN3Wu5WTdk8ywszKHhPLD+bZG2eAw5SjS8ZR1XZo",
	"c6K1tZljo2ht9HOmyUKAcutplpdQ7803B1hpIYPNhwPfWBrHsIEGZtk2qqY71ImPsXExLebdF+ZdV/+u",
	"+rmRxGInPSkKN2l/866oPKA3vBfBEREo8c7qALnV+OFoA+Q2GByH96khNFhjaA0UeA93CKNqZNVqkmjU",
	"AktR+AaxUcDRIjiMR8B4xTjUbc8jF0QavRJwY/C89nynUkm1FQFH8bRzoLk1WUQYmtLOCXjbodrV/wxK",
	"cI1+jv5trHtw9TCO6oVacKN8W3VbN9QdCBMvaF4Fl0U6aqFU5YSoDJPSWj22YozDMG7fxa95AfRYUhoy",
	"kf0cS2HuexP11RmYldkCdEKzLFbZ+zk+JfiUZCVKDrCBtKwqQBcFSbGsVrPOWJfa3ESp4KpcDczlX7jl",
	"dEHTugg1hI3z/A5jHuNsi//Gyh/374wLK9s7ktzHkGX7FdfrRsbHpF5D04lii2Q8JvBOuT066qlvRuj1",
	"93dK6blYNAH5EobRHi4X7lGMv31vLo6w+E6npre9WqraOBhGLHyrYVQbq6oOTa6EV1mnyDe6XatWpsNm",
	"iP6mpFO8/HqyN0Izt71frem3L4cj7U05otolP2tKBllQb0KpjUdsGc67Poy+GEQbgnh3Bme31kGE+uDW",
	"LkA/+ch5UlDmglRqZtHFrEtq6qaZjYm+rze4vQiXKtRrE/1p3ZfW42tt4vN208JLcBVRCglrJkof/uHj",
	"LL1KaH9ttACsEqui6++atnGqL2tw7jWPn7vmMXaZTif/6VcblUuAa7n9JzCWdza90w6xK+1a81T9Cqn6",
	"DozqQ9C4FcfUoY2VPHWyYaMh4452kh2yejlGHOi2h5xOTrO9LsxY2dyJHSV27OLNHvurCtaVBPGIFUKx",
	"uv1HrAvkyIDmc2zkGFRF7I7lo+DWkGrs+VJH90iAfWokmsmCvtJfqwv2qNNV3LcrKjhUSbDb6GXHHd9J",
	"9g0S1m2TjIPxdfNOqhhO5NNY7H4B3LV2bmaVjc5tmc8h1Wy9I7n6z0vgQeLu1NtlEJZ5kGvNqlwJrM21",
	"v9WxBmgo93kQnqBG7q3B6cv0u4TtPUUa1BDt2jH1V+1NyjIhBpA7JIZEhIrFSFlDsgtbYaqiDMSCj0m0",
	"n0Nd4LK34V9QKuCGc3mSNBdHXT5gYMp4x7FRc5lP9yqqgWH/ffnX3YZF/frHS+wPpapmvL6sU6ilk9Nu",
	"8dsrVxYKU+Er34kvEAXK/+brXthZcnYJYUtC9FRdUZn5N6KmF2/VSQbuo07StG+20wZ6Xs3M6gjybtZm",
	"pJwi5lukuTBiRNKXtNIM2q4inu4pG5pmu3tgOLqBaw7StW5F+TcXChItfMT5EBxDqLDxdzdCguotYWyB",
	"6y0s9q6unIal3CkWEqMu7C5cIJGwogY6GdQ3659zCNkv7HOfpuhLee+0MFX0urunjM8dYKqDxJDq58Td",
	"lrvTH29ibGKcg0y856ld7IyDbHpDCimyMrUXdHgwKoPc6FKCA6wkaqdJu6ts6QhBDvklbA+tEuSb8fgd",
	"DIG2kpMFPSiS09rkOzW/qRjcizsB70tarqaTQog86XF2nHYrtLUp/pKll5ARc1P4GNueBmnkPtrYK2/2",
	"1XLrK5IVBXDIHhwQcsJtVoN3bDdbBLQm5/f00PwbnDUrbdFEZ1Q7uODx8HAsZyhvyc38MMM8TIFhdbec",
	"yg6yo/7Xpqc6nKRXkXaBB2O18q6rud3CrSYqC0VMJqm7k+2Ik6lCZOrGTnWYTFc6yHNxlSAVJVV5x5jO",
	"Yd5rMklf0Lr+zGB7BkG8DVXuAt2SJc1IKqSENPwinghkgVoJCUkuMPwm5hmcayMPrTD6n5NcLIgojJpr",
	"q6R6H0q061hnrpJzitcZBNEOMQzQNEXVSxD3Cak+GTvjXfV0s+UI7JoT62Lqqb4CypUfcAiyL3fhHWir",
	"tn/LtvNlxFKEmPP0sXdfNkfie7dTCsAccbR2W8lOYm3nmutqN0Dsa0eqxYqlcXT/seJjeqNaYtQbQ4Wr",
	"aG4TU/E1ZCkhF6vcoXh6umgGTmd5zEdE3PFzbiGkc/NfvDPb45I5OHbWw0Fj/dNpeplYIWzE9AinzZXS",
	"pbRF0M0IdU9FsbBJlejLasM3is9cD29FrL9hhNSq9bv2iz4Bu4dso37/YTe77Xk7G+tsr/oqjORQAQD9",
	"7vcGDKOc8PuCMcce0gmNIPm0Un2mjRb/rMWGfc1by25Sak0fSyBm7FKCSwi2zW5b3fUKqpdeFDKvdw0U",
	"RtkFhdm6tkUYVdac5s16rtNuW8YURZLDGhpRCS5LucSrkq0h7NJrPyYZQIFG7rbqFXO3hxdOSx53a08C",
	"h+0Y7EYFdItYu1Nkh/Qd1RU2PLHHRI09SgaiNctK2sCfukW/0v5WpVERZ1xb2l/sp55XuM9jt6xf/4dx",
	"3GdvxhNH2BDb2Rl0g+coetZ5POYmTLyvrHU4W1ZZ9S1h19xCFfSK92u3XUKvhcTx2xQg9vsNpHjhNoNK",
	"bo8TgoMR1Sqq0SsdymqHb24luT3leqI9UUb1MLxogHqHiLfTozkq9irwPfbD+mReV3HfRq5xaydmKjIA",
	"UzUfw9BXqEMrg9dWdEsyNp+DtJ4wpSnPqMzC1xknKUhNGSdXdKturhMaaGUJ051qoblVcFDPWGMKIhp1",
	"LSD51unbt1TZKgDxC3U3ytsIpQtdrhGFy4o3WvS1ru7AEM8DohujFmNAZA8BujofqBRbBiQ46gdkRS9h",
	"z3kU+x2Gp8EqZs5orwXOOmaK68Fz9jOiDpnYL5zpwZNm5eJ2hKp1IdqD4OmfL+o4Brs5XfqPBRWf2waK",
	"YWBxux+R32trz7TzQU99ZXcfJHhPqIEIAVBB58TUWXi7YlPngrHATF3A9Z5SlVVnaJYxK47Eu5tj8wBH",
	"081pK6ubGWe8cdlnhfdCVIgiSce4jTLIwbAXq1U5SJswjvAWFumOqyB64fZwg6YKJ+Z4LpEcrZiBATbV",
	"5Tpth341BYqK4LELelpKFLOv6HZ3vdRaqIhHzduRvRbug4EqqN0G26OlbGOtaDnSfQTYyGmP9ZbqFoK8",
	"+8XYdJDaYf3pluNcUvEFnHCnyGHH0CF6q1U9TyoRWqN8G2Ma3ulygwX2yZojAprvbKuq0/IpNmj4copr",
	"RDEBpC1peCEE8/NQJGoGrahy5i61roxSO7/tIAHjtQKEufVmwGHO3LVnf67mVktqruUDcpIrQRR4gUtv",
	"yb2OPHXPYLlXaUODJ0AEyhC2jqBj7Rop5VzoGKgewqhKh+7RnuvIw2FYZFBnO0Sa9Dn3ma1/JWTmb/HK",
	"cIL/mTEtqdzeuLNlndwfy2XB8ANfqWzHYmwRSV/V7HMsJVrrMtYKj26SXXvi5UMv+4dFm+K7ddAriY5B",
	"24j5Ggjt6/32CdXMFtqiawtB+DCGDUXmjeCH+b5EIYPdh9c4mZ6GdnEjjQznww9Qt2/Nd0d0vWfIY1/i",
	"/SBvaXU7uzOgB6TxoU5UDbr+jDD19AULQbItwD4Dy2pUU4nAag0ZM7FJJMzVLtUhAL8GWVWBhoynEqiy",
	"QXinPzvNfoBtDZ6EEQzLVderQRmYq5eAxzHiUXMMEONY9jtmngEC2z2NJb0x09ieZf100T+X0cJqrjk0",
	"U+wGqIsJVBvXwG+IhA6k0TvhZr2CRh2wbt5V5JQhAD0JFY1Q+LCVWF0mTNr0PQyd9c6c9q3yunby7Iz8",
	"Q0j8BzvACzMk6veqYDUHzheut/W6QkqwlF5KaCx/V9KFW2DtFQu2yBlvtQbb2NFWEGnuS5BRo15UiSo9",
	"VqNOPgv2DRMcD1Q3D8bak1HdCwnHHC65pvnnz2XBhnIniA/I3vVHv4bJECGSLSrVzUqxvKKj5g4SH+5u",
	"av4Wc2/+DGaPohYLN5RzjXXsEugNoLmN1Jq7PEYzJLnCMW2ww6NvycwVdC0kpEy1XW5Xvlt8FfsPks1d",
	"Ig1s9I5kg13r/FXoW5Dx3HvFyZtAvBXozqghrI/oF2YqPSc3SuUx6uuQRQR/MR4VdqjZcV1cNjJ6a4Nj",
	"cKMJCXec2RvU6Ngzs7fbe2fs8mz2qrl0SgXddY6+rRu4jVzU9drGpqWPrr6KbYHHZJPHK6WazzGd/U5K",
	"pu5VMPUTJLJbHLkx3Lwxivm1r7SZLd/VU0WvtR8ly7OdelJYE/F6OlkAB8UUVv37zdUn/rx3qYfAJtd1",
	"j6qF9TYZwRYxkbU2Jg+mCqodjih06D6LlDXEwPW0lExvsf2UN2Ky36Ip9z9W6Zsu/bfy6bu7T4tLqBqY",
	"1cmepfK364+C5ngf2VADbm4hkR+Q7zd0VeTOXUe+uzf7d3jyp6fZ0ZNH/z7709E3Ryk8/ebZ0RF99pQ+",
	"evbkETz+0zdPj+DR/Ntns8fZ46ePZ08fP/32m2fpk6ePZk+/ffbv9wwfMiBbQH0RzuPJX5KTfCGSk7en",
	"ybkBtsYJLdhPYPYGvR5zgb1TDFJTPImwoiyfHPuf/n9/wg5SsaqH979OXA3wyVLrQh0fHl5dXR2Enxwu",
	"MLsr0aJMl4d+Huxo0ZBX3p5WQZ02ugh31BYG9JFonhRO8Nm778/Oycnb04OaYCbHk6ODo4NHZnxRAKcF",
	"mxxPnuBPeHqWuO+Hjtgmxx+vp5PDJdAck6HNHyvQkqX+kQSabd3/1RVdLEAeYNyu/Wn9+NCLFYcfXZbb",
	"9dCzw9BmdfixkQyY7fgSVdHDj75P0vDbjQY6LgnSLD0aIPEjaJf3rmygSzdpEv21bvQpUUK65KBCMmFO",
	"1dRckRmgNQa77Uus5KhlyVMbWmKnAI7/fX3yFwyveX3yF/IdOZq60Ft0wkSnt6kvFTmcZhbsbqSSer49",
	"qdJKg7a1x+9jTj1nzqk7I/vjZGgloPZqxJqbYShL0N2z5s2G3x4lzz58/OZP1zGZryPBVkgKMi1D1Gvh",
	"e+Ag0lZ0810fyjYuZtOM+48S5LZexIpuJiHAXcNIpPyEj/v23b5sopAr7ePs10yR/zr7+Q0Rkjgd9y1N",
	"L6uYdwMytnaRYs2wDGIW1M40X/ZB7K6/EGjg5crcJC54fqUWRbMSW4XmD2i3R0Dx0D8+OvKczukRwek7",
	"dIc6mKnlF+0SGppHA8dwNydJEdjQVOdbQlUQVaXKWd3jppWZIIqkEXo66Iruzui2JBq3u29aVKRUKBq9",
	"huE7b/UDaaDDRWkXwvb932Ga6yAjCsGH2GUfbq2nka+7+z9jd7uyAymEOdMMU23qK8dfZw0g64b3Dtye",
	"jM8D8ldRooRnZPdSQ6zhIc6A8cN+TpegHtRBqYPt8cnDh+2FP3xYu1vmcIVMlnJ8sY2Ohw8PzE493ZOV",
	"DVqTG/XcRp2dfYbrbNZruqn6o1HCBU84LKhmayCBWvj06NEfdoWnHKujGNGUWNH7ejr55g+8ZafcCDY0",
	"J/imXc2TP+xqzkCuWQrkHFaFkFSyfEt+4VW576DZXpf9/cIvubjiHhFGqyxXKyq3ToimFc8peVCAfZD/",
	"dFLNa0EbuShdKIx+RBHVyrS+HA1fTD5cex1gpGIx9NrhDLvIjH0VVPByv3aC/gN1+BEt4L2/H7qmDPGH",
	"6ImwKu6hL4ITf7Oh+HzUGwNr64uU6nRZFocf8T+ocgZg2RKoh3rDDzEG6vBjYzXucWc1zd/rz8M31iuR",
	"gQdYzOe26evQ48OP9t9gItgUIJm5U7DskPvVloc7xMZg2+7PW55Gf+yuo1Eaq+fnw4+NP5vbrZalzsRV",
	"8C16AKz7qjufeViq9t+HV5RpI7+4OkvYH7T7sQaaH7qi6q1f6zqmnSdYnDX4sSXxFMLm8zeVzXf06ryR",
	"4iRtevJzgQaCPl64SWaMI4MIGVht17MPu9pLh22dL8EG9nvXaEQ81ILMpKBZShUGBLr2Ax219fqWqlE7",
	"m/o04vhCMNES0C3ZY476wU5vCI47Rv4L9iVoloxyuLL2wE8sM3Ugek4z4gtAJOQ1zc2GQ0ZOnGTewMan",
	"lne+vIDyhSWKzyYCPPeHTxGKZUoaupuMlykI+oSMue+NgmcYwAJ44lhQMhPZ1jdxl/RKb2zCeZu5HVbd",
	"+KMP78BI+M9tGdxlEPxqh/tqh/tqqflqh/u6u1/tcCPtcF+tVF+tVP8rrVT7mKZiYqYzzfRLm9g/kjbm",
	"tbodrev0Viy+We6G6Uom6zbtZvqAkHOsgkrNLQFrkDQnKVVWunJlfVYYAolFcyA7vuBJAxIbaGgmvl//",
	"10Z4XpRHR0+AHD1of6M0y/OQN3e/RXkXH9keKt+Ri8nFpDOShJVYQ2bz9MI6kfarncP+f9W4P3cKzGLJ",
	"iiVdQ1Vbh6hyPmcpsyjPBV8QuhB1dLLh24QLfALSAGfL9BOmp64VBlPkyizedfFslrNsSu5dCeC03sKd",
	"Hv0WucSd+Ybw9vTk/9sYN/7/ain9puVkbstIB8fucNWvXOVzcJUvzlf+6D7SwHz4P1LMfHr09A+7oNDY",
	"/EZo8gNG3t9OHKs6I8e6FdxU0PJVnby5r47eDaNh8Rat4mDffzAXgQK59hdsHdx5fHiIWdJLofThxFx/",
	"zcDP8OGHCuaP/nYqJFtjO7wP1/8vAAD//7hnMCqY/wAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
