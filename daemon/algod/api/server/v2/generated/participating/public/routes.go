// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
