// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address basics.Address, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithOptions("simple", "txid", ctx.Param("txid"), &txid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"OlT28eRsdPd/AwAA///Bc2x8cCYBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
