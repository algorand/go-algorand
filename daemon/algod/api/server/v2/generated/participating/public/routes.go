// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
