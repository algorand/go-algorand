// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
