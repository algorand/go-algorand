// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address basics.Address, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithOptions("simple", "txid", ctx.Param("txid"), &txid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
