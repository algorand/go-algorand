// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"a5h9TdFJKdkaS5S8//j/AgAA//8QZrXmTe8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
