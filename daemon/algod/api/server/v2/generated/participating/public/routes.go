// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
