// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
