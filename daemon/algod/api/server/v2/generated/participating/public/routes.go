// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"V8E62QAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
