// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
