// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
