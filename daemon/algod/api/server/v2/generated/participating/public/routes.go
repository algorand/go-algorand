// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
