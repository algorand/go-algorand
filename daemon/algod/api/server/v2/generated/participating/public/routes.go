// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"cKXbIwEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
