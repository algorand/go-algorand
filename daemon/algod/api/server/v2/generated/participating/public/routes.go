// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//SPT/nE7ZAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
