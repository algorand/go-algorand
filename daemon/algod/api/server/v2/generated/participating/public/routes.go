// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"pWQrrIL74dP/DwAA//9cm9dVKAwBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
