// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"5MP/DwAA//8Jo7KyTCIBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
