// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1A4BAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
