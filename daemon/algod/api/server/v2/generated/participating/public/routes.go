// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address basics.Address, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithOptions("simple", "txid", ctx.Param("txid"), &txid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
