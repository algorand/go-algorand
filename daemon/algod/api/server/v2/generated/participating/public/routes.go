// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
