// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
