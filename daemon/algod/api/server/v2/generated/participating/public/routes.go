// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"JAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
