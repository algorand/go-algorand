// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "lookback" -------------

	err = runtime.BindQueryParameter("form", true, false, "lookback", ctx.QueryParams(), &params.Lookback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lookback: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
