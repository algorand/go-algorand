// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"rPzz4dP/DwAA///HQ7pj4MoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
