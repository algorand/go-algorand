// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"uP5/AQAA///b5VBMG9wAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
