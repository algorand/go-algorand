// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

<<<<<<< HEAD
	"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",
=======
	"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",
	"3wAA",
>>>>>>> master
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
