// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"U55c3QAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
