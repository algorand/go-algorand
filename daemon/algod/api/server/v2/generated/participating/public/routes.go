// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
