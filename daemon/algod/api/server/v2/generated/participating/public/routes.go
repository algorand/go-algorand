// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address basics.Address, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithOptions("simple", "txid", ctx.Param("txid"), &txid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Q53UobKPpyejm/8bAAD//7Akl+IpJwEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
