// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"jk8nH/5/AAAA//+bvD0w6x8BAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
