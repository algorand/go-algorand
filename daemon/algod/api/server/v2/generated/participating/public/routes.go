// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
