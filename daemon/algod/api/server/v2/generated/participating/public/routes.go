// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithOptions("simple", "txid", ctx.Param("txid"), &txid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
