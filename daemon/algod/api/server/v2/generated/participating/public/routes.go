// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+uj4dPLx/wcAAP//A3M/OzcjAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
