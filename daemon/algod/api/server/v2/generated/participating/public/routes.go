// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
