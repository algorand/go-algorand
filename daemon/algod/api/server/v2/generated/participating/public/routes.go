// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
