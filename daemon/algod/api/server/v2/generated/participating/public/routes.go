// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vq9h9vVFJ6VkKyxX8v7j/wsAAP//cfqwyFnvAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
