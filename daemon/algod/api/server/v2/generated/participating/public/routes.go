// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/ye2DxImBQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
