// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7/3tVEq2wnZ37z78/wAAAP//9J1MLb7/AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
