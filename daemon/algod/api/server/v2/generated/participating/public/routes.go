// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4/8PAAD//6GlQbnwCAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
