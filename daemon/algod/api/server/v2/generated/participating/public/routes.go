// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/uP/DwAA//87ctOCIQIBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
