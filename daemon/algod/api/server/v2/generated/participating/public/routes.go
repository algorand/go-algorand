// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"eyQ/ZNwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
