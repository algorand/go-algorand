// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//+yRy9Gmd8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
