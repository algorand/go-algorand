// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XPctpLgv4Kb3Srb2qEkfyT74qvUnmInedrYsctSsvvW8iUYsmcGTyTAB4DzEZ//",
	"9ys0ABIkwRmOpNjxbn6yNSSBRqPR6O9+P0lFUQoOXKvJ0/eTkkpagAaJf9E0FRXXCcvMXxmoVLJSM8En",
	"T/0zorRkfDGZTpj5taR6OZlOOC2gecd8P51I+EfFJGSTp1pWMJ2odAkFNQPrbWnerkfaJAuRuCHO7BDn",
	"zycfdjygWSZBqT6Ur3i+JYyneZUB0ZJyRVPzSJE100uil0wR9zFhnAgORMyJXrZeJnMGeaaO/SL/UYHc",
	"Bqt0kw8v6UMDYiJFDn04n4lixjh4qKAGqt4QogXJYI4vLakmZgYDq39RC6KAynRJ5kLuAdUCEcILvCom",
	"T99OFPAMJO5WCmyF/51LgN8g0VQuQE/eTWOLm2uQiWZFZGnnDvsSVJVrRfBdXOOCrYAT89UxeVkpTWZA",
	"KCdvvntGHj9+/JVZSEG1hswR2eCqmtnDNdnPJ08nGdXgH/dpjeYLISnPkvr9N989w/kv3ALHvkWVgvhh",
	"OTNPyPnzoQX4DyMkxLiGBe5Di/rNF5FD0fw8g7mQMHJP7Mt3uinh/J90V1Kq02UpGNeRfSH4lNjHUR4W",
	"fL6Lh9UAtN4vDaakGfTtafLVu/cPpw9PP/zT27Pkv9yfXzz+MHL5z+px92Ag+mJaSQk83SYLCRRPy5Ly",
	"Pj7eOHpQS1HlGVnSFW4+LZDVu2+J+dayzhXNK0MnLJXiLF8IRagjowzmtMo18ROTiueGTZnRHLUTpkgp",
	"xYplkE0N910vWbokKVV2CHyPrFmeGxqsFGRDtBZf3Y7D9CFEiYHrRvjABf1xkdGsaw8mYIPcIElzoSDR",
	"Ys/15G8cyjMSXijNXaUOu6zI5RIITm4e2MsWcccNTef5lmjc14xQRSjxV9OUsDnZioqscXNydo3fu9UY",
	"rBXEIA03p3WPmsM7hL4eMiLImwmRA+WIPH/u+ijjc7aoJCiyXoJeujtPgioFV0DE7O+QarPt/37x6kci",
	"JHkJStEFvKbpNQGeigyyY3I+J1zogDQcLSEOzZdD63BwxS75vythaKJQi5Km1/EbPWcFi6zqJd2woioI",
	"r4oZSLOl/grRgkjQleRDANkR95BiQTf9SS9lxVPc/2balixnqI2pMqdbRFhBN1+fTh04itA8JyXwjPEF",
	"0Rs+KMeZufeDl0hR8WyEmKPNngYXqyohZXMGGalH2QGJm2YfPIwfBk8jfAXg+EEGwaln2QMOh02EZszp",
	"Nk9ISRcQkMwx+ckxN3yqxTXwmtDJbIuPSgkrJipVfzQAI069WwLnQkNSSpizCI1dOHQYBmPfcRy4cDJQ",
	"KrimjENmmDMCLTRYZjUIUzDhbn2nf4vPqIIvnwzd8c3Tkbs/F91d37njo3YbX0rskYxcneapO7Bxyar1",
	"/Qj9MJxbsUVif+5tJFtcmttmznK8if5u9s+joVLIBFqI8HeTYgtOdSXh6RU/Mn+RhFxoyjMqM/NLYX96",
	"WeWaXbCF+Sm3P70QC5ZesMUAMmtYowoXflbYf8x4cXasN1G94oUQ11UZLihtKa6zLTl/PrTJdsxDCfOs",
	"1nZDxeNy45WRQ7/Qm3ojB4AcxF1JzYvXsJVgoKXpHP/ZzJGe6Fz+Zv4py9x8rct5DLWGjt2VjOYDZ1Y4",
	"K8ucpdQg8Y17bJ4aJgBWkaDNGyd4oT59H4BYSlGC1MwOSssyyUVK80RpqnGkf5Ywnzyd/NNJY385sZ+r",
	"k2DyF+arC/zIiKxWDEpoWR4wxmsj+qgdzMIwaHyEbMKyPRSaGLebaEiJGRacw4pyfdyoLC1+UB/gt26m",
	"Bt9W2rH47qhggwgn9sUZKCsB2xfvKRKgniBaCaIVBdJFLmb1D/fPyrLBID4/K0uLD5QegaFgBhumtHqA",
	"y6fNSQrnOX9+TL4Px0ZRXPB8ay4HK2qYu2Hubi13i9W2JbeGZsR7iuB2CnlstsajwYj5d0FxqFYsRW6k",
	"nr20Yl7+q3s3JDPz+6iPPw8SC3E7TFyoaDnMWR0HfwmUm/sdyukTjjP3HJOz7rc3Ixszyg6CUecNFu+a",
	"ePAXpqFQeykhgCigJrc9VEq6nTghMUFhr08mPymwFFLSBeMI7dSoT5wU9Nruh0C8G0IAVetFlpasBFmb",
	"UJ3M6VB/3LOzfAbUGttYL4kaSTVnSqNejS+TJeQoOFPuCToklRtRxogN37GIGua1pKWlZffEil2Moz5v",
	"X7Kw3vLiHXknRmEO2H2w0QjVjdnyXtYZhQS5RgeGb3KRXv+VquUdnPCZH6tP+zgNWQLNQJIlVcvIwenQ",
	"djPaGPo2LyLNklkw1XG9xBdioe5gibk4hHWV5TOa52bqPsvqrBYHHnWQ85yYlwkUDA3mTnG0Fnarf5Fv",
	"abo0YgFJaZ5PG1ORKJMcVpAbpZ1xDnJK9JLq5vDjyF6vwXOkwDA7DSRYjTMzoYlN1rYICaSgeAMVRpsp",
	"8/Y3NQdVtICOFIQ3oqjQihAoGufP/epgBRx5Uj00gl+vEa014eDHZm73CGfmwi7OWgC1d9/V+Kv5RQto",
	"83Zzn/JmCiEza7PW5jcmSSqkHcLe8G5y8x+gsvnYUuf9UkLihpB0BVLR3Kyus6gHNfne1encczIzqmlw",
	"Mh0VxhUwyznwOxTvQEasNK/wPzQn5rGRYgwlNdTDUBgRgTs1sxezQZWdybyA9lZBCmvKJCVNrw+C8lkz",
	"eZzNjDp531rrqdtCt4h6hy43LFN3tU042NBetU+ItV15dtSTRXYynWCuMQi4FCWx7KMDguUUOJpFiNjc",
	"+bX2jdjEYPpGbHpXmtjAneyEGWc0s/9GbJ47yITcj3kcewzSzQI5LUDh7cZDxmlmafxyZzMhbyZNdC4Y",
	"ThpvI6Fm1ECYmnaQhK9WZeLOZsRjYV/oDNQEeOwWArrDxzDWwsKFpr8DFpQZ9S6w0B7orrEgipLlcAek",
	"v4wKcTOq4PEjcvHXsy8ePvrl0RdfGpIspVhIWpDZVoMi951Zjii9zeFBVDtC6SI++pdPvI+qPW5sHCUq",
	"mUJBy/5Q1vdltV/7GjHv9bHWRjOuugZwFEcEc7VZtBPr1jWgPYdZtbgArY2m+1qK+Z1zw94MMejwpdel",
	"NIKFavsJnbR0kplXTmCjJT0p8U3gmY0zMOtgyuiAxexOiGpo47Nmlow4jGaw91Acuk3NNNtwq+RWVndh",
	"3gAphYxewaUUWqQiT4ycx0TEQPHavUHcG367yu7vFlqypoqYudF7WfFswA6hN3z8/WWHvtzwBjc7bzC7",
	"3sjq3Lxj9qWN/EYLKUEmesMJUmfLPDKXoiCUZPghyhrfg7byFyvgQtOifDWf3421U+BAETsOK0CZmYh9",
	"w0g/ClLBbTDfHpONG3UMerqI8V4mPQyAw8jFlqfoKruLYztszSoYR7+92vI0MG0ZGHPIFi2yvL0Jawgd",
	"dqp7KgKOQccLfIy2+ueQa/qdkJeN+Pq9FFV55+y5O+fY5VC3GOcNyMy33gzM+CJvB5AuDOzHsTV+kgU9",
	"q40Idg0IPVLkC7ZY6kBffC3F73AnRmeJAYoPrLEoN9/0TUY/iswwE12pOxAlm8EaDmfoNuRrdCYqTSjh",
	"IgPc/ErFhcyBkEOMdcIQLR3KrWifYIrMwFBXSiuz2qokGIDUuy+aDxOa2hOaIGrUQPhFHTdj37LT2XC2",
	"XALNtmQGwImYuRgHF32Bi6QYPaW9mOZE3Ai/aMFVSpGCUpAlzhS9FzT/nr069A48IeAIcD0LUYLMqbw1",
	"sNervXBewzbBWD9F7v/ws3rwCeDVQtN8D2LxnRh6u/a0PtTjpt9FcN3JQ7KzljpLtUa8NQwiBw1DKDwI",
	"J4P714Wot4u3R8sKJIaU/K4U7ye5HQHVoP7O9H5baKtyIILdqelGwjMbxikXXrCKDZZTpZN9bNm81LIl",
	"mBUEnDDGiXHgAcHrBVXahkExnqFN014nOI8VwswUwwAPqiFm5J+9BtIfOzX3IFeVqtURVZWlkBqy2BrQ",
	"Izs414+wqecS82DsWufRglQK9o08hKVgfIcspwHjH1TX/lfn0e0vDn3q5p7fRlHZAqJBxC5ALvxbAXbD",
	"KN4BQJhqEG0Jh6kO5dShw9OJ0qIsDbfQScXr74bQdGHfPtM/Ne/2ics6Oey9nQlQ6EBx7zvI1xazNn57",
	"SRVxcHgXO5pzbLxWH2ZzGBPFeArJLspHFc+8FR6BvYe0KheSZpBkkNNtJDjAPib28a4BcMcbdVdoSGwg",
	"bnzTG0r2cY87hhY4nooJjwSfkNQcQaMKNATivt4zcgY4dow5OTq6Vw+Fc0W3yI+Hy7ZbHRkRb8OV0GbH",
	"HT0gyI6jjwF4AA/10DdHBX6cNLpnd4q/gXIT1HLE4ZNsQQ0toRn/oAUM2IJdjlNwXjrsvcOBo2xzkI3t",
	"4SNDR3bAMP2aSs1SVqKu8wNs71z1604QdZyTDDRlOWQkeGDVwDL8ntgQ0u6YN1MFR9ne+uD3jG+R5fgw",
	"nTbw17BFnfu1zU0ITB13octGRjX3E+UEAfURz0YED1+BDU11vjWCml7ClqxBAlHVzIYw9P0pWpRJOEDU",
	"P7NjRuedjfpGd7qLL3CoYHmxWDOrE+yG77KjGLTQ4XSBUoh8hIWsh4woBKNiR0gpzK4zl/7kE2A8JbWA",
	"dEwbXfP19X9PtdCMKyB/ExVJKUeVq9JQyzRCoqCAAqSZwYhg9ZwuOLHBEORQgNUk8cnRUXfhR0duz5ki",
	"c1j7nEHzYhcdR0dox3ktlG4drjuwh5rjdh65PtBxZS4+p4V0ecr+iCc38pidfN0ZvPZ2mTOllCNcs/xb",
	"M4DOydyMWXtII+OivXDcUb6cdnxQb9247xesqHKq78JrBSuaJ2IFUrIM9nJyNzET/NsVzV/Vn2E+JKSG",
	"RlNIUsziGzkWXJpvbOKfGYdxZg6wDfofCxCc268u7Ed7VMwmUpUVBWSMasi3pJSQgs13M5Kjqpd6TGwk",
	"fLqkfIEKgxTVwgW32nGQ4VfKmmZkxXtDRIUqveEJGrljF4ALU/Mpj0acAmpUuq6F3Cowa1rP57Jcx9zM",
	"wR50PQZRJ9l0MqjxGqSuGo3XIqedtzniMmjJewF+molHulIQdUb26eMr3BZzmMzm/j4m+2boGJT9iYOI",
	"3+bhUNCvUbfz7R0IPXYgIqGUoPCKCs1Uyj4V8zBH24cKbpWGom/Jt5/+MnD83gzqi4LnjENSCA7baFkS",
	"xuElPoweJ7wmBz5GgWXo264O0oK/A1Z7njHUeFv84m53T2jXY6W+E/KuXKJ2wNHi/QgP5F53u5vypn5S",
	"mucR16LL4OwyADWtg3WZJFQpkTKU2c4zNXVRwdYb6dI92+h/Xeel3MHZ647b8aGFxQHQRgx5SShJc4YW",
	"ZMGVllWqrzhFG1Ww1EgQl1fGh62Wz/wrcTNpxIrphrriFAP4astVNGBjDhEzzXcA3nipqsUClO7oOnOA",
	"K+7eYpxUnGmcqzDHJbHnpQSJkVTH9s2Cbsnc0IQW5DeQgswq3Zb+MUFZaZbnzqFnpiFifsWpJjlQpclL",
	"xi83OJx3+vsjy0GvhbyusRC/3RfAQTGVxIPNvrdPMa7fLX/pYvwx3N0+9kGnTcWEiVlmq0jK/73/b0/f",
	"niX/RZPfTpOv/uXk3fsnHx4c9X589OHrr/9f+6fHH75+8G//HNspD3ssfdZBfv7cacbnz1H9CUL1u7B/",
	"NPt/wXgSJbIwmqNDW+Q+lopwBPSgbRzTS7jiesMNIa1ozjLDW25CDt0bpncW7enoUE1rIzrGML/WA5WK",
	"W3AZEmEyHdZ4YymqH58ZT1RHp6TLPcfzMq+43Uovfds8TB9fJubTuhiBrVP2lGCm+pL6IE/356MvvpxM",
	"mwzz+vlkOnFP30UomWWbWB2BDDYxXTFMkrinSEm3CnSceyDs0VA6G9sRDltAMQOplqz8+JxCaTaLczif",
	"suRsTht+zm2Avzk/6OLcOs+JmH98uLUEyKDUy1j9opaghm81uwnQCTsppVgBnxJ2DMddm09m9EUX1JcD",
	"nfvAVCnEGG2oPgeW0DxVBFgPFzLKsBKjn056g7v81Z2rQ27gGFzdOWMRvfe+//aSnDiGqe7ZkhZ26KAI",
	"QUSVdsmTrYAkw83CnLIrfsWfwxytD4I/veIZ1fRkRhVL1UmlQH5Dc8pTOF4I8tTnYz6nml7xnqQ1WFgx",
	"SJomZTXLWUquQ4WkIU9bLKs/wtXVW5ovxNXVu15sRl99cFNF+YudIDGCsKh04kr9JBLWVMZ8X6ou9YIj",
	"21peu2a1QraorIHUlxJy48d5Hi1L1S350F9+WeZm+QEZKlfQwGwZUVrU+WhGQHEpvWZ/fxTuYpB07e0q",
	"lQJFfi1o+ZZx/Y4kV9Xp6WPM7GtqIPzqrnxDk9sSRltXBktSdI0quHCrVmKselLSRczFdnX1VgMtcfdR",
	"Xi7QxpHnBD9rZR36BAMcqllAneI8uAEWjoOTg3FxF/YrX9YxvgR8hFvYTsC+1X4F+fM33q49Ofi00svE",
	"nO3oqpQhcb8zdbW3hRGyfDSGYgvUVl1hvBmQdAnptatYBkWpt9PW5z7gxwmannUwZWvZ2QxDrKaEDooZ",
	"kKrMqBPFKd92y9oom1GBg76Ba9heiqYY0yF1bNplVdTQQUVKDaRLQ6zhsXVjdDffRZX5RFNXnQSTNz1Z",
	"PK3pwn8zfJCtyHsHhzhGFK2yH0OIoDKCCEv8Ayi4wULNeLci/djyGE+Ba7aCBHK2YLNYGd7/6PvDPKyG",
	"Kl3lQReFXA+oCJsTo8rP7MXq1HtJ+QLM9WyuVKFobquqRoM2UB9aApV6BlTvtPPzsCCFhw5VyjVmXqOF",
	"b2qWABuz30yjxY7D2mgVaCiy77jo5ePh+DMLOGQ3hMd/3mgKx4O6rkNdpOKgv5Vr7NZqrQvNC+kM4bLP",
	"C8CSpWJt9sVAIVy1TVvUJbhfKkUXMKC7hN67kfUwWh4/HGSfRBKVQcS8K2r0JIEoyPblxKw5eobBPDGH",
	"GNXMTkCmn8k6iJ3PCItoO4TNchRg68hVu/dUtryotirwEGhx1gKSN6KgB6ONkfA4LqnyxxHrpXouO0o6",
	"+x3LvuwqTXcexBIGRVHrwnP+Nuxy0J7e7wrU+ap0vhRdqPSPKCtndC9MX4hth+AommaQw8Iu3L7sCaUp",
	"mNRskIHj1XyOvCWJhSUGBupAAHBzgNFcjgixvhEyeoQYGQdgY+ADDkx+FOHZ5ItDgOSu4BP1Y+MVEfwN",
	"8cQ+G6hvhFFRmsuVDfgbU88BXCmKRrLoRFTjMITxKTFsbkVzw+acLt4M0quQhgpFpx6aC715MKRo7HBN",
	"2Sv/oDVZIeEmqwmlWQ90XNTeAfFMbBKboRzVRWabmaH3aO4C5kvHDqatRXdPkZnYYDgXXi02Vn4PLMNw",
	"eDAC28uGKaRX/G5IzrLA7Jp2t5wbo0KFJOMMrTW5DAl6Y6YekC2HyOV+UF7uRgB0zFBNrwZnlthrPmiL",
	"J/3LvLnVpk3ZVJ8WFjv+Q0couksD+Ovbx9oF4f7aFP4bLi7mT9RHqYTXtyzdpkKh/bi0VQcPKVDYJYcW",
	"EDuw+rorB0bR2o71auM1wFqMlRjm23dK9tGmIAdUgpOWaJpcxyIFjC4PeI9f+M8CYx3uHuXbB0EAoYQF",
	"Uxoap5GPC/oU5niK5ZOFmA+vTpdybtb3Roj68rduc/ywtcyPvgKMwJ8zqXSCHrfoEsxL3yk0In1nXo1L",
	"oO0QRdtsgGVxjovTXsM2yVhexenVzfvDczPtj/VFo6oZ3mKM2wCtGTbHiAYu75jaxrbvXPALu+AX9M7W",
	"O+40mFfNxNKQS3uOz+RcdBjYLnYQIcAYcfR3bRClOxhkkHDe546BNBrEtBzv8jb0DlPmx94bpebT3odu",
	"fjtSdC1BGcB4hqBYLCDz5c28P4wHReRywRdBF6ey3FUz75jY0nVYeW5H0ToXhg9DQfiBuJ8wnsEmDn2o",
	"FSDkTWYdFtzDSRbAbbmSuFkoipowxB/fCGx1H9kX2k0AiAZBX3ac2U10st2lejtxA3KgmdNJFPj17T6W",
	"/Q1xqJsOhU+3Kp/uPkI4INIU00Fjk34ZggEGTMuSZZuO48mOOmgEowdZlwekLWQtbrA9GGgHQUcJrlVK",
	"24VaOwP7Ceq8J0Yrs7HXLrDY0DdNXQJ+Vkn0YLQim/t122tdbeTaf/j5QgtJF+C8UIkF6VZD4HIOQUNQ",
	"FV0RzWw4Scbmcwi9L+omnoMWcD0bezaCdCNEFnfRVIzrL5/EyGgP9TQw7kdZnGIitDDkk7/se7m8TB+Y",
	"kuorIdiaG7iqoun6P8A2+ZnmlVEymFRNeK5zO7Uv3wN2fVX8AFsceW/UqwFsz66g5ekNIA3GLP31IxUU",
	"sL6nWiX+Ub1sbeEBO3UW36U72hrXlGGY+JtbptW0oL2U2xyMJkjCwDJmNy7isQnm9EAb8V1S3rcJLNsv",
	"gwTyfjgVU76FZf8qqmtR7KPdS6C5J15czuTDdHK7SIDYbeZG3IPr1/UFGsUzRppaz3ArsOdAlNOylGJF",
	"88TFSwxd/lKs3OWPr/vwio+sycQp+/LbsxevHfgfppM0ByqT2hIwuCp8r/xsVmXbOOy+Smy1b2fotJai",
	"YPPrisxhjMUaK3t3jE29pihN/ExwFF3MxTwe8L6X97lQH7vEHSE/UNYRP43P0wb8tIN86Iqy3DsbPbQD",
	"wem4uHGddaJcIRzg1sFCQcxXcqfspne646ejoa49PAnneoWlKeMaB3eFK5EVueAfeufS03dCtpi/y0yM",
	"Bg/9fmKVEbItHgditX3/yq4wdUys4PXr4ldzGo+OwqN2dDQlv+buQQAg/j5zv6N+cXQU9R5GzViGSaCV",
	"itMCHtRZFoMb8XEVcA7rcRf02aqoJUsxTIY1hdooII/utcPeWjKHz8z9kkEO5qfjMUp6uOkW3SEwY07Q",
	"xVAmYh1kWtiWmYoI3o2pxiRYQ1rI7F1LBuuM7R8hXhXowExUztJ4aAefKcNeuQ2mNC8TfHnAWmtGrNhA",
	"bC6vWDCWeW1MzdQOkMEcUWSqaNnWBncz4Y53xdk/KiAsM1rNnIHEe61z1XnlAEftCaRxu5gb2PqpmuFv",
	"YwfZ4W/ytqBdRpCd/rvntU/JLzTW9OfACPBwxh7j3hG97ejDUbPNZlu2QzDH6TFjWqd7RuecdQNzRFuh",
	"M5XMpfgN4o4Q9B9FCmF4xydDM+9vwHdE7rkW+fbyis6Se7kHI+M0K6A1yZr6WQwIFe/NOOjQrt3YTQ/5",
	"Zr1R8PZR3XgVfYj+bq2Se7TUzc9ucqfHmcth9HQT3VvFq0Y7JA/pgmGgQztDYYDD4SkPYnKxG4sPgqLc",
	"HmtbjKKV6BZnDmFK6Ykdv2EODuZeGm5O1zMaa1VjVDIDU7C9rXAtLYj/2G+Aqkst2NlJEEhev8tsQbsS",
	"ZOMK6RfHvaF6ZacdrVg1ehRSVKhBTW20RK5EZJiKrym3zczNd5Ztuq8V2EgA89VaSCxHqeKRZRmkrIha",
	"ha+u3mZpP4ooYwtm+3RXCoJG0G4gYmteIhW5Ztp1ARGHmvM5OZ0G3ejdbmRsxRSb5YBvPLRvzKjCW7v2",
	"ytefmOUB10uFrz8a8fqy4pmETC+VRawSpFaBUdas4yNnoNcAnJziew+/IvcxMlSxFTwwWHSy2OTpw68w",
	"rsf+cRq77F2f9V03R4ZXh48Zj9MxhsY6zj7b+u7t8avEsunhS2rHabKfjjlL+Ka71/afJbw+nIK8A7zc",
	"IYKT+7RddwrBBPnA/jh3GQMBfqzTEWfIt/6mJaeEzXdeg2YvOV1APIOl2IMu+y0SGgY8dLaMW38JKC3F",
	"ljAdRU0BmhrWOZAVbzizBYOkoiiYLlxooxKFIfWmAbWd1A+Hrdp8Ry0Pl3+IEcKlD5DsWAM/sqJHi4Gs",
	"Nozj/hG92CFap4Ta8qg5a2L3fUdTcu6rL2OLsbqzmMWNmcssHaVtDOWfk1IyrtFCVOl58heSLqmkqeHM",
	"x0PgJrMvn0RadbW72fDDAP/oeJegQK7iqJcDZO/FKfctuc8FTwpzlrIHTRWKgGEMhjLHg1aHImd3Dz1W",
	"NzCjJIPkVrXIjQaXyK0Ij+8Y8JakWK/nIHo8eGUfnTIrGScPWpkd+unNCycAFULGWio0x90JQxK0ZLDC",
	"nML4Jpkxb7kXMh+1C7eB/tNGiHlpOJAY/VmO6iiBz3dXOQGjYPz8sqkNj65nm6vZsZIKGbEHO8vmR47H",
	"PMwu2fVw25A6fDaAudFow1H6WBnIT7AJCPU3nyKiqguS3fOWSfbhr0QCCnhakKMjBProaOok9F8ftR9b",
	"9n50FC/RHDVKml8bLNxGWcdvY3v4jYiYCH1fxzrkylWQiJhohy4p88AwwZkbakraPfQ+vhRxNxlw8Xjc",
	"+Cm4unqLTzwe8I8uIj4xs8QNbPI4hg97u4dolGSy+nmQCUDJN2IzlnA6d5Annj8AigZQMtJyiCvp9UiN",
	"BjTsjagJaNSMOoNcGP03bJsUejw+HzybxU93YLtiefZzU/2uc5FIytNlNI56Zj78xcrorSvYsspoJ5Yl",
	"5Rzy6HBWt/3F68B9LZn+XYydp2B85LvdHr12uZ3FNYC3wfRA+QkNepnOzQQhVtuFxerCFflCZATnadp+",
	"NMyx3+w61mQ0kgGOwxaVdpG9mC3vSjLNWY6BqnHPOr6ZSKoHSoxhR3jfgcmMgw3alTUz2NFBEsoKvJgV",
	"Lcoc8GSuQNIFfio4dD7HInM4ctDTg6jSPMI3saSHILqSnIj5PFgGcM0k5NspKalSdpBTsyzY4NyTpw9P",
	"T6MWOcTOiJVaLPplvmqW8vAEX7FPXBsq2yzhIGD3w/qhoahDNrZPOK7r5j8qUDrGU/GBze1FP7K5tW3H",
	"zbo77DH5HmtDGSJuNQNAS6ovs9wuOVqVuaDZFMs/X3579oLYWe03tsm+7fi5QENim/yjnp/xJVh97auB",
	"2kLjx9ld7MSsWumkbtAZq95o3mhaiLJOVBLa8ULsHJPn1rqrvIHOTkKwiLgsIAv6gVolHonD/Edrmi7R",
	"NtmSgIZ55fhWtZ6dNU6lID+z7g+FDNvA7brV2ma1UyL0EuSaKcCaBbCCdsHIunqqM9v7ApLt5cmKc0sp",
	"xwcIo3U3qEPR7oGzkqwPu4hC1kH8gZYp27H60M69F/hVPFul0wa4Exfhyw/6IuTkpfN7pJQLzlI0occk",
	"aSxuN86DOqKvRtz1qSbuhEYOV7T5cJ0t7bA42I7YM0KHuH5QRPDUbKqlDvunho1rSrcArRxng2zqe4E7",
	"Xx3jCly/L0NEIZ8UMhL2FU0VqUNMDiQjrFs1YOH8zjz70dm/sWzINeNo6XJoc/qZ9abliqHTnBOmyUKA",
	"cutp5zupt+abY6xjmcHm3fELsWDpBVvgGDbQ0CzbRtX2hzrzMbYuptW8+8y867oL1D+3AubspGdl6SYd",
	"7hQfFST1hg8iOBbZ5UNtAuTW44ej7SC3ncHxeJ8aQoMVxvVBifdwjzDqbuPtUb41uqWlKHyD2JzTqA+O",
	"8QgYLxj33t34BZFGrwTcGOeUi5evSSXVVncYxdMugeYDKSKYw23DA247VLe3gkEJrtHPMbyNTaP0AcZR",
	"v9BI/JRviT8UhroDYeIZzevg8kjbc5SqnBCVYfpVpxF6jHEYxp34pNIWuvYmONafY7+SQ2+ioSqOsypb",
	"gE5olsWKf32DTwk+9Wl0sIG0qtt01fmT7SrufWpzE6WCq6rYMZd/4ZbTZUxRpaCY5ZHA2uf1Q8jqHcZa",
	"RLMt/hvrUTW8M85rfnDeso8hzw5rXdDPw45JvYamE8UWyXhM4J1ye3Q0U9+M0Jvv75TSfULzHyJfucPl",
	"wj2K8bdvzcURljbuRfDbq6WuPIzR8gKf+5JQdc3MNlfCq6zXiQ2jHnDzIlvWAd6/GAV8RfOBWgGhr8Te",
	"r9Z/MFQxIB0scEG1K2CmKdnJggaLQtlo6o73pe9CHIqgtgHUd+e1cGvdidBh390PLU+dDV9rmMWgh+5m",
	"TrRmgw/1ov2wGioi4TuZ4POwY4qL4pm6QvmwYqLygWE+StyrhPZXV6So1RllYP3R3ItP7bUY9LFcug6/",
	"dplOJ//hZ+uFJcC13P4BPC69Te+23YlIu9Y81bxC6uaQo5pFtm7FMV1+Yg1lnGzobWWWtbRoqdegp0dW",
	"z8eIAz18fJhOzrODLsxYU6KJHSV27F6wxVJjT4O/As1Avt7Ts6Hp04BHrBSKNT1aczOYK5K7xOGOx6Zj",
	"GAJmYc+J/lg+PnYFqcbGvE1wnQQ4pAOFmcw7ff7s3TCsTtdZK65lw64+Df1uvHvu+F5pqaA8mu1kejy+",
	"K8FZHd1tc+TWVDUFbTpZ5aNzW+dzSLFu9M5SXhj92pSJmnq7DMIyDyp7sTrTCyufH251bADaVWlrJzxB",
	"B6JbgzOU6X8N23uKtKgh2lq1TnO8SWllxIB1gfkq20OGZBc1xlRNGYgFHxLsilU37UMGq2IHheluOJcn",
	"SXNxNMXqdkwZbws/ai7z6UGFMTGFaKjaV7+r9LD+8RybeCsXIEfr0syhlk7O+62F1q60MxZeq30nvsgz",
	"KP+br7JoZ8nZteuwgFixnqo1lZl/407KZtm7icWBntczsya3pB/kEGlWgblbaS6MGJEMpdy10znqgMN7",
	"ykaGNiWOfKi9hKx2ieRCQaKFz0XZBccuVNjw1xshQQ02iLLADRYHf9NUP8dGeRSLgVMX9RoukEgoqIFO",
	"BjXKh+fchexn9rkvU+Abpe21MNX0ur9jr88qYqqHxJDq58TdlvvLH9zE2MQ4B5l4z1O3YDlv16zDyqRZ",
	"ldoLOjwYtUFudHWhHawkaqdJ+6vs6AhBGYFr2J5YJci3OvY7GAJtJScLelCStbPJd2p+UzG4F3cC3qet",
	"tFcKkScDzo7zfpX1LsVfs/QasEpiHeI+0MWe3Ecbe+3NXi+3vqp4WQKH7MExIWfc5jt5x3a7AWNncn5P",
	"75p/g7NmlW184Ixqx1c8np2BLQnkLbmZH2Y3D1NgWN0tp7KD7KnhveFDITdrbF/Q7nN6PFYr77uau332",
	"G6KyUMRkkgvrsXo2kHx9RrBIRFDNBB2ZlDhPF1G5iMXy3qSQhRkqjqlwMgRIj0rvbqBwg0cREO0cHzmF",
	"tjigKwso5kRC40S+aX3EfpP7mEbfnbmepc3v5kJCq129+drWQq0TX7DQKP5nxrSkcnuTKoa9Jvs968kg",
	"lveGY9WRWM1CmmisPg7zXKwTZFZJ3Qkkptqa91T7MvZt6ZrvzKmeQRDXRZUT1LZkSTOSCikhDb+Ip6Ja",
	"qAohIckFhnnFPNBzbeTuApO8OMnFgogyFRnYjjpxChqaq+KcotgEQVRNFAWWdjCR2X4T0PHIKc2dav1I",
	"CYpaewvQ+82/NN/YpPqm7pVddGJ9mQMRy6BcnSuHIftyH14kHFsYpmtLjPPmOdsg3YCMHfk50bKCKXFv",
	"dLuIu4NPJZCCKWVBqWlpzfIcc9rZJvC81oELcdQOiL3nGFa5Yhh7065vYKXh0tx5ddGHkAdchIWhiF5K",
	"US2WQQnuGk6v8srKKcThKD+pCsOjMIPMTPGEFEJpp2nakZolNyFn91PBtRR53jZKWRF94SztL+nmLE31",
	"CyGuZzS9foB6LRe6Xmk29anf3eDAZibZKb7WvoAT2/B9fzFj+x6GyjmiHc0gOyzu4Nb3AZjv9nPQ/Tb3",
	"s/7CuutqM9O4GnPGCdWiYGn8TH1e0XaDMXIxFhWt6ma7T9oCGPgaHvbwsqqDK5BF9tEMnEbb550Rxwic",
	"kxnZjfkvSuDdcckcHKMZuCj7zMVJUYOFdnoAIKQ29VlX0rasDCWxmquIha3igC7yLqAjbxWMRLodbGaE",
	"OwdKw62A6kU/1gDet8aHqa2+ZyMpZ2Ljnz9oyvPdCPgPu6m8xTyGQrwuGtKSNsjL19AZ4AjxIuA746Eu",
	"Me19NjYqqm4vPPKGDwAYjpNqwTAqWupQMOaU5ZAlse6U57WNahpo2i41q9s0ninHyVNa+eaQZuxKgqvp",
	"YkV82fZ/ldSQkqhf71uSeQYbsHkdv4EUtuvjNPC/QG6bQnaMAaJMclhBK3zMFZqpUNRkK/DfqvpjkgGU",
	"6I3s2shicVHhXd4xnLi1J0FkzRjsRi0pFrF2p8geM0nUqLPhiT0mauxRMhCtWFbRFv7UoSJH2wxojnIE",
	"VT0dIfF65NhpfrIjvPEDnPnvY6KMx8S7cXzoYBYUR90uBrQ3TrJSQ6eex8MkwypKtYMFZ8tqR6wl8YZv",
	"qJKu+bBBsk/yjbo1cp+Y4AFiv91AilKN03cgcxrPgJPCVT1BaucAmdUKzCcRa/sSOOEiaMK5pqpWVZoq",
	"k/4HOzG+xLjTpm/gVG6iGW+/swQHI6pT521QkZA1nd7cPP9JTuLOgzg4XoxGFLj0vx32L0/dTu3AF7DZ",
	"OTf7aWR/bGPpbjHHxadkVvmB8lysbVfNUA99Dt4PaqnPu4CcWM7qa9lHbU5dAdSuqYMF8eoF3RIh8R+j",
	"df6jojmbb5HPWPD9Z0QtqSEh53i1EQEuCtRMvFu8mnrAvLVF+KnsutnYMYPhtmaUAGhzkfv2R4IU9BrC",
	"bcBgB8s/U20Yp6pmaLkwV3ZnO/tYcIv3JVoKmoWaPtawbDea98WVzdf/u8mFC6fypefKnKa+h6pr4tTm",
	"M9gn2ROXXkKxO1myz9c8CdS9lxuilT67PruByfRA1hXLQBhqUNMCu9eTtteb51bLGGn57XQh2ZFmOmop",
	"d70LY6NuekCHnSz3gR829vw4+I+Wlx1axhjw/yh4H2jlG8Jru/Z+BCy3KnBEYLXW6pnYJBLmal+AiTVX",
	"G3VeNrU7vImV8VQCVTbi5vyVUzyb6qmMG0XYxoTWPs16lAzmjDfMkvGy0hE9Bouo8m2AsNDoj2gdcKEN",
	"SQlGmFzR/NUKpGTZ0MaZ02GbXoZNNLyjw30bMWHUd2p/AKYaHQ7zMxszeviaucBtmy4brqk05RmVWfg6",
	"4yQFae59sqZbdXOPUu0c2OdTooE0064aEHiXkLQtIPnWOYVv6e+pAaR36PgZ4bDBuOCIs8aadrQY8M/0",
	"YfgsHDYF3SS5WGAW4cCBcGVz0cNnVUDB0Qxu5bNx6/bzKPYb7J4GGxc4RqQFzjpmit3n/hVuJaqRP3Gm",
	"d558a6PspnXauFt7MD1S+aIJ/rfE0j+PsUxcV3wlzMb1wqZPVfG0B8EmwoB/qG0XH9hFDINwadyhEXx8",
	"Q7h2pEUs39daBhK0GKgd4f2gmlB2mrrwrL4prWdqsEiZumzpAy1t1j7v76UB8Gz3fnfW29PWITNmnEO6",
	"6O3Oj05KUSbpmJhP29skc24CB2kbxgH6CJwAA+uuw2NU3e2nVfeo1fbn0EaCg22H9nm7ynSX0j9kJhrg",
	"6G0XhJgjL7O97dG6hZk8tTFl2s0xa5vBaiZBKJGQVhLNxGu63d+YbaBi9MVfz754+OiXR198ScwLJGML",
	"UE1B9E5jsyYukPGu3efjRgL2lqfjm+CrD1jEef+jT6qqN8WdNcttVVNStNfW7RD7cuQCiBzHSEOtG+0V",
	"jtOE9v+xtiu2yDvfsRgKfv89kyLP4w0parkq4kCJ7VbgQjEaSAlSMaUNI2x7QJluIqLVEs2DWPt3ZavJ",
	"CJ6Ctx87KmB6IOQqtpChgFrkZ5jb7bxGBDZl7niV9fTsWpfT06yFDoVGjIqZASlF6UR7NicxiDCDSAaZ",
	"tc7wiRbxIEa2ZrY2WjZGiC7yPE56YUvx3dy+3e5Wxzm92cSIeOEP5Q1Ic8g/MVy34CacpDHt/2H4R6QQ",
	"w51xjXq5vweviOoHO3KOz3pxD3URglGg9ZPyI+SBAAxk27byJINEsaAQsbReAvQneAdyV/x42TiW96aF",
	"ICT+gz3ghemzzXt1JoMD5xNX9H1ZIyVYyrshSmgtf19Grme99UUSbJEzmmgNyrIl0RcLg3Rr9azOYh7Q",
	"SnrJzlIITYxmmueRJGlrx8EzFRKOUQnkiuYfn2t8x6TSZ4gPyN4Mp0aFmbIhki0q1c3q9L2go+YOsmLv",
	"bmr+GhOz/wPMHkXvOTeUc8L3bjM07mBP/4W/FWyuN1njmDbI6uGXZOaabZQSUqa6zv21F07qxFCQbO4C",
	"WmGj92Si7lvnz0LfgoznPhKH/Bi4t2qfvYOwOaKfmKkMnNwolceor0cWEfzFeFTYvnjPdXHLxgw3K/sS",
	"FHA7sOxLvzHz2OXZ0ibm0qkU9Nc5+rZu4TZyUTdrG1uzaHR/h6urt3o2ptRQvBeD+RxrHd1JU4aDWjL8",
	"DlWOLI7cGG7eGMX8PFT31tZ2HajN3dmPiuV7A1ZaldY/TCcL4KCYwlriv7jeMR/3LvUQ2MoL/aNqYb1N",
	"uRiLmMhaW5MHUwU11EeUT3efRWpeY1ZjWkmmt9hZ2RvQ2C/Rekzf17U9XG2Y2pfm7j4trqHubt9UAqmU",
	"v12/FzTH+8i6+Li5hUR+TL61Fb7dQfn63uxf4fFfnmSnjx/+6+wvp1+cpvDki69OT+lXT+jDrx4/hEd/",
	"+eLJKTycf/nV7FH26Mmj2ZNHT7784qv08ZOHsydffvWv9wwfMiBbQH1p/6eT/0zO8oVIzl6fJ5cG2AYn",
	"tGQ/gNkb1JXnAltuGqSmeBKhoCyfPPU//R9/wo5TUTTD+18nrj/TZKl1qZ6enKzX6+Pwk5MFpv4nWlTp",
	"8sTPg40QW/LK6/M6Rt/G4eCONtZj3FRHCmf47M23F5fk7PX5cUMwk6eT0+PT44eu+TenJZs8nTzGn/D0",
	"LHHfT7C+5olypfNP6lytD9Pes7K0hfXNI0ej7q8l0BwL7Jg/CtCSpf6RBJpt3f/Vmi4WII8xe8P+tHp0",
	"4qWRk/eucsKHXc9OwsiQk/etAhPZni995MO+V07e+1a/uwdsdXR1MWcGqVGX5/egXbkla3uI1OpAT4Mb",
	"fUoU1s03P5WSCXNep+byzQDjAjC8TWIBcS0rnlpnsZ0COP735dl/osP85dl/kq/J6dQlHChUaGLT24zr",
	"mtDOMwt2P05RfbM9q6uZNM71ydO3MSOTCxYtq1nOUmLlFDyohgqDc1SP2PBJtChOVN0BvuH6hpOfJl+9",
	"e//FXz7EpMmebFwjKSjw0fL6Ct+UFZFW0M3XQyjbuAh0M+4/KpDbZhEF3UxCgPse1EjVM58g5Ftkh7GJ",
	"QdTiv1+8+pEISZz2/Jqm13VylM+GazIAw2Q48+UQxO5iDYEGXhXmjnJZVoValO0CwDWa32G3RAQU2cmj",
	"01PPQ52GEhzQE3fug5k6Zq0+oWGYTmCo7KfCKwIbmup8S6gK4iQwatE3Xe2ksIkyaQXS7zSN9md0WxLN",
	"Qjg0Gz9SoV5omu+B77LTBbKFDhfyU5pLdn/6ew8ZUQjexcSIcGs9jfy5u/89drcvlZBSmDPNMC67uXL8",
	"ddYC0smi+daDO1Bo5Jj8TVQoOxqtoNJQs0AhkZ3VF6b1ibg5XV2kIJCuSR3CJ0dH3YUfHTVhf3NYI5Ol",
	"HF/souPo6Njs1JMDWdlOO3WrjPCos3PIcL3Nekk3ddQ0JVzwhMOCarYCEiicT04ffrYrPOc2Tt0Iy1ao",
	"/zCdfPEZb9k5N4INzQm+aVfz+LNdzQXIFUuBXEJRCkkly7fkJ14nAgTd3/vs7yd+zcWae0QYfbUqCiq3",
	"ToimNc+peND3Zyf/6VU4agRt5KJ0oTAWBkVUK9P6Koh8MXn3wesAI3WPXa+dzLAD5thXIVRYhrUT9Eyo",
	"k/doWx/8/cQ5SOMP0cdhlecTX3tx4E1bZSv+sKUVvdcbs5Ddw5l3gvFSqtNlVZ68x/+gHhysyBbtP9Eb",
	"foIxoSfvW4hwj3uIaP/efB6+sSpEBh44MZ8r1ON2PT55b/8NJoJNCZKZ6wgLZbpfbUHjE+wkve3/vOVp",
	"9Mf+OlrFXAd+PvFmmJhK3X7zfevPNk2pZaUzsQ5mQQeG9b71ITMPK9X9+2RNmTZCkqshSucaZP9jDTQ/",
	"cQ2DOr82Nfp7T7DxQPBjR6wqhS0i1NZo39D1ZSsXVNpiGd8INFQMMdxNMmMcuVDIJRuzpH3YV5F6vPFy",
	"CTb+1nt2IzKoFmQmBc1SqrT5w7XW6unGH26pf3Vre5xH/HYIJpob+uUoDT853uvMwXHHCJnBvpDz537C",
	"JgHtdxfMehB9QzPiq04l5CXNzYZDRs6c+N/Cxu8tVH16KegTiy0fTc74xh8+RSiW4GspiDJeNCfogTdG",
	"qDBapGEAC+CJY0HJTGRb16ZsIulab2yNji5zO6HtG6NtiKSSFmro4R1YKf/Ypsl9Fsk/DYF/GgL/NBX9",
	"aQj8c3f/NASONAT+aSb700z2P9JMdohtLCZmOvPPsLSJfdNpa16r99GmP0XN4tvVw5iuZbJWGim2wmD6",
	"mJBLLP1CzS0BK5A0JylVVrpyZYoKjO7EGmSQPb3iSQsSG0NpJr7f/NcGr15Vp6ePgZw+6H6jNMvzkDf3",
	"v0V5Fx/Z/JKvydXkatIbSUIhVpDZZNiwPrr9au+w/6se91WvsQJmwWNtHV+qjKhqPmcpsyjPBV8QuhBN",
	"4DUWZOUCn4A0wNn2VITpqUtUYS472nWvb5dxb0vufQngvNnCvSEFHXKJRxMYwjswlOBfxsQR/I+W0m9a",
	"zeq2jHTn2D2u+idX+Rhc5ZPzlc/dSRuYFv9biplPTp98tgsKDdE/Ck2+w6SC24ljrlBoGu3SdVNByxeK",
	"8ea+JjA5DPTFW7QO8X37zlwECuTKX7BN3OrTkxOsHLYUSp9MzPXXjmkNH76rYX7vb6dSshW2gUbrppBs",
	"wTjNExf4mTSxqY+OTycf/n8AAAD//1VDqoAbIwEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
