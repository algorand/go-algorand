// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//objGlQziAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
