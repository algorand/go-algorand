// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+L3/+D8BAAD//1Q+mv/u1gAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
