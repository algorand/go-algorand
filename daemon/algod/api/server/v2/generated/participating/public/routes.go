// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ZcDef/x/AQAA///okn54zPoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
