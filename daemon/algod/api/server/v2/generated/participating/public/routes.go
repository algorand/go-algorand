// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{
	"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",
	"AaeBINLfAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
