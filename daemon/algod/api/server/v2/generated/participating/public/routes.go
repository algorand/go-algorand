// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
