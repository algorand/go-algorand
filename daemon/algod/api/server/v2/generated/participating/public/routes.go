// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
