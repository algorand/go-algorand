// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithOptions("simple", "txid", ctx.Param("txid"), &txid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/xsAAP//nAWETj8qAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
