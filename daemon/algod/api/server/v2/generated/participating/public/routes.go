// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"UrIV5gF+//H/BQAA///Es+Ofo98AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
