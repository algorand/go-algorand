// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
