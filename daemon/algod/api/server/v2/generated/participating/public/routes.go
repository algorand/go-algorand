// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a5fbNpLoX8HV7jl+rCi1X5lxn5Ozt/1Ipndsx8fdycxdt28CkSUJ0yTAAGC3FF//",
	"93tQAEiQBCX2I/Zk1p/sFvEoFAqFeuPjJBVFKThwrSaHHycllbQADRL/omkqKq4Tlpm/MlCpZKVmgk8O",
	"/TeitGR8NZlOmPm1pHo9mU44LaBpY/pPJxJ+rZiEbHKoZQXTiUrXUFAzsN6WpnU90iZZicQNcWSHOH4x",
	"+bTjA80yCUr1ofyB51vCeJpXGRAtKVc0NZ8UuWR6TfSaKeI6E8aJ4EDEkuh1qzFZMsgzNfOL/LUCuQ1W",
	"6SYfXtKnBsREihz6cD4XxYJx8FBBDVS9IUQLksESG62pJmYGA6tvqAVRQGW6Jksh94BqgQjhBV4Vk8P3",
	"EwU8A4m7lQK7wP8uJcBvkGgqV6AnH6axxS01yESzIrK0Y4d9CarKtSLYFte4YhfAiek1I68rpckCCOXk",
	"3XfPyaNHj56ahRRUa8gckQ2uqpk9XJPtPjmcZFSD/9ynNZqvhKQ8S+r27757jvOfuAWObUWVgvhhOTJf",
	"yPGLoQX4jhESYlzDCvehRf2mR+RQND8vYCkkjNwT2/hWNyWc/4vuSkp1ui4F4zqyLwS/Evs5ysOC7rt4",
	"WA1Aq31pMCXNoO8PkqcfPj6YPjj49G/vj5L/dn8+efRp5PKf1+PuwUC0YVpJCTzdJisJFE/LmvI+Pt45",
	"elBrUeUZWdML3HxaIKt3fYnpa1nnBc0rQycsleIoXwlFqCOjDJa0yjXxE5OK54ZNmdEctROmSCnFBcsg",
	"mxrue7lm6ZqkVNkhsB25ZHluaLBSkA3RWnx1Ow7TpxAlBq5r4QMX9M+LjGZdezABG+QGSZoLBYkWe64n",
	"f+NQnpHwQmnuKnW1y4qcroHg5OaDvWwRd9zQdJ5vicZ9zQhVhBJ/NU0JW5KtqMglbk7OzrG/W43BWkEM",
	"0nBzWveoObxD6OshI4K8hRA5UI7I8+eujzK+ZKtKgiKXa9Brd+dJUKXgCohY/ANSbbb9v05+eEOEJK9B",
	"KbqCtzQ9J8BTkQ3vsZs0doP/Qwmz4YValTQ9j1/XOStYBOTXdMOKqiC8KhYgzX75+0ELIkFXkg8BZEfc",
	"Q2cF3fQnPZUVT3Fzm2lbgpohJabKnG5n5HhJCrr59mDqwFGE5jkpgWeMr4je8EEhzcy9H7xEiopnI2QY",
	"bTYsuDVVCSlbMshIPcoOSNw0++Bh/GrwNJJVAI4fZBCcepY94HDYRGjGHF3zhZR0BQHJzMiPjnPhVy3O",
	"gdcMjiy2+KmUcMFEpepOAzDi1LvFay40JKWEJYvQ2IlDh+Eeto1jr4UTcFLBNWUcMsN5EWihwXKiQZiC",
	"CXcrM/0rekEVfPN46AJvvo7c/aXo7vrOHR+129gosUcyci+ar+7AxsWmVv8Ryl84t2KrxP7c20i2OjVX",
	"yZLleM38w+yfR0OlkAm0EOEvHsVWnOpKwuEZv2/+Igk50ZRnVGbml8L+9LrKNTthK/NTbn96JVYsPWGr",
	"AWTWsEa1KexW2H/MeHF2rDdRpeGVEOdVGS4obWmliy05fjG0yXbMqxLmUa3KhlrF6cZrGlftoTf1Rg4A",
	"OYi7kpqG57CVYKCl6RL/2SyRnuhS/mb+Kcvc9NblMoZaQ8fuvkXbgLMZHJVlzlJqkPjOfTZfDRMAqyXQ",
	"psUcL9TDjwGIpRQlSM3soLQsk1ykNE+UphpH+ncJy8nh5N/mjXFlbrureTD5K9PrBDsZedTKOAktyyuM",
	"8dbINWoHszAMGj8hm7BsDyUixu0mGlJihgXncEG5njX6SIsf1Af4vZupwbcVZSy+O/rVIMKJbbgAZcVb",
	"2/COIgHqCaKVIFpR2lzlYlH/cPeoLBsM4vejsrT4QNEQGEpdsGFKq3u4fNqcpHCe4xcz8n04NsrZgudb",
	"czlYUcPcDUt3a7lbrDYcuTU0I95RBLdTyJnZGo8GI8PfBsWhzrAWuZF69tKKafwX1zYkM/P7qM5/DBIL",
	"cTtMXKhFOcxZBQZ/CTSXux3K6ROOs+XMyFG37/XIxowSJ5hr0crO/bTj7sBjjcJLSUsLoPti71LGUQOz",
	"jSysN+SmIxldFObgDAe0hlBd+6ztPQ9RSJAUOjA8y0V6/heq1rdw5hd+rP7xw2nIGmgGkqypWs8mMSkj",
	"PF7NaGOOmGmI2jtZBFPN6iXe1vL2LC2jmgZLc/DGxRKLeuyHTA9kRHf5Af9Dc2I+m7NtWL8ddkZOkYEp",
	"e5ydByEzqrxVEOxMpgGaGAQprPZOjNZ9JSifN5PH92nUHr20BgO3Q24RuENic+vH4JnYxGB4Jja9IyA2",
	"oG6DPsw4KEZqKNQI+F44yATuv0MflZJu+0jGsccg2SzQiK4KTwMPb3wzS2N5PVoIeT3u02ErnDT2ZELN",
	"qAHznXaQhE2rMnGkGLFJ2QadgRoX3m6m0R0+hrEWFk40/R2woMyot4GF9kC3jQVRlCyHWyD9dZTpL6iC",
	"Rw/JyV+Onjx4+PPDJ98YkiylWElakMVWgyJ3nW5GlN7mcK+/MtSOqlzHR//msbdCtseNjaNEJVMoaNkf",
	"ylo3rQhkmxHTro+1Nppx1TWAYw7nKRhObtFOrOHegPaCKSNhFYtb2YwhhGXNLBlxkGSwl5iuurxmmm24",
	"RLmV1W2osiClkBH7Gh4xLVKRJxcgFRMRV8lb14K4Fl68Lbu/W2jJJVXEzI2m34qjQBGhLL3h4/m+Hfp0",
	"wxvc7OT8dr2R1bl5x+xLG/nekqhICTLRG04yWFSrlia0lKIglGTYEe/oV2y11oHI8lYKsbz1Wzs6S2xJ",
	"+MEKfLnp0xf73ogMjNpdqVtg781gDfYM5YQ4owtRaUIJFxmgjl6pOOMfcPSihwkdYzq8S/TaynALMPpg",
	"Siuz2qok6Pbp0WLTMaGppaIEUaMG7OK1Q8O2stNZJ2IugWZGTwROxMIZn51ZHBdJ0WelPet0105Ec27B",
<<<<<<< HEAD
	"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",
=======
	"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",
	"Cjn3ciPIAAA=",
>>>>>>> master
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
