// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
