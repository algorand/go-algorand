// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address basics.Address, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithOptions("simple", "txid", ctx.Param("txid"), &txid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9e3fbNpM4/FXwavecNF5RdtKk+zTv6dnXbXrxNmlyYrd7ifO2EDmS8JgC+ACgLs3P",
	"3/13MABIkAQlylaSdrd/JRZxGQwGg8Fc349SsSwEB67V6Nn7UUElXYIGiX/RLJOg8L8ZqFSyQjPBR89G",
	"55zQNBUl16QopzlLyQ1sJ6PxiJmvBdWL0XjE6RJGz6pBxiMJ/yiZhGz0TMsSxiOVLmBJ7bRagzR9354n",
	"/32WfPnu/dO/3Y7GI70tzBhKS8bno/Fok8xF4n6cUsVSNTl349/u+0qLImcpNUtIWBZfVN2EsAy4ZjMG",
	"sm9hzfF2rW/JOFuWy9Gzs2pJjGuYg+xZU1Fc8Aw2fYsKPlOlQPeux3wcsBI/xlHXYAbduYpGg5TqdFEI",
	"xnVkJQS/Evs5uoSg+65FzIRcUt1uH5Af0t6j8aOz23+qSPHR+OnncWKk+VxIyrOkGvebalxyadvdHtDQ",
	"f20j4BvBZ2xeSlBkvQC9AEn0AogEVQiugIjp3yHVhCny75evfiJCkpegFJ3Da5reEOCpyCCbkIsZ4UKT",
	"QooVyyAbkwxmtMy1Ilpgz4o+/lGC3NbYdXCFmARuaOHt6O9K8NF4tFTzgqY3o3dtNN3ejkc5W7LIql7S",
	"jaEowsvlFCQRM7MgD44EXUreB5AdMYRnJ0mWjOsvnrTpsP51STdd8K5kyVOqIQsA1JJyRVPTAqHMmCpy",
	"ukXULunmq7OxA1wRmuekAJ4xPid6w1XfUszcR1sIh00E0VcLIOYLKegcAjxPyM8KkJLwqxY3wCvqINMt",
	"fiokrJgoVdWpZx04dWQhAR1IUfIYoyL4waG5h0fZvsdkUG9wxNvd3xSbu09tqC/Z/GpbAJmx3NyX5O+l",
	"0hUBlwq3fQFEFZAa3psRM4xBvmJzTnUp4dk1PzF/kYRcasozKjPzy9L+9LLMNbtkc/NTbn96IeYsvWTz",
	"nh2oYI2dU4XdlvYfM178qOpN9C55IcRNWYQLSsOzYGjl4nkfZdgx+0kjziDPK7kB98eNdbW5eN7HUnf3",
	"0JtqI3uA7MVdQU3DG9hKMNDSdIb/bGZIWnQmfx9Z8cL01sUshlpD/o5do0B1buWn81qIeOM+m6+p4Brs",
	"VRiIGafIbJ+9DyUnKQqQmtlBaVEkuUhpnihNNY70zxJmo2ejfzqtBb1T212dBpO/ML0usZO5jCUYxpfQ",
	"ojhgjNdGeERRq+egGz5kj/pMSLJesHRB9IIpwrjdRJS7DKfJYUW5nowOOsm3IXd464Cot8JeknYrWgyo",
	"dy+IbTgFhbTvhN4HqiEpIsYJYpxQnpF5LqbVD5+dF0WNXPx+XhQWVWPCZgQY3uewYUqrh4gZWh+ycJ6L",
	"5xPyfTj2muU5ETzfkim4ewcyM6bl246POwHcIBbXUI/4QBHcaSEnZtc8GoxcdgxiRKlyIXJzBe4lI9P4",
	"B9c2pEDz+6DOf3rqC9HeT3co0TukIjXZX+qHG/msRVRdmsIehprO233vRlFmlB20pC5qBB+brvAXpmGp",
	"9hJJAFFAaG57qJR06yWoBCWhLgX9rMAST0HnjCO0YyOQc7KkN3Y/BOLdEAKoStK2ZGbFqzXTi1rkqlA/",
	"6bwv/tyEHNtzYjacMiMbk5wpbYQh3ExFFpCjwEkrxUJIRXcimgG0sGMRFcxrSQtL5u6LleMYJ7R6f1lY",
	"73mTD7xkozCHaosa7wjVnZn5XoYbhcQqHJowfJ2L9OYHqhZHOPxTP1b3WOA0ZAE0A0kWVC0iZ6pF2/Vo",
	"Q+jbNESaJdNgqkm1xBdiro6wxFwcwtWK4hua52bqLjdrrRYHHnSQ85yYxgSWTJsHMON4AuZsBdyyngn5",
	"lqYLI0yQlOb5uNZLiCLJYQU5EZIwzkGOiV5QXR9+HNk/lPAcKTB8UAMJVuN0GhNytQAJMyHxoSqBLCle",
	"TkvzPCryZp+KuSq6hJbshJelKLWBMXi5XDz3q4MVcORJ1dAIfrVGfPCHg0/M3O4TzsyFXRyVgIoWxtO8",
	"zGr8VfyiAbRpXV+1vJ5CyAwVPVSb35gkqZB2CHv5u8nNf4DKurOlzs8KCYkbQtIVSEVzs7rWoh5W5Hus",
	"07nnZGZU0+BkOiqMv+gs58B+KBSCjGg3XuF/aE7MZyPgGEqqqYehnIIyTbUfeGcbVNmZTAPDt7QgS6s3",
	"IwVNbw6C8pt68jibGXTyvrWqOreFbhHVDl1tWKaOtU04WN9eNU+I1fl4dtQRU3YynWCuIQi4EgWx7KMF",
	"guUUOJpFiNgc/Vr7WmxiMH0tNp0rTWzgKDthxhnM7BG+v0TWvSKrxer4ANEV9xPv9oYRyKyoVtSfT4W8",
	"myzVMczU5gdCzaiBKDlukQg2LYvEcaaIccA2aA1EKuXabhGoPXwMWw0sXGr6AbCgzKjHwEJzoGNjQSwL",
	"lsMRDv4iKsJOqYLPH5PLH86fPnr86+OnXxiSLKSYS7ok060GRT5zWk6i9DaHh9EziLJVfPQvnnhzUHPc",
	"2DhKlDKFJS26Q1kzk1UL2GbEtOtirYlmXHUF4KD7AMzFbtFO3th+t+PRc5iW80vQmvG5ei3F7Oh3QWeG",
	"GHTY6HUhjVilmiY5JyueZqbJKWy0pKcFtgSeWcOjWQdT5gW8nB6FqPo2PqtnyYjDaAZ7D8Wh21RPsw23",
	"Sm5leQy9D0gpZFQAKaTQIhV5YqRcJiLX4GvXgrgWfruK9u8WWrKmipi50fxX8qznttMbPvz2tkNfbXiN",
	"m52Sk11vZHVu3iH70kR+/QYrQCZ6wwlSZ+MSnkmxJJRk2BElre9BW+mTLeFS02XxajY7joZY4EARaYEt",
	"QZmZiG1hZD8FqeCZ2isYeFtoC5luqiE4a2PLW/J0P1QOTZdbnqJEcoyz3C9IOUMnUVueBlKVgTGHbN6g",
	"1Q+q8OvDlIXigYpAajD1Aj+jPeQ55Jp+J+RVLex/L0VZHJ2dt+ccuhzqFuMsLpnp6/XpjM9zaLxT5gb2",
	"SWyNn2RB31QqF7sGhB6J9QWbL3Twun4txQe4Q6OzxADFD1a1lps+XQXbTyIzzEeX6giiZz1YzREN3YZ8",
	"kE5FqQklXGSAm1+quFDa47NkDmpaSglch3IuanOYIlMw1JXS0qy2LIgWsful7pjQ1J7QBFGjepw8KkcV",
	"28pOt6ArIDSXQLMtmQJwIqZm0bWPBy6SKvO2016scyLxUH7bALaQIgWlIEucNn8vvL6dvX/0DuThanAV",
	"1SxECTKj8sOs4Ga1F/gb2CYrmpdGPP/xF/Xwj7IILTTN92wBtoltRFt52V3KPWDaRcRtiEJStrpSexKM",
	"iG2YTg4a+pB9f+z1bn8bzA4RfCAErkCiP9EHPVp+kg9AlBX8H/hgfZAllEVixMBe9YORXM1+c8qFlw33",
	"zFBNkFOlk31XimnU0JuYpQZcPHaL4MA98uQLqjSKgYTxDLXX9irEeaxsaaYYHehSh1P2vsbMpL/4h1h3",
	"2tRc71yVqnqVqbIohNSQxZaH6s/euX6CTTWXmAVjV08/LUipYN/IfQgMxnd4dIoA/IPqStnp1KfdxaHP",
	"hRFftodiuQFfjaNdMF76VgHiQ5fiHhiZqvfAkhtTLXqbCpEDRZWp0qIoDIfSScmrfn0YvLStz/XPddsu",
	"SVojmJVUMgEKDWyuvYN8bZGu0NK3oIo4OLyqGxVe1kGwC7M51oliPIVk13nBR7BpFR6cOx33sphLmkGS",
	"QU63EcW9/Uzs5wMJw4+NBFLrD4SGZIq21DiN1GfCe9vebVaBU6mY4E3wC0nNOTfPqJrUXO+7T5oBThvj",
	"m45YH1SzIBhROvDjIbIsPUVGxLt/JbQhK0d0uBp3K91zLT3Yq2b9IAjEcZNaEdCe/b9AubkrAeyo829B",
	"9S28nvpYy+5R/+Pd3rgwW1dZ67aJXhG9fHkPY+zjQT22iNdUapayAp+rP8L26K/39gRRTxGSgaYsh4wE",
	"H+xLvgj7E+uE3R7zbq/5QerWLvgdfWtkOd4vrQn8DWxRbfLaxnME2qpjqCMio5oLl3KCgPqYAfPiCZvA",
	"hqY63xrBVi9gS9Yggahyan12uiY0LYokHCAeMdY/o3NHiDoD7PSPuMShguXFjNj2tbUbvqvWk6uBDvfK",
	"KoTII/rP9onvICMKwSBnKVIIs+uM5vmW6CpoyFNSA0h3QaAvSiXPPFANNOMKyH+JkqSU4wu31FAJaUKi",
	"5IPCspnBiJvVnM5Rt8YQ5LAE+5rHLycn7YWfnLg9Z4rMYG0djjg2bKPj5ARVca+F0o3DdQRttzluF5FL",
	"B22V5pJ1r7Y2T9nv4udGHrKTr1uDVwZOc6aUcoRrln9vBtA6mZshaw9pZJh7I447yHzXdIjrrBv3/ZIt",
	"y5zqYxgqYUXzRKxASpbBXk7uJmaCf7ui+auq2+14BBtIDY2mkKQYIzlwLLgyfWxYpRmHcWYOsA2bGQoQ",
	"XNhel7bTnpd27QLDlkvIGNWQb0khIQUbI2ikVFUtdUJswEi6oHyOLyApyrnzmrHjIMMvldWEyZJ3hjhU",
	"FNMbnqAJQ0WD9NBs6WNNjRAG1Lxs2/YP+1hb0woUexkNurSD7Wnbg6Im0/Go9+Fv8L2qH/4Wb82A2bsa",
	"ExvyYYC0GpqB1jPEp5GVukgMt9EcPkMMH8ZKUw8dg7I7ceASX3/s84q/LIsi3x5BSLIDEQmFBIVXWqgG",
	"VParmJGXLJXiPJ+L6s5TW6Vh2TXe2K6/9hzXN3d5AQueMw7JUnCIPOlf4deX+HGw2tFewz0jokB00IDt",
	"h08DCa0FNCcfQtL33SQkmfbZb1s61XdCHsvKbgcc/KYYYLne69bhpryrfZ3mecQkbdUPHS6ixpXzJpOE",
	"KiVShoLiRabGzvfeWrGtU38L/a+rwLAjHOD2uC3baxCEZhX5kBeEkjRnqOYXXGlZpvqaU9T0BUuNOAt6",
	"5UC/Wvgb3ySuh46oid1Q15yio2il/4s6Bs0goof6DsBrh1U5n4PSrQfWDOCau1aMk5IzjXMtzXFJ7Hkp",
	"QKLH3sS2XNItmRma0IL8DlKQaambT45lqTRRmuW5MwSbaYiYXXOqSQ5UafKS8asNDuf9SPyR5aDXQt5U",
	"WJgMZ1xz4KCYSuKejt/brxhS43CycOE1GGliP3t/7zozxsisvZGy4///7N+evT1P/psmv58lX/7L6bv3",
	"T24fnnR+fHz71Vf/p/nT57dfPfy3f45tn4c9FgrvIL947t7oF8/xIRZEybRh/yMYZJaMJ1GiDB2KWrRI",
	"PsNsIY7gHjb1fnoB11xvuCG8Fc1ZZnjR0cinfU11DrQ9Yi0qa2xcS43nEXDgc+gerIpEOFWLv34Qea49",
	"wU6Hm3DLWxEWjjOqowPoBo7B1Z4z5lb74Ptvr8ipIwT1AInFDR0kVoi8YFz8ZsPLx+xSGNZ2za/5c5jh",
	"e1DwZ9c8o5qe2tN0WiqQX9Oc8hQmc0Ge+ZDQ51TTa965hnrTZwUh3UH+rBinoMv4Wq6v39J8Lq6v33X8",
	"ELqylZsq5KLunHXVZH7KxMgNotSJS2GTSFhTGbOF+AQnLhYce++Ew8okorRKLJ8ix40/GQplUah2qosu",
	"iooiNygKSFW5bA1mW4nSogqbM8zcRR4bGvhJOKcSSdf+yVsqUOS3JS3eMq7fkeS6PDv7HAMQ6wQPvzke",
	"aOh2W8Dgh29vKo72excXbuVydCpPCjqP2Uyur99qoAVSCAocS3xp5jnBbo3gSB8JgEPVC6gisQ/YEgvZ",
	"wVHNuNxL28snNYsvCj/hpjYjx++1g0FOgDtv4J68ArTUi8RwhOiqlDkGfq98egU6N1eO9yBQbI4PALUQ",
	"pVkykHQB6Y3L6wXLQm/Hje7e0cXdxZ7hMIU6IxcaOWMGfynlZsCyyKgTZCjfthP8KBsMgYO+gRvYXgnb",
	"fTIwN1qQiy9IMKP6ji7SbnDXGvIND7Ibo735zu/KR8i6ZCwYderJ4llFF75P/9G2AsARjnWMKBpZTvoQ",
	"QWUEEZb4e1Bwh4Wa8e5F+rHlMZ4C12wFCeRszqZ5hE3/R9eu4WE1VCkhBbbyMc3VgIqwGTGvo6m9jt2L",
	"SVI+B3Opm4tYKJqj0/4kauhH6XABVOopUL1TX8vDiEUPHQrkawwZR6XJ2CwBNma/mUYlCIe1eeDh29u2",
	"cY7EQzkqgmiXAtkdIfTd68jwobMbidmhN5K7z9/u1Q5UrwPnjRbSIkJqvy8NxuZSrM3eGbiET1OJyWyC",
	"W6lUdA5DgW0Yhgam/2jYe3CQfbJOVLoRs7YQ05EoBi7Cdk8MXqK8AMwXwwxQ6d9yaPRzW4OhsyG84vnW",
	"I3Wao/hcuYNaiqGyYVXj88OAjTMtkLwWTT1gTayFB31BlT/o2Tjg33eUDT9NDPKuXIEXga8d1d1MgP5S",
	"bjPysdXeTIEIbnr4jIE+TaDPDTgaH5TnbzxyAQ2xvRMcZeYMcphbnNjGns7qXFT1bho4Xs1myOKSmNte",
	"oHoM5BA3B5hn1wkhVj9OBo8QOwUB2GhHx4HJTyI87Hx+CJDc5dKifmy8qYK/IR4aaH3vjUwsCnPHsx4b",
	"VepZikvlUQs4LYdmHIYwPiaGk65objipCzOtB+nkpcOXTisLnfPkeNj3Ahp40NwaURY5aJVWernL+kIx",
	"2y8j/gY4aA1TsUlsHHT0ITXdTM2ZiEYnYFR27PDaLIEPFJmKDXoQ4Q1n3dkPhq4fMg9Y4PSxYQqpHPv1",
	"CYkWvMMA2S22x6hZIek5LVpFdn1y692A6RGe+8jusyBd4JFAaqkr65TnTn+zV6vSlLa6kkh93Y6rTLhV",
	"UFqM1fQdzuhO9mC0qypt5vX7oU7t2J8Izp/Vj5LQsKuCu08OStu5sHklD0lB2SaHBhA7sPq6LcRG0dp0",
	"U2riNcBajCUZRt81bXXRpiAHfPcnDbk6uYkZoa+v3ypAmeHSdwu0mrh7lG8fBr5vEuZMaahNCd6l5eNb",
	"elB5aN5YYta/Ol3ImVnfGyEqQcMaX7FjY5kffQXoqD5jUukE7TDRJZhG3ynUm31nmsYF4aZ3HVPWsHOw",
	"HIwQ3cA2yVhexknZgfTjcwPRT9XNpcopXpSMW9+iKab9j7rjHmCJRHisG/dOBL2wCHpBPwZ+hh0s09TA",
	"JA3lNaf/kxyxFi/cxVkitBwjpu6G9qJ0B68NIue7jDYQogMni8kuC0/nXGZ+7L2+Vz5+v0+IsCNF1xJk",
	"f4yHC4r5HDKf1c6FgNocVy53YC74vM7wZX7fkSpxQmzGQkw4uCNXoXNGhz5X9EbpFKwAEoU+fMwg5HUs",
	"HeZZxEnmwG2eltHhtVXyKOJCN3hsEehBPy5v7zjJRx2Fr1rOwbUHr93DarNxe3KgmXtWKfDr231ou9vl",
	"UDfuczFupMPdfcBwQKQ4plUgwHSIpodz06Jg2aZl5rOjTu5AEgPFvW7W+xbOkC25wfbgp+lGvKcu0QNz",
	"O2J7Z9o4xWf+qXlkWu9l539rzgZNXW6BrJRoO2r4BndrB1QPzYFr//GXSy0knYOz/yUWpHsNgcs5BA1B",
	"+n1FNLPu0BmbzSC0e6m72GwawHWsG9kAwu4hwa5xrHpb7qTPLpHtoa16BfsRGqenCKX0eVhcda2P/uER",
	"6NaqyybYuDuYEKPpA36EbfILzUvzEmJS1Z6ozhzYvNYPoInV8kfY4sh7HTwNYHt2BVVxbwApNGZdqT6p",
	"ICP6A9WoNIFv4MYWHrBT5/FdOtLWuLIh/UejvqEatTOaS/lwx6Z2iDGQDtmry7iPiTlb0NyWNqHv2yKW",
	"7Zd9gidIOBVDX42hSrMql8Ze/zGguSd2XODodjy6n0dH7G50I+7B/uvqOo5iHv0trYW/4dZ14CbQopBi",
	"RfPEecL0CRpSrJyggc2948xHflPFT8LVt+cvXjvwb8ejNAcqk0q90bsqbFf8aVZlS4zsvnpsunmnz7Xq",
	"r2Dzq5Tgoa/MGlPLtzRonVo+tWdUcDid78ws7gu+l1c6Jy67xB3OXFBUvly1Fdq6cjXdt+iKstwbez20",
	"Q5mEXe6w6lFRPhEOcG83sMC/795j9UYCXF+/XXnM1jYU6wpVpfyPeMupO/oyd3hN/KzWtL6HQ+I6X2Gu",
	"0vhbi7tMpsgYnUsZPbrs952QjcvJxS1GXdI+nFBoHhAWj3FD/JWzvHdEwQmxYuNv898Mbzg5CQ/+ycmY",
	"/Ja7DwGA+PvU/Y5vp5OTqDE4qt4zLAu1d5wu4WEV+dC7ER9X9cBhPUxcOF8tK7lY9JNhRaHWt8yje+2w",
	"t5bM4TNzv2SQg/lpMkQ9EW66RXcIzJATdNkXd1i5Ny9tuVJFBG9H2WMcrCEtvHpchRJrW+8eIV4u0dac",
	"qJylcUcfPlWGJXHrtGsaE2w82G5s5ihZj+c4L1kwummm7mTmbC0kmDWKcBXN9VvjdyocCyg5+0cJQdli",
	"vIlbl7N//uCoHaE6rlN0A7erIo/uUtD4/mZBr0nbpSTaaWZ9Xpn+PCJidbQOjGgIZ+ww/x3RCI6i/PWJ",
	"oWsL5xy8l7J2vu12F7l2pl/PPp2VtV/z58p92s18PmSnmUpmUvwOcdkBDYOR5Bzeos1Q6f478JgXapuR",
	"Vd4CdUHuevZ9BDJcn9BHKvfWH/hFV1UB73KFx/nEYRt9oKIg2O9+VYGKJxB3m9D3UA2dTZqhMj3MDA9s",
	"4PiNxVq8ixvl9oTazBWN2LL4OQ9DQU/t+PU5dzB3wmdzup7SWCEn8140MAXb33DG04L4zn6DVJV8wc5O",
	"gmiFqi2z6fwKkLXFqJsM+Y5vPzvt4Fdf/chDigufd2Prn5IrERmm5GvK0XcQ+1kO6HorsL4XptdaSEzh",
	"qeJ+gxmkbBlVgF9fv83SrrdXxubMlkwvFRA60y6ToxvIFs23VOSqlVfZRhxqLmbkbFyfWb8bGVsxxaY5",
	"YItHtsWUKrygKz+IqotZHnC9UNj88YDmi5JnEjK9UBaxSpDqfY6iZ+X9OgW9BuDkDNs9+pJ8hk7Ciq3g",
	"YfyCccLa6NmjL8e7KoMjxrEI/i4mnyGX96EKccpGT2o7hmGrbtR47MFMAvwO/ffJjvNluw45XdjSXUH7",
	"T9eScmoQEoNpuQcm2xf3F903Wnjh1iIDSkuxJUzH5wdNDcfqiRc3DNGCQVKxXDK9dN6hSiwNhdVl1u2k",
	"fjisH+jLvHm4/Ed0uy4ib/xP8Nyiy54YRvSk/wlt7CFax4TanKw5q2MufAVecuFzT2Pdu6rcncWNmcss",
	"HeVVDMGYkUIyrlFrVOpZ8jfzfJc0NQxx0gduMv3iSaR+XLPIED8M8I+OdwkK5CqOetlD9l7KcX3JZ1zw",
	"ZGk4SvawTtoQnMpe//C4T2+fq3HP0PeWrs24SS8Blg0CpAE3vxcp8h0D3pM4q/UcRKEHr+yj02op4wRD",
	"S7NDP7954SSRpZCxWhY1A3BSiQQtGawwgjS+SWbMe+6FzAftwn2g/7QebV4sDUQ3f7qjj4XAkhx5p1WJ",
	"k4yk/8vLOgM+GrRtZG5LeylkRE/rNI4f2RX1MH1h225uXQDxWw/mBqMNR+lipSfEw8ZwVH0+hY9XGyS7",
	"5w1V6aPfiDTveJT1T04Q6JOTsROVf3vc/GzZ+8nJcDfZuL7Q/BpBzd3umnZ+StM3ttVfi4j27muxscza",
	"+4q5ZCQRDWv0LjNX6tSNMSbNYogfX+44Toziwa7H8QPkUYOf27j5xPwVN3MXX8BKwINUX7jGTpHXqDvA",
	"Xv+VYG/MqFPIhXmOhXWcBvscxum1dUN60v20u2FQ4wCO7kXJ8uyX2tTaYr+S8nQR9Zaemo6/Wlk3aBA8",
	"09MF5RzyaG/7JPzVPx0jj9u/i55hl4zHP7VrClvYW5DWYDWB8FP68Q2umM7NBCGKmnmlqkwd+VxkBOep",
	"C3DU579bljxWEDUSvI7DLkvt3G0xGYCrizFjOfqHxo2+2DKRVPewDqzd7ys1mXGwlL6yb287OkhC2RLv",
	"JkWXRQ54CFcg6Ry7Cg6t7ph4DEcOqmsQVZhP2BJzmAiiS8mJmM2CZQDXTEK+HZOCKmUHOTPLgg3OPXr2",
	"6OzsbGAWBIOvAWu3ePULf1Uv7tEpNrFfXAErm/f/IPDvAv1tTXWHbH6XuFwVUawQHmOxtnQ4qlTQDGou",
	"L1tBtKp2OyHfY5otQ+iNTPeo+fOJgpupLcsiFzQbY27jq2/PXxA7q+0jAVGHFUznqOZqHpGoJWN4qk+f",
	"RqwnBdPwcXZngDGrVjqpaovGEgKaFnVJVNZy8UEFWIidCXludY+V94qdhGCGbLmELChlat+6SBzmP1rT",
	"dIFKvclop960p6jN8Eq8ngPWNpEgoLOq+4Qc3CzDFeO1tXjHBGvWr5kCTKgAK2jmHaySdjqts89D2Fyt",
	"LDm3hHNIKfuqytOhu+CBs/KddyKIQtbah3sbuOoUFVir+9CaxZfYKx6Q0iqA3DLu28oPG187YkJeOo1+",
	"SrngLMWaCTE5EzMKDrMdDigvETfqqZE7y5FjGC27XEVeOyz2FmL2LNMhrmu5D76a/baEY//UsHG17Oag",
	"leOBkI19FXRnhWJcgavjZegr5KhCRvybovEelZ/EEX2txyNMCtajUPzOfPvJKaAxGcoN46hYckh1zx1r",
	"RcoVQ2MyJ0yTuQDlVtsMeFJvTZ/J1YYjCO8mL8ScpZdsjmNYfzuDFOvq2h3q3Du+OkdT0/Yb09al4K9+",
	"bviN2Un9ut9N+ivoR0VSveG96I85OHlvkQC51fjhaDuIcacPO97Lhgxhhe5tUOB93iGbqgp7c5RvzfvM",
	"0hu2IDYkNZr9lvEIGC8Y91bNeIKnNHqX4Mbgae7pp1JJtX10DOJ4V0DznjgPjBa3ZvH7DtUuKGBQgmv0",
	"c/RvY11AvoetVA3q1wXlW+IPhaHuQCj5huaVx3ekHDxKZ04Ysx6xrQLxMbZi2HriY04b6Nob4Vh1x6Ie",
	"h95TfUkzp2U2B53QLIvlUfsavxL86iPlYANpWdWyqgIom1nHu9TmJkoFV+Vyx1y+wT2ny5iiSsFymkf8",
	"S59XHyGrdhgzLE23+G+skFP/zjjP7oPDmr0bd3ZYqv1umHZMejY0nSg2T4ZjAu+U+6OjnvpuhF73Pyql",
	"+4jmP0TAcovLhXsU42/fmosjzDbdcWS3V0uVDBqdxgV+94muqoSkTa6EV1mnXBm6HeDmRbasBbxvGAV8",
	"RfOeVAKhacLer1Zd35dQIO3Nl0G1S8umKal5whAVRn9iK+tm3DJ/dG14fY7E1o/4Q1oIHD52Ir3fnPZj",
	"w3hmXbtqhtJrNLubXasmgkMNW66iQFdfSvNcpIM5gxvm3HTqzzgrlkuXwD3ierZaiiw8C6HLEkCcsVmv",
	"3Ej8AD5so9/waRX9Itfx0Rr6kYpohqbjQjS6JYxt9KEHzwNjpw4nClS2DrPkO5ZjjaN/v3z106h/I4Md",
	"6G6pywAdVWH3bUwVjtUmj7lo4GMHDxA8j+u/VY9KHZMexU+DK7Ib/fCdVRAOAckmADqk9Yuhg3cIYC5s",
	"caNY+Ydu2pVRvR0e+QE11NtrOUpIHTGqaBcNirx9rNKzbkKqepqD6ms2ZKQhNYpi5XDcS8FrYO1F4xKt",
	"2RpBnfJCHQb6fIhw2MHH7Xh0kR0kPsVKKo3sKDEG+4LNF/rrXKQ3PwDNQNqyGLHnpC2KsQTzDFULVuD7",
	"pxCK1WVtczOYy0e9wOEmQ+NPrhbg0p346PfOWN5LeAWpxjLHta+jBBhuzC/iSzQQeIMiNvkE/g4SIINC",
	"L3YKS9aDudCLuvoluPAqpsgUnOliBXxM2AQm7YisrM52RHKgM6+ElULoAeVhq9gcRGMIdIy+OqWGd4uB",
	"nWRmQa4+WxF2MryWyHnl+G6jCddU1SmRfH6AQ2OSZzNIMW/7zrxy/7EAHiQaG3vVHcIyC9LMsSomDisP",
	"HFWjXcO6K8PbTlCD0kofEtK+TA83sH2gSIOGooVtqzDSu6Q2R+RYO67Pjd9n2nDef0xV9IQI8s7eLqF8",
	"XSroQBcUhCRIu3hHMDyNm+upTsV4N2i8RHMHMEzXyb1qz9d53lAw7Utb1y0S3v9Sfo412ZXznKRVHvVQ",
	"n0QuulWF1y4PO2YQrKyFPiM7KP+bzzxqZ8nZjSu0ggizttk1lZlvcZT8b/beZHGgZ9XMrI7+6Xr5HOqX",
	"Y8Pw0lwYASjpi35shuNUfqoPlHUorrNxIdQzkBKyyiaYCwWJFj6W6ICsli5GcAf2rCv1nfDWcls/IC7W",
	"rqi3OMCbukICVjWkWAyAOg/rECtEwpIa6GVQtSCuBt23Q9/Y7z5xhq9St1u92of36lzsL/Ts48uY6mA+",
	"PF0z4oSDg7lXI9vGHTSzjHOQiTfitmsW8Gb+R0wYnJWpFVXCs1lprwfn09rBzaJKzbS7ytYTKkg9cQPb",
	"U6v28cWz/Y6HQFsZ0oIeZEpuEcVRddUqBvf8KOB92ryUhRB50mMZvOgWWmgfhhuW3gBmHK3CL4wU/KB5",
	"bMwk5DM0SFU+I+vF1pcRKArgkD2cEHLObQicdx9pFtJsTc4f6F3zb3DWrLSlU5wGenLN47FEWMJE3pP7",
	"+WF28Lw+3qTA8Mt7zm8HucPsesP7fOTWWOukWe52MlS90fXvaIlQAflZKGIC1KU1BH+DLCFW3x5TkAS5",
	"ctA/gBJnQCYqFzFX87ukSTFDxTEVToYAaeADnqs1FG7wKAKck92edKPus0+oKWZEQu2bcdfMoi5Zp2Xi",
	"qk810p65mqXJGWdCQjgj+pnaDMRV+BYm8MX/TJmWVG7vkv+ziaqYGqoXy3u9JStHyXohtbNkF4d5LtYJ",
	"srWkKhsUUweYdqp5bftym3U/c9SnELhdUuVExC1Z0IykQkpIwx7xOGYL1VJISHKBXpgxx46ZNo+EJQYv",
	"cpKLORFFKjKwFb7iFNQ3V8k5RdkLAle2KAos7WBcvO0T0PHAKc3ta82zCcpreytI+M2/Mn1sjoY6x5td",
	"dGJdBHriC0C5nG4OQ7ZxF14kHJt2qK2UjYvIM7ZBugEZO/IzomUJY+JatIvJu4NPJZAlU8qCUtHSmuU5",
	"pkhgm8ChofIHiqO2R3a+QD/oFUOHt2a6DCtSF+Z2rHKMhDzgMkw7RvRCinK+CBLfV3D6p7ss3cM+HOVn",
	"VaJPIsZBmimekKVQ2j2L7Uj1kmsX0M9SwbUUed5U5Fk5f+6Mvi/p5jxN9QshbqY0vXmIj3AudLXSbOzz",
	"BrR9d+uZZCvR4LCXgt7wBMlD7c8fbtuhV6uj58G8s8X9OoaHfZr8AMx3+5nrfrvGeXdh7XU1+Wz8LXTO",
	"CdViydL4cftzeb/2+qzGuFc0naAtpmtTrWAz5APhPVa5MyH37KIZOI1WAz0njkc4tw7kROa/KMa3xyUz",
	"cDyo5w7t8h0nYCVprxjYAgAhtdH+upS2Am8opFUMR8xtdhB0SmkDOvDCQd+/+8FmRjg6UBruBVTHG7kC",
	"8DOrwRjbtI/Ws3kqNv77wzov5J2Av91N5Q3m0edUeVmTlrRulT5bUw9HiGfW3+mBeIWZHqZD/RCriuoD",
	"L/8AgH7PxAYMg/wTDwVjRlkOWRIrtntR6cDGwXPdxVgGo/tChZaTp7T0lW3N2KUElz3ISv+yaU4sqCEl",
	"UTXvasR5BhuwMVq/gxS2QO04MGdBbuvXtjQKokhyWEHDYdOlNCpRCmUr8H1V1ZlkAAVafNuKtpgnYlj+",
	"rqV9cWtPAl+2IdiNqmMsYu1OkT26lqhmaMMTe0zU0KNkIFqxrKQN/KlDRY6mLtEc5QiqOs+HxD8xh07z",
	"sx3hjR/g3PePiTIeE++G8aGDWVAcdbsY0F7P5FL1nXoed0wO83VVhiKcLavs2pbEa76hCrrm/VrNLsnX",
	"L7GB+8QEDxD77QZSlGrcUwgy9xjqsZy4RD9I7Rwgsw8G0yWizV8AJ1wExXzXVFWvmDp1qf/BToyNGHcP",
	"7TvY6Gv/4fvvLMHBiGplFIzX3qzI+n46/k9yEncexN7xYjSiwIXy7lCNeep2zw5sIMo8I9zsp5H9sfit",
	"u8UcFx+TaekHynOxttV5wyfqc/D2XEt93sTkxHJWXcveT3rssuq2tSAsiBBZ0i0REv8xD9J/lDRnsy3y",
	"GQu+70bUghoScgZk60Xh/K7NxLvFq7EHzCtihJ/KrpsNHTMYbmtGCYA2F7mvRybIkt5AuA3oIGL5Z6oN",
	"41TlFJUa5spubWcXC27xPgfRkmahEgCzqW4b3MFn9Ta9/986bDWcyic5LHKa+lrMrqpak89guXZPXHoB",
	"y91hzl2+5kmgKgFfE630aTKyO2hTD2RdsZifvqpPDbA7ta07Ba/utYyBSuFW8Z4dAeKDlnLsXThODGdn",
	"SWEN232LC0v6fpzdiaZB7lvGEPD/QLvScK/oRLbFS4OH67FVwD/CLjQS8URgtWrwqdgkEmZqnyON1YNP",
	"xaYGWFW6W8ZTCVRZv6OLV+7ZWmf5Zdw8o63XbmVWrUbJYMZ4zWoZL0odeQVhsl++DRAWWhMQrT22uT4Z",
	"w4iiK5q/WoGULOvbOHN6bM3bsBKNt6C4vhEFSHUjdwdgqn4BYjx1rZ8Pm5nr31bOs76zSlOeUZmFzRkn",
	"KUgjNZA13aq7m6oqq8M+YxUNZKFmtpDAbIWkbQHJt87afE9DUgUgPaJFaYAlCJ20I1YgqxjSosfw04Xh",
	"T2EJWtJNkos5Rv32HAiXzBlNh/YBKTgq0a10N2zdfh7Ffofd02C9DceItMBZh0yx+9y/wq3ER+jPnOmd",
	"J99qONth2NbT2R5Mj1Q+r8MzLLF0z2Msct4lZgqj572o6tOUeNqDYBOjLtEdrXrPLqJ/hUu7EKrQh1dh",
	"bLpwxOLzrV4hQX2D2hGAAaqOK6Cp8xDrKuI6igqLlLHLbnCgns5q9/291AMeKlKUO+vNaSsHHTPOIaUr",
	"d+czSApRJOkQ31ZbkidzRgYHaRPGHvoITAg96678blRVpKqRE61RrerQ6p291bL22cqKdJfKoE/J1MPR",
	"mwYMMUNehkfYqtYw1qpSxYz949wbu5tKtIpJEEokpKVEJfOabvdXN+xJsX75w/nTR49/ffz0C2IakIzN",
	"QdWJ+1vVAWvXRMbbWqOP64zYWZ6Ob4LPFmIR562XPuyt2hR31iy3VXXG3U5txEO005ELIBac260Dd6e9",
	"wnHqsIg/1nbFFnn0HYuh4MPvmRR5Hi+cUslVEfNLbLcCA4x5gRQgFVPaMMKm/ZTp2ilbLVC5iKmxVzY3",
	"lOApeO2zowKme3y5Ygvp8+lFfoa5GJzNicCmyB2vsnaiXety7zSr30OhEd1tpkAKUTjRns1IDCKM2ZIl",
	"VHp1pzZFfXrgplsxW+uwGyNE5/weJ71z7l7CYkZ2c/tmjWkd5/RmEyPihT+UdyDNPutGf56Ru3CS2jDw",
	"h+EfkcQpR+Ma1XI/BK+Ivg92RIWfd7wmqqQhg0DrJsiIkAcC0BMP3QhaDYLsggTc0toY0Brhzc9t8eNl",
	"bZbeG5mCkPgOe8ALY5nrdlUwhQPnE2evflkhJVjKuz5KaCx/X3i0Z73VRRJskVOaaA3KsiXRFQuDgHj1",
	"TRVn3vMq6YSjSyE0MS/TPI+EsVs9Dp6pkHDMk0CuaP7xucZ3TCp9jviA7E1/4FYYthwi2aJSHT0h5ws6",
	"CKwgRPmjQMVfY2z9f4DZ2ejt6GZxhv/OHYgqIZpbb+9ZZQEHTtY4pnXsevQFmbqaNoWElKm2Q8HaizRV",
	"vC1INnP+tbDR7djfe9fC+UXoexyHmfcHIj8FRrbKc8DBXB/1T8ycejhA9LTESLVDKBH8xXhdWDl8z7Vz",
	"z/ond0vlFCRuPDCVU7cm+tDl4Trw8ioVdNc5+NZv4DZy4ddrG5qrbHAZlevrt3o6JKFYvOSJ6Y45zo5S",
	"++T+lU8+SoIzi0o3hoMkSli1yL0ve03LXzLI09DcRSPu91RJX1j0m9HwUTAruR2vqvKJseKerYvZuPJi",
	"ENx0e0au+QlRC+rfFu7Px0+/GI1HwMulWXz9fTQeua/vYi+1bBONK60T6XR8RF01gQeKFHQ7tFBaf96c",
	"KHLrNEEfX55Rmk3jD7ofzIbhq9VFH1xw5PPIW+z16ZLn/O/N/nNwBrHqrFhirBMDVfuwL0fQL30J8W3S",
	"9546Hy2+W7J8r3tcowTL7Xg0t+nJsC7Jr64U28fdcw9BT6ZAt/T7JACziImstTF5MFWQzm1AKRbXLVIb",
	"A2Ou01Iyvb00+PcKd/brTSwN1PdVYiaX7auyvTupV4sb4N67rE7jVCovV38vaI5yp3UJ4EbaFPmEfGtr",
	"g7gL8asH03+Fz//2JDv7/NG/Tv929vQshSdPvzw7o18+oY++/PwRPP7b0ydn8Gj2xZfTx9njJ4+nTx4/",
	"+eLpl+nnTx5Nn3zx5b8+MJRuQLaA+po/z0b/mZznc5Gcv75IrgywNU5owX4EszeoW5thakJEaoqXKywp",
	"y0fP/E//n78iJ6lY1sP7X0eu3OFooXWhnp2ertfrSdjldI7ZTxItynRx6ufBLJaNl8rriyoiyHr94Y7W",
	"1ibc1Cqzn/n25tvLK3L++mJSE8zo2ehscjZ5hJkUC+C0YKNno8/xJzw9C9z3U8yffapcGZ7TKmj0dtz5",
	"VhS2SI/5NK8SgJq/FkBz5I/mjyVoyVL/SQLNtu7/ak3nc5ATjBWzP60en/pXx+l7l1Hmdte309AP7fR9",
	"Iy1Ptqen96Ta1+T0va9mv3vARqVy5+FqkBp1kfgetEugZ3WVkQxHaJl0o4+Jwoo75qdCMmHO69gIChmg",
	"HxE600qsLKJlyVPrXGKnAI7/fXn+n+hg8/L8P8lX5GzswpsUKkBi09skERWhXWQW7K5XtPp6e17lgKqd",
	"cUbP3saU0s41vSinOUvN+2HiT6ohw+AgVUPWjBJNECN7UaBnQMX2DSs/S7589/7p326jvuhdt7Tan3Pn",
	"145sWeE3yJnUcDARvk454ntJN1/1YXvjQmXMuP8oQW7r5S+puaXrpQ58CUR/jSTL9DGPa1cSPHS3Dhyx",
	"//3y1U9ESOJUeq9pelPFe/rY3zreOQz9NT371uZu73B5XqJ2gaNLNS+aVQQqDcA7rHmMgCLPenx25hm1",
	"U3cEXODUMZdgppZc3KVm9B0MrCfdxB+KwIamOt8SqgLnLXTE9vXJW1G5okgasUE77TXdGd2WRAOrDs09",
	"EimCIzTN98B31arl3ECHe7EU5ibfL4t2kBGFIJroNtxaTyN/7e7/jN3tij6kEOZMMww1qe81f2c2gHQC",
	"b7714PYkYJqQ/xIlCqjm6VFqqFigkMjOqlvZGmrdnC7/XPBEq6Mh8cvJSXvhJye1L/IM1shkKceGbXSc",
	"nEzMTj05kJXtNJ41ahEMOjuHDNfZrJd0U6lQKOGCJxzmVLMVkEA78eTs0Z92hRfcht4Yidy+HG7Ho6d/",
	"4i274EZ4ojnBlnY1n/9pV3MJcsVSIFewLISkkuVb8jOvYpvsywrlky77+5nfcLHmHhHmUVwul1RunaRO",
	"K55T8qAI4U7+08n8VkvzyEXpXKGDHsrBVnD2GW/5fPTu1j80Bj5wdjU7nWI56qFNIXwV9T+BUD+pTt+j",
	"Va/391On5It/RMOrfaGfes1lT0ubfTD+sfH0eq83ZiG7hzNtgvFSqtNFWZy+x//gYztYka38c6o3/BQd",
	"1U/fNxDhPncQ0fy97h62wIIVHjgxmyl8LO76fPre/htMBJsCJDPXESZFdr/aPPinqiyKfNv9ecvT6I/d",
	"dTTSfff8fOp1PbF3e7Pl+8afTZpSi1JnYh3MgvZR6xLQhcx8LFX779M1ZdoISS5fNJ1pkN3OGmh+6moS",
	"tn6tC/10vmD1ouDHllhVCJsyrflsfkPXV43wdmnz/3wtUBvSx3A3yZRx5EIhl6x1n/Zj94nU4Y1YHn2r",
	"a3eTiAyqBZlKQbOUKm3+qAuMNN/ft/d8f7XTFV1EPAYQTNRpdK0jhp9M9lqGcdwhQmawL+TiuZ+wjqn9",
	"4IJZB6KvaUZ8jr2EvKS52XDIyLkT/xvY+NBC1aeXgj6x2PLR5Iyv/eFThGLC0cYDUcbzgAUVeIcIFeYV",
	"aRjAHHjiWFAyFdnW1TodSbrWG5t2qM3cTmnzxmhqO6mkS9X38Qiq0D+2/nOf2vMvleFfKsO/lEp/qQz/",
	"2t2/VIZHVxn+pVD7S6H2v1KhdogWLSaQOkVRv1zKVsBtwE3rhUjrIkMVi2+mTmS6kt4aUfBYz4jpCSFX",
	"mPeKmlsCViBpTlKqrHTlcrQt0c0cEzBC9uyaJw1IrOu2mfiz+r/Wwf66PDv7HMjZw3YfpVmeh7y52xcl",
	"Y/xkw+O+Itej61FnJAlLsYLMuqiFFSZsr73D/j/VuK86pWwwiQcmFvN5GokqZzOWMovyXPA5oXNRx41g",
	"omou8AtIA5x1bCRMj12cHXPJHeyutAphNGX8rgRwUW/hXg+HFrnEfRsM4R3o2PAvMZXHX1L6QGa3K5Xf",
	"fRnpzrE7XPUvrvIxuMon5yt/dnNuoIT8HylmPjl78qddUKiy/klo8p2PeruHOOayJKfRUot3FbR8niuv",
	"GKz9pEO/Y7xFK4/jt+/MRaBArvwFW7vRPjs9xbSJC6H0KSqpmi624cd3Fczv/e1USLYy0NyiHlRINmec",
	"5onzQ01qV9nHk7PR7f8NAAD//+MYiq9aJgEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
