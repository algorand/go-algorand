// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
