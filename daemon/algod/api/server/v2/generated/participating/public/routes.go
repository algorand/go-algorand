// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
