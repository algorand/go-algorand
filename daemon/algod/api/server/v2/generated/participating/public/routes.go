// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Ukq2wuq/7z/+vwAAAP//l0i9xf3fAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
