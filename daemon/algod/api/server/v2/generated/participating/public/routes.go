// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
