// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithOptions("simple", "txid", ctx.Param("txid"), &txid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
