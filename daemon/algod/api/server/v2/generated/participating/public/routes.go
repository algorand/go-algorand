// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9fXPcNpIw/lXwm7sq27qhJL8ku1ZV6n6ynWR1sR2XpWR3z/KTxZA9M1iRAAOAo5n4",
	"8Xd/Cg2ABElwhiMp9ubOf9ka4qXRaDT6Dd0fJqkoSsGBazU5+TApqaQFaJD4F01TUXGdsMz8lYFKJSs1",
	"E3xy4r8RpSXji8l0wsyvJdXLyXTCaQFNG9N/OpHwa8UkZJMTLSuYTlS6hIKagfWmNK3rkdbJQiRuiFM7",
	"xNmLycctH2iWSVCqD+WPPN8QxtO8yoBoSbmiqfmkyDXTS6KXTBHXmTBOBAci5kQvW43JnEGeqUO/yF8r",
	"kJtglW7y4SV9bEBMpMihD+dzUcwYBw8V1EDVG0K0IBnMsdGSamJmMLD6hloQBVSmSzIXcgeoFogQXuBV",
	"MTl5N1HAM5C4WymwFf53LgF+g0RTuQA9eT+NLW6uQSaaFZGlnTnsS1BVrhXBtrjGBVsBJ6bXIXlVKU1m",
	"QCgnb797Th4/fvzULKSgWkPmiGxwVc3s4Zps98nJJKMa/Oc+rdF8ISTlWVK3f/vdc5z/3C1wbCuqFMQP",
	"y6n5Qs5eDC3Ad4yQEOMaFrgPLeo3PSKHovl5BnMhYeSe2MZ3uinh/J91V1Kq02UpGNeRfSH4ldjPUR4W",
	"dN/Gw2oAWu1LgylpBn13nDx9/+Hh9OHxx397d5r8t/vzq8cfRy7/eT3uDgxEG6aVlMDTTbKQQPG0LCnv",
	"4+Otowe1FFWekSVd4ebTAlm960tMX8s6VzSvDJ2wVIrTfCEUoY6MMpjTKtfET0wqnhs2ZUZz1E6YIqUU",
	"K5ZBNjXc93rJ0iVJqbJDYDtyzfLc0GClIBuitfjqthymjyFKDFw3wgcu6F8XGc26dmAC1sgNkjQXChIt",
	"dlxP/sahPCPhhdLcVWq/y4pcLIHg5OaDvWwRd9zQdJ5viMZ9zQhVhBJ/NU0Jm5ONqMg1bk7OrrC/W43B",
	"WkEM0nBzWveoObxD6OshI4K8mRA5UI7I8+eujzI+Z4tKgiLXS9BLd+dJUKXgCoiY/RNSbbb9v85/fE2E",
	"JK9AKbqANzS9IsBTkUF2SM7mhAsdkIajJcSh6Tm0DgdX7JL/pxKGJgq1KGl6Fb/Rc1awyKpe0TUrqoLw",
	"qpiBNFvqrxAtiARdST4EkB1xBykWdN2f9EJWPMX9b6ZtyXKG2pgqc7pBhBV0/c3x1IGjCM1zUgLPGF8Q",
	"veaDcpyZezd4iRQVz0aIOdrsaXCxqhJSNmeQkXqULZC4aXbBw/h+8DTCVwCOH2QQnHqWHeBwWEdoxpxu",
	"84WUdAEByRySnxxzw69aXAGvCZ3MNviplLBiolJ1pwEYcertEjgXGpJSwpxFaOzcocMwGNvGceDCyUCp",
	"4JoyDplhzgi00GCZ1SBMwYTb9Z3+LT6jCr5+MnTHN19H7v5cdHd9646P2m1slNgjGbk6zVd3YOOSVav/",
	"CP0wnFuxRWJ/7m0kW1yY22bOcryJ/mn2z6OhUsgEWojwd5NiC051JeHkkh+Yv0hCzjXlGZWZ+aWwP72q",
	"cs3O2cL8lNufXooFS8/ZYgCZNaxRhQu7FfYfM16cHet1VK94KcRVVYYLSluK62xDzl4MbbIdc1/CPK21",
	"3VDxuFh7ZWTfHnpdb+QAkIO4K6lpeAUbCQZams7xn/Uc6YnO5W/mn7LMTW9dzmOoNXTsrmQ0HzizwmlZ",
	"5iylBolv3Wfz1TABsIoEbVoc4YV68iEAsZSiBKmZHZSWZZKLlOaJ0lTjSP8uYT45mfzbUWN/ObLd1VEw",
	"+UvT6xw7GZHVikEJLcs9xnhjRB+1hVkYBo2fkE1YtodCE+N2Ew0pMcOCc1hRrg8blaXFD+oD/M7N1ODb",
	"SjsW3x0VbBDhxDacgbISsG14T5EA9QTRShCtKJAucjGrf7h/WpYNBvH7aVlafKD0CAwFM1gzpdUDXD5t",
	"TlI4z9mLQ/J9ODaK4oLnG3M5WFHD3A1zd2u5W6y2Lbk1NCPeUwS3U8hDszUeDUbMvwuKQ7ViKXIj9eyk",
	"FdP4L65tSGbm91Gd/xgkFuJ2mLhQ0XKYszoO/hIoN/c7lNMnHGfuOSSn3b43IxszSpxgbkQrW/fTjrsF",
	"jzUKryUtLYDui71LGUclzTaysN6Sm45kdFGYgzMc0BpCdeOztvM8RCFBUujA8CwX6dVfqFrewZmf+bH6",
	"xw+nIUugGUiypGp5OIlJGeHxakYbc8RMQ1TwySyY6rBe4l0tb8fSMqppsDQHb1wssajHfsj0QEZ0lx/x",
	"PzQn5rM524b122EPyQUyMGWPs3MyZEbbtwqCnck0QCuEIIVV8InRuveC8nkzeXyfRu3Rt9am4HbILQJ3",
	"SKzv/Bg8E+sYDM/EuncExBrUXdCHGQfFSA2FGgHfCweZwP136KNS0k0fyTj2GCSbBRrRVeFp4OGNb2Zp",
	"jLOnMyFvxn06bIWTxuRMqBk1YL7TDpKwaVUmjhQjZivboDNQ4+XbzjS6w8cw1sLCuaa/AxaUGfUusNAe",
	"6K6xIIqS5XAHpL+MMv0ZVfD4ETn/y+lXDx/98uirrw1JllIsJC3IbKNBkftONyNKb3J40F8ZakdVruOj",
	"f/3EGyrb48bGUaKSKRS07A9lDaBWBLLNiGnXx1obzbjqGsAxh/MCDCe3aCfWtm9Ae8GUkbCK2Z1sxhDC",
	"smaWjDhIMthJTPsur5lmEy5RbmR1F6osSClkxL6GR0yLVOTJCqRiIuJNeeNaENfCi7dl93cLLbmmipi5",
	"0fRbcRQoIpSl13w837dDX6x5g5utnN+uN7I6N++YfWkj31sSFSlBJnrNSQazatHShOZSFISSDDviHf09",
	"aBQFLlgB55oW5Y/z+d2oigIHiqhsrABlZiK2hZHrFaSC20iIHdqZG3UMerqI8SY6PQyAw8j5hqdoZ7yL",
	"YzusuBaMo9NDbXgaaLEGxhyyRYssb6+tDqHDTnVPRcAx6HiJn9HQ8QJyTb8T8qKxBH4vRVXeuZDXnXPs",
	"cqhbjDOlZKav16EZX+Tt6JuFgf0wtsbPsqDn/vi6NSD0SJEv2WKpA7XijRRifvcwxmaJAYofrFKWmz59",
	"1ey1yAwz0ZW6AxGsGazhcIZuQ75GZ6LShBIuMsDNr1RcOBuI10BHMfq3dSjv6aXVs2ZgqCullVltVRL0",
	"3vbui6ZjQlN7QhNEjRrwXdVOR9vKTmdjAXIJNNuQGQAnYuYcRM51hYuk6HrWXrxxomGEX7TgKqVIQSnI",
	"EmeY2gmab2evDr0FTwg4AlzPQpQgcypvDezVaiecV7BJMFBCkfs//KwefAZ4tdA034FYbBNDb63mOy9g",
	"H+px028juO7kIdlRCcTfK0QLlGZz0DCEwr1wMrh/XYh6u3h7tKxAoj/ud6V4P8ntCKgG9Xem99tCW5UD",
	"4X9OvTUSntkwTrnwglVssJwqnexiy6ZRSwc3Kwg4YYwT48ADgtdLqrT1ITOeoenLXic4jxXCzBTDAA+q",
	"IWbkn70G0h87NfcgV5Wq1RFVlaWQGrLYGjist8z1Gtb1XGIejF3rPFqQSsGukYewFIzvkGVXYhFEde1q",
	"cUEW/cWhQ8Lc85soKltANIjYBsi5bxVgNwyBGgCEqQbRlnCY6lBOHXc1nSgtytJwC51UvO43hKZz2/pU",
	"/9S07RMX1c29nQlQGHnl2jvIry1mbfDbkiri4CAFvTKyB5pBrLO7D7M5jIliPIVkG+WjimdahUdg5yGt",
	"yoWkGSQZ5HTTH/Qn+5nYz9sGwB1v1F2hIbFRTPFNbyjZB41sGVrgeComPBL8QlJzBI0q0BCI671j5Axw",
	"7BhzcnR0rx4K54pukR8Pl223OjIi3oYroc2OO3pAkB1HHwPwAB7qoW+OCuycNLpnd4q/g3IT1HLE/pNs",
	"QA0toRl/rwUM2FBdgHhwXjrsvcOBo2xzkI3t4CNDR3bAoPuGSs1SVqKu8wNs7lz1604QdTOSDDRlOWQk",
	"+GDVwDLsT2z8TXfMm6mCo2xvffB7xrfIcnKmUORpA38FG9S539jAzsDUcRe6bGRUcz9RThBQHy5mRPCw",
	"CaxpqvONEdT0EjbkGiQQVc0KprUN2G6rulqUSThA1K+xZUbnxLNBkX4HxngVz3GoYHn9rZhOrE6wHb6L",
	"jmLQQofTBUoh8hEWsh4yohCMivcgpTC7zlzsuI8e9pTUAtIxbfTg1tf/PdVCM66A/F1UJKUcVa5KQy3T",
	"CImCAgqQZgYjgtVzusiOBkOQQwFWk8QvBwfdhR8cuD1niszh2j+4MA276Dg4QDvOG6F063DdgT3UHLez",
	"yPWBDh9z8TktpMtTdkcWuJHH7OSbzuC1l8icKaUc4Zrl35oBdE7meszaQxoZF1WB447y5QRDx9aN+37O",
	"iiqn+i68VrCieSJWICXLYCcndxMzwb9d0fzHutsOna6JAmNFARmjGvINKSWkYKPzjaim6rEPiY3bS5eU",
	"L1BCl6JauMAxOw5y2EpZW4iseG+IqBSj1zxBq3KM47pgYf9Aw8gvQI0O1TVJW43hmtbzuTc5Y65Cv3MR",
	"E33UKzWdDKqYBqmrRsW0yGm/MhnBfVsCVoCfZuKRvgtEnRE2+vgKt8VQr9nc38dG3gwdg7I/cRDK1nwc",
	"imYz+m2+uQMpww5EJJQSFN4JoV1I2a9iHr4oc5eG2igNRd90brv+MnD83g4qaILnjENSCA6b6CNqxuEV",
	"foweJ7yXBjqjhDDUtyv0t+DvgNWeZww13ha/uNvdE9p1EanvhLwrH6RzJY2Vp0e4/Hb6t92UN3VM0jyP",
	"+PLce5MuA1DT+n07k4QqJVKGQtJZpqb2oDn3n3uc0kb/mzqK9g7OXnfcjtMqfMqIRlnIS0JJmjM02Qqu",
	"tKxSfckpGoWCpUaijbz2O2wmfO6bxO2SEbOhG+qSU4w0q01F0QiJOUTsIt8BeGuhqhYLULqjXMwBLrlr",
	"xTipONM4V2GOS2LPSwkSQ34ObcuCbsjc0IQW5DeQgswq3Ra38TmV0izPnQfNTEPE/JJTTXKgSpNXjF+s",
	"cTjvZfdHloO+FvKqxkL8dl8AB8VUEo+K+t5+xYBVt/ylC17F5+/2s/W5mPGbN1cbtBk1T7r/z/3/PHl3",
	"mvw3TX47Tp7+x9H7D08+Pjjo/fjo4zff/N/2T48/fvPgP/89tlMe9thjHwf52Qunip69QH2jcbr0YP9k",
	"BveC8SRKZGH4RIe2yH182OoI6EHbGqWXcMn1mhtCWtGcZYa33IQcujdM7yza09GhmtZGdKxPfq17SvG3",
	"4DIkwmQ6rPHGUlQ/kDD+rA69gO6lHJ6XecXtVnrp274a8QFdYj6tn07arConBN/VLamPRnR/Pvrq68m0",
	"eQ9Xf59MJ+7r+wgls2wde/WYwTqmnLkDggfjniIl3SjQce6BsEdj12wwRThsAUarV0tWfnpOoTSbxTmc",
	"j8V3Rp41P+M2SN6cH/QpbpyrQsw/PdxaAmRQ6mUs20JLUMNWzW4CdOI8SilWwKeEHcJh18iSGX3RRdHl",
	"QOf46h+1TzFGG6rPgSU0TxUB1sOFjLJkxOgHRR7HrT9OJ+7yV3euDrmBY3B156wdiP5vLci977+9IEeO",
	"Yap79gGuHTp4MhlRpd2roFYEkOFmNseMFfIu+SV/AXPGmfl+cskzqunRjCqWqqNKgXxGc8pTOFwIcuIf",
	"Gr2gml7ynqQ1mAYqeOJFymqWs5RchQpJQ542tUd/hMvLdzRfiMvL971giL764KaK8hc7QWIEYVHpxCUm",
	"SCRcUxlzNqn6YTqObDOPbJvVCtmishZJn/jAjR/nebQsVfeBan/5ZZmb5QdkqNzzS7NlRGkhvSxiBBQL",
	"De7va+EuBkmvvV2lUqDIPwpavmNcvyfJZXV8/BhI68XmP9yVb2hyU8Jo68rgA9quUQUXbtVKWGtJk5Iu",
	"Yj6ty8t3GmiJu4/ycoE2jjwn2K31UtRHwuNQzQI8PoY3wMKx96s3XNy57eWTUMWXgJ9wC7GNETcaT/tN",
	"9yt4O3rj7eq8P+3tUqWXiTnb0VUpQ+J+Z+rcNAsjZPnwB8UWqK26ND4zIOkS0iuXXwWKUm+mre4+wsYJ",
	"mp51MGUz79iXX5j7AT0CMyBVmVEnilO+6T7CV6C1j+N9C1ewuRBN6oh9Xt23H4GroYOKlBpIl4ZYw2Pr",
	"xuhuvgvjQsW+LP1banxU58nipKYL32f4IFuR9w4OcYwoWo+UhxBBZQQRlvgHUHCDhZrxbkX6seUZLWNm",
	"b75IFh7P+4lr0ihPLuIqXA1a3e33AjCNl7hWZEaN3C5cBir70DngYpWiCxiQkEOnzMjnxC1HDg6y696L",
	"3nRi3r3QevdNFGTbODFrjlIKmC+GVFCZ6cTZ+Zms3895JjCxpEPYLEcxqQ5ItEyHypZzzGbKGwItTsAg",
	"eSNweDDaGAklmyVVPjkW5hDzZ3mUDPA7Ptzflq7lLAgRCxKF1clYPM/tntOedumStvhMLT49S6hajki1",
	"YiR8jEqPbYfgKABlkMPCLtw29oTSJBFoNsjA8eN8njMOJIlFmwVm0OCacXOAkY8PCLEWeDJ6hBgZB2Cj",
	"PxsHJq9FeDb5Yh8guUuCQP3Y6AkP/ob4ey0bf21EHlEaFs4GvFqp5wDUhSjW91cnUBaHIYxPiWFzK5ob",
	"Nuc0vmaQXtYQFFs7OUJcRMWDIXF2iwPEXix7rcleRTdZTSgzeaDjAt0WiGdindgHm1GJd7aeGXqPhqTj",
	"89HYwbT5We4pMhNrjNLBq8WGQO+AZRgOD0ag4a+ZQnrFfkO3uQVm27TbpakYFSokGWfOq8llSJwYM/WA",
	"BDNELveDlCs3AqBj7GjyFzvld6eS2hZP+pd5c6tNm1Ri/rVP7PgPHaHoLg3gr2+FqZOkvOlKLFE7RTvY",
	"pJ0fJhAhY0Rv2ETfSdN3BSnIAZWCpCVEJVcxz6nRbQBvnHPfLTBeYBYayjcPgggmCQumNDRGdB8n8TnM",
	"kxST3wkxH16dLuXcrO+tEPU1Zd2I2LG1zE++AgwBnjOpdIIeiOgSTKPvFCrV35mmcVmpHSNlU8WyLM4b",
	"cNor2CQZy6s4vbp5f3hhpn1ds0RVzZDfMm4DVmaY2jgaObllahtcu3XBL+2CX9I7W++402CamomlIZf2",
	"HH+Qc9HhvNvYQYQAY8TR37VBlG5hkMGL1z53DOSmwMd/uM362jtMmR97Z9SOf3c7dEfZkaJrCQwGW1fB",
	"0E1kxBKmg8zA/aeoA2eAliXL1h1bqB11UGOmexk8fD61DhZwd91gOzAQ2D1jr2EkqHbqvEbAtzmeW5lr",
	"Dkdh5qKd4C5kCOFUTPkKBX1E1a/lduHqAmj+A2x+Nm1xOZOP08ntTKcxXLsRd+D6Tb29UTyja96a0lqe",
	"kD1RTstSihXNE2dgHiJNKVaONLG5t0d/YlYXN2NefHv68o0D/+N0kuZAZVKLCoOrwnblH2ZVNkvfwAHx",
	"GdCNzudlditKBptfpxYLjdLXS3CppANptJfzsnE4BEfRGann8QihnSZn5xuxS9ziI4GydpE05jvrIWl7",
	"ReiKstzbzTy0A9E8uLhxiVOjXCEc4NbelcBJltwpu+md7vjpaKhrB08K59qS7Lqw+dwVEbzrQseY503p",
	"vO4FxYyV1irSZ068KtCSkKicpXEbK58pQxzc+s5MY4KNB4RRM2LFBlyxvGLBWKbZmJw0HSCDOaLIVNG0",
	"OA3uZsLV6qk4+7UCwjLg2nySeCo7BxXTmzhre/86NbJDfy43sLXQN8PfRsYIs7V2bzwEYruAEXrqeuC+",
	"qFVmv9DaImV+CFwSezj8wxl7V+IWZ72jD0fNNnhx2fa4haV1+vzPEIbNsb67ro9XXl3a2IE5onV6mErm",
	"UvwGcT0P1ePIQyOfn5ZhlMtvED50CKtTtFhMbd1pyg01sw9u95B0E1qh2kEKA1SPOx+45TBRprdQU263",
	"2pbNaMW6xQkmjCo9suM3BONg7kXi5vR6RmNZRI2QYWA6bRzALVu6FsR39rhX9WsLOzsJfMl1W2YfkZcg",
	"mzeA/YQ0NxQY7LSjRYVGMkCqDWWCqfX/5UpEhqn4NeW2+orpZ4+S663AGr9Mr2shMQWEipv9M0hZQfO4",
	"5JClfRNvxhbMFhapFASVK9xAtmiTpSJX/aN+Q+RQczYnx9OgfI7bjYytmGKzHLDFQ9tiRhVy8toQVXcx",
	"ywOulwqbPxrRfFnxTEKml8oiVglSC3Wo3tTOqxnoawBOjrHdw6fkPrrtFFvBA4NFdz9PTh4+RaOr/eM4",
	"dgG4wjDbuEmG7OSvjp3E6Rj9lnYMw7jdqIfR1/K2Mtww49pymmzXMWcJWzpet/ssFZTTBcQjRYodMNm+",
	"uJtoSOvghWe2rJHSUmwI0/H5QVPDnwaizw37s2CQVBQF04Vz7ihRGHpqylLYSf1wtkaSyyjs4fIf0Uda",
	"ehdRR4n8tEZTe7/FVo2e7Ne0gDZap4TavB85a6IXfJ5zcubTCmGK5TqzssWNmcssHcUcDGaYk1IyrlGx",
	"qPQ8+TNJl1TS1LC/wyFwk9nXTyJppdvpTfl+gH9yvEtQIFdx1MsBsvcyhOtL7nPBk8JwlOxB89ojOJWD",
	"zty4227Id7h96LFCmRklGSS3qkVuNODUtyI8vmXAW5JivZ696HHvlX1yyqxknDxoZXbop7cvnZRRCBnL",
	"FdgcdydxSNCSwQpj9+KbZMa85V7IfNQu3Ab6z+t58CJnIJb5sxxTBJ6JiHbqU53XlnQXqx6xDgwdU/PB",
	"kMHMDTUl7bTSn56P3k0UVNzT5Q3bfceW+eLxgH90EfGZyQU3sPHl25UMEEqQVj9KMln9PfCxU/JMrMcS",
	"TucUeuL5F0BRFCUVy7Ofm5efnaoFkvJ0GfWZzUzHX5r6avXi7B0YTfu3pJxDHh3Oypu/eLk0Ijn/U4yd",
	"p2B8ZNtuIQW73M7iGsDbYHqg/IQGvUznZoIQq+1HdXXQdr4QGcF5mhxzzXHtF+AI0qT/WoHSsQdK+MEG",
	"jqFt1LADm6WbAM9QIz0k39sSyksgrQRCqAn6TBHtV9NVmQuaTTGDxcW3py+JndX2sVWCbJbwBSpC7VV0",
	"bGJB+sxxIci+4E/8ecT4cbbHa5tVK53USb1jD1BNiybtOOv4CVBFCrFzSF4ExVDtW1UzhKGHOZOF0erq",
	"0ax8hDRh/qM1TZeo9rVY6zDJj09v76lSBSUl69JQdU5JPHcGbpfh3ia4nxJhdPNrpmzlXFhB+81r/QDc",
	"mR38G9j28mTFuaWUwz1uuTqD5L5o98DZK9K7EqKQdRC/p9Bvq0Psm+3/HHtFU1x1Swf0aknaF5R1yR9f",
	"ET2lXHCWYoKp2BXtSuyO8bONyMXVNeT6I+5OaORwRQsW1KF4DouDJQw8I3SI6xv6g69mUy112D811nJd",
	"Uk0WoJXjbJBNfd0NZ2tkXIHLEYoFmQM+KWTLd4kcMuoOT2q3yZ5khE9vBpTH78y31860gDHpV4yjEuHQ",
	"5gQ/aw3ECqDaaB5Mk4UA5dbTfn+s3pk+h/gUN4P1+0NfMRTHsK4/s2zr5+4Pdeq93s7LbNo+N21dgqT6",
	"51aUs530tCzdpMNVWaLygF7zQQRHvJeJdx8FyK3HD0fbQm5bw1XwPjWEBit0dkOJ93CPMOoKJZ3qV0Zo",
	"tRSFLYgNE4tmSWA8AsZLxqGpZxu5INLolYAbg+d1oJ9KJdVWBBzF0y6A5ujhjjE0pZ1747ZDddNDGZTg",
	"Gv0cw9vYFFcZYBx1g0Zwo3xTl9E11B0IE8+xfrdDZL9UCkpVTojK8NVCp3hKjHEYxu3LM7UvgP4x6MtE",
	"truW1J6cfW6ioYeosypbgE5olsVStj7DrwS/kqxCyQHWkFZ1as+yJCnmXWknoulTm5soFVxVxZa5fINb",
	"ThdUI4pQQ1gRye8wPnSZbfDfWF7L4Z1xgR57hxr6qI49sy/1QydjUq+h6USxRTIeE3in3B4dzdQ3I/Sm",
	"/51Sei4WbUA+cfqJrcmwgj2K8bdvzcURZmfoJWu1V0udPAED+4SvIYlqY/3st5P6i2raz96KDqW6Rt12",
	"A8RwtbkpXn4D4b1B0g1q71froRwK8k0HY9Kpdq/jNCVbWdDgiyMbIWTfFiEUcevsUFSQDQoyn3u9x0mG",
	"PTlbxxMfBgj14WZ9gH7wsaykpMy53xtm0cesi3rvv0MYEw/bbHB3ES6WfNBi98NqKO7bJ2PD791qVFfg",
	"nsyXElZMVN6x7SOfvEpof23Vdqoj76Pr7xtecarPaw4dNN5euKoAdplOJ//hZxsnR4BrufkXMOX2Nr1X",
	"56ov7VrzVNOE1AmlRyWYbt2KYxIVxnLiOdmwVWlrR52wPmMdIw70635NJyzb68KM5VWc2FFixy5exWs4",
	"7VSTagqPWCkUa/K6x8p7jQwxvMAKXUHarP5YPr5nBanGZP5N3IIE2CeJlpksKBj6Jf3UgDpdR2K6rFPb",
	"Uk31M/jvuON7r8GCF402+/nh+MRKp3V0GvJpzIa8AO5qdrbfeYyONp/PIdVsteP13V+XwIOXXVNvl7G1",
	"t4PHeKyOXsbkLftbHRuAtj2O2wpPkETx1uAMvb25gs09RVrUEE3HPvVX7U3ydiAGkDskhkSEikV/WEOy",
	"c8gzVVMGYsFHW9nu0GRAG6zkFLwlveFcniTNxdG8L90yZbyUzKi5TNe9Xl1jIO7QA71+JYph/eMFFv5Q",
	"dZVFn/cj1NLJWT874rXLG4JvJWvfic8gAsr/5h9G21lydgVhrSn0VF1TmfkWUdOLt+okW+6j3qs6X0Wh",
	"C/S8npk1sbH9d1SRfFsYAZ3mwogRyVAYeTsctY7luKds0I1N/46BtgauOUhXkw/l31woSLTwsbTb4NiG",
	"ChtZdCMkqMEclxa4wcwzb5vUOpjrl2KmGeoCisIFEgkFNdDJIAHO8JzbkP3cfvcPh3yu150Wpppedxcd",
	"8FHRTPWQGFL9nLjbcveDpJsYmxjntu6zimXD4SDb3pBSiqxK7QUdHozaIDc619QWVhK106T9VXZ0hOBV",
	"5xVsjqwS5Ks1+B0MgbaSkwU9yKLQ2eQ7Nb+pGNyLOwHvc1quppNSiDwZcHac9VP4dCn+iqVXkBFzU/jo",
	"wYHKN+Q+2thrb/b1cuNT1pQlcMgeHBJyym28tndst3NIdybn9/S2+dc4a1bZrFrOqHZ4yeOBr5jvSt6S",
	"m/lhtvMwBYbV3XIqO8iOBDHrgfRBkl5H6kAdjtXK+67mbm2ehqgsFDGZpCk7syNOpg6RaSp/NGEyfekg",
	"z8V1glSU1Pm/YjqHaddmkj7jadPNYHsGQbwNVe4C3ZAlzUgqpIQ07BF/4mCBKoSEJBcYfhPzDM61kYcK",
	"jGvmJBcLIkqj5to0et6HEi1LE8xln9nanol11AwkMgDlntW6aWzj/jxbqtfsXxnnYhmxtyCiPZb3Ln/j",
	"CGXvqhUBmCMIdLet6TRW3ae9rm59qKFqbVoULI2j+48VZTIYG7KjdlFkfTU5utJK/lXgAK6iLtvtHlJb",
	"h2421k9a50weeSwCAIY9py0YRvlP9wVjjnUdExpB8lkttU5bZXdZ5+z7fHaWxlNqtdYlEDN2JcG9UrMF",
	"6DqVc0qql/4WM837uqXRU0DhEzJb/oMqawnxFhlX/a4rHogyyWEFLYeyezpXpSkoxVYQVs6znUkGUKJ9",
	"sis1xzylIZfriFJu7UngaxuD3ahsZRFrd4rsEJyiYt6aJ/aYqLFHyUC0YllFW/hTt6hFNlSGLMKGPawj",
	"OcXeTCK+uG0sYmdsA9J89FzyeGhD+HKzNorgbFltPLVE2JxsVdJrPqxEROxOtb/99usgOBhRnZfUg1e+",
	"rHflpgrkIGVsI4xe/cCozKHA138Nk554ccv1jchY1tTFVGQApprzjNF70ESHBc0KuiEZm89BWmO+0pRn",
	"VGZhc8ZJClJTZjSbjbq5WGuglRVMd0q2hrvioJ7BxGRctEtZQPKNUxluIXWi5yYicdqrVouhEom9XYk/",
	"J6BrI11jXNUAEbiH0Chb2wMmOApIpKBXsOc8iv0G26fB9CTO9qcFzjpmipiv9Ya51Uax7n4YQuR2C4oh",
	"bvcMhakXmzdd0kazoCXZX5BdGn/VXJzjyjL6DjvACx2GQWFGb7tx4Hzmx1GvaqQES3k/RAmt5e/yQboF",
	"NpJGsEWOEWgNNhGuDahv70vgYFbPa7/tUA3RrnsX8ywKbov89dzCljfZqn0B4ZizIFc0//SuXUzAeYr4",
	"gOztsDE49A2GSLaoVDd7mfCSjpo78APe3dT8Dbqi/wpmj6JaqRvKiTC1WO+DefBmobk1XMx9Ca8VcHKN",
	"Y9o4todfk5l7uV1KSJnqikbXvrpG7QrDYlPuNcha7/C97Vrnz0LfgoznXtMgr5tM/ajjL3gDYXNEPzNT",
	"GTi5USqPUV+PLCL4i/GoMIXajuviqhXgZiufdF5uCAl3HOgWhKzvGejWTw43dnk2mMtcOpWC/jpH39Yt",
	"3EYu6mZtY6M0+8jdls59THBlvEqD6Y7RnRYhWOKEIKjkHw//QSTMsYahIAcHOMHBwdQ1/cej9mdznA8O",
	"otLZJ4vrtDhyY7h5YxTz89BLP/uabeBRaWc/KpZnuwij9US4qQKKj2B/cYkIPksd0l9srEn/qLpacLcI",
	"kLOIiay1NXkwVfD4d8S7X9ct8soX/ThpJZneYH5Ebz9gv0QjUL+vo5lcNFytH7q7T4srqDNsNrFPlfK3",
	"6/eC5ngfWbWVm1tI5Ifk2zUtyhzcQfnm3uxP8PjPT7Ljxw//NPvz8VfHKTz56unxMX36hD58+vghPPrz",
	"V0+O4eH866ezR9mjJ49mTx49+fqrp+njJw9nT75++qd7hg8ZkC2gE5+NZ/I3LNabnL45Sy4MsA1OaMl+",
	"gI2tC2jI2FccpCmeRCgoyycn/qf/35+ww1QUzfD+14lL9jFZal2qk6Oj6+vrw7DL0QKDHRItqnR55Ofp",
	"lSQ8fXNWe4msFQh31L6T9dY9Twqn+O3tt+cX5PTN2WFQr/5kcnx4fPgQy5uXwGnJJieTx/gTnp4l7vuR",
	"I7bJyYeP08nREmiOsYHmjwK0ZKn/JIFmG/d/dU0XC5CHrgyj+Wn16MiLFUcfXNDHx23fjsKKJkcfWrEx",
	"2Y6eWPHg6INP5Le9dStTnosJMkuPKvrfg3ZhoEqH5ZZaRonZxoe1TIkS0vnKS8mEOVVYyjuDVALFMyAk",
	"PmzWsuKpNVPYKYDjf1+d/g1NNa9O/0a+IcdT995dodoRm956gmtyOMss2H3rlHq2Oa2jrII03yfvYo6b",
	"WHlIPE6GVgJqr0dsuBnabcKiujVvNvz2OHn6/sNXf/4Yk/n6Zck9koLAoxD1Wvhkd4i0gq6/GULZ2tnB",
	"zbi/ViA3zSIKup6EAPftGJFo7DlboP3Jp6NslQl1VQKZIv91/uNrIiRxOu4bml7VzisDMuZwk2LF8FVw",
	"FjwlNz2HIHbXXwi0r+vkvGCFWpTth4k1mt9jgiwEFA/9o+PjW5SOjxCaq8htvSaufFXbRa8IrGmq8w2h",
	"KrDQqWrWJLPruBhFmbTM+VF34/CMvjRMzBeyb5RA5OU8lmDZDt9FJ/FXCx3O84WlqHZHS/aQEYXgfeyy",
	"D7fW08iX3f2fsbt92YGUwpxphj7z5srx11kLyKZAiAN3IADqkPxdVCjh2RKAEMvIizOgn8fP6eI1g2cB",
	"jQMTvxwcdBd+cOD2nCkyh2tkspRjwy46Dg6wZvSTPVnZVmty63njqLOzz3C9zXpF13UiVEq44AnHCnUr",
	"IIFa+OT44R92hWccHwsY0ZRY0fvjdPLVH3jLzrgRbGhOsKVdzeM/7GrOQa5YCuQCilJIKlm+IT/xOvtN",
	"kFW3z/5+4ldcXHOPCKNVVkVB5cYJ0bTmORUP8hFt5T+9yMtG0EYuShcKg/RQRJ20KrHyxeT9R68DjFQs",
	"tjU7mmHKv7FNQQWNh7UT9B+oow9oAR/8/cjlKIt/RE+EVXGP/JuQeMuW4vNBrw2snR4p1emyKo8+4H9Q",
	"5QzAshkBjvSaH6E78+hDazXuc2817d+b7mGLVSEy8ACL+dzWGtj2+eiD/TeYCNYlSGbuFHyF4361ryWP",
	"MAPopv/zhqfRH/vr6Bb6jf189KFdaKqFILWsdCaug77oAbDuq/58denV1t9H15RpI7+4Z0eYCLzfWQPN",
	"j1yOoc6vzbP+3hfMVRD82JF4SmHDW9vK5lt6fdEKRZE2zvCZQAPBEC9cJzPGkUGEDKyx69mPfe2lx7Yu",
	"lmAd1N41GhEPtSAzKWiWUoX5pV02rp7a+vGWqlE3LPIs4vhCMNES0H/BYo764U5vCI47Rv4L9iUoy4By",
	"uLL2wN9ZZupB9IxmxMdDJ+QVzc2GQ0ZOnWTewsbvLe98fgHlM0sUn0wEeOYPnyIUo/ZbupuMxxsHafPG",
	"3PdGwTMMYAE8cSwomYls46uMSHqt1zbGv8vcjupyMdGPd2Ak/Ne2DO4yCH6xw32xw32x1Hyxw33Z3S92",
	"uJF2uC9Wqi9Wqv+VVqp9TFMxMdOZZoalTUynTlvzWt2ONmkrahbffkLEdC2T9atzMH1IyAUmBaDmloAV",
	"SJpjBTMVZPkoMAQSHyJBdnLJkxYkNtDQTHy/+a+N8Lysjo8fAzl+0O2jNMvzkDf3+6K8i59sSsFvyOXk",
	"ctIbSUIhVpDZ5wnhs2nba+ew/1897o+9fAv4/GFJV1C/VyKqms9ZyizKc8EXhC5EE51s+DbhAr+ANMDZ",
	"rFWE6anLDMcUuTaLd0nt26+725J7XwI4a7Zwp0e/Qy5xZ74hvD09+f8xxo3/v1pKv8UTolsx0q1j97jq",
	"F67yKbjKZ+crf3QfaWA+/B8pZj45fvKHXVBobH4tNPkOI+9vJ47VhUJiybtuKmj5F4Le3NdE74bRsHiL",
	"1nGw796biwArA7oLtgnuPDk6wvRAS6H00cRcf+3Az/Dj+xpmX85pUkq2wuzQ7z/+vwAAAP//5TteDYDk",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
