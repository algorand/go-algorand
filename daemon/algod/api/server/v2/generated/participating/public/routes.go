// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"5gI/syY29cnx6eTj/w0AAP//53cdFIonAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
