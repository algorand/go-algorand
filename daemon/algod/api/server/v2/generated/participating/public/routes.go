// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
