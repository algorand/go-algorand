// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"a1JKtsJM3O8//r8AAAD///jlgLWr5QAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
