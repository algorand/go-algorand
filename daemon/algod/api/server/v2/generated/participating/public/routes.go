// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"oMMmBQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
