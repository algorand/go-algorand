// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//CNtbP1AkAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
