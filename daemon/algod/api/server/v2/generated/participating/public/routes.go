// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"r2H+4G+nUrIVdh18//H/BwAA//8vxnGVmAUBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
