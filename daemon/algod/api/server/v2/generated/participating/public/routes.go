// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
