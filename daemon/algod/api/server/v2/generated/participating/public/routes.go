// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//K4m1zTHAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
