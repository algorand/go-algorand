// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"LwAA//+m0Efxyt8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
