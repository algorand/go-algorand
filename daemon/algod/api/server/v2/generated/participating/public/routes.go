// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"PwAA//+yhC5iNxkBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
