// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address basics.Address, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithOptions("simple", "txid", ctx.Param("txid"), &txid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
