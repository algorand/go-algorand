// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

<<<<<<< HEAD
	"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",
	"dfgnpWTXWNbv/cf/CQAA///C44qjANcAAA==",
||||||| constructed merge base
	"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",
	"/J8AAAD//7X6ZKDq1gAA",
=======
	"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",
	"c85b2NYAAA==",
>>>>>>> oas2 fixups
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
