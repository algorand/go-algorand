// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XP+/AAAA//+u3heREOIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
