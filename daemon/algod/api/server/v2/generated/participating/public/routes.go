// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
