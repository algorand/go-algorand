// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AgEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
