// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address basics.Address, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithOptions("simple", "txid", ctx.Param("txid"), &txid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XBxqUofKPp6cje7+bwAAAP//K7D1pngmAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
