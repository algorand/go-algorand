// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address basics.Address, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithOptions("simple", "txid", ctx.Param("txid"), &txid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"aTFxfqiT2lX28fRkdPN/AwAA//9KiHz6MCcBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
