// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
