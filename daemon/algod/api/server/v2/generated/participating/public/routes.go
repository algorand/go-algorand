// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"///Mo1u/WgEBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
