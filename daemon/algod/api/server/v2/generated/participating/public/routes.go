// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address basics.Address, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithOptions("simple", "txid", ctx.Param("txid"), &txid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"h8o+np6N3v3fAAAA///IwoUJryYBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
