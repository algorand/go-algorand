// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"JVthKYX3H/9fAAAA//8waYwR9esAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
