// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XPctpLgv4Kb3Srb2qEkfyT74qvUnmInedrYsctSsvvW8iUYsmcGTyTAB4DzEZ//",
	"9ys0ABIkwRmOpNjJrn+yNSSBRqPR6O9+P0lFUQoOXKvJ0/eTkkpagAaJf9E0FRXXCcvMXxmoVLJSM8En",
	"T/0zorRkfDGZTpj5taR6OZlOOC2gecd8P51I+EfFJGSTp1pWMJ2odAkFNQPrbWnerkfaJAuRuCHO7BDn",
	"zycfdjygWSZBqT6Ur3i+JYyneZUB0ZJyRVPzSJE100uil0wR9zFhnAgORMyJXrZeJnMGeaaO/SL/UYHc",
	"Bqt0kw8v6UMDYiJFDn04n4lixjh4qKAGqt4QogXJYI4vLakmZgYDq39RC6KAynRJ5kLuAdUCEcILvCom",
	"T99OFPAMJO5WCmyF/51LgN8g0VQuQE/eTWOLm2uQiWZFZGnnDvsSVJVrRfBdXOOCrYAT89UxeVkpTWZA",
	"KCdvvntGHj9+/JVZSEG1hswR2eCqmtnDNdnPJ08nGdXgH/dpjeYLISnPkvr9N989w/kv3ALHvkWVgvhh",
	"OTNPyPnzoQX4DyMkxLiGBe5Di/rNF5FD0fw8g7mQMHJP7Mt3uinh/J90V1Kq02UpGNeRfSH4lNjHUR4W",
	"fL6Lh9UAtN4vDaakGfTtafLVu/cPpw9PP/zT27Pkv9yfXzz+MHL5z+px92Ag+mJaSQk83SYLCRRPy5Ly",
	"Pj7eOHpQS1HlGVnSFW4+LZDVu2+J+dayzhXNK0MnLJXiLF8IRagjowzmtMo18ROTiueGTZnRHLUTpkgp",
	"xYplkE0N910vWbokKVV2CHyPrFmeGxqsFGRDtBZf3Y7D9CFEiYHrRvjABf1xkdGsaw8mYIPcIElzoSDR",
	"Ys/15G8cyjMSXijNXaUOu6zI5RIITm4e2MsWcccNTef5lmjc14xQRSjxV9OUsDnZioqscXNydo3fu9UY",
	"rBXEIA03p3WPmsM7hL4eMiLImwmRA+WIPH/u+ijjc7aoJCiyXoJeujtPgioFV0DE7O+QarPt/37x6kci",
	"JHkJStEFvKbpNQGeigyyY3I+J1zogDQcLSEOzZdD63BwxS75vythaKJQi5Km1/EbPWcFi6zqJd2woioI",
	"r4oZSLOl/grRgkjQleRDANkR95BiQTf9SS9lxVPc/2balixnqI2pMqdbRFhBN1+fTh04itA8JyXwjPEF",
	"0Rs+KMeZufeDl0hR8WyEmKPNngYXqyohZXMGGalH2QGJm2YfPIwfBk8jfAXg+EEGwaln2QMOh02EZszp",
	"Nk9ISRcQkMwx+ckxN3yqxTXwmtDJbIuPSgkrJipVfzQAI069WwLnQkNSSpizCI1dOHQYBmPfcRy4cDJQ",
	"KrimjENmmDMCLTRYZjUIUzDhbn2nf4vPqIIvnwzd8c3Tkbs/F91d37njo3YbX0rskYxcneapO7Bxyar1",
	"/Qj9MJxbsUVif+5tJFtcmttmznK8if5u9s+joVLIBFqI8HeTYgtOdSXh6RU/Mn+RhFxoyjMqM/NLYX96",
	"WeWaXbCF+Sm3P70QC5ZesMUAMmtYowoXflbYf8x4cXasN1G94oUQ11UZLihtKa6zLTl/PrTJdsxDCfOs",
	"1nZDxeNy45WRQ7/Qm3ojB4AcxF1JzYvXsJVgoKXpHP/ZzJGe6Fz+Zv4py9x8rct5DLWGjt2VjOYDZ1Y4",
	"K8ucpdQg8Y17bJ4aJgBWkaDNGyd4oT59H4BYSlGC1MwOSssyyUVK80RpqnGkf5Ywnzyd/NNJY385sZ+r",
	"k2DyF+arC/zIiKxWDEpoWR4wxmsj+qgdzMIwaHyEbMKyPRSaGLebaEiJGRacw4pyfdyoLC1+UB/gt26m",
	"Bt9W2rH47qhggwgn9sUZKCsB2xfvKRKgniBaCaIVBdJFLmb1D/fPyrLBID4/K0uLD5QegaFgBhumtHqA",
	"y6fNSQrnOX9+TL4Px0ZRXPB8ay4HK2qYu2Hubi13i9W2JbeGZsR7iuB2CnlstsajwYj5d0FxqFYsRW6k",
	"nr20Yl7+q3s3JDPz+6iP/xwkFuJ2mLhQ0XKYszoO/hIoN/c7lNMnHGfuOSZn3W9vRjZmlB0Eo84bLN41",
	"8eAvTEOh9lJCAFFATW57qJR0O3FCYoLCXp9MflJgKaSkC8YR2qlRnzgp6LXdD4F4N4QAqtaLLC1ZCbI2",
	"oTqZ06H+uGdn+RNQa2xjvSRqJNWcKY16Nb5MlpCj4Ey5J+iQVG5EGSM2fMciapjXkpaWlt0TK3Yxjvq8",
	"fcnCesuLd+SdGIU5YPfBRiNUN2bLe1lnFBLkGh0YvslFev1XqpZ3cMJnfqw+7eM0ZAk0A0mWVC0jB6dD",
	"281oY+jbvIg0S2bBVMf1El+IhbqDJebiENZVls9onpup+yyrs1oceNRBznNiXiZQMDSYO8XRWtit/kW+",
	"penSiAUkpXk+bUxFokxyWEFulHbGOcgp0Uuqm8OPI3u9Bs+RAsPsNJBgNc7MhCY2WdsiJJCC4g1UGG2m",
	"zNvf1BxU0QI6UhDeiKJCK0KgaJw/96uDFXDkSfXQCH69RrTWhIMfm7ndI5yZC7s4awHU3n1X46/mFy2g",
	"zdvNfcqbKYTMrM1am9+YJKmQdgh7w7vJzX+AyuZjS533SwmJG0LSFUhFc7O6zqIe1OR7V6dzz8nMqKbB",
	"yXRUGFfALOfA71C8Axmx0rzC/9CcmMdGijGU1FAPQ2FEBO7UzF7MBlV2JvMC2lsFKawpk5Q0vT4IymfN",
	"5HE2M+rkfWutp24L3SLqHbrcsEzd1TbhYEN71T4h1nbl2VFPFtnJdIK5xiDgUpTEso8OCJZT4GgWIWJz",
	"59faN2ITg+kbseldaWIDd7ITZpzRzB7h+yyXOsJC1E0PkE9x0/AC5+HdYMBuXI9nMyFvJjB17lBOGocq",
	"oWbUQF6cdugAX63KxLGfiFPGvtAZqIlh2S3ndIePYauFhQtNfwcsKDPqXWChPdBdY0EUJcvhDk73Miqn",
	"zqiCx4/IxV/Pvnj46JdHX3xpSLKUYiFpQWZbDYrcd5ZHovQ2hwfRg4YCVHz0L594N1x73Ng4SlQyhYKW",
	"/aGse88q+PY1Yt7rY62NZlx1DeAopg/m9rZoJ9ZzbUB7DrNqcQFaG2X+tRTzO2f4vRli0OFLr0tpZCfV",
	"doU6gfAkM6+cwEZLelLim8AzG0ph1sGUUXOL2Z0Q1dDGZ80sGXEYzWDvoTh0m5pptuFWya2s7sKCA1IK",
	"GZUySim0SEWeGFGWichd99q9QdwbfrvK7u8WWrKmipi50UFb8WzgStMbPv6KtkNfbniDm53ikV1vZHVu",
	"3jH70kZ+o2iVIBO94QSps3XTzqUoCCUZfoji1PegrYjJCrjQtChfzed3Y9AVOFBEJGAFKDMTsW8YAU9B",
	"KriNV9xz+7tRx6CnixjvSNPDADiMXGx5it7Auzi2w4JRwTiGJqgtTwMpycCYQ7ZokeXtrXRD6LBT3VMR",
	"cAw6XuBjdEc8h1zT74S8bCT076Woyjtnz905xy6HusU4h0dmvvWWbsYXeTtGdmFgP46t8ZMs6FltJ7Fr",
	"QOiRIl+wxVIHKvFrKX6HOzE6SwxQfGDtYbn5pm8V+1FkhpnoSt2BKNkM1nA4Q7chX6MzUWlCCRcZ4OZX",
	"Ki5kDkRVYjgXRqHpUG5FEwxTZAaGulJamdVWJcEYq9590XyY0NSe0ARRowYiTOrQIPuWnc5G7OUSaLYl",
	"MwBOxMyFcbgAE1wkxQAx7cU0J+JG+EULrlKKFJSCLHHW9r2g+ffs1aF34AkBR4DrWYgSZE7lrYG9Xu2F",
	"8xq2CYYzKnL/h5/Vg08Arxaa5nsQi+/E0Ns1GfahHjf9LoLrTh6SnTVGWqo14q1hEDloGELhQTgZ3L8u",
	"RL1dvD1aViAxauZ3pXg/ye0IqAb1d6b320JblQNB+k5NNxKe2TBOufCCVWywnCqd7GPL5qWWLcGsIOCE",
	"MU6MAw8IXi+o0jbSi/EMzbb2OsF5rBBmphgGeFANMSP/7DWQ/tipuQe5qlStjqiqLIXUkMXWgMa9wbl+",
	"hE09l5gHY9c6jxakUrBv5CEsBeM7ZDkNGP+gujblOeNgf3EYNmDu+W0UlS0gGkTsAuTCvxVgNwxUHgCE",
	"qQbRlnCY6lBOHR09nSgtytJwC51UvP5uCE0X9u0z/VPzbp+4rB/H3tuZAIU+Ive+g3xtMWtD1JdUEQeH",
	"t9aiOceGpPVhNocxUYynkOyifFTxzFvhEdh7SKtyIWkGSQY53UbszPYxsY93DYA73qi7QkNiY43jm95Q",
	"sg/t3DG0wPFUTHgk+ISk5ggaVaAhEPf1npEzwLFjzMnR0b16KJwrukV+PFy23erIiHgbroQ2O+7oAUF2",
	"HH0MwAN4qIe+OSrw46TRPbtT/A2Um6CWIw6fZAtqaAnN+ActYMAW7NK4gvPSYe8dDhxlm4NsbA8fGTqy",
	"A4bp11RqlrISdZ0fYHvnql93gmhsAMlAU5ZDRoIHVg0sw++JjZLtjnkzVXCU7a0Pfs/4FlmOj0RqA38N",
	"W9S5X9v0i8DUcRe6bGRUcz9RThBQH9RtRPDwFdjQVOdbI6jpJWzJGiQQVc1slEbfn6JFmYQDRP0zO2Z0",
	"Duio+3enR/wChwqWF3NbWp1gN3yXHcWghQ6nC5RC5CMsZD1kRCEYFR5DSmF2nbkML5/j4ympBaRj2hh9",
	"UF//91QLzbgC8jdRkZRyVLkqDbVMIyQKCihAmhmMCFbP6eIvGwxBDgVYTRKfHB11F3505PacKTKHtU+L",
	"NC920XF0hHac10Lp1uG6A3uoOW7nkesDHVfm4nNaSJen7A/qciOP2cnXncFrb5c5U0o5wjXLvzUD6JzM",
	"zZi1hzQyLqANxx3ly2mHQPXWjft+wYoqp/ouvFawonkiViAly2AvJ3cTM8G/XdH8Vf0ZpnxCamg0hSTF",
	"RMWRY8Gl+cbmNppxGGfmANu8hrEAwbn96sJ+tEfFbIIeWFFAxqiGfEtKCSnYlD4jOap6qcfEBvunS8oX",
	"qDBIUS1cnIQdBxl+paxpRla8N0RUqNIbnqCRO3YBuEg8n9VpxCmgRqXrWsitArOm9XwukXfMzRzsQddj",
	"EHWSTSeDGq9B6qrReC1y2qmpIy6DlrwX4KeZeKQrBVFnZJ8+vsJtMYfJbO7vY7Jvho5B2Z84CGpuHg7F",
	"NRt1O9/egdBjByISSgkKr6jQTKXsUzEP09B9NORWaSj6lnz76S8Dx+/NoL4oeM44JIXgsI1WXmEcXuLD",
	"6HHCa3LgYxRYhr7t6iAt+DtgtecZQ423xS/udveEdj1W6jsh78olagccLd6P8EDudbe7KW/qJ6V5HnEt",
	"uiTVLgNQ0zpyjklClRIpQ5ntPFNTF/hsvZEuo7WN/td16s0dnL3uuB0fWlj/AG3EkJeEkjRnaEEWXGlZ",
	"pfqKU7RRBUuNBHF5ZXzYavnMvxI3k0asmG6oK04xgK+2XEUDNuYQMdN8B+CNl6paLEDpjq4zB7ji7i3G",
	"ScWZxrkKc1wSe15KkBhJdWzfLOiWzA1NaEF+AynIrNJt6R9zsJVmee4cemYaIuZXnGqSA1WavGT8coPD",
	"eae/P7Ic9FrI6xoL8dt9ARwUU0k82Ox7+xRTF9zyly6NASP67WMfV9sUhZiYZbbqwPzf+//29O1Z8l80",
	"+e00+epfTt69f/LhwVHvx0cfvv76/7V/evzh6wf/9s+xnfKwxzKEHeTnz51mfP4c1Z8gG6EL+0ez/xeM",
	"J1EiC6M5OrRF7mM1DEdAD9rGMb2EK6433BDSiuYsM7zlJuTQvWF6Z9Gejg7VtDaiYwzzaz1QqbgFlyER",
	"JtNhjTeWovrxmfFcfHRKuvR6PC/zitut9NK3TTX18WViPq3rLdhSbE8JJuMvqQ/ydH8++uLLybRJoq+f",
	"T6YT9/RdhJJZtomVSshgE9MVwzyQe4qUdKtAx7kHwh4NpbOxHeGwBRQzkGrJyo/PKZRmsziH81lZzua0",
	"4efc5jCY84Muzq3znIj5x4dbS4AMSr2MlWhqCWr4VrObAJ2wk1KKFfApYcdw3LX5ZEZfdEF9OdC5D0yV",
	"QozRhupzYAnNU0WA9XAhowwrMfrpZHC4y1/duTrkBo7B1Z0zFtF77/tvL8mJY5jqnq3aYYcO6ixEVGmX",
	"H9oKSDLcLEybu+JX/DnM0fog+NMrnlFNT2ZUsVSdVArkNzSnPIXjhSBPfcrpc6rpFe9JWoO1I4O8cFJW",
	"s5yl5DpUSBrytPXA+iNcXb2l+UJcXb3rxWb01Qc3VZS/2AkSIwiLSieumlEiYU1lzPel6mo2OLItV7Zr",
	"Vitki8oaSH21JDd+nOfRslTdqhb95ZdlbpYfkKFyNRvMlhGlRZ1yZwQUl7Vs9vdH4S4GSdferlIpUOTX",
	"gpZvGdfvSHJVnZ4+xuTFpszDr+7KNzS5LWG0dWWw6kbXqIILt2olxqonJV3EXGxXV2810BJ3H+XlAm0c",
	"eU7ws1ZipU8wwKGaBdRZ3IMbYOE4OP8ZF3dhv/KVK+NLwEe4he0c81vtV1Ai4MbbtafMAK30MjFnO7oq",
	"ZUjc70xd0G5hhCwfjaHYArVVV/tvBiRdQnrtirJBUerttPW5D/hxgqZnHUzZcn02iRILRqGDYgakKjPq",
	"RHHKt93KPcpmVOCgb+AatpeiqTd1SKmeduUYNXRQkVID6dIQa3hs3RjdzXdRZT6X1hVgwfxUTxZPa7rw",
	"3wwfZCvy3sEhjhFFq7LJECKojCDCEv8ACm6wUDPerUg/tjzGU+CarSCBnC3YLFZp+D/6/jAPq6FKV1zR",
	"RSHXAyrC5sSo8jN7sTr1XlK+AHM9mytVKJrbwrHRoA3Uh5ZApZ4B1Tvt/DzMbfTQoUq5xuRytPBNzRJg",
	"Y/ababTYcVgbrQINRfYdF718PBx/ZgGH7Ibw+M8bTeF4UNd1qIsUVfS3co3dWq11oXkhnSFc9nkBWJVV",
	"rM2+GCiEKyhq69YE90ul6AIGdJfQezey5EfL44eD7JNIojKImHdFjZ4kEAXZvpyYNUfPMJgn5hCjmtkJ",
	"yPQzWQex8xlhnXCHsFmOAmwduWr3nsqWF9UWPh4CLc5aQPJGFPRgtDESHsclVf44YklYz2VHSWe/Ywbx",
	"rup750EsYVD3ta6t52/DLgft6f2uBp8vvOer7YVK/4jKeUb3wvSF2HYIjqJpBjks7MLty55QmppQzQYZ",
	"OF7N58hbklhYYmCgDgQANwcYzeWIEOsbIaNHiJFxADYGPuDA5EcRnk2+OARI7mpaUT82XhHB3xBP7LOB",
	"+kYYFaW5XNmAvzH1HMBV22gki05ENQ5DGJ8Sw+ZWNDdszunizSC9InCoUHRKvrnQmwdDisYO15S98g9a",
	"kxUSbrKaUJr1QMdF7R0Qz8QmsRnKUV1ktpkZeo/mLmC+dOxg2nJ79xSZiQ2Gc+HVYmPl98AyDIcHI7C9",
	"bJhCesXvhuQsC8yuaXfLuTEqVEgyztBak8uQoDdm6gHZcohc7gcV9G4EQMcM1bSjcGaJveaDtnjSv8yb",
	"W23aVIb1aWGx4z90hKK7NIC/vn2sXfPur01tw+H6af5EfZRif33L0m2KMNqPS1tY8ZAajF1yaAGxA6uv",
	"u3JgFK3tWK82XgOsxViJYb59p2QfbQpyQCU4aYmmyXUsUsDo8oD3+IX/LDDW4e5Rvn0QBBBKWDCloXEa",
	"+bigT2GOp1ghWoj58Op0KedmfW+EqC9/6zbHD1vL/OgrwAj8OZNKJ+hxiy7BvPSdQiPSd+bVuATaDlG0",
	"/RRYFue4OO01bJOM5VWcXt28Pzw30/5YXzSqmuEtxrgN0Jph/49o4PKOqW1s+84Fv7ALfkHvbL3jToN5",
	"1UwsDbm05/iTnIsOA9vFDiIEGCOO/q4NonQHgwwSzvvcMZBGg5iW413eht5hyvzYe6PUfNr70M1vR4qu",
	"Jah0GM8QFIsFZL6Cm/eH8aBOXi74ImhUVZa7ygIeE1udD4vr7ajL58LwYSgIPxD3E8Yz2MShD7UChLzJ",
	"rMOagjjJArgtVxI3C0VRE4b44xuBre4j+0K7CQDRIOjLjjO7iU62u1RvJ25ADjRzOokCv77dx7K/IQ51",
	"06Hw6VZx191HCAdEmmI66N3SL0MwwIBpWbJs03E82VEHjWD0IOvygLSFrMUNtgcD7SDoKMG1qoW7UGtn",
	"YD9BnffEaGU29toFFhv6pqlLwM8qiR6MVmRzvzR9rauNXPsPP19oIekCnBcqsSDdaghcziFoCAq/K6KZ",
	"DSfJ2HwOofdF3cRz0AKuZ2PPRpBuhMjiLpqKcf3lkxgZ7aGeBsb9KItTTIQWhnzyl30vl5fpA1NSfSUE",
	"W3MDV1U0Xf8H2CY/07wySgaTqgnPdW6n9uV7wK6vih9giyPvjXo1gO3ZFbQ8vQGkwZilv36kghrd91Sr",
	"iwGql60tPGCnzuK7dEdb4/pODBN/c8u0+jK0l3Kbg9EESRhYxuzGRTw2wZweaCO+S8r7NoFl+2WQQN4P",
	"p2LKd+nsX0V1LYp9tHsJNPfEi8uZfJhObhcJELvN3Ih7cP26vkCjeMZIU+sZbgX2HIhyWpZSrGieuHiJ",
	"octfipW7/PF1H17xkTWZOGVffnv24rUD/8N0kuZAZVJbAgZXhe+Vf5pV2U4Vu68SW9DcGTqtpSjY/Lro",
	"dBhjscbi5R1jU6/vSxM/ExxFF3Mxjwe87+V9LtTHLnFHyA+UdcRP4/O0AT/tIB+6oiz3zkYP7UBwOi5u",
	"XPOgKFcIB7h1sFAQ85XcKbvpne746Wioaw9PwrleYWnKuMbBXeFKZEUu+IfeufT0nZAt5u8yE6PBQ7+f",
	"WGWEbIvHgVht36KzK0wdEyt4/br41ZzGo6PwqB0dTcmvuXsQAIi/z9zvqF8cHUW9h1EzlmESaKXitIAH",
	"dZbF4EZ8XAWcw3rcBX22KmrJUgyTYU2hNgrIo3vtsLeWzOEzc79kkIP56XiMkh5uukV3CMyYE3QxlIlY",
	"B5kWtiuoIoJ3Y6oxCdaQFjJ713XCOmP7R4hXBTowE5WzNB7awWfKsFdugynNywRfHrDWmhErNhCbyysW",
	"jGVeG1MztQNkMEcUmSpatrXB3Uy4411x9o8KCMuMVjNnIPFe61x1XjnAUXsCadwu5ga2fqpm+NvYQXb4",
	"m7wtaJcRZKf/7nntU/ILjfU1OjACPJyxx7h3RG87+nDUbLPZlu0QzHF6zJju8J7ROWfdwBzRbu9MJXMp",
	"foO4IwT9R5FCGN7xydDM+xvwWORel6XUTuWmaX0z+77tHq8bD238rXVhv+i6sdpNLtP4qT5sI2+i9Kp4",
	"uWaH5CElLIwwaKcGDLAWPF5BMCy2uvDRR5Tb82SrQLQyzOKnMszlPLHjN6fSwdzLf83pekZjbXCMLmRg",
	"Cra3FSelBfEf+w1QdY0DOzsJIrjrd5mtJFeCbHwQ/aq0N9Rr7LSjNZpGgUGKClWXqQ1TyJWIDFPxNeW2",
	"Ubr5zvIr97UC64I3X62FxDqQKh7SlUHKiqg59urqbZb2w3cytmC2B3ilIGgy7QYittgkUpFr1F1X7nCo",
	"OZ+T02nQ6d7tRsZWTLFZDvjGQ/vGjCq8Lmt3eP2JWR5wvVT4+qMRry8rnknI9FJZxCpBat0Thbw6MHEG",
	"eg3AySm+9/Arch9DMhVbwQODRScETZ4+/AoDauwfp7Fb1vVw38WyM+TZPlg7TscYk2rHMEzSjRqPvp5L",
	"gN9g+HbYcZrsp2POEr7pLpT9Z6mgnC4gnp9R7IHJfou7ie78Dl649QaA0lJsCdPx+UFTw58Gcr4N+7Ng",
	"kFQUBdOFC9xTojD01HSQtpP64bDXmm+J5eHyDzH+tfThfx1b10dWY2gxkLOFUco/oo82ROuUUFv8M2dN",
	"ZLpvSUrOfW1h7BFWtwazuDFzmaWjLImB6nNSSsY12j8qPU/+YtRiSVPD/o6HwE1mXz6J9Npq92rhhwH+",
	"0fEuQYFcxVEvB8jeyyzuW3KfC54UhqNkD5oaC8GpHAzUjYdkDsWF7h56rORrRkkGya1qkRsNOPWtCI/v",
	"GPCWpFiv5yB6PHhlH50yKxknD1qZHfrpzQsnZRRCxhoGNMfdSRwStGSwwoy5+CaZMW+5FzIftQu3gf7T",
	"xj95kTMQy/xZjioCgUdzV7K8keJ/ftlUPkfHqs1E7NgAhYxYO53d7iNHGx5mdev6b23AGD4bwNxotOEo",
	"fawMRN/b8Pr6m08RL9QFye55y+D48FcijQ6OcvzREQJ9dDR1YvCvj9qPLXs/OooXII6a3MyvDRZuoxHj",
	"t7E9/EZEDGDfiI3lwj6gyNVHiBggo5eUuRlnbowpabeG+/jiw90kdsXDTOPk79ePj7sI+MTcEXds16nG",
	"DqejjE64xl5fy6gTem8URLABZtQZ5MKoTmGrm9BKHSW7zg3mKfDT4tss3gEcxXbF8uznpmJZhz1KytNl",
	"NPZ1Zj78xUqerYvFMoBo94wl5Rzy6HBWY/vFa3YR3fPvYuw8BeMj3+32VrXL7SyuAbwNpgfKT2jQy3Ru",
	"Jgix2i4GVRcbyBciIzhP06qhOfn9HsyxxpCRrF0ctqi0i8bEDGdXRmfOcgwujHtD8c1EUj3AT7BRue+a",
	"Y8bBvuHKKs92dJCEsgKvG0WLMgc8mSuQRvMXc8wUbX+OhcFw5KAPA1GleYRvYhkGQXQlORHzebAM4JpJ",
	"yLdTUlKl7CCnZlmwwbknTx+enkaNOYidESu1WPTLfNUs5eEJvmKfuNZBtsD9QcDuh/VDQ1GHbGyfcFyn",
	"RGx1HOOptgcy2jvQ92euJNslse7oeUy+x3o+hohbBdzRCOdL47bLRFZlLmg2xZK9l9+evSB2VvuN7f1u",
	"uzQu0AbVJv+o02B82Uxfr2igHsz4cXYXqDCrVjqpmyrGKu6ZN5q2j6wTSYLWqRA7x+S5NQzWnfftJAQL",
	"P8sCsqCHo1VNkTjMf7Sm6RItbq1rfphXjm8v6tlZ448Icurqnj7IsA3crsOobTA6Jdhte80UYJ45rKBd",
	"5K+ueOksvr7oX3t5suLcUsohTbjrDj6Hot0DZ8U07yqPQtZB/IH2Fttl+NBuqxf4VTzDoNO6tePL9iXj",
	"fOFo8tKZzFPKBWcpFviPiYtYkGyc821EL4S410xN3AmNHK5ow9g6w9VhcbCFrGeEDnF9R3bw1GyqpQ77",
	"p4aNayS2AK0cZ4Ns6vs3OzcP4wpcjyZDRCGfFDISqhMN76/DAg4kI6w1NGC3+848+9FZdbHUwzXjaL9x",
	"aHPKh3XE5Iqhv5UTpslCgHLraeeoqLfmm2OsPZjB5t3xC7Fg6QVb4Bg2OMws20ZC9oc683GRLg7RvPvM",
	"vOsqwtc/t4Kc7KRnZekmHe7uHRUk9YYPIjgWjePDIwLk1uOHo+0gt50BzXifGkKDFcZiQYn3cI8w6g7R",
	"7VG+NYqUpSh8g9g8wWhZWMYjYLxg3DsG4xdEGr0ScGPwvA58p1JJtdUdRvG0S6D5QFg/5t1az/Jth+rW",
	"wzcowTX6OYa3sWluPcA46hcaiZ/yLfGHwlB3IEw8o3kdEBxpVY1SlROiMkyZ6TSvjjEOw7h9m//2BbA3",
	"Ka3+HHtMHHoTDVXem1XZAnRCsyxWsOkbfErwqU99gg2kVd1aqc55a1fe7lObmygVXFXFjrn8C7ecLugG",
	"H6GGsCO932GsHzPb4r+xvkLDO+NCgQ/ONfVxv9lh5eb7ubMxqdfQdKLYIhmPCbxTbo+OZuqbEXrz/Z1S",
	"uk9C/UPkmHa4XLhHMf72rbk4wnK0vahre7XU1WIxwlngc1/Gp65z2OZKeJX1umehLx83L7JlHeD9i1HA",
	"VzQfyO8OPQD2frVW8aEs73SwKAHVruiUpmQnCxos5GMjYDs+hb5jbCjq1Qa93p0t3q11J0KHPVI/tPxP",
	"NvKpYRaDfqebuYaaDT7UN9RrOd8XfKylonmF1L3dRvV6azHIMU06Yv0gnJjQanq/p2V/D8PPx9wM/Rb8",
	"08l5dhDvjPUUmdhRojsQbag/XHK9KbOOwk8pFGtaLMY67Y+Mpr7EZvlByfj+WD7KbgWpxr6aTfSQBDik",
	"gLyZzNv/P5deH9as6qBzV3F9V5n1fjPNPey+VxkmqG5kGxEejy8qflbHiNoUlzVVTT2KTlLo6NS0+RxS",
	"LPu6sxLPfxgFvKnyMvUqOsIyDwrzsDpRAwsXH26AagDaVShnJzxBA5FbgzOUqHsN23uKtKgh2hmxzlK6",
	"SWVUxID1hvgiuUM2RRcWw1RNGYgFH/Poas021f8Hi9oGdaVuOJcnSXNxNLWmdkwZ7+o8ai7z6UF17TDn",
	"YKhYT78p7LAo+hx78CoXAUTryqqhwkbO+51B1q4yK9ZNqs3ovkYrKP+bL5JmZ8nZNYRt39FpsaYy82/c",
	"SdUbezexONDzembWRKj3/d2RWvOY7JHmwogRyVDGTDsovI6ouqds6FtToQThmoOUkNXW8VwoSLTwEe27",
	"4NiFChvfdyMkqMH+Lha4wdq+b5rixdjnimItX+rC+sIFEgkFNdDJoMTw8Jy7kP3MPvdZxr7P0V5jQ02v",
	"+xtu+twEpnpIDKl+TtxtuT97+SZ2B8Y5yMQ7Ibr1hnm75BQWFsyq1F7Q4cGobTOji4PsYCVRlT3tr7Kj",
	"IwRZwNewPbGKj+9U6ncwBNpKThb0oKJiZ5Pv1BKjYnAv7gS8T1soqxQiTwbs3uf9Isldir9m6TVgkbM6",
	"hnegCTW5j+bW2rG5Xm59UeCyBA7Zg2NCzrjNmvA+znb/tM7k/J7eNf8GZ80qW7fc2VeOr3g8/Bwristb",
	"cjM/zG4epsCwultOZQfZU4J3w4eiL9aRluzHY7Xyvtex2ya7ISoLRUwmubDOi2d40GPdgzHHOyhGgD4t",
	"SpzTg6hcxIIVb5KHboaKYyqcDAHSwMekQ9dQuMGjCIg2fo6cQlvby1X1EnMiofEn3rS8Wb9HdUyj785c",
	"z9Lmd3MhodVt2nxtSxnWkf2+LTyVM6YlldubFCHr9cjuWU8Gsbw3MqcOymkW0gTm9HGY52KdILNK6kL+",
	"MdXWvKfal7HvKtV8Z071DIIQH6qcoLYlS5qRVEgJafhFPKHNQlUICUkuMOIn5oycayN3F5jFwkkuFkSU",
	"qcjANsSIU9DQXBXnFMUmCAIsoiiwtIPpkPabgI5HTnlXDdpt2Rq76MS6tQaCV0G5MjUOQ/blPrw7mpvH",
	"efOcbZBuQMaO/JxoWcGUuDe6TYDdwacSCPbUR1BqWlqzPMfMWLYJnHC1DzuO2gGx9xwj7FYMwzDaWdJW",
	"Gg5bzsOBHecdnLuazpOfVIWRMpgiY6Z4QgqhtNM07UjNkpvoo/up4FqKPG8bpayIvnCOipd0c5am+oUQ",
	"1zOaXj9AvZYLXa80m/oE0m6cWDOT7NROGtkdv1uL1L6HUVOOaA9uge842cGdqwMw3+3noPtt7mexDv/t",
	"dbWZaVyNOeOEalGwNH6m/lyBV4PhUjEWFS3KZJvH2TR6fA0Pe3hZ1X52ZJF9NAOn0e5XZ8QxAudvRHZj",
	"/osSeHdcMgfHaAYuyj5zcVJUkg7Keh0AEFKb26kraTvOhZJYzVXEwuaCo7e0C+jIWwWDUm4HmxnhzoHS",
	"cCugeoFwNYD3rfFhaotn2aC6mdj45w+a6lo3Av7DbipvMY+haJ+LhrSkjffxlTgGOEK8hu/O0JhLzOud",
	"jQ2QqbuDjrzhAwCGQ2ZaMIwKnDkUjDllOWRJrLnceW2jmgaatsvS6fZ8Zspx8pRWvrebGbuS4CpDWBFf",
	"tv1fJTWkJOrX+5ZknsEGbIi/bXRPlfV7eP8L5LanW8cYIMokhxW0IolcuYoKRU22Av+tqj8mGUCJ3siu",
	"jSwWIhPe5R3DiVt7EgRZjMFu1JJiEWt3iuwxk0SNOhue2GOixh4lA9GKZRVt4U8dKnK0zYDmKEdQ1dMR",
	"Eq9Hjp3mJzvCGz/Amf8+Jsp4TLwbx4cOZkFx1O1iQHtD5io1dOp5PGIurMVSO1hwtqx2xFoSb/iGKuma",
	"Dxsk+yTfqFsj94kJHiD22w2kKNU4fQcyp/EMOClcWQekdg6QWa3AfBKxti+BEy6CHnprqmpVpSkS53+w",
	"E+NLjDtt+gZO5Saw7fY7S3AwojrVogYVCVnT6c3N85/kJO48iIPjxWhEgcsE22H/8tTt1A58AXsVc7Of",
	"RvbHLnTuFnNcfEpmlR8oz8XaNsUL9dDn4P2glvq8C8iJ5ay+ln0A39TVL+yaOlgQulzQLRES/zFa5z8q",
	"mrP5FvmMBd9/RtSSGhJyjlcbEeACAs3Eu8WrqQfMW1uEn8qum40dMxhua0YJgDYXue9eIkhBryHcBgx2",
	"sPwz1YZxqmqGlgtzZXe2s48Ft3hfg6KgWajpYyW8dp9oXxvVfP2/m7SocCpfwKrMaepbILoeLG0+g21O",
	"PXHpJRS78+b6fM2TQN06tSFa6ROtsxuYTA9kXbFg9KH+Ei2wey0le601brWMQ7rPNznrOzIORy3lrndh",
	"bNRND+iwEd0+8MO+fB8H/9EilUPLGAP+HwXvA504Q3ht082PgOVWMYYIrNZaPRObRMJc7QswseZqo87L",
	"poyDN7EynkqgykbcnL9yimdTg5FxowjbmNDap1mPksGc8YZZMl5WOqLHYClGvg0QFhr9Ea0DLrQhKcEI",
	"kyuav1qBlCwb2jhzOmzPurAGvnd0uG8jJoz6Tu0PwFSjw2GqXmNGD18zF7jtsmPDNZWmPKMyC19nnKQg",
	"zb1P1nSrbu5Rqp0D+3xKNJBm2gnkgXcJSdsCkm+dU/iW/p4aQHqHjp8RDhuMC444a6xpR4sB/0wfhj+F",
	"w6agmyQXC0woGzgQrvgmevisCig4msGtfDZu3X4exX6D3dNg3XHHiLTAWcdMsfvcv8KtRDXyJ870zpNv",
	"bZTdDD8bd2sPpkcqXzTB/5ZY+ucxlpTp6nCEiZle2PSJ7J72INhEGPAPte3iA7uIYRAuozc0go/v59SO",
	"tIilflrLQIIWA7UjvB9UE8pOUxee1Tel9UwNFilTlzh7oKXN2uf9vTQAnm2+7c56e9o6ZMaMc0gTrN2p",
	"skkpyiQdE/NpWxNkzk3gIG3DOEAfgRNgYN11eIyqm3W0SuC0unYc2gdssGvIPm9Xme5S+ofMRAMcve2C",
	"EHPkZbY1NVq3MJOnNqZMvXrtfdJtM1jNJAglEtJKopl4Tbf7+yoNlMS9+OvZFw8f/fLoiy+JeYFkbAGq",
	"Kavc6UvUxAUy3rX7fNxIwN7ydHwTfCK6RZz3P/qkqnpT3Fmz3FY1NRN7XZkOsS9HLoDIcYz0w7nRXuE4",
	"TWj/H2u7You88x2LoeD33zMp8jxe1r6WqyIOlNhuBS4Uo4GUIBVT2jDCtgeU6SYiWi3RPIjFTVe2sIjg",
	"KXj7saMCpgdCrmILGQqoRX6Gab7Oa0RgU+aOV1lPz651OT3NWuhQaMSomBmQUpROtGdzEoMIM4hkBbVl",
	"3Bk+0SIexMjWzNZGy8YI0UWex0kv7Ai8m9u3u1XqOKc3mxgRL/yhvAFpDvknhlPYb8JJGtP+H4Z/RHLy",
	"74xr1Mv9PXhFVD+4WdfxUaD187Mj5IEADGTbtvIkg0SxoNKqtF4C9Cd4B3JX/HjZOJb3poUgJP6DPeCF",
	"6bPNe3UmgwPnE1cwfVkjJVjKuyFKaC1/X0auZ731RRJskTOaaA3KsiXRFwuDdGv1rM5iHtBKesnOUghN",
	"jGaa55EkaWvHwTMVEo5RCeSK5h+fa3zHpNJniA/I3gynRoWZsiGSLSrVzUq2vaCj5g6yYu9uav4aE7P/",
	"A8weRe85N5RzwvduMzTuYEvuhb8VbK43WeOYNsjq4Zdk5roJlBJSprrO/bUXTurEUJBs7gJaYaP3ZKLu",
	"W+fPQt+CjOc+Eof8GLi3ap+9g7A5op+YqQyc3CiVx6ivRxYR/MV4VNh9dM91ccvK8zerABLU8jqwAki/",
	"r+rY5eE68NKpFPTXOfq2buE2clE3axtbvmZ0Afurq7d6NqbqTLzYvPkcy97cSdX5g2rO/w4FbyyO3Bhu",
	"3hjF/DxUAtWW+Rwo09zZj4rlewNWWkW3P0wnC+CgmMKy0r+45hgf9y71ENjKC/2jamG9TbkYi5jIWluT",
	"B1MF5bRHVNJ2n0XKH2NWY1pJprfYGNUb0Ngv0Va239e1PVxtmNqX5u4+La6hbk7dVAKplL9dvxc0x/vI",
	"uvi4uYVEfky+tcWe3UH5+t7sX+HxX55kp48f/uvsL6dfnKbw5IuvTk/pV0/ow68eP4RHf/niySk8nH/5",
	"1exR9ujJo9mTR0++/OKr9PGTh7MnX371r/cMHzIgW0B9lfenk/9MzvKFSM5enyeXBtgGJ7RkP4DZG9SV",
	"5wIb9xmkpngSoaAsnzz1P/0ff8KOU1E0w/tfJ64BzWSpdamenpys1+vj8JOTBab+J1pU6fLEz4Pt1Fry",
	"yuvzOkbfxuHgjjbWY9xURwpn+OzNtxeX5Oz1+XFDMJOnk9Pj0+OHrncvpyWbPJ08xp/w9Cxx30+w1OKJ",
	"clXUT+pcrQ/T3rOytDXWzSNHo+6vJdAcC+yYPwrQkqX+kQSabd3/1ZouFiCPMXvD/rR6dOKlkZP3rnLC",
	"h13PTsLIkJP3rQIT2Z4vfeTDvldO3vveoLsHbPWFdDFnBqlRl+f3oF25JWt7iNTqQE+DG31KFJZQNz+V",
	"kglzXqfm8s0A4wIwvE1iLWktK55aZ7GdAjj+9+XZf6LD/OXZf5KvyenUJRwoVGhi09uM65rQzjMLdj9O",
	"UX2zPaurmTTO9cnTtzEjkwsWLatZzlJi5RQ8qIYKg3NUj9jwSbQoTpom7Q3XN5z8NPnq3fsv/vIhJk32",
	"ZOMaSUGBj5bXV/jWjoi0gm6+HkLZxkWgm3H/UYHcNoso6GYSAtz3oEaqnvkEId/hNoxNDKIW//3i1Y9E",
	"SOK059c0va6To3w2XJMBGCbDmS+HIHYXawg08Kowd5TLsirUomzXgq3R/A7bwSGgyE4enZ56Huo0lOCA",
	"nrhzH8zUMWv1CQ3DdAJDZT8VXhHY0FTnW0JVECeBUYu+dWMnhU2USSuQfqdptD+j25JoFsKh2fiRYuVC",
	"03wPfJedNnctdLiQn9JcsvvT33vIiELwLiZGhFvraeTz7v732N2+VEJKYc40w7js5srx11kLSCeL5lsP",
	"7kChkWPyN1Gh7Gi0gkpDrMk3zmB9Im5OVxcpCKRrUofwydFRd+FHR03Y3xzWyGQpxxe76Dg6OjY79eRA",
	"VrbTTt2qKDvq7BwyXG+zXtJNHTVNCRc84bCgmq2ABArnk9OHf9oVnnMbp26EZSvUf5hOvvgTb9k5N4IN",
	"zQm+aVfz+E+7mguQK5YCuYSiFJJKlm/JT7xOBAh6SPfZ30/8mos194gw+mpVFFRunRBNa55T8aAFzE7+",
	"06tw1AjayEXpQmEsDIqoVqb1VRD5YvLug9cBRuoeu147mWGLv7GvQqiwDGsn6JlQJ+/Rtj74+4lzkMYf",
	"oo/DKs8nvvbiwJu2ylb8YUsreq83ZiG7hzPvBOOlVKfLqjx5j/9BPThYka3ffqI3/ARjQk/etxDhHvcQ",
	"0f69+Tx8Y1WIDDxwYj5XqMftenzy3v4bTASbEiQz1xEWynS/2oLGJ9gqd9v/ecvT6I/9dbSKuQ78fOLN",
	"MDGVuv3m+9afbZpSy0pnYh3Mgg4M633rQ2YeVqr798maMm2EJFdDFHvr9z/WQPMT1zum82tTrr33BGvQ",
	"Bz92xKpS2CJCbY32DV1ftnJBpS2W8Y1AQ8UQw90kM8aRC4VcsjFL2od9FanHG7Eb5VY3nt2IDKoFmUlB",
	"s5QqbNnuuiz1dOMPt9S/urU9ziN+OwQTzQ39cpSGnxzvdebguGOEzGBfyPlzP2GTgPa7C2Y9iL6hGfFV",
	"pxLykuZmwyEjZ078b2Hj9xaqPr0U9InFlo8mZ3zjD58iFEvwtRREGS+aE7RDGyNUGC3SMIAF8MSxoGQm",
	"sq3rWDWRdK03tkZHl7md0PaN0TZEUkkLNfTwDqyUf2zT5D6L5GdD4GdD4GdT0WdD4Ofd/WwIHGkI/Gwm",
	"+2wm+x9pJjvENhYTM535Z1jaxBbatDWv1fto05+iZvHt6mFM1zJZK40UW2EwfUzIJZZ+oeaWgBVImpOU",
	"KitduTJFBUZ3Yg0yyJ5e8aQFiY2hNBPfb/5rg1evqtPTx0BOH3S/UZrlecib+9+ivIuPbH7J1+RqcjXp",
	"jSShECvIbDJsWB/dfrV32P9Vj/uq11gBs+Cxto4vVUZUNZ+zlFmU54IvCF2IJvAaC7JygU9AGuBseyrC",
	"9NQlqjCXHe0ambfLuLcl974EcN5s4d6Qgg65xKMJDOEdGErwL2PiCP5HS+k3rWZ1W0a6c+weV/3MVT4G",
	"V/nkfOXP7qQNTIv/LcXMJ6dP/rQLCg3RPwpNvsOkgtuJY65QaBrt0nVTQcsXivHmviYwOQz0xVu0DvF9",
	"+85cBArkyl+wTdzq05MTrBy2FEqfTMz1145pDR++q2F+72+nUrIVdgRG66aQbME4zRMX+Jk0samPjk8n",
	"H/5/AAAA//+T3ME+vR8BAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
