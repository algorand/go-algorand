// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
