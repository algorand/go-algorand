// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
