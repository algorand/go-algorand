// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. WARNING: This endpoint is experimental and under active development. There are no guarantees in terms of functionality or future support.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
