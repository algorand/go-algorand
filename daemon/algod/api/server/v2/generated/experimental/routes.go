// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
