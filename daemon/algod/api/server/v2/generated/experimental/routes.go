// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
