// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
