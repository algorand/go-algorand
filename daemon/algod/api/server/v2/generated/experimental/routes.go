// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XPcNrLgv4Ka96oc+4aS/JG8taq23im2k9XFSVyWkr33bF8WQ/bMYEUCXAAczcTn",
	"//0KDYAESZDDkSb2btX9ZGuIj0aj0ehu9MfHWSqKUnDgWs3OP85KKmkBGiT+RdNUVFwnLDN/ZaBSyUrN",
	"BJ+d+29Eacn4ajafMfNrSfV6Np9xWkDTxvSfzyT8o2ISstm5lhXMZypdQ0HNwHpXmtb1SNtkJRI3xIUd",
	"4vLl7NPIB5plEpTqQ/kzz3eE8TSvMiBaUq5oaj4pcsv0mug1U8R1JowTwYGIJdHrVmOyZJBn6sQv8h8V",
	"yF2wSjf58JI+NSAmUuTQh/OFKBaMg4cKaqDqDSFakAyW2GhNNTEzGFh9Qy2IAirTNVkKuQdUC0QIL/Cq",
	"mJ2/myngGUjcrRTYBv+7lAC/Q6KpXIGefZjHFrfUIBPNisjSLh32Jagq14pgW1zjim2AE9PrhPxYKU0W",
	"QCgnb797QZ4+ffrcLKSgWkPmiGxwVc3s4Zps99n5LKMa/Oc+rdF8JSTlWVK3f/vdC5z/yi1waiuqFMQP",
	"y4X5Qi5fDi3Ad4yQEOMaVrgPLeo3PSKHovl5AUshYeKe2MZH3ZRw/i+6KynV6boUjOvIvhD8SuznKA8L",
	"uo/xsBqAVvvSYEqaQd+dJc8/fHw8f3z26d/eXST/7f78+umnict/UY+7BwPRhmklJfB0l6wkUDwta8r7",
	"+Hjr6EGtRZVnZE03uPm0QFbv+hLT17LODc0rQycsleIiXwlFqCOjDJa0yjXxE5OK54ZNmdEctROmSCnF",
	"hmWQzQ33vV2zdE1SquwQ2I7csjw3NFgpyIZoLb66kcP0KUSJgetO+MAF/fMio1nXHkzAFrlBkuZCQaLF",
	"nuvJ3ziUZyS8UJq7Sh12WZHrNRCc3Hywly3ijhuazvMd0bivGaGKUOKvpjlhS7ITFbnFzcnZDfZ3qzFY",
	"K4hBGm5O6x41h3cIfT1kRJC3ECIHyhF5/tz1UcaXbFVJUOR2DXrt7jwJqhRcARGLv0Oqzbb/r6uffyJC",
	"kh9BKbqCNzS9IcBTkUF2Qi6XhAsdkIajJcSh6Tm0DgdX7JL/uxKGJgq1Kml6E7/Rc1awyKp+pFtWVAXh",
	"VbEAabbUXyFaEAm6knwIIDviHlIs6LY/6bWseIr730zbkuUMtTFV5nSHCCvo9s9ncweOIjTPSQk8Y3xF",
	"9JYPynFm7v3gJVJUPJsg5mizp8HFqkpI2ZJBRupRRiBx0+yDh/HD4GmErwAcP8ggOPUse8DhsI3QjDnd",
	"5gsp6QoCkjkhvzjmhl+1uAFeEzpZ7PBTKWHDRKXqTgMw4tTjEjgXGpJSwpJFaOzKocMwGNvGceDCyUCp",
	"4JoyDplhzgi00GCZ1SBMwYTj+k7/Fl9QBd88G7rjm68Td38purs+uuOTdhsbJfZIRq5O89Ud2Lhk1eo/",
	"QT8M51ZsldifexvJVtfmtlmyHG+iv5v982ioFDKBFiL83aTYilNdSTh/zx+Zv0hCrjTlGZWZ+aWwP/1Y",
	"5ZpdsZX5Kbc/vRYrll6x1QAya1ijChd2K+w/Zrw4O9bbqF7xWoibqgwXlLYU18WOXL4c2mQ75qGEeVFr",
	"u6Hicb31ysihPfS23sgBIAdxV1LT8AZ2Egy0NF3iP9sl0hNdyt/NP2WZm966XMZQa+jYXcloPnBmhYuy",
	"zFlKDRLfus/mq2ECYBUJ2rQ4xQv1/GMAYilFCVIzOygtyyQXKc0TpanGkf5dwnJ2Pvu308b+cmq7q9Ng",
	"8tem1xV2MiKrFYMSWpYHjPHGiD5qhFkYBo2fkE1YtodCE+N2Ew0pMcOCc9hQrk8alaXFD+oD/M7N1ODb",
	"SjsW3x0VbBDhxDZcgLISsG34QJEA9QTRShCtKJCucrGof/jqoiwbDOL3i7K0+EDpERgKZrBlSquHuHza",
	"nKRwnsuXJ+T7cGwUxQXPd+ZysKKGuRuW7tZyt1htW3JraEZ8oAhup5AnZms8GoyYfwyKQ7ViLXIj9eyl",
	"FdP4L65tSGbm90md/zVILMTtMHGhouUwZ3Uc/CVQbr7qUE6fcJy554RcdPvejWzMKHGCuROtjO6nHXcE",
	"jzUKbyUtLYDui71LGUclzTaysN6Tm05kdFGYgzMc0BpCdeeztvc8RCFBUujA8G0u0pu/ULU+wplf+LH6",
	"xw+nIWugGUiypmp9MotJGeHxakabcsRMQ1TwySKY6qRe4rGWt2dpGdU0WJqDNy6WWNRjP2R6ICO6y8/4",
	"H5oT89mcbcP67bAn5BoZmLLH2T0yZEbbtwqCnck0QCuEIIVV8InRug+C8kUzeXyfJu3RK2tTcDvkFoE7",
	"JLZHPwbfim0Mhm/FtncExBbUMejDjINipIZCTYDvpYNM4P479FEp6a6PZBx7CpLNAo3oqvA08PDGN7M0",
	"xtmLhZB34z4dtsJJY3Im1IwaMN95B0nYtCoTR4oRs5Vt0BmoeeUbZxrd4WMYa2HhStM/AAvKjHoMLLQH",
	"OjYWRFGyHI5A+uso019QBU+fkKu/XHz9+MlvT77+xpBkKcVK0oIsdhoU+crpZkTpXQ4P+ytD7ajKdXz0",
	"b555Q2V73Ng4SlQyhYKW/aGsAdSKQLYZMe36WGujGVddAzjlcF6D4eQW7cTa9g1oL5kyElaxOMpmDCEs",
	"a2bJiIMkg73EdOjymml24RLlTlbHUGVBSiEj9jU8YlqkIk82IBUTkdeUN64FcS28eFt2f7fQkluqiJkb",
	"Tb8VR4EiQll6y6fzfTv09ZY3uBnl/Ha9kdW5eafsSxv53pKoSAky0VtOMlhUq5YmtJSiIJRk2BHv6O9B",
	"oyhwzQq40rQof14uj6MqChwoorKxApSZidgWRq5XkApuPSH2aGdu1Cno6SLGm+j0MAAOI1c7nqKd8RjH",
	"dlhxLRjHRw+142mgxRoYc8hWLbK8v7Y6hA471QMVAceg4zV+RkPHS8g1/U7I68YS+L0UVXl0Ia8759Tl",
	"ULcYZ0rJTF+vQzO+ytveNysD+0lsjV9kQS/88XVrQOiRIl+z1VoHasUbKcTy+DDGZokBih+sUpabPn3V",
	"7CeRGWaiK3UEEawZrOFwhm5DvkYXotKEEi4ywM2vVFw4G/DXwIdifN/Wobyn11bPWoChrpRWZrVVSfD1",
	"tndfNB0TmtoTmiBq1MDbVf3oaFvZ6awvQC6BZjuyAOBELNwDkXu6wkVSfHrWXrxxomGEX7TgKqVIQSnI",
	"EmeY2guab2evDj2CJwQcAa5nIUqQJZX3BvZmsxfOG9gl6CihyFc//KoefgF4tdA034NYbBNDb63mu1fA",
	"PtTTph8juO7kIdlRCcTfK0QLlGZz0DCEwoNwMrh/XYh6u3h/tGxA4nvcH0rxfpL7EVAN6h9M7/eFtioH",
	"3P+cemskPLNhnHLhBavYYDlVOtnHlk2jlg5uVhBwwhgnxoEHBK/XVGn7hsx4hqYve53gPFYIM1MMAzyo",
	"hpiRf/UaSH/s1NyDXFWqVkdUVZZCashia+CwHZnrJ9jWc4llMHat82hBKgX7Rh7CUjC+Q5ZdiUUQ1fVT",
	"i3Oy6C8OHyTMPb+LorIFRIOIMUCufKsAu6EL1AAgTDWItoTDVIdyar+r+UxpUZaGW+ik4nW/ITRd2dYX",
	"+pembZ+4qG7u7UyAQs8r195Bfmsxa53f1lQRBwcp6I2RPdAMYh+7+zCbw5goxlNIxigfVTzTKjwCew9p",
	"Va4kzSDJIKe7/qC/2M/Efh4bAHe8UXeFhsR6McU3vaFk7zQyMrTA8VRMeCT4haTmCBpVoCEQ13vPyBng",
	"2DHm5OjoQT0UzhXdIj8eLttudWREvA03Qpsdd/SAIDuOPgXgATzUQ98dFdg5aXTP7hT/BcpNUMsRh0+y",
	"AzW0hGb8gxYwYEN1DuLBeemw9w4HjrLNQTa2h48MHdkBg+4bKjVLWYm6zg+wO7rq150g+sxIMtCU5ZCR",
	"4INVA8uwP7H+N90x76YKTrK99cHvGd8iy8mZQpGnDfwN7FDnfmMdOwNTxzF02cio5n6inCCg3l3MiOBh",
	"E9jSVOc7I6jpNezILUggqloUTGvrsN1WdbUok3CA6LvGyIzuEc86RfodmPKqeIVDBcvrb8V8ZnWCcfiu",
	"O4pBCx1OFyiFyCdYyHrIiEIwyd+DlMLsOnO+49572FNSC0jHtPEFt77+H6gWmnEF5L9ERVLKUeWqNNQy",
	"jZAoKKAAaWYwIlg9p/PsaDAEORRgNUn88uhRd+GPHrk9Z4os4dYHXJiGXXQ8eoR2nDdC6dbhOoI91By3",
	"y8j1gQ8+5uJzWkiXp+z3LHAjT9nJN53B61cic6aUcoRrln9vBtA5mdspaw9pZJpXBY476S0nGDq2btz3",
	"K1ZUOdXHeLWCDc0TsQEpWQZ7ObmbmAn+akPzn+tuGEwCqaHRFJIUQyAmjgXXpo+NmtinGzbeZKwoIGNU",
	"Q74jpYQUrJe/EflUDeMJsf5/6ZryFUr6UlQr54Bmx0FOXSlrU5EV7w0RlYb0lidonY5xbud07AM9jBwE",
	"1OhiXdO21TxuaT2fi+2ZcqUGyOua+qOvW/PZoKpqkLppVFWLnHa0ygQu3hLUAvw0E098A0HUGaGlj69w",
	"W8wpMJv7x9jam6FjUPYnDlzimo9DXnFGT853R5BW7EBEQilB4d0S2peU/SqWYWSau3zUTmko+iZ42/W3",
	"geP3dlDREzxnHJJCcNhFg7EZhx/xY/Q44f020BkljaG+XeWhBX8HrPY8U6jxvvjF3e6e0O5Tk/pOyGO9",
	"ZdoBJ8vlE54O976Tuynv+sBJ8zzyJujiVroMQM3rOHkmCVVKpAyFrctMze1Bc8+ILsiljf43tTfuEc5e",
	"d9zO41cYEonGXchLQkmaMzT9Cq60rFL9nlM0LgVLjXgteS162Nz4wjeJ2zcj5kc31HtO0WOtNjlFPS2W",
	"ELGvfAfgrY6qWq1A6Y6SsgR4z10rxknFmca5CnNcEnteSpDoOnRiWxZ0R5aGJrQgv4MUZFHpttiOYVlK",
	"szx3L3FmGiKW7znVJAeqNPmR8estDudf6/2R5aBvhbypsRC/3VfAQTGVxL2rvrdf0fHVLX/tnGAxjN5+",
	"tm83ZvwmdmuHtqcmNPz/fPWf5+8ukv+mye9nyfP/cfrh47NPDx/1fnzy6c9//r/tn55++vPD//z32E55",
	"2GNBQw7yy5dOpb18iXpL83jTg/2zGe4LxpMokYVuGB3aIl9hgKwjoIdtq5Zew3uut9wQ0obmLDO85S7k",
	"0L1hemfRno4O1bQ2omPF8ms9UBu4B5chESbTYY13lqL6Donx8Dx8TXQRd3helhW3W+mlbxt94h3DxHJe",
	"h2Da7CznBOPz1tR7Nbo/n3z9zWzexNXV32fzmfv6IULJLNvGoicz2MaUPHdA8GA8UKSkOwU6zj0Q9qgP",
	"nHXKCIctoFiAVGtWfn5OoTRbxDmc9+l3xqItv+TW2d6cH3yb3LknD7H8/HBrCZBBqdexrA0tQQ1bNbsJ",
	"0PEXKaXYAJ8TdgInXWNNZvRF542XA11i9gDUPsUUbag+B5bQPFUEWA8XMskiEqMfFHkct/40n7nLXx1d",
	"HXIDx+Dqzlk/RPq/tSAPvn91TU4dw1QPbCCvHToIvYyo0i66qOVJZLiZzVVjhbz3/D1/CUvGmfl+/p5n",
	"VNPTBVUsVaeVAvktzSlP4WQlyLkPWHpJNX3Pe5LWYDqpIFSMlNUiZym5CRWShjxtipD+CO/fv6P5Srx/",
	"/6HnVNFXH9xUUf5iJ0iMICwqnbgEB4mEWypjj1aqDnDHkW0Gk7FZrZAtKmvZ9AkU3PhxnkfLUnUDXfvL",
	"L8vcLD8gQ+XCOM2WEaWF9LKIEVAsNLi/Pwl3MUh66+0qlQJF/lbQ8h3j+gNJ3ldnZ0+BtCI//+aufEOT",
	"uxImW1cGA3G7RhVcuFUrYaslTUq6ir2NvX//TgMtcfdRXi7QxpHnBLu1Ik69Rz0O1SzA42N4AywcB0fP",
	"4eKubC+fzCq+BPyEW4htjLjRvNjfdb+CGNQ7b1cnjrW3S5VeJ+ZsR1elDIn7nalz3KyMkOXdKBRbobbq",
	"0gEtgKRrSG9cnhYoSr2bt7p7Tx0naHrWwZTN4GMjyDCHBL4sLIBUZUadKE75rhvMr0Br7w/8Fm5gdy2a",
	"FBSHRO+3g8nV0EFFSg2kS0Os4bF1Y3Q337mDoWJflj4mG4PzPFmc13Th+wwfZCvyHuEQx4iiFew8hAgq",
	"I4iwxD+Agjss1Ix3L9KPLc9oGQt780Wy+XjeT1yTRnlynlvhatDqbr8XgOnAxK0iC2rkduEyWdmA6YCL",
	"VYquYEBCDh93JoYltx6EcJB99170phPL7oXWu2+iINvGiVlzlFLAfDGkgspMx1/Pz2TfD93LBCaodAhb",
	"5Cgm1Y6NlulQ2Xpksxn3hkCLEzBI3ggcHow2RkLJZk2VT7KFucj8WZ4kA/yBCQDG0r5cBq5mQcKxOqmL",
	"57ndc9rTLl3yF5/xxad5CVXLCSlbjISP3u2x7RAcBaAMcljZhdvGnlCaZATNBhk4fl4uc8aBJDGvtcAM",
	"Glwzbg4w8vEjQqwFnkweIUbGAdj4Lo4Dk59EeDb56hAguUumQP3Y+KIe/A3xuC/rx21EHlEaFs4GXrVS",
	"zwGoc3Ws76+Owy0OQxifE8PmNjQ3bM5pfM0gvewjKLZ2co04z4yHQ+LsyAOIvVgOWpO9iu6ymlBm8kDH",
	"BboRiBdim9jAz6jEu9guDL1HXdsxDDV2MG2elweKLMQWvX3warGu1HtgGYbDgxFo+FumkF6x39BtboEZ",
	"m3ZcmopRoUKScea8mlyGxIkpUw9IMEPk8lWQuuVOAHSMHU0eZKf87lVS2+JJ/zJvbrV5k5LMRw3Fjv/Q",
	"EYru0gD++laYOtnKm67EErVTtJ1W2nlmAhEyRvSGTfQfafpPQQpyQKUgaQlRyU3s5dToNoA3zpXvFhgv",
	"MJsN5buHgSeUhBVTGhojuveT+BLmSYpJ9IRYDq9Ol3Jp1vdWiPqass+I2LG1zM++AnQlXjKpdIIvENEl",
	"mEbfKVSqvzNN47JS29fKppxlWZw34LQ3sEsylldxenXz/vDSTPtTzRJVtUB+y7h1WFlgiuSoB+bI1NZJ",
	"d3TBr+2CX9OjrXfaaTBNzcTSkEt7jn+Rc9HhvGPsIEKAMeLo79ogSkcYZBA52+eOgdwUvPGfjFlfe4cp",
	"82Pv9drx8btDd5QdKbqWwGAwugqGz0RGLGE6yDDcD2kdOAO0LFm27dhC7aiDGjM9yODh87J1sIC76wbb",
	"gwEUad/CEiRETQj1J+sdXYtLYV4+jOxupcKJbPqg8b9tSvMXZV0oIZgoqiW4XInDu9h4V7ZyCbaB3Sf6",
	"1IZ6M90UlF7F7eNXRltoYy/QmWz67T2YZAPad0hjAY8Np2LKF4/o014dyLiP/K6B5j/A7lfTFpcz+zSf",
	"3c8aHSNfN+IeXL+pT0wUz+jtYK2TrcelA1FOy1KKDc0TZ7MfOu1SbNxpx+bexP+Zb4+4Zfj61cXrNw78",
	"T/NZmgOVSS19Da4K25X/MquyCRQHDohPTm/UaK8GWek82Pw661to579dg8vyHQj4vXSkzRtOcBSd3X8Z",
	"d7raa8V3z012iSPPTlDWr06NRdQ+OrUfmuiGstybIj20Aw5SuLhpOW2jXCEc4N4PVsG7Y3JUdtM73fHT",
	"0VDXHp4UzjWSh7ywqfYVEbzrlYBu5LvSOTIUFJOJWkNTnznxqkDjTKJylsbN1nyhDHFw+xxpGhNsPCDf",
	"mxErNvC6zSsWjGWaTUkX1AEymCOKTBXNWNTgbiGcdFBx9o8KCMuAa/NJ4qnsHFQvn+CovevUiGP9udzA",
	"9tGjGf4+YluYSLd74yEQ4zJb+PjZA/dlbYXwC62NfI3YdqgPRThj70oc8X9w9OGo2fqDrtuPmGHVoz7/",
	"M4Rh09/vL7nkhTuX0XdgjmgJJaaSpRS/Q1x1RotDJAbMpw5m6Dj0O4TyY1g4pMViaoNZUwmqmX3fdk8X",
	"z4c2/t7iuF90na04LovHz+30rRqRu1U83ZjD1JAcGJpA2x4yA/wBz0jwJozZXv3zCOX2UNgoppajZfxo",
	"hS7Np3b85mg5mHtu4Dm9XdBYKlwjjhmYgj1qPeRoQXxnj2NVh/rY2UngyFC3ZTYTQgmyCWTtZ1W6o2hl",
	"p50sVDUyFBJNKD3N7eNzrkRkmIrfUm5LCJl+lum43gqs5dX0uhUS85iouDaZQcoKmsdlrCztvy9kbMVs",
	"dZxKQVB+xQ1kK49ZKnIlbOoANoeayyU5mwc1oNxuZGzDFFvkgC0e2xYLqvDOq62gdRezPOB6rbD5kwnN",
	"1xXPJGR6rSxilSC1+IuKYP1yugB9C8DJGbZ7/Jx8hW/Gim3gocGik2Rm54+fo8Xf/nEWuypddaMxvpsh",
	"4/2rY7xxOsZHczuG4XRu1JNoygdb3nCYxY+cJtt1ylnClu5W2H+WCsrpCuJuSsUemGxf3E204nbwwjNb",
	"m0tpKXaExfl0AZoa/jQQ+mDYnwWDpKIomC7cy6IShaGnpraKndQPZwt9ubTYHi7/ER/oS/8+2VG3P6/F",
	"3koCsVWjG8VPtIA2WueE2uQ1OWtcZ3yyfnLpc2NhnvA6PbjFjZnLLB0FQvSkWZJSMq5RBav0MvkTSddU",
	"0tSwv5MhcJPFN88iudHbOXr5YYB/drxLUCA3cdTLAbL3gofrS77igieF4SjZwybUKDiVg54E8TfjoYfr",
	"8aGniq9mlGSQ3KoWudGAU9+L8PjIgPckxXo9B9HjwSv77JRZyTh50Mrs0C9vXzspoxAylvCyOe5O4pCg",
	"JYMNOo7GN8mMec+9kPmkXbgP9F/22cuLnIFY5s9yTBH4VkT0eJ+vv37GcYESETvK0DE1HwwZLNxQc9LO",
	"jf75+ehxXPDiz6z+CaD/qmq+eDzgH11EfGFywQ1sHEnsSgYIJagNESWZrP4eOHhQ8q3YTiWczin0xPNP",
	"gKIBlIxYGQ7FyNCbHLl8GdKlwckCcmFE6zCVb2iK/NfBrVn0fATDFcuzX5vA7k5xE0l5uo4+iS9Mx9+a",
	"Moz1Eq2UEc0OuqacQx4dzkr0v3nJP6Kb/F1MnadgfGLbbr0Vu9zO4hrA22B6oPyEBr1M52aCEKvtmNk6",
	"JiNfiYzgPE0qyoYh9uv0BNUU/lGB0jGjG36wfqFopzcM1ybzJ8Az1PlPyPe20voaSCvPGOraPhFMOylC",
	"VeaCZnNMUHP96uI1sbPaPraYmC0msEJVs72KqIFvepKIui5YPPpp+jjj4Rhm1Uonde7/WHy5adFUJ2Cd",
	"NytUQkPsnJCXQc1kG4puhiCYn0gWRm+uR7MSKNKE+Y/WNF2jYt26vIZJfnoVDE+VKqg8W1eQq1PP4rkz",
	"cLtCGLYOxpwIvQZ5y5QtsA0baIe01/kdnGHHh7i3lycrzi2lnBwgR9SJZg9FuwfOCiH+WSsKWQfxB6pV",
	"tojMoUVBrrBXNBNet8JIr+SsDZCuK4P96IsGUy44SzEPXUwIcpW4p7z5TkjZFzeOq5k7oZHDFa1rUnva",
	"OiwOVjrxjNAhrv/oFHw1m2qpw/6pseTzmmqyAq0cZ4Ns7svzOGsu4wpcKmGs2x7wSSFb7+i1B1C/9Gr9",
	"hHcgGWFk3YB6/p359pMz3mDIyQ3jqKY5tDnR2tpbsVCwNrod02QlQLn1tNMLqHemzwlG2mew/XDiCwvj",
	"GPYZ2izb+lz0h7rwHhjO48G0fWHauvxn9c+tIAY76UVZukmHizdF5QG95YMIjohAiX/KDJBbjx+ONkJu",
	"o65TeJ8aQoMNOl5AifdwjzDqQkadInlGLbAUhS2I9QKNJkFhPALGa8ahKXsduSDS6JWAG4PndaCfSiXV",
	"VgScxNOugebobRFjaEq7B6T7DtXN/mZQgmv0cwxvY1ODaYBx1A0awY3yXV1t21B3IEy8wDL/DpH9ikoo",
	"VTkhKsOgpE6NpRjjMIzbV3FrXwD9Y9CXiWx3TIV46E00FGe+qLIV6IRmWSyz87f4leBXklUoOcAW0qrO",
	"AFyWJMW0Su08U31qcxOlgquqGJnLN7jndEHRsgg1hIXT/A5jHNtih//G0t8O74xzOjrYk9h7GGWHJVfr",
	"e0bHpF5D04liq2Q6JvBOuT86mqnvRuhN/6NSei5WbUA+c3aZMS4X7lGMv70yF0eYfKWX09leLXVuFHQy",
	"Fb7ULKqNdVR/myvhVdZL8oxPdnUpy3EzxHBRyjlefgPe+0FOHWrvV/sGPOTDnw6GnFDtgl81JaMsaDCg",
	"0Hqr2dBBhCJu/x7yULMOauZzr/c0ybAnZ+t4XtMAod71sQ/QD96vmpSUOQeHhln0MeuCWvphRlN8s5sN",
	"7i7ChYoM2kR/2AyFdfhci/i9W7TuBlxGjFLChonKuw54LzyvEtpfWyXg6sCa6Pr7pm2c6ssanAfN49eu",
	"eIhdptPJf/jV+mwS4Fru/gmM5b1N75XD60u71jzVNCF13vlJeehbt+KUPKSxlJdONmwV5NtTTrBHVi+n",
	"iAP98oDz2WV20IUZS5s6s6PEjl282N9wVrkmkxwesVIo1pR/iFUBnOjueo2F/IKseP2xvAfVBlKNNT8a",
	"zxAJcEiOPDNZUFf4/2eXG1Cna69gl1RuLJNcv9DHnju+F+wZBCzbIgkn0/OmXdT+f8inMdn5Crgr7duO",
	"OZoc+bBcQqrZZk9w7V/XwIPAzbm3y9gS/UGsLas96TE30+FWxwagsdjXUXiCHKn3BmcoDuwGdg8UaVFD",
	"tGrD3F+1d0nLgxhA7pAYEhEq5l9jDcnO5YGpmjIQC96fzXaHJsHhYMG3IFT8jnN5kjQXRxM+PjJlvOLU",
	"pLlM14OSKqBT+FD8bb9gzbD+8RLrA6m6GKtP6xNq6eSyn/z01qUFwlDo+u3EJwgC5X/zeQ/sLDm7gbAk",
	"Hb5U3VKZ+RZR04u36iQj91EvaNYXW+kCvaxnZo33cT+mL5JOD73x01wYMSIZCmloO/zW3jIPlHVrstUd",
	"0JXZwLUE6Up3ovybCwWJFt5beQyOMVRY3607IUENprC1wA0mlnrbZM7CVN4UE0lR57IVLpBIKKiBTgb5",
	"rYbnHEP2C/vdB7H5VM57LUw1ve6vKeL9zpnqITGk+iVxt+X+4Li7GJsY57Y8vIolu+Ig268hpRRZldoL",
	"OjwYtUFuciq5EVYStdOk/VV2dIQgwvgGdqdWCfLFWPwOhkBbycmCHiRJ6WzyUc1vKgb36ijgfUnL1XxW",
	"CpEnA48dl/0MXV2Kv2HpDWTE3BTeP3OgQBb5Cm3s9Wv27XrnM1KVJXDIHp4QcsGtR7x/2G6niO9Mzh/o",
	"sfm3OGtW2aR5zqh28p7HXYsxnZ28Jzfzw4zzMAWG1d1zKjvInvxP24HsYJLeRsrFnUzVyvtPzd0SXg1R",
	"WShiMklTnWqPn0ztItMU9mncZPrSQZ6L2wSpKKnT+8V0DtOuzSR9QuOmm8H2AgJ/G6rcBboja5qRVEgJ",
	"adgjHkRigSqEhCQX6H4TexlcaiMPFeg5zkkuVkSURs21WTL9G0q06lRvropzitcZBN4OMQzQNEXVSxDX",
	"hdRdps54rJpeNljdrjmxT0wDuTlAueB0hyDbuA/vSFmtw0t2Xa8jliLEnKePg+tyORI/uJxOAOaEo7Xf",
	"SnYRKzvWXle3AN5QOUotCpbG0f2v5R8z6NUSo94YKlxGaxvUiM2QpYRcrH4OxdPTRzNwushjb0TEHT/3",
	"LIR0bv6Ld2Z3XLIEx84GOGgk/Hhs1bFScpFdradyle58nOwAhUSf2MdftG150cXUd+06hf1EZhAAMPzS",
	"3YJh0nv3oWAssVxvQiNIvqy1jHmrmjrrcDyfXtSe7JRaK8MaiBm7kuDiNm1d0U4hs5LqtZc6TPO+LcDo",
	"laAwqNJWY6LKWq68Bc0VNe2Kc6JMcthAywHABZNWeCuxDYQFUW1nkgGUaE/uajmxl+2Qt3dEX7f2JHgb",
	"nYLdqCxsEWt3iuwRdKNi+ZYn9pioqUfJQLRhWUVb+FP3KA05XBUyKk1MqwD6i+3qeYXrHrvQ/Po/TOM+",
	"BzOeOMLG2M5e/xY8R9GzzuPuLWF8dG0Yw9my2oBuCbvhFqqkt3xYkewTeiOPTd+mALGvtpDi3db237g/",
	"TggORlQn98GgICbrHb67QeL+lOuJ9kIZKd/wohHqHSPeXjncqISpwJczDxNFebXA9Y1I5tYky1RkAKYa",
	"PoZeptB4MQbNCrojGVsuQdpHJ6Upz6jMwuaMkxSkpsxo4Dt1d/XLQCsrmO/VwMytgoN6xhrTxdB+agHJ",
	"d061vad2VAOIPdRx9KQJ+g2+bkZ0GyveaDFUJbgHQzzkhm6NBoq+hwME6NIxoP5pGZDgKIqTgt7AgfMo",
	"9juMT4PppJx9XAucdcoUn0bP2c+IOmRiv3CmR0+aFZG7zqD2tc4eBE//fNW4DNjN6dN/zH/32taqC314",
	"u6Vf/F5b06GdDwZS2br7IMF7Qo08xoMKitSlzpjaF5t6F4wFZu58mw+SqrqGoHQPQ4xeOwNnoq3TiCVS",
	"J26KvWzRo6O+YuZdX6P2tVpvO5ZdTiuJwuYt3e1P39hcrXE3bTuyV/u890kNtdtqS2DKVvKJZkc8RIyL",
	"0HysmE0/L93xF2PjD5oX0j9uOe4NJL6AC+7UGSxROEZvjcLjSSVCa5TvYkfHW/nvsMAhiWuCB+3Rtqo+",
	"LX/EBo2z6LheELuGu/etv4oxIAwFg7aXhKoWjrX3b+rmtdUOEnA9e40a3r8ADkvmmL/9uZ5bram5nE7I",
	"Ra4EUeDFDr0jD3pSxQOD5UHVBS1sABEoQ9h6173V7lPKudAxUD2EUcUG3+MG7gwPh2GRQdrfEGnSB3ln",
	"NlmPkJm/y2rzAf5nwbSkcnfnUnpNNHkseALfu31apT2LsTntfAqmz7GUaOq9yDL+UJWkGfzDlGMYGTGC",
	"VuYLgYQM5pCz5iQ7GhoizW08HoA8sru+FtaR9nVK3M7+09MpIHQ0sEZsWWPFXVpH4TPCNFBqJwTJVtX5",
	"DIeylaAiVgePbpNxkvP6itdFw1xPLWJsFjHgroNzDdLRhHnKctocIzQxYRZknFPmGdnn/dNYCpgyja3G",
	"I2F58FxG3G/Y09hM3WCYkCqCjWvhN0RCD9Io871bFYxJdN6PKIkQOwIw4CrecvINi+Q0CZCkDUxCp0Bv",
	"O++y7x8bm/penyaExHfYA17o+920q91wHDhfOJPQjzVSgqUMUkJr+fvcyd0Cm0eIYIucrUxrsCXLbG6E",
	"9r4EsQLqRe2CH8dz31MfK+IIjgeq7+FvzXeoV4SEYw6X3ND883vpY6mkC8QHZG+H/fpCN+8QyRaV6m5J",
	"Jl7TSXMHLt3Hm5q/waiCv4LZo6hq7IZyLxE9BRiNrzS3PihLF6FlhiS3OKYNSXz8DVm4NIelhJSp7gvH",
	"ra+DXHs1g2RLFyIAW73HjXrfOn8V+h5kvPSPkOSnQI4UaD1uIGyO6BdmKgMnN0rlMerrkUUEfzEeFVZm",
	"2HNd3LRiFRvLVnCjCQlHjlkMsg8cGLPYrzkxdXk2Ls9cOpWC/jon39Yt3EYu6mZtUwNu+8gdK7w5JU42",
	"Xk/XdMdAXYsQLEZNEFTyt8d/s1IWnqZHj3CCR4/mrunfnrQ/m+P86FFU6vtsIboWR24MN2+MYn4dStpk",
	"ExMN5Afr7EfF8myvuhJme/s0n62Ag2IK85n95rJ2ft671ENgw4b6R9XCep9YR4uYyFpbkwdTBXncJqRw",
	"c90iCdvQJTetJNM7LLvirWXst2gw8fd1YJoLbKyfUN3dp8UN1IV7mjC2Svnb9XtBc7yP7MsuN7eQyE/I",
	"qy0tyhzcQfnzg8V/wNM/PcvOnj7+j8Wfzr4+S+HZ18/PzujzZ/Tx86eP4cmfvn52Bo+X3zxfPMmePHuy",
	"ePbk2TdfP0+fPnu8ePbN8/94YPiQAdkC6tMLns/+d3KRr0Ry8eYyuTbANjihJfsBzN6geX0psKKAQWqK",
	"JxEKyvLZuf/pf/oTdpKKohne/zpzmXFna61LdX56ent7exJ2OV1h3EqiRZWuT/08mOe9Ja+8uazd1awz",
	"B+6oTXnmHX88KVzgt7evrq7JxZvLk4ZgZuezs5Ozk8dmfFECpyWbnc+e4k94eta476eO2GbnHz/NZ6dr",
	"oDmGeZo/CtCSpf6TBJrt3P/VLV2tQJ6gR6L9afPk1IsVpx9d/M6nsW+noeno9GMrzCnb0xNV0dOPvj7I",
	"eOtWWQkX3hV0mAjFWLPTBSbTndoUVNB4eCmobKjTjyguD/5+6nJTxj+i2mLPw6mPBYy3bGHpo94aWDs9",
	"UqrTdVWefsT/IH0GYNlMMKd6y0/RMn/6sbUa97m3mvbvTfewxaYQGXiAxXJp66aMfT79aP8NJoJtCZIZ",
	"wc9GXzp3hPpYXWaz89mroNGLNaQ3WHXZ+tfgeXlydhZJkxX0Ivb40kUOmTl7z86eTejAhQ47uRIN/Y6/",
	"8BsubjnBpCqWl1dFQeUOZSRdSa7Izz8QtiTQnYIpPwPyD7pS+GSNJV5n81kLPR8+OaTZJAKnmHp81+DS",
	"/7zjafTH/jaXnWLRsZ9PP7bLq7boR60rnYnboC9qU9YU0J/PFcbu/H16S5k28pGLxsUKJP3OGmh+6lLv",
	"dX5tst30vmAKn+DH0Esx+utpXQor+rHLqWJf3UkdaOSdh/znRmoJpYDZ+bvg/n/34dMH801u0Nvi3cfg",
	"Ujs/PcWXsrVQ+nT2af6xc+GFHz/UNOZzPs9KyTaY4OjDp/8XAAD//1jjB/dq1wAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
