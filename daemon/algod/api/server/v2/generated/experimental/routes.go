// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
