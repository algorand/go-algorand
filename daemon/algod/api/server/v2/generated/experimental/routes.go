// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
