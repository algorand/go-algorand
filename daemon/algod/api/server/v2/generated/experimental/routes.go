// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//05tqbWY3AAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
