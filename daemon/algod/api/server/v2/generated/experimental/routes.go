// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
