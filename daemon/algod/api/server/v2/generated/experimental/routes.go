// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PcNrbgX0H1vVV+bLMlP5I7VlXqrmInGW0cx2Upmb3X8iZo8nQ3RiTAAcB+xOv/",
	"voUDgARJsJstKfZM1X6y1cTj4ODg4LzxcZKKohQcuFaTs4+TkkpagAaJf9E0FRXXCcvMXxmoVLJSM8En",
	"Z/4bUVoyvpxMJ8z8WlK9mkwnnBbQtDH9pxMJ/6iYhGxypmUF04lKV1BQM7DelaZ1PdI2WYrEDXFuh7h4",
	"Nfm05wPNMglK9aH8mec7wniaVxkQLSlXNDWfFNkwvSJ6xRRxnQnjRHAgYkH0qtWYLBjkmZr5Rf6jArkL",
	"VukmH17SpwbERIoc+nC+FMWccfBQQQ1UvSFEC5LBAhutqCZmBgOrb6gFUUBluiILIQ+AaoEI4QVeFZOz",
	"9xMFPAOJu5UCW+N/FxLgD0g0lUvQkw/T2OIWGmSiWRFZ2oXDvgRV5VoRbItrXLI1cGJ6zchPldJkDoRy",
	"8u77l+TZs2cvzEIKqjVkjsgGV9XMHq7Jdp+cTTKqwX/u0xrNl0JSniV1+3ffv8T5L90Cx7aiSkH8sJyb",
	"L+Ti1dACfMcICTGuYYn70KJ+0yNyKJqf57AQEkbuiW18r5sSzv9FdyWlOl2VgnEd2ReCX4n9HOVhQfd9",
	"PKwGoNW+NJiSZtD3p8mLDx+fTJ+cfvq39+fJf7s/v3r2aeTyX9bjHsBAtGFaSQk83SVLCRRPy4ryPj7e",
	"OXpQK1HlGVnRNW4+LZDVu77E9LWsc03zytAJS6U4z5dCEerIKIMFrXJN/MSk4rlhU2Y0R+2EKVJKsWYZ",
	"ZFPDfTcrlq5ISpUdAtuRDctzQ4OVgmyI1uKr23OYPoUoMXDdCh+4oH9eZDTrOoAJ2CI3SNJcKEi0OHA9",
	"+RuH8oyEF0pzV6njLitytQKCk5sP9rJF3HFD03m+Ixr3NSNUEUr81TQlbEF2oiIb3Jyc3WB/txqDtYIY",
	"pOHmtO5Rc3iH0NdDRgR5cyFyoByR589dH2V8wZaVBEU2K9Ard+dJUKXgCoiY/x1Sbbb9f13+/IYISX4C",
	"pegS3tL0hgBPRQbZjFwsCBc6IA1HS4hD03NoHQ6u2CX/dyUMTRRqWdL0Jn6j56xgkVX9RLesqArCq2IO",
	"0mypv0K0IBJ0JfkQQHbEA6RY0G1/0itZ8RT3v5m2JcsZamOqzOkOEVbQ7TenUweOIjTPSQk8Y3xJ9JYP",
	"ynFm7sPgJVJUPBsh5mizp8HFqkpI2YJBRupR9kDipjkED+PHwdMIXwE4fpBBcOpZDoDDYRuhGXO6zRdS",
	"0iUEJDMjvzjmhl+1uAFeEzqZ7/BTKWHNRKXqTgMw4tT7JXAuNCSlhAWL0NilQ4dhMLaN48CFk4FSwTVl",
	"HDLDnBFoocEyq0GYggn36zv9W3xOFXz9fOiOb76O3P2F6O763h0ftdvYKLFHMnJ1mq/uwMYlq1b/Efph",
	"OLdiy8T+3NtItrwyt82C5XgT/d3sn0dDpZAJtBDh7ybFlpzqSsLZNX9s/iIJudSUZ1Rm5pfC/vRTlWt2",
	"yZbmp9z+9FosWXrJlgPIrGGNKlzYrbD/mPHi7Fhvo3rFayFuqjJcUNpSXOc7cvFqaJPtmMcS5nmt7YaK",
	"x9XWKyPH9tDbeiMHgBzEXUlNwxvYSTDQ0nSB/2wXSE90If8w/5RlbnrrchFDraFjdyWj+cCZFc7LMmcp",
	"NUh85z6br4YJgFUkaNPiBC/Us48BiKUUJUjN7KC0LJNcpDRPlKYaR/p3CYvJ2eTfThr7y4ntrk6CyV+b",
	"XpfYyYisVgxKaFkeMcZbI/qoPczCMGj8hGzCsj0Umhi3m2hIiRkWnMOacj1rVJYWP6gP8Hs3U4NvK+1Y",
	"fHdUsEGEE9twDspKwLbhA0UC1BNEK0G0okC6zMW8/uHheVk2GMTv52Vp8YHSIzAUzGDLlFaPcPm0OUnh",
	"PBevZuSHcGwUxQXPd+ZysKKGuRsW7tZyt1htW3JraEZ8oAhup5AzszUeDUbMvw+KQ7ViJXIj9RykFdP4",
	"r65tSGbm91Gd/zVILMTtMHGhouUwZ3Uc/CVQbh52KKdPOM7cMyPn3b63IxszSpxgbkUre/fTjrsHjzUK",
	"N5KWFkD3xd6ljKOSZhtZWO/ITUcyuijMwRkOaA2huvVZO3geopAgKXRg+DYX6c1fqVrdw5mf+7H6xw+n",
	"ISugGUiyomo1m8SkjPB4NaONOWKmISr4ZB5MNauXeF/LO7C0jGoaLM3BGxdLLOqxHzI9kBHd5Wf8D82J",
	"+WzOtmH9dtgZuUIGpuxxdk6GzGj7VkGwM5kGaIUQpLAKPjFa91FQvmwmj+/TqD36ztoU3A65ReAOie29",
	"H4NvxTYGw7di2zsCYgvqPujDjINipIZCjYDvlYNM4P479FEp6a6PZBx7DJLNAo3oqvA08PDGN7M0xtnz",
	"uZC34z4dtsJJY3Im1IwaMN9pB0nYtCoTR4oRs5Vt0Bmo8fLtZxrd4WMYa2HhUtM/AQvKjHofWGgPdN9Y",
	"EEXJcrgH0l9Fmf6cKnj2lFz+9fyrJ09/e/rV14YkSymWkhZkvtOgyEOnmxGldzk86q8MtaMq1/HRv37u",
	"DZXtcWPjKFHJFApa9oeyBlArAtlmxLTrY62NZlx1DeCYw3kFhpNbtBNr2zegvWLKSFjF/F42YwhhWTNL",
	"RhwkGRwkpmOX10yzC5cod7K6D1UWpBQyYl/DI6ZFKvJkDVIxEfGmvHUtiGvhxduy+7uFlmyoImZuNP1W",
	"HAWKCGXpLR/P9+3QV1ve4GYv57frjazOzTtmX9rI95ZERUqQid5yksG8WrY0oYUUBaEkw454R/8AGkWB",
	"K1bApaZF+fNicT+qosCBIiobK0CZmYhtYeR6BangNhLigHbmRh2Dni5ivIlODwPgMHK54ynaGe/j2A4r",
	"rgXj6PRQO54GWqyBMYds2SLLu2urQ+iwUz1QEXAMOl7jZzR0vIJc03uX6LoTxGB/6UnbAksy0xB36zVb",
	"rnQgcr+VQizuH8bYLDFA8YNVWHLTp6+2vBGZOWi6UvcgnjSDNaff7Gl45ulcVJpQwkUGaGOqVFxwGYhl",
	"QCcq+n51KAvpldVB5mAIKaWVWW1VEvRs9nhp0zGhqaXeBFGjBvw6tUPOtrLTWT95LoFmOzIH4ETMnfPE",
	"uXVwkRTdstpf/U5sipylFlylFCkoBVnijDYHQfPtLFvVe/CEgCPA9SxECbKg8s7A3qwPwnkDuwSDCBR5",
	"+OOv6tEXgFcLTfMDiMU2MfTWKrDzkPWhHjf9PoLrTh6SHZVAPM81+rZhEDloGELhUTgZ3L8uRL1dvDta",
	"1iDRV/WnUryf5G4EVIP6J9P7XaGtyoHQOKf6GenHbBinXHihIzZYTpVODrFl06iln5oVBJwwxolx4AGh",
	"5DVV2vpXGc/QLGSvE5zHCihmimGAB0V0M/KvXjrvj52ae5CrStWiuqrKUkgNWWwNHLZ75noD23ousQjG",
	"rvUBLUil4NDIQ1gKxnfIsiuxCKK6dkO4AIT+4tBYb+75XRSVLSAaROwD5NK3CrAbhgcNAMJUg2hLOEx1",
	"KKeOSZpOlBZlabiFTipe9xtC06Vtfa5/adr2iYvq5t7OBCiMSnLtHeQbi1kbGLaiijg4SEFvjOyBJgLr",
	"CO7DbA5johhPIdlH+aj+mFbhETh4SKtyKWkGSQY53fUH/cV+JvbzvgFwxxtVUGhIbIRPfNMbSvYBFXuG",
	"FjieigmPBL+Q1BxBo3k0BOJ6Hxg5Axw7xpwcHT2oh8K5olvkx8Nl262OjIi34Vpos+OOHhBkx9HHADyA",
	"h3ro26MCOyeNXtad4r9AuQlqOeL4SXaghpbQjH/UAgbsiy54OjgvHfbe4cBRtjnIxg7wkaEjO2DsfEul",
	"ZikrUdf5EXb3rvp1J4i64EgGmrIcMhJ8sGpgGfYnNjalO+btVMFRdqk++D3DVGQ5OVMo8rSBv4Ed6txv",
	"bdDjVRAqeQ+6bGRUcz9RThBQH0plRPCwCWxpqvOdEdT0CnZkAxKIquYF09oGM7dVXS3KJBwgavPfM6Nz",
	"cNmAQb8DYzxulzhUsLz+VkwnVifYD99VRzFoocPpAqUQ+QjrUQ8ZUQhGxUKQUphdZy6u2kfWekpqAemY",
	"Nno36+v/gWqhGVdA/ktUJKUcVa5KQy3TCImCAgqQZgYjgtVzuqiHBkOQQwFWk8Qvjx93F/74sdtzpsgC",
	"Nj4ZwTTsouPxY7TjvBVKtw7XPdgKzXG7iFwf6AwxF5/TQro85bDX3Y08ZiffdgavPSjmTCnlCNcs/84M",
	"oHMyt2PWHtLIuIgDHHeUnyMYOrZu3PdLVlQ51ffh0YE1zROxBilZBgc5uZuYCf7dmuY/190O6HRNhBQr",
	"CsgY1ZDvSCkhBRu5bkQ1VY89IzamLV1RvkQJXYpq6YKq7DjIYStlbSGy4r0holKM3vJkKUVVxjiuC6T1",
	"yQtGfgFqdKhgR7Cz1Rg2tJ7P5auMuQr9zgXb/IMZc8hjM50MqpgGqetGxbTIaWdgjOC+LQErwE8z8Ui7",
	"PqLOCBt9fIXbYqjXbO6fYyNvho5B2Z84CPNqPg5Fehn9Nt/dg5RhByISSgkK74TQLqTsV7EIs63cpaF2",
	"SkPRN53brr8NHL93gwqa4DnjkBSCwy6aYMw4/IQfo8cJ76WBzighDPXtCv0t+DtgtecZQ413xS/udnBC",
	"39Yhjvew+d1xO16TMM8MrYKQl4SSNGdoMxRcaVml+ppTtEoEhy0SCuLVr2E71UvfJG4Yi9it3FDXnGIY",
	"UG2riLqvFxBRzL8H8OYqVS2XoHRHul0AXHPXinFScaZxrsLsV2I3rASJ8Rgz27KgO7KgOZrV/gApyLzS",
	"bXkPc12UZnnuXDhmGiIW15xqkoNRWX9i/GqLw3kXqKcZDnoj5E2Nhfj1sgQOiqkkHrLyg/2K0YRu+SsX",
	"WYi5yfazNfqb8ZuEmB0aLZp82//z8D/P3p8n/02TP06TF//j5MPH558ePe79+PTTN9/83/ZPzz598+g/",
	"/z22Ux72WCaGg/zildOFLl6hwNtY/XuwfzaLb8F4EiWy0LfdoS3yELMOHQE9aptD9Aquud5yQ0hrmrPM",
	"CCK3IYcui+udRXs6OlTT2oiO+cOv9Ugx8g5chkSYTIc13voa70d5xXOe0A3l0pjwvCwqbrfSi382pN9H",
	"24jFtM5rsyUvzggmPa2oDxVzfz796uvJtElWqr9PphP39UOEklm2jaWkZbCNaQfugODBeKBISXcKdJx7",
	"IOzRwCLrzQ+HLcColWrFys/PKZRm8ziH84HSzsqw5RfcRjCb84NOrZ2zlYvF54dbS4AMSr2KpcK3JAVs",
	"1ewmQCfQoJRiDXxK2AxmXS0/MwqLC3HKgS4wJRvVHzFGHK/PgSU0TxUB1sOFjFKlY/SDwq3j1p+mE3f5",
	"q3uXx93AMbi6c9YeLP+3FuTBD99dkRPHMNUDmx1phw7y2SK6nEvZaIWgGG5mC4DY9NBrfs1fwYJxZr6f",
	"XfOManoyp4ql6qRSIL+lOeUpzJaCnPkskFdU02vek7QGa/QE+TekrOY5S8lNKBE35GnrLvRHuL5+T/Ol",
	"uL7+0PPG9+VXN1WUv9gJkg3TK1HpxGWNJxI2VMa8HarOGsaRbVmIfbNOiRvbsmKXle7Gj/M8Wpaqmz3Y",
	"X35Z5mb5ARkqlxtntowoLaSXRYyAYqHB/X0j3MUg6cYr9pUCRX4vaPmecf2BJNfV6ekzIK10ut/dlW9o",
	"clfCaPV+MLuxq9Xjwq1eA1staVLSZcypcn39XgMtcfdRXi5Qyc5zgt1aaXw+TBmHahbg8TG8ARaOo1OS",
	"cHGXtpevEBRfAn7CLcQ2RtxoXL233a8gse/W29VJDuztUqVXiTnb0VUpQ+J+Z+rCIUsjZHn/u2JLjHF0",
	"NVbmQNIVpDeu+AUUpd5NW919iIcTND3rYMqWRbFpOZiYjybpOZCqzKgTxSnfdTOkFWjtgyzfwQ3srkST",
	"139MSnQ7Q1cNHVSk1EC6NMQaHls3RnfzXRwRZiWWpU90xYwnTxZnNV34PsMH2Yq893CIY0TRyiAdQgSV",
	"EURY4h9AwS0Wasa7E+nHlme0jLm9+SIlUjzvJ65Jozy5kJ9wNWj2td8LwBpLYqPInBq5XbjyQDYLNeBi",
	"laJLGJCQQ6/AyFzPlicBBzl070VvOrHoXmi9+yYKsm2cmDVHKQXMF0MqqMx0Ar38TNbx5EzjWPXPIWye",
	"o5hUR8RZpkNlyztjy5gNgRYnYJC8ETg8GG2MhJLNiipfuQgLPPmzPEoG+BOzqvfV0rgIYpSCKk51pQzP",
	"c7vntKdduooavoyGr50RqpYj6mAYCR/DomPbITgKQBnksLQLt409oTQZ3s0GGTh+XixyxoEksXAnqpRI",
	"mS091Vwzbg4w8vFjQqwJmIweIUbGAdjoUMWByRsRnk2+PAZI7jLUqR8bXbHB3xBPprEBwEbkEaVh4WzA",
	"rZJ6DkBdjFx9f3UiNXEYwviUGDa3prlhc07jawbplXRAsbVTwMG59B8NibN7LPD2YjlqTfYqus1qQpnJ",
	"Ax0X6PZAPBfbxGbTRSXe+XZu6D0aE425fbGDaYtnPFBkLrYYJoJXi43BPQDLMBwejEDD3zKF9Ir9hm5z",
	"C8y+afdLUzEqVEgyzpxXk8uQODFm6gEJZohcHgb1MG4FQMfY0RSXdcrvQSW1LZ70L/PmVps2dZ58ukns",
	"+A8doeguDeCvb4WpK1i87UosUTtFO9qhXbwjECFjRG/YRN9J03cFKcgBlYKkJUQlNzHXndFtAG+cS98t",
	"MF5giRDKd4+CEBoJS6Y0NEZ076j/EuZJipXJhFgMr06XcmHW906I+pqypW+wY2uZn30FGIO6YFLpBD0Q",
	"0SWYRt8rVKq/N03jslI7SMfW8WRZnDfgtDewSzKWV3F6dfP++MpM+6ZmiaqaI79l3EZMzLHubDR0b8/U",
	"Nrpz74Jf2wW/pve23nGnwTQ1E0tDLu05/kXORYfz7mMHEQKMEUd/1wZRuodBBimXfe4YyE32cGLK5Wyf",
	"9bV3mDI/9sGwEZ/4OXRH2ZGiawkMBntXwdBNZMQSpoOyrf1cyIEzQMuSZduOLdSOOqgx06MMHr7YVQcL",
	"uLtusAMYCOyesXQMCapd16wR8G0B3lZZkdkozFy1q4+FDCGciilfPr6PqDpd6xCuroDmP8LuV9MWlzP5",
	"NJ3czXQaw7Ub8QCu39bbG8UzuuatKa3lCTkS5bQspVjTPHEG5iHSlGLtSBObe3v0Z2Z1cTPm1Xfnr986",
	"8D9NJ2kOVCa1qDC4KmxX/susypZQGzggvjy10fm8zG5FyWDz67pPoVF6swJX5zeQRnsFCRuHQ3AUnZF6",
	"EY8QOmhydr4Ru8Q9PhIoaxdJY76zHpK2V4SuKcu93cxDOxDNg4sbV9UyyhXCAe7sXQmcZMm9spve6Y6f",
	"joa6DvCkcK49lYgLW2xbEcG7LnQMut2VzuteUCwnaK0ifebEqwItCYnKWRq3sfK5MsTBre/MNCbYeEAY",
	"NSNWbMAVyysWjGWajSkY0gEymCOKTBWtWdLgbi7cQyoVZ/+ogLAMuDafJJ7KzkHF+o3O2t6/To3s0J/L",
	"DWwt9M3wd5ExwlKa3RsPgdgvYISeuh64r2qV2S+0tkiZHwKXxBEO/3DG3pW4x1nv6MNRsw1eXLU9buG7",
	"J33+ZwjDFsA+/OiKV15dTc+BOaKPqDCVLKT4A+J6HqrHkUwXXzyUYZTLHxBG2odPB7RYTG3dad6CaWYf",
	"3O4h6Sa0QrWDFAaoHnc+cMthFUNvoabcbrV906AV6xYnmDCq9MSO3xCMg7kXiZvTzZzGSjwaIcPAdN44",
	"gFu2dC2I7+xxr+pwfzs7CXzJdVtms5hLkE0SWr8iyi0FBjvtaFGhkQyQakOZYGr9f7kSkWEqvqHcPo1h",
	"+tmj5HorsMYv02sjJNYgUHGzfwYpK2gelxyytG/izdiS2VcfKgXBswJuIPuijqUi9zRDncTiUHOxIKfT",
	"4G0TtxsZWzPF5jlgiye2xZwq5OS1IaruYpYHXK8UNn86ovmq4pmETK+URawSpBbqUL2pnVdz0BsATk6x",
	"3ZMX5CG67RRbwyODRXc/T86evECjq/3jNHYBuFc79nGTDNnJ3xw7idMx+i3tGIZxu1Fn0XRt+2zXMOPa",
	"c5ps1zFnCVs6Xnf4LBWU0yXEI0WKAzDZvribaEjr4IVn9s0ZpaXYEabj84Omhj8NRJ8b9mfBIKkoCqYL",
	"59xRojD01LwZYCf1w9kHbFy5Vw+X/4g+0tK7iDpK5Oc1mtr7LbZq9GS/oQW00Tol1BaeyFkTveCLUJML",
	"X9cG69/WZW8tbsxcZuko5mAww4KUknGNikWlF8lfSLqikqaG/c2GwE3mXz+P1Pxt157kxwH+2fEuQYFc",
	"x1EvB8jeyxCuL3nIBU8Kw1GyR022R3AqB525cbfdkO9w/9BjhTIzSjJIblWL3GjAqe9EeHzPgHckxXo9",
	"R9Hj0Sv77JRZyTh50Mrs0C/vXjspoxAyVqyuOe5O4pCgJYM1xu7FN8mMece9kPmoXbgL9F/W8+BFzkAs",
	"82c5pgh8KyLaqa9DXVvSXax6xDowdEzNB0MGczfUlLRr/n5+Pno/UVBxT5c3bPcdW+aLxwP+0UXEFyYX",
	"3MDGl29XMkAoQc3zKMlk9ffAx07Jt2I7lnA6p9ATzz8BiqIoqVie/dpkfnZKykvK01XUZzY3HX9rHr+q",
	"F2fvwGjduRXlHPLocFbe/M3LpRHJ+e9i7DwF4yPbdqvc2+V2FtcA3gbTA+UnNOhlOjcThFhtJ9XVQdv5",
	"UmQE52mKnDXHtf86QlDD+h8VKB1LUMIPNnAMbaOGHdgSygR4hhrpjPxg37ddAWlVsEFN0Jcq8OVrrdG+",
	"KnNBsymWULj67vw1sbPaPvYJF1vCeYmKUHsVHZtYUL9xXAiyf40lnh4xfpz98dpm1UondcXlWAKqadHU",
	"hGYdPwGqSCF2ZuRV8FKlzVU1Qxh6WDBZGK2uHs3KR0gT5j9a03SFal+LtQ6T/Pja454qVfDeX/1uT13U",
	"EM+dgduVH7fVx6dEGN18w5R91hTW0M55rRPAndnB58C2lycrzi2lzI645eoShsei3QNnr0jvSohC1kH8",
	"kUK/Ld1/bCn2S+wVrbHUrevee+jPZlDW77H456pTygVnKVY4il3R7v3TMX62EcWguoZcf8TdCY0crmg1",
	"+ToUz2FxsL68Z4QOcX1Df/DVbKqlDvunxoc2V1STJWjlOBtkU/8ogrM1Mq7AFanE13IDPilky3eJHDLq",
	"Dk9qt8mRZISpNwPK4/fm2xtnWsCY9BvGUYlwaHOCn7UG4vOM2mgeTJOlAOXW084/Vu9Nnxmm4maw/TDz",
	"zzniGNb1Z5Zt/dz9oc6919t5mU3bl6atq9BT/9yKcraTnpelm3T4yYyoPKC3fBDBEe9l4t1HAXLr8cPR",
	"9pDb3nAVvE8NocEand1Q4j3cI4z6+YjO00RGaLUUhS2IDROLVklgPALGa8aheWw0ckGk0SsBNwbP60A/",
	"lUqqrQg4iqddAc3Rwx1jaEo798Zdh+rWJzIowTX6OYa3sXn5YoBx1A0awY3yXf3GqaHuQJh4iY8rO0T2",
	"37FAqcoJURlmLXRetogxDsO4/ds57Qugfwz6MpHtriW1J+eYm2goEXVeZUvQCc2yWM3Qb/Erwa8kq1By",
	"gC2kVV1bsixJinVX2oVo+tTmJkoFV1WxZy7f4I7TBU/FRKghfK7G7zAmusx3+G+ssOLwzrhAj6NDDX1U",
	"h3tJ4ki5uT1ST+o1NJ0otkzGYwLvlLujo5n6doTe9L9XSs/Fsg3IZy4/sY/LhXsU42/fmYsjrM7QqxZq",
	"r5a6eAIG9gn/wB+qjXXab5sr4VXWKx+KDqX6AbH9Bojhp8CmePkNhPcGRTeovV+th3IoyDcdjEmn2mXH",
	"aUr2sqDBjCMbIWRzixCKuHV2KCrIBgWZz73e4yTDnpyt45X3AoT6cLM+QD/6WFZSUubc7w2z6GPWRb33",
	"8xDGxMM2G9xdhIslH7TY/bgeivsmivFlDgS/d58KugGXMl+/nm/X6iOfvEpof3WP19rx6sj76Pr7hlec",
	"6suaQweNt1euLL1dptPJf/zVxskR4Fru/glMub1N7z201Jd2rXmqaULqisajKhy3bsX4m0nDNZaaukpI",
	"T6VQrKmiHXtMaWQ83RW+hxTUiOqP5YNZ1pBqLJ3eOOklwDEVo8xkwdOF/7/W0oDuWIcduhJL++oq9eul",
	"H7jQeqlPQfqerTU9G19F6LwOxUKmhLVnl8Dd64HtpIbRodWLBaSarQ+kmv1tBTxIY5p6I4R9BTjIPGN1",
	"qC5WKjnexNYAtC8TbC88QcXAO4MzlGhyA7sHirSoIVr8eurvldsUqUAMIHdIDIkIFQt1sFZT531mqqYM",
	"xIIPLbLdoSn3NfhuTpA4ecu5PEmaG7dJptwzZfzhjlFzma5HpRhj1OlQNlq/7v+wsP0Kn1lQ9Zt2vshF",
	"qJKSi34pwI0rkoGJgbWjwJfLAOV/81nAdpac3UD4sg+6ZTZUZr5F1M7gTRjJnvuol0Lma9Z3gV7UM7Mm",
	"ELSfNBQpLoXhvmkujPyVDMVMt2Mv68CFB8pGmNhi2xhVauBagHQvoKGwlwsFiRY+cHQfHPtQ4Z6vvw0S",
	"1GBBRwvcYJmVd00dGSxsS7GsCnXRM+ECiYSCGuhkUO1leM59yH5pv/ssGV/Y9KA5pabXwyXefQgwUz0k",
	"hlS/IO62PJx9cxvLCuPcvkCrYqVfuEFlaPovpciq1F7Q4cGorU+jCyvtYSVRo0TaX2VHIA5SGG9gd2Il",
	"fl8b3+9gCLSVnCzoQcmAzibfq61JxeBe3gt4X9JMM52UQuTJgGX/ol+vpkvxNyy9gYyYm8KHyg28M0Ie",
	"okG5dt1uVjtfn6UsgUP2aEbIObfByd6L2y6Y3JmcP9D75t/irFllS0g5C9LsmsejPLG4k7wjN/PD7Odh",
	"Cgyru+NUdpAD1VC2A7VyJN1EXt2ZjVVB+37V7ksoDVFZKGIySfPIx4GgkDoepHlnoYkJ6UsHeS42CVJR",
	"Uhe7iukcpl2bSfrynk03g+05BMElVLkLdEdWNCOpkBLSsEc8nt8CVQgJSS4w1iTmBltoIw8VGMTLSS6W",
	"RJRGzbU147zDIPoISDCXzSm1PRPrlRjI2gflckjdNLZxf549b4Uc/w7JVecg23YYD+GwfPRjI45Qum+O",
	"HLRKB2COINDe8BHDXuQtlfa6uq/xDL2NpUXB0ji6/7VCKgYDIQ68FBNZX02O7iEbnwI3gKuof3K/O9C+",
	"+jUf6xSsCwSPPBYBAMNuwhYMo5yFx4KxwFf0EhpB8kUttU5bj5yyztn3xdssjafUaq0rIGbsSoJLybLP",
	"fXXeKSmpXvlbzDTv65ZGTwGF+VL2rQuqrCXEW2TcW2Nd8UCUSQ5raHlPXZ5YlaagFFtD+E6Z7UwygBLt",
	"k12pOeYWDLlcR5Rya08Cx9IY7EZlK4tYu1PkgOAUFfO2PLHHRI09SgaiNcsq2sKfusPLT0OPPkXYsId1",
	"JKc4mknEF7ePRRx05CPNR88lj/vxwzTF2iiCs2W18dQSYXOyVUk3fFiJiNidaufy3ddBcDCiOmnDg1e+",
	"rHfltgrkIGXsI4zea21RmUOBf20zrPDhxS3XNyJjWVMXU5EBmGrOM4aqQRMKFTQr6I5kbLEAaY35SlOe",
	"UZmFzRknKUhNmdFsdur2Yq2BVlYwPSjZGu6Kg3oGE5Nx0S5lAcl3TmW4g9SJnpuIxGmvWi2GHqTr7Uo8",
	"dp5ujXSNQUQDROCyflG2tgdMcBSQSEFv4Mh5FPsD9k+DtTic7U8LnHXMFDHH4i0LiY1i3X2fe+R2C56e",
	"2+8ZCusMNglM0oZuoCXZX5BdGv+puTjHPYLnOxwAL3QYBs/geduNA+cLZwL9VCMlWMqHIUpoLf+QD9It",
	"sJE0gi1yjEBrsFVfbfR4e18CB7N6Wftth15s7Lp3saig4Fhote8WtrwJ32sJCcecBbmm+ed37WK1yXPE",
	"h3tLP77Q0DcYItmiUt0uDP81HTV34Ae8v6n5W3RF/w3MHkW1UjeUE2Fqsd5HruDNQnNruFj496rWwMkG",
	"x7RBW0++JnOXplxKSJnqikYb/5RE7QrDl5Vc6sNWH/C9HVrnr0LfgYwXXtMgb5qy9KjjL3kDYXNEvzBT",
	"GTi5USqPUV+PLCL4i/GosF7YgeviphXNZZ/56KQpCAn3HNUVxGcfGdXVr4Q2dnk2cslcOpWC/jpH39Yt",
	"3EYu6mZtY0MS+8jdV7t8TCRh/EkC0x1DGS1C8D0PgqCS35/8TiQs8ME+QR4/xgkeP566pr8/bX82x/nx",
	"46h09tmCGC2O3Bhu3hjF/DqU1mZTtwYyKDv7UbE8O0QYrXzY5slLzPj8zWXdf5FHN3+zsSb9o+oePjsm",
	"fLq7CYiYyFpbkwdTBZmuI5JcXbdISiv6cdJKMr3DYoDefsB+i4Zb/lBHM7louFo/dHefFjdQl5NsYp8q",
	"5W/XHwTN8T6yais3t5DIZ+S7LS3KHNxB+ebB/D/g2V+eZ6fPnvzH/C+nX52m8PyrF6en9MVz+uTFsyfw",
	"9C9fPT+FJ4uvX8yfZk+fP50/f/r8669epM+eP5k///rFfzwwfMiAbAGd+NIzk/+NL9Mm528vkisDbIMT",
	"WrIfYWcfwTNk7J/XoymeRCgoyydn/qf/6U/YLBVFM7z/deIqW0xWWpfq7ORks9nMwi4nSwx2SLSo0tWJ",
	"n6f3/t7524vaS2StQLijNinUW/c8KZzjt3ffXV6R87cXs+B18LPJ6ex09gQfky6B05JNzibP8Cc8PSvc",
	"9xNHbJOzj5+mk5MV0BxjA80fBWjJUv9JAs127v9qQ5dLkDP35qD5af30xIsVJx9d0Menfd9Owuc7Tj62",
	"YmOyAz2xvP/JR1+1bn/rVlk4FxMUdBgJxb5mJ3MshjG2Kaig8fBSUNlQJx9RXB78/cRl78c/otpiz8OJ",
	"DyCLt2xh6aPeGlg7PVKq01VVnnzE/yB9BmDZXJk+uBmsC5GBn08sFraI5r7PJx/tv8EwsC1BMiO32Yg7",
	"Z6apT8VFNjmbfBc0ermC9AbfnbA2OiT3p6enkTzAoBexp4/Oc8jM0Xl++nxEBy502MlVSOt3/IXfcLHh",
	"BLNGLCuuioLKHYo4upJckZ9/JGxBoDsFU34GPP50qdBfjUXuJ9NJCz0fPjmk2YoCJ/Zh9QaX/ucdT6M/",
	"9jex+8BX7OeTj+0C8y1iVqtKZ2IT9EVlyGry/fnqJ5daf59sKNNGvHERmFgAsN9ZA81PXG5x59cmnaf3",
	"BXOUgh9DT0L015O6vmr0Y5fRxL66gzbQyBs2/edG6Agv8cnZ++D6fv/h0wfzTZrW+Km5k85OTjCqaSWU",
	"Ppl8mn7s3Ffhxw81jfmSK5NSsjVmcH349P8CAAD//1yhiczBvQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
