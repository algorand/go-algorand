// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
