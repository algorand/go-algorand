// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
