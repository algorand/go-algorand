// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. WARNING: This endpoint is experimental and under active development. There are no guarantees in terms of functionality or future support.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
