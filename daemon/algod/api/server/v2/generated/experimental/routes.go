// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/l8AAAD//4rIBX33yAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
