// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
