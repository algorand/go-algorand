// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XWPepQ+f/l8AAAD//zyDsKc92AAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
