// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//nAp2HSTcAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
