// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. WARNING: This endpoint is experimental and under active development. There are no guarantees in terms of functionality or future support.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XPcNrLgv4Ka96r8ccOR/JG8tapS7xQ7yepie12Wktw9y5dgyJ4ZrEiAC4DSTHz+",
	"36/QAEiQBDkcSXF2r+4nW0N8NBqNRqM/P81SUZSCA9dqdvJpVlJJC9Ag8S+apqLiOmGZ+SsDlUpWaib4",
	"7MR/I0pLxtez+YyZX0uqN7P5jNMCmjam/3wm4R8Vk5DNTrSsYD5T6QYKagbWu9K0rkfaJmuRuCFO7RBn",
	"r2afRz7QLJOgVB/Kv/F8RxhP8yoDoiXliqbmkyI3TG+I3jBFXGfCOBEciFgRvWk1JisGeaYWfpH/qEDu",
	"glW6yYeX9LkBMZEihz6cL0WxZBw8VFADVW8I0YJksMJGG6qJmcHA6htqQRRQmW7ISsg9oFogQniBV8Xs",
	"5MNMAc9A4m6lwK7xvysJ8Dskmso16NnHeWxxKw0y0ayILO3MYV+CqnKtCLbFNa7ZNXBiei3Im0ppsgRC",
	"OXn//Uvy7NmzF2YhBdUaMkdkg6tqZg/XZLvPTmYZ1eA/92mN5mshKc+Suv3771/i/OdugVNbUaUgflhO",
	"zRdy9mpoAb5jhIQY17DGfWhRv+kRORTNz0tYCQkT98Q2vtdNCef/U3clpTrdlIJxHdkXgl+J/RzlYUH3",
	"MR5WA9BqXxpMSTPoh+PkxcdPT+ZPjj//24fT5L/cn189+zxx+S/rcfdgINowraQEnu6StQSKp2VDeR8f",
	"7x09qI2o8oxs6DVuPi2Q1bu+xPS1rPOa5pWhE5ZKcZqvhSLUkVEGK1rlmviJScVzw6bMaI7aCVOklOKa",
	"ZZDNDfe92bB0Q1Kq7BDYjtywPDc0WCnIhmgtvrqRw/Q5RImB61b4wAX98yKjWdceTMAWuUGS5kJBosWe",
	"68nfOJRnJLxQmrtKHXZZkYsNEJzcfLCXLeKOG5rO8x3RuK8ZoYpQ4q+mOWErshMVucHNydkV9nerMVgr",
	"iEEabk7rHjWHdwh9PWREkLcUIgfKEXn+3PVRxldsXUlQ5GYDeuPuPAmqFFwBEcu/Q6rNtv+P87+9JUKS",
	"N6AUXcM7ml4R4KnIhvfYTRq7wf+uhNnwQq1Lml7Fr+ucFSwC8hu6ZUVVEF4VS5Bmv/z9oAWRoCvJhwCy",
	"I+6hs4Ju+5NeyIqnuLnNtC1BzZASU2VOdwtytiIF3X5zPHfgKELznJTAM8bXRG/5oJBm5t4PXiJFxbMJ",
	"Mow2GxbcmqqElK0YZKQeZQQSN80+eBg/DJ5GsgrA8YMMglPPsgccDtsIzZija76Qkq4hIJkF+clxLvyq",
	"xRXwmsGR5Q4/lRKumahU3WkARpx6XLzmQkNSSlixCI2dO3QY7mHbOPZaOAEnFVxTxiEznBeBFhosJxqE",
	"KZhw/DHTv6KXVMHXz4cu8ObrxN1fie6uj+74pN3GRok9kpF70Xx1BzYuNrX6T3j8hXMrtk7sz72NZOsL",
	"c5WsWI7XzN/N/nk0VAqZQAsR/uJRbM2priScXPLH5i+SkHNNeUZlZn4p7E9vqlyzc7Y2P+X2p9dizdJz",
	"th5AZg1r9DWF3Qr7jxkvzo71NvpoeC3EVVWGC0pbr9Lljpy9GtpkO+ahhHlaP2XDV8XF1r80Du2ht/VG",
	"DgA5iLuSmoZXsJNgoKXpCv/ZrpCe6Er+bv4py9z01uUqhlpDx+6+Rd2A0xmclmXOUmqQ+N59Nl8NEwD7",
	"SqBNiyO8UE8+BSCWUpQgNbOD0rJMcpHSPFGaahzp3yWsZiezfztqlCtHtrs6CiZ/bXqdYycjj1oZJ6Fl",
	"ecAY74xco0aYhWHQ+AnZhGV7KBExbjfRkBIzLDiHa8r1onmPtPhBfYA/uJkafFtRxuK7874aRDixDZeg",
	"rHhrGz5QJEA9QbQSRCtKm+tcLOsfHp6WZYNB/H5alhYfKBoCQ6kLtkxp9QiXT5uTFM5z9mpBfgjHRjlb",
	"8HxnLgcrapi7YeVuLXeL1Yojt4ZmxAeK4HYKuTBb49FgZPj7oDh8M2xEbqSevbRiGv/VtQ3JzPw+qfO/",
	"BomFuB0mLnxFOczZBwz+ErxcHnYop084TpezIKfdvrcjGzNKnGBuRSuj+2nHHcFjjcIbSUsLoPti71LG",
	"8QVmG1lY78hNJzK6KMzBGQ5oDaG69Vnbex6ikCApdGD4Nhfp1V+p2tzDmV/6sfrHD6chG6AZSLKharOY",
	"xaSM8Hg1o005YqYhvt7JMphqUS/xvpa3Z2kZ1TRYmoM3LpZY1GM/ZHogI2+Xv+F/aE7MZ3O2Deu3wy7I",
	"BTIwZY+zsyBk5ilvHwh2JtMAVQyCFPb1Tsyr+yAoXzaTx/dp0h59ZxUGbofcInCHxPbej8G3YhuD4Vux",
	"7R0BsQV1H/RhxkExUkOhJsD3ykEmcP8d+qiUdNdHMo49BclmgUZ0VXgaeHjjm1kazevpUsjbcZ8OW+Gk",
	"0ScTakYNmO+8gyRsWpWJI8WITso26AzUmPDGmUZ3+BjGWlg41/QPwIIyo94HFtoD3TcWRFGyHO6B9DdR",
	"pr+kCp49Jed/Pf3qydNfn371tSHJUoq1pAVZ7jQo8tC9zYjSuxwe9VeGr6Mq1/HRv37utZDtcWPjKFHJ",
	"FApa9oey2k0rAtlmxLTrY62NZlx1DeCUw3kBhpNbtBOruDegvWLKSFjF8l42YwhhWTNLRhwkGewlpkOX",
	"10yzC5cod7K6j6csSClkRL+GR0yLVOTJNUjFRMRU8s61IK6FF2/L7u8WWnJDFTFzo+q34ihQRChLb/l0",
	"vm+HvtjyBjejnN+uN7I6N++UfWkj32sSFSlBJnrLSQbLat16Ca2kKAglGXbEO/oH0Oc7nqJW7T6IdPiZ",
	"VjCOKn6142nwZjMblUO2bm3C3d9mXax4/Zyd6oGKgGPQ8Ro/47P+FeSa3rv80p0gBvtLv5EWWJKZhvgK",
	"fs3WGx0ImO+kEKv7hzE2SwxQ/GDF89z06Qvpb0UGZrGVuofLuBmsoXWzpyGF06WoNKGEiwxQo1Kp+DU9",
	"YJZHeyCaMXV48+uNlbiXYAgppZVZbVUSNNL1OEfTMaGppd4EUaMGrBi1+cm2stNZk28ugWbmVQ+ciKUz",
	"FTgjBi6SooVR+4vOCQmRs9SCq5QiBaUgS5yKYi9ovp1lInoETwg4AlzPQpQgKyrvDOzV9V44r2CXoD1c",
	"kYc//qwe/QnwaqFpvgex2CaG3vrB5+xBfainTT9GcN3JQ7KjEojnueZ1aRhEDhqGUHgQTgb3rwtRbxfv",
	"jpZrkGiZ+UMp3k9yNwKqQf2D6f2u0FblgJeXe+hcsAL1dpxyoSAVPFPRwXKqdLKPLZtGrdeYWUHACWOc",
	"GAceEEpeU6WtNZHxDJUg9jrBeayAYqYYBnhQIDUj/+xl0f7YqbkHuapULZiqqiyF1JDF1sBhOzLXW9jW",
	"c4lVMHYt/WpBKgX7Rh7CUjC+Q5ZdiUUQ1bXS3Znb+4tD1bS553dRVLaAaBAxBsi5bxVgN/R0GQCEqQbR",
	"lnCY6lBO7V4znyktytJwC51UvO43hKZz2/pU/9S07RMX1c29nQkws2sPk4P8xmLW+jhtqHlC48ikoFdG",
	"9sAHsTV79mE2hzFRjKeQjFG+OZbnplV4BPYc0gFdhPOiDGbrHI4O/UaJbpAI9uzC0IIHFCPvqNQsZSVK",
	"ij/C7t4F5+4EUXU9yUBTZh7rwQcrRJdhf2Lt2N0xbydIT3rD9sHvPWIjy8mZwgujDfwV7PDF8s46SF0E",
	"blX38BKIjGpON+UEAfVuF0aACZvAlqY635lrTm9gR25AAlHVsmBaW4+39kNBizIJB4jqB0dmdMpw61zk",
	"d2CKdv4chwqW19+K+cxKVOPwXXTEqhY6nCRVCpFPeHv3kBGFYJLdlJTC7DpzDpbeC89TUgtIJ8SgJaRm",
	"ng9UC824AvK/REVSylFgrTTUN4KQyGbx+jUzmAusntNZSBsMQQ4FWDkcvzx+3F3448duz5kiK7jxXsmm",
	"YRcdjx/jK/idULp1uO5B02KO21mEt6Pi1FwUTobr8pT9Fjo38pSdfNcZvNa2mjOllCNcs/w7M4DOydxO",
	"WXtII9OskzjuJJ1oMHRs3bjv56yo8vva8BVleSVh2LhweflhVVxefiTf25beLjj3RB6i46bxKl+526iS",
	"6JlAcmaeB1LQLKVKR1WjuEi+TmrfNhUFp1AGnF/cOaR814mDmgoDWUJKK+vU6bi2g6DxrlOLiETU2d0u",
	"CqMLmahdrHJtL+0Qq2spqpKoetstFWiq4Y/R1DVDx6DsTxy4VjQfh7wrjJSd7+7htrYDEQmlBIW8NXyd",
	"KvtVrMLwBcd81U5pKPoKPNv11wHx9r0XDntvDcFzxiEpBIddNGKPcXiDH2O9LX8f6Iw37VDfrvDcgr8D",
	"VnueKdR4V/zibgcM7V3tVnQPm98dt6O7DQM3UDcBeUkoSXOGmgvBlZZVqi85xbdRcNgi5lf/4ht+Lb/0",
	"TeLP88jr2Q11ySma3usXU5QvriDCl78H8I9mVa3XoHRHSlwBXHLXinFScaZxrsLsV2I3rASJNtCFbVnQ",
	"HVnRHB/3v4MUZFnpNnNF/3KlzdvbKpLNNESsLjnVJAfDVd8wfrHF4bwhxtMMB30j5FWNhUX0PKyBg2Iq",
	"iZuJf7Bf0YPHLX/jvHkw2M9+tqpHM37jhL7T0Apg+98P//Pkw2nyXzT5/Th58d+OPn56/vnR496PTz9/",
	"883/af/07PM3j/7z32M75WGPeT87yM9euTfF2SsUHBvdYw/2L6Z3KhhPokQWWtg6tEUeGvHXE9CjRrnr",
	"dv2S6y03hHRNc5ZRfTty6LK43lm0p6NDNa2N6KgR/FoPFMfuwGVIhMl0WOOtr/G+Z0U8zgCV4S50AM/L",
	"quJ2KyvlFPLoRust3GI1r2NJbAz5CcFAgw317hnuz6dffT2bNwEC9ffZfOa+foxQMsu2sTCQDLYxKdsd",
	"EDwYDxQp6U6BjnMPhD1qzLc2xXDYAszzTG1Y+eU5hdJsGedw3jnRvda3/Ixbr0FzflC1vnMaO7H68nBr",
	"CZBBqTex2NKWpICtmt0E6Jg7Symugc8JW8Ci+1rO1qC8W0EOdIUxjqgeFlOcretzYAnNU0WA9XAhk56k",
	"MfpB4dZx68/zmbv81b3L427gGFzdOWs9uv9bC/Lgh+8uyJFjmOqBjUiyQwcxJBEtlHOTbhnCDTezEfU2",
	"JOuSX/JXsGKcme8nlzyjmh4tqWKpOqoUyG9pTnkKi7UgJ97z+hXV9JL3JK3BpBeBzzspq2XOUnIVSsQN",
	"edpA5uizkeZrYR6OXZtgX351U0X5i50guWF6IyqduEjNRMINlVkEdFVH6uHINs56bNY5cWNbVuwiQd34",
	"cZ5Hy1J1I3b6yy/L3Cw/IEPl4lHMlhGlhfSyiBFQLDS4v2+FuxgkvfFhvpUCRX4raPmBcf2RJJfV8fEz",
	"IK0Qlt/clW9ocldCS195q4iirq4SF27fNbDVkiYlXQ8oDTTQEncf5eUCH9l5TrBbK3TGuwbiUM0CPD6G",
	"N8DCcXAYAC7u3PbyKTfiS8BPuIXYxogbjcHptvsVBNPcers6ATm9Xar0JjFnO7oqZUjc70wdib82Qpa3",
	"Aiq2Rk8rl7RgCSTdQHoFGcZPQ1Hq3bzV3RuanaDpWQdTNs+AdYXHYFhU7S6BVGVGnSjeUSgZDCvQ2rt6",
	"vYcr2F2IJpb2kDDEdlScGjqoSKmBdGmINTy2bozu5jtvBtR1laUPLsMoA08WJzVd+D7DB9mKvPdwiGNE",
	"0YraGkIElRFEWOIfQMEtFmrGuxPpx5ZnXhlLe/NF0hJ43k9ck+bx5BwPwtVgMJr9XgAmLRE3iiypkduF",
	"y7dhI78CLlYpuoYBCTnUrk+Mr2pp5HGQffde9KYTq+6F1rtvoiDbxolZc5RSwHwxpIKPmY67iZ/JGnCs",
	"ApVgGi2HsGWOYlLtl2OZDpUtK4fNCzQEWpyAQfJG4PBgtDESSjYbqnwqEMyY4s/yJBngD4xkHItfPws8",
	"JYK0KLXi2/Pc7jntvS5dFLsPXffx6uHTckLsuZHw0Tkzth2CowCUQQ5ru3Db2BNKE1XZbJCB42+rVc44",
	"kCTmdEGVEimzuVyaa8bNAUY+fkyIVQGTySPEyDgAGw2TODB5K8KzydeHAMldVCj1Y6NJM/gb4g7s1g3R",
	"iDyiNCyc8QGHV88BqPPUqe+vjr8YDkMYnxPD5q5pbtice/E1g/TCqFFs7QRNO9P4oyFxdkQDby+Wg9Zk",
	"r6LbrCaUmTzQcYFuBOKl2CY2giUq8S63S0PvUc9MjKeJHUwbsP5AkaXYorsFXi3WE3APLMNweDCCF/6W",
	"KaRX7Dd0m1tgxqYdl6ZiVKiQZJw6ryaXIXFiytQDEswQuTwMYtBvBUBH2dFka3SP372P1LZ40r/Mm1tt",
	"3uRW8U7vseM/dISiuzSAv74Wpo4adyqE95AKmQ3rKQyhMl2nv+yrF1zyTsM3JseVj6TiPG2/NvwTor9z",
	"A14BLXiaeUYQ8cqGbPQg+W5bCiPd2pAOG9/vkGLlRAk2Uk1ZnZVifJ07wWAITbEFe58kj3G75CZfjx9w",
	"muwc29yBR/4YLGUZh+OQl8p7h58RKAZOeQMHyuF3hMTF+I/C8nmYPt51RfvoQWm717QzSwRvrdjtYMin",
	"b83s20wV5ICv56T12kiuYjbuy8sPClA0O/fdAi0f5q+gfPco8NmSsGZKQ2NtMhKsx/SX1uNTTJslxGp4",
	"dbqUK7O+90LU8pzNy4IdW8v84iu4FhqSFZNKJ2iqiy7BNPpeofbpe9M0/qhoe4XZDJIsi1+iOO0V7JKM",
	"5VWcXt28P74y076tZQdVLVEwYZwATTdkiRlPo76iI1Nbd+LRBb+2C35N7229006DaWomloZc2nP8i5yL",
	"zk03xg4iBBgjjv6uDaJ05AINIiT73DF4YNjDidfpYsxM0TtMmR97r3+Vj9McEubsSCNrQdegQefciEOO",
	"9SOzTL1Jdh6NZeRCJy3lRwRdtYJHaXpl43HaG8zXtU4l7jZl39WThnZt9wzIp4/H9w/nhOAkh2vI9ztB",
	"U8S4V+CgZ4QdAV1vCIYTeB+P/VJ9fwcahNUr7cIYpZaedDNmuG2eRi79WPO2RoI1uHOBw5Otd0ZC8/TW",
	"0HffdFeWSQY5RMN0fgnicGhZYrC9bxwLWTGDMZ7BNg6O/TSPpSTvK+8rxrVNX3lfmfE640xfdpg/bgoK",
	"Spvp7PDse8NvzGCXQjQPL2qAKGvjwCgjxsHrl11QzKFLfQPXOC1Llm07dk876qB2/F4whheUG2wPBgLa",
	"iAWASVDtvIGNMs9mr26l7VlMwsxFO7tfKNOEUzHlay/0EVUHiO7D1QXQ/EfY/Wza4nJmn+ezu5lJY7h2",
	"I+7B9bt6e6N4Rjc8azZreT0ciHJallJc0zxxxuQh0pTi2pEmNve25y8srcW53sV3p6/fOfA/z2dpDlQm",
	"9WtncFXYrvyXWZVNUThwQHxu9w3VtX7OvoaDza/zqoUG6JsNuDzawYO6l/CzcS4IjqIzSK/i3sB7zcvO",
	"D8IuccQfAsraHaIx1VlviLYHBL2mLPc2Mg/tgOcuLm7a3RjlCuEAd/akCO+ie2U3vdMdPx0Nde3hSeFc",
	"I5m+C5vMXhHBu+5y5hWMpjck1YJiuk5rAekzJ14VaDVIVM7SuD2VLzHEhls/GdOYYOOB97QZsWIDble8",
	"YsFYppmaoNTuABnMEUWmT/06hLulcFWIKs7+UQFhGXBtPkk8lZ2DivpTZ1nvX6dxqdINbK3xzfB3kTHC",
	"VLXdG8/JXGMCRuiV0wP3Va318wutrU/mh8D94ADnvnDG3pU44pjn6MNRsw1U2LS9ayZL6HsrFnn9m8uZ",
	"OzBHtAIRU8lKit8hrqpCDV8kOtQn52Xo0fo78AkhZY0lpymk1Mw+uN1D0k1ocWo7JA5QPe584IKDWUK9",
	"NZpyu9W2IEjLrz1OMGEEyZEdvyEYB3Mv6ianN0saS6FqhAwDU2B+adnNtSC+s8e9s9Ewly95QQK/sbot",
	"s3kTSpBN4HY/B9MtBQY77WRRoZEMkGpDmWBufX1yJSLDVPyGcltXBq0ReJRcb/PA9wqhGyEx64mKm/gz",
	"SFkRVS5dXn7I0r45N2NrZquqVAqCsh1uIFuOylKRK31i3eka1JytyPE8KAzkdiNj10yxZQ7Y4oltsaQK",
	"rFLFe274LmZ5wPVGYfOnE5pvKp5JyPRGWcQqQWqhDp83taPKEvQNACfH2O7JC/IQXXQUu4ZHBovufp6d",
	"PHmBBlb7x3HsAnDlk8a4SbYKg1zjdIw+SnYMw7jdqIuoNsDWvBtmXCOnyXadcpawpeN1+89SQTldQ9wr",
	"tNgDk+2Lu4m2gA5eeGYLNiktxY6wgXBj0NTwp4FIM8P+LBgkFUXBdOEcOZQoDD01NTnspH44W/3JpVP2",
	"cPmP6A9VeneQziPyy9p97P0WWzV6rb2lBbTROifUprrJWeOp6JO8kzOfSQvzS9dppS1uzFxm6SjmoOPi",
	"ipSScY0Pi0qvkr+QdEMlTQ37WwyBmyy/fh7Jqd3O7coPA/yL412CAnkdR70cIHsvQ7i+5CEXPCkMR8ke",
	"NZGdwakcdNyKu+gM+QmNDz1VKDOjJIPkVrXIjQac+k6Ex0cGvCMp1us5iB4PXtkXp8xKxsmDVmaHfnr/",
	"2kkZhZCx9JjNcXcShwQtGVyjn358k8yYd9wLmU/ahbtA/+caT73IGYhl/iwPPgQOsfgEbwO0+YSeibex",
	"9rQtPS2ZK2r2wRfONAuILRm5z+5xl2Iyrc6HQOU59DToBpQIrQDYDsYOewHfXcUQmHxaOzSEo/bSYpT5",
	"rYgs2VcgqG08LmIyorcaukDMB8Oglm6oOWlne//yHjXeLNL37DBfPKz4RxfYP5nZIJL9CgY2MahEEd3O",
	"rP4eOJdR8q3YTt3UDu/2G/tPgJooSiqWZz83uUE6hT4k5ekm6iyyNB1/bUoS1ouzhzmaH3VDObfeCH3d",
	"BL5SfvWvmch76+9i6jwF4xPbdmuP2OV2FtcA3gbTA+UnNOhlOjcThFhtp12ow/rytcgIztMk42zu9X7N",
	"mqCywD8qUDp2L+IHG1qAGvWVoWKb4B94hnqMBfnBlhTfAGnlCkT9gc3SBJlPs25NPVWZC5rNiRnn4rvT",
	"18TOavvYwlo2sf7aXrutVQz75x7iaDvmW3sfEX1m1Upj6k6laVHGUpSYFhe+AeZBCa1L+LAOsbMgr6xO",
	"Q/kXs53E0MOKyQIyUk/npGqkCfMfrWm6QWVBi6UOk/z0ihCeKlVQhbWuplYn38VzZ+B2RSFsTYg5EUZy",
	"uGHKVpKGa2hnRalTBDkxwGdJaS9PVpxbSolKxWMprG6Ddg+c9YL0BqgoZB3EHyi9ODf1AwtknGOvaDbL",
	"brWNXvlVm2OjrpL1xhfQpVxwlmIuydjV7KpST7HOTki7GY8McP42ahY5XNEaH3WwhsPiYNUPzwgd4vrm",
	"oeCr2VRLHfZPjeWPN1STNWjlOBtkc1+qxmmoGVfgkiljgfKATwrZsngjh4w6UTRy8oFkhMHZAyqH7823",
	"t04hhVGLV4zj09PHSNgASatDxqK52rxXmSZrgREU7lCEa/pg+iwwWUsG248LX2QXx7AGY7Ns6x3RH+rU",
	"+0o43wTT9qVpaxPqNT+34uDspKdl6SYdLmQUlQf0lg8iOGLzrh29AuTW44ejjZDbqJMT3qeG0OAaXSSg",
	"JC40ZqCoTycIxgitlqKwBbH+0dE8WlE30deMQ1MCOnJBpNErATcGz+tAP5VKqq0IOImnXQDN0S8ixtCU",
	"dkaxuw7V2WDnT1qmMz/H8DY29YgGGEfdoBHcKN/VlacNdQfCxEssee8Q2a8uhFKVE6JccE273lCMcRjG",
	"7RNyti+A/jHoy0S2u5bUnpxDbqKhVCXLKluDTmiWxfQJ3+JXgl99ulLYQlrVWbzLkqSYma+dqrBPbW6i",
	"VHBVFSNz+QZ3nC4o4BWhhrCImN9hdLxe7vDfWArr4Z1x7kEH+9h7X6CsDp87RG5uj9STeg1NJ4qtk+mY",
	"wDvl7uhopr4doTf975XSc7FuA/KFE5SNcblwj2L87TtzcYT5u3p52e3VUqfXQndQ4cuu4rOxTgzT5ko+",
	"6rQ3Z5B5eVwBMVygcY6X30BcS6DrpfZ+tXbtoeiWdDAYi2qXP0FTMsqCBmPSrV+ZjT5HKOI6/SFfMutK",
	"Zj73ek+TDHtyNo49ilDvpNgH6EfvAU1KypzTRsMs+ph14V7D6sKxQ9dscHcRLohqUGP34/VQwJOPA7aR",
	"HZ2SdlfgkiqVEq6ZqLw7hPeX809C+6srKR7EFQ+uv+83g1P9uWrQQaXthSufYpfp3uQ//my9KwlwLXf/",
	"BCrc3qb3CgLGcha3ygE64Sqqb9JT78pXdU3Bq+ukENlYwPSPP5NX3rY06d7xhBxLtyQyV4QrGiz+2pWA",
	"8M2M9Dl52jeu02lZjk89ECHen9w2PHT6oVRT5nyOad3e+fNryyiGKoTIWyUIZ+aw1fGCSb1o2BsgsC0B",
	"c90Ggc3D2TOmEpQLcsTXapIDVTCC4TBrm2s7EckX29em/bRg+3ghy+GUs02aWWSepVCsKc4Tq3A50eX4",
	"AotUBhbD/lje3+8aUi1ky49JAhySQNdMFlRP/v+pZwcUJbVntqf/kTSz81nIW6KBiu540SZFDlrV0OQa",
	"SVVv20SYvevMzCGpYO6HMD+saK7itcoGnV07mU8Ch5VIouf4ws6yCdm+3XLmgQ8Ey8YRGY8EsM7f/28i",
	"0/q13y86ezW7xl8VvcQLQfIQW1ppcYADSe1FjZIh7tcauCusvYqhZn9U1GoFqWbXexJd/LIBHiRRmHtN",
	"MMKyCvJesDrKBhOKHm7naAAay0MxCk+Q2P/O4AzFiF7B7oEiLWqI1nqae+H+NrkkEQN4axnBoxQq5qVo",
	"TVfOcYypmjIQC94r2HaHJiv3YJHNQM655VyeJNsSz8iU1yKm+540l+l6UCYwDBgZyoXRL3M3rPF4hVUF",
	"VV0A2+eiDPWC5CxSCMrlssS0JLW11me1BOV/8zmI7Cw5u4KwDCjaxjGFgmsRVfZ6PXIyIif1or+j1asw",
	"d5afmTUxHP1430gOaPR+SnOBlZ+Gwp3aYRO1m9cDZZ1DUUzBSlQI1wqkK5eMN0MuFCRaeNe6MTjGUGE9",
	"YG+FBDVYd8ECN5gN9X2T7hXrz9hkGdQ5voYLJBIKaqCTQVLW4TnHkP3SfvcBrj4n116ddk2vyd6sqj56",
	"h6keEkOqXxF3W+4PnL2NeptxDjLxtu6uTyE3qAztr6UUWZW6RDDBwahNAJMTlo2wkqhmOO2vsqfkyzEb",
	"+OsgDcEV7I6s/iXdUL4O0quF0FvR3q4hyFzW2e171fzHlZz52i5gfS9w/pna8/msFCJPBgyuZ/1Es90z",
	"cMXSKyNmV43f+0ChTfIQ7Xy1R83NZucTq5YlcMgeLQg55TbSyDvXtCsddSbnD/TY/FucNats7men2F9c",
	"8njIBib1kXfkb36Yca6mwDC/O05lB9mTxnQ7kORW0ptI2dm+P91kd5duKdCGqCwUMSnllqm6Jp3vvnI/",
	"QvpBFcTx10+Yya/xYpbWRoTSUlMZsi28vGlMP9PqMfoOe8ALlTVBRUbPjRw4f7Kr8ZsaKcFSBimhtfx9",
	"+h+3wIYvBVukMGrSLNMmILZuau19CZR76mWtM4vjua9aw7R9gmPO375KTqHN0KZhDQjHnEt5TfMvr1bD",
	"fI6niA9XXD6+0PD9GyLZolLdzt/vNZ00d/DWvb+p+TtUA/4CZo+ixl43lDP+1JUwvYkMU9zTnOSiqYuM",
	"Q5IbHNNah598TZYuiq6UkDLFOgHGN76qSf3cwyJfzsdyq/e8L/et82eh70DG7oEgSvK2qZCgBd4PDYTN",
	"Ef2TmcrAyY1SeYz6emQRwV+MR4XpbPZcF1cts7GtONPxhxQS7tl8HDiCHWg+7ifqmbo8ayI1l06loL/O",
	"ybd1C7eRi7pZ21Tfhz5yx9LoT3FZiFfHMN3RZ8IiBEvLEASV/PbkNyJhhbUjBXn8GCd4/Hjumv72tP3Z",
	"HOfHj6Ni3BfzlrA4cmO4eaMU44xpvVAY2JZMDiT9e++Yu7uw0XxHsAPEs3PmEK0Gg1N7v9EvnAoaZe69",
	"Cn67NNd4Hz8LUOaXXE8Uw/3PQ7EL1j9/IEymcxYqlmf7DmUr6KmpfIthPb+6gNw/pfbur1aX3WeTrv7h",
	"IT5y3QOAiImstTV5MFUQzjQhksl1i8QtIXGllWR6h3nCvOqT/Rr1qfmhtpY4K3CdWcbJHVpcQZ1prrGt",
	"VMpLNj8ImqMsYN4z6KGohcgX5LstLcocHJP65sHyP+DZX55nx8+e/MfyL8dfHafw/KsXx8f0xXP65MWz",
	"J/D0L189P4Ynq69fLJ9mT58/XT5/+vzrr16kz54/WT7/+sV/PDB3gAHZAjrzWSlm/xMLVCen786SCwNs",
	"gxNash9hZ2thGjL2VTZpilwQCsry2Yn/6b977rZIRdEM73+duaD32UbrUp0cHd3c3CzCLkdrVKYmWlTp",
	"5sjP0yvDefrurA4Ps75QuKM28seQAm6qI4VT/Pb+u/MLcvrubNEQzOxkdrw4XjzBXMYlcFqy2cnsGf6E",
	"p2eD+37kkwiffPo8nx1tgOZoEzd/FKAlS/0ndUPXa5ALV27U/HT99MiLcUefnCL589i3o7Byz9Gnlr49",
	"29MTHV2OPvkkVuOtW1minJ0h6DARirFmR0uMQJ7aFFTQeHgp+LhTR5/weTL4+5ELy4x/xGeiPQNH3igV",
	"b9nC0ie9NbB2eqRUp5uqPPqE/0GaDMCyTtB9cK0b2JGt69//ecfT6I/9gbr15WI/H31qp21vIVRtKp2J",
	"m6AvPoDs670/X13xq/X30Q1l2og0zrKIOan6nTXQ/MgFLnV+bXyFe1/QATr4MdiT+K9HdTx+9GOX2GNf",
	"3WYPNPJhpyh0CRvaWnOfswzVcrZFqJiz1xso/a3IdiPlirfJknEqd+2Sxc31bj/2ZZl+QfUN2HSSXjsV",
	"6mzxVemWEV68WlZg8+agZQF54NPj4xF4C7UuXZjMUKn0FWV5JSEphlRKl5cfVpj+6Xvb0isd5lGjGT7h",
	"sQaYGbiJqqAkZ9dAllLQLKVqIBEVU2jHqqvmxV8ihQpTgnXKlKrpMJAlpNQ8yfQGdtba6CBo6vapCUkK",
	"uyiMLmRKcW0XK4T+cCFWsV6BpwlfNv/54Ts/qgpuefxHgPuWZsSHhSfkDc0N2UOGBRYkOkO3AzufHz/5",
	"ovCdcXQeMaIEsaLS5/nsqy+MpDNuBHuaE2xpIXj2RSE4B3nNUiAXUJRCUsnyHfmJ13HOQda9/tn6iV9x",
	"ccM98EbarooC+V3NNhWhaBcJ6VPICLlSRZhudHpgoxKhGzW9IL+cvn979vaHEyuS19Kj+f+2BMkK4Jrm",
	"aFGonDFHm3OcwTXkojSfMdWcBNRoc0HWFZWUawCXCFEW+OhcVTy1ASpM7wzQqwpLc5qrXkjLkuhaoWUG",
	"y8vM5rMQBHOGt4nh12vgibsxkqXIdj5HqqQ3emsZxFHwzgrfLbOTD8GL5cPHzx/NN2la46dGDD85OkJD",
	"8UYofTT7PP/UEdHDjx9r0H0qkVkp2TVGJn38/H8DAAD//5DFbRYMwgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
