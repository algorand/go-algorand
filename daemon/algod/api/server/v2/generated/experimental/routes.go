// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
