// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XPcNrLgv4Ka96qc+IaSv5K3VtXWO8VOsro4ictSsvee7ctiyJ4ZrDgAFwClmfj8",
	"v1+hAZAgCXA40sTerbqfbA3x0Wg0Gt2N/vgwy8WmEhy4VrOzD7OKSroBDRL/onkuaq4zVpi/ClC5ZJVm",
	"gs/O/DeitGR8NZvPmPm1ono9m8843UDbxvSfzyT8o2YSitmZljXMZypfw4aagfWuMq2bkbbZSmRuiHM7",
	"xMXL2ceRD7QoJCg1hPJnXu4I43lZF0C0pFzR3HxS5JbpNdFrpojrTBgnggMRS6LXncZkyaAs1Ilf5D9q",
	"kLtglW7y9JI+tiBmUpQwhPOF2CwYBw8VNEA1G0K0IAUssdGaamJmMLD6hloQBVTma7IUcg+oFogQXuD1",
	"Znb2dqaAFyBxt3JgN/jfpQT4HTJN5Qr07P08trilBplptoks7cJhX4KqS60ItsU1rtgNcGJ6nZAfa6XJ",
	"Agjl5M13L8jTp0+fm4VsqNZQOCJLrqqdPVyT7T47mxVUg/88pDVaroSkvMia9m++e4HzX7oFTm1FlYL4",
	"YTk3X8jFy9QCfMcICTGuYYX70KF+0yNyKNqfF7AUEibuiW181E0J5/+su5JTna8rwbiO7AvBr8R+jvKw",
	"oPsYD2sA6LSvDKakGfTto+z5+w+P548fffy3t+fZf7s/v3r6ceLyXzTj7sFAtGFeSwk832UrCRRPy5ry",
	"IT7eOHpQa1GXBVnTG9x8ukFW7/oS09eyzhta1oZOWC7FebkSilBHRgUsaV1q4icmNS8NmzKjOWonTJFK",
	"ihtWQDE33Pd2zfI1yamyQ2A7csvK0tBgraBI0Vp8dSOH6WOIEgPXnfCBC/rnRUa7rj2YgC1ygywvhYJM",
	"iz3Xk79xKC9IeKG0d5U67LIiV2sgOLn5YC9bxB03NF2WO6JxXwtCFaHEX01zwpZkJ2pyi5tTsmvs71Zj",
	"sLYhBmm4OZ171BzeFPoGyIggbyFECZQj8vy5G6KML9mqlqDI7Rr02t15ElQluAIiFn+HXJtt/1+XP/9E",
	"hCQ/glJ0Ba9pfk2A56KA4oRcLAkXOiANR0uIQ9MztQ4HV+yS/7sShiY2alXR/Dp+o5dswyKr+pFu2abe",
	"EF5vFiDNlvorRAsiQdeSpwCyI+4hxQ3dDie9kjXPcf/baTuynKE2pqqS7hBhG7r986O5A0cRWpakAl4w",
	"viJ6y5NynJl7P3iZFDUvJog52uxpcLGqCnK2ZFCQZpQRSNw0++Bh/DB4WuErAMcPkgSnmWUPOBy2EZox",
	"p9t8IRVdQUAyJ+QXx9zwqxbXwBtCJ4sdfqok3DBRq6ZTAkacelwC50JDVklYsgiNXTp0GAZj2zgOvHEy",
	"UC64poxDYZgzAi00WGaVhCmYcFzfGd7iC6rg62epO779OnH3l6K/66M7Pmm3sVFmj2Tk6jRf3YGNS1ad",
	"/hP0w3BuxVaZ/XmwkWx1ZW6bJSvxJvq72T+PhlohE+ggwt9Niq041bWEs3f8ofmLZORSU15QWZhfNvan",
	"H+tSs0u2Mj+V9qdXYsXyS7ZKILOBNapwYbeN/ceMF2fHehvVK14JcV1X4YLyjuK62JGLl6lNtmMeSpjn",
	"jbYbKh5XW6+MHNpDb5uNTACZxF1FTcNr2Ekw0NJ8if9sl0hPdCl/N/9UVWl662oZQ62hY3clo/nAmRXO",
	"q6pkOTVIfOM+m6+GCYBVJGjb4hQv1LMPAYiVFBVIzeygtKqyUuS0zJSmGkf6dwnL2dns305b+8up7a5O",
	"g8lfmV6X2MmIrFYMymhVHTDGayP6qBFmYRg0fkI2YdkeCk2M2000pMQMCy7hhnJ90qosHX7QHOC3bqYW",
	"31basfjuqWBJhBPbcAHKSsC24QNFAtQTRCtBtKJAuirFovnhi/OqajGI38+ryuIDpUdgKJjBlimtvsTl",
	"0/YkhfNcvDwh34djoygueLkzl4MVNczdsHS3lrvFGtuSW0M74gNFcDuFPDFb49FgxPxjUByqFWtRGqln",
	"L62Yxn9xbUMyM79P6vyvQWIhbtPEhYqWw5zVcfCXQLn5okc5Q8Jx5p4Tct7vezeyMaPECeZOtDK6n3bc",
	"ETw2KLyVtLIAui/2LmUclTTbyMJ6T246kdFFYQ7OcEBrCNWdz9re8xCFBEmhB8M3pciv/0LV+ghnfuHH",
	"Gh4/nIasgRYgyZqq9cksJmWEx6sdbcoRMw1RwSeLYKqTZonHWt6epRVU02BpDt64WGJRj/2Q6YGM6C4/",
	"439oScxnc7YN67fDnpArZGDKHmf3yFAYbd8qCHYm0wCtEIJsrIJPjNZ9EJQv2snj+zRpj761NgW3Q24R",
	"uENie/Rj8I3YxmD4RmwHR0BsQR2DPsw4KEZq2KgJ8L10kAncf4c+KiXdDZGMY09BslmgEV0VngYe3vhm",
	"ltY4e74Q8m7cp8dWOGlNzoSaUQPmO+8hCZvWVeZIMWK2sg16A7WvfONMoz98DGMdLFxq+gdgQZlRj4GF",
	"7kDHxoLYVKyEI5D+Osr0F1TB0yfk8i/nXz1+8tuTr742JFlJsZJ0QxY7DYp84XQzovSuhC+HK0PtqC51",
	"fPSvn3lDZXfc2DhK1DKHDa2GQ1kDqBWBbDNi2g2x1kUzrroBcMrhvALDyS3aibXtG9BeMmUkrM3iKJuR",
	"QljRzlIQB0kBe4np0OW10+zCJcqdrI+hyoKUQkbsa3jEtMhFmd2AVExEXlNeuxbEtfDibdX/3UJLbqki",
	"Zm40/dYcBYoIZektn8737dBXW97iZpTz2/VGVufmnbIvXeR7S6IiFchMbzkpYFGvOprQUooNoaTAjnhH",
	"fw8aRYErtoFLTTfVz8vlcVRFgQNFVDa2AWVmIraFkesV5IJbT4g92pkbdQp6+ojxJjqdBsBh5HLHc7Qz",
	"HuPYphXXDeP46KF2PA+0WANjCcWqQ5b311ZT6LBTPVARcAw6XuFnNHS8hFLT74S8ai2B30tRV0cX8vpz",
	"Tl0OdYtxppTC9PU6NOOrsut9szKwn8TW+FkW9MIfX7cGhB4p8hVbrXWgVryWQiyPD2Nslhig+MEqZaXp",
	"M1TNfhKFYSa6VkcQwdrBWg5n6Dbka3Qhak0o4aIA3PxaxYWzhL8GPhTj+7YO5T29tnrWAgx15bQ2q60r",
	"gq+3g/ui7ZjR3J7QDFGjEm9XzaOjbWWns74ApQRa7MgCgBOxcA9E7ukKF0nx6Vl78caJhhF+0YGrkiIH",
	"paDInGFqL2i+nb069AieEHAEuJmFKEGWVN4b2OubvXBewy5DRwlFvvjhV/XlZ4BXC03LPYjFNjH0Nmq+",
	"ewUcQj1t+jGC608ekh2VQPy9QrRAabYEDSkUHoST5P71IRrs4v3RcgMS3+P+UIr3k9yPgBpQ/2B6vy+0",
	"dZVw/3PqrZHwzIZxyoUXrGKDlVTpbB9bNo06OrhZQcAJY5wYB04IXq+o0vYNmfECTV/2OsF5rBBmpkgD",
	"nFRDzMi/eg1kOHZu7kGuatWoI6quKiE1FLE1cNiOzPUTbJu5xDIYu9F5tCC1gn0jp7AUjO+QZVdiEUR1",
	"89TinCyGi8MHCXPP76Ko7ADRImIMkEvfKsBu6AKVAISpFtGWcJjqUU7jdzWfKS2qynALndW86ZdC06Vt",
	"fa5/adsOiYvq9t4uBCj0vHLtHeS3FrPW+W1NFXFwkA29NrIHmkHsY/cQZnMYM8V4DtkY5aOKZ1qFR2Dv",
	"Ia2rlaQFZAWUdDcc9Bf7mdjPYwPgjrfqrtCQWS+m+Ka3lOydRkaGFjieigmPBL+Q3BxBowq0BOJ67xm5",
	"ABw7xpwcHT1ohsK5olvkx8Nl262OjIi34Y3QZscdPSDIjqNPATiBh2bou6MCO2et7tmf4r9AuQkaOeLw",
	"SXagUktoxz9oAQkbqnMQD85Lj733OHCUbSbZ2B4+kjqyCYPuayo1y1mFus4PsDu66tefIPrMSArQlJVQ",
	"kOCDVQOrsD+x/jf9Me+mCk6yvQ3BHxjfIsspmUKRpwv8NexQ535tHTsDU8cxdNnIqOZ+opwgoN5dzIjg",
	"YRPY0lyXOyOo6TXsyC1IIKpebJjW1mG7q+pqUWXhANF3jZEZ3SOedYr0OzDlVfEShwqWN9yK+czqBOPw",
	"XfUUgw46nC5QCVFOsJANkBGFYJK/B6mE2XXmfMe997CnpA6QjmnjC25z/T9QHTTjCsh/iZrklKPKVWto",
	"ZBohUVBAAdLMYESwZk7n2dFiCErYgNUk8cvDh/2FP3zo9pwpsoRbH3BhGvbR8fAh2nFeC6U7h+sI9lBz",
	"3C4i1wc++JiLz2khfZ6y37PAjTxlJ1/3Bm9eicyZUsoRrln+vRlA72Rup6w9pJFpXhU47qS3nGDo2Lpx",
	"3y/Zpi6pPsarFdzQMhM3ICUrYC8ndxMzwb+9oeXPTTcMJoHc0GgOWY4hEBPHgivTx0ZN7NMNW28yttlA",
	"waiGckcqCTlYL38j8qkGxhNi/f/yNeUrlPSlqFfOAc2Og5y6VtamIms+GCIqDektz9A6HePczunYB3oY",
	"OQio0cX6pm2redzSZj4X2zPlSg2Q1zf1R1+35rOkqmqQetOqqhY53WiVCVy8I6gF+GknnvgGgqgzQssQ",
	"X+G2mFNgNvePsbW3Q8egHE4cuMS1H1NecUZPLndHkFbsQERCJUHh3RLal5T9KpZhZJq7fNROadgMTfC2",
	"62+J4/cmqegJXjIO2UZw2EWDsRmHH/Fj9Djh/ZbojJJGqm9feejA3wOrO88UarwvfnG3+ye0/9SkvhPy",
	"WG+ZdsDJcvmEp8O97+Ruyrs+cNKyjLwJuriVPgNQ8yZOnklClRI5Q2HrolBze9DcM6ILcumi/3XjjXuE",
	"s9cft/f4FYZEonEXyopQkpcMTb+CKy3rXL/jFI1LwVIjXktei06bG1/4JnH7ZsT86IZ6xyl6rDUmp6in",
	"xRIi9pXvALzVUdWrFSjdU1KWAO+4a8U4qTnTONfGHJfMnpcKJLoOndiWG7ojS0MTWpDfQQqyqHVXbMew",
	"LKVZWbqXODMNEct3nGpSAlWa/Mj41RaH86/1/shy0LdCXjdYiN/uK+CgmMri3lXf26/o+OqWv3ZOsBhG",
	"bz/btxszfhu7tUPbUxsa/n+++M+zt+fZf9Ps90fZ8/9x+v7Ds49fPhz8+OTjn//8f7s/Pf345y//899j",
	"O+VhjwUNOcgvXjqV9uIl6i3t480A9k9muN8wnkWJLHTD6NEW+QIDZB0Bfdm1auk1vON6yw0h3dCSFYa3",
	"3IUc+jfM4Cza09Gjms5G9KxYfq0HagP34DIkwmR6rPHOUtTQITEenoeviS7iDs/LsuZ2K730baNPvGOY",
	"WM6bEEybneWMYHzemnqvRvfnk6++ns3buLrm+2w+c1/fRyiZFdtY9GQB25iS5w4IHowHilR0p0DHuQfC",
	"HvWBs04Z4bAb2CxAqjWrPj2nUJot4hzO+/Q7Y9GWX3DrbG/OD75N7tyTh1h+eri1BCig0utY1oaOoIat",
	"2t0E6PmLVFLcAJ8TdgInfWNNYfRF541XAl1i9gDUPsUUbag5B5bQPFUEWA8XMskiEqMfFHkct/44n7nL",
	"Xx1dHXIDx+Dqz9k8RPq/tSAPvv/2ipw6hqke2EBeO3QQehlRpV10UceTyHAzm6vGCnnv+Dv+EpaMM/P9",
	"7B0vqKanC6pYrk5rBfIbWlKew8lKkDMfsPSSavqODyStZDqpIFSMVPWiZDm5DhWSljxtipDhCO/evaXl",
	"Srx7937gVDFUH9xUUf5iJ8iMICxqnbkEB5mEWypjj1aqCXDHkW0Gk7FZrZAtamvZ9AkU3PhxnkerSvUD",
	"XYfLr6rSLD8gQ+XCOM2WEaWF9LKIEVAsNLi/Pwl3MUh66+0qtQJF/rah1VvG9XuSvasfPXoKpBP5+Td3",
	"5Rua3FUw2bqSDMTtG1Vw4VathK2WNKvoKvY29u7dWw20wt1HeXmDNo6yJNitE3HqPepxqHYBHh/pDbBw",
	"HBw9h4u7tL18Mqv4EvATbiG2MeJG+2J/1/0KYlDvvF29ONbBLtV6nZmzHV2VMiTud6bJcbMyQpZ3o1Bs",
	"hdqqSwe0AJKvIb92eVpgU+ndvNPde+o4QdOzDqZsBh8bQYY5JPBlYQGkrgrqRHHKd/1gfgVae3/gN3AN",
	"uyvRpqA4JHq/G0yuUgcVKTWQLg2xhsfWjdHffOcOhop9VfmYbAzO82Rx1tCF75M+yFbkPcIhjhFFJ9g5",
	"hQgqI4iwxJ9AwR0Wasa7F+nHlme0jIW9+SLZfDzvJ65Jqzw5z61wNWh1t983gOnAxK0iC2rkduEyWdmA",
	"6YCL1YquICEhh487E8OSOw9COMi+ey9604ll/0Ib3DdRkG3jzKw5SilgvhhSQWWm56/nZ7Lvh+5lAhNU",
	"OoQtShSTGsdGy3So7Dyy2Yx7KdDiBAyStwKHB6OLkVCyWVPlk2xhLjJ/lifJAH9gAoCxtC8XgatZkHCs",
	"SerieW7/nA60S5f8xWd88WleQtVyQsoWI+Gjd3tsOwRHAaiAElZ24baxJ5Q2GUG7QQaOn5fLknEgWcxr",
	"LTCDBteMmwOMfPyQEGuBJ5NHiJFxADa+i+PA5CcRnk2+OgRI7pIpUD82vqgHf0M87sv6cRuRR1SGhbPE",
	"q1buOQB1ro7N/dVzuMVhCONzYtjcDS0Nm3MaXzvIIPsIiq29XCPOM+PLlDg78gBiL5aD1mSvorusJpSZ",
	"PNBxgW4E4oXYZjbwMyrxLrYLQ+9R13YMQ40dTJvn5YEiC7FFbx+8Wqwr9R5Y0nB4MAINf8sU0iv2S93m",
	"FpixacelqRgVKiQZZ85ryCUlTkyZOiHBpMjliyB1y50A6Bk72jzITvndq6R2xZPhZd7eavM2JZmPGood",
	"/9QRiu5SAn9DK0yTbOV1X2KJ2im6TivdPDOBCBkjesMmho80w6cgBSWgUpB1hKjsOvZyanQbwBvn0ncL",
	"jBeYzYby3ZeBJ5SEFVMaWiO695P4HOZJikn0hFimV6cruTTreyNEc03ZZ0Ts2FnmJ18BuhIvmVQ6wxeI",
	"6BJMo+8UKtXfmaZxWanra2VTzrIizhtw2mvYZQUr6zi9unl/eGmm/alhiapeIL9l3DqsLDBFctQDc2Rq",
	"66Q7uuBXdsGv6NHWO+00mKZmYmnIpTvHv8i56HHeMXYQIcAYcQx3LYnSEQYZRM4OuWMgNwVv/Cdj1tfB",
	"YSr82Hu9dnz8buqOsiNF1xIYDEZXwfCZyIglTAcZhochrYkzQKuKFdueLdSOmtSY6UEGD5+XrYcF3F03",
	"2B4MoEj7BpYgIWpCaD5Z7+hGXArz8mFkdycVTmTTk8b/rinNX5RNoYRgojsYwVwmxfQet76XnUyD3aXs",
	"E4waM76ZbgrCL+PW80ujS3RxG2hUNjn3HjyzhG4eUmDAgcOpmPKlJYaU2YQ57iPOK6DlD7D71bTF5cw+",
	"zmf3s1XHiNuNuAfXr5vzFMUz+kJY22Xn6elAlNOqkuKGlpmz6Kd4gRQ3jhdgc/8A8InvlviRufr2/NVr",
	"B/7H+Swvgcqskc2Sq8J21b/Mqmx6xcQB8anrjZLtlSQruweb3+SEC18BbtfgcoAH4v8gWWn7whMcRfcq",
	"sIy7ZO1lb+4xyi5x5FEKquZNqrWX2iep7jMUvaGs9IZKD23CfQoXNy3jbZQrhAPc+zkreJXMjspuBqc7",
	"fjpa6trDk8K5RrKUb2wifkUE7/ssoJP5rnJuDhuKqUatGWrInHi9QdNNpkqWx43afKEMcXD7WGkaE2yc",
	"kP7NiDVLvH3zmgVjmWZTkgn1gAzmiCJTRfMZtbhbCCc71Jz9owbCCuDafJJ4KnsH1UsvOOrgOjXC2nAu",
	"N7B9EmmHv49QF6bZ7d94CMS4RBc+jQ7AfdnYKPxCGxNgK9Qd6mERzji4Eke8Ixx9OGq23qLr7hNnWBNp",
	"yP8MYdjk+PsLMnnhzuX7TcwRLbDEVLaU4neIK9Zoj4hEiPnEwgzdin6HUH4My4p0WExjTmvrRLWz79vu",
	"6cJ7auPvLaz7RTe5jO8iqcdP9fSNHJHKVTxVmcNjSkoMzadd75oE98ATFLwnY6ZY/7RCuT0yNgKq46QZ",
	"P3ihO/SpHb89eA7mgQt5SW8XNJZG1whrBqZgBzuPQFoQ39njWDVhQnZ2EjhBNG2ZzaJQgWyDYIcZme4o",
	"eNlpJ4tcrYSFRBPKVnP7cF0qERmm5reU2/JDpp9lSa63Amu1Nb1uhcQcKCr+XlVAzja0jEtgRT58myjY",
	"itnKOrWCoHSLG8hWLbNU5MrfNMFvDjUXS/JoHtSPcrtRsBum2KIEbPHYtlhQhTdiY0FtupjlAddrhc2f",
	"TGi+rnkhodBrZRGrBGmEY1QTm1fXBehbAE4eYbvHz8kX+N6s2A18abDo5JzZ2ePn+Fpg/3gUu0hdZaQx",
	"rlwgW/6rY8txOsYHdzuG4YNu1JNoughbGjF9AYycJtt1ylnClu7O2H+WNpTTFcRdnDZ7YLJ9cTfRAtzD",
	"Cy9sXS+lpdgRpuPzg6aGPyXCJgz7s2CQXGw2TG/cq6QSG0NPbV0WO6kfzhYJcym1PVz+Iz7uV/5ts6eM",
	"f1prv5UTYqtGF4yf6Aa6aJ0TahPflKx1u/GJ/smFz6uFOcab1OIWN2Yus3QUF9ELZ0kqybhGBa3Wy+xP",
	"JF9TSXPD/k5S4GaLr59F8qp38/vywwD/5HiXoEDexFEvE2TvxRLXl3zBBc82hqMUX7ZhSsGpTHohxN+b",
	"U4/e40NPFW7NKFmS3OoOudGAU9+L8PjIgPckxWY9B9HjwSv75JRZyzh50Nrs0C9vXjkpYyNkLFlme9yd",
	"xCFBSwY36HQa3yQz5j33QpaTduE+0H/eJzMvcgZimT/LUUXgZvOrN28ng02MCP/rj64O6ED2TjjIWA+Y",
	"ps8nDqKJ+tJZCQ39Twmumvzt8d+INMoiSqMPHyLQDx/OnTD3tyfdz5ZJPXwYTyEVtQ2ZX1ssHMQK+yk2",
	"TN/YHn4jIpYaX6+hecZzgTIRS1mK1ZoP5igv3FBz0s2N/+nvwuO4YMaf2eOn4N27t/jF4wH/6CPiMx95",
	"3MDWkciuJEEoQW2QKMkUzffAwYeSb8R2KuH0OKknnn8CFCVQMmJHOhQjqVdXcvEypEuDkwWUwqhHYSrn",
	"0Nj8r4Nbs+j5CIZrVha/toH9vctDUp6voy4RC9Pxt7YMZ7NEyx6j2WHXlHMoo8NZrew3r71F9Mu/i6nz",
	"bBif2LZfb8cut7e4FvAumB4oP6FBL9OlmSDEajdmuonJKVeiIDhPm4q0ZYjDOk1BNY1/1KB0TCTAD9Yv",
	"GF9iDMO1xRwI8ALtNifke1tpfw2kk2cO7SU+EVA3KUZdlYIWc0xQdPXt+StiZ7V9bDE5W0xiheaC7iqi",
	"JtzpSUKaunDx6Lfp44yH45hVK501tR9i+QVMi7Y6Beu9SqIhIcTOCXkZ1My2qQjMEATzU8kNFEGpCatF",
	"IE2Y/2hN8zUaRzqXV5rkp1dB8VSpgsrDTQXBJvUwnjsDtyuEYuugzInQa5C3TNkC63AD3ZQGTX4PZ5zz",
	"KQ66y5M155ZSTg6QI5pEw4ei3QNnhRD/cBmFrIf4A1VjW0To0KIwl9grmgmxX2FmUHLYBsg3leF+9EWj",
	"KRec5ZiHMCYEuUrsU55CJqRsjD9wqJk7oZHDFa1r03haOywmK914RugQN3xWDL6aTbXUYf/UWPJ7TTVZ",
	"gVaOs0Ex9+WZnEWecQUulTTW7Q/4pJAdT4nGA2xYerd5pD2QjDCyMmFi+c58+8kZ4DDk6JpxVLUd2pxo",
	"bW3mWChaG/2cabISoNx6uukl1FvT5wQzLRSwfX/iC0vjGNbRwCzbetUMhzr3PjbOp8W0fWHauvx3zc+d",
	"IBY76XlVuUnTxbui8oDe8iSCIyJQ5h+rA+Q244ejjZDbqHMc3qeG0OAGXWugwnt4QBhNIatekUSjFliK",
	"whbEegFHk+AwHgHjFePQlj2PXBB59ErAjcHzmuinckm1FQEn8bQroKU1WUQYmtLuEfC+Q/Wz/xmU4Br9",
	"HOltbGtwJRhH06AV3CjfNdXWDXUHwsQLWjbOZZGKWihVOSGqwKC0Xo2tGOMwjNtX8eteAAlLSkcmst0x",
	"FeahN1Eqz8CiLlagM1oUscze3+BXgl9JUaPkAFvI6yYDdFWRHNNqdfOMDanNTZQLrurNyFy+wT2nC4rW",
	"RaghLJzndxjjGBc7/DeW/ji9M86t7GBPcu9DVhyWXG/oGR+Teg1NZ4qtsumYwDvl/uhop74bobf9j0rp",
	"pVh1AfkchtEElwv3KMbfvjUXR5h8Z5DT214tTW4cdCMWvtQwqo1NVocuV8KrbJDkG59dm1Km42aIdFHS",
	"OV5+ieiN0Mxt71dr+k3FcOTJkCOqXfCzpmSUBSUDSq0/Ys9wPnzDSPkgWhfE4xmc3VpHEeqdW4cA/eA9",
	"50lFmXNSaZnFELMuqGkYZjbF+77d4P4iXKhQ0ib6w00qrMfn2sTv/aKF1+AyolQSbpiovfuH97P0KqH9",
	"tVMCsAmsiq5/aNrGqT6vwTlpHr9yxWPsMp1O/sOv1iuXANdy909gLB9s+qAc4lDateaptglp6g5MqkPQ",
	"uRWn5KGNpTx1smGnIOOecpIDsno5RRwYloeczy6Kgy7MWNrcmR0lduzixR7TWQXbTIJ4xCqhWFv+I1YF",
	"cqJD8xUWcgyyIg7H8l5wN5BrrPnSevdIgENyJJrJgrrS/z+7YEKdbvy+XVLBsUyCw0Ive+74QbBvELBu",
	"i2ScTM+bd974cCKfxmT3K+CutHM3qmxybMtyCblmN3uCq/+6Bh4E7s69XQZhWQax1qyJlcDcXIdbHVuA",
	"xmKfR+EJcuTeG5xUpN817B4o0qGGaNWOub9q75KWCTGA3CEzJCJUzEfKGpKd2wpTDWUgFrxPou0ObYLL",
	"ZMG/IFXAHefyJGkujjZ9wMiU8Ypjk+YyXQ9KqoFu/6n462HBorT+8RLrQ6mmGK9P6xRq6eRimPz21qWF",
	"wlD45u3EJ4gC5X/zeS/sLCW7hrAkIb5U3VJZ+BZR04u36mQj99EgaNoX2+kDvWxmZq0H+TBqM5JOEeMt",
	"8lIYMSJLBa10nbYbj6cHyrqm2eoe6I5u4FqCdKVbUf4thYJMC+9xPgbHGCqs/92dkKCSKYwtcMnEYm/a",
	"zGmYyp1iIjHq3O7CBRIJG2qgk0F+s/ScY8h+Yb/7MEWfynuvhamh1/01ZXzsAFMDJIZUvyTuttwf/ngX",
	"YxPjHGTmX576yc44yO5rSCVFUef2gg4PRmOQm5xKcISVRO00+XCVPR0hiCG/ht2pVYJ8MR6/gyHQVnKy",
	"oAdJcnqbfFTzm4rBvToKeJ/TcjWfVUKUWeKx42KYoa1P8dcsv4aCmJvC+9gmCqSRL9DG3rxm3653PiNZ",
	"VQGH4ssTQs65jWrwD9vdEgG9yfkDPTb/Fmctaps00RnVTt7xuHs4pjOU9+RmfphxHqbAsLp7TmUH2ZP/",
	"a5vIDifpbaRc4MlUrXz41Nwv4dYSlYUiJpNc2herF3jQY4ajW8k0OMcGe4mbjSTupYuoUsTcMOF2WqaJ",
	"xmXX7EgpEhd3OBkCpGFKSo8WCjd4FAFNebY9jkKNj1Bb2ar1ExqKR2UpbjM8RlmT3zKmdJl23VvCZ/Ru",
	"uxlyW0DgcESVkyB2ZE0LkgspIQ97xCOhLFAbISErBfofxZ5Gl9oIhBsMf+CkFCsiKqPn2zSx/hEpWnZt",
	"MFfNOcX7HAJ3jxgGaJ6j7imI60KaLlNnPFZRO5uPwa45s29sifQzoFz+BYcg23gI70hducNr1l2tI6Yy",
	"xJynj4ML0zkSP7ieVADmhKO130x4Hqu7111XvwJkqh6rFhuWx9H9r+UglHTriVFvDBUupbuNzMVmyFJC",
	"Lta8B+PpGaIZOF2U0dvBHT/3LoZ0bv6LQkN/XLIEx84SHDRSQN4y/ixPXk89ABBSGy6ma2nzwIeXR1Nd",
	"UqxseCm+6vUBnchw0HnifrCZEY4J1MdxQomVn4wchGZ3XHVMHx+fOFRRt4xxLwhbkngx1ReiKXsxkX8G",
	"AKS9IzowTPKROBSMJZb4zmgEyReNZjoP5GvnV98vZsSUY4Y5tZapNRAzdi3BxWvbWsS94ocV1WsvqZrm",
	"Q/sRL2ALCoOpbQU3qqy101tdXSHkvgogqqyEG+g4jbgg8hovcnYDYRFl25kUABW+QfQ145g3RHgd9tQl",
	"t/YseE+fgt2o/mQRa3eK7FGOoqrclmf2mKipR8lAdMOKmnbwp+5RTjZdSTYqgE2rGvyL7ep5hesekwH8",
	"+t9P4z4HM544wsbYzl6fKDxH0bPO4y5RYV6ExpiKsxXNo4sl7JZbqIre8rTxYUjorQg7fZsCxH67hRzF",
	"ga7Pz/1xQnAwono5T5Kyq2x2+O5GrPtTrifac2UUI8OLRqh3jHgHJbTjWipol4A3TB/nNSnXN3KNWzM+",
	"U5EBmGr5GHomQ+v5GjTb0B0p2HIJ0j5UKk15QWURNmec5CA1ZZzc0p26u8ZqoJU1zPcqreZWwUE9Y42p",
	"r2hzt4CUO2cOuadC2QCIPdRxVMsJKiG+iEfUQSveaJGqLD6AIR6mRbdGaUd/1QQBujQsqLJbBiQ4ai9k",
	"Q6/hwHkU+x3Gp8Ekc+5NRQucdcoUH0fP2c+IOmRiv3CmR0+alYv7DsT2hdceBE//fNW6mdjNGdJ/zOf7",
	"yta3DP2+++Wi/F5bc7OdDxLpr7vqTGIX0eDmAgZC3UVNV+s7Nr2YZ7m9lzK8r9SIIwmooMBm7h4ChuLb",
	"4KKzSJk7v/wDpTurVtGiYFYsihfBxxoT7mx1p22Ms2ac6W8QgSUyDlElqiyf8rpYQAmGzVntzkHahXGC",
	"9bLK91xJ0Ys/wZW6qqRYIn/AY2HFHfTDai75ed9DsCvYNAcPi+XntURx/5bu9qfVbYWbeHCFHdnbKrzP",
	"WAO122B7xJWtvxbNWnuIIB3hOrESZMN8ocdfjI0aav0a/rjluJfL+ALOuVMosbDsGL21KqcnlQitUb6L",
	"MQ3/NneHBaZk3gl+70fbqua0/BEbNH5JxjWzmCDUl3i8MIRhnCiadX2bVL1wl+tQVmp9JOwgAeO1goy5",
	"fRfAYcnc9Wt/buZWa2rEgxNyXipBFHjBT+/Ig4Fc98BgOak8olkYIAJlCNtA4LL2lZxyLnQMVA9hVLXE",
	"V/TEdeThMCwySMceIk361AyFTZMmZOGlicaAg/9ZMC2p3N25AGqbAyIW8oReKj6h3Z7F2FyjPvndp1hK",
	"NCVqrGIi3Wa5FEpl1qdCZxKWe8Rir4u0F3Vngb4qotu/Zo2pEnp/pFqaWF446/spHCIyVQRFzFeWCnnf",
	"IWzAif00NOwbQWE8o8EI4fniikciuQOdVlOpE0aPfa9e3dGAHhGUx2qJdc7wJ4QpUdktBMkWcfsE3KST",
	"DycCq7V1LMR2hHmECQEb8APm0LiKMp5LoMq6UV787JT/k6SOPX4S0jyrd0b28imcK0nAE+apqmlzjBDj",
	"hFmQE0+ZZ4TA9k9jSW/KNLbq3J0ulbIMuObYTBGmH6SDaDaug98QCQNIo3fC3ao9TTpgw8i5yClDABIh",
	"MZ1ghrAYXJvoTdoATLyh/XtP/1b5sX0H2uu7iZD4DnvAC2Nc2naNu6ED5zNnTPuxQUqwlCQldJa/L2zG",
	"LbB9OAu2yNl3tQZbmtPmgOnuSxATpV40oUYJg84gIgkrvwmOB2oYyWRNzqiJhYRjDpe8oeWnj0bCkoDn",
	"iA8o3qT9l8NwlhDJFpXqbsl0XtFJcwehK8ebmr/G6Km/gtmjqDHBDeVezwYmA3wwoKV1NVu6SFQzJLnF",
	"Ma0/xOOvycKl5K0k5Ez1X+Vufb3/JnoDJFu6UCjY6j3hIvvW+avQ9yDjpX84Jz8F4q3AF48WwvaIfmam",
	"kji5USqPUd+ALCL4i/GosMbQnuviuhOT3doCgxtNSDhybHaQZeXA2Oxh9aSpy7Pxx+bSqRUM1zn5tu7g",
	"NnJRt2ubmlhgcv5cLOw8JR9APNet6Y4JCY6S9PaglLd/QCoCiyM3hps3RjG/ppLT2QRsiTyIvf2oWVns",
	"1ZPCrJYf57MVcFBMYd7G31yG6U97l3oIbHjk8KhaWO8T020RE1lrZ/JgqiBf5YRUla5bJDElhh7ktWR6",
	"hwXEvH2R/RZNmvB9E4DrAribZ39392lxDU0JujZct1b+dv1e0BLvI+uNwM0tJMoT8u2WbqrSvaSRPz9Y",
	"/Ac8/dOz4tHTx/+x+NOjrx7l8Oyr548e0efP6OPnTx/Dkz999ewRPF5+/XzxpHjy7Mni2ZNnX3/1PH/6",
	"7PHi2dfP/+OB4UMGZAuoT6N6Nvvf2Xm5Etn564vsygDb4oRW7Acwe4MPEkuB1W8MUnM8ibChrJyd+Z/+",
	"pz9hJ7nYtMP7X2cui/tsrXWlzk5Pb29vT8IupyuMz8u0qPP1qZ8Ha5J05JXXF41XqnVAwh1tIiCsKudI",
	"4Ry/vfn28oqcv744aQlmdjZ7dPLo5LEZX1TAacVmZ7On+BOenjXu+6kjttnZh4/z2ekaaInh7OaPDWjJ",
	"cv9JAi127v/qlq5WIE/Q8dj+dPPk1IsVpx9cnOLHsW+noc3q9EMnnLPY0xNV0dMPvtLVeOtOCSQXxhp0",
	"mAjFWLPTBSYNn9oUVNA4vRRUNtTpBxSXk7+fuhy88Y+ottjzcOpjnuMtO1j6oLcG1l6PnOp8XVenH/A/",
	"SJ8BWDbj1ane8lN8yzj90FmN+zxYTff3tnvY4mYjCvAAi+XS1vga+3z6wf4bTATbCiQzgp+NMncuNM2x",
	"uihmZ7Nvg0Yv1pBfW5M3+oTheXny6FEkHWDQi9jjSxclFObsPXv0bEIHLnTYyZUTGnb8hV9zccsJJo+y",
	"vLzebKjcoYyka8kV+fkHwpYE+lMw5WdA/kFXCh/5sZT5bD7roOf9R4c0myzlFMtk7Fpc+p93PI/+ONzm",
	"TqKIxM+nH7plxDv0o9a1LsRt0Be1KWsKGM5nPtaq//fpLWXayEcu6wBWyxp21kDLU5ditPdrm9Vr8AVT",
	"lQU/hp610V9Pm6KO0Y99ThX76k5qopF3ePOfW6kllAJmZ2+D+//t+4/vzTd5g545bz8El9rZ6Sm+Ta2F",
	"0qezj/MPvQsv/Pi+oTGf235WSXaDidzef/x/AQAA///djp2CUt4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
