// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAAA//9JU6Cco8IAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
