// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"brkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
