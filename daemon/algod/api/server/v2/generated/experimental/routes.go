// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
