// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//zmP5ZXzuwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
