// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"5prcAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
