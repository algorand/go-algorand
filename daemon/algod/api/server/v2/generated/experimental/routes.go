// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"JbvBwPEPn/5fAAAA//8oIiKxYrUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
