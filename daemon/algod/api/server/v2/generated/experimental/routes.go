// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"o28/FRO5AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
