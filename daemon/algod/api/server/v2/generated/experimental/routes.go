// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
