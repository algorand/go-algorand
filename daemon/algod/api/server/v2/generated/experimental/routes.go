// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
