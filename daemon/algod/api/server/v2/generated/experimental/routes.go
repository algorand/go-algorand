// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. WARNING: This endpoint is experimental and under active development. There are no guarantees in terms of functionality or future support.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
