// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9+3PcNtLgv4Ka76vy44aS/Ih3rarUd4qdZHVxHJelZO9by5dgyJ4ZrEiAAUDNTHz6",
	"36/QAEiQBDnUI/Zu1f1kawg0Go1Go9EvfJqloigFB67V7PjTrKSSFqBB4l80TUXFdcIy81cGKpWs1Ezw",
	"2bH/RpSWjK9m8xkzv5ZUr2fzGacFNG1M//lMwu8Vk5DNjrWsYD5T6RoKagDrXWla15C2yUokDsSJBXH6",
	"enY98oFmmQSl+lj+xPMdYTzNqwyIlpQrmppPimyYXhO9Zoq4zoRxIjgQsSR63WpMlgzyTB34Sf5egdwF",
	"s3SDD0/pukExkSKHPp6vRLFgHDxWUCNVLwjRgmSwxEZrqokZweDqG2pBFFCZrslSyD2oWiRCfIFXxez4",
	"w0wBz0DiaqXArvC/SwnwBySayhXo2cd5bHJLDTLRrIhM7dRRX4Kqcq0ItsU5rtgVcGJ6HZAfK6XJAgjl",
	"5P13r8izZ89emokUVGvIHJMNzqoZPZyT7T47nmVUg//c5zWar4SkPEvq9u+/e4Xjn7kJTm1FlYL4Zjkx",
	"X8jp66EJ+I4RFmJcwwrXocX9pkdkUzQ/L2ApJExcE9v4XhclHP+LrkpKdbouBeM6si4EvxL7OSrDgu5j",
	"MqxGoNW+NJSSBuiHo+Tlx09P5k+Orv/jw0nyD/fnV8+uJ07/VQ13DwWiDdNKSuDpLllJoLhb1pT36fHe",
	"8YNaiyrPyJpe4eLTAkW960tMXys6r2heGT5hqRQn+UooQh0bZbCkVa6JH5hUPDdiykBz3E6YIqUUVyyD",
	"bG6k72bN0jVJqbIgsB3ZsDw3PFgpyIZ4LT67kc10HZLE4HUreuCE/nWJ0cxrDyVgi9IgSXOhINFiz/Hk",
	"TxzKMxIeKM1ZpW52WJHzNRAc3Hywhy3SjhuezvMd0biuGaGKUOKPpjlhS7ITFdng4uTsEvu72RiqFcQQ",
	"DRendY6azTtEvh4xIsRbCJED5Ug8v+/6JONLtqokKLJZg167M0+CKgVXQMTin5Bqs+z/6+ynt0RI8iMo",
	"RVfwjqaXBHgqMsgOyOmScKED1nC8hDQ0PYfm4fCKHfL/VMLwRKFWJU0v4yd6zgoWmdWPdMuKqiC8KhYg",
	"zZL6I0QLIkFXkg8hZCHuYcWCbvuDnsuKp7j+zbAtXc5wG1NlTndIsIJuvz6aO3QUoXlOSuAZ4yuit3xQ",
	"jzNj70cvkaLi2QQ1R5s1DQ5WVULKlgwyUkMZwcQNsw8fxm+GT6N8Beh4IIPo1KPsQYfDNsIzZnebL6Sk",
	"KwhY5oD87IQbftXiEnjN6GSxw0+lhCsmKlV3GsARhx7XwLnQkJQSlizCY2eOHEbA2DZOAhdOB0oF15Rx",
	"yIxwRqSFBiusBnEKBhy/7/RP8QVV8OL50BnffJ24+kvRXfXRFZ+02tgosVsycnSar27DxjWrVv8J98Nw",
	"bMVWif25t5BsdW5OmyXL8ST6p1k/T4ZKoRBoEcKfTYqtONWVhOML/tj8RRJypinPqMzML4X96ccq1+yM",
	"rcxPuf3pjVix9IytBohZ4xq9cGG3wv5j4MXFsd5G7xVvhLisynBCaeviutiR09dDi2xh3pQxT+rbbnjx",
	"ON/6y8hNe+htvZADSA7SrqSm4SXsJBhsabrEf7ZL5Ce6lH+Yf8oyN711uYyR1vCxO5LRfODMCidlmbOU",
	"GiK+d5/NVyMEwF4kaNPiEA/U408BiqUUJUjNLFBalkkuUponSlONkP5TwnJ2PPuPw8b+cmi7q8Ng8Dem",
	"1xl2MiqrVYMSWpY3gPHOqD5qRFgYAY2fUExYsYdKE+N2EQ0rMSOCc7iiXB80V5aWPKg38Ac3UkNvq+1Y",
	"eneuYIMEJ7bhApTVgG3DB4oEpCdIVoJkRYV0lYtF/cPDk7JsKIjfT8rS0gO1R2ComMGWKa0e4fRps5PC",
	"cU5fH5DvQ9ioigue78zhYFUNczYs3anlTrHatuTm0EB8oAgup5AHZmk8GYyafx8ch9eKtciN1rOXV0zj",
	"v7m2IZuZ3yd1/vdgsZC2w8yFFy1HOXvHwV+Cy83DDuf0GceZew7ISbfv7djGQIkzzK14ZXQ9LdwROtYk",
	"3EhaWgTdF3uWMo6XNNvI4npHaTpR0EVxDvZwwGuI1a332t79EMUEWaGDwze5SC//RtX6Hvb8wsPqbz8c",
	"hqyBZiDJmqr1wSymZYTbq4E2ZYuZhnjBJ4tgqIN6ivc1vT1Ty6imwdQcvnG1xJIe+6HQAxm5u/yE/6E5",
	"MZ/N3jai34I9IOcowJTdzs7JkJnbvr0g2JFMA7RCCFLYCz4xt+4bYfmqGTy+TpPW6FtrU3Ar5CaBKyS2",
	"974NvhHbGA7fiG1vC4gtqPvgDwMH1UgNhZqA32uHmcD1d+SjUtJdn8gIewqRzQSN6qpwN/DwxDejNMbZ",
	"k4WQt5M+HbHCSWNyJtRADYTvvEMkbFqViWPFiNnKNugAarx840KjCz5GsRYVzjT9E6igDNT7oEIb0H1T",
	"QRQly+EeWH8dFfoLquDZU3L2t5Ovnjz99elXLwxLllKsJC3IYqdBkYfubkaU3uXwqD8zvB1VuY5Df/Hc",
	"GyrbcGNwlKhkCgUt+6CsAdSqQLYZMe36VGuTGWddIzhlc56DkeSW7MTa9g1qr5kyGlaxuJfFGCJY1oyS",
	"EYdJBnuZ6abTa4bZhVOUO1ndx1UWpBQyYl/DLaZFKvLkCqRiIuJNeedaENfCq7dl93eLLdlQRczYaPqt",
	"OCoUEc7SWz5d7lvQ51ve0GZU8tv5Rmbnxp2yLm3ie0uiIiXIRG85yWBRrVo3oaUUBaEkw454Rn8P+mzH",
	"U7Sq3QeTDl/TCsbRxK92PA3ubGahcshWrUW4+92sSxVvn7NDPVARdAw53uBnvNa/hlzTe9dfugPEcH/l",
	"F9IiSzLTEG/Bb9hqrQMF850UYnn/OMZGiSGKH6x6nps+fSX9rcjATLZS93AYN8AaXjdrGnI4XYhKE0q4",
	"yAAtKpWKH9MDnnt0GaKnU4cnv15bjXsBhpFSWpnZViVBP15PcjQdE5pa7k2QNGrAi1G7n2wrO5z1CucS",
	"aGZu9cCJWDhXgXNi4CQpOiG1P+ickhDZSy28SilSUAqyxJko9qLm21khokfohIgjwvUoRAmypPLOyF5e",
	"7cXzEnYJuswVefjDL+rRF8BXC03zPYTFNjHy1hc+5w/qYz1t+DGG6w4esh2VQLzMNbdLIyBy0DBEwhvR",
	"ZHD9uhj1VvHuZLkCiZ6ZP5Xj/SB3Y6Aa1T+Z3++KbVUOBIK5i845K9BuxykXClLBMxUFllOlk31i2TRq",
	"3cbMDAJJGJPECHhAKXlDlbbeRMYzNILY4wTHsQqKGWIY4UGF1ED+xeuifdipOQe5qlStmKqqLIXUkMXm",
	"wGE7MtZb2NZjiWUAu9Z+tSCVgn2Qh6gUwHfEsjOxBKK6Nro7d3t/cmiaNuf8LkrKFhINIcYQOfOtAuqG",
	"wTADiDDVENoyDlMdzqkjcOYzpUVZGmmhk4rX/YbIdGZbn+ifm7Z95qK6ObczAQpjcFx7h/nGUtaGQa2p",
	"uUIjZFLQS6N74IXYuj37OJvNmCjGU0jGON9syzPTKtwCezdpVa4kzSDJIKe7PtCf7WdiP48BwBVvLj5C",
	"Q2LjWeKL3nCyDx8YAS0QnoopjwS/kNRsQXPzaBjE9d4DOQOEHRNOjo8e1KBwrOgSeXg4bbvUEYh4Gl4J",
	"bVbc8QOi7CT6FIQH6FCDvj0psHPS3Mu6Q/w3KDdArUfcfJAdqKEpNPBvNIEBa5oLFQ72S0e8dyRwVGwO",
	"irE9cmRoyw6Y9t5RqVnKSrzr/AC7e7/6dQeIOpxIBpqyHDISfLDXwDLsT2wkRhfm7a6Ck6wwffR7ZpjI",
	"dHKmUOVpI38JO7xzv7MhfudBYOA93GUjUM35RDlBRH3gkFHBwyawpanOd0ZR02vYkQ1IIKpaFExrG7rb",
	"vupqUSYhgKiFe2RE586x4XF+Bab4l84QVDC9/lLMZ/ZOMI7feedi0CKHuwuUQuQTrEc9YkQxmOT5J6Uw",
	"q85cFLGPI/Wc1ELSCW305dXH/wPVIjPOgPy3qEhKOV65Kg21TiMkKgqoQJoRjApWj+l8/A2FIIcC7E0S",
	"vzx+3J3448duzZkiS9j40HvTsEuOx4/RjvNOKN3aXPdgKzTb7TRyfKDp3xx87hbSlSn7fcwO8pSVfNcB",
	"XvsLzJ5SyjGumf6dBUBnZ26nzD3kkWn+dYQ7yaofgI7NG9f9jBVVTvV9+C9GFdL6QsGKAjJGNeQ7UkpI",
	"wYZXGw1LWVwMasQGXqVryleoWEtRrVzkj4WDgrFS1oQhK94DEVU+9JYnKymqMiYoXbSnj7A3agdQc/UJ",
	"CImdraK/ofV4LqliygnmCR6szvcG5pBbYT6rOEbAQ5bkYhVD2ymf/iJi6NlcllhbDrEAZ5uVkYsVqTC8",
	"oB4oqtcOXlDN2l41F1S7Ru1shfhiYPpFoqo0BYiGIseufg327azMJs/GATTaSyVtLBahqa5oHjI/OV0S",
	"ynftdE3KcmWEMVME25nOTXzv3M7N59IsaW59xJHkjnDDthTPgAG7K9uQuEuaif4Q5F2jpPUZNtwXZteb",
	"3fXn+BYa0DEs+wMHwWDNx6F4sLOqLPPdPWhnFhCRUEpQeJaG9jRlv4plmJPlDlu1UxqKvsvBdv11QP69",
	"H7zYCp4zDkkhOOyiaciMw4/4MSrP8Dwf6Iya1VDf7mWphX8HrfY4U7jxrvTF1Q5E5Ls6EPIeFr8Lt+Nt",
	"CrPR0JoKeUkoSXOGtlbBlZZVqi84RWtOsNkiASP+2jps33vlm8QNihF7nwN1wSkGC9U2nqiTewkRg8Z3",
	"AN7Mp6rVClRHnpIlwAV3rRgnFWcaxyrMeiV2wUqQGLVxYFsWdGdEIpoj/wApyKLSbRmNGTFKG/FpXV9m",
	"GCKWF5xqkoO56v/I+PkWwXnXsecZDnoj5GVNhfiRsgIOiqkkHtjyvf2KMYdu+msXf4gZzPazdZYY+E3a",
	"zA6NPU1W7v95+F/HH06Sf9Dkj6Pk5f84/Pjp+fWjx70fn15//fX/bf/07PrrR//1n7GV8rjH8jUc5qev",
	"3R3y9DVeFBpvSQ/3z2YpLxhPokwWxgR0eIs8xNxEx0CP2mYkvYYLrrfcMNIVzVlmNMHbsENXxPX2ot0d",
	"Ha5pLUTHbOTnekP1+w5ShkSETEc03voY78eCxTOj0H3nkp1wvywrbpfS69828N/H5IjlvM5+s4Uxjgmm",
	"Rq2pDyhzfz796sVs3qQ01d9n85n7+jHCySzbRrVF2MZuVW6D4MZ4oEhJdwoGFFLEPRp+ZKMgQrAFmOu4",
	"WrPy80sKpdkiLuF8OLWzzmz5Kbdxzmb/oDNw53wMYvn58dbS6OWlXscS5luaArZqVhOgE6BRSnEFfE7Y",
	"ARx0rSOZuTG6QKgc6BITt/H+Kaakh9T7wDKa54qA6uFEJpkgYvyDyq2T1tfzmTv81b3r4w5wDK/umLXn",
	"z/+tBXnw/bfn5NAJTPXA5lBa0EHWW+RW6hI7WqE7RprZMiE2ifSCX/DXsGScme/HFzyjmh4uqGKpOqwU",
	"yG9oTnkKBytBjn2uyGuq6QXvaVqDlXyCLB1SVoucpeQy1Igb9rTVGfoQLi4+0HwlLi4+9qIY+vqrGyoq",
	"X+wAibl2i0onLrc8kbChMuYlUnVuMUK2xSPGRp0TB9uKYpe77uDHZR4tS9XNMexPvyxzM/2ADZXLoDNL",
	"RpQW0usiRkGx2OD6vhXuYJB04y0rlQJFfito+YFx/ZEkF9XR0TMgraS739yRb3hyV8Jk+8pgDmTXrIIT",
	"t/ca2GpJk5KuYs6oi4sPGmiJq4/6coGX7Dwn2K2V7OeDmRFUMwFPj+EFsHjcOHEJJ3dme/k6QvEp4Cdc",
	"Qmxj1I3GRX7b9QrS/269XJ0Uwt4qVXqdmL0dnZUyLO5Xpi4vsjJKlo9bUGyFsaGuEssCSLqG9NKVyICi",
	"1Lt5q7sPjXGKphcdTNniKTZ5B9P30ZS/AFKVGXWqeNeitNgRBVr74NT3cAm7c9Fk/98kcbqdx6uGNipy",
	"aqBdGmYNt62D0V18F3+FJq+y9OmwmBfl2eK45gvfZ3gjW5X3HjZxjClaeaZDhKAyQgjL/AMkuMVEDbw7",
	"sX5seuaWsbAnX6SQipf9xDVpLk8uVCqcDdrd7fcCsBKT2CiyoEZvF66IkM1VDaQYWoMHNOTQmzIxI7Tl",
	"gUEg+8696Eknlt0DrXfeRFG2jRMz5yingPliWAUvM50AOT+Sddg53wTWBnQEW+SoJtWRhFboUNnyatli",
	"Z0OoxRkYJG8UDo9GmyKhZrOmytc3wjJQfi9P0gH+xNzrsYoboYE/qPVU29u9zO3u097t0tXd8MU2fIWN",
	"8Go5oVqG0fAxnDy2HIKjApRBDis7cdvYM0qTB94skMHjp+UyZxxIEgsTo0qJlNkCVc0x48YAox8/JsSa",
	"gMlkCDE2DtBGRzQCJm9FuDf56iZIcpfHTj1sdGEHf0M85cYGThuVR5RGhLMBh1LqJQB1sYX1+dWJcEUw",
	"hPE5MWLuiuZGzLkbXwOkV/gB1dZOmQcXCvFoSJ0dscDbg+VGc7JH0W1mE+pMHum4QjeC8UJsE5tzF9V4",
	"F9uF4fdoLDlmAMY2pi2x8UCRhdhieA0eLTZ2eQ8uw3h4NIIb/pYp5FfsN3SaW2TGhh3XpmJcqJBlnDmv",
	"ZpchdWLK0AMazBC7PAyqZtwKgY6xoylB6y6/ey+pbfWkf5g3p9q8qQbl03Ri239oC0VXaYB+fStMXefi",
	"XVdjidop2lEi7RIfgQoZY3ojJvpOmr4rSEEOeClIWkpUchlz3Zm7DeCJc+a7BcYLLCRC+e5REHokYcWU",
	"hsaI7iMlvoR5kmL9MiGWw7PTpVya+b0Xoj6mbIEc7Nia5mefAcbuLplUOkEPRHQKptF3Ci/V35mmcV2p",
	"Hdxkq32yLC4bcNhL2CUZy6s4v7pxf3hthn1bi0RVLVDeMm5DVhZYnTYa8jgytI2KHZ3wGzvhN/Te5jtt",
	"N5imZmBp2KU9xr/JvuhI3jFxEGHAGHP0V22QpCMCMkhV7UvHQG+ymxNTVQ/GrK+9zZR52HvDRnzC7NAZ",
	"ZSFF5xIYDEZnwdBNZNQSpoPirv0c0oE9QMuSZduOLdRCHbwx0xsZPHxJrA4VcHUdsD0UCOyesTQWCapd",
	"/axR8G2Z3lbxkYNJlDlv1ygLBUI4FFO+yHyfUHWa2z5anQPNf4DdL6YtTmd2PZ/dzXQao7WDuIfW7+rl",
	"jdIZXfPWlNbyhNyQ5LQspbiieeIMzEOsKcWVY01s7u3Rn1nUxc2Y59+evHnn0L+ez9IcqExqVWFwVtiu",
	"/LeZlS20NrBBfBFrc+fzOrtVJYPFr6tDhUbpzRpcNeBAG+2VLWwcDsFWdEbqZTxCaK/J2flG7BRHfCRQ",
	"1i6SxnxnPSRtrwi9oiz3djOP7UA0D05uWu3LqFQIAdzZuxI4yZJ7FTe93R3fHQ137ZFJ4Vgj9YoLW5Jb",
	"EcG7LnSMet6VzuteUCw6aK0ifeHEqwItCYnKWRq3sfKFMszBre/MNCbYeEAZNRArNuCK5RULYJlmasJF",
	"t4NkMEaUmL6A5RDtFsI9t1Jx9nsFhGXAtfkkcVd2NipWeXTW9v5xanSH/lgOsLXQN+DvomOEBTe7Jx4i",
	"Ma5ghJ66Hrqv6yuzn2htkcLw68YlcQOHfzhi70gccdY7/nDcbIMX122PW/g6Sl/+GcawZbL3P83iL6+u",
	"8ufAGNGnVphKllL8AfF7Hl6PIxlCvsQowyiXP4BPiEFvrDvNizHN6IPLPaTdhFaodpDCANfjygduOax1",
	"6C3UlNulti8ftGLd4gwTRpUeWvgNwzice5G4Od0saKwQpFEyDE4njQO4ZUvXgvjOnvaqTnSwo5PAl1y3",
	"ZTb7uwTZJO/1K8ncUmGww05WFRrNALk21Anm1v+XKxEBU/EN5fYBDdPPbiXXW4E1fpleGyGxdoOKm/0z",
	"SFlB87jmkKV9E2/GVsy+DVEpCB4fcIDsuzuWi9wDDnUWkSPN6ZIczYMXUNxqZOyKKbbIAVs8sS0WVKEk",
	"rw1RdRczPeB6rbD50wnN1xXPJGR6rSxhlSC1UofXm9p5tQC9AeDkCNs9eUkeottOsSt4ZKjozufZ8ZOX",
	"aHS1fxzFDgD3tseYNMlQnPzdiZM4H6Pf0sIwgttBPYimA9nHvYYF18husl2n7CVs6WTd/r1UUE5XEI8U",
	"KfbgZPviaqIhrUMXntmXaZSWYkeYjo8Pmhr5NBB9bsSfRYOkoiiYLpxzR4nC8FPzsoAd1IOzz9y4orAe",
	"L/8RfaSldxF1LpGf12hqz7fYrNGT/ZYW0CbrnFBbsCNnTfSCL1VNTn09IKySWxfHtbQxY5mpo5qDwQxL",
	"UkrGNV4sKr1M/krSNZU0NeLvYAjdZPHieaQycLtCJb8Z4p+d7hIUyKs46eUA23sdwvUlD7ngSWEkSvao",
	"yfYIduWgMzfuthvyHY6DnqqUGSjJILtVLXajgaS+E+PxEYB3ZMV6PjfixxvP7LNzZiXj7EErs0I/v3/j",
	"tIxCyFiRv2a7O41DgpYMrjB2L75IBuYd10Lmk1bhLth/Wc+DVzkDtczv5dhF4BsRuZ36atW1Jd3Fqkes",
	"A0Pb1HwwbLBwoOakXRn48zv9vPG573wyXzyu+EcX2S+8pEhkP4OBRQyqlkeXM6u/B/5vSr4R26mL2tkh",
	"fmH/BUgTJUnF8uyXJiuzUxReUp6uo/6shen4a/N8VT05ez5Fa+mtKeeQR8FZXfBXrzNGtNp/iqnjFIxP",
	"bNutU2+n25lcg3gbTY+UH9CQl+ncDBBStZ3wVgdU5yuRERynKdzWSM/++wZBFerfK1A6ljyEH2xQF9ot",
	"zX3XFkEmwDO8LR6Q7+0LtWsgrao8eEurqwq4krzWoF6VuaDZHOtLnH978obYUW0f+wiLLcK8wktKexYd",
	"e1VQk3JaeLB/TyWeujAdzngstZm10lgkS2lalLHkUNPi3DfADNTQho/Xl5A6B+R18NakzSM1IAw/LJks",
	"zI2rhmZ1F+QJ8x+tabrGK1lLpA6z/PTq4Z4rVfBiX/3yTl2oEfedwdsVELf1w+dEmHvzhin7MClcQTsf",
	"tU7OdiYBn5/anp6sOLecEtU9xooH3IbsHjkbqOHN/FHMOoS/oUJui+/ftJj6GfaK1o3qVmbvPdVnsxvr",
	"F1X8g9Mp5YKzFKs2xY5m94LpFB/YhAJXXSOr3+Juh0Y2V7QefB0m56g4WCHeC0JHuL4RPvhqFtVyh/1T",
	"41OZa6rJCrRykg2yuX/WwNkBGVfgCm/ie7eBnBSy5VdECRl1VSe1S+OGbIRpMQMXu+/Mt7fu2o/x4peM",
	"o4LvyOZC062lDh9Y1OZWwDRZCVBuPu3cYPXB9DnANNkMth8P/IOMtjoMuuXMtK0Pug/qxHuknQfYtH1l",
	"2rryRfXPrQhkO+hJWbpBhx+9iOoDessHCRzxLCbetRMQt4YfQhtht9FQEjxPDaPBFTqiocRzuMcY9QMQ",
	"nceFjNJqOQpbEBvCFa1gwHgEjTeMQ/NcaOSASKNHAi4M7teBfiqVVFsVcJJMOweao/c5JtCUdq6Hu4Lq",
	"1hYyJME5+jGGl7F5u2JAcNQNGsWN8l39Sqnh7kCZeIXPIztC9l+iQK3KKVEZZhR03qaICQ4juP3rN+0D",
	"oL8N+jqR7a4ltTvnJifRUJLoospWoBOaZbEKVd/gV4JffbEp2EJa1fUyy5KkWBOlXSSmz21uoFRwVRUj",
	"Y/kGdxwueOwlwg3hgzN+hTEJZbHDf2PFIodXxgVh3DgM0EdcuNcxbqg3tyH1tF7D04liq2Q6JfBMuTs5",
	"mqFvx+hN/3vl9Fys2oh85tIQY1IuXKOYfPvWHBxh5YReBVR7tNSFDTDoTvgn+vDaWKfktqUSHmW9kqjo",
	"7KmfABs3QAw/5jXHw28g9DYoiEHt+Wq9h0MBuOlgvDjVLnNNUzIqggazgWz0js37QSziltOhiB0bsGM+",
	"93pP0wx7ejbCHiWoDwXrI/SDjzMlJWXONd4Iiz5lXUT6sLlwbNM1C9ydhIvzHrTY/XA1FJNNFOOrHAh+",
	"7z5/dAkunb1+/97O1Ucl+Suh/dU9P2vh1VHx0fn3oxNwqC9rBh002p67Uvt2mu5O/sMvNoaNANdy9y9g",
	"wu0teu/xqL62a81TTRNSV2meVLW5dSrG34Earn/U1DxCfiqFYk1l8NgDURNj3c7xjaegflMflg80uYJU",
	"Yzn4xoEuAW5SzckMFjw++P/rIA3cHeuQQFf+aKzmUb8G/J4DrZeWFKTW2frZB9Mr/JzUYVIolLAw7wq4",
	"e/+vnXAwOex5uYRUs6s9aWB/XwMPUozm3ghh3/ENssJYHUaLVURubmJrEBrL0hrFJ6jmd2d0hpJALmH3",
	"QJEWN0QLes/9uXKbAhJIAZQOiWERoWJhCNZq6jzDTNWcgVTwYT+2OzSluAbfAgqSGm85lmdJc+I2iY4j",
	"Q8YfI5k0lul6o/RfjAgdyhTrv2UwrGy/xqcjVP1Ony9AEV5JyWm/TN/GFbDApL3aUeBLWYDyv/kMXTtK",
	"zi4hfK0I3TIbKjPfImpn8CaMZOQ86qV3+Tr8XaSX9cisCdLsJ/RECj9hKG6aC6N/JUPxzO24yPBRf4z+",
	"sJXIMeLT4LUE6V51Q2UvFwoSLXxQ5xgeY6RwD9DfhghqsNiiRW6wBMr7psYLFp2lWPKEusiWcIJEQkEN",
	"djKoxDI85hixX9nvPoPFFx3da06p+XV//Xsfntupy26IGHL9krjTcn9mzG0sK4xz+4asipVl4YaUoem/",
	"lCKrUntAhxujtj5NLno0IkqiRom0P8uOQhykF17C7tBq/P7hAL+CIdJWc7KoB+n8nUW+V1uTiuG9uhf0",
	"vqSZZj4rhciTAcv+ab+WTJfjL1l6CRkxJ4UPYxt4O4U8RINy7brdrHe+dkpZAofs0QEhJ9wGDnsvbruY",
	"cWdw/kCPjb/FUbPKlndyFqSDCx6PwMTCS/KO0syDGZdhCoyou+NQFsieSiXbgTo2km4iLwkdTL2C9v2q",
	"3dddGqayWMR0kj3vaER8xv4FBP/Mh89P0aJgaf/NhKiDYtwfYJ8yWkz1CtTVO3tjD1aKTPb6CVo4TPIW",
	"3BSNJT4NltAIkU/rY2veermRdV5R8ZWV7OMUKbVqq7kyUZZXEly+hH3DqPOIQEn12rOxad5XLo2iAgqT",
	"GWwheqrsVchfydwDSl35IMokhytouU9cEkeVpqAUu4Lw8SXbmWQAJRoousdmzC8Q7q+OLHVzTwLL8hTq",
	"RoWrJaxdKbJHcg48jZ/YbaKmbiWD0RXLKtqin7rDuzgTX9oPcZ0oKW4sJOKTGxMRez15yPPRfcnjjrww",
	"h6i+FeFoWW09sUzY7GxV0g0f1iIiF8/au3T3eRAERlQnp28gchGf20nq4n/38NCRf8KnhjnwpmrNP3dR",
	"XgeZMs6Ttyu6Mmkn9X0gEWETPNMzbqkLazI1wd7SutLwZu/lVXcz/NjIsWkPBvkOe9ALDbjBk0Fel3bo",
	"fOGI7B9rogRTGeSE1vT32YTdBBvBHyyRPfXMNG2FPBvN116XwOCvXtV29KF3vbrmdizAJDgWpeub6RW6",
	"VrG2fcg4ZqPLK5p/flM7VuY6QXq495rjEw1ttSGRLSnV7cIi39BJYwd22fsbmr9D18DfwaxR1CfuQLkT",
	"pdayvCcRRSbN8X04/1AjgiQbhGmd6E9ekIVL6SolpEx1T6qNL7tdmybxFYrmGe9xW+i+ef4i9B3YeOkV",
	"P/K2KeGrBZ4YDYbNFv3CQmVg50a5PMZ9PbaI0C8mo8LaKnuOi8uWd92WRO+EjQoJ9+xlD+Llbuhl71eN",
	"mTo960k2h06loD/Pyad1i7aRg7qZ29QQkT5xx+q8TonsiJdvNt0xtMQSBGufE0SV/PbkNyJhiY8bCfL4",
	"MQ7w+PHcNf3tafuz2c6PH8dfC/9cQSWWRg6GGzfGMb8MpRnYUPqBjJbOelQsz/YxRis/qXkeDDNwfnUZ",
	"il/kgbJfre+vv1XdIzE3CWfrLgISJjLX1uDBUEHm0YSkI9ctkmKEdrW0kkzvsHCSv86xX6PhL9/X3mUX",
	"nVCX2nBnnxaXUJfeanzRlfKn6/eC5ngeGZ0agwk1vhD97ZYWZQ5uo3z9YPEXePbX59nRsyd/Wfz16Kuj",
	"FJ5/9fLoiL58Tp+8fPYEnv71q+dH8GT54uXiafb0+dPF86fPX3z1Mn32/Mni+YuXf3lg5JBB2SI682n6",
	"s/+Nr/glJ+9Ok3ODbEMTWrL6YXjDxv4pIpriToSCsnx27H/6n36HHaSiaMD7X2cuC3i21rpUx4eHm83m",
	"IOxyuELnU6JFla4P/Tj9B7nfndaZXPZSjitqk3S8scWzwgl+e//t2Tk5eXd6ELysejw7Ojg6eIIPb5bA",
	"aclmx7Nn+BPunjWu+6Fjttnxp+v57HANNMdYDfNHAVqy1H+SQLOd+7/a0NUK5IF7n8n8dPX00KsVh5+c",
	"E+567NthWOr88FPLV5nt6YmlkA8/+Qo/461bJXScjzboMBGLsWaHC0wcntoUVNB4eCp42VCHn1BdHvz9",
	"0GVTxj/itcXuh0Pv0I+3bFHpk94aXDs9UqrTdVUefsL/IH8GaNnY5T66sC1BMqNw2dCFlS03VrPzaTY7",
	"nn0bNHq1hvQSi2tbgwPy6dOjo0hCRdCL2G1DFzlkhuefHz2f0IELHXZyZWD6HX/ml1xsOMHwWytDq6Kg",
	"coe6ia4kV+SnHwhbEugOwZQfAfctXSk0/GMl39l81iLPx2tHNJuaeWhfj21o6X/e8TT6Y5/63VdMYj8f",
	"fmpX0W1xoVpXOhOboC/eYuwVvD9e/a5E6+/DDWXa6CUulAWrHPU7a6D5oUvS6vzaxEX3vmCwd/BjaJGN",
	"/npYF5GLfuxKiNhXt0MGGvkUW/+50RbC03d2/CE4dz98vP5ovknTGj81h8nx4SG6h9dC6cPZ9fxT56AJ",
	"P36secznrs9Kya4wFP7j9f8LAAD//9/auBLMtgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
