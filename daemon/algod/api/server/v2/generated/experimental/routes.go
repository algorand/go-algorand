// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"mr5ZpcU1vvp/9+H/BQAA///sgdDAoMoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
