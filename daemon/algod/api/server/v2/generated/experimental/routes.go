// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
