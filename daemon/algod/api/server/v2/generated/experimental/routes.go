// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
