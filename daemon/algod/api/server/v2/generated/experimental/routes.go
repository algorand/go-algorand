// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
