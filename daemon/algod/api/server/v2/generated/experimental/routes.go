// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"iQ3mLn349P8CAAD//7D+5jw9vQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
