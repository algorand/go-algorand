// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//h/AwAA//8J5Z8iIt0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
