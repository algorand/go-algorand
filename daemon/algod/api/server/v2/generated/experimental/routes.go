// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"T/8vAAD//yOoPrWwuAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
