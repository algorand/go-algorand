// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
	// Fast track for broadcasting a raw transaction or transaction group to the network through the tx handler without performing most of the checks and reporting detailed errors. Should be only used for development and performance testing.
	// (POST /v2/transactions/async)
	RawTransactionAsync(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// RawTransactionAsync converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransactionAsync(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransactionAsync(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)
	router.POST(baseURL+"/v2/transactions/async", wrapper.RawTransactionAsync, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//44YDgy33AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
