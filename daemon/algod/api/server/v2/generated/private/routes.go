// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
