// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
