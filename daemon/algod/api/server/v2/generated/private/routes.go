// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
