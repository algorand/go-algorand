// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
