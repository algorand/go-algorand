// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"iJIpWb2xAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
