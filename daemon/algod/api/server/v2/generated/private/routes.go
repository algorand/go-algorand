// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"lPe4vvl0838DAAD//0PI+I75iQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
