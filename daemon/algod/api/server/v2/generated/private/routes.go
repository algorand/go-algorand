// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ec57Wl9/uP6fAAAA//9fqlOq7I4AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
