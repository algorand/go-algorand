// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"///X/FsWRbgAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
