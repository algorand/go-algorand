// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/m8AAAD//6ks38QRXwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
