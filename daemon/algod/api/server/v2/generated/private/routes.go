// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"dRuCAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
