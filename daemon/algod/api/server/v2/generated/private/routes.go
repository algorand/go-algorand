// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
