// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (PUT /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup)
	router.PUT("/v2/catchup/:catchpoint", wrapper.StartCatchup)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys)
	router.POST("/v2/shutdown", wrapper.ShutdownNode)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
