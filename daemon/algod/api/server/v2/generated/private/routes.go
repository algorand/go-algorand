// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
