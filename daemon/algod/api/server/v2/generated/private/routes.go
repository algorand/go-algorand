// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
