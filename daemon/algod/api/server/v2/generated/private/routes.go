// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XPcNrLgv4KafVWOfcMZyR/ZtapS7xQryeriOC5L2Xf3bF+CIXtmsCIBBgClmfj0",
	"v1+hAZAgCc5QH6s81/NPtoZAo9FoNPoLjU+TVBSl4MC1mhx9mpRU0gI0SPyLpqmouE5YZv7KQKWSlZoJ",
	"Pjny34jSkvHVZDph5teS6vVkOuG0gKaN6T+dSPi9YhKyyZGWFUwnKl1DQQ1gvS1N6xrSJlmJxIE4tiBO",
	"TybXOz7QLJOgVB/Ln3m+JYyneZUB0ZJyRVPzSZErptdEr5kirjNhnAgORCyJXrcakyWDPFMzP8nfK5Db",
	"YJZu8OEpXTcoJlLk0MfzlSgWjIPHCmqk6gUhWpAMlthoTTUxIxhcfUMtiAIq0zVZCrkHVYtEiC/wqpgc",
	"vZ8o4BlIXK0U2CX+dykB/oBEU7kCPfk4jU1uqUEmmhWRqZ066ktQVa4VwbY4xxW7BE5Mrxn5qVKaLIBQ",
	"Tt59/4o8e/bspZlIQbWGzDHZ4Kya0cM52e6To0lGNfjPfV6j+UpIyrOkbv/u+1c4/pmb4NhWVCmIb5Zj",
	"84WcngxNwHeMsBDjGla4Di3uNz0im6L5eQFLIWHkmtjG97oo4fh/6qqkVKfrUjCuI+tC8Cuxn6MyLOi+",
	"S4bVCLTal4ZS0gB9f5C8/PjpcHp4cP2X98fJf7o/Xzy7Hjn9VzXcPRSINkwrKYGn22QlgeJuWVPep8c7",
	"xw9qLao8I2t6iYtPCxT1ri8xfa3ovKR5ZfiEpVIc5yuhCHVslMGSVrkmfmBS8dyIKQPNcTthipRSXLIM",
	"sqmRvldrlq5JSpUFge3IFctzw4OVgmyI1+Kz27GZrkOSGLxuRQ+c0H9dYjTz2kMJ2KA0SNJcKEi02HM8",
	"+ROH8oyEB0pzVqmbHVbkfA0EBzcf7GGLtOOGp/N8SzSua0aoIpT4o2lK2JJsRUWucHFydoH93WwM1Qpi",
	"iIaL0zpHzeYdIl+PGBHiLYTIgXIknt93fZLxJVtVEhS5WoNeuzNPgioFV0DE4p+QarPs/+vs5zdESPIT",
	"KEVX8JamFwR4KrLhNXaDxk7wfyphFrxQq5KmF/HjOmcFi6D8E92woioIr4oFSLNe/nzQgkjQleRDCFmI",
	"e/isoJv+oOey4ikubjNsS1EzrMRUmdPtjJwuSUE33xxMHTqK0DwnJfCM8RXRGz6opJmx96OXSFHxbIQO",
	"o82CBaemKiFlSwYZqaHswMQNsw8fxm+GT6NZBeh4IIPo1KPsQYfDJsIzZuuaL6SkKwhYZkZ+cZILv2px",
	"AbwWcGSxxU+lhEsmKlV3GsARh96tXnOhISklLFmEx84cOYz0sG2ceC2cgpMKrinjkBnJi0gLDVYSDeIU",
	"DLjbmOkf0Quq4OvnQwd483Xk6i9Fd9V3rvio1cZGid2SkXPRfHUbNq42tfqPMP7CsRVbJfbn3kKy1bk5",
	"SpYsx2Pmn2b9PBkqhUKgRQh/8Ci24lRXEo4+8CfmL5KQM015RmVmfinsTz9VuWZnbGV+yu1Pr8WKpWds",
	"NUDMGteoNYXdCvuPgRcXx3oTNRpeC3FRleGE0pZVutiS05OhRbYwb8qYx7UpG1oV5xtvady0h97UCzmA",
	"5CDtSmoaXsBWgsGWpkv8Z7NEfqJL+Yf5pyzzGE0NA7uDFp0CzllwXJY5S6mh3jv32Xw1ux+seUCbFnM8",
	"SY8+BbiVUpQgNbNAaVkmuUhpnihNNUL6NwnLydHkL/PGqzK33dU8GPy16XWGnYwiapWbhJblDWC8NQqN",
	"2iEljGTGTygfrLxDVYhxu3qGh5iRvTlcUq5njSHSEgT1zn3vRmrobXUYS++OYTVIcGIbLkBZvdY2fKRI",
	"QHqCZCVIVlQzV7lY1D98dVyWDQXx+3FZWnqgTggM1S3YMKXVY5w+bbZQOM7pyYz8EMJGBVvwfGtOBatj",
	"mENh6Y4rd3zVHiM3hwbiI0VwOYWcmaXxZDDK+31wHBoLa5EbdWcvr5jGf3dtQzYzv4/q/HmwWEjbYeZC",
	"88lRzlou+EtgsnzV4Zw+4zgnzowcd/vejm0MlDjD3IpXdq6nhbuDjjUJryQtLYLuiz1EGUfTyzayuN5R",
	"mo4UdFGcgz0c8Bpideu9tnc/RDFBVujg8G0u0ot72O8LA6e/7RA8WQPNQJKMahrsK7df4oc1dvw79kOJ",
	"ADKi0f+M/6E5MZ8N4xu5aMEaS50h/4rAr54ZA9eqzXYk0wANb0EKa9MSY4veCMtXzeA9GWHJMkZGfGfN",
	"aII9/CTM1Bsn2fFCyNvxS4cROGlcf4QaqMF2mXZWFptWZeLoE3Ef2AYdQE20pa9FhhTqgo/RqkWFM03/",
	"BVRQBup9UKEN6L6pIIqS5XAP+3VN1bo/CWPPPXtKzv5+/OLw6a9PX3xtDJJSipWkBVlsNSjylVOjidLb",
	"HB73Z4b6bJXrOPSvn3uHURvuXgohwjXsMTvqHIxksBQj1j1qsDuRW1ndh1INUgoZMfGRdbRIRZ5cglRM",
	"RLy1b10L4lr4g7bs/m6xJVdUETM2ep8qnoGcxSivNxxRYxoKte+gsKDPN7yhjQNIpaTb3grY+UZm58Yd",
	"syZt4ntnhiIlyERvOMlgUa1aOtlSioJQkmFHFIhvRAZGn67UPUiBBliDjFmIEAW6EJUmlHCRASrflYrL",
	"h4HQDfqM0dWtQ5Gj1/b8WYBR9FJardaaGCtaxJa26ZjQ1C5KgmeFGvB01S5K28oOZ8MCuQSaGQUQOBEL",
	"505yji6cJEUvtPYBZiedIipxC69SihSUMoq7Vcf2oubb2VXWO+iEiCPC9ShECbKk8pbIaqFpvgdRbBND",
	"t1YnnA+uj/W44XctYHfwcBmpNLq75QKju5jdnYOGIRKOpMklSPRF/UvXzw9y2+WryoFIsTuBz1mBJgCn",
	"XChIBc9UFFhOlU72bVvTqKUmmBkEOyW2UxHwgBn6miptPZKMZ6gyWnGD41j71AwxjPDgiWIg/8MfJn3Y",
	"qZGTXFWqPllUVZZCashic+Cw2THWG9jUY4llALs+vrQglYJ9kIeoFMB3xLIzsQSiurbfncu+Pzm0cs05",
	"sI2SsoVEQ4hdiJz5VgF1w2jZACLGvqh7IuMw1eGcOkQ3nSgtytLsP51UvO43RKYz2/pY/9K07TMX1Y1c",
	"zwSY0bXHyWF+ZSlr46RranQ7hEwKemHOJtTUrOu0j7PZjIliPIVkF+ebbXlmWoVbYM8mHVCSXSZGMFpn",
	"c3T4N8p0g0ywZxWGJjygsb+lUrOUlahJ/Ajbezf3uwNELX+SgaYsh4wEH1CAo+yt+xPrC+/CvJ2iNUoJ",
	"7aPf00Ij08mZwgOjjfwFbNEF+NYGWc+D0Ow9aIoRqGZ3U04QUR+6MQdy2AQ2NNX51hxzeg1bcgUSiKoW",
	"BdPaRs3biqQWZRICiBquO0Z0rgMboPQrMMaXcYaggun1l2I6sWrLbvzOO4pLixxOYSqFyEe4WHvEiGIw",
	"ygVLSmFWnbkkDR/J95zUQtIpMeg3qoXnI9UiM86A/B9RkZRyVMAqDfWJICSKWTx+zQjmAKvHdM7WhkKQ",
	"QwFWr8QvT550J/7kiVtzpsgSrnxmk2nYJceTJ2glvRVKtzbXPVi8ZrudRmQ7WvTmoHA6XFemzPZa9w7y",
	"mJV82wHuB8U9pZRjXDP9OwuAzs7cjJl7yCNrqtb7545wRzk0AtCxedt1l0Is78lBFI9so3HigtWmFVlW",
	"3CJVKWeOYPzGOzTEclpnL9isZRvZrgrsjf9fU+dwmkybkLRtYA7k5vPHiErJsk0s8yCDTWxR3B5Dc+qR",
	"sT22CqLhHpTMYhlJPgJ5kbupdWQHKcBsarVmpQHZJEpsNbSSLP/vV/9+9P44+U+a/HGQvPwf84+fnl8/",
	"ftL78en1N9/8v/ZPz66/efzv/xZTrZVmi7hf7++G0GJJnIzf8FNuPfNLIa1BtnV6nlg+PN5aAmRQ6nUs",
	"q7GUoFA22uzEUq+bRQXoOFFKKS6BTwmbwawrY7MVKO9NyoEuMbsOjQoxJtpX7wfLb545AqqHExklyGL8",
	"g7Er5E3czcbqyLf3oL1YQES26emtdWW/imWYEuo2itoqDUXf4WW7/jqg7r/zynJvUwmeMw5JIThso7cg",
	"GIef8GOstz3vBjqj5jHUt2tMtPDvoNUeZ8xi3pW+uNqBgH9bR2zvYfG7cDu+zjAZFn01kJeEkjRn6MkR",
	"XGlZpfoDp2grBuwaiZN4C3jYe/DKN4m7KyLeBAfqA6fK0LC2IKM+8CVEzqzvAbwTQVWrFSjd0ZqXAB+4",
	"a8U4qTjTOFZh1iuxC1aCxGDFzLYs6JYsaY7Ojj9ACrKodFuPxFNPaZbnzvFqhiFi+YFTbWSQ0uQnxs83",
	"CM6nxnme4aCvhLyoqRA/olbAQTGVxOX+D/Yrin83/bU7CvAChf3s5c1Dy32PeyyjzGF+euJsrNMTVKQb",
	"l2sP9wfzwxWMJ1EmM4pRwTgmJnd4i3xlzAHPQI8b561b9Q9cb7hhpEuas8woT7dhh66I6+1Fuzs6XNNa",
	"iI5bxc/1YywevhJJSdMLDIdOVkyvq8UsFcXc25bzlajtzHlGoRAcv2VzWrK5KiGdXx7uUXTvIK9IRFxd",
	"TydO6qh798Q4wLEJdcesHZr+by3Iox++Oydzt1LqkU0vtaCDvMCIO8ClvrQiVmby9nqUza/9wD/wE1gy",
	"zsz3ow88o5rOF1SxVM0rBfJbmlOewmwlyJHPpjmhmn7gPRE/eIMxyGMiZbXIWUouwqO42Zr2VkofwocP",
	"7w2DfPjwsRf+6B+cbqjoHrUDJFdMr0WlE5d2n0i4ojKLoK7qtGuEbC/N7Bp1Shxsy5Eurd/Bj4tqWpaq",
	"m4XZn35Z5mb6ARsql2NolowoLaQXgkYyWmxwfd8IZ3NJeuXvbFQKFPmtoOV7xvVHknyoDg6eAWmlJf7m",
	"ZI3hyW0JLcfRrbJEu04jnLhVqGCjJU1KugIVnb4GWuLq40FdoIsyzwl2a6VD+uQBBNVMwNNjeAEsHjdO",
	"7cLJndle/v5kfAr4CZcQ2xjp1Hj+b7teQYLkrZerk2TZW6VKrxOzt6OzUobF/crU16pWRib7cIxiK242",
	"gbuBtgCSriG9gAwvw0BR6u201d1H/NwJ50UHU/bSmM3gwpsN6GNbAKnKjDodgPJtN8VcgdY+r/4dXMD2",
	"XDQXI26SU97OdFZDGxU5NTiMDLOG29bB6C6+ix5jdmdZ+oRhTI7zbHFU84XvM7yR7Ql5D5s4xhStTNwh",
	"QlAZIYRl/gES3GKiBt6dWD82PaPeLOzJF3HzeNlPXJNGa3MR4HA2mGBsvxeAN1DFlSILqiAjwl2etNm8",
	"gRSrFF3BgO8pdHOOzJltuUYRyL5zL3rSiWX3QOudN1GUbePEzDnKKWC+GFZBP2En7u9Hsp50nMGMYE0E",
	"R7BFjmpSnXJghQ6VLXezveQ9hFqcgUHyRuHwaLQpEmo2a6r8vU68/ur38igd4F+Ynb7rMtJpELIO7rjW",
	"V428zO3u07jj1l46KlRz+Sj02o64SDSduCyq2HIIjgpQBjms7MRtY88oTaZ8s0AGj5+Xy5xxIEks+k2V",
	"EimzF3ObY8aNAUY/fkKI9T2R0RBibBygjREiBEzeiHBv8tVNkOQu05962BhbCv6GeCqgzW8yKo8ojQhn",
	"fCAzzUsA6lIm6vOrk7iDYAjjU2LE3CXNjZhzTtQGSO9qDKqtnYswLkb5eEid3eH6swfLjeZkj6LbzCbU",
	"mTzScYVuB8a7VYnYEiiklzN9a1oNnaVjhh44vodo9VVwqeZWCHQ8EU3dGWf57bXQ2mdz/yRrRPq0uSXq",
	"UzNjvD/EP9FVGqBf3xFcX4N52z2uo0Z6O3bZvgEU6E8xUWz2SN812nfAKsgBNeKkpUEkFzGHuVHsAcXt",
	"me8WWO54z4jy7eMgIC5hxZSGxnVlTiXvi33ocBfFe81CLIdnp0u5NPN7J0Qto+39ORu+C6f54DO4FBqS",
	"JZNKJ+j3i07BNPpeoUX5vWkaVxTaIXdb4oNlcdmAw17ANslYXsX51Y3744kZ9k3thFHV4gK2qA4CTddk",
	"gSVpook4O4a2uVo7J/zaTvg1vbf5jtsNpqkZWBp2aY/xmeyLjuTdJQ4iDBhjjv6qDZJ0h4DEg/8Ech27",
	"ihMoDXZzZqbhbJfrsbeZMg97l6EUYDF8RllI0bkE1vLOWTDMPjDmHtNBRZf+vYGBPUDLkmWbjiPQQh00",
	"F+mNrH1/Y7ZDBVxdB2wPBQKnXyw1VYJqX45utFtbm4eHc5uNosx5+wpzKBDCoZjyleX6hDKsjeWP9tHq",
	"HGj+I2z/YdridCbX08nd/IYxWjuIe2j9tl7eKJ0xIGb9SK0wwA1JTstSikuaJ867OsSaUlw61sTm3hn7",
	"wKIu7sM7/+749VuH/vV0kuZAZVKrCoOzwnblZzMrew97YIP4ylXG4PE6u1Ulg8Wv78eGHtmrNbgqQYE2",
	"2qtq0Hjbg63oPLTLeFx+r7/VBQbsFHcECKCs4wON78qGB9ohAXpJWe6dRh7bgRg6Tm5caYyoVAgB3Dm0",
	"EESIknsVN73dHd8dDXftkUnhWDvqGBW2VJcigndTsowKib4oZNWCYk0C6xLoCydeFYnZfonKWRp3MPKF",
	"MszBbeDINCbYeEAZNRArNhCH5BULYJlmaoSh20EyGCNKTF/fYoh2C+FqrFac/V4BYRlwbT5J3JWdjYpF",
	"IJyruX+cGt2hP5YDbN3TDfi76BhhPY7uiYdI7FYwwjBVD92T2mT2E63dMeaHwB9/g2h3OGLvSNwRqXb8",
	"4bjZpgyt2+GmsCRqX/4ZxrDls/bXY/XGqysMMjBGtL4qU8lSij8gbueheRzJW/cVSBhmTf4BfBa5/tMV",
	"MbV3pykT24w+uNxD2k3ohWpH6Ae4Hlc+iElhtQfvnqXcLrUtd9jKC4kzTJjLNbfwG4ZxOPfy33J6taCx",
	"UhhGyTA4HTfRz5YjWQviO3vaO583c0VhZiQIpNZtmb3RVYJsrpT0bw/fUmGww45WFRrNALk21AmmNviV",
	"KxEBU/Erym3VTNPPbiXXW4F1fpleV0LifUwV93lnkLKC5nHNIUPqt++vZmzFbM3ISkFQlNABssV2LRe5",
	"wo42vtyQ5nRJDqZB2VO3Ghm7ZIotcsAWh7bFgiqU5LUjqu5ipgdcrxU2fzqi+brimYRMr5UlrBKkVurQ",
	"vKkjNwvQVwCcHGC7w5fkK4xZKXYJjw0V3fk8OTp8iU5X+8dB7ABwxWF3SZMMxcl/OHES52MM2lkYRnA7",
	"qLPo7UJb0XtYcO3YTbbrmL2ELZ2s27+XCsrpCuJpEsUenGxfXE10pHXowjNbjlZpKbaE6fj4oKmRTwM5",
	"n0b8WTRIKoqC6cJFNpQoDD81FQftoB6crW3ryuJ4vPxHDBCWPj7SMSIf1mlqz7fYrDGM+4YW0CbrlFB7",
	"CTdnTejeV7Iip/4qP9YJqssDWdqYsczUUc3BSP6SlJJxjYZFpZfJ30i6ppKmRvzNhtBNFl8/j9RGapdD",
	"4TdD/MHpLkGBvIyTXg6wvdchXF/yFRc8KYxEyR43OdbBrhyMZMazxbxE7yYL7gY9VikzUJJBdqta7EYD",
	"SX0nxuM7AN6RFev53IgfbzyzB+fMSsbZg1ZmhX5599ppGYWQscIuzXZ3GocELRlcYuJafJEMzDuuhcxH",
	"rcJdsP9zIw9e5QzUMr+XY4bAtxXLs380d0Y65eUk5ek66vdfmI6/NuV/6ynbfRytI7KmnEMeBWfPzF/9",
	"2Ro5/f8pxo5TMD6ybbdsnJ1uZ3IN4m00PVJ+QENepnMzQEjVdhJ9nXWZr0RGcJymaEXDZf1KeEEJrd8r",
	"UDp2aQ8/2MwP9O8Yu8BWcCLAM9SqZ+QH+3zHGkjrTj1qs6yocns/G7IVSOd4rMpc0GxKDJzz745fEzuq",
	"7WNrWdoKUitU5tqz6Nj1QYWbcTmEvixlPL95PJzdCZdm1kpjiQulaVHGrq6YFue+Ad6PCX2dqOaF1JmR",
	"E6thK6+/2UEMPyyZLIxmWkOzMh55wvxHa5quUXVtSZNhlh9f+sxzpQoqntcFTOsiNbjvDN6u+pktfjYl",
	"wtgXV0zZVxvgEtq3ZeqrY8508rdn2tOTFeeWU6IyetfVxtuQ3SNnA9reHRrFrEP4GyouSlQyhZtWgjvD",
	"XtGqD92ycr1S5/ZWcV1707/Gk1IuOEux5kLwTkSNsnsBYkysYER5iq4zym9xt0MjmytazK5OJ3JUHCxv",
	"5wWhI1zfWRl8NYtqucP+qfGpgTXVZAVaOckG2dQXLHT+EsYVuKJD+BhIICeFbMVfUEJGQ3pJ7fq9IRth",
	"7vyAAvy9+fbGmUeYVHrBOCpCjmwuf9V6NLBAvTbaE9NkJUC5+bSv5qv3ps8Mr6dnsPk48wXtEYYNX5hp",
	"21hdH9Sxj9y5SJlp+8q0JTbrsP65laZoBz0uSzdoNNWoXuFYycVBAkciMIl3gQfEreGH0Haw286QO56n",
	"htHgEgN2UOI53GOMunplpwztJc0ry1HYgthUl+j9SsYjaLxmHJrnFiIHRBo9EnBhcL8O9FOppNqqgKNk",
	"2jnQHKN0MYGmtHPR3hVUZ4GRJDhHP8bwMjaFNwcER92gUdwo39avPBjuDpSJV/i8jCNkv4wmalVOicow",
	"7bhTWDMmOIzg9iVp2wdAfxv0dSLbXUtqd85NTqIdN8n8fJOBgBbzdT9awWnr1I7fCrOhin3QrIm1A04q",
	"YrrwdxtIK4uDUD5DmqR4bTw4y6LeVqbMqMUij+SqndQfg0q6mL6+2OK/sfpPw8vlItg3zqHy4WrseGNl",
	"ug2ppwobRk8UWyXjKYEHzd3J0Qx9O+5v+t8r++di1Ubkgeu07BJ94RrFhN535jQJ71z3iprZ86a+Eo0Z",
	"S8JXeEdbsr7M1xZVeL71qpyhp7wu1r3bVzFcdnuKJ+JA3mJQnYbaQ9eGXoayF9PBZFuq3Z0XTUlTWqMv",
	"E2yt7BgEm/pga3Tb5/2ibqehdAeb7WA+93qPUxd7yjfC3klQn0fTR+hHn6RHSspcXLERFn3KunTefoL1",
	"mES/ZoG7k3BJsggkNpNe8cLdHNJLkg4S/W2Nudn4y/bHddAWQ0lYIXwF3JUIb6c/jk7CWi4h1exyT1L6",
	"fxhFvkl4nnpV376rEOSoszqpx78CeUMLpEFoV874TnyCih53RmcoJfUCto8UaXFDtOjd1DPqbe5yIgWw",
	"2kliWESoWFDE+iacn5qpmjOQCj4IabtDU2hqsNpwcMXilmN5liQ0vHaxY8hLETNuRo1lut7oMhLmpwzl",
	"rffrfQ6fXidYXlXVleLrZx6DHBNjw3Zr0V25u6R4haB2x/lbpaD8b/6+kB3FPh/a1ENG5+cVlZlvEdXm",
	"9ynO3dxqq/qyONLLemTWpIz004uHtO00F4rxVTKUXdXO0ghfIMJYFPpNsJAq4rUE6eqga/86a6KFTzGZ",
	"3VzrP2+SLW5FBDVYUdAiN3gb+V1z3RoLT1H7Nq+Ls4UTJBIKarCTwaXo4TF3EfuV/e7zaX3hoU6Zr5jB",
	"4/g12Xur2ScLMdUjYsj1S+JOy/15urcxVRjn9pkJFbshzQ0pQwdbKUVWpfaADjcGeJNudP2BHaIkquWn",
	"/Vn2FLYcq3G8Dm49XMB2bpWmdE15Uxalva1toUQ7h+CWYWe179WKiyus+cpOYHUveP6ZltB0UgqRJwMe",
	"tdP+Re/uHrhg6QVkxJwdPsw+UHGYfIWOnDpkcrXe+ovNZQkcssczQowtVZR666Mn7RJnncH5I71r/A2O",
	"mlW29oIz0mYfeDxDxL52fUf55sHslmoKjPC741AWyJ6b1JuBS+aSXkXqb499OiwSz+jWRG6YymIR01Ju",
	"ea1u1P7uG2oR1g8vROyxfy5aVp0t4tOJYQgJ92zdBc7bG1p3/aseY6eH80CpVinoz3P0ArRoO0D7MYRv",
	"XBN94g57FPRijEchXnDEdEeXhiUIVushiCr57fA3ImHpnt5/8gQHePJk6pr+9rT92VhfT55Ed+aDOTNa",
	"L5S5cWMc84+hmLeN6w6kV3TWo2J5to8xWskyTSVNTAf51aUV/Sm1PH+1JnJ/q7qyhjdxo3YXAQkTmWtr",
	"8GCoIA1mRAaM6xbJd8HDJq0k01u87eQtKvZr9Bb5D7UTxj17WefHu/Rs+8C8y9ZqXDbNm+A/CPtwXWHO",
	"enRia3xs4LsNLcoc3Eb55tHir/Dsb8+zg2eHf1387eDFQQrPX7w8OKAvn9PDl88O4enfXjw/gMPl1y8X",
	"T7Onz58unj99/vWLl+mz54eL51+//Osj/yC3RbR57Pp/Y8Hb5PjtaXJukG1oQktWvzFi2NgXz6Qp7kRj",
	"k+STI//T//Q7bJaKogHvf5241L3JWutSHc3nV1dXs7DLfIU2WqJFla7nfpz+2w5vT+u0InsdBFfUZowY",
	"VsBFdaxwjN/efXd2To7fns4ahpkcTQ5mB7NDrFFdAqclmxxNnuFPuHvWuO5zx2yTo0/X08l8DTTHwuXm",
	"jwK0ZKn/pK7oagVy5qqImp8un859VsL8k7NPr3d9m4cFeeafWmZ8tqcn1iyZf/JXcXa3bt11ce6LoMNI",
	"LIaHtK+XzT+hPTj4exuNT3rDsuu5dz+5Hu4VoPmn5lmua7sLc4i5jmyaGQ1e8Zoaex1fK1X2V7PxfHY7",
	"U+1X3GouOs0M95her+onyoKL/Ufve+qXBUQ8JNxqho+andAaqRF2WlYQ3jWvRXmrfSPQ3x8kLz9+Opwe",
	"Hlz/xQhs9+eLZ9cjfcDN66rkrJbGIxt+7Dxg//Tg4L/Z27TPbzjjnTp3K0wWKSX8Lc2Iz7zEsQ8fbuxT",
	"jh54IziJPRiup5MXDzn7U25YnuYEWwZ3kvpL/wu/4OKK+5bmFK+Kgsqt38aqJRT8w4N4VtCVQgtMskuq",
	"YfIRTfxYeH9AuOAjwDcWLviy8Rfh8lDC5fN48vnpDTf45z/jL+L0cxOnZ1bcjRenTpWzyf1z+zpKo+H1",
	"St+uIHrLAPP96a7HALsS9gfQvbcNJ3cUMX/aM4f/vffJ84PnD4dBu27jj7Alb4Qm32PY6zPds+O2zy5N",
	"qGMZZVmPya34B6W/Fdl2B4UKtSpdQm5EL1kwblDuny79d0N6bw9ewJbYULB3+bu3d9v60PUdZcBn+0zi",
	"FxnyRYZIO/yzhxv+DOQlS4GcQ1EKSSXLt+QXXl+nur1Zl2XRNLv21u/JNGONpCKDFfDECaxkIbKtL6XT",
	"AngB1jXdU1Tmn9r1MK37a9AtdYK/18/09JFebMnpSU+Dsd26kvbbLTbtWIwRm7CL4k7LsCuLBoyxXWxu",
	"JrISmlgqZG5SXwTPF8FzJ+Vl9OaJ6S9Ra8I7crpn8tTfK47dvKe6P/QYm+NP3a7/ZV+d/yISvoiE24uE",
	"HyCyGXHXOiERYbrbeHr7AgIzr7JuVXlMX/DNq5xKomCsm+IYITrnxENIiYc20qK0sjYa5QQ2TOErKZEF",
	"u1+77YuI+yLiPqOo1X5B01ZEbmzpXMC2oGVt36h1pTNxZevxRKUilqqluatrh5Xm6kwMLYgH0FxwIj+7",
	"G335Fl9rZ5lR4zQrwKhUtawznX3aapM3ayA0zwuuGMcBUFTgKLaAIw2uDihIBbePcXVibQ6zN9YmjAnZ",
	"3ytAieZo43CcTFvBFreMkXKJd9a/+rGR6x2+9PpFrdbf8yvKdLIU0t0cQgr1szA00HzuKk90frX3w4Mf",
	"gwyN+K/zuk5w9GM3tyT21aV++EZN8liYjIUrVadhvf9oCI5l5twiNrlFR/M5JtWvhdLzyfX0UyfvKPz4",
	"sabxp/p8dbS+/nj9/wMAAP//p/gMoIWwAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
