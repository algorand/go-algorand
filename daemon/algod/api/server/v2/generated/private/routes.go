// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
