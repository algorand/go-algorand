// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
