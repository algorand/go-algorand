// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by id
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info by id
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
