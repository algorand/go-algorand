// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
