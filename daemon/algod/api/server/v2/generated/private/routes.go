// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/22nhra8sQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
