// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Xx2urz9e//8AAAD//9R3axLLsQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
