// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
