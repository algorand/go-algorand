// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"IsS8AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
