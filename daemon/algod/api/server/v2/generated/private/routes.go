// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"eU/r6w/X/x0AAP//DI8H3kOGAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
