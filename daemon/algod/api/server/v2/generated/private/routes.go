// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
