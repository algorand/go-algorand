// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
