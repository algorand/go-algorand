// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
