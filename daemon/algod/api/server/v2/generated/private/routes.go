// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"PwbOB1rffrj9fwEAAP//iCXW0TKOAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
