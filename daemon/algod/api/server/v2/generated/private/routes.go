// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bdH15+v/GwAA//9MwM7Ji70AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
