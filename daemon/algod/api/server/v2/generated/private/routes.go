// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
