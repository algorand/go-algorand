// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
