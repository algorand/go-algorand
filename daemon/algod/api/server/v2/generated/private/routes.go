// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
