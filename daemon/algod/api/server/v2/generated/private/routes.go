// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"lKT9rwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
