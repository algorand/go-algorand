// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//08/7A/O2AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
