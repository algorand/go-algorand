// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

<<<<<<< HEAD
	"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",
=======
	"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",
>>>>>>> block-proof
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
