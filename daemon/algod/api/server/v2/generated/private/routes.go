// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Get a RoundStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetRoundStateDelta(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetRoundStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoundStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRoundStateDelta(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetRoundStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
