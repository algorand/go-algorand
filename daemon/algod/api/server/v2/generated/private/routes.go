// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"H0QhMPn23e1/BwAA//8mNegCWnAAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
