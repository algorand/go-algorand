// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info by ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
