// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"erY+uAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
