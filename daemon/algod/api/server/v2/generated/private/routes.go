// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
