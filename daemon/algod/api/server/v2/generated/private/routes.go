// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//659bEwBvQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
