// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"TGHjh4aoHz0LeOLefLj5vwEAAP//HPdY54CEAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
