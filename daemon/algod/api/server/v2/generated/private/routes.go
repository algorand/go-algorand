// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
