// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
