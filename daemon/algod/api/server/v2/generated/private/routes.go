// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8CXgkLexAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
