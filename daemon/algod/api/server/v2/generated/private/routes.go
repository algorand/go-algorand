// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"qD34sabfp8DtQMe7j3f/GwAA///T4W65QFMAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
