// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
