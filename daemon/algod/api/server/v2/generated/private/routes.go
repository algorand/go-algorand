// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
