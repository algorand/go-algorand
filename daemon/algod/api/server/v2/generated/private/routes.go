// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PctrLgX0HNuVV+7FAj+ZFzrKrUXcV2crRxHJelnLt7bW+CIXtmcEQCDABqZuLV",
	"f99CAyBBEpyhHke5rutPtoZ4NPqF7kaj8XmSiqIUHLhWk+PPk5JKWoAGiX/RNBUV1wnLzF8ZqFSyUjPB",
	"J8f+G1FaMr6cTCfM/FpSvZpMJ5wW0LQx/acTCb9XTEI2OdaygulEpSsoqBlYb0vTuh5pkyxF4oY4sUOc",
	"vppc7fhAs0yCUn0of+b5ljCe5lUGREvKFU3NJ0XWTK+IXjFFXGfCOBEciFgQvWo1JgsGeaYO/CJ/r0Bu",
	"g1W6yYeXdNWAmEiRQx/Ol6KYMw4eKqiBqglCtCAZLLDRimpiZjCw+oZaEAVUpiuyEHIPqBaIEF7gVTE5",
	"/jBRwDOQSK0U2CX+dyEB/oBEU7kEPfk0jS1uoUEmmhWRpZ067EtQVa4Vwba4xiW7BE5MrwPyU6U0mQOh",
	"nLz//iV5+vTpC7OQgmoNmWOywVU1s4drst0nx5OMavCf+7xG86WQlGdJ3f799y9x/jO3wLGtqFIQF5YT",
	"84WcvhpagO8YYSHGNSyRDi3uNz0iQtH8PIeFkDCSJrbxnRIlnP9PpUpKdboqBeM6QheCX4n9HNVhQfdd",
	"OqwGoNW+NJiSZtAPh8mLT5+PpkeHV3/5cJL8p/vz+dOrkct/WY+7BwPRhmklJfB0mywlUJSWFeV9fLx3",
	"/KBWosozsqKXSHxaoKp3fYnpa1XnJc0rwycsleIkXwpFqGOjDBa0yjXxE5OK50ZNmdEctxOmSCnFJcsg",
	"mxrtu16xdEVSquwQ2I6sWZ4bHqwUZEO8Fl/dDmG6ClFi4LoRPnBB/3WR0axrDyZgg9ogSXOhINFiz/bk",
	"dxzKMxJuKM1epa63WZHzFRCc3Hywmy3ijhuezvMt0UjXjFBFKPFb05SwBdmKiqyRODm7wP5uNQZrBTFI",
	"Q+K09lEjvEPo6yEjgry5EDlQjsjzctdHGV+wZSVBkfUK9MrteRJUKbgCIub/hFQbsv+vs5/fEiHJT6AU",
	"XcI7ml4Q4KnIhmnsJo3t4P9UwhC8UMuSphfx7TpnBYuA/BPdsKIqCK+KOUhDL78/aEEk6EryIYDsiHv4",
	"rKCb/qTnsuIpEreZtmWoGVZiqszp9oCcLkhBN98eTh04itA8JyXwjPEl0Rs+aKSZufeDl0hR8WyEDaMN",
	"wYJdU5WQsgWDjNSj7IDETbMPHsavB09jWQXg+EEGwaln2QMOh02EZ4zomi+kpEsIWOaA/OI0F37V4gJ4",
	"reDIfIufSgmXTFSq7jQAI06927zmQkNSSliwCI+dOXQY7WHbOPVaOAMnFVxTxiEzmheBFhqsJhqEKZhw",
	"tzPT36LnVME3z4Y28ObrSOovRJfqOyk+itrYKLEiGdkXzVcnsHGzqdV/hPMXzq3YMrE/9wjJludmK1mw",
	"HLeZfxr6eTRUCpVACxF+41FsyamuJBx/5I/NXyQhZ5ryjMrM/FLYn36qcs3O2NL8lNuf3oglS8/YcgCZ",
	"NaxRbwq7FfYfM15cHetN1Gl4I8RFVYYLSlte6XxLTl8NEdmOeV3GPKld2dCrON94T+O6PfSmJuQAkIO4",
	"K6lpeAFbCQZami7wn80C+Yku5B/mn7LMYzg1DOw2WgwKuGDBSVnmLKUGe+/dZ/PVSD9Y94A2LWa4kx5/",
	"DmArpShBamYHpWWZ5CKleaI01TjSv0lYTI4nf5k1UZWZ7a5mweRvTK8z7GQMUWvcJLQsrzHGO2PQqB1a",
	"wmhm/IT6weo7NIUYt9QzPMSM7s3hknJ90DgiLUVQS+4HN1ODb2vDWHx3HKtBhBPbcA7K2rVNC5JRTRFY",
	"2jC8DzOhsRm0NZx/Na3nMdbxXZAUrfGVyI09sZcYpvHfXduQjub3UZ2/DBqGuO1SD72SvXRz0Y+QYjci",
	"1k6E2nF3LKRew1rS0sLvvthtgnF0LmwjC+st9cVIUY7CHPB6QGyE6sbMvpcho5Ag9TowfJeL9OIOBG5u",
	"xunzPQ5PVkAzkMheAWM7ho1vR9jx79gPRRJkxGb9Gf9Dc2I+G26l2vtjxhc14qWICCLHmXHhrGFoZzIN",
	"0LUUpLBeGzHe1rWgfNlM3hNSi5YxQvraOooEe/hFmKU3YaCTuZA345cOI3DSBLcINaMG4jLtUBabVmXi",
	"8BNxkG2DzkDNeULfTgox1B0+hqsWFs40/RdgQZlR7wIL7YHuGguiKFkOdyCvK6pW/UUYj+XpE3L295Pn",
	"R09+ffL8G2Nyl1IsJS3IfKtBkYfOUCRKb3N41F8ZWmxVruOjf/PMh0Ta4+7FEAJcjz1Gos7BaAaLMWID",
	"gAa6V3Irq7swG0FKISNOLLKOFqnIk0uQiolIPPKda0FcC6OHrCPd+d1CS9ZUETM3xlcqnoE8iGFebziC",
	"xjQUat9GYYc+3/AGN25AKiXd9ihg1xtZnZt3DE3ayPfuuiIlyERvOMlgXi1bRtFCioJQkmFHVIhvRQbG",
	"5q7UHWiBZrAGGEOIEAQ6F5UmlHCRGYE2jeP6YeBwAqOiGMzVocrRK7v/zMG4uymtlitNjJ8oYqRtOiY0",
	"tURJcK9QA7GcOghnW9npbOA7l0CzLZkDcCLmLmDiQjm4SIpxVu2PUJ12itikLbhKKVJQyljO1hzbC5pv",
	"Z6msd+AJAUeA61mIEmRB5Q2B1ULTfA+g2CYGbm1OuChTH+px0+8iYHfykIxUAvGiaWwXI905aBhC4Uic",
	"XILEaMu/lH5+kpuSryoHzkLdDnzOCnQBOOVCQSp4pqKD5VTpZJ/YmkYtM8GsIJCUmKTiwAN+4BuqtI25",
	"MZ6hyWjVDc5jHUQzxTDAgzuKGfkffjPpj50aPclVpeqdRVVlKaSGLLYGDpsdc72FTT2XWARj19uXFqRS",
	"sG/kISwF4ztk2ZVYBFFdO9AuKN1fHJ6vmX1gG0VlC4gGEbsAOfOtAuyG50EDgBj/ou6JjMNUh3PqQ6jp",
	"RGlRlkb+dFLxut8Qms5s6xP9S9O2z1xUN3o9E2Bm1x4mB/naYtaeBK6ose1wZFLQC7M3oaVmg4N9mI0w",
	"JorxFJJdnG/E8sy0CkVgj5AOGMku1yCYrSMcHf6NMt0gE+yhwtCCByz2d1RqlrISLYkfYXvn7n53gqjn",
	"TzLQlOWQkeADKnDUvXV/YqO93TFvZmiNMkL74Pes0MhycqZww2gDfwFbjMG9s8eI58Hh4x1YipFRjXRT",
	"ThBQfzhhNuSwCWxoqvOt2eb0CrZkDRKIquYF09qeC7cNSS3KJBwg6rjumNGFDuwRnKfAmFjGGQ4VLK9P",
	"iunEmi274TvvGC4tdDiDqRQiHxHj7CEjCsGoGCgphaE6c2kI/qzac1ILSGfEYNyoVp4PVAvNuALyf0RF",
	"UsrRAKs01DuCkKhmcfs1M5gNrJ6TWUunwRDkUIC1K/HL48fdhT9+7GjOFFnA2ufumIZddDx+jF7SO6F0",
	"S7juwOM14nYa0e3o0ZuNwtlwXZ1ysNe7dyOPoeS7zuB+UpQppRzjmuXfWgF0JHMzZu0hj6yoWu1fO447",
	"KqARDB1bt6W7FGJxB6tl2SZ2YJ3BJrZSx7joozwwBv1WQfQQA9WdWERyVkBe5BgAEYuOQJICjKSoFSvN",
	"kM35+lZDKzfv/z789+MPJ8l/0uSPw+TF/5h9+vzs6tHj3o9Prr799v+1f3p69e2jf/+3mL2qNJvHg2V/",
	"p2plIHWKc8NPuQ13L4S0Xs7WGU9icd9wd1jMENNjPljSKHGLEQRPWJDYyHPGNs63d7DH2oGIhFKCQo0Y",
	"+pTKfhWLMDXPcZ7aKg1FPyxju/46YJS+9yZdj0sFzxmHpBActtFsdMbhJ/wY62218kBn3B+H+nZN3hb8",
	"HbDa84wh5m3xi9QO1NC7OlHwDojfHbcTkQuTEjGiAHlJKElzhvEGwZWWVao/cooeTcCukWi+99OGfdyX",
	"vkncqY74vG6oj5wqg8Paz4lGahcQiWB8D+BdXVUtl6B0x7ZbAHzkrhXjpOJM41yFoVdiCVaCxJD6gW1Z",
	"0C1Z0Bxd8j9ACjKvdNvawdwppY3HbMODZhoiFh851SQHqjT5ifHzDQ7nU5Q8z3DQayEvaizEdf4SOCim",
	"krgi/cF+RX3qlr9yuhUT2e1nr2/uewPwsMcyexzkp6+cJ3D6Cs29JjDYg/3eokUF40mUyc5XQArGMUG0",
	"w1vkoTFaPQM9akKMjuofud5ww0iXNGcZ1Tdjh66K68milY4O17QI0XH+/Vo/xU5tlyIpaXqBh3aTJdOr",
	"an6QimLmPaDZUtTe0CyjUAiO37IZLdlMlZDOLo/2mGO30Fckoq6uphOnddSdxwvcwLEFdeesw27+by3I",
	"gx9en5OZo5R6YNP87NBBflbEaXUJGq1zFbN4e03F5jl+5B/5K1gwzsz34488o5rO5lSxVM0qBfI7mlOe",
	"wsFSkGOf8/GKavqR91T84E0yTHdx0JTVPGcpuQi34kY07e2A/ggfP34wDPLx46dekL6/cbqpojJqJ0jW",
	"TK9EpROX/pxIWFOZRUBXdforjmwvL+yadUrc2JYjXXq1Gz+uqmlZqm42XH/5ZZmb5QdsqAh2sjlESgvp",
	"laDRjBYapO9b4Y4pJF373PlKgSK/FbT8wLj+RJKP1eHhUyAnZdkk2P3mdI3hyW0JrfDGjbL1uqENXLg1",
	"qGCjJU1KugQVXb4GWiL1caMuMJCW5wS7tZLb/BE3DtUswONjmAAWjmsnIOHizmwvf48tvgT8hCTENkY7",
	"NfHpm9IryKO7Mbk6uXg9KlV6lRjZjq5KGRb3lKmvtyyNTvaHBootuRECdxNoDiRdQXoBGV5KgKLU22mr",
	"uz+XcjucVx1M2cs7Ns8IM8wxEjQHUpUZdTYA5dtuqq8CrX1+83u4gO25aBLUr5Pb2844VUOCipwabEaG",
	"WUOxdWN0ie/OOA2ktCzJMhdzJ901WxzXfOH7DAuy3SHvQIhjTNFK2BxCBJURRFjmH0DBDRbaJIPeSgBi",
	"izRGztzuf5Hoid8BiGvS2G7utDJcE2aj2u8F4H1AsVZkThVkRLirbL1E3UrRJQyEdMKQ3Mj8zlYYDwfZ",
	"t/tF9zux6G5rvV0nCrJtnJg1R/kFzBfDMEbIu2fUfiYb9cUVHBC8oe4QNs/RWKqPx63qobIVGrVXbodA",
	"i7MxSN6YHR6MNkZC+2ZFlb9lh5cRvUSPsgT+hanMu66GnAbHq8GNw/rih9e8XWmd1peA7OV/f0HE3wrx",
	"V0Em02td65hOXMZPjByCoxmUQQ5Lu3Db2DOKA+2BCghk4Ph5scgZB5LETmqpUiJl9ppks9m4OcBYyY8J",
	"sREoMnqEGBsHYONpBg5M3opQNvnyOkByYHj8Qf3YeA4S/A3xtDWbi7PX8sREKq8EqDvh9/opMD8ftixH",
	"fyL2aMgs3RHCG9pR+pDYneRhaL80E0etqx3T7t7XY2hQuGjnh9bzDm1sY6a+0cpvAUAnLNAU43Bu2F53",
	"qb1F9jeURrNOm6tzVrb7sdP6fsO77t4W9Wvbh1LtuxWByRHTW4Yd+9HEfsxSQQ5oRCat7Ta5iMWYjS0M",
	"qJvOfLfA2SUP2cKYpo+Ck04JS6Y0NNEeo8J9+PJ+I26XQkOyYFLpBANN0eWZRt8rdGG+N03je1L7JNLe",
	"7WdZnP9x2gvYJhnLqzi13bw/vjLTvq29flXNL2CLlgfQdEXmWIsimp+wY2qbwrJzwW/sgt/QO1vvOF4y",
	"Tc3EUgjdmeML4aqOdtklTBEGjDFHn2qDKN2hXnCHegW5jt1QCHY33BHNLmqv0AzGunrClPmxd9nkARTD",
	"etiOFF1L4J7tXAXD82PjWTAdlHLop1MPyAAtS5ZtOpEnO+qgZ0Kv5V76m3y9A9RJPdgeDARRpljGngQf",
	"KbMkDQwpW5SDh2s7GIWZ8879y0AhhFMx5UtK9RFlWBvrnuzD1TnQ/EfY/sO0xeVMrqaT2wWqYrh2I+7B",
	"9buavFE84wmMDVy04s7XRDktSykuaZ64cN4Qa0px6VgTm/vo3z2runjQ6Pz1yZt3Dvyr6STNgUprZu9c",
	"FbYrv5hVGWtTyAEB8SVrjAvj7VJriAXEr68NhiHA9QpceZDAljNazDGXFa8mvBuIogsJLuIHwXsDfC4S",
	"bZe4IyINZR2QbsIkNh7djkHTS8pyH5/w0A4c2uLixt2Jj2qFcIBbx7IDxzC5U3XTk+64dDTctUcnhXPt",
	"KGBS2Bo9igjezQY0JiSGPZBVC7o1HGR9175y4lWRGPFLVM7SeCyLz5VhDm5PKkxjgo0HjFEzYsUGDr54",
	"xYKxTDM1wpnrABnMEUWmv3c/hLu5cMUVK85+r4CwDLg2nyRKZUdQ8UK7i2r2t1NjO/TncgPbSGgz/G1s",
	"jLBOQHfHQyB2GxjhuUgP3Fe1w+kXWocczA9B6Pcax6vhjL0tccfRqOMPx802R2XVPt8IayH29Z9hDFs3",
	"Z38hRh/LcqUeBuaIFlYc3C1OhncK0/sae0SzJSC44WYwtQH2XInIMBVfU27rpJl+FoeutwIbMzC91kLi",
	"/SQVj6sxlSyk+APinuzCECqSsOxQieYi9j6I3PvoKtE6RtNUwPT4DeEYZO0hSy6MKrWPvwckHLk8OPDB",
	"C/8+6km5ZWtb062VdBEXjjBRambHb4TDwdxLLsvpek5j1RCMQWVgOmmOFlvxWS2I7+yp4ELJDe8Fp5R1",
	"W2Yv9ZQgm1sF/QukNzSOviyWzyBlBc3jVlKG2G9fYczYktnCeJWCoPKaG8hWFLVc5KrX2cPbBjWnC3I4",
	"DaqoOGpk7JIpNs8BWxzZFnOqcNeqY/B1F7M84HqlsPmTEc1XFc8kZHqlLGKVILUBi65cfSAyB70G4OQQ",
	"2x29IA/xKEixS3hksOhskcnx0QsMoto/DmObnauAuUuvZKhY/sMpljgf41mYHcNsUm7Ug+gFM1u2eFiF",
	"7ZAm23WMLGFLp/X2y1JBOV1CPAeh2AOT7YvUxKBhBy88szU3lZZiS5iOzw+aGv00kFBp1J8Fg6SiKJjG",
	"U14tiBKF4aemrJqd1A9nC3i6yigeLv8Rz91K6zZA12G+3wCx3ctjq8bT0be0gDZap4Tae5g5a07EnUI8",
	"IKf+NjeWiqkrxFjcmLnM0tGkwwPyBSkl4xqdqEovkr+RdEUlTY36OxgCN5l/8yxSHqddEYNfD/B7x7sE",
	"BfIyjno5wPbemnB9yUMueFIYjZI9ahKYA6kcPCCMp2J5jd7NxNs99FgD1IySDLJb1WI3GmjqWzEe3zHg",
	"LVmxXs+1+PHaK7t3zqxknD1oZSj0y/s3zsoohIzV9mjE3VkcErRkcIlZYXEimTFvSQuZj6LCbaD/c09Z",
	"Gg+gNsu8LMccge8qlmf/aC5kdCqMScrTVfSMY246/trUOK2XbOU4WkpiRTmHPDqc3TN/9XtrZPf/pxg7",
	"T8H4yLbdymF2uZ3FNYC3wfRA+QkNepnOzQQhVtsZ6nVKY74UGcF5mroFDZf1i6EFVZR+r0DpWL11/GDT",
	"MTCWZfwCW8SHAM/Qqj4gP9g3ClZAWteq0ZplRZXbK7qQLUG6IGtV5oJmU2LGOX998obYWW0fW0vaFhFa",
	"ojHXXkUnhhEUORmXmucrE8aTh8ePszub0axaaaxyoDQtyti9ENPi3DfAyydhXBfNvBA7B+SVtbCVt9/s",
	"JIYfFkwWxjKtR7M6HnnC/Edrmq7QdG1pk2GWH1/9ynOlCso614Un6zolKHcGblcAy9a/mhJh/Is1U7Y0",
	"PVxC+ypKfS/LuU7+akp7ebLi3HJKVEfvujd4E7R74OzhvQ/9RiHrIP6ahosSlUzhusXAzrBX9OJ/t7JY",
	"r56zvQNbl1/0T46klAvOUrx2HxTDr0F2Ze7HnIuMqFDQDUt5EXcSGhGuaD2zOj3IYXGwwplXhA5x/cBs",
	"8NUQ1XKH/VNjPfUV1WQJWjnNBtnU16xz8RLGFbi6M/jiQaAnhWydNaGGjB5fJnWY+5pshInpAwbw9+bb",
	"W+ceYa7mBeNoCDm0ubRQG9HAKtzaWE9Mk6UA5dbTvkiuPpg+B3iZOoPNpwNftRvHsEc1Ztn2XLI/1Ik/",
	"pXSngqbtS9OW2FTA+udWEryd9KQs3aTRe+A1hWNV9wYRHDltSny4P0BuPX442g5225legPupYTS4xMNJ",
	"KHEf7jFGXcCwU4n0kuaV5ShsQWxaT/TyIuMRMN4wDk1N+cgGkUa3BCQMyutAP5VKqq0JOEqnnQPN8UQy",
	"ptCUdiHa2w7VITCiBNfo5xgmY1N7cUBx1A0aw43ybV3K3nB3YEy8xDc0HCL7lRTRqnJGVIbZvJ3aijHF",
	"YRS3r0ra3gD6YtC3iWx3LamVnOvsREPXtFIRszdfbyCt7IG7sAVdaFmSFO89B/tFNKLJlHGeinkeyX17",
	"VX8MCpZi5vV8i//GyuwMo8SdiF87J8sff2PHaxus7ZF65qZhpkSx5Q3J3PS/UzrnYtkG5H4DCjtlPGSZ",
	"mHS/NmozvLnbK+BkFWt9sRbTkISvZm3LsPsrYW2ZREUedUqbwsS7nfLhEsNTVP0DyYjvm5oR1O4u9oxh",
	"KCUxHcygpdrdmdCUNAUa+oJp6wLHRrD5DLYesX2sKxpfGcphsCkM5nOv9zi7qGdl4tg7EeqTY/oA/egz",
	"70hJmTtAayS2j1mXo9vPmh6TvdcQuLsIl/mKg8RW0ivUtptDepnPQe67rad1MP7KdnMgj2cmWA15CdyV",
	"Q27nNI7OrFosINXsck+m+X8Yi7XJYp56m9bWkA8Sz1mdqePfdLumqd0AtCsRfCc8QV2IW4MzlGd6AdsH",
	"irS4IVrga+oZ9SZ3AREDWDMjMSwiVCz6b51wF5BlquYMxII/bbPdoSlXNFhZtU73ilWnGjWXZ0lCnZ1V",
	"l34aKuYqYlb8qLlM12vdosGUjKFk9H5tw+Hd6xWWklR1Vez60bYgmcI4a90SYWt3FxHvBdRxJ38rEZT/",
	"zV+hsbPYxwCb2q8Y5VtTmfkWUbPVW8TJQHpXN2Ha5qWzONCLembW5Eb0c4YjN/kxFybNhWJ8mQylTLXT",
	"EepY/gNlD10wQIBFIxGuBUhX81n7txYTLXwuxS44dqHCvQxyEySowUJvFrjB26zvm+u6WL6I2pc23YFS",
	"uEAioaAGOhlcqh2ecxeyX9rvPknWl6/pFIuKjOv5Ndl7K9ZnxTDVQ2LI9Qvidsv9ybc38RcY57akvord",
	"sOUGlWEkqZQiq1K7QYeCAd6vGn1/fYcqiVr5aX+VPYMtx5oOb4KrDBewnVmjKV1R3hTXaIu1raxv1xBc",
	"vOtQ+05dqbjBmi/tApZ3Auef6QlNJ6UQeTIQOjrtXxTuysAFSy8gI2bv8OfJA9VVyUOMWNRnA+vV1teS",
	"L0vgkD06IMT4UkWpt/6YoF0oqzM5f6B3zb/BWbPK3t13TtrBRx5PhbBv195Sv/lhdms1+5j7Laeyg+y5",
	"ArzhA6qNriO1hsc+kxQJ3HfrvzZMZaGIWSk3vCs3Sr77jlqE9cNbDnv8n4uWV2dLwXSC9ULCHXt3QZTy",
	"mt5d//7G2OXhOlCrVQr66xxNgBZuB3A/BvFNaKKP3OGIgp6PiSjEC1aY7hjSsAjBai8EQSW/Hf1GJCzc",
	"Q9qPH+MEjx9PXdPfnrQ/G+/r8eOoZN5bMKP1GpObN8Yx/xg63LUHmAN5BB16VCzP9jFGKyukqceIeQ+/",
	"uvyZP6Ui5K/WRe6LqiuOd50wapcIiJjIWluTB1MF+R4jUj1ct0hiB242aSWZ3uIVJu9RsV+jV8N/qIMw",
	"7om/OhHc5SHb56JdWlITsmle+P1B2Ee6CrPXY2BdY2H11xtalDk4Qfn2wfyv8PRvz7LDp0d/nf/t8Plh",
	"Cs+evzg8pC+e0aMXT4/gyd+ePzuEo8U3L+ZPsifPnsyfPXn2zfMX6dNnR/Nn37z46wP/vK4FtHm69n9j",
	"2dTk5N1pcm6AbXBCS1a/p2DY2JdgpClKovFJ8smx/+l/egk7SEXRDO9/nbgctclK61Idz2br9fog7DJb",
	"oo+WaFGlq5mfp1/H/t1pnT9j7z0gRW1qhGEFJKpjhRP89v712Tk5eXd60DDM5HhyeHB4cISVjkvgtGST",
	"48lT/AmlZ4V0nzlmmxx/vppOZiuguV65PwrQkqX+k1rT5RLkgatFaX66fDLzx++zz84/vdr1bRaWJZt9",
	"brnx2Z6eWINk9tnfPtndunWpw4Uvgg4joRie0r7UNPuM/uDg720wPusNy65mPvzkergXT2afmyeIrqwU",
	"5hALHdl8Khq8WDQ1/jq+zKjsr0bwfBo3U+0Xq2ouOs0M95heL+vnmILb+scfeuaXHYj4kSIPibdmGn5G",
	"vFblrfaNQv9wmLz49PloenR49RejsN2fz59ejYwBNy9JkrNaG49s+KnzHPWTw8P/Zu9wPrvminfa3K1j",
	"skhB2u9oRnyKIc59dH9zn3KMwBvFSezGcDWdPL/P1Z9yw/I0J9gyuHzTJ/0v/IKLNfctzS5eFQWVWy/G",
	"qqUU/CNruFfQpUIPTLJLqmHyCV382Bn7gHLBB0+vrVzwFdevyuW+lMuX8bztk2sK+Je/4q/q9EtTp2dW",
	"3Y1Xp86Us1nsM/vGRmPh9UqnLiGaTo+J7XTXw2ddDfsD6N47bpNbqpg/7Um3/95y8uzw2f1B0C5l+CNs",
	"yVuhyfd47PWFyuw48dllCXU8oyzrMblV/6D0dyLb7sBQoZalyzyN2CVzxg3I/d2l//pE7521C9gSexTs",
	"Q/7undG2PXR1Sx3wxT4J91WHfNUh0k7/9P6mPwN5yVIg51CUQlLJ8i35hdf3hm7u1mVZNM2uLfo9nWa8",
	"kVRksASeOIWVzEW29fVxWgNegA1N9wyV2ed2kUsb/hoMS73C3+vHXvpAz7fk9FXPgrHdupr2uy027XiM",
	"EZ+wC+JOz7CriwacsV1sbhayFJpYLGRuUV8Vz1fFcyvjZbTwxOyXqDfhAzndPXnqL9DGrphT3Z96jM/x",
	"p4rrf9kXtr+qhK8q4eYq4QeICCNKrVMSEaa7SaS3ryAw8yoL05ttESPjd7jmVU4lUTA2THGCI7rgxH1o",
	"ift20qK4sj4a5QQ2TOErGxGC3a3f9lXFfVVxX9Cp1X5F0zZEru3pXMC2oGXt36hVpTOxtoVnoloR68/S",
	"3BVww5JqdSaGFsQP0FxwIj+7G3351izhkmXGjNOsAGNS1brOdPZpq03erBmheaRuyThOgKoCZ7GVCmlw",
	"dUBBKrh9zKlz1uYge2t9wpiS/b0C1GgONw7GybR12OLIGKkLeGv7q382crUjll6/yNT6e7amTCcLId3N",
	"IcRQPwtDA81nrsRC51d7ETr4McjQiP86q4v/Rj92c0tiX13qh2/UJI+FyVhIqToN68Mng3Csp+aI2OQW",
	"Hc9mmFS/EkrPJlfTz528o/DjpxrHn+v91eH66tPV/w8AAP//b1nrrFOsAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
