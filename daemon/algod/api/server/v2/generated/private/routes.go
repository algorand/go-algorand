// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
