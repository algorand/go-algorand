// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
