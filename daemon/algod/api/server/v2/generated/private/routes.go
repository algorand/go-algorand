// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AucDrW8/3v6/AAAA//809Rplc44AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
