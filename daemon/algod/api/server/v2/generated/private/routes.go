// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Ap64t+9v/38AAAD//8igmd8zgwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
