// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vX1/+/8DAAD//yDVgEjfhQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
