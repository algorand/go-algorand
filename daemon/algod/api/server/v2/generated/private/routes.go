// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/2bP5D675op3ytwtN1mkXO93NCM+uhHnPry/uU84WuAN4yT2YriaTp7f5+pPuCF5mhNsGeT99Lf+F37O",
	"xSX3Lc0tXhUFlVt/jFWLKfi3/fCuoCuFGphkF1TD5BOq+DH3/gBzwfeIr81c8JHlr8zlvpjLl/H69JNr",
	"HvAvf8Vf2emXxk5PLbsbz06dKGcD6Of2BZJGwuuVl11BNJIfY+rprvf2uhz2Neje84GTW7KYP+0lwf/e",
	"5+TZwbP7g6BdG/FH2JK3QpMf0O31hZ7ZccdnlyTU0YyyrEfklv2D0t+JbLsDQ4ValS7oNSKXLBg3IPdv",
	"l/7bHL3n/c5hS6wr2Jv83fO2bXno6pY84It9ifArD/nKQ6Sd/un9TX8K8oKlQM6gKIWkkuVb8guvU5Zu",
	"rtZlWTTMrn30ezzNaCOpyGAFPHEMK1mIbOvL1bQGPAdrmu4JKvPP7ZqT1vw1aJZ6hb/XT+H0gV5sycmr",
	"ngRju3U57XdbbNrRGCM6YRfEnZphlxcNKGO7yNwsZCU0sVjI3KK+Mp6vjOdWwsvowxOTX6LahDfkdO/k",
	"qc/djWW3U92feozO8ace1/+yD7t/ZQlfWcLNWcJriBxGPLWOSUSI7iaW3j6DwMirrFu5HcMXfPMqp5Io",
	"GGumOMYRnXHiPrjEfStpUVxZHY1yAhum8CWSyIbdrd72lcV9ZXFfkNdqP6NpCyLX1nTOYVvQstZv1LrS",
	"mbi0NW+iXBHLwdLc1Y7Dam51JIYWxA/QJDiRn11GX77FF9FZZsQ4zQowIlXN60xnH7baxM2aEZon/FaM",
	"4wTIKnAWWySRBqkDClLB7YNXHV+bg+yt1QljTPb3CpCjOdw4GCfTlrPFbWOkJOGt5a++b+Rqhy29frWq",
	"9ff8kjKdLIV0mUOIoX4Uhgaaz111h86vTV5n7wsmqwY/BrEb8V/ndZXe6Mdu1EnsqwsK8Y2asLIwTAv3",
	"sA7Q+vDJbAUWeXPb20QdHc3nGG6/FkrPJ1fTz52IpPDjpxr7n+ub1+3C1aer/x8AAP//Xu+MiquxAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
