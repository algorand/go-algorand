// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by id
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info by id
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
