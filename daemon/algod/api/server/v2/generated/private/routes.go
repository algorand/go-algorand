// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XPcNpLov4I3u1X+eMMZ+Su7VlVqn2I7iV4cx2Upubu1fAmG7JlBRAIMAUqa+PS/",
	"X3UDIEESnBnJWt+ldn+yNQQbjUZ/obvR/DhJVVEqCdLoyeHHSckrXoCBiv7iaapqaRKR4V8Z6LQSpRFK",
	"Tg79M6ZNJeRqMp0I/LXkZj2ZTiQvoB2D708nFfxWiwqyyaGpaphOdLqGgiNgsylxdAPpKlmpxIE4siCO",
	"X06utzzgWVaB1kMsf5D5hgmZ5nUGzFRcap7iI80uhVkzsxaauZeZkExJYGrJzLozmC0F5Jme+UX+VkO1",
	"CVbpJh9f0nWLYlKpHIZ4vlDFQkjwWEGDVLMhzCiWwZIGrblhOAPi6gcaxTTwKl2zpap2oGqRCPEFWReT",
	"w/cTDTKDinYrBXFB/11WAL9DYni1AjP5MI0tbmmgSowoIks7dtSvQNe50YzG0hpX4gIkw7dm7PtaG7YA",
	"xiV79/UL9uTJk+e4kIIbA5ljstFVtbOHa7KvTw4nGTfgHw95jecrVXGZJc34d1+/oPlP3AL3HcW1hriw",
	"HOETdvxybAH+xQgLCWlgRfvQ4X58IyIU7c8LWKoK9twTO/hONyWc/390V1Ju0nWphDSRfWH0lNnHUR0W",
	"vL5NhzUIdMaXSKkKgb4/SJ5/+Pho+ujg+k/vj5K/uz+fPbnec/kvGrg7KBAdmNZVBTLdJKsKOEnLmssh",
	"Pd45ftBrVecZW/ML2nxekKp37zJ816rOC57XyCcirdRRvlKaccdGGSx5nRvmJ2a1zFFNITTH7UxoVlbq",
	"QmSQTVH7Xq5FumYp1xYEjWOXIs+RB2sN2RivxVe3RZiuQ5IgXreiBy3ofy8x2nXtoARckTZI0lxpSIza",
	"YZ68xeEyY6FBaW2VvpmxYqdrYDQ5PrDGlmgnkafzfMMM7WvGuGacedM0ZWLJNqpml7Q5uTin991qkGoF",
	"Q6LR5nTsKArvGPkGxIgQb6FUDlwS8bzcDUkml2JVV6DZ5RrM2tm8CnSppAamFr9CanDb///JD2+Yqtj3",
	"oDVfwVuenjOQqcrG99hNGrPgv2qFG17oVcnT87i5zkUhIih/z69EURdM1sUCKtwvbx+MYhWYupJjCFmI",
	"O/is4FfDSU+rWqa0ue20HUcNWUnoMuebGTtesoJffXkwdehoxvOclSAzIVfMXMlRJw3n3o1eUqlaZnv4",
	"MAY3LLCauoRULAVkrIGyBRM3zS58hLwZPq1nFaDjgYyi08yyAx0JVxGeQdHFJ6zkKwhYZsZ+dJqLnhp1",
	"DrJRcGyxoUdlBRdC1bp5aQRHmnq7ey2VgaSsYCkiPHbiyIHaw45x6rVwDk6qpOFCQoaal5BWBqwmGsUp",
	"mHD7YWZoohdcwxdPxwx4+3TP3V+q/q5v3fG9dpsGJVYkI3YRnzqBjbtNnff3OPyFc2uxSuzPg40Uq1M0",
	"JUuRk5n5FffPk6HWpAQ6hPCGR4uV5Kau4PBMPsS/WMJODJcZrzL8pbA/fV/nRpyIFf6U259eq5VIT8Rq",
	"hJgNrtHTFL1W2H8QXlwdm6vooeG1Uud1GS4o7ZxKFxt2/HJsky3MmzLmUXOUDU8Vp1f+pHHTN8xVs5Ej",
	"SI7SruQ48Bw2FSC2PF3SP1dL4ie+rH7Hf8oyj9EUGdgZWgoKuGDBO/cb/oQiD/ZMgFBEypGoczKfhx8D",
	"hP5cwXJyOPnTvI2UzO1TPXdwccbr6eSohXP3M7Vv2vX1DjLtYyak3R0aOrVnwrvHB6FGMSFHtYfDV7lK",
	"z2+FQ1mpEioj7D4uEM5QUgg8WwPPoGIZN3zWHqqsnzXC7/Tit/QenZKgipi4H+g/PGf4GKWQG+++oesq",
	"NDpxKgg0ZejxWTtiZ8IB5IkqVlgnj6FzdiMsX7STWwXdaNT3jiwf+tAiu/PK+pWM3vCLwKW3p8ajhapu",
	"xy89RpCsPQszjlAb7xdX3t1ZGlqXiaNPxJ+2A3qA2vDjUK2GFOqDj9GqQ4UTw/8BVNAI9S6o0AV011RQ",
	"RSlyuAN5XXO9Hi4CHZwnj9nJt0fPHj3++fGzL9BCl5VaVbxgi40Bze47u8K02eTwYLgyUvB1buLQv3jq",
	"T1BduDspRAg3sPeRqFNAzWApxmy8ALF7WW2qWt4BCaGqVBXxeYl1jEpVnlxApYWKhC/euhHMjUA9ZP3u",
	"3u8WW3bJNcO56ThWywyqWYzyeM4ik26g0LsMhQV9eiVb2jiAvKr4ZrADdr2R1bl599mTLvG9d69ZCVVi",
	"riTLYFGvQhvFlpUqGGcZvUgK8Y3K4MRwU+s70AItsBYZ3IgQBb5QtWGcSZWhQOPguH4YiWVSEIViPyZU",
	"OWZt7c8C0DtOeb1aG4ZupYptbftiwlO7KQnZCj1y9GvO7HaUnc7GyfIKeLZhCwDJ1MKdr9zJjxbJKSxj",
	"fMbFaacWreZM0MGrrFQKWkOWuPTSTtT8OLvLZgudCHFCuJmFacWWvLolskYZnu9AlMbE0G3cCXcoHWK9",
	"3/TbNrA/ebiNvMIzpuUC9F1QunMwMEbCPWlyARUdzv6h++cnue321eVI6sRZ4FNRoPgyyaXSkCqZ6Siw",
	"nGuT7BJbHNRxE3AFgaTEJJUAjwQIXnNt7BFdyIxcRqtuaB56h6YYR3jUoiDkn7wxGcJOUU9KXevGsui6",
	"LFVlIIutQcLVlrnewFUzl1oGsBvzZRSrNeyCPEalAL4jll2JJRA3LkbUxLCGi6NwPNqBTZSUHSRaQmxD",
	"5MSPCqgbho9HEMHzRfMmMY7QPc5pYtbTiTaqLFH+TFLL5r0xMp3Y0Ufmx3bskLm4afV6pgBnNx4nh/ml",
	"paxNHKw5+nYEmRX8HG0TeWo2ljDEGYUx0UKmkGzjfBTLExwVisAOIR1xkl1qMpitJxw9/o0y3SgT7NiF",
	"sQWPeOxvbQT8tI0O3YHT8hIMF7luHJMmzN7OQhH5frUEepEVpCBNvkFeXYqqsEktMmfa/2bdnszNYtM3",
	"rfjJjFVwyavMjxieloLFJEJmcBXXrrwTG8ngiok40stmZmFY6lNOMgQwiwq6TeKludJCrhKbHdxl1Jqk",
	"3j3NaimcAbuEyuG1hMqZXeOzY4lRPoO2DY9tpHDBmdsQAV+NT2uRs7ulY0lUeoCCWIi0UtzmRpGovQWy",
	"CgqO2FGWzpn98Tm3EfuFfe5TtT5EHvJuHK7n11EN07Do5Zo2C1Vtn4gh1+PRFjSMLWSVqwXPE3T4Ickg",
	"NztDb3iQgJc0Eu21Soevd1E+O3ufZ2dnH9hrHEtnC2DnsJlTxpqlay5X0KYRQnmxpwa4grQOTUuPjHsd",
	"BF2stIt99yg4nZRK5Ulz5O2nPQbmpk/3c5GeQ8ZQX5GIOSt4r7tDOAm7jyyum8TQ5XrjXciyBAnZgxlj",
	"R5JBUZqNi6/0PJ7e5PKe2Tb/Fc2a1ZSj5pLRImdnMh7asBnuT5QpD2a7JNmSr0+cygLZPpG5kiPixC8p",
	"QYPgovK5NTp6Qm8Gpm9g0QOmsljsE0P4huqgeGeXRUbHkda66XpRCCqGCoZNUXP6/PTwhC/MjLFT0h14",
	"wNJwARXPqdJD+8Cx0KwQeFDXdZoCZIdnMulgkqrCTXy//a9VS2f1wcETYAcP+u9og+6qO0taGei/+yU7",
	"mNpHRC72JTubnE0GkCoo1AVk9jwW8rV9ayfY/9PAPZM/DBQzK/jGnuS8LDJdL5ciFZbouUK9vlI9r1Mq",
	"egIVogdoZjUTZkqmjChK3rrdl1YAJ1Hv6S5iPhGo6KejKUVt57OSXd7RDK54iqvkpGQ21iNo+GzoBBlV",
	"JiGAaAh6y4wuCaA7evyWcjfU5zYAsR2/014IokOOgF1nu333ATGiGOwj/kesVLjrwtUf+SKVXGgzQNKF",
	"IygD1DBkxOjM2H+omqWc5LesDTRnO1XRgYkO0jgD2Vg/p/PUWgpBDgXYCBE9efiwv/CHD92eC82WcOmL",
	"9nBgnxwPH1ohUNp8sgT0WPPqOOJAUWAerWmk0HrN9Xq2M0hPcPeKzQegj1/6CUmYtCYTgwuvlFrewWpF",
	"dhX1WeAqtlK3cxRuu6dZyTej7nWJCEaqtaA6zymWr5Y9jmRO/61FiSDbypKNgU5V6n/e/9vh+6Pk7zz5",
	"/SB5/n/nHz4+vX7wcPDj4+svv/yv7k9Prr988Lc/x5wXbcQinvf5lus1Yuo0x5U8ljZzi54nBew2Lg6g",
	"lp8b7x6L4WZ6ygdL2ofp3sY2RKArQZtNPHdSl2W+uQMjYwGxCtwZQ3fCo9o+VcuwKNVxnt5oA8Uww2Bf",
	"/Xnk9PPORycGXKpkLiQkhZKwid7DEBK+p4dR35DU0sjLZCDG3u1Hbzr499DqzrPPZn4qfWm3AzX0timR",
	"vYPN78PtJZfCclw62UBeMs7SXFDoXEltqjo1Z5JTcK7nevfYwoccx8O1L/yQeHw4Er51oM4k10jDJmQX",
	"TTouIRKM/xrAR211vVqB7rnibAlwJt0oISnQQnPRSSaxG1ZCRdnhmR2J3ueS5xRd/h0qxRa16Zp7qhq0",
	"3rTNdOE0TC3PJDcsB64N+17I0ysC50/VnmckmEtVnTdUGIkKgAQtdBJXpN/Yp6RP3fLXTrfSFQ772Oub",
	"z20APO6xmjaH+fFL5wofvyR/p81xDXD/bImPQsgkymR4RC2EpNLoHm+x++i1eQZ60GbL3K6fSXMlkZEu",
	"eC4ybm7HDn0VN5BFKx09rulsRC+O7df6IXbEXqmk5Ok51Z9MVsKs68UsVcXcHwHmK9UcB+YZh0JJepbN",
	"eSnmuoR0fvFohzv2CfqKRdTV9XTitI6+80o3Bzi2oP6cTQbJ/20Uu/fNq1M2dzul79kCVws6qEyMnNrc",
	"/cpOAAEXby9o2QpfPEC/hKWQAp8fnsmMGz5fcC1SPa81VF/xnMsUZivFDpkD+ZIbTnGnXjR97A4lxQQd",
	"NmW9yEXKzkNT3IrmWDD27Ow9MsjZ2YdBvnloON1U8QA3TZBcCrNWtUlcRmI8dtXG9wiyjQVvm3XKHGzL",
	"kS7j4eCPBN3LUidBFDa+/LLMcfkBG2pGL1G9ItNGVV4JomZ0cTTc3zfKZdwrfulvjdQaNPul4OV7Ic0H",
	"lriYz1FZUoiXYqy/OF2DPLkpYf84bYtiCyx2tqeFW4fqxjWsBPTEvuUTFzpOOXxEpKMxqBXaOPRt6YSg",
	"vlU5bu6tyRTAiFKnNusEZSq6Ko2sRfIQ3PXlK9SFPu+sxUoi87m7Zwtg6RrSc8go6UZx6WnndV/a4CyL",
	"F1mh7XUxW6pKdxooBLEAVpcZd7aXy02/uFyDMb6i/h2cw+ZUtVciblJNfj2duERSgjwzJiAl0iMwAmrZ",
	"FRefjOptvssrUrKnLJnNp9gqYM8Whw1f+HfGBchapjsQnhhTNGTYwu8lryKEsMw/QoJbLBThfRLrR7M3",
	"vDIiFaVd/375oLeddxDILqUeVeNq2dfWA2Ua1d52cLLgOq64AZ/gfqAM9auI/Ew2mmcTxIxaDjjGXeQQ",
	"ZDK1k2xekbPjl23vUI+hFucSqGRrTT0aXYqEZnvtUvLiok3EU6hlHwO3MxGKXORrZUQ35SFw3hwu+Gj2",
	"afSuz3FQABNcIW1u8njF1heGaXOry3Zz8Dd+/DUff7dnMr3RPZ3pxNVkxrZDSbLuGeSw4i7ZQtWePtFv",
	"Ubungw1CPH5YLnMhgSWxWhqutUqFzb+3utzNAej8PWTMBlbY3hBibBygTVFqAszeqFA25eomSEoQFNbm",
	"HjbFt4O/YXeUt22r4dzKne7fUHe0QjRtr73ZbRxGf6aTqEoa88w7o5gdsoDBUSbGoqiahvGQYdRFQw5k",
	"jpOOZk3OY1Ey9CqA2PDEvxa46+y+WKKRfxAkKypY4dm7Pa+itPoAzOeNGVwoA8lSVNokdFSOLg8Hfa3J",
	"Gfwah8bVT4dUzN7LF1lc+9C057BJMpHX8d128373Eqd905xbdL04hw0ZGeDpmi2ojwRaoc70OGbL1Lae",
	"bOuCX9sFv+Z3tt79eAmH4sSVUqY3xx+Eq3r6ZJswRRgwxhzDXRsl6Rb1ElTADHVLUHtj63Sopme27bQ+",
	"EKYbVxGNal4LKbqWwNHdugpbbGbryYI2DMO7DSMywMtSZFe9s7OFOpIuIwf+Bo669fgjKaBJA2wHBYJz",
	"cqx8tgJ/1rdbGthM21BjUGK4mzL9wsZAIYRTCe3bQQ0JhaxNFWC7aHUKPP8ONj/hWFrO5Ho6+bQjf4zW",
	"DuIOWr9ttjdKZ4oh2yNgJ3J2Q5LzsqzUBc8Td31sjDUrdeFYk4b722afWdXFj9+nr45ev3XoU8Uk8MoV",
	"Cm5bFY0r/zCrwhNxrFrwNIiMkLfqz87WEQs2v7nDGwZTfHFnx5dDLeaYy4pXY+BCUXTBlWU8lbUzVBIW",
	"hN5KMjsVpZ8amQvLS+9U5AcSFufQdod36IVwri0NQArb40YzJftFNejG0SmT2KXgG9xFG5gdKghZFwmK",
	"QKJzkcZDB3KhUYpkXdDFqo0BRoNHHEKEWIuR8LmsRQALh+k9MkU9JIM5osSksM4W2i2Ua05YS/FbDUxk",
	"IA0+qlyRXUdYUDZ83fjQpMVr1B1gV6begP8UO4+gxiw8IbHdyIdR3sgNCX/o8wttwtP4QxCcu0GSJpxx",
	"YJa2JFgcfzhutpnudTdaG/YSHOogZAzbd2Z3I0MfOlhbREfmiDYmHNXYR+Pamu4e7K+nW7VM6IYK2daD",
	"8lyrCJhaXnJp+4zhe5aG7m0N9tyOb12qii7saYhmqIVOlpX6HeKnySVuVKTuz5GSXDZ6exa5CNVXok1k",
	"pO0g6ekb4jHK2mPeVPCQdZNoIxJOXB6Er6mQ2QeZuLRsbXuidVK3ceEIyy3mFn4rHA7nQYlKzi8XPNYe",
	"BJ0axOmoTZR0wmFGMf+y3wXd1O873gtyLs1YYW+5lVC1xbnDG9W3dFD+WCyfQSoKnsejoxlRv3v9KRMr",
	"YRvL1RqCzmUOkO3IabnIdX+zqaiWNMdLdjANeiO63cjEhdBikQONeGRHLLgGe8sqvHnlioIMSLPWNPzx",
	"HsPXtcwqyMxaW8JqxRon0l6o8fHnBZhLAMkOaNyj5+w+Rd61uIAHSEXni0wOHz2nkgz7x0HM2LkOktv0",
	"SkaK5d+cYonzMaUeLAw0Ug7qLHrj0rb9HVdhW6TJvrqPLNFIp/V2y1LBJV9BPKNa7MDJvku7SYG7Hl1k",
	"ZntWalOpDRMmPj8YjvpppCwL1Z9Fw93PKFCAjGJaFchPbVsyO6kHZxtgulZBHi//kNIcpb9n0zu0ft4g",
	"rbXlsVVTMuoNL6BL1inj9mIyXRVyF9qdQpyN9HSB6iI+STWywd5uunfZfalkUqDsZA/agr+A/6ItTZTh",
	"eXRa43VXv3JlO+h9XS2EkowStu4Qlgc66dYkrqv4OnmNU/347rUzDIWqYv1JWm3ojEQFphJwEZXYfuFa",
	"45k05sJTPuagfFWLPPupLTfttQKruEzX0fjnAl/8ue1d2JDdUj167XPNpYQ8Cs7K8s9e5iNa6Ve17zyF",
	"kHuO7bf4ssvtLa5FvIumR8pPiOQVJscJQqp26++awpF8pTJG87QNBlpGGN7LC9od/VaDNrE7hPTA1jrR",
	"GRv9Fdtth4HMyNrPmL1zh7h0bk2RlRVFndsbOJCtoHIBmLrMFc+mDOGcvjp6zeys2t0fp7te1O1nZe9v",
	"dlbRO1sF3UhucqF1rDRqfzjba0Zw1dpQOwJteFHGql5xxKkfQKW1F1zkvvyAzE9InRl7aS2/9nbFTtLe",
	"W2bNdE7XEE/gf4zh6ZpMascAjbP8/m2qPFfqoF1r0/myaShir+Ia5TtV2UZVU6bQ77kU2rachgvoFto2",
	"VefOpfOFt93lVbWUllPi9mnLrYjbkN0jZxN7PiQVxaxH+BuaGa3qKoWbdu06obei9/r6LcAGfVrtDZ+m",
	"T6L/lEDKpZIipVt1QZPrBmXXvnqfmOkeFxD7x2Uv4k5CI8IVbTzWlA44Ko62IvOK0BFuGDAKnuKmWu6w",
	"fxrqk4wHwRUY7TQbZFPfXM6d44TU4BrEUCfzQE/icbyfP4ymNtoWETdkIyr/G3FXvsZn5KoIV7JzLiRd",
	"mHZkc9VB9qRF3XUNHu+EYSsF2q2ne01Ov8d3ZnRVLIOrDzPfjZdg2BAyLtvmLIagjnwGw2UMcOwLHMso",
	"XNz+3Ck1tJMelaWbNHrLrdnhWHu8UQJHouCJD0MGxG3gh9C2sNvW1CPZU2Q0uKDEBZRkhweMMdJ24RUe",
	"ai1H2dvbNuUfvZohZASN10JC2ys6YiDSqEmgjSF5HXlPpxU31gXcS6edAs8pUxJTaNq40NGnguptMJGE",
	"1ujnGN/GtkniiOJoBrSOG5ebpkU1cnfgTLyg3viOkMOWh+RVOScqo6KuXhPEmOJAxe3bh3YNwFAMhj6R",
	"fd1U3ErOTSzRWBF6JjQeR4pFHiljedk8DBqBUr3cYkP/xi69j6/AJdZu3aSFXryxf7m9YUqOe59osbrl",
	"rrTv3+G29GQg3KMY979CtRLe2xn0L7CKp7lWQyl85dsy06GiKUzv8iwpuuihre2wu/3QOt4rd0qqcaSQ",
	"5117Y5Rb7Wtjg2PlPOlo9Rk3rrTUcLatc5FtcBuDYPOQtrGu/UhNNDAwlnu0qUd8PHh7P79h4IUR7K0E",
	"9UntIULf+aoVVnLhAt+tiAwp6+rbhhWH+1S+tBvcX4SrGiMgsZXcsshrL9kbUiki2GFpwA72PO+Q1N4G",
	"6XmSqoI7Jm1gQm9I2mHRw77Lo3UQx9QahuvcewM6tB2h/T6Eb/XCkLjj4mwW+4hzvKgeXyd9Ygnir30M",
	"tcln0wadvtxu3tiu/zQWPbAn5JFAVY+mtcizXZvbCTu215kpsPbz4ounnejd57xQ/bNNyA/Fzd0tvYnh",
	"728CESay1s7kwVRBQHGPWKJ7LRI5pP5jaV0Js6HaHe9pip+jdcnfgHTdyd3HHpoMqEvA2e8MudD0qhnd",
	"fhrmG2XbtRfo/pIraKgxz6srXpQ5OLn48t7iL/Dkr0+zgyeP/rL468GzgxSePnt+cMCfP+WPnj95BI//",
	"+uzpATxafvF88Th7/PTx4unjp188e54+efpo8fSL53+557/LYhFtv3ny79R1IDl6e5ycIrItTXgpvoON",
	"vWeMbOxvMPOUJBEKLvLJof/p/3kJm6WqCD4l6X6duEj/ZG1MqQ/n88vLy1n4ynxFrSITo+p0PffzDPsg",
	"vT1uArQ24U87amNvyAq0qY4VjujZu1cnp+zo7fGsZZjJ4eRgdjB7RI1CSpC8FJPDyRP6iaRnTfs+d8w2",
	"Ofx4PZ3M18Bzs3Z/FGAqkfpH+pKvVlDN3FVu/Oni8dzHd+YfXZL7etuzbpWBuzoSvBDcPZx/7PQazUK4",
	"dDNv/tFXYASPbC/t+UcKH43+3kXjo7kS2fXc9/xxb7ietPOPbZPoaysdOcRO/r55XTucmtLRtzO0/RUF",
	"wucVhe72FG929zjDXcW3XjQNs8NPBL//J/2g5ofe94UeHxz8k30p5ekNV7zVn+2c/yJ9Fr7iGfO5JZr7",
	"0eeb+1jSTQ9UaMwq7Ovp5NnnXP2xRJbnOaORQTXIcOt/lOdSXUo/Eq1rXRS82ngx1h2l4Nvgkw7nK03N",
	"MitxgYf6D9SNNZbMG1Eu9EmaGysX+s7Ov5TL51Iuf4wPED2+oYD/8Vf8L3X6R1OnJ1bd7a9OnStnyxfm",
	"tnVc6+H5W5PDq4Rdb3ZMJ7ujDrtPcVIJlw9cCYQFG7mW2qSbVWZjIr61kC+sClrNd3X2Owe0cwP6O9jo",
	"XQr8dA3sFwc+EdkvVP5JyYcpUxX7hed58Bt929e77bO4vm+vKu78wmgroDG0lgC+GJWKTl3HXTRk5+Av",
	"tVoadBKUw5x+24huCaNfmbb9ukIN5ljw0cHBQawYqI+zi99YjKn491IlOVxAPtzqMSR6d1u3fZN19Ks1",
	"wyvJ4bk7wnX+E+bNLeXRT9R279neBLuXSt4z7JIL1/g/6GtjP2NUCOO/3myLhFwBYWMj4l/8TRDk9g+C",
	"f6rx/uN10L3eouz0ujaZupTjiotuF/HcledSwWwTbjCKeQCNppox/znOfOO/J804lSup2nQ/8+7bVfQa",
	"hTcNlVZC0gQk5TSLrUPnQZWn+2zMUAmeOMze2K/s9PRe9Gu3Fse43MeE/lN5aehobN0r396k8/ccWR7d",
	"VfsVsYQoNAxpGOD53BWq9H616eTgx24z8Miv8+ZqV/RhP1ATe+riKH5QGyENI460U02s8f0HJDjVELtN",
	"bANoh/M5pXDXSpv5BBVON7gWPvzQ0Pij33lP6+sP1/8dAAD//3s5wHVxiQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
