// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by id
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info by id
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
