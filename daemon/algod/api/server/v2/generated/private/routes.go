// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
