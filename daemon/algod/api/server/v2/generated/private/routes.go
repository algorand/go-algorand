// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
