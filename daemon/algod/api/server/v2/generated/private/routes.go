// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PctrLgX0HNuVV+7FAj+ZFzrKrUXcV2crRxHJelnLt7bW+CIXtmcEQCDABqZuLV",
	"f99CAyBBEpyhHke5rutPtoZ4NPqF7kaj8XmSiqIUHLhWk+PPk5JKWoAGiX/RNBUV1wnLzF8ZqFSyUjPB",
	"J8f+G1FaMr6cTCfM/FpSvZpMJ5wW0LQx/acTCb9XTEI2OdaygulEpSsoqBlYb0vTuh5pkyxF4oY4sUOc",
	"vppc7fhAs0yCUn0of+b5ljCe5lUGREvKFU3NJ0XWTK+IXjFFXGfCOBEciFgQvWo1JgsGeaYO/CJ/r0Bu",
	"g1W6yYeXdNWAmEiRQx/Ol6KYMw4eKqiBqglCtCAZLLDRimpiZjCw+oZaEAVUpiuyEHIPqBaIEF7gVTE5",
	"/jBRwDOQSK0U2CX+dyEB/oBEU7kEPfk0jS1uoUEmmhWRpZ067EtQVa4Vwba4xiW7BE5MrwPyU6U0mQOh",
	"nLz//iV5+vTpC7OQgmoNmWOywVU1s4drst0nx5OMavCf+7xG86WQlGdJ3f799y9x/jO3wLGtqFIQF5YT",
	"84WcvhpagO8YYSHGNSyRDi3uNz0iQtH8PIeFkDCSJrbxnRIlnP9PpUpKdboqBeM6QheCX4n9HNVhQfdd",
	"OqwGoNW+NJiSZtAPh8mLT5+PpkeHV3/5cJL8p/vz+dOrkct/WY+7BwPRhmklJfB0mywlUJSWFeV9fLx3",
	"/KBWosozsqKXSHxaoKp3fYnpa1XnJc0rwycsleIkXwpFqGOjDBa0yjXxE5OK50ZNmdEctxOmSCnFJcsg",
	"mxrtu16xdEVSquwQ2I6sWZ4bHqwUZEO8Fl/dDmG6ClFi4LoRPnBB/3WR0axrDyZgg9ogSXOhINFiz/bk",
	"dxzKMxJuKM1epa63WZHzFRCc3Hywmy3ijhuezvMt0UjXjFBFKPFb05SwBdmKiqyRODm7wP5uNQZrBTFI",
	"Q+K09lEjvEPo6yEjgry5EDlQjsjzctdHGV+wZSVBkfUK9MrteRJUKbgCIub/hFQbsv+vs5/fEiHJT6AU",
	"XcI7ml4Q4KnIhmnsJo3t4P9UwhC8UMuSphfx7TpnBYuA/BPdsKIqCK+KOUhDL78/aEEk6EryIYDsiHv4",
	"rKCb/qTnsuIpEreZtmWoGVZiqszp9oCcLkhBN98eTh04itA8JyXwjPEl0Rs+aKSZufeDl0hR8WyEDaMN",
	"wYJdU5WQsgWDjNSj7IDETbMPHsavB09jWQXg+EEGwaln2QMOh02EZ4zomi+kpEsIWOaA/OI0F37V4gJ4",
	"reDIfIufSgmXTFSq7jQAI06927zmQkNSSliwCI+dOXQY7WHbOPVaOAMnFVxTxiEzmheBFhqsJhqEKZhw",
	"tzPT36LnVME3z4Y28ObrSOovRJfqOyk+itrYKLEiGdkXzVcnsHGzqdV/hPMXzq3YMrE/9wjJludmK1mw",
	"HLeZfxr6eTRUCpVACxF+41FsyamuJBx/5I/NXyQhZ5ryjMrM/FLYn36qcs3O2NL8lNuf3oglS8/YcgCZ",
	"NaxRbwq7FfYfM15cHetN1Gl4I8RFVYYLSlte6XxLTl8NEdmOeV3GPKld2dCrON94T+O6PfSmJuQAkIO4",
	"K6lpeAFbCQZami7wn80C+Yku5B/mn7LMYzg1DOw2WgwKuGDBSVnmLKUGe+/dZ/PVSD9Y94A2LWa4kx5/",
	"DmArpShBamYHpWWZ5CKleaI01TjSv0lYTI4nf5k1UZWZ7a5mweRvTK8z7GQMUWvcJLQsrzHGO2PQqB1a",
	"wmhm/IT6weo7NIUYt9QzPMSM7s3hknJ90DgiLUVQS+4HN1ODb2vDWHx3HKtBhBPbcA7K2rVNC5JRTRFY",
	"2jC8DzOhsRm0NZx/Na3nMdbxXZAUrfGVyI09sZcYpvHfXduQjub3UZ2/DBqGuO1SD72SvXRz0Y+QYjci",
	"1k6E2nF3LKRew1rS0sLvvthtgnF0LmwjC+st9cVIUY7CHPB6QGyE6sbMvpcho5Ag9TowfJeL9OIOBG5u",
	"xunzPQ5PVkAzkMheAWM7ho1vR9jx79gPRRJkxGb9Gf9Dc2I+G26l2vtjxhc14qWICCLHmXHhrGFoZzIN",
	"0LUUpLBeGzHe1rWgfNlM3hNSi5YxQvraOooEe/hFmKU3YaCTuZA345cOI3DSBLcINaMG4jLtUBabVmXi",
	"8BNxkG2DzkDNeULfTgox1B0+hqsWFs40/RdgQZlR7wIL7YHuGguiKFkOdyCvK6pW/UUYj+XpE3L295Pn",
	"R09+ffL8G2Nyl1IsJS3IfKtBkYfOUCRKb3N41F8ZWmxVruOjf/PMh0Ta4+7FEAJcjz1Gos7BaAaLMWID",
	"gAa6V3Irq7swG0FKISNOLLKOFqnIk0uQiolIPPKda0FcC6OHrCPd+d1CS9ZUETM3xlcqnoE8iGFebziC",
	"xjQUat9GYYc+3/AGN25AKiXd9ihg1xtZnZt3DE3ayPfuuiIlyERvOMlgXi1bRtFCioJQkmFHVIhvRQbG",
	"5q7UHWiBZrAGGEOIEAQ6F5UmlHCRGYE2jeP6YeBwAqOiGMzVocrRK7v/zMG4uymtlitNjJ8oYqRtOiY0",
	"tURJcK9QA7GcOghnW9npbOA7l0CzLZkDcCLmLmDiQjm4SIpxVu2PUJ12itikLbhKKVJQyljO1hzbC5pv",
	"Z6msd+AJAUeA61mIEmRB5Q2B1ULTfA+g2CYGbm1OuChTH+px0+8iYHfykIxUAvGiaWwXI905aBhC4Uic",
	"XILEaMu/lH5+kpuSryoHzkLdDnzOCnQBOOVCQSp4pqKD5VTpZJ/YmkYtM8GsIJCUmKTiwAN+4BuqtI25",
	"MZ6hyWjVDc5jHUQzxTDAgzuKGfkffjPpj50aPclVpeqdRVVlKaSGLLYGDpsdc72FTT2XWARj19uXFqRS",
	"sG/kISwF4ztk2ZVYBFFdO9AuKN1fHJ6vmX1gG0VlC4gGEbsAOfOtAuyG50EDgBj/ou6JjMNUh3PqQ6jp",
	"RGlRlkb+dFLxut8Qms5s6xP9S9O2z1xUN3o9E2Bm1x4mB/naYtaeBK6ose1wZFLQC7M3oaVmg4N9mI0w",
	"JorxFJJdnG/E8sy0CkVgj5AOGMku1yCYrSMcHf6NMt0gE+yhwtCCByz2d1RqlrISLYkfYXvn7n53gqjn",
	"TzLQlOWQkeADKnDUvXV/YqO93TFvZmiNMkL74Pes0MhycqZww2gDfwFbjMG9s8eI58Hh4x1YipFRjXRT",
	"ThBQfzhhNuSwCWxoqvOt2eb0CrZkDRKIquYF09qeC7cNSS3KJBwg6rjumNGFDuwRnKfAmFjGGQ4VLK9P",
	"iunEmi274TvvGC4tdDiDqRQiHxHj7CEjCsGoGCgphaE6c2kI/qzac1ILSGfEYNyoVp4PVAvNuALyf0RF",
	"UsrRAKs01DuCkKhmcfs1M5gNrJ6TWUunwRDkUIC1K/HL48fdhT9+7GjOFFnA2ufumIZddDx+jF7SO6F0",
	"S7juwOM14nYa0e3o0ZuNwtlwXZ1ysNe7dyOPoeS7zuB+UpQppRzjmuXfWgF0JHMzZu0hj6yoWu1fO447",
	"KqARDB1bt6W7FGJxB6tl2SZ2YJ3BJrZSx7joozwwBv1WQfQQA9WdWERyVkBe5BgAEYuOQJICjKSoFSvN",
	"kM35+lZDKzfv/z789+MPJ8l/0uSPw+TF/5h9+vzs6tHj3o9Prr799v+1f3p69e2jf/+3mL2qNJvHg2V/",
	"p2plIHWKc8NPuQ13L4S0Xs7WGU9icd9wd1jMENNjPljSKHGLEQRPWJDYyHPGNs63d7DH2oGIhFKCQo0Y",
	"+pTKfhWLMDXPcZ7aKg1FPyxju/46YJS+9yZdj0sFzxmHpBActtFsdMbhJ/wY62218kBn3B+H+nZN3hb8",
	"HbDa84wh5m3xi9QO1NC7OlHwDojfHbcTkQuTEjGiAHlJKElzhvEGwZWWVao/cooeTcCukWi+99OGfdyX",
	"vkncqY74vG6oj5wqg8Paz4lGahcQiWB8D+BdXVUtl6B0x7ZbAHzkrhXjpOJM41yFoVdiCVaCxJD6gW1Z",
	"0C1Z0Bxd8j9ACjKvdNvawdwppY3HbMODZhoiFh851SQHqjT5ifHzDQ7nU5Q8z3DQayEvaizEdf4SOCim",
	"krgi/cF+RX3qlr9yuhUT2e1nr2/uewPwsMcyexzkp6+cJ3D6Cs29JjDYg/3eokUF40mUyc5XQArGMUG0",
	"w1vkoTFaPQM9akKMjuofud5ww0iXNGcZ1Tdjh66K68milY4O17QI0XH+/Vo/xU5tlyIpaXqBh3aTJdOr",
	"an6QimLmPaDZUtTe0CyjUAiO37IZLdlMlZDOLo/2mGO30Fckoq6uphOnddSdxwvcwLEFdeesw27+by3I",
	"gx9en5OZo5R6YNP87NBBflbEaXUJGq1zFbN4e03F5jl+5B/5K1gwzsz34488o5rO5lSxVM0qBfI7mlOe",
	"wsFSkGOf8/GKavqR91T84E0yTHdx0JTVPGcpuQi34kY07e2A/ggfP34wDPLx46dekL6/cbqpojJqJ0jW",
	"TK9EpROX/pxIWFOZRUBXdforjmwvL+yadUrc2JYjXXq1Gz+uqmlZqm42XH/5ZZmb5QdsqAh2sjlESgvp",
	"laDRjBYapO9b4Y4pJF373PlKgSK/FbT8wLj+RJKP1eHhUyAnZdkk2P3mdI3hyW0JrfDGjbL1uqENXLg1",
	"qGCjJU1KugQVXb4GWiL1caMuMJCW5wS7tZLb/BE3DtUswONjmAAWjmsnIOHizmwvf48tvgT8hCTENkY7",
	"NfHpm9IryKO7Mbk6uXg9KlV6lRjZjq5KGRb3lKmvtyyNTvaHBootuRECdxNoDiRdQXoBGV5KgKLU22mr",
	"uz+XcjucVx1M2cs7Ns8IM8wxEjQHUpUZdTYA5dtuqq8CrX1+83u4gO25aBLUr5Pb2844VUOCipwabEaG",
	"WUOxdWN0ie/OOA2ktCzJMhdzJ901WxzXfOH7DAuy3SHvQIhjTNFK2BxCBJURRFjmH0DBDRbaJIPeSgBi",
	"izRGztzuf5Hoid8BiGvS2G7utDJcE2aj2u8F4H1AsVZkThVkRLirbL1E3UrRJQyEdMKQ3Mj8zlYYDwfZ",
	"t/tF9zux6G5rvV0nCrJtnJg1R/kFzBfDMEbIu2fUfiYb9cUVHBC8oe4QNs/RWKqPx63qobIVGrVXbodA",
	"i7MxSN6YHR6MNkZC+2ZFlb9lh5cRvUSPsgT+hanMu66GnAbHq8GNw/rih9e8XWmd1peA7OV/f0HE3wrx",
	"V0Em02td65hOXMZPjByCoxmUQQ5Lu3Db2DOKA+2BCghk4Ph5scgZB5LETmqpUiJl9ppks9m4OcBYyY8J",
	"sREoMnqEGBsHYONpBg5M3opQNvnyOkByYHj8Qf3YeA4S/A3xtDWbi7PX8sREKq8EqDvh9/opMD8ftixH",
	"fyL2aMgs3RHCG9pR+pDYneRhaL80E0etqx3T7t7XY2hQuGjnh9bzDm1sY6a+0cpvAUAnLNAU43Bu2F53",
	"qb1F9jeURrNOm6tzPptvgAU7fBClzwDm+vHY+s7Eu+5+GfWV2wdd7fsagRkT04WGxfsRyn4cVEEOaJgm",
	"rS08uYjFrY19Dajvzny3wIEmD9nCmLuPgtNTCUumNDQRJLMt+JDo/UbxLoWGZMGk0gkGr6LLM42+V+gW",
	"fW+axve59ummrRfAsrhM4bQXsE0ylldxart5f3xlpn1bRxJUNb+ALVozQNMVmWN9i2jOw46pbVrMzgW/",
	"sQt+Q+9sveN4yTQ1E0shdGeOL4SrOhprlzBFGDDGHH2qDaJ0h3rBXe8V5Dp26yHYMVHFmZ3ZXssZjJ/1",
	"hCnzY++y8wMohnW7HSm6lsDl27kKhmfSxlthOigP0U/RHpABWpYs23SiWXbUQW+HXstl9bcDe4eyk3qw",
	"PRgIIlexLEAJPvpmSRoYZ7bQBw/XdjAKM+edO52BQginYsqXqeojyrA21lLZh6tzoPmPsP2HaYvLmVxN",
	"J7cLfsVw7Ubcg+t3NXmjeMZTHRsMacWyr4lyWpZSXNI8cSHCIdaU4tKxJjb3EcV7VnXxQNT565M37xz4",
	"V9NJmgOV1m7auSpsV34xqzJWnZADAuLL4Bi3yNu61hALiF9fRQzDiusVuJIjgS1ntJhjLiteTcg4EEUX",
	"ZlzED5f3Bg1ddNsucUeUG8o6yN2EXmyMux3XppeU5T7m4aEdOAjGxY27Zx/VCuEAt46PB5Z+cqfqpifd",
	"celouGuPTgrn2lEUpbB1fxQRvJthaExIDKUgqxZ0azjI+sN95cSrIjHil6icpfH4GJ8rwxzcnn6YxgQb",
	"DxijZsSKDRym8YoFY5lmaoSD2AEymCOKTH+Xfwh3c+EKNlac/V4BYRlwbT5JlMqOoOIleRcp7W+nxnbo",
	"z+UGttHVZvjb2Bhh7YHujodA7DYwwrOWHrivaofTL7QOY5gfgnDyNY5swxl7W+KO41bHH46bbd7Lqn1m",
	"EtZX7Os/wxi2Fs/+4o4+PubKRwzMES3WOLhbnAzvFKb3NfaIZktAcMPNYGqD9rkSkWEqvqbc1l4z/SwO",
	"XW8FNmZgeq2FxDtPKh6rYypZSPEHxD3ZhSFUJAnaoRLNRex9ELlL0lWiddynqarp8RvCMcjaQ5ZcGKlq",
	"H6kPSDhyeXCIhEUEfCSVcsvWtk5cK5EjLhxh8tXMjt8Ih4O5l7CW0/WcxiosGIPKwHTSHFe2Yr5aEN/Z",
	"U8GFpxveC04+67bMXhQqQTY3FfqXUm9oHH1ZLJ9Bygqax62kDLHfvhaZsSWzxfYqBUE1NzeQrVJquchV",
	"xLMHwg1qThfkcBpUZnHUyNglU2yeA7Y4si3mVOGuVcf16y5mecD1SmHzJyOaryqeScj0SlnEKkFqAxZd",
	"ufqQZQ56DcDJIbY7ekEe4vGSYpfwyGDR2SKT46MXGJi1fxzGNjtXVXOXXslQsfyHUyxxPsbzNTuG2aTc",
	"qAfRS2u2FPKwCtshTbbrGFnClk7r7ZelgnK6hHheQ7EHJtsXqYlBww5eeGbreCotxZYwHZ8fNDX6aSBJ",
	"06g/CwZJRVEwjSfHWhAlCsNPTak2O6kfzhYFddVWPFz+I57lldZtgK7DfL8BYruXx1aNJ65vaQFttE4J",
	"tXc7c9acsjuFeEBO/Q1xLD9TV52xuDFzmaWjSYeH7gtSSsY1OlGVXiR/I+mKSpoa9XcwBG4y/+ZZpORO",
	"u8oGvx7g9453CQrkZRz1coDtvTXh+pKHXPCkMBole9QkRQdSOXjoGE/v8hq9m923e+ixBqgZJRlkt6rF",
	"bjTQ1LdiPL5jwFuyYr2ea/HjtVd275xZyTh70MpQ6Jf3b5yVUQgZqxfSiLuzOCRoyeASM83iRDJj3pIW",
	"Mh9FhdtA/+eesjQeQG2WeVmOOQLfVSzP/tFc8uhULZOUp6voGcfcdPy1qZtaL9nKcbQ8xYpyDnl0OLtn",
	"/ur31sju/08xdp6C8ZFtu9XI7HI7i2sAb4PpgfITGvQynZsJQqy2s97rNMl8KTKC8zS1EBou6xdYCyoz",
	"/V6B0rEa7vjBpnhgLMv4BbYwEAGeoVV9QH6w7x6sgLSuaqM1y4oqt9d+IVuCdEHWqswFzabEjHP++uQN",
	"sbPaPrY+tS1MtERjrr2KTgwjKJwyLt3PVzuMJySPH2d3hqRZtdJYOUFpWpSxuyamxblvgBdawrgumnkh",
	"dg7IK2thK2+/2UkMPyyYLIxlWo9mdTzyhPmP1jRdoena0ibDLD++opbnShWUiq6LWda1T1DuDNyuqJat",
	"qTUlwvgXa6ZsuXu4hPb1lvqul3Od/HWX9vJkxbnllKiO3nUX8SZo98DZw3sf+o1C1kH8NQ0XJSqZwnUL",
	"jJ1hr2gxgW61sl6NaHuvti7p6J8xSSkXnKV4lT8osF+D7ErnjzkXGVH1oBuW8iLuJDQiXNEaaXXKkcPi",
	"YNU0rwgd4vqB2eCrIarlDvunxhrtK6rJErRymg2yqa+D5+IljCtwtWzwFYVATwrZOmtCDRk9vkzqMPc1",
	"2QiT3QcM4O/Nt7fOPcL8zwvG0RByaHOppjaigZW9tbGemCZLAcqtp305XX0wfQ7wgnYGm08HvhI4jmGP",
	"asyy7blkf6gTf0rpTgVN25emLbHphfXPrcR6O+lJWbpJo3fLawrHKvkNIjhy2pT4cH+A3Hr8cLQd7LYz",
	"vQD3U8NocImHk1DiPtxjjLooYqe66SXNK8tR2ILYtJ7ohUjGI2C8YRyaOvWRDSKNbglIGJTXgX4qlVRb",
	"E3CUTjsHmuOJZEyhKe1CtLcdqkNgRAmu0c8xTMamnuOA4qgbNIYb5du6PL7h7sCYeInvcjhE9qszolXl",
	"jKgMM4Q79RpjisMobl/ptL0B9MWgbxPZ7lpSKznX2YmGrn6lImZvvt5AWtkDd2GLxNCyJCnepQ72i2hE",
	"kynjPBXzPJL79qr+GBRBxWzu+Rb/jZXuGUaJOxG/dk6WP/7Gjtc2WNsj9cxNw0yJYssbkrnpf6d0zsWy",
	"Dcj9BhR2ynjIMjHpfm3UZngbuFcUyirW+rIupiEJXyHblnb318zaMomKPOqUNsWOdzvlw2WLp6j6B5IR",
	"3zd1KKjdXewZw1BKYjqYQUu1u4ehKWmKPvQF09Yajo1g8xlsjWP7AFg0vjKUw2BTGMznXu9xdlHPysSx",
	"dyLUJ8f0AfrRZ96RkjJ3gNZIbB+zLke3nzU9JnuvIXB3ES7zFQeJraRX/G03h/Qyn4Pcd1uj62D8NfDm",
	"QB7PTLDC8hK4K7HczmkcnVm1WECq2eWeTPP/MBZrk8U89TatrUsfJJ6zOlPHvxN3TVO7AWhXIvhOeIJa",
	"E7cGZyjP9AK2DxRpcUO0aNjUM+pN7hciBrAOR2JYRKhY9N864S4gy1TNGYgFf9pmu0NTAmmwWmud7hWr",
	"eDVqLs+ShDo7qy4nNVQgVsSs+FFzma7XupmDKRlDyej9eonDu9crLE+p6krb9UNwQTKFcda6ZcfW7n4j",
	"3guo407+piMo/5u/QmNnsQ8MNvVkMcq3pjLzLaJmq7eIk4H0rm7CtM1LZ3GgF/XMrMmN6OcMR6oDYC5M",
	"mgvF+DIZSplqpyPUsfwHyh66YIAAC1EiXAuQro609u83Jlr4XIpdcOxChXtt5CZIUIPF4yxwgzdk3zdX",
	"gLEkErWvd7oDpXCBREJBDXQyuKg7POcuZL+0332SrC+J0ylAFRnX82uy96atz4phqofEkOsXxO2W+5Nv",
	"b+IvMM5tmX4Vu7XLDSrDSFIpRValdoMOBQO8XzX6TvwOVRK18tP+KnsGW451It4EVxkuYDuzRlO6orwp",
	"2NEWa1ut364huHjXofadulJxgzVf2gUs7wTOP9MTmk5KIfJkIHR02r983JWBC5ZeQEbM3uHPkwcqtpKH",
	"GLGozwbWq62vT1+WwCF7dECI8aWKUm/9MUG7+FZncv5A75p/g7Nmla0H4Jy0g488ngph38O9pX7zw+zW",
	"avaB+FtOZQfZc614wwdUG11H6hePfXopErjv1pRtmMpCEbNSbnhXbpR89x21COuHtxz2+D8XLa/Olpfp",
	"BOuFhDv27oIo5TW9u/79jbHLw3WgVqsU9Nc5mgAt3A7gfgzim9BEH7nDEQU9HxNRiBfBMN0xpGERghVk",
	"CIJKfjv6jUhYuMe5Hz/GCR4/nrqmvz1pfzbe1+PHUcm8t2BG64UnN2+MY/4xdLhrDzAH8gg69KhYnu1j",
	"jFZWSFPjEfMefnX5M39KlclfrYvcF1VXcO86YdQuERAxkbW2Jg+mCvI9RqR6uG6RxA7cbNJKMr3FK0ze",
	"o2K/Rq+G/1AHYdyzgXUiuMtDtk9Qu7SkJmTTvBr8g7APfxVmr8fAusZi7a83tChzcILy7YP5X+Hp355l",
	"h0+P/jr/2+HzwxSePX9xeEhfPKNHL54ewZO/PX92CEeLb17Mn2RPnj2ZP3vy7JvnL9Knz47mz7558dcH",
	"/sleC2jzHO7/xlKsycm70+TcANvghJasfqPBsLEv60hTlETjk+STY//T//QSdpCKohne/zpxOWqTldal",
	"Op7N1uv1QdhltkQfLdGiSlczP0+/Nv670zp/xt57QIra1AjDCkhUxwon+O3967NzcvLu9KBhmMnx5PDg",
	"8OAIqyeXwGnJJseTp/gTSs8K6T5zzDY5/nw1ncxWQHO9cn8UoCVL/Se1psslyANX39L8dPlk5o/fZ5+d",
	"f3q169ssLHU2+9xy47M9PbGMx+yzv32yu3XrUocLXwQdRkIxPKV9/Wn2Gf3Bwd/bYHzWG5ZdzXz4yfVw",
	"r6jMPjfPGl1ZKcwhFjqy+VQ0eAVpavx1fO1R2V+N4Pk0bqbar2DVXHSaGe4xvV7WTzwFt/WPP/TMLzsQ",
	"8SNFHidvzTT8NHmtylvtG4X+4TB58enz0fTo8OovRmG7P58/vRoZA25epyRntTYe2fBT54nrJ4eH/83e",
	"9nx2zRXvtLlbx2SRIrff0Yz4FEOc++j+5j7lGIE3ipPYjeFqOnl+n6s/5YblaU6wZXD5pk/6X/gFF2vu",
	"W5pdvCoKKrdejFVLKfiH23CvoEuFHphkl1TD5BO6+LEz9gHlgo+oXlu54MuwX5XLfSmXL+PJ3CfXFPAv",
	"f8Vf1emXpk7PrLobr06dKWez2Gf23Y7GwuuVY11CNJ0eE9vprsfUuhr2B9C9t+Emt1Qxf9ozcf+95eTZ",
	"4bP7g6BdyvBH2JK3QpPv8djrC5XZceKzyxLqeEZZ1mNyq/5B6e9Ett2BoUItS5d5GrFL5owbkPu7S/9F",
	"i97bbRewJfYo2If83dulbXvo6pY64It9Zu6rDvmqQ6Sd/un9TX8G8pKlQM6hKIWkkuVb8guv7w3d3K3L",
	"smiaXVv0ezrNeCOpyGAJPHEKK5mLbOvr47QGvAAbmu4ZKrPP7SKXNvw1GJZ6hb/XD8j0gZ5vyemrngVj",
	"u3U17XdbbNrxGCM+YRfEnZ5hVxcNOGO72NwsZCk0sVjI3KK+Kp6viudWxsto4YnZL1Fvwgdyunvy1F+g",
	"jV0xp7o/9Rif408V1/+yr3Z/VQlfVcLNVcIPEBFGlFqnJCJMd5NIb19BYOZVFqY32yJGxu9wzaucSqJg",
	"bJjiBEd0wYn70BL37aRFcWV9NMoJbJjClzsiBLtbv+2rivuq4r6gU6v9iqZtiFzb07mAbUHL2r9Rq0pn",
	"Ym0Lz0S1Itafpbkr4IYl1epMDC2IH6C54ER+djf68q1ZwiXLjBmnWQHGpKp1nens01abvFkzQvPw3ZJx",
	"nABVBc5iKxXS4OqAglRw+0BU56zNQfbW+oQxJft7BajRHG4cjJNp67DFkTFSF/DW9lf/bORqRyy9fuWp",
	"9fdsTZlOFkK6m0OIoX4Whgaaz1yJhc6v9iJ08GOQoRH/dVYX/41+7OaWxL661A/fqEkeC5OxkFJ1GtaH",
	"TwbhWE/NEbHJLTqezTCpfiWUnk2upp87eUfhx081jj/X+6vD9dWnq/8fAAD//y75J4KnrAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
