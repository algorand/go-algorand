// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
