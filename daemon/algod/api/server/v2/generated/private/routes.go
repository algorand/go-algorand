// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
