// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAAA//+CNiMHGbAAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
