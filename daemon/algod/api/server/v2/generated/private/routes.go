// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"fbr6/wEAAP//B2Upzp+zAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
