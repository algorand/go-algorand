// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"g0v9UgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
