// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by id
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info by id
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
