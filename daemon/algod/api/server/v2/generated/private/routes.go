// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"2bjJl4UAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
