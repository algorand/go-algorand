// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationID(ctx echo.Context) error
	// Delete a given participation key by id
	// (DELETE /v2/participation/{participationid})
	DeleteParticipationKeyByID(ctx echo.Context, participationid string) error
	// Get participation key info by id
	// (GET /v2/participation/{participationid})
	GetParticipationKeyByID(ctx echo.Context, participationid string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationID converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationID(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participationid" -------------
	var participationid string

	err = runtime.BindStyledParameter("simple", false, "participationid", ctx.Param("participationid"), &participationid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participationid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationid)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participationid" -------------
	var participationid string

	err = runtime.BindStyledParameter("simple", false, "participationid", ctx.Param("participationid"), &participationid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participationid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationid)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationID, m...)
	router.DELETE("/v2/participation/:participationid", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participationid", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
