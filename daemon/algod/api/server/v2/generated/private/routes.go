// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
