// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by id
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info by id
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"P9U0vq73GUfrm083/z8AAP//u1eVaHShAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
