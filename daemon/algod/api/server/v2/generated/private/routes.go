// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
