// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
