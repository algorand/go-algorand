// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
