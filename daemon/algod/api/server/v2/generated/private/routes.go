// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by id
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info by id
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"MeHH9zWNP9R7j6P19fvr/x8AAP//Xlr8usSkAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
