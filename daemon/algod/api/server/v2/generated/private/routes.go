// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
