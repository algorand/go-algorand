// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XPcNpLov4I3u1X+eMMZ+Su7VlVqn2I7iV4cx2Upubu1fAmG7JlBRAIMAUqa+PS/",
	"X3UDIEESnBnJWt+ldn+yNQQbjUZ/obvR/DhJVVEqCdLoyeHHSckrXoCBiv7iaapqaRKR4V8Z6LQSpRFK",
	"Tg79M6ZNJeRqMp0I/LXkZj2ZTiQvoB2D708nFfxWiwqyyaGpaphOdLqGgiNgsylxdAPpKlmpxIE4siCO",
	"X06utzzgWVaB1kMsf5D5hgmZ5nUGzFRcap7iI80uhVkzsxaauZeZkExJYGrJzLozmC0F5Jme+UX+VkO1",
	"CVbpJh9f0nWLYlKpHIZ4vlDFQkjwWEGDVLMhzCiWwZIGrblhOAPi6gcaxTTwKl2zpap2oGqRCPEFWReT",
	"w/cTDTKDinYrBXFB/11WAL9DYni1AjP5MI0tbmmgSowoIks7dtSvQNe50YzG0hpX4gIkw7dm7PtaG7YA",
	"xiV79/UL9uTJk+e4kIIbA5ljstFVtbOHa7KvTw4nGTfgHw95jecrVXGZJc34d1+/oPlP3AL3HcW1hriw",
	"HOETdvxybAH+xQgLCWlgRfvQ4X58IyIU7c8LWKoK9twTO/hONyWc/390V1Ju0nWphDSRfWH0lNnHUR0W",
	"vL5NhzUIdMaXSKkKgb4/SJ5/+Pho+ujg+k/vj5K/uz+fPbnec/kvGrg7KBAdmNZVBTLdJKsKOEnLmssh",
	"Pd45ftBrVecZW/ML2nxekKp37zJ816rOC57XyCcirdRRvlKaccdGGSx5nRvmJ2a1zFFNITTH7UxoVlbq",
	"QmSQTVH7Xq5FumYp1xYEjWOXIs+RB2sN2RivxVe3RZiuQ5IgXreiBy3ofy8x2nXtoARckTZI0lxpSIza",
	"YZ68xeEyY6FBaW2VvpmxYqdrYDQ5PrDGlmgnkafzfMMM7WvGuGacedM0ZWLJNqpml7Q5uTin991qkGoF",
	"Q6LR5nTsKArvGPkGxIgQb6FUDlwS8bzcDUkml2JVV6DZ5RrM2tm8CnSppAamFr9CanDb///JD2+Yqtj3",
	"oDVfwVuenjOQqcrG99hNGrPgv2qFG17oVcnT87i5zkUhIih/z69EURdM1sUCKtwvbx+MYhWYupJjCFmI",
	"O/is4FfDSU+rWqa0ue20HUcNWUnoMuebGTtesoJffXkwdehoxvOclSAzIVfMXMlRJw3n3o1eUqlaZnv4",
	"MAY3LLCauoRULAVkrIGyBRM3zS58hLwZPq1nFaDjgYyi08yyAx0JVxGeQdHFJ6zkKwhYZsZ+dJqLnhp1",
	"DrJRcGyxoUdlBRdC1bp5aQRHmnq7ey2VgaSsYCkiPHbiyIHaw45x6rVwDk6qpOFCQoaal5BWBqwmGsUp",
	"mHD7YWZoohdcwxdPxwx4+3TP3V+q/q5v3fG9dpsGJVYkI3YRnzqBjbtNnff3OPyFc2uxSuzPg40Uq1M0",
	"JUuRk5n5FffPk6HWpAQ6hPCGR4uV5Kau4PBMPsS/WMJODJcZrzL8pbA/fV/nRpyIFf6U259eq5VIT8Rq",
	"hJgNrtHTFL1W2H8QXlwdI7p1zu0aYwLWDLiwrIoS1bgIRrESKuQeWjvhh9pAlVARzDE+CKfdLlzmKnqq",
	"ea3UeV2GFE87x+bFhh2/HJvdwryp5Bw1Z+3w2HN65Y9CN33DXDWcNoLk6OaWHAeew6YCxJanS/rnakkM",
	"z5fV7/hPWeaxTUcJc54ARS1cNOOd+w1/oo22hxaEIlLaqTnZ98OPAUJ/rmA5OZz8ad6Gcub2qZ47uDjj",
	"9XRy1MK5+5naN+36eiet9jET0u4ODZ3aQ+vd44NQo5iQJ93D4atcpee3wqGsUNCMsPu4QDhDSSHwbA08",
	"g4pl3PBZe+qzjuAIv9OL39J7dIyDKmKDf6D/8JzhY5RCbrx/ib610OhlqiASlqFLag2dnQkHkKusWGG9",
	"UIbe442wfNFObi1Io/LfO7J86EOL7M4r6/gyesMvApfeHmuPFqq6Hb/0GEGy9rDOOEJt3HNceXdnaWhd",
	"Jo4+EYffDugBauOjQ7UaUqgPPkarDhVODP8HUEEj1LugQhfQXVNBFaXI4Q7kdc31ergI9MCePGYn3x49",
	"e/T458fPvkAXoqzUquIFW2wMaHbf2RWmzSaHB8OVkYKvcxOH/sVTf8Trwt1JIUK4gb2PRJ0CagZLMWYD",
	"Gojdy2pT1fIOSAhVpaqI30CsY1Sq8uQCKh11bt66EcyNQD1kDwa93y227JJr59dAxmqZQTWLUR4PgmTS",
	"DRR6l6GwoE+vZEsbB5BXFd8MdsCuN7I6N+8+e9Ilvj9+aHTkEnMlWQaLehXaKLasVME4y+hFUohvVAYn",
	"hpta34EWaIG1yOBGhCjwhaoN40yqDAUaB8f1w0iwlaI8FJwyocoxa2t/FoDue8rr1dowdCtVbGvbFxOe",
	"2k1JyFbokbNpE1Swo+x0NpCXV8CzDVsASKYW7gDojqa0SE5xI+NTQk47tWg1h5YOXmWlUtAassTlv3ai",
	"5sfZXTZb6ESIE8LNLEwrtuTVLZE1yvB8B6I0JoZu4064U/MQ6/2m37aB/cnDbeQVHoItF6DvgtKdg4Ex",
	"Eu5Jkwuo6PT4D90/P8ltt68uR3I7zgKfigLFl0kulYZUyUxHgeVcm2SX2OKgjpuAKwgkJSapBHgkgvGa",
	"a2NjCEJm5DJadUPz0Ds0xTjCoxYFIf/kjckQdop6UupaN5ZF12WpKgNZbA0SrrbM9QaumrnUMoDdmC+j",
	"WK1hF+QxKgXwHbHsSiyBuPEBAB9kGy6O8gVoBzZRUnaQaAmxDZETPyqgbhjfHkEEzxfNm8Q4Qvc4pwmq",
	"TyfaqLJE+TNJLZv3xsh0YkcfmR/bsUPm4qbV65kCnN14nBzml5ayNrOx5ujbEWRW8HO0TeSp2VjCEGcU",
	"xkQLmUKyjfNRLE9wVCgCO4R0xEl2udNgtp5w9Pg3ynSjTLBjF8YWPOKxv7Uh+tM2OnQHTstLMFzkunFM",
	"mjxAOwulDPrlHOhFVpCCNPkGeXUpqsJm3cicaf+bdXsyN4vNL7XiJzNWwSWvMj9ieFoKFpMImcFVXLvy",
	"Tmwkgysm4kgvm5mFYanPickQwCwq6DbLmOZKC7lKbPpyl1Frso73NKulcAbsEiqH1xIqZ3aNT98lRvkU",
	"3zY8tpHCBWduQwR8NT6tRc7ulo5leekBCmIh0kpxm7xFovYWyCooOGJHaURn9sfn3EbsF/a5zyX7GH7I",
	"u3G4nl9HNUzDopdr2ixUtX0ihlyPR1vQMLaQVa4WPE/Q4Yckg9zsDL3hQQJe0ki01yodvt5F+ezsfZ6d",
	"nX1gr3EsnS2AncNmTil1lq65XEGb5wjlxZ4a4ArSOjQtPTLudRB0sdIu9t2j4HRSKpUnzZG3n5cZmJs+",
	"3c9Feg4ZQ31FIuas4L3uDuEk7D6yuG4yV5frjXchyxIkZA9mjB1JBkVpNi6+0vN4epPLe2bb/Fc0a1ZT",
	"Ep1LRoucncl4aMOm4D9RpjyY7ZJka9I+cSoLZPtE5mok/1LxS8ogIbiofG6Njp7Qm4HpG1j0gKksFvvE",
	"EL6hQi3e2WWR0XGktW66XhSCqrWCYVPUnD6BPjzhCzNj7JR0Bx6wNFxAxXMqRdE+cCw0KwQe1HWdpgDZ",
	"4ZlMOpikqnAT32//a9XSWX1w8ATYwYP+O9qgu+rOklYG+u9+yQ6m9hGRi33JziZnkwGkCgp1AZk9j4V8",
	"bd/aCfb/NHDP5A8DxcwKvrEnOS+LTNfLpUiFJXquUK+vVM/rlIqeQIXoAZpZzYSZkikjipK3bvelFcBJ",
	"1Hu6i5hPBCr66WhKUdv5tGmXdzSDK57iKjkpmY31CBo+GzpBRpVJCCAagt4yo0sC6I4ev6XcDfW5DUBs",
	"x++0F4LokCNg19lu331AjCgG+4j/ESsV7rpwBVK+iiYX2gyQdOEIygA1DBkxOjP2H6pmKSf5LWsDzdlO",
	"VXRgooM0zkA21s/pPLWWQpBDATZCRE8ePuwv/OFDt+dCsyVc+qpCHNgnx8OHVgiUNp8sAT3WvDqOOFAU",
	"mEdrGqkEX3O9nu0M0hPcvWLzAejjl35CEiatycTgwiullnewWpFdRX0WuIqt1O0chdvuaVbyzah7XSKC",
	"kXIyqM5ziuWrZY8jmdN/a1EiyLb0ZWOgUzb7n/f/dvj+KPk7T34/SJ7/3/mHj0+vHzwc/Pj4+ssv/6v7",
	"05PrLx/87c8x50UbsYjnfb7leo2YOs1xJY+lzdyi50kBu42LA6jl58a7x2K4mZ7ywZL2Ybq3sQ0R6ErQ",
	"ZhPPnbS1IXdgadr6K2IprsNDtC0NQwoHBSnOo3deVi/HzjVsO/Y0gbEQ3gJWQsYjoIRAHGAJlRYal+zQ",
	"XGyCoFsIH3XmAj3aJVQg01g4sZ8T5zYySLPvs2/BnvTLF07qssw3d7FTBIhV4I6EuhPN1vapWoZFzk5R",
	"6I02UAwTQvbVn0cOq+98MGmwK0rmQkJSKAmb6L0eIeF7ehjfU7QiIy+TPR97tx9s6+DfQ6s7z157+In0",
	"JeEMrMbbpuT6Dja/D7eXCwzLu+kgCnnJOEtzQZkOJbWp6tScSU6x1N5JqccWPkI8Hl1/4YfEw/mRaLsD",
	"dSa5Rho2EdZojngJESXyNYAPsut6tQLdOzmxJcCZdKOEpLgYzUUHz8RuWAkVJfNndiQeFpY8p2TA71Ap",
	"tqhN1zujKlR7+LGJSZyGqeWZ5IblwLVh3wt5ekXgfBDE84wEc6mq84YKI0EckKCFTuJ27xv7lMyfW/7a",
	"mUK6EmQfe/Pwue21xz1WgugwP37pTi7HL8k9bVOSA9w/W56qEDKJMhkalkJIKrXv8Ra7j062Z6AHbXLT",
	"7fqZNFcSGemC5yLj5nbs0FdxA1m00tHjms5G9NIOfq0fYhGRlUpKnp5TudBkJcy6XsxSVcz9iW2+Us3p",
	"bZ5xKJSkZ9mcl2KORnZ+8WiH9/wJ+opF1NX1dOK0jr7zwkQHOLag/pxNws//bRS7982rUzZ3O6Xv2QJi",
	"CzooJI0cst193U68BxdvL/zZivEzeSZfwlJIgc8Pz2TGDZ8vuBapntcaqq94zmUKs5Vih8yBfMkNpzBh",
	"L/kxdieXQrgOm7Je5CJl56EpbkVzLHZ+dvYeGeTs7MOgPGBoON1U8XwETZBcCrNWtUlcAmk81Kg7jqwL",
	"3W+bdcocbMuRLkHl4I/kSMpSJ0HQPL78ssxx+QEbakYvUXkp00ZVXgmiZnRhT9zfN8oVSFT80t9CqjVo",
	"9kvBy/dCmg8scSG6o7KkiDyFxH9xugZ5clPC/mH1FsUWWCwUQwu3DtWNS44J6Il9y+eZdJxy+IhIR2NQ",
	"K7Rpg9vSCUF9q3Lc3FuTKYARpU5t1gnKVHRVGlmL5CG4O85XqAub05BYSWQ+d5dxASxdQ3oOGeVIKY0w",
	"7bzuK1GcZfEiK7S9fmgri+mOjD/91GXGne3lctO/C6DBGH9D4x2cw+ZUtVdsblL8fz2duLxfgjwzJiAl",
	"0iMwAmrZFRefO+xtvksDU26uLJlNf9mibc8Whw1f+HfGBchapjsQnhhTNGTYwu8lryKEsMw/QoJbLBTh",
	"fRLrR5NtvDIiFWVzNWaP9N3bzjsIZJdSj6pxtexr64EyjWpvOziJxyjOzt4DPsH9QBnqF335mWzw1ebz",
	"GbWwcIy7yCFIPGsn2bwiZ8cv297JH0MtziVQydaaejS6FAnN9tpVUIiLtm6CImP7GLideWvkIh9lEd0M",
	"lcB5c7jgo8nC0btjx0G9UnAlubkZ5hVbXximzS1B2x3E3yDz18b8XbHJ9Eb3vqYTV0Ib2w4lybpnkMOK",
	"u9wYFef6ugyL2j0dbBDi8cNymQsJLImVPnGtVSpsuUSry90cgM7fQ8ZsYIXtDSHGxgHalFQgwOyNCmVT",
	"rm6CpARBWQjuYVM6Ivgbdgfl2zYtzq3c6f4NdUcrRNP2GqXdxmH0ZzqJqqQxz7wzitkhCxgcZWIsiqpp",
	"GA8ZRl005EDmOOlo1uQ8FiVDrwKIDU/8a4G7zu6LJRr5B0FuqYIVnr3b8ypKqw/AfN6YwYUykCxFpU1C",
	"R+Xo8nDQ15qcwa9xaFz9dEjFbJ8HkcW1D017DpskE3kd320373cvcdo3zblF14tz2JCRAZ6u2YL6kqAV",
	"6kyPY7ZMbcv/ti74tV3wa35n692Pl3AoTlwpZXpz/EG4qqdPtglThAFjzDHctVGSblEvQcHSULcEpVK2",
	"rIpKsGbbTusDYbpx0deo5rWQomsJHN2tq7C1gbb8L2jrMbyKMiIDvCxFdtU7O1uoI9lNcuBv4Khbjz+S",
	"sZs0wHZQIDgnx6qdK/Bnfbulgc20DVoGFaG7KdOvQw0UQjiV0L692JBQyNpUsLeLVqfA8+9g8xOOpeVM",
	"rqeTTzvyx2jtIO6g9dtme6N0phiyPQJ2Imc3JDkvy0pd8Dxxt/3GWLNSF441abi/HPiZVV38+H366uj1",
	"W4c+FbgCr1xd57ZV0bjyD7MqPBHHijtPg8gIeav+7GwdsWDzmyvXYTDF1+J2fDnUYo65rHg1Bi4URRdc",
	"WcZTWTtDJWH97q0ks1MA/KmRubAa+E5FfiBhcQ5td3iHXgjn2lLQUNieSZop2a+BQjeOTpnELgXf4C7a",
	"wOxQQci6SFAEEp2LNB46kAuNUiTrgu7BbQwwGjziECLEWoyEz2UtAlg4TO+RKeohGcwRJSaFdbbQbqFc",
	"s8tait9qYCIDafBR5WoiO8KCsuHL/IcmLX6lwAF2twoa8J9i5xHUmIUnJLYb+TDKG7nQ4g99fqFNeBp/",
	"CIJzN0jShDMOzNKWBIvjD8fNNtO97kZrw96UQx2EjGH7GO1ujOlDB2uL6Mgc0UaXoxr7aFxb01WR/fV0",
	"q5YJ3VAh2/JdnmsVAVPLSy5t3zp8z9LQva3BntvxrUtV0f1KDdEMtdDJslK/Q/w0ucSNipRpOlKSy0Zv",
	"zyL31vpKtImMtB1JPX1DPEZZe8ybCh6ybhJtRMKJy4PwNdWd+yATl5atbY+9Tuo2LhxhucXcwm+Fw+E8",
	"KFHJ+eWCx7q5oFODOB21iZJOOMwo5l/2u6Cb6xaO94KcSzNW2EuJJVRtLfXwAvwtHZQ/FstnkIqC5/Ho",
	"aEbU795Wy8RK2EaFtYagE54DZDu8Wi5y3QRtKqolzfGSHUyDXptuNzJxIbRY5EAjHk3bEka6FBdelHNF",
	"QQakWWsa/niP4etaZhVkZq0tYbVijRNp7z/5+PMCzCWAZAc07tFzdp8i71pcwAOkovNFJoePnlNJhv3j",
	"IGbsXEfSbXolI8Xyb06xxPmYUg8WBhopB3UWvSBr20iPq7At0mRf3UeWaKTTertlqeCSryCeUS124GTf",
	"pd2kwF2PLlTYyjLQplIbJkx8fjAc9dNIWRaqP4uGu05T2EJUplWB/NS2ubOTenC2oarr7OTx8g8pzVH6",
	"a1G9Q+vnDdJaWx5bNSWj3vACumSdMm7vkdPNLtd/wCnE2UgLHqgu4pNUIxvs7aZ7l92XSiYFyk72oC34",
	"C/gv2oFGGZ5HpzVed/UrV7aD3tfVQijJKGHrDmF5oJNuTeK6iq+T1zjVj+9eO8NQqCrWTqbVhk0FtakE",
	"XEQltl+41ngmjbnwlI85KF/VIs9+astNe1XlFZfpOhr/XOCLP7e9MBuyW6pHb+muuZSQR8FZWf7Zy3xE",
	"K/2q9p2nEHLPsf3qc7vc3uJaxLtoeqT8hEheYXKcIKRqt/6uKRzJVypjNE/bD6JlhOE1yqA71W81aBO7",
	"8kkPbK0TnbHRX7HNkRjIjKz9jNkrkohL55IbWVlR1Lm9MAXZCioXgKnLXPFsyhDO6auj18zOqt11f7qa",
	"R82ZVva6bWcVvbNV0DzmJvePx0qj9oezvWYEV60NdY/QhhdlrOoVR5z6AVRae8FF7ssPyPyE1Jmxl9by",
	"a29X7CTtNXPWTOd0DfEE/scYnq7JpHYM0DjL799VzHOlDtr/No1Km/4v9ua0Ub6xmO0rNmUK/Z5LoW0L",
	"c7iAbqFtU3XuXDpfeNtdXlVLaTklbp+23Iq4Ddk9cjax50NSUcx6hL+hmdGqrlK4aZO1E3oreg2z37Ft",
	"0PfXXshq2lr6T1OkXCopUroEGTRNb1B27dD3iZnucV+0f1z2Iu4kNCJc0T5xTemAo+Jo5zivCB3hhgGj",
	"4CluquUO+yd1CaaD4AqMdpoNsqnvBejOcUJqcP18qDN+oCfxON7PH0ZTG21HjxuyEZX/jbgrX+MzclWE",
	"K9k5F5Lutzuyueoge9Kibs0Gj3fCsJUC7dbTvdWo3+M7M7rZl8HVh5nv7kwwbAgZl21zFkNQRz6D4TIG",
	"OPYFjmUULm5/7pQa2kmPytJNGr2U2OxwrJvhKIEjUfDEhyED4jbwQ2hb2G1r6pHsKTIaXFDiAkqywwPG",
	"GOmS8QoPte6SH122tyn/6NUMISNovBYS2t7jEQORRk0CbQzJ68h7Oq24sS7gXjrtFHhOmZKYQtPGhY4+",
	"FVRvg4kktEY/x/g2tj0tRxRHM6B13LjcNC3PkbsDZ+IFfWvBEXLYoZK8KudEZVTU1etZGVMcqLh9t9eu",
	"ARiKwdAnsq+bilvJuYklGitCz4TG40ixyCNlLC+bh0HfVqqXW2zo31iPgvEVuMTarXvq0Is39i+397fJ",
	"ce8TLVa33JX2/Tvclp4MhHsU4/5XqFbCezuDdhNW8TTXaiiFr3wXbTpUNIXpXZ4lRRc9tLUNkbcfWsdb",
	"G09JNY4U8rxrb4xyq31tbHCsnCcdrT7jxpWWGs62NZqy/YhjEGwe0vZBth89igYGxnKPNvWIjwdv7+c3",
	"DLwwgr2VoD6pPUToO1+1wkouXOC7FZEhZV1927DicJ/Kl3aD+4twVWMEJLaSWxZ57SV7QypFBDssDdjB",
	"nucdktrbID1PUlVwx6QNTOgNSTsseth3ebQO4phaw3Cde29Ah7YjtN+H8K1eiHRNGBVns9hHnONF9fg6",
	"6RNLEH/tY6hNPps26LRRd/PGdv2nseiBPSGPBKp6NK1Fnu3a3E7Ysb3OTIG1nxdfPO1E7z7nheqfbUJ+",
	"KG7ubulNDH9/E4gwkbV2Jg+mCgKKe8QS3WuRyCG1i0vrSpgN1e54T1P8HK1L/gakaybvvs3RZEBdAs52",
	"/XCh6VUzuv3U0DfKdtcv0P0lV9BQH6VXV7woc3By8eW9xV/gyV+fZgdPHv1l8deDZwcpPH32/OCAP3/K",
	"Hz1/8gge//XZ0wN4tPzi+eJx9vjp48XTx0+/ePY8ffL00eLpF8//cs9/Rsci2n6i5t+p60By9PY4OaVW",
	"Iu3WlOI72Nh7xsjG/gYzT0kSoeAinxz6n/6fl7BZqorg06Tu14mL9E/WxpT6cD6/vLycha/MV9TZMzGq",
	"TtdzP8+wbdXb4yZAaxP+tKPNx4psGZJjhSN69u7VySk7ens8axlmcjg5mB3MHlGjkBIkL8XkcPKEfiLp",
	"WdO+zx2zTQ4/Xk8n8zXw3KzdHwWYSqT+kb7kqxVUM3eVG3+6eDz38Z35R5fkvt72rFtl4K6OBC8Edw/n",
	"HzutYbMQLt3Mm3/0FRjBI9v6fP6Rwkejv8+7n5OKj+mg+tFciex67ts4uTdcm+H5x7bv97WVoBxi0QHf",
	"j7AdTn0G6XMo2v6KQuNzj0J328Q3HHCc4c7jWy+aHujhZ6nf/5N+xPVD75NRjw8O/sk+fvP0hive6vN2",
	"zoiRXgxf8Yz5/BPN/ejzzX0s6TYIKj1mlfr1dPLsc67+WCLL85zRyKBiZLj1P8pzqS6lH4kWuC4KXm28",
	"GOuOUvBfNiA9z1ea+p9W4gIP/h+owW4s4TeiXOgrQzdWLvTppH8pl8+lXP4Y35R6fEMB/+Ov+F/q9I+m",
	"Tk+suttfnTpXzpY4zG17udbD8zcrh9cNux7vmE52xyF2n2KpEi4fuDIJCzZydbVJSavMxk18+yFffBV8",
	"PaCrs985oJ1b0t/BRu9S4KdrYL848InIfqESUUpQTJmq2C88z4Pf6HvS3rWfxfV9e51x51dtWwGNobUE",
	"8AWrVJjqmiijITsHf/HV0qCTxBzm/dtmdUsY/bK57ekVajDHgo8ODg5iBUN9nF2Mx2JMBcKXKsnhAvLh",
	"Vo8h0bv/uu07wKMfIhpeWw7P5hGu85/Nb24yj34WuXsX9ybYvVTynmGXXLhvOQS9b+yXqQph/BfDbSGR",
	"KzJsbET8K9MJgtz+EfpPNd5/vKbI11uUnV7XJlOXclxx0Q0knrsSXiqqbUISRjEPoNFUM+a/sJpv/DfM",
	"GaeSJlWbNmaEL/uWFr3e703TpZWQNAFJOc1ia9V5UAnqvgQ0VIInDrM39sNJPb0X/YCxxTEu9zGh/1Re",
	"GjoaW/fKt0Dp/D1Hlkd31X4YLiEKDcMeBng+d8UsvV9tyjn4sdvfPfLrvLn+FX3YD+bEnro4ih/URlHD",
	"qCTtVBOPfP8BCU51xm4T2yDb4XxOad610mY+QYXTDcCFDz80NP7od97T+vrD9X8HAAD//0LOYUXliwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
