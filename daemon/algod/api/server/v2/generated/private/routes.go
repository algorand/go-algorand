// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//9b4iFYqzAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
