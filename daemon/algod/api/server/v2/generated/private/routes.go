// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"pi+LAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
