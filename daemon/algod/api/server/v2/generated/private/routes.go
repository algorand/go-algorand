// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
