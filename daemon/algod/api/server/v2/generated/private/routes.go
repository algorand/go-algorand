// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
