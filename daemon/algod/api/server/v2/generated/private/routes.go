// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
