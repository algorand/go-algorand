// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
