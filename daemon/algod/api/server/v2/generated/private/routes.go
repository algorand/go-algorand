// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8XND4y+e857WN59v/n8AAAD//zjC5QEdjQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
