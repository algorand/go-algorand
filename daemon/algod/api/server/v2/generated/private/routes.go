// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
