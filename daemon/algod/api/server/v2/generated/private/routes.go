// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"DwAA//8COwPyxrEAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
