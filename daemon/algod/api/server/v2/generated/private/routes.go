// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9f3PbtrLoV8Ho3Jk0eaJkJ07PiWc697lx2uPXNM3Ebu97N85rIXIloSYBFgBtqX7+",
	"7m+wAEiQBCX5x3Vv5uSvxCKwWCx2F7uLxeJ6lIqiFBy4VqPD61FJJS1Ag8S/aJqKiuuEZeavDFQqWamZ",
	"4KND/40oLRlfjMYjZn4tqV6OxiNOC2jamP7jkYQ/KiYhGx1qWcF4pNIlFNQA1uvStK4hrZKFSByIIwvi",
	"5Hh0s+EDzTIJSvWx/Inna8J4mlcZEC0pVzQ1nxS5YnpJ9JIp4joTxongQMSc6GWrMZkzyDM18ZP8owK5",
	"DmbpBh+e0k2DYiJFDn08X4tixjh4rKBGql4QogXJYI6NllQTM4LB1TfUgiigMl2SuZBbULVIhPgCr4rR",
	"4ceRAp6BxNVKgV3if+cS4E9INJUL0KNP49jk5hpkolkRmdqJo74EVeVaEWyLc1ywS+DE9JqQHyulyQwI",
	"5eTDd6/JixcvXpmJFFRryByTDc6qGT2ck+0+OhxlVIP/3Oc1mi+EpDxL6vYfvnuN45+6Ce7aiioFcWE5",
	"Ml/IyfHQBHzHCAsxrmGB69DiftMjIhTNzzOYCwk7rolt/KCLEo7/l65KSnW6LAXjOrIuBL8S+zmqw4Lu",
	"m3RYjUCrfWkoJQ3Qj3vJq0/X++P9vZu/fTxK/tP9+fLFzY7Tf13D3UKBaMO0khJ4uk4WEihKy5LyPj0+",
	"OH5QS1HlGVnSS1x8WqCqd32J6WtV5yXNK8MnLJXiKF8IRahjowzmtMo18QOTiudGTRlojtsJU6SU4pJl",
	"kI2N9r1asnRJUqosCGxHrlieGx6sFGRDvBaf3QZhuglJYvC6Ez1wQv99idHMawslYIXaIElzoSDRYsv2",
	"5HccyjMSbijNXqVut1mRsyUQHNx8sJst0o4bns7zNdG4rhmhilDit6YxYXOyFhW5wsXJ2QX2d7MxVCuI",
	"IRouTmsfNcI7RL4eMSLEmwmRA+VIPC93fZLxOVtUEhS5WoJeuj1PgioFV0DE7HdItVn2/3X60zsiJPkR",
	"lKILeE/TCwI8FdnwGrtBYzv470qYBS/UoqTpRXy7zlnBIij/SFesqArCq2IG0qyX3x+0IBJ0JfkQQhbi",
	"Fj4r6Ko/6JmseIqL2wzbMtQMKzFV5nQ9ISdzUtDVN3tjh44iNM9JCTxjfEH0ig8aaWbs7eglUlQ828GG",
	"0WbBgl1TlZCyOYOM1FA2YOKG2YYP47fDp7GsAnQ8kEF06lG2oMNhFeEZI7rmCynpAgKWmZCfnebCr1pc",
	"AK8VHJmt8VMp4ZKJStWdBnDEoTeb11xoSEoJcxbhsVNHDqM9bBunXgtn4KSCa8o4ZEbzItJCg9VEgzgF",
	"A252Zvpb9Iwq+PpgaANvvu64+nPRXfWNK77TamOjxIpkZF80X53Axs2mVv8dnL9wbMUWif25t5BscWa2",
	"kjnLcZv53ayfJ0OlUAm0COE3HsUWnOpKwuE5f2b+Igk51ZRnVGbml8L+9GOVa3bKFuan3P70VixYesoW",
	"A8SscY16U9itsP8YeHF1rFdRp+GtEBdVGU4obXmlszU5OR5aZAvztox5VLuyoVdxtvKexm176FW9kANI",
	"DtKupKbhBawlGGxpOsd/VnPkJzqXf5p/yjKP0dQwsNtoMSjgggUf3G/mJyPyYH0CA4Wl1BB1itvn4XWA",
	"0L9JmI8OR3+bNpGSqf2qpg6uGfFmPDpq4Dz8SE1PO7+OI9N8Jozb1cGmY+sTPjw+BmoUEzRUOzh8m4v0",
	"4k44lFKUIDWz6zgzcPqSguDJEmgGkmRU00njVFk7a4DfseM/sR96SSAjW9xP+B+aE/PZSCHV3nwzpitT",
	"xogTQaApMxaf3UfsSKYBWqKCFNbII8Y4uxWWr5vBrYKuNepHR5ZPXWiR1Xlj7UqCPfwkzNQbr/FoJuTd",
	"+KXDCJw0vjChBmpt/ZqZt1cWm1Zl4ugTsadtgw6gJvzYV6shhbrgY7RqUeFU0/8CKigD9SGo0Ab00FQQ",
	"RclyeAB5XVK17E/CGDgvnpPTfx693H/+6/OXX5sdupRiIWlBZmsNinzl9hWi9DqHp/2ZoYKvch2H/vWB",
	"96DacLdSCBGuYe8iUWdgNIOlGLHxAoPdsVzLij8ACUFKISM2L7KOFqnIk0uQiolI+OK9a0FcC6OHrN3d",
	"+d1iS66oImZsdMcqnoGcxChv/Czc0jUUattGYUGfrXhDGweQSknXvRWw843Mzo27y5q0ie+te0VKkIle",
	"cZLBrFqEexSZS1EQSjLsiArxncjgVFNdqQfQAg2wBhmzECEKdCYqTSjhIjMCbRrH9cNALBODKBj70aHK",
	"0Uu7/8zAWMcprRZLTYxZKWJL23RMaGoXJcG9Qg24frXPblvZ4WycLJdAszWZAXAiZs6/cp4fTpJiWEb7",
	"ExennRq0ap+ghVcpRQpKQZa446WtqPl2dpX1Bjoh4ohwPQpRgsypvCOyWmiab0EU28TQrc0J55T2sd5t",
	"+E0L2B08XEYqjY9pucDYLka6c9AwRMIdaXIJEp2z/9L184PcdfmqcuDoxO3AZ6ww4ks45UJBKnimosBy",
	"qnSyTWxNo5aZYGYQSEpMUhHwQIDgLVXauuiMZ2gyWnWD42AfHGIY4cEdxUD+xW8mfdip0ZNcVareWVRV",
	"lkJqyGJz4LDaMNY7WNVjiXkAu96+tCCVgm2Qh6gUwHfEsjOxBKLaxYjqGFZ/chiON/vAOkrKFhINITYh",
	"cupbBdQNw8cDiBj/ou6JjMNUh3PqmPV4pLQoSyN/Oql43W+ITKe29ZH+uWnbZy6qG72eCTCja4+Tw/zK",
	"UtYeHCypse0QMinohdmb0FKzsYQ+zkYYE8V4CskmzjdieWpahSKwRUgHjGR3NBmM1hGODv9GmW6QCbas",
	"wtCEByz291RqlrISLYkfYP3g7n53gKjnTzLQlOWQkeADKnDUvXV/YoNDXZh3M7R2MkL76Pes0Mh0cqZw",
	"w2gjfwFrhejbU4ez4KziASzFCFQj3ZQTRNTHMs2GHDaBFU11vjbbnF7CmlyBBKKqWcG0tsdIbUNSizIJ",
	"AUQd1w0jutCBjdj7FdgllnGKoILp9ZdiPLJmy2b8zjqGS4sczmAqhcgn2yW+R4woBrs4HkekFGbVmTu1",
	"9EdbnpNaSDojBuNGtfJ8olpkxhmQ/yMqklKOBlilod4RhEQ1i9uvGcFsYPWYzFo6DYUghwKsXYlfnj3r",
	"TvzZM7fmTJE5XPmjftOwS45nz9BLei+UbgnXA3i8RtxOIrodPXqzUTgbrqtTJlu9ewd5l5V83wHuB0WZ",
	"Usoxrpn+vRVARzJXu8w95JElVcvtc0e4OwU0AtCxedt1l0LMHyhAFD/qQefEnd6YVmRecYtUpZw7gkkB",
	"PqAh5uP6OM+m8dmjnqrA3vj/JXUBp9G4OaOxDcyG3Hz+FDEpWbaKHcVlsIotipMxdKeeGN9jrUBPomYi",
	"Ih85jQd5kbupdXQHKcAItVqy0oBsTg7XGlpZR//3q38//HiU/CdN/txLXv2P6afrg5unz3o/Pr/55pv/",
	"1/7pxc03T//932KmtdJsFo/r/dMQWsyJ0/ErfsJtZH4upHXI1s7OE/PHx1tLgAxKvYyl+ZQSFOpGm65T",
	"6mWzqACdIEopxSXwMWETmHR1bLYA5aNJOdA5ppugUyH0DltRLQ+W3zxzBFQPJ7KTIovxD+OEWt5EaTZe",
	"R75+AOvFAiKyTU/vrSv7VczDHCknKGqtNBT9gJft+uuAuf/BG8s9oRI8ZxySQnBYR9OCGYcf8WOst93v",
	"Bjqj5THUt+tMtPDvoNUeZ5fFvC99cbUDBf++zth6gMXvwu3EOsPsMIzVQF4SStKcYSRHcKVllepzTtFX",
	"DNg1ck7iPeDh6MFr3yQerohEExyoc06VoWHtQUZj4HOI7FnfAfgggqoWC1C6YzXPAc65a8U4qTjTOFZh",
	"1iuxC1aCxMOKiW1Z0DWZ0xyDHX+CFGRW6bYdibue0izPXeDVDEPE/JxTbXSQ0uRHxs9WCM7ninie4aCv",
	"hLyoqRDfohbAQTGVxPX+9/Yrqn83/aXbCjCj2H72+uax9b7HPZZi4TA/OXY+1skxGtJNyLWH+6PF4QrG",
	"kyiTGcOoYBwz9Tq8Rb4y7oBnoKdN8Nat+jnXK24Y6ZLmLDPG013YoavierJopaPDNa2F6IRV/Fw/xc7D",
	"FyIpaXqBx6GjBdPLajZJRTH1vuV0IWo/c5pRKATHb9mUlmyqSkinl/tbDN176CsSUVc345HTOurBIzEO",
	"cGxC3THrgKb/Wwvy5Ps3Z2TqVko9sflWFnSQKBMJB7jrPq0TKzN5e1/AJpyd83N+DHPGmfl+eM4zqul0",
	"RhVL1bRSIL+lOeUpTBaCHBIH8phqes57Kn7wSg9mQztsymqWs5RchFtxI5o2TbsP4fz8o2GQ8/NPveOP",
	"/sbphorKqB0guWJ6KSqduDzURMIVlVkEdVXnISJkm0W+adQxcbAtR7o8Vwc/rqppWaokFynNE6Wphvj0",
	"yzI30w/YUBHshOkzRGkhvRI0mtFig+v7TjifS9Irn8RcKVDkt4KWHxnXn0hyXu3tvQByVJZvDcxTg8dv",
	"TtcYnlyX0Aoc7Zj41ACLBY1w4taggpWWNCnpAlR0+hpoiauPG3WBIco8J9gtpEmdPICgmgl4egwvgMXj",
	"1qldOLlT28tfKIpPAT/hEmIbo52ayP9d18uA+qfIDZPdebkCGNFVqvQyMbIdnZUyLO5Xpr5nsDA62R/H",
	"KLbgRgjclYwZkHQJ6QVkmB0ORanX41Z3f+LndjivOpiytyhsBhem+mKMbQakKjPqbADK192cSwVa+0TT",
	"D3AB6zPRZArfJsnyZjyyIYwsMTwzJKjIqcFmZJg1FFsHo7v47vTYYErLkixyMXPSXbPFYc0Xvs+wINsd",
	"8gGEOMYUNRk28HtJZYQQlvkHSHCHiRp492L92PSMeTOzO18kzON1P3FNGqvNnQCHszlb1t8LwCtZ4kqR",
	"GVWQEeFuE9mLOYEWqxRdwEDsKQxz7pjt2gqNIpBt+150pxPz7obW22+iKNvGiZlzlFPAfDGsgnHCzrm/",
	"H8lG0nEGE4KXhB3BZjmaSXXKgVU6VLbCzfbW4xBqcQYGyRuDw6PRpkho2Syp8hed8D6Yl+WdbIChw9H6",
	"cNswuD/dRle0MeqYGTeHSzpE/+Hs/JPgyDq49FXn3nud25XTeODWZuEXqsnGD6O2O2TWj0cuiyq2HIKj",
	"AZRBDgs7cdvYM4pD7YkKFsjg8dN8njMOJImdflOlRMrsTbVmm3FjgLGPnxFiY09kZwgxNg7QxhMiBEze",
	"iVA2+eI2SHJgeKREPWw8Wwr+hu1HDM1FeGd5b7WQ27qxr0kakRo311bsovbDZeNRVEENuTLtEx7bZAY9",
	"3y/GsEZR9QNI/TCVghzQbkhaeja5iIUVjfkDyJSnvlvg35Cv2NxYI0+DY0MJC6Y0NA6+kV0fsXrsQwGK",
	"16GEmA/PTpdybub3QYiak7GjO+QIp/noM7gUGpI5k0onGB2JTsE0+k6h3f2daRpXp+2DSXszmGVxbYrD",
	"XsA6yVhexfnVjfvDsRn2Xe2qqmp2AWvcNIGmSzLDm+zRdIUNQ9uMlo0Tfmsn/JY+2Hx3kwbT1AwsDbu0",
	"x/hM5KKjHzepgwgDxpijv2qDJN2gINHNPIZcxy4sBIajFc7MNJxsCtD0hCnzsDeZkwEWwzuJhRSdS+BT",
	"bJwFwzNaYxQzHVwE72dXD8gALUuWrTrhEgt10Kimt/KJrHPVowKurgO2hQJBaCSWwCfBh3fskgY2gL3S",
	"z8O5TXaijLEmQ4IECiEciilfkKZPKMPaWDVhG63OgOY/wPoX0xanM7oZj+4XXYnR2kHcQuv39fJG6YzH",
	"BtbbbgVLb0lyWpZSXNI8cTGoIdaU4tKxJjb3IatHVnXxSMfZm6O37x36xs3PgcqkNhUGZ4Xtys9mVhKM",
	"tTwgIL7ghbG+fZjCmpLB4te3CMO41dUSXHGBwBo1WswxlxWvJiYZiKKLY83jp5dbo1IufGqnuCGMCmUd",
	"RW08fBtEbQdO6SVluXetPbYDJ404uSZ0fWutEAK4dwA2iKMnD6puetIdl46Gu7bopHCsDeUPClvhQxHB",
	"u4krxoREjx1ZtaBrw0H2HKCvnHhVJEb8EpWzNB6G4TNlmIPb8LppTLDxgDFqIFZs4LSGVyyAZZqpHQ4m",
	"O0gGY0SJidG7DbSbCVeareLsjwoIy4Br80miVHYE1cilL+/T306N7dAfywG2QbwG/H1sDANqyLpAJDYb",
	"GGEwv4fuce0y+4nWpxDmhyBqeYszwXDE3pa44TzP8YfjZptYsWwH5cNKan39ZxjDVt3YXsbNO69Li+jA",
	"GNGybIO7xdHwTmF632KPaLYERDfcDMY2NpwrEQFT8SvKbZUl08/S0PVWYKMepteVkHhdSUE0IYKpZC7F",
	"nxD3ZDEAEMlfdqREcxF7TyLXQLpKtI4yNfXzPH1DPAZZe8iSCz6S9pntgIQjlwenFHj/3wfsKLdsbStC",
	"tTIF4sIRZvdMLfxGOBzOvYyonF7NaKw4gjGoDE5HzXlYK7SoBfGd/Sq4KGjDe8HRWt2W2Ts+JcjmkkH/",
	"PukdjaPPi+UzSFlB87iVlCH12zcaM7ZgtqxWpSCo2+QA2XqElotc7St74tiQ5mRO9sZBZTi3Ghm7ZIrN",
	"csAW+7bFjCrcteqgW93FTA+4Xips/nyH5suKZxIyvVSWsEqQ2oBFV66O5c9AXwFwsoft9l+Rr/AUQ7FL",
	"eGqo6GyR0eH+KwwD2z/2Ypudq5+3Sa9kqFj+wymWOB/jMY6FYTYpB3USvW9mi54Oq7AN0mS77iJL2NJp",
	"ve2yVFBOFxA/OC+24GT74mpi0LBDF57Zin1KS7EmTMfHB02NfhrIAjTqz6JBUlEUTOMBpRZEicLwU1OU",
	"yQ7qwdnyf65QisfLf8Qjo9InUXcc5scNENu9PDZrPNh7Rwtok3VMqL2WmbPmMNcpxAk58Ze7sXJMXTDG",
	"0saMZaaOJh2e7c5JKRnX6ERVep78g6RLKmlq1N9kCN1k9vVBpFpOu0AGvx3ij053CQrkZZz0coDtvTXh",
	"+pKvuOBJYTRK9rTJug2kMnphQGiax/OHvEbvpo9tBr2rAWqgJIPsVrXYjQaa+l6MxzcAvCcr1vO5FT/e",
	"emaPzpmVjLMHrcwK/fzhrbMyCiFjpT4acXcWhwQtGVxiKlN8kQzMe66FzHdahftg/9eesjQeQG2WeVmO",
	"OQLfVizPfmluEXQKjknK02X0jGNmOv7aVEisp2zlOFpZYkk5hzwKzu6Zv/q9NbL7/y52HadgfMe23UJi",
	"drqdyTWIt9H0SPkBDXmZzs0AIVXbadV1Hl6+EBnBcZoyBg2X9WujBUWV/qhA6dg1LvxgU1gxlmX8AlvT",
	"hwDP0KqekO9thfMlkNYta7RmWVHl9sYuZAuQLshalbmg2ZgYOGdvjt4SO6rtYyvR2ppCCzTm2rPoxDCC",
	"mie7ZZX5EoPxjNfd4WxOwTOzVhqLHihNizJ2mcG0OPMN8MZEGNdFMy+kzoQcWwtbefvNDmL4Yc5kYSzT",
	"GprV8cgT5j9a03SJpmtLmwyz/O7FsDxXqqAobF1fsy5bgnJn8Hb1sGw5rDERxr+4YsoWtoZLaN+fqC8T",
	"OdfJ36doT09WnFtOieroTZfd7kJ2j5w9vPeh3yhmHcLf0nBRopIp3LY22Cn2itYB6BYa61WDtfdM62qM",
	"/sGClHLBWYq38INS2jXKrkj2LuciOxQs6IalvIg7CY0IV7S8WZ3g5Kg4WPDMK0JHuH5gNvhqFtVyh/1T",
	"YzXmJdVkAVo5zQbZ2Jewc/ESxhW4MjRYLz3Qk0K2zppQQ0aPL5M6zH1LNsJs6gED+Dvz7Z1zjzDN8IJx",
	"NIQc2VxGo41oYA1fbawnpslCgHLzaV/WVh9NnwleWM5g9Wnia/4iDHtUY6ZtzyX7oI78KaU7FTRtX5u2",
	"BI9lmp9bmdt20KOydING06rqFY4V4RskcOS0KfHh/oC4NfwQ2gZ225hegPupYTS4xMNJKHEf7jFGXc+w",
	"U5j0kuaV5ShsQWxaT/TGHeMRNN4yDk1F6sgGkUa3BFwYlNeBfiqVVFsTcCeddgY0xxPJmEJT2oVo7wuq",
	"s8BIEpyjH2N4GZtSjAOKo27QGG6Ur+tC2Ia7A2PiNVbgd4TsF1ZEq8oZURkmonZKLcYUh1HcvkhpewPo",
	"i0HfJrLdtaRWcm6zEw3dLUpFzN58s4K0sgfuwtZ3oWVJUrysG+wX0YgmU8Z5KmZ5JPftuP4Y1C/FpOHZ",
	"Gv+NVd0ZJok7Eb91TpY//saOtzZY25B65qZhpkSxxR2Xuen/oOuci0UbkUcuUbFJxkOWiUn3G6M2w+um",
	"vXpOVrHWt0ExDUn44tboNNX3mNoyiYo86pQ2dYo3O+XDFYfHqPoHkhGDwhzU7i72jGEoJTEdzKCl2qX7",
	"a0qaqgJ9wbRlgmMQbD6DLU9sn/qJxleGchhsCoP53Ou9m13UszIR9kaC+uSYPkI/+Mw7UlLmDtAaie1T",
	"1uXo9rOmd8neaxa4OwmX+YpAYjPp1W3bzCG9zOcge9+W15rsfs+4OZDHMxMsjrwA7qojt3Mad86sms8h",
	"1exyS6b5fxiLtcliHnub1paUDxLPWZ2p41+EuqWp3SC0KRF8Iz5BMYN7ozOUZ3oB6yeKtLghWu9r7Bn1",
	"LtfYkAJY6CExLCJULPpvnXAXkGWq5gykgj9ts92hqbEzWGg1uDdxx7E8SxIa3qXYMOSliFnxO41luu6Q",
	"eNVkb2NKxlAyer/U4fDudYyVJVVdJLt+8ilIpjDOWrcM15W7Rof3Auq4k79QB8r/5i8B2VHsU2JNKViM",
	"8l1RmfkWUbPVW8TJQHpXN2Ha5qWzONLzemTW5Eb0c4Yj188xFybNhWJ8kQylTLXTEepY/hNlD10wQIA1",
	"JBGvOUhXAlr7l9oSLXwuxSY8NpHCPRRyFyKowWJqFrnBi5gfmpumWHOH2nf63IFSOEEioaAGOxncBx0e",
	"cxOxX9vvPknW11zpVDiKwPX8mmy90OmzYpjqETHk+jlxu+X25Nu7+AuMc1thX8Uuh3JDyjCSVEqRVand",
	"oEPBAO9X7Xz1eoMqiVr5aX+WPYMtx0IEb4OrDBewnlqjKV1S3lSEaIu1rRFn5xBcHeys9oO6UnGDNV/Y",
	"CSweBM+/0hMaj0oh8mQgdHTSv+PalYELll5ARsze4c+TB4qtkq8wYlGfDVwt1760fFkCh+zphBDjSxWl",
	"XvtjgnZ1p87g/IneNP4KR80qe+3cOWmTcx5PhbAvX95Tv3kwm7WafQr6nkNZIJsH0is+oNroVaT08K6v",
	"JkUC991ysA1TWSxiVsod78rtJN99Ry3C+uEthy3+z0XLq7P1SzrBeiHhgb27IEp5S++uf39j1+nhPFCr",
	"VQr689x5AVq0HaD9LoRvQhN94g5HFPRsl4hCvNaC6Y4hDUsQLFRCEFXy2/5vRMLcPcP77BkO8OzZ2DX9",
	"7Xn7s/G+nj2LSuajBTNajzO5cWMc88vQ4a49wBzII+isR8XybBtjtLJCmiKCmPfwq8uf+UvKGP5qXeS+",
	"qLqKbrcJo3YXAQkTmWtr8GCoIN9jh1QP1y2S2IGbTVpJptd4hcl7VOzX6NXw7+sgjHvxr04Ed3nI9rFZ",
	"l5bUhGya90G/F/bNrsLs9RhY11hn/c2KFmUOTlC+eTL7O7z4x0G292L/77N/7L3cS+Hg5au9PfrqgO6/",
	"erEPz//x8mAP9udfv5o9z54fPJ8dPD/4+uWr9MXB/uzg61d/f+If57SINg9f/m+s9ZkcvT9JzgyyDU1o",
	"yernFQwb+7qBNEVJND5JPjr0P/1PL2GTVBQNeP/ryOWojZZal+pwOr26upqEXaYL9NESLap0OfXj9Mva",
	"vz+p82fsvQdcUZsaYVgBF9WxwhF++/Dm9IwcvT+ZNAwzOhztTfYm+1ietwROSzY6HL3An1B6lrjuU8ds",
	"o8Prm/FougSaY81m80cBWrLUf1JXdLEAOXEFFM1Pl8+n/vh9eu3805tN39qXLVxYIegQVNqaXrec/CyE",
	"i3Woptf+IkrwyT6oNL1GP23w9zYa13rFspupDwu5Hu5hkul181LQjZWOHGIhHZvnRIOHhcbGj8YHFJX9",
	"1QiET69mqv2wVL26J5lZVdPrdf1qUnCL/vBjzyyygIiHFHkeuDXS8OPAtYpttW8U7ce95NWn6/3x/t7N",
	"34widX++fHGzY2y2efCRnNZacseGnzqPzD7f2/sXey7z4JYz3mgLt46vItVNv6UZ8al/OPb+4419wjEy",
	"bhQasQr7Zjx6+ZizP+GG5WlOsGVwKaa/9D/zCy6uuG9pdteqKKhcezFWLaXg30JDHU4XCj0jyS6phtEn",
	"dL1jZ98DygXfJb21csHHVr8ol8dSLp/HK7TPbyngn/+Mv6jTz02dnlp1t7s6daaczS6f2gcbGguvV41z",
	"AdE0d0w4p5veJ+tq2O9B955bG91TxfxlL6/9a8vJwd7B42HQLpL4A6zJO6HJd3gc9ZnK7G7is8kS6nhG",
	"WdZjcqv+QelvRbbeQKFCLUqXERqxS2aMG5T7u0v/KYPec2gXsCb2iNaH4t1zoG176OaeOuCzfbntiw75",
	"okOkHf7F4w1/CvKSpUDOoCiFpJLla/Izr+/z3N2ty7Jo+ltb9Hs6zXgjqchgATxxCiuZiWzt69a0AF6A",
	"DRn3DJXpdbv4pA1/DYaljvH3+uWQPtKzNTk57lkwtltX0367xqYdjzHiE3ZR3OgZdnXRgDO2ic3NRBZC",
	"E0uFzE3qi+L5onjuZbzsLDwx+yXqTfhATndPHvuLrbGr31T3h97F5/hLxfW/7UPYX1TCF5Vwd5XwPUSE",
	"EaXWKYkI090l0ttXEJgRlXVLuGNagW9e5VQSBbuGKY4QogtOPIaWeGwnLUor66NRTmDFFD7cEFmwh/Xb",
	"vqi4LyruMzq12q5o2obIrT2dC1gXtKz9G7WsdCaubEGYqFbEurA0d4XVsNRZnSGhBfEAmotH5Cd30y5f",
	"4wPSLDNmnGYFGJOq1nWms08nbfJZDYTmxbMF4zgAqgocxVYQpEFKv4JUcPs+UOeszWH2zvqEMSX7RwWo",
	"0RxtHI6jceuwxS1jpF7fve2v/tnIzYZYev3IT+vv6RVlOpkL6W70IIX6WRgaaD51pQ86v9oLysGPQYZG",
	"/NdpXZQ3+rGbWxL76lI/fKMmqStMksKVqtOjPn4yBMc6Z24Rm5yfw+kUk92XQunp6GZ83ckHCj9+qml8",
	"Xe+vjtY3n27+fwAAAP//OBz1/ymoAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
