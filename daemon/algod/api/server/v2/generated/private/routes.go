// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XPcNrLgv4KafVX+uKFG8kd2rarUO8V2sro4jstS9t0925dgyJ4ZrEiAAUBpJj79",
	"71doACRIgjMcSas81/NPtob4aDS6G/2FxudJKopScOBaTY4/T0oqaQEaJP5F01RUXCcsM39loFLJSs0E",
	"nxz7b0RpyfhyMp0w82tJ9WoynXBaQNPG9J9OJPxeMQnZ5FjLCqYTla6goGZgvSlN63qkdbIUiRvixA5x",
	"+mpyveUDzTIJSvWh/JnnG8J4mlcZEC0pVzQ1nxS5YnpF9Iop4joTxongQMSC6FWrMVkwyDN14Bf5ewVy",
	"E6zSTT68pOsGxESKHPpwvhTFnHHwUEENVL0hRAuSwQIbragmZgYDq2+oBVFAZboiCyF3gGqBCOEFXhWT",
	"4w8TBTwDibuVArvE/y4kwB+QaCqXoCefprHFLTTIRLMisrRTh30Jqsq1ItgW17hkl8CJ6XVAfqqUJnMg",
	"lJP3378kT58+fWEWUlCtIXNENriqZvZwTbb75HiSUQ3+c5/WaL4UkvIsqdu///4lzn/mFji2FVUK4sxy",
	"Yr6Q01dDC/AdIyTEuIYl7kOL+k2PCFM0P89hISSM3BPb+E43JZz/T92VlOp0VQrGdWRfCH4l9nNUhgXd",
	"t8mwGoBW+9JgSppBPxwmLz59PpoeHV7/5cNJ8p/uz+dPr0cu/2U97g4MRBumlZTA002ylECRW1aU9/Hx",
	"3tGDWokqz8iKXuLm0wJFvetLTF8rOi9pXhk6YakUJ/lSKEIdGWWwoFWuiZ+YVDw3YsqM5qidMEVKKS5Z",
	"BtnUSN+rFUtXJKXKDoHtyBXLc0ODlYJsiNbiq9vCTNchSgxcN8IHLui/LjKade3ABKxRGiRpLhQkWuw4",
	"nvyJQ3lGwgOlOavUfocVOV8BwcnNB3vYIu64oek83xCN+5oRqggl/miaErYgG1GRK9ycnF1gf7cag7WC",
	"GKTh5rTOUcO8Q+jrISOCvLkQOVCOyPN810cZX7BlJUGRqxXolTvzJKhScAVEzP8JqTbb/r/Ofn5LhCQ/",
	"gVJ0Ce9oekGApyIb3mM3aewE/6cSZsMLtSxpehE/rnNWsAjIP9E1K6qC8KqYgzT75c8HLYgEXUk+BJAd",
	"cQedFXTdn/RcVjzFzW2mbSlqhpSYKnO6OSCnC1LQ9beHUweOIjTPSQk8Y3xJ9JoPKmlm7t3gJVJUPBuh",
	"w2izYcGpqUpI2YJBRupRtkDiptkFD+P7wdNoVgE4fpBBcOpZdoDDYR2hGcO65gsp6RICkjkgvzjJhV+1",
	"uABeCzgy3+CnUsIlE5WqOw3AiFNvV6+50JCUEhYsQmNnDh1Getg2TrwWTsFJBdeUcciM5EWghQYriQZh",
	"Cibcbsz0j+g5VfDNs6EDvPk6cvcXorvrW3d81G5jo8SyZORcNF8dw8bVplb/EcZfOLdiy8T+3NtItjw3",
	"R8mC5XjM/NPsn0dDpVAItBDhDx7FlpzqSsLxR/7Y/EUScqYpz6jMzC+F/emnKtfsjC3NT7n96Y1YsvSM",
	"LQeQWcMataawW2H/MePFxbFeR42GN0JcVGW4oLRllc435PTV0CbbMfclzJPalA2tivO1tzT27aHX9UYO",
	"ADmIu5KahhewkWCgpekC/1kvkJ7oQv5h/inLPIZTQ8DuoEWngHMWnJRlzlJqsPfefTZfDfeDNQ9o02KG",
	"J+nx5wC2UooSpGZ2UFqWSS5SmidKU40j/ZuExeR48pdZ41WZ2e5qFkz+xvQ6w05GEbXKTULLco8x3hmF",
	"Rm2REkYy4yeUD1beoSrEuN09Q0PMyN4cLinXB40h0hIENed+cDM1+LY6jMV3x7AaRDixDeegrF7btCAZ",
	"1RSBpQ3BezcTKptBW0P519N6HqMd38WWoja+ErnRJ3Zuhmn8d9c23Efz+6jOX8Yehrjt7h5aJTv3zXk/",
	"wh270WZtRagdd8tC6jVcSVpa+N0Xe0wwjsaFbWRhvaW8GMnKUZgDWg82G6G6MbHvJMgoJLh7HRi+y0V6",
	"cQcMNzfj9OkehycroBlIJK+AsB3Bxo8j7Ph37IcsCTKis/6M/6E5MZ8NtVLt7TFjixr2UkQEnuPMmHBW",
	"MbQzmQZoWgpSWKuNGGtrLyhfNpP3mNSiZQyTvraGIsEefhFm6Y0b6GQu5M3opUMInDTOLULNqAG7TDs7",
	"i02rMnH4iRjItkFnoCae0NeTQgx1h4/hqoWFM03/BVhQZtS7wEJ7oLvGgihKlsMd8OuKqlV/EcZiefqE",
	"nP395PnRk1+fPP/GqNylFEtJCzLfaFDkoVMUidKbHB71V4YaW5Xr+OjfPPMukfa4OzGEANdjj+GoczCS",
	"wWKMWAegge6V3MjqLtRGkFLIiBGLpKNFKvLkEqRiIuKPfOdaENfCyCFrSHd+t9CSK6qImRv9KxXPQB7E",
	"MK/XHEFjGgq166CwQ5+veYMbNyCVkm56O2DXG1mdm3fMnrSR7811RUqQiV5zksG8WraUooUUBaEkw44o",
	"EN+KDIzOXak7kALNYA0wZiNCEOhcVJpQwkVmGNo0jsuHgeAEekXRmatDkaNX9vyZgzF3U1otV5oYO1HE",
	"trbpmNDUbkqCZ4Ua8OXUTjjbyk5nHd+5BJptyByAEzF3DhPnysFFUvSzah9CddIpopO24CqlSEEpozlb",
	"dWwnaL6d3WW9BU8IOAJcz0KUIAsqbwisFprmOwDFNjFwa3XCeZn6UI+bftsGdicPt5FKIJ41je5iuDsH",
	"DUMoHImTS5DobfmX7p+f5KbbV5UDsVB3Ap+zAk0ATrlQkAqeqehgOVU62cW2plFLTTArCDglxqk48IAd",
	"+IYqbX1ujGeoMlpxg/NYA9FMMQzw4IliRv6HP0z6Y6dGTnJVqfpkUVVZCqkhi62Bw3rLXG9hXc8lFsHY",
	"9fGlBakU7Bp5CEvB+A5ZdiUWQVTXBrRzSvcXh/E1cw5soqhsAdEgYhsgZ75VgN0wHjQAiLEv6p5IOEx1",
	"KKcOQk0nSouyNPynk4rX/YbQdGZbn+hfmrZ94qK6keuZADO79jA5yK8sZm0kcEWNbocjk4JemLMJNTXr",
	"HOzDbJgxUYynkGyjfMOWZ6ZVyAI7mHRASXa5BsFsHebo0G+U6AaJYMcuDC14QGN/R6VmKStRk/gRNndu",
	"7ncniFr+JANNWQ4ZCT6gAEfZW/cn1tvbHfNmitYoJbQPfk8LjSwnZwoPjDbwF7BBH9w7G0Y8D4KPd6Ap",
	"RkY13E05QUB9cMIcyGETWNNU5xtzzOkVbMgVSCCqmhdMaxsXbiuSWpRJOEDUcN0yo3Md2BCc34Exvowz",
	"HCpYXn8rphOrtmyH77yjuLTQ4RSmUoh8hI+zh4woBKN8oKQUZteZS0PwsWpPSS0gnRKDfqNaeD5QLTTj",
	"Csj/ERVJKUcFrNJQnwhCopjF49fMYA6wek5mNZ0GQ5BDAVavxC+PH3cX/vix23OmyAKufO6OadhFx+PH",
	"aCW9E0q3mOsOLF7DbqcR2Y4WvTkonA7XlSkHO617N/KYnXzXGdxPijyllCNcs/xbC4AOZ67HrD2kkRVV",
	"q91rx3FHOTSCoWPrtvsuhVjckYMoHrtF48SFY00rsqi4BapSzhzBAIp3aIjFtI7P27xcG7utCuyN/19R",
	"53CaTJugq21gDuTm86eISsmydSy2nsE6timOx9CcemBsj42CaLwFJbNYRNJrQF7kbmkd2UEKMEytVqw0",
	"QzapABsNrTTC//vw348/nCT/SZM/DpMX/2P26fOz60ePez8+uf722//X/unp9beP/v3fYqq10mwe9+v9",
	"3SBaLIiT8Wt+yq1nfiGkNcg2Ts8Ti/uHW0uADEq9iuXtlRIUykabf1fqVbOpAB0nSinFJfApYQdw0JWx",
	"2RKU9yblQBeYP4ZGhRgTbqv5wdKbJ44A6+FCRgmyGP1g7AppE7nZWB355g60FzsQkW18emtd2a9iESY9",
	"OkZRG6Wh6Du8bNdfB9T9915Z7jGV4DnjkBSCwyaa5884/IQfY73teTfQGTWPob5dY6IFfwes9jxjNvO2",
	"+MXdDgT8uzoF8w42vztux9cZpnuirwbyklCS5gw9OYIrLatUf+QUbcWAXCNxEm8BD3sPXvomcXdFxJvg",
	"hvrIqTI4rC3IqA98AZEz63sA70RQ1XIJSne05gXAR+5aMU4qzjTOVZj9SuyGlSAxWHFgWxZ0QxY0R2fH",
	"HyAFmVe6rUfiqac0y3PneDXTELH4yKk2Mkhp8hPj52sczid/eZrhoK+EvKixED+ilsBBMZXE5f4P9iuK",
	"f7f8lTsK8IqA/ezlzX3LfQ97LGfKQX76ytlYp69QkW5crj3Y780PVzCeRInMKEYF45h626Et8tCYA56A",
	"HjXOW7frH7lec0NIlzRnmVGebkIOXRHX40XLHR2qaW1Ex63i1/opFg9fiqSk6QWGQydLplfV/CAVxczb",
	"lrOlqO3MWUahEBy/ZTNaspkqIZ1dHu1QdG8hr0hEXF1PJ07qqDv3xLiBYwvqzlk7NP3fWpAHP7w+JzO3",
	"U+qBTaC0QweZbxF3gEt9aUWszOLtBSCbQfqRf+SvYME4M9+PP/KMajqbU8VSNasUyO9oTnkKB0tBjn02",
	"zSuq6UfeE/GDd/QwkchBU1bznKXkIjyKG9a09y76I3z8+MEQyMePn3rhj/7B6aaK8qidILlieiUqnbjE",
	"8kTCFZVZBHRVJxbjyPZayLZZp8SNbSnSJa678eOimpal6uYZ9pdflrlZfkCGimAnm52ltJBeCBrJaKHB",
	"/X0rnM0l6ZW/lVApUOS3gpYfGNefSPKxOjx8CuSkLJvUxd+crDE0uSmh5Ti6UR5k12mEC7cKFay1pElJ",
	"l6Ciy9dAS9x9PKgLdFHmOcFurbRBnzyAQzUL8PgY3gALx96pXbi4M9vL3xCMLwE/4RZiGyOdGs//Tfcr",
	"yFC88XZ1shx7u1TpVWJ4O7oqZUjc70x9cWhpZLIPxyi25IYJ3B2rOZB0BekFZHjdA4pSb6at7j7i5044",
	"LzqYsteibAYX5u6jj20OpCoz6nQAyjfdJGoFWvvM8fdwAZtz0aT+75M13c7lVUOMipQaHEaGWEO2dWN0",
	"N99Fjw2ktCzJMhdzx901WRzXdOH7DDOyPSHvgIljRNFKhR1CBJURRFjiH0DBDRbapNneigFiizRKztye",
	"fxFnjz8BiGvS6G4uDhyuCfN87fcC8KaluFJkThVkRLhLgr0U6ErRJQx4oEJn58jM2ZaDFAfZdfpFzzux",
	"6B5rvVMnCrJtnJg1R+kFzBdDMOgt7ET//UzWn44rOCB4998hbJ6jslQnHljRQ2XL6WwvMw+BFidjkLxR",
	"OzwYbYyE+s2KKn9/Ea95eo4epQn8C5PEt126OQ0C18FdzvpKjZe8XW6Nu2/t5ZpCNZdsQt/tiAsz04nL",
	"pYpth+CoBmWQw9Iu3Db2hOJAe6CCDTJw/LxY5IwDSWIxcKqUSJm9gNocNm4OMFryY0KsB4qMHiFGxgHY",
	"GCfCgclbEfImX+4DJAeGgSXqx8YIU/A3xBMCbZaTUXxEaQQ54wP5aV4CUJc4UZ9infQdHIYwPiVGzF3S",
	"3Ig550ptBgmkW6C8PmzpnT5S+WhIqd3iALTHy15rsgfSTVYTak4e6LhatwXi7QpFbAsU4ssZwDWuhk7U",
	"MVMPHOJDuHoYHLo3AqDjj2jqqzj7b6ed1j6b+ydZI9KnzW1In6AZo/0h+onu0gD++u7g+jLMaymFDB0L",
	"vcg9JtE2dr/38vgiOIGgB55hzpm1NA2l2rsO/cxUvLPtSBvTC2CdAmSx7ALDhtGUZbzMbO9fxi5zTidB",
	"4vtYKbMH847lmvEkvoMWhxPt681819W9on6Xdji6fasqUIlj56oReH1vd3/TFOSARk7SUgeTi1gMxNhq",
	"gGfnme8WOGPIQ7YwptOjIMdBwpIpDY030qgY3r1+3xFMipexhVgMr06XcmHW916I+sDFji4iGy7z3ldw",
	"KTQkCyaVTtCVG12CafS9QifB96ZpXOtrZ1HYuiQsiwt6nPYCNknG8ipOr27eH1+Zad/WfjVVzS9gg7o9",
	"0HRF5lhHJ5pbtWVqm363dcFv7ILf0Dtb7zhuME3NxNKQS3uOL4QvOqJrmziIEGCMOPq7NojSLQIStbhX",
	"kOvY7apAA7TMmZmGB9u8yT1myvzY26zeAIphhcOOFF1L4ADZugqGCSXGdjeHbVBfr7uiAR6gZcmydce3",
	"a0cdtP3pXg4cfwu5gwXcXTfYDgwEftxYtrEE74u2WxqYKragEA/XdjAKM+edu+OBQAinYsqXw+sjypA2",
	"1mzahatzoPmPsPmHaYvLmVxPJ7dzBcdw7Ubcget39fZG8YwxTusabGl8e6KclqUUlzRPnMN8iDSluHSk",
	"ic29f/2eRV3cLXv++uTNOwf+9XSS5kBlUqsKg6vCduUXsyqjwQo5wCC+3JZR8b0BZlXJYPPrK8+hk/1q",
	"Ba60UaCNGinmiMuyVxNACVjROd0X8VSLnS50F+uxS9wS84GyDvk0jkgb8WlHeeglZbn3AHpoB9IicHHj",
	"6nlEpUI4wK2jRUHQL7lTcdPj7jh3NNS1QyaFc20pvlTY+mKKCN7NsjMqJDoWkVQLujEUZP07feHEqyIx",
	"7JeonKVxbzGfK0Mc3MYCTWOCjQeUUTNixQZCy7xiwVimmRrhtegAGcwRRaavGTKEu7lwhWErzn6vgLAM",
	"uDafJHJlh1GxGIeLG/SPU6M79OdyA9tYQzP8bXSMsMZJ98RDILYrGGHksQfuq9pk9gutfWvmhyC4skcC",
	"Qzhj70jcknzg6MNRs80CW7UjiGEd1778M4Rha37tLiLrjVdXpmZgjmhRWKaShRR/QNzOQ/M4chXBTYTK",
	"FPY+iNzo6oqY2lXX1LZtZh/c7iHtJnQptpMuBqgedz4IM2IBD+9rp9xuta3R2Er1iRNMmJ43s+M3BONg",
	"7qU05vRqTmPVTYySYWA6aQLaraiAFsR39rh3AQxzduHsJIiN122ZvaRXgmxuCfUvhN9QYbDTjlYVGs0A",
	"qTbUCaY2kpkrERmm4leU21Kfpp9lJddbgXV+mV5XQuIVWxUPYGSQsoLmcc0hQ+y3ryRnbMlsoctKQVBJ",
	"0Q1kKwRbKnLVKG3KQIOa0wU5nAZVkdxuZOySKTbPAVsc2RZzqlCS146ouotZHnC9Utj8yYjmq4pnEjK9",
	"UhaxSpBaqUPzpg7DzUFfAXByiO2OXpCHGIBU7BIeGSy683lyfPQCPej2j8PYAeAq2m6TJhmKk/9w4iRO",
	"xxiBtWMYwe1GPYheGLVlyIcF1xZusl3H8BK2dLJuNy8VlNMlxDNfih0w2b64m+hI6+CFZ7aGrtJSbAjT",
	"8flBUyOfBtJ4jfizYJBUFAXThQtTKVEYemrKJNpJ/XC2IK+rdOTh8h8x2lv6YFfHiLxfp6k932Krxpj8",
	"W1pAG61TQu296pw1eRhOIB6QU1+dAUs/1RWfLG7MXGbpqOZgWsaClJJxjYZFpRfJ30i6opKmRvwdDIGb",
	"zL95Fil31a5ww/cD/N7xLkGBvIyjXg6QvdchXF/ykAueFEaiZI+atPmAKwfD0vEEQC/Ru/mf24ceq5SZ",
	"UZJBcqta5EYDSX0rwuNbBrwlKdbr2Yse917ZvVNmJePkQSuzQ7+8f+O0jELIWK2eht2dxiFBSwaXmIsY",
	"3yQz5i33QuajduE20P+5kQevcgZqmeflmCHwXcXy7B/NNaBOxUBJebqK+v3npuOvTc3iesmWj6OlYVaU",
	"c8ijw9kz81d/tkZO/3+KsfMUjI9s260EaJfbWVwDeBtMD5Sf0KCX6dxMEGK1fS+iTqTNlyIjOE9Th6Sh",
	"sn5xw6Aq2u8VKB27h4kfbBoP+neMXWCLctWZCgfkB/vmyApIq0wCarOsqHJ75R6yJUjneKzKXNBsSsw4",
	"569P3hA7q+1ja8PbomBLVObaq+jY9UHRonEJob7SaDxlffw423NozaqVxqolStOijN1GMi3OfQO88hT6",
	"OlHNC7FzQF5ZDVt5/c1OYuhhwWRhNNN6NCvjkSbMf7Sm6QpV15Y0GSb58dXsPFWqoEx7XUi2rjuEfGfg",
	"dgXtbD27KRHGvrhiyj41AZfQvgBV3wZ0ppO/ENVenqw4t5QSldHbbqveBO0eOBvQ9u7QKGQdxO+puChR",
	"yRT2Le53hr2ihTy6lQJ79dntRfG6nKp/QiilXHCWYhmN4HGLGmT3bMWYWMGIiiNdZ5RnccehEeaK1ies",
	"c8McFgcrFnpB6BDXd1YGX82mWuqwf2p8H2FFNVmCVk6yQTb1NSidv4RxBa6OFL5gEshJIVvxF5SQ0ZBe",
	"Urt+9yQjvA4xoAB/b769deYRZghfMI6KkEObS0a2Hg2sqq+N9sQ0WQpQbj3tagvqg+lzgBUHMlh/OvBV",
	"+HEMG74wy7axuv5QJz5y5yJlpu1L05bYFNL651bOqZ30pCzdpNFUo3qHY1U0BxEcicAk3gUeILcePxxt",
	"C7ltDbnjeWoIDS4xYAclnsM9wqgLknYqC1/SvHI5hZh9aFNdoldmGY+A8YZxaN6IiBwQafRIwI1Bfh3o",
	"p1JJtVUBR8m0c6A5RuliAk1p56K97VCdDUaU4Br9HMPb2NRSHRAcdYNGcaN8Uz9NYag7UCZe4ps4DpH9",
	"yqioVTklKsMc8k6t1JjgMILbVxluHwB9NujrRLa7ltRyzj4n0dDlwFTE9M3Xa0grG4QWyqeUkxRv2wfn",
	"RdSjyZQxnop5HskHe1V/DAoQY77/fIP/xspmDaPERYn3zlPyIWHsuLfC2h6pp24aYkoUWybjMYHC/Pbo",
	"aKa+GYU1/e+UxHKxbANyz+VttomXcI9igmXvjPJ2srh90cHfgRybCz6Y6r1HErU5dQZyA4OiPtQebDa8",
	"MZQhmA4mtFLtLglpSpqKJH2ZYEuMx0aw6QW2tLl99y/q2hlKKbAZBeZzr/c4layn4OLYWxHqc1X6AP3o",
	"E+FISZmL3TXCoo9ZlzLbT2Iek0zXbHB3ES4RFQeJraRX83E7hfQSkYNkelua72B8jYKTOjCK4RosrL4E",
	"7iqrt1MMRyc6LRaQana5I/H7P4yy3CQVT706bZ+jCPLAWZ0445+H3FPLbwDalpe9FZ6gEMqtwRlK+7yA",
	"zQNFWtQQrRU49YR6k8uviAEsEpMYEhEqFniw9r/zBTNVUwZiwQf6bHdo6nMNFmkOrjHccC5PkoSGVxu2",
	"THkpYgbEqLlM171ub2EOyFBueL9M6vDp9Qqr0qq6wH79/mOQx2HsxG4Jvyt3+RbT9GuXl7+GC8r/5u/k",
	"2Fnsu6JNGWl0MF5RmfkWUY3ZK+PJQLZVN3/ZpomzONCLembWpGX0U3gjpSsw+SbNhWJ8mQxlMLUzIeow",
	"wgNl4z3NBTGEawHSlY/X/tnWRAufxrENjm2ocI8M3QQJarAQowVu8Pr2++Z+OtbrovbRXhfLChdIJBTU",
	"QCeDW+TDc25D9kv73ees+pt8nepokXE9vSY7r4H7hBymekgMqX5B3Gm5Oxf2JqYK49y+zqFiV8q5QWXo",
	"xCqlyKrUHtAhY4A36UYXbNgiSqJaftpfZU9hy7GIyZvgZsEFbGZWaUpXlDfVZNpsbetL2jUEN/k6u32n",
	"VlxcYc2XdgHLO4Hzz7SEppNSiDwZ8Fqd9m/Gd3nggqUXkBFzdvhQ9kChZvIQnSV1WOJqtfE3wcsSOGSP",
	"DggxtlRR6o2PULQrw3Um5w/0tvnXOGtW2WIVzkg7+MjjWRj2Gexbyjc/zHappsAIv1tOZQfZcfV8PXAr",
	"X9KrSNnysS+uRWIG3VLSDVFZKGJayg2vro3i776hFiH98NLBDvvnomXV2dpHnTiBkHDH1l3gIN3Tuutf",
	"pxi7PFwHSrVKQX+dozeghdsB3I9BfOOa6CN32KOg52M8CvEKLaY7ujQsQrC8EUFQyW9HvxEJC/cm/+PH",
	"OMHjx1PX9Lcn7c/G+nr8OMqZ9+bMaD3s5uaNUcw/huLKNnY6kMLQ2Y+K5dkuwmglpDQFSDHl4leXuvOn",
	"lED91ZrIfVZ11SD3caN2NwERE1lra/JgqiDVZESWiesWySnBwyatJNMbvFHkLSr2a/Sm9g+1E8a9Flrn",
	"oLsUaPvyvMuIalw2zWPhPwj73l9hznp0Ymt8o+H1mhZlDo5Rvn0w/ys8/duz7PDp0V/nfzt8fpjCs+cv",
	"Dg/pi2f06MXTI3jyt+fPDuFo8c2L+ZPsybMn82dPnn3z/EX69NnR/Nk3L/76wL/UbQFtXsH+31gnODl5",
	"d5qcG2AbnNCS1U+zGDL2NUdpipxobJJ8cux/+p+eww5SUTTD+18nLj1ustK6VMez2dXV1UHYZbZEGy3R",
	"okpXMz9P/0mMd6d16o69coE7arMyDCngpjpSOMFv71+fnZOTd6cHDcFMjieHB4cHR1jauwROSzY5njzF",
	"n5B7VrjvM0dsk+PP19PJbAU0x3rv5o8CtGSp/6Su6HIJ8sAVXzU/XT6Z+cj/7LOzT6+3fZuFFYxmn1tm",
	"fLajJ1YQmX321122t27dJ3Hui6DDSCiGp7SPvs0+oz04+HsbjM96zbLrmXc/uR7u8aTZ5+Y1s2vLhTnE",
	"XEc2lYsGj59Njb2Oj7wq+6thPJ9BzlT78buaik4zQz2m18v6Zbfg8vzxh576ZQcifiRkNUNHDSe0ZmqE",
	"nZYVhPe5a1Heat8I9A+HyYtPn4+mR4fXfzEC2/35/On1SB9w8ygtOaul8ciGnzov2z85PPxv9qTvsz1X",
	"vFXnboXJIhWYv6MZ8dmNOPfR/c19ytEDbwQnsQfD9XTy/D5Xf8oNydOcYMvg3k9/63/hF1xccd/SnOJV",
	"UVC58WysWkLBv9eIZwVdKrTAJLukGiaf0MSPhfcHhAu+nby3cMEHob8Kl/sSLl/GS9lP9mTwL3/FX8Xp",
	"lyZOz6y4Gy9OnSpnE+hn9lGZRsPr1QpeQjSTH3Pq6bY3FLsS9gfQvSchJ7cUMX/a65D/vfnk2eGz+4Og",
	"XRvxR9iQt0KT7zHs9YXy7Dj22aYJdSyjLOsRuRX/oPR3IttswVChlqVLeo3oJXPGDcj906X/3ErvycYL",
	"2BAbCvYuf/dkcVsfur6lDPhiX5f8KkO+yhBpp396f9OfgbxkKZBzKEohqWT5hvzC6ytLNzfrsiyaZtdm",
	"/Z5MM9ZIKjJYAk+cwErmItv4cjWtAS/AuqZ7isrsc7vmpHV/DbqlXuHv9etGfaDnG3L6qqfB2G5dSfvd",
	"Bpt2LMaITdgFcatl2JVFA8bYNjI3C1kKTSwWMreor4Lnq+C5lfIymnli+kvUmvCOnO6ZPPV3d2O326nu",
	"Tz3G5vhT2fW/7GP9X0XCV5Fwc5HwA0SYEbnWCYkI0d3E09sXEJh5lXUrt2P6gm9e5VQSBWPdFCc4onNO",
	"3IeUuG8jLYora6NRTmDNFD4rE9mwu7Xbvoq4ryLuC4pa7RY0bUVkb0vnAjYFLWv7Rq0qnYkrW/MmKhWx",
	"HCzNXe04rOZWZ2JoQfwAzQUn8rO70Zdv8JF7lhk1TrMCjEpVyzrT2aetNnmzZoTmVcYl4zgBigqcxRZJ",
	"pMHVAQWp4Pb1sk6szUH21tqEMSH7ewUo0RxuHIyTaSvY4rYxUpLw1vpXPzZyvcWXXj9B1vp7dkWZThZC",
	"uptDiKF+FoYGms9cdYfOr/YOdvBjkKER/3VW1+KNfuzmlsS+utQP36hJHguTsXCn6jSsD58MwrGUm9vE",
	"JrfoeDbDpPqVUHo2uZ5+7uQdhR8/1Tj+XJ+vDtfXn67/fwAAAP//SRlCn56wAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
