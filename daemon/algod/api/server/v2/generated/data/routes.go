// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"fF22WSXZFaZ5f/j0/wMAAP//Tr/qBFnLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
