// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"r0Zkc775AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
