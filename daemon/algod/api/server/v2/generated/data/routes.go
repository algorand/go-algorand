// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"0KzS4hrT5r778H8DAAD//4/XMgRP7AAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
