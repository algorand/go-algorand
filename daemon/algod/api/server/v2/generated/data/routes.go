// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
