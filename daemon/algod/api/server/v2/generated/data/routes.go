// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"VZLdYMLhdx/+fwAAAP//G1y/n/7oAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
