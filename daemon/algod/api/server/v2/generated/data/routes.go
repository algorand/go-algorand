// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
