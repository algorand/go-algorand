// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
