// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
