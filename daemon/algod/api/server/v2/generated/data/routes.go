// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"TMr77sP/DQAA///w6zFCdekAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
