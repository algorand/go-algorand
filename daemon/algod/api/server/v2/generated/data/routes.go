// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
