// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
