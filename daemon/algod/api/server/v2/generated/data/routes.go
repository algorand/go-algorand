// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
