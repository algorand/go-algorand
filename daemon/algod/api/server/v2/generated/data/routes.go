// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
