// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PctpLoX0HNbpUfdyjJr5xYVam9ip3kaOM4LkvJubu2b4Ihe2ZwRAIMAI5m4qv/",
	"fgsNgARJkEM9Yidb55OtIR6NRqPR6OfHWSqKUnDgWs2OP85KKmkBGiT+RdNUVFwnLDN/ZaBSyUrNBJ8d",
	"+29Eacn4ajafMfNrSfV6Np9xWkDTxvSfzyT8VjEJ2exYywrmM5WuoaBmYL0rTet6pG2yEokb4sQOcfpy",
	"djXygWaZBKX6UP7I8x1hPM2rDIiWlCuamk+KXDK9JnrNFHGdCeNEcCBiSfS61ZgsGeSZOvCL/K0CuQtW",
	"6SYfXtJVA2IiRQ59OF+IYsE4eKigBqreEKIFyWCJjdZUEzODgdU31IIooDJdk6WQe0C1QITwAq+K2fG7",
	"mQKegcTdSoFt8L9LCfA7JJrKFejZh3lscUsNMtGsiCzt1GFfgqpyrQi2xTWu2AY4Mb0OyA+V0mQBhHLy",
	"9tsX5MmTJ8/NQgqqNWSOyAZX1cwersl2nx3PMqrBf+7TGs1XQlKeJXX7t9++wPnP3AKntqJKQfywnJgv",
	"5PTl0AJ8xwgJMa5hhfvQon7TI3Iomp8XsBQSJu6JbXynmxLO/1l3JaU6XZeCcR3ZF4Jfif0c5WFB9zEe",
	"VgPQal8aTEkz6Luj5PmHj4/mj46u/u3dSfLf7s9nT64mLv9FPe4eDEQbppWUwNNdspJA8bSsKe/j462j",
	"B7UWVZ6RNd3g5tMCWb3rS0xfyzo3NK8MnbBUipN8JRShjowyWNIq18RPTCqeGzZlRnPUTpgipRQblkE2",
	"N9z3cs3SNUmpskNgO3LJ8tzQYKUgG6K1+OpGDtNViBID143wgQv68yKjWdceTMAWuUGS5kJBosWe68nf",
	"OJRnJLxQmrtKXe+yIudrIDi5+WAvW8QdNzSd5zuicV8zQhWhxF9Nc8KWZCcqcombk7ML7O9WY7BWEIM0",
	"3JzWPWoO7xD6esiIIG8hRA6UI/L8ueujjC/ZqpKgyOUa9NrdeRJUKbgCIhb/hFSbbf/Psx9fEyHJD6AU",
	"XcEbml4Q4KnIIDsgp0vChQ5Iw9ES4tD0HFqHgyt2yf9TCUMThVqVNL2I3+g5K1hkVT/QLSuqgvCqWIA0",
	"W+qvEC2IBF1JPgSQHXEPKRZ025/0XFY8xf1vpm3JcobamCpzukOEFXT71dHcgaMIzXNSAs8YXxG95YNy",
	"nJl7P3iJFBXPJog52uxpcLGqElK2ZJCRepQRSNw0++Bh/HrwNMJXAI4fZBCcepY94HDYRmjGnG7zhZR0",
	"BQHJHJCfHHPDr1pcAK8JnSx2+KmUsGGiUnWnARhx6nEJnAsNSSlhySI0dubQYRiMbeM4cOFkoFRwTRmH",
	"zDBnBFposMxqEKZgwvH3Tv8WX1AFXzwduuObrxN3fym6uz6645N2Gxsl9khGrk7z1R3YuGTV6j/hfRjO",
	"rdgqsT/3NpKtzs1ts2Q53kT/NPvn0VApZAItRPi7SbEVp7qScPyePzR/kYScacozKjPzS2F/+qHKNTtj",
	"K/NTbn96JVYsPWOrAWTWsEYfXNitsP+Y8eLsWG+j74pXQlxUZbigtPVwXezI6cuhTbZjXpcwT+rXbvjw",
	"ON/6x8h1e+htvZEDQA7irqSm4QXsJBhoabrEf7ZLpCe6lL+bf8oyN711uYyh1tCxu5JRfeDUCidlmbOU",
	"GiS+dZ/NV8MEwD4kaNPiEC/U448BiKUUJUjN7KC0LJNcpDRPlKYaR/p3CcvZ8ezfDhv9y6Htrg6DyV+Z",
	"XmfYyYisVgxKaFleY4w3RvRRI8zCMGj8hGzCsj0Umhi3m2hIiRkWnMOGcn3QPFla/KA+wO/cTA2+rbRj",
	"8d15gg0inNiGC1BWArYN7ykSoJ4gWgmiFQXSVS4W9Q/3T8qywSB+PylLiw+UHoGhYAZbprR6gMunzUkK",
	"5zl9eUC+C8dGUVzwfGcuBytqmLth6W4td4vVuiW3hmbEe4rgdgp5YLbGo8GI+XdBcfisWIvcSD17acU0",
	"/rtrG5KZ+X1S578GiYW4HSYufGg5zNk3Dv4SPG7udyinTzhO3XNATrp9b0Y2ZpQ4wdyIVkb30447gsca",
	"hZeSlhZA98XepYzjI802srDekptOZHRRmIMzHNAaQnXjs7b3PEQhQVLowPB1LtKLv1O1voMzv/Bj9Y8f",
	"TkPWQDOQZE3V+mAWkzLC49WMNuWImYb4wCeLYKqDeol3tbw9S8uopsHSHLxxscSiHvsh0wMZebv8iP+h",
	"OTGfzdk2rN8Oe0DOkYEpe5ydkSEzr337QLAzmQaohRCksA98Yl7d14LyRTN5fJ8m7dE3VqfgdsgtAndI",
	"bO/8GHwttjEYvhbb3hEQW1B3QR9mHBQjNRRqAnwvHWQC99+hj0pJd30k49hTkGwWaERXhaeBhze+maVR",
	"zp4shLwZ9+mwFU4alTOhZtSA+c47SMKmVZk4UoyorWyDzkCNlW+caXSHj2GshYUzTf8ALCgz6l1goT3Q",
	"XWNBFCXL4Q5Ifx1l+guq4Mljcvb3k2ePHv/y+NkXhiRLKVaSFmSx06DIffc2I0rvcnjQXxm+jqpcx0f/",
	"4qlXVLbHjY2jRCVTKGjZH8oqQK0IZJsR066PtTaacdU1gFMO5zkYTm7RTqxu34D2kikjYRWLO9mMIYRl",
	"zSwZcZBksJeYrru8ZppduES5k9VdPGVBSiEj+jU8YlqkIk82IBUTEWvKG9eCuBZevC27v1toySVVxMyN",
	"qt+Ko0ARoSy95dP5vh36fMsb3IxyfrveyOrcvFP2pY18r0lUpASZ6C0nGSyqVesltJSiIJRk2BHv6O9A",
	"n+14ilq1uyDS4WdawTiq+NWOp8GbzWxUDtmqtQm3f5t1seL1c3aqeyoCjkHHK/yMz/qXkGt65/JLd4IY",
	"7C/8RlpgSWYa4iv4FVutdSBgvpFCLO8extgsMUDxgxXPc9OnL6S/FhmYxVbqDi7jZrCG1s2ehhROF6LS",
	"hBIuMkCNSqXi1/SA5R5Nhmjp1OHNr9dW4l6AIaSUVma1VUnQjtfjHE3HhKaWehNEjRqwYtTmJ9vKTmet",
	"wrkEmplXPXAiFs5U4IwYuEiKRkjtLzonJETOUguuUooUlIIscSqKvaD5dpaJ6BE8IeAIcD0LUYIsqbw1",
	"sBebvXBewC5Bk7ki97//WT34DPBqoWm+B7HYJobe+sHn7EF9qKdNP0Zw3clDsqMSiOe55nVpGEQOGoZQ",
	"eC2cDO5fF6LeLt4eLRuQaJn5QyneT3I7AqpB/YPp/bbQVuWAI5h76JyzAvV2nHKhIBU8U9HBcqp0so8t",
	"m0at15hZQcAJY5wYBx4QSl5Rpa01kfEMlSD2OsF5rIBiphgGeFAgNSP/7GXR/tipuQe5qlQtmKqqLIXU",
	"kMXWwGE7Mtdr2NZziWUwdi39akEqBftGHsJSML5Dll2JRRDVtdLdmdv7i0PVtLnnd1FUtoBoEDEGyJlv",
	"FWA3dIYZAISpBtGWcJjqUE7tgTOfKS3K0nALnVS87jeEpjPb+kT/1LTtExfVzb2dCVDog+PaO8gvLWat",
	"G9Samic0jkwKemFkD3wQW7NnH2ZzGBPFeArJGOWbY3lmWoVHYO8hrcqVpBkkGeR01x/0J/uZ2M9jA+CO",
	"Nw8foSGx/izxTW8o2bsPjAwtcDwVEx4JfiGpOYLm5dEQiOu9Z+QMcOwYc3J0dK8eCueKbpEfD5dttzoy",
	"It6GG6HNjjt6QJAdR58C8AAe6qFvjgrsnDTvsu4U/wXKTVDLEdefZAdqaAnN+NdawIA2zbkKB+elw947",
	"HDjKNgfZ2B4+MnRkB1R7b6jULGUlvnW+h92dP/26E0QNTiQDTVkOGQk+2GdgGfYn1hOjO+bNnoKTtDB9",
	"8HtqmMhycqZQ5GkDfwE7fHO/sS5+54Fj4B28ZSOjmvuJcoKAeschI4KHTWBLU53vjKCm17AjlyCBqGpR",
	"MK2t6277qatFmYQDRDXcIzM6c451j/M7MMW+dIZDBcvrb8V8Zt8E4/Cddx4GLXS4t0ApRD5Be9RDRhSC",
	"SZZ/Ugqz68x5EXs/Uk9JLSAd00ZbXn3931MtNOMKyH+JiqSU45Or0lDLNEKioIACpJnBiGD1nM7G32AI",
	"cijAviTxy8OH3YU/fOj2nCmyhEvvem8adtHx8CHqcd4IpVuH6w50hea4nUauD1T9m4vPvUK6PGW/jdmN",
	"PGUn33QGr+0F5kwp5QjXLP/WDKBzMrdT1h7SyDT7Oo47SasfDB1bN+77GSuqnOq7sF+MCqT1g4IVBWSM",
	"ash3pJSQgnWvNhKWsrAY0Ih1vErXlK9QsJaiWjnPHzsOMsZKWRWGrHhviKjwobc8WUlRlTFG6bw9vYe9",
	"ETuAmqdPgEjsbAX9S1rP54IqptxgHuHB7nxnxhwyK8xngy9Dg9RN8zK0yGmHCcSxgHEPiarSFCDqAxx7",
	"c9VL7YRDNgEubkAjNlTSOkERmuqK5iHVkdMloXzXjpOkLFeGCzJFsJ3p3DjWzu3afBDLkubWOBuJqghP",
	"SkviC3a+QWkXFRMND0gkRhrqU0ZIgOZ4GTL+Y5T4zdAxKPsTB15XzcchxyvzAM93dyAG2YGIhFKCwksr",
	"VFwp+1Usw+And6upndJQ9HX7tusvA4zm7eALUvCccUgKwWEXjfdlHH7Aj1HGgRfnQGcUYYb6dl8lLfg7",
	"YLXnmUKNt8Uv7nbAi97UHod3sPndcTtmnTDsC9WWkJeEkjRnqNQUXGlZpfo9p6g2CQ5bxDPDvw+HFWkv",
	"fJO45i6iWHNDvecUvXJqZUrUmryEiObgWwCvT1PVagWqwz/JEuA9d60YJxVnGucqzH4ldsNKkOgecWBb",
	"FnRnWCDq/X4HKcii0m2ejKEnSht2aW1MZhoilu851SQH86b+gfHzLQ7nbbSeZjjoSyEvaizEr5AVcFBM",
	"JXEPku/sV3Tuc8tfO0c/DBW2n61VwozfxKfsUKvShL/+3/v/cfzuJPlvmvx+lDz/X4cfPj69evCw9+Pj",
	"q6+++n/tn55cffXgP/49tlMe9lhghIP89KV7rJ2+RIm8MUv0YP9kKumC8SRKZKHxvUNb5D4GAToCetDW",
	"1+g1vOd6yw0hbWjOMiNy3YQcuiyudxbt6ehQTWsjOvoZv9Zryrm34DIkwmQ6rPHG13jf6SoegoR2MhdV",
	"hOdlWXG7lV7QtR723vlFLOd1mJnNQHFMMAZpTb3nlvvz8bMvZvMmdqj+PpvP3NcPEUpm2TYqHcI29nxx",
	"BwQPxj1FSrpTMCCAIuxRPx/rbhAOW4B596o1Kz89p1CaLeIczvstOzXIlp9y61Bszg9a3XZOmS+Wnx5u",
	"LY0cXup1LDK9JSlgq2Y3ATqeEKUUG+Bzwg7goKuGyMzTzHkc5UCXGCGNDz0xJQ6jPgeW0DxVBFgPFzLp",
	"rR+jHxRuHbe+ms/c5a/uXB53A8fg6s5Zm9j831qQe999c04OHcNU92ywoh06CC+LvFpdBEXLR8ZwM5uP",
	"w0Zrvufv+UtYMs7M9+P3PKOaHi6oYqk6rBTIr2lOeQoHK0GOfVDGS6rpe96TtAZT5gThMKSsFjlLyUUo",
	"ETfkadMg9Ed4//4dzVfi/fsPPXeBvvzqporyFztBcsn0WlQ6cUHciYRLKmPmGFUH8eLINkvD2Kxz4sa2",
	"rNgFibvx4zyPlqXqBvP1l1+WuVl+QIbKhaqZLSNKC+llESOgWGhwf18LdzFIeulVGJUCRX4taPmOcf2B",
	"JO+ro6MnQFrRbb+6K9/Q5K6EyYqMwWDDrv4CF27fNbDVkiYlXcWsPu/fv9NAS9x9lJcLfGTnOcFurag6",
	"7zWMQzUL8PgY3gALx7UjhHBxZ7aXT9gTXwJ+wi3ENkbcaGzRN92vIM7uxtvVidXr7VKl14k529FVKUPi",
	"fmfqPB4rI2R5BwHFVuiE6VKeLICka0gvXC4KKEq9m7e6ex8UJ2h61sGUzVJio2QwTh515gsgVZlRJ4p3",
	"NUiLHVGgtfcCfQsXsDsXTZj9dSKU2wGzauigIqUG0qUh1vDYujG6m+8cnVDFVZY+7hQDkDxZHNd04fsM",
	"H2Qr8t7BIY4RRSugcwgRVEYQYYl/AAU3WKgZ71akH1ueeWUs7M0XyVjieT9xTZrHk/NJCleDCm77vQBM",
	"eSQuFVlQI7cLl63HBoUGXKxSdAUDEnJotpgYetkydeAg++696E0nlt0LrXffREG2jROz5iilgPliSAUf",
	"Mx1PND+TtYw5IwAm4XMIW+QoJtUue5bpUNkyH9msYkOgxQkYJG8EDg9GGyOhZLOmyicSwnxL/ixPkgH+",
	"wCDnsdQWoUI/SKpU69c9z+2e097r0iW48FktfCqL8Gk5IS2FkfDRbzu2HYKjAJRBDiu7cNvYE0oTcN1s",
	"kIHjx+UyZxxIEvPHokqJlNlMUM014+YAIx8/JMSqgMnkEWJkHICNFl8cmLwW4dnkq+sAyV3AOPVjo604",
	"+BvisS3WQ9mIPKI0LJwNGJBSzwGoc+Kr76+OKykOQxifE8PmNjQ3bM69+JpBehkWUGzt5FNwPgcPhsTZ",
	"EQ28vViutSZ7Fd1kNaHM5IGOC3QjEC/ENrHBbVGJd7FdGHqPOm1jqF3sYNpcFvcUWYgt+rHg1WKdhPfA",
	"MgyHByN44W+ZQnrFfkO3uQVmbNpxaSpGhQpJxqnzanIZEiemTD0gwQyRy/0gPcWNAOgoO5pcr+7xu/eR",
	"2hZP+pd5c6vNm7RLPh4mdvyHjlB0lwbw19fC1Akl3nQllqieou2O0c6lEYiQMaI3bKJvpOmbghTkgI+C",
	"pCVEJRcx05152wDeOGe+W6C8wIwdlO8eBD4+ElZMaWiU6N4l4XOoJykmChNiObw6XcqlWd9bIeprymai",
	"wY6tZX7yFaCT7JJJpRO0QESXYBp9q/BR/a1pGpeV2l5ENq0my+K8Aae9gF2SsbyK06ub9/uXZtrXNUtU",
	"1QL5LePWN2SBaWCjvoUjU1v309EFv7ILfkXvbL3TToNpaiaWhlzac/xFzkWH846xgwgBxoijv2uDKB1h",
	"kEFMaJ87BnKTPZwYE3owpn3tHabMj73XbcRHpg7dUXak6FoChcHoKhiaiYxYwnSQRbUfrDlwBmhZsmzb",
	"0YXaUQdfzPRaCg+fe6qDBdxdN9geDAR6z1i8iATVTjPWCPg2H24ry8fBJMyct5OBhQwhnIopn829j6g6",
	"nmwfrs6B5t/D7mfTFpczu5rPbqc6jeHajbgH12/q7Y3iGU3zVpXWsoRcE+W0LKXY0DxxCuYh0pRi40gT",
	"m3t99CdmdXE15vk3J6/eOPCv5rM0ByqTWlQYXBW2K/8yq7IZzQYOiM8Wbd58Xma3omSw+XUaplApfbkG",
	"l3Y3kEZ7+QEbg0NwFJ2Sehn3ENqrcna2EbvEERsJlLWJpFHfWQtJ2ypCN5TlXm/moR3w5sHFTUsyGeUK",
	"4QC3tq4ERrLkTtlN73THT0dDXXt4UjjXSGLgwua+VkTwrgkd3Yt3pbO6FxSz+1mtSJ858apATUKicpbG",
	"dax8oQxxcGs7M40JNh4QRs2IFRswxfKKBWOZZmrCQ7cDZDBHFJk+U+QQ7hbC1TWpOPutAsIy4Np8kngq",
	"OwcV0yk6bXv/OjWyQ38uN7DV0DfD30bGCDNbdm88BGJcwAgtdT1wX9ZPZr/QWiOF7taNSeIaBv9wxt6V",
	"OGKsd/ThqNk6L67bFrewDEmf/xnCsPmo99dA8Y9Xl2JzYI5oTROmkqUUv0P8nYfP40gojs/lydDL5Xfg",
	"E3zOG+1OU5qlmX1wu4ekm1AL1XZSGKB63PnALIdJBb2GmnK71bbEQMvXLU4woVfpoR2/IRgHc88TN6eX",
	"CxrLuGiEDAPTSWMAbunStSC+s8e9qgMb7OwksCXXbZkNsy5BNlFy/ZQtNxQY7LSTRYVGMkCqDWWCubX/",
	"5UpEhqn4JeW2UoXpZ4+S663AKr9Mr0shMUmCiqv9M0hZQfO45JClfRVvxlbMFmGoFARZ/t1AtsCNpSJX",
	"KaEO13GoOV2So3lQasTtRsY2TLFFDtjikW2xoAo5ea2IqruY5QHXa4XNH09ovq54JiHTa2URqwSphTp8",
	"3tTGqwXoSwBOjrDdo+fkPprtFNvAA4NFdz/Pjh89R6Wr/eModgG4Ihpj3CRDdvIPx07idIx2SzuGYdxu",
	"1INoPLmtojXMuEZOk+065SxhS8fr9p+lgnK6grinSLEHJtsXdxMVaR288MyWgFFaih1hOj4/aGr404D3",
	"uWF/FgySiqJgunDGHSUKQ09NCn87qR/O1pNx2Vc9XP4j2khLbyLqPCI/rdLU3m+xVaMl+zUtoI3WOaE2",
	"M0bOGu8FnxOanPrEO5iOts5Ca3Fj5jJLRzEHnRmWpJSMa3xYVHqZfEnSNZU0NezvYAjcZPHF00gK3nYq",
	"SH49wD853iUokJs46uUA2XsZwvUl97ngSWE4SvagifYITuWgMTduthuyHY4PPVUoM6Mkg+RWtciNBpz6",
	"VoTHRwa8JSnW67kWPV57ZZ+cMisZJw9amR366e0rJ2UUQsay6TXH3UkcErRksEHfvfgmmTFvuRcyn7QL",
	"t4H+81oevMgZiGX+LMceAl+LyOvUp4WuNenOVz2iHRg6puaDIYOFG2pO2il4P73Rzyuf+8Yn88XDin90",
	"gf3MW4pI9isY2MQgPXh0O7P6e2D/puRrsZ26qZ0T4jf2T4CaKEoqlmc/N1GZnezrkvJ0HbVnLUzHX5o6",
	"UfXi7P0UTVq3ppxDHh3OyoK/eJkxItX+U0ydp2B8YttuQni73M7iGsDbYHqg/IQGvUznZoIQq+2At9qh",
	"Ol+JjOA8TYa0hnv2CwkE6Z5/q0DpWPAQfrBOXai3NO9dm22YAM/wtXhAvrOlYNdAWulv8JVWZxFwuW+t",
	"Qr0qc0GzOSZyOP/m5BWxs9o+ttqJzXa8wkdKexUdfVWQ/HGae7AvXBIPXZg+zrgvtVm10piNSmlalLHg",
	"UNPi3DfACNRQh4/PlxA7B+RlUNTRxpGaIQw9LJkszIurHs3KLkgT5j9a03SNT7IWSx0m+elpuj1VqqA0",
	"Xl3ips6IiOfOwO0yddtE3XMizLv5kilbARQ20I5HrYOznUrAx6e2lycrzi2lRGWPseQBN0G7B846ang1",
	"fxSyDuKvKZDbLPfXzVp+hr2iCZq6KdB7NfFsdGNdusRXdk4pF5ylmB4pdjW7UqFTbGATMkl1laz+iLsT",
	"Gjlc0cTrtZucw+JgKnbPCB3i+kr44KvZVEsd9k+NNSnXVJMVaOU4G2RzXz/A6QEZV+AyXGJh2YBPCtmy",
	"KyKHjJqqk9qkcU0ywrCYgYfdt+bba/fsR3/xC8ZRwHdoc67pVlOHlQy1eRUwTVYClFtPOzZYvTN9DjBM",
	"NoPthwNf+dBmg0GznFm2tUH3hzrxFmlnATZtX5i2Lk9Q/XPLA9lOelKWbtLh6hJReUBv+SCCI5bFxJt2",
	"AuTW44ejjZDbqCsJ3qeG0GCDhmgo8R7uEUZdaaFTxccIrZaisAWxLlzRDAaMR8B4xTg0dTkjF0QavRJw",
	"Y/C8DvRTqaTaioCTeNo50BytzzGGprQzPdx2qG4uIYMSXKOfY3gbmyIRA4yjbtAIbpTv6nKghroDYeIF",
	"1iF2iOyXfECpyglRGUYUdIpAxBiHYdy+zEz7Augfg75MZLtrSe3Juc5NNBQkuqiyFeiEZlksI9XX+JXg",
	"V59cCraQVnViyrIkKeZEaSeJ6VObmygVXFXFyFy+wS2nC6qqRKghrOzidxiDUBY7/DeWlXF4Z5wTxrXd",
	"AL3HhStDcU25uT1ST+o1NJ0otkqmYwLvlNujo5n6ZoTe9L9TSs/Fqg3IJ04NMcblwj2K8bdvzMURZk7o",
	"pRq1V0ud2ACd7oSvhYfPxjokt82V8Crr5R5FY09da2tcATFcNWuOl9+A622QEIPa+9VaD4cccNNBf3Gq",
	"XeSapmSUBQ1GA1nvHRv3g1DENadDHjvWYcd87vWeJhn25GwcexSh3hWsD9D33s+UlJQ503jDLPqYdR7p",
	"w+rCsUPXbHB3Ec7Pe1Bj9/1myCebKMZXORD83q0zdAEunL0uNG/X6r2S/JPQ/urqvNrxaq/46Pr73gk4",
	"1edVgw4qbc9dTnu7TPcm//5n68NGgGu5+xOocHub3qvS1Jd2rXqqaULqdMiT0iO3bsV4waXh/EdNziOk",
	"p1Io1qTgjlVimujrdo7FlIL8Tf2xvKPJBlKNedcbA7oEuE42JzNZUOXvX3mQBt6OtUugS380lvOon2x9",
	"z4XWC0sKQutsouqD6Rl+Tmo3KWRKmAF3BdwV2msHHEx2e14uIdVssycM7B9r4EGI0dwrIWzB3CAqjNVu",
	"tJhF5PoqtgagsSitUXiCbH63BmcoCOQCdvcUaVFDNHP23N8rN0kggRhA7pAYEhEq5oZgtabOMsxUTRmI",
	"Be/2Y7tDk4prsOhOENR4w7k8SZobtwl0HJkyXvVj0lym67XCf9EjdChSrF80YFjYfok1GlRdEM8noAif",
	"pOS0n6bv0iWwwKC92lDgU1mA8r/5CF07S84uICwLhGaZSyoz3yKqZ/AqjGTkPuqFd/mE912gl/XMrHHS",
	"7Af0RBI/oStumgsjfyVD/sxtv8iwej56f9iU3+jxaeBagnTl01DYy4WCRAvv1DkGxxgqXKX3myBBDSZb",
	"tMANpkB52+R4waSzFFOeUOfZEi6QSCiogU4GmViG5xxD9gv73Uew+KSje9UpNb3uTzTv3XOZ6iExpPol",
	"cbfl/siYm2hWGOe2WKuKpWXhBpWh6r+UIqtSe0GHB6PWPk1OejTCSqJKibS/yo5AHIQXXsDu0Er8PkO/",
	"38EQaCs5WdCDcP7OJt+prknF4F7dCXifU00zn5VC5MmAZv+0n0umS/EXLL2AjJibwruxDRQpIfdRoVyb",
	"bi/XO587pSyBQ/bggJATbh2HvRW3ncy4Mzm/p8fm3+KsWWXTOzkN0sF7HvfAxMRL8pbczA8zzsMUGFZ3",
	"y6nsIHsylWwH8thIehkp2XMw9Qnat6t2y6g0RGWhiMkkTYWQPU4htT9IUwOh8QnpFy4aqcRx3iEi2w5t",
	"8Q6Ya5fbcEB2q27s1YgGYE5ATm/4iFIpUk2kva4enqK1SiIGeEK1KFjan6Edv4IlpoiiRe3rXrONe4eb",
	"x62gn3v1DhoSBvTIMc/KNz+enZOFyHaf2R9v0H6/p8xKxNOhpllXBcZHVQ3gNGpWG7di2UpXi6m2rDrn",
	"bH8/h/KbJnutWy0YJtm4rgvGEivHJTSC5NNa2Jq3CnuyTpEdnw/MHo+U2seWeehTllcSHD3bEled0hcl",
	"1WvPfE3z/pPIiNegMATHlk+gyj7gvSLB1dfq3mqiTHLYQMvo50KPqjQFpdgGwtpctjPJAEpUq3WFvZg1",
	"K7wVOhKAW3sS2EOmYDcqEljE2p0ie+77qHSy5Yk9JmrqUTIQbVhW0Rb+1C3KJg1VTIpwcA/rRE5xbSYR",
	"X9wYi9hrf0aaj55LHjc/h5Fv9VseZ8tqnZ8lwuZkq5Je8mHZN6IuqW2it18HwcGI6kSiDvjbYlGopE5Z",
	"GbsSXdCcJ34zY1PAqvMMDApN1WMOlNyt6ec2T65BoozT5M1SBU06SX3LXYTZBMWlxvXLYSaxJkRBWgMw",
	"6qM8v+oehh8aPjatzJXvsAe80OwQFLryL0AHzmeWW36okRIsZZASWsvfZ8lwC2wYf7BF9tYzy7R5Ha0P",
	"antfAjOVelFbf4aqz3WNRJg2THBMpdg3Lil0CMCKDCHhmIMuNzT/9AYizCd3gvhw5bzjCw0tDCGSLSrV",
	"zZx5X9FJcwfWhLubmr9Bg9Y/wOxR1JPDDeVulFrK8vZvZJk0N0y8ruOJQ5JLHNO6fjz6gixcIGIpIWWq",
	"e1Nd+mTxtUIda6c0Vd7HNfj71vmz0Lcg46UX/MjrJvE0vtZWvIGwOaKfmakMnNwolceor0cWEfzFeFSY",
	"EWjPdXHR8gmxifw7zs5Cwh37hgRentf0DennOpq6POv/YC6dSkF/nZNv6xZuIxd1s7apjk195I5lJ57i",
	"jxRPOm66o0OURQhm7CcIKvn10a9EwhJLcgny8CFO8PDh3DX99XH7sznODx/Gi8l/KlcoiyM3hps3RjE/",
	"DwXH2ACQgTiszn5ULM/2EUYrqq4paodxY7+4uNrPUlbvF2ux7h9VV9roOk6Y3U1AxETW2po8mCqIl5sQ",
	"Kue6RQLjUBucVpLpHab78s859kvUaeu72ifC+dTUCWLc3afFBdQJ4xoPikr52/U7QXO8j4xMjS6wGguI",
	"f7OlRZmDOyhf3Vv8DZ58+TQ7evLob4svj54dpfD02fOjI/r8KX30/MkjePzls6dH8Gj5xfPF4+zx08eL",
	"p4+ffvHsefrk6aPF0y+e/+2e4UMGZAvozCeXmP0frD2ZnLw5Tc4NsA1OaMmw8P4VWreWwhfQoimeRCgo",
	"y2fH/qf/7U/YQSqKZnj/68zFrs/WWpfq+PDw8vLyIOxyuEKTaaJFla4P/Tz9eu1vThtNJT7KcUdtaJlX",
	"tnhSOMFvb785Oycnb04PgnrAx7Ojg6ODR1gutgROSzY7nj3Bn/D0rHHfDx2xzY4/Xs1nh2ugOXoYmT8K",
	"0JKl/pMEmu3c/9UlXa1AHriqYuanzeNDL1YcfnSm46uxb4dhgv7Djy0Le7anJybwPvzo81KNt24lfnKe",
	"BUGHiVCMNTtcYLj71KaggsbDS8HHhjr8iOLy4O+HLgY4/hGfLfY8HHo3lHjLFpY+6q2BtdMjpTpdV+Xh",
	"R/wP0mcAlvW4D8CdrWLp8L4D7cNlbQ/nT1o7ktZ0fprZ5j3/RpdxzqbgPX43rQIJ+OnMqzEDxVxaQuQY",
	"5jg0B9qH1jXsWssKwnSxY4mVruaRYr1Ltqpkpwh5p7w5YYr859mPr4mQxL2P39D0ovY0JadLm85Iig3D",
	"ILwsiNw0Pevl/FaB3DXrcVdnuABf4sSFNhZqVbbjgGqx/APmikFAkWE8Pjq6szKDvZ29sqr/ejgP121G",
	"7PHXF/7WbJGh4ZNPjx7d2dra4QW3Xlh3uN6qTjl695lbgNhbDhf09C+7oBf4mjYUv2Q8szViNMUzbQ8o",
	"ru/Lv+z6NCu8FwHHclugUBh4docH7NMToZHJaU6wpV3Nk7/sas5AblgK5ByKUkgqWb4jP/E6nj7Iode/",
	"5n7iF1xcco8II3RXRUHlzl2BlHRZlb8G7HUYVDw10h5dKXRywKoFs/nMBcvCtgTJCuCYh+fK3cStX+v7",
	"2XK7Q1tGv//zjruQ1xxiDqQ/cQVWBetzXex4OnRpY+OzHU/f1jdp7wbB0/vHUXp/M2t4kaegh+EfzPKn",
	"8ehnnxILn/aAfrIT9RYKsQFVV45viNNIWeYVY4vIS1EENHwweLI+oAogLr06y0R/Jm+VaQbvibJ7zsRN",
	"q7CP+I9OgnOPw7cdfkrR6roodCfAzE51L7ZBs38xgn8xgjtkBLqSfPCIBvcXBkFAaT0+SUrTNYzxg/5t",
	"Gb50SxFzJjwbYRYur84Qrzhr84o/9Xv3w5/ifn9BuT/PrR23frhU5gxkTQWU91Md/YsL/I/hAjZnm9Mp",
	"zYmGPFfh2dcCz751K3Cxbdy6e0zkA92SxrGfDz+2S2q1lHtqXelMXAZ90ThsPRv6Or+6yGzr78NLynSy",
	"FNLFtWHK835nDTQ/dBmbOr82SRJ6XzDzQ/Bj6OgW/fWwrigR/dhVvMa+OsXjQCPvWLzn8yFsNXDrtYrt",
	"GmNNaPxATlqbPd59MHwM8xo7Jtvo8o8PDzGmZC2UPpxdzT929Pzhxw816fiEl7NSsg3mz/hw9f8DAAD/",
	"/3+psT1qygAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
