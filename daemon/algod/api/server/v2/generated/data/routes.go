// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
