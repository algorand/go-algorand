// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"DwAA//9MN8ohSs0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
