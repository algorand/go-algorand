// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//RWVdBMHlAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
