// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"yQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
