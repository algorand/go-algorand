// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9e5PbtrIg/lVQurfKj584YztOzol/deruxE5yZuMkroyTu/fa3gQiWxLOUAAPAM5I",
	"8fq7b6EbIEESlKiZiZNsnb/sEfFoNBqNfqH7/SxXm0pJkNbMnr2fVVzzDVjQ+BfPc1VLm4nC/VWAybWo",
	"rFBy9ix8Y8ZqIVez+Uy4Xytu17P5TPINtG1c//lMwz9roaGYPbO6hvnM5GvYcDew3VWudTPSNlupzA9x",
	"RkOcv5h92POBF4UGY4ZQfi/LHRMyL+sCmNVcGp67T4ZdC7tmdi0M852ZkExJYGrJ7LrTmC0FlIU5CYv8",
	"Zw16F63STz6+pA8tiJlWJQzhfK42CyEhQAUNUM2GMKtYAUtstOaWuRkcrKGhVcwA1/maLZU+ACoBEcML",
	"st7Mnr2ZGZAFaNytHMQV/nepAX6FzHK9Ajt7N08tbmlBZ1ZsEks799jXYOrSGoZtcY0rcQWSuV4n7Nva",
	"WLYAxiX74avn7JNPPvncLWTDrYXCE9noqtrZ4zVR99mzWcEthM9DWuPlSmkui6xp/8NXz3H+C7/Aqa24",
	"MZA+LGfuCzt/MbaA0DFBQkJaWOE+dKjf9UgcivbnBSyVhol7Qo3vdFPi+X/XXcm5zdeVEtIm9oXhV0af",
	"kzws6r6PhzUAdNpXDlPaDfrmUfb5u/eP548fffi3N2fZf/s/P/3kw8TlP2/GPYCBZMO81hpkvstWGjie",
	"ljWXQ3z84OnBrFVdFmzNr3Dz+QZZve/LXF9inVe8rB2diFyrs3KlDOOejApY8rq0LEzMalk6NuVG89TO",
	"hGGVVleigGLuuO/1WuRrlnNDQ2A7di3K0tFgbaAYo7X06vYcpg8xShxcN8IHLuiPi4x2XQcwAVvkBlle",
	"KgOZVQeup3DjcFmw+EJp7ypz3GXFXq+B4eTuA122iDvpaLosd8zivhaMG8ZZuJrmTCzZTtXsGjenFJfY",
	"36/GYW3DHNJwczr3qDu8Y+gbICOBvIVSJXCJyAvnbogyuRSrWoNh12uwa3/naTCVkgaYWvwDcuu2/X9e",
	"fP8dU5p9C8bwFbzi+SUDmasCihN2vmRS2Yg0PC0hDl3PsXV4uFKX/D+McjSxMauK55fpG70UG5FY1bd8",
	"Kzb1hsl6swDttjRcIVYxDbbWcgwgGvEAKW74djjpa13LHPe/nbYjyzlqE6Yq+Q4RtuHbvz2ae3AM42XJ",
	"KpCFkCtmt3JUjnNzHwYv06qWxQQxx7o9jS5WU0EulgIK1oyyBxI/zSF4hDwOnlb4isAJg4yC08xyABwJ",
	"2wTNuNPtvrCKryAimRP2o2du+NWqS5ANobPFDj9VGq6Eqk3TaQRGnHq/BC6VhazSsBQJGrvw6HAMhtp4",
	"DrzxMlCupOVCQuGYMwKtLBCzGoUpmnC/vjO8xRfcwGdPx+749uvE3V+q/q7v3fFJu42NMjqSiavTffUH",
	"Ni1ZdfpP0A/juY1YZfTzYCPF6rW7bZaixJvoH27/Ahpqg0ygg4hwNxmxktzWGp69lQ/dXyxjF5bLguvC",
	"/bKhn76tSysuxMr9VNJPL9VK5BdiNYLMBtakwoXdNvSPGy/Nju02qVe8VOqyruIF5R3FdbFj5y/GNpnG",
	"PJYwzxptN1Y8Xm+DMnJsD7ttNnIEyFHcVdw1vISdBgctz5f4z3aJ9MSX+lf3T1WVrretlinUOjr2VzKa",
	"D7xZ4ayqSpFzh8Qf/Gf31TEBIEWCty1O8UJ99j4CsdKqAm0FDcqrKitVzsvMWG5xpH/XsJw9m/3baWt/",
	"OaXu5jSa/KXrdYGdnMhKYlDGq+qIMV450cfsYRaOQeMnZBPE9lBoEpI20ZGScCy4hCsu7UmrsnT4QXOA",
	"3/iZWnyTtEP47qlgowhn1HABhiRganjPsAj1DNHKEK0okK5KtWh+uH9WVS0G8ftZVRE+UHoEgYIZbIWx",
	"5gEun7cnKZ7n/MUJ+zoeG0VxJcuduxxI1HB3w9LfWv4Wa2xLfg3tiPcMw+1U+sRtTUCDE/PvguJQrVir",
	"0kk9B2nFNf67bxuTmft9Uuc/B4nFuB0nLlS0POZIx8FfIuXmfo9yhoTjzT0n7Kzf92Zk40bZQzDmvMXi",
	"XRMP/iIsbMxBSoggiqjJbw/Xmu9mXkjMUNgbksmPBohCKr4SEqGdO/VJsg2/pP1QiHdHCGAavYhoiSTI",
	"xoTqZU6P+pOBneVPQK2pjQ2SqJNUS2Es6tXYmK2hRMGZy0DQManciDImbPieRTQwX2teES37LyR2CYn6",
	"PDUiWG958U68E5MwR+w+2miE6sZs+SDrTEKCXKMHwxelyi//zs36Dk74Iow1pH2chq2BF6DZmpt14uD0",
	"aLsdbQp9u4ZIs2wRTXXSLPGlWpk7WGKpjmFdVfWcl6WbesiyeqvFgScd5LJkrjGDjUCDuVccycJO+hf7",
	"kudrJxawnJflvDUVqSor4QpKp7QLKUHPmV1z2x5+HDnoNXiODDhmZ4FFq/FmJjSx6cYWoYFtON5AG6fN",
	"VGW3T8NBDd9ATwrCG1HVaEWIFI3zF2F1cAUSeVIzNILfrBGtNfHgJ25u/wlnlooWRxZAG9x3Df4aftEB",
	"2rVu71PZTqF0QTZr634TmuVK0xB0w/vJ3X+A67YzUef9SkPmh9D8CrThpVtdb1EPGvK9q9N54GQW3PLo",
	"ZHoqTCtgxDmwH4p3oBNWmu/xP7xk7rOTYhwltdQjUBhRkTu1oIvZoYpmcg3Q3qrYhkyZrOL55VFQPm8n",
	"T7OZSSfvS7Ke+i30i2h26PVWFOautgkHG9ur7gkh21VgRwNZZC/TieaagoDXqmLEPnogEKfA0Qghanvn",
	"19oXapuC6Qu1HVxpagt3shNunMnM/gu1feEhU/ow5nHsKUh3C5R8AwZvNxkzTjdL65c7Wyh9M2mid8FI",
	"1nobGXejRsLUvIckbFpXmT+bCY8FNegN1AZ47BcC+sOnMNbBwoXlvwEWjBv1LrDQHeiusaA2lSjhDkh/",
	"nRTiFtzAJ0/Yxd/PPn385Ocnn37mSLLSaqX5hi12Fgy7781yzNhdCQ+S2hFKF+nRP3safFTdcVPjGFXr",
	"HDa8Gg5Fvi/SfqkZc+2GWOuiGVfdADiJI4K72gjtjNy6DrQXsKhXF2Ct03RfabW8c244mCEFHTZ6VWkn",
	"WJiun9BLS6eFa3IKW6v5aYUtQRYUZ+DWIYzTATeLOyGqsY0v2lkK5jFawMFDcew2tdPs4q3SO13fhXkD",
	"tFY6eQVXWlmVqzJzcp5QCQPFK9+C+RZhu6r+7wQtu+aGubnRe1nLYsQOYbdy+v1FQ7/eyhY3e28wWm9i",
	"dX7eKfvSRX6rhVSgM7uVDKmzYx5ZarVhnBXYEWWNr8GS/CU2cGH5pvp+ubwba6fCgRJ2HLEB42Zi1MJJ",
	"PwZyJSmY74DJxo86BT19xAQvkx0HwGPkYidzdJXdxbEdt2ZthES/vdnJPDJtORhLKFYdsry9CWsMHTTV",
	"PZMAx6HjJX5GW/0LKC3/SunXrfj6tVZ1defsuT/n1OVwvxjvDShc32AGFnJVdgNIVw72k9Qaf5cFPW+M",
	"CLQGhB4p8qVYrW2kL77S6je4E5OzpADFD2QsKl2focnoO1U4ZmJrcweiZDtYy+Ec3cZ8jS9UbRlnUhWA",
	"m1+btJA5EnKIsU4YomVjuRXtE8KwBTjqynntVltXDAOQBvdF2zHjOZ3QDFFjRsIvmrgZakXTUThbqYEX",
	"O7YAkEwtfIyDj77ARXKMnrJBTPMiboJfdOCqtMrBGCgyb4o+CFpoR1eH3YMnBBwBbmZhRrEl17cG9vLq",
	"IJyXsMsw1s+w+9/8ZB78DvBaZXl5ALHYJoXevj1tCPW06fcRXH/ymOzIUkdU68RbxyBKsDCGwqNwMrp/",
	"fYgGu3h7tFyBxpCS35TiwyS3I6AG1N+Y3m8LbV2NRLB7Nd1JeG7DJJcqCFapwUpubHaILbtGHVuCW0HE",
	"CVOcGAceEbxecmMpDErIAm2adJ3gPCSEuSnGAR5VQ9zIPwUNZDh27u5BaWrTqCOmriqlLRSpNaBHdnSu",
	"72DbzKWW0diNzmMVqw0cGnkMS9H4HlleA8Y/uG38r96jO1wc+tTdPb9LorIDRIuIfYBchFYRduMo3hFA",
	"hGkRTYQjTI9ymtDh+cxYVVWOW9islk2/MTRdUOsz+2Pbdkhc5OSge7tQYNCB4tt7yK8JsxS/veaGeTiC",
	"ix3NORSvNYTZHcbMCJlDto/yUcVzreIjcPCQ1tVK8wKyAkq+SwQH0GdGn/cNgDveqrvKQkaBuOlNbyk5",
	"xD3uGVrheCYlPDL8wnJ3BJ0q0BKI731g5AJw7BRz8nR0rxkK50puURgPl01bnRgRb8MrZd2Oe3pAkD1H",
	"nwLwCB6aoW+OCuyctbpnf4r/AuMnaOSI4yfZgRlbQjv+UQsYsQX7N07Reemx9x4HTrLNUTZ2gI+MHdkR",
	"w/Qrrq3IRYW6zjewu3PVrz9B0nHOCrBclFCw6AOpgVXcn1EIaX/Mm6mCk2xvQ/AHxrfEckKYThf4S9ih",
	"zv2K3iZEpo670GUTo7r7iUuGgIaIZyeCx01gy3Nb7pygZtewY9eggZl6QSEMQ3+KVVUWD5D0z+yZ0Xtn",
	"k77Rve7iCxwqWl4q1ox0gv3wve4pBh10eF2gUqqcYCEbICMJwaTYEVYpt+vCP38KD2ACJXWA9EwbXfPN",
	"9X/PdNCMK2D/pWqWc4kqV22hkWmURkEBBUg3gxPBmjl9cGKLIShhA6RJ4peHD/sLf/jQ77kwbAnX4c2g",
	"a9hHx8OHaMd5pYztHK47sIe643aeuD7QceUuPq+F9HnK4YgnP/KUnXzVG7zxdrkzZYwnXLf8WzOA3snc",
	"Tll7TCPTor1w3Em+nG580GDduO8XYlOX3N6F1wqueJmpK9BaFHCQk/uJhZJfXvHy+6YbvoeE3NFoDlmO",
	"r/gmjgWvXR96+OfGEVK4A0xB/1MBgnPqdUGdDqiYbaSq2GygENxCuWOVhhzovZuTHE2z1BNGkfD5mssV",
	"Kgxa1Ssf3ErjIMOvDZlmdC0HQySFKruVGRq5UxeAD1MLTx6dOAXcqXR9CzkpMNe8mc+/cp1yM0d70PcY",
	"JJ1k89moxuuQetVqvISc7rvNCZdBR96L8NNOPNGVgqhzss8QX/G2uMPkNve3Mdm3Q6egHE4cRfy2H8eC",
	"fp26Xe7uQOihgZiGSoPBKyo2Uxn6qpbxG+0QKrgzFjZDSz51/Xnk+P0wqi8qWQoJ2UZJ2CXTkggJ3+LH",
	"5HHCa3KkMwosY337OkgH/h5Y3XmmUONt8Yu73T+hfY+V+Urpu3KJ0oCTxfsJHsiD7nY/5U39pLwsE65F",
	"/4KzzwDMvAnWFZpxY1QuUGY7L8zcRwWTN9I/9+yi/1XzLuUOzl5/3J4PLU4OgDZiKCvGWV4KtCAraayu",
	"c/tWcrRRRUtNBHEFZXzcavk8NEmbSRNWTD/UW8kxgK+xXCUDNpaQMNN8BRCMl6ZercDYnq6zBHgrfSsh",
	"WS2Fxbk27rhkdF4q0BhJdUItN3zHlo4mrGK/glZsUduu9I8PlI0VZekdem4appZvJbesBG4s+1bI11sc",
	"Ljj9w5GVYK+VvmywkL7dVyDBCJOlg82+pq8Y1++Xv/Yx/hjuTp9D0GmbMWHmltlJkvK/7//Hszdn2X/z",
	"7NdH2ef/3+m7908/PHg4+PHJh7/97f90f/rkw98e/Me/p3YqwJ56PushP3/hNePzF6j+RKH6fdg/mv1/",
	"I2SWJLI4mqNHW+w+porwBPSgaxyza3gr7VY6QrripSgcb7kJOfRvmMFZpNPRo5rORvSMYWGtRyoVt+Ay",
	"LMFkeqzxxlLUMD4z/VAdnZL+7Tmel2UtaSuD9E3vMEN8mVrOm2QElKfsGcOX6msegjz9n08+/Ww2b1+Y",
	"N99n85n/+i5ByaLYpvIIFLBN6YrxI4l7hlV8Z8CmuQfCngylo9iOeNgNbBagzVpUH59TGCsWaQ4Xnix5",
	"m9NWnksK8HfnB12cO+85UcuPD7fVAAVUdp3KX9QR1LBVu5sAvbCTSqsrkHMmTuCkb/MpnL7og/pK4MsQ",
	"mKqVmqINNeeACC1QRYT1eCGTDCsp+uk9b/CXv7lzdcgPnIKrP2cqovfe11++ZqeeYZp7lNKCho6SECRU",
	"af94shOQ5LhZ/KbsrXwrX8ASrQ9KPnsrC2756YIbkZvT2oD+gpdc5nCyUuxZeI/5glv+Vg4krdHEitGj",
	"aVbVi1Lk7DJWSFrypGRZwxHevn3Dy5V6+/bdIDZjqD74qZL8hSbInCCsapv5VD+ZhmuuU74v06R6wZEp",
	"l9e+WUnIVjUZSEMqIT9+mufxqjL9lA/D5VdV6ZYfkaHxCQ3cljFjVfMezQko/kmv29/vlL8YNL8OdpXa",
	"gGG/bHj1Rkj7jmVv60ePPsGXfW0OhF/8le9oclfBZOvKaEqKvlEFF05qJcaqZxVfpVxsb9++scAr3H2U",
	"lzdo4yhLht06rw7DAwMcql1A88R5dAMIjqMfB+PiLqhXSOuYXgJ+wi3sPsC+1X5F7+dvvF0H3uDz2q4z",
	"d7aTqzKOxMPONNneVk7ICtEYRqxQW/WJ8RbA8jXklz5jGWwqu5t3uoeAHy9oBtYhDOWyoxeGmE0JHRQL",
	"YHVVcC+Kc7nrp7Ux9KICB/0BLmH3WrXJmI7JY9NNq2LGDipSaiRdOmKNj60fo7/5PqosPDT12Unw8WYg",
	"i2cNXYQ+4weZRN47OMQpouik/RhDBNcJRBDxj6DgBgt1492K9FPLEzIHacUVZFCKlVik0vD+59AfFmB1",
	"VOkzD/oo5GZAw8SSOVV+QRerV+81lytw17O7UpXhJWVVTQZtoD60Bq7tArjda+eXcUKKAB2qlNf48hot",
	"fHO3BNi6/RYWLXYSrp1WgYYiauOjl0/G488IcChuCE/o3moKJ6O6rkddIuNguJUb7DZqrQ/Ni+kM4aLv",
	"G8CUpera7YuDQvlsm5TUJbpfasNXMKK7xN67ifkwOh4/HOSQRJKUQdSyL2oMJIEkyNQ4c2tOnmFwX9wh",
	"RjWzF5AZZiIHsfcZYRJtj7BFiQJsE7lKe891x4tKWYHHQEuzFtCyFQUDGF2MxMdxzU04jpgvNXDZSdLZ",
	"b5j2ZV9quvMoljBKitokngu3YZ+DDvR+n6AuZKULqehipX9CWjmne+HzhdR2KImiaQElrGjh1DgQSpsw",
	"qd0gB8f3yyXyliwVlhgZqCMBwM8BTnN5yBj5RtjkEVJkHIGNgQ84MPtOxWdTro4BUvqETzyMjVdE9Dek",
	"H/ZRoL4TRlXlLlcx4m/MAwfwqShayaIXUY3DMCHnzLG5K146Nud18XaQQYY0VCh6+dB86M2DMUVjj2uK",
	"rvyj1kRCwk1WE0uzAei0qL0H4oXaZvRCOamLLLYLR+/Jtwv4Xjp1MCkX3T3DFmqL4Vx4tVCs/AFYxuEI",
	"YES2l60wSK/Yb0zOImD2Tbtfzk1RoUGS8YbWhlzGBL0pU4/IlmPkcj9KL3cjAHpmqLZWgzdLHDQfdMWT",
	"4WXe3mrzNm1qeBaWOv5jRyi5SyP4G9rHugnh/t4m/htPLhZO1EfJhDe0LN0mQyF1rijr4DEJCvvk0AFi",
	"D1Zf9eXAJFq7sV5dvEZYS7ESx3yHTskh2gyUgEpw1hFNs8tUpIDT5QHv8YvQLTLW4e5xuXsQBRBqWAlj",
	"oXUahbig38MczzF9slLL8dXZSi/d+n5Qqrn8yW2OHTvL/OgrwAj8pdDGZuhxSy7BNfrKoBHpK9c0LYF2",
	"QxSp2IAo0hwXp72EXVaIsk7Tq5/3mxdu2u+ai8bUC7zFhKQArQUWx0gGLu+ZmmLb9y74JS34Jb+z9U47",
	"Da6pm1g7cunO8Sc5Fz0Gto8dJAgwRRzDXRtF6R4GGT04H3LHSBqNYlpO9nkbBoepCGMfjFILz97Hbn4a",
	"KbmWKA1g+oWgWq2gCOnNgj9MRknkSiVXURWnqtqXM++EUeo6zDy3J2mdD8OHsSD8SNzPhCxgm4Y+1goQ",
	"8vZlHSbcw0lWICldSdoslERNHOKPLSJb3Uf2hfYfACSDoF/3nNltdDLtUrOduAEl8MLrJAbC+vYfy+GG",
	"eNTNx8KnO5lP9x8hHBBpStiosMkwDcEIA+ZVJYptz/FEo44awfhR1uURaQtZix/sAAa6QdBJguuk0vah",
	"1t7Afoo676nTyij22gcWO/rmuX+AX9QaPRidyOZh3vZGV5u49m9+urBK8xV4L1RGIN1qCFzOMWiIsqIb",
	"ZgWFkxRiuYTY+2Ju4jnoADewsRcTSDdBZGkXTS2k/expiowOUE8L42GUpSkmQQtjPvnXQy9XkOkjU1Jz",
	"JURbcwNXVfK5/jewy37iZe2UDKFNG57r3U7dy/eIXb/afAM7HPlg1KsD7MCuoOXpB0AaTFn6m08mSmB9",
	"z3RS/KN62dnCI3bqLL1Ld7Q1vijDOPG3t0ynaEF3Kbc5GG2QhINlym5cpGMT3OmBLuL7pHxoE0RxWAaJ",
	"5P14KmFCCcvhVdTkojhEu6+Bl4F4cTmzD/PZ7SIBUreZH/EArl81F2gSzxhpSp7hTmDPkSjnVaXVFS8z",
	"Hy8xdvlrdeUvf2wewis+siaTpuzXX569fOXB/zCf5SVwnTWWgNFVYbvqT7MqKuOw/yqhbN/e0EmWomjz",
	"m4zMcYzFNWb27hmbBkVR2viZ6Cj6mItlOuD9IO/zoT60xD0hP1A1ET+tz5MCfrpBPvyKizI4GwO0I8Hp",
	"uLhplXWSXCEe4NbBQlHMV3an7GZwutOno6WuAzwJ5/oeU1OmNQ7pE1ciK/LBP/zOpaevlO4wf/8yMRk8",
	"9NuJVU7IJjyOxGqH+pV9YeqEkeD1y+oXdxofPoyP2sOHc/ZL6T9EAOLvC/876hcPHya9h0kzlmMSaKWS",
	"fAMPmlcWoxvxcRVwCdfTLuizq00jWapxMmwolKKAArqvPfautfD4LPwvBZTgfjqZoqTHm07ojoGZcoIu",
	"xl4iNkGmGyqZaZiS/ZhqfATrSAuZvS/JQM7Y4RGS9QYdmJkpRZ4O7ZAL49irpGBK15hh4xFrrRuxFiOx",
	"ubIW0Viu2ZScqT0gozmSyDTJtK0t7hbKH+9ain/WwEThtJqlAI33Wu+qC8oBjjoQSNN2MT8w+ana4W9j",
	"B9njbwq2oH1GkL3+uxeNTyksNFX058gI8HjGAePeE73t6cNTM71mW3dDMKfpMVNKpwdG5511I3MkS6EL",
	"ky21+hXSjhD0HyUSYQTHp0Az768g90Tu+RL5dHklZymD3IORcVZsoDPJNQ+zOBBqOZhx1KHduLHbGvLt",
	"epPgHaK66Sr6GP3dWiUPaGmKn93kTk8zl+Po6Sa6t0lnjfZIHtMF40CH7guFEQ6HpzyKycVqLCEIiks6",
	"1pSMovPQLc0c4ielpzR+yxw8zINnuCW/XvBUqRqnkjmYou3thGtZxULnsAGmSbVAs7MokLxpKyihXQW6",
	"dYUMk+PeUL2iaScrVq0ehRQVa1BzipYojUoMU8trLqmYuetHbNP3NkCRAK7XtdKYjtKkI8sKyMUmaRV+",
	"+/ZNkQ+jiAqxElSnuzYQFYL2AzHKeYlU5ItpNwlEPGrOl+zRPKpG73ejEFfCiEUJ2OIxtVhwg7d245Vv",
	"urjlgbRrg82fTGi+rmWhobBrQ4g1ijUqMMqaTXzkAuw1gGSPsN3jz9l9jAw14goeOCx6WWz27PHnGNdD",
	"fzxKXfa+zvq+m6PAqyPEjKfpGENjPWdf7EL19vRVQmx6/JLac5qo65SzhC39vXb4LOH14RXkPeCVHhGS",
	"3efdvFMIJugH9OPSvxiI8ENOR5yh3IWblj1iYrn3GnR7KfkK0i9YNgfQRX2R0DDgobdlkvwlYKxWOyZs",
	"EjUbsNyxzpFX8Y4zExgsV5uNsBsf2mjUxpF6W4CaJg3DYam2UFErwBU+YoRwFQIke9bAj6zo8c3IqzaM",
	"4/4OvdgxWueMU3rUUrSx+6GiKTsP2ZexxFhTWYxw4+ZyS0dpG0P5l6zSQlq0ENV2mf2V5Wuuee4488kY",
	"uNnis6eJUl3dajbyOMA/Ot41GNBXadTrEbIP4pTvy+5LJbONO0vFgzYLRcQwRkOZ00GrY5Gz+4eeqhu4",
	"UbJRcqs75MajS+RWhCf3DHhLUmzWcxQ9Hr2yj06ZtU6TB6/dDv34w0svAG2UTpVUaI+7F4Y0WC3gCt8U",
	"pjfJjXnLvdDlpF24DfS/b4RYkIYjiTGc5aSOEvl896UTcArGT9+2ueHR9UxvNXtWUqUT9mBv2fzI8ZjH",
	"2SX7Hm4KqcNvI5ibjDYcZYiVkfcJ9ACh6fN7RFT1QaI975hkH//CNKCAZxV7+BCBfvhw7iX0X550PxN7",
	"f/gwnaI5aZR0v7ZYuI2yjn1Te/iFSpgIQ13HJuTKZ5BImGjHLin3wTHBhR9qzro19D6+FHE3L+DS8bjp",
	"U/D27Rv8EvCAf/QR8TszS9zA9h3H+GHv1hBNkkzRfI9eAnD2hdpOJZzeHRSI5w+AohGUTLQc4koGNVKT",
	"AQ0HI2oiGnWjLqBUTv+NyybFHo8/D57d4ud7sF2LsvipzX7Xu0g0l/k6GUe9cB1/Jhm9cwUTq0xWYllz",
	"KaFMDke67c9BBx5qyfwfauo8GyEntu3X6KXl9hbXAt4FMwAVJnToFbZ0E8RY7SYWaxJXlCtVMJynLfvR",
	"MsdhsetUkdHEC3AcdlNbH9mLr+V9SqalKDFQNe1Zx5aZ5nYkxRhWhA8VmNw4WKDdkJmBRgfNuNjgxWz4",
	"pioBT+YVaL7CrkpCrzsmmcORo5oezFTuE7bElB6K2VpLppbLaBkgrdBQ7uas4sbQII/csmCLc8+ePX70",
	"KGmRQ+xMWClhMSzz+3Ypj0+xCX3xZaioWMJRwB6G9UNLUcds7JBwfNXNf9ZgbIqn4gd624t+ZHdrU8XN",
	"pjrsCfsac0M5Iu4UA0BLakiz3E05Wlel4sUc0z+//vLsJaNZqQ8V2aeKnys0JHbJP+n5mZ6CNeS+Gskt",
	"NH2c/clO3KqNzZoCnansja5FW0JU9KKS0I4XY+eEvSDrrgkGOpqEYRJxvYEiqgdKSjwSh/uPtTxfo22y",
	"IwGN88rppWoDO2udStH7zKY+FDJsB7evVkvFaudM2TXoa2EAcxbAFXQTRjbZU73ZPiSQ7C5P11ISpZwc",
	"IYw21aCORXsAjiTZEHaRhKyH+CMtU1Sx+tjKvRfYK/1apVcGuBcXEdIPhiTk7Fvv98i5VFLkaEJPSdKY",
	"3G6aB3VCXY2069PM/AlNHK5k8eHmtbTH4mg54sAIPeKGQRHRV7epRB30p4WtL0q3Ams8Z4NiHmqBe1+d",
	"kAZ8vS9HRDGfVDoR9pV8KtKEmBxJRpi3asTC+ZX79p23f2PakEsh0dLl0eb1M/KmlUag01wyYdlKgfHr",
	"6b53Mm9cnxPMY1nA9t3JS7US+YVY4RgUaOiWTVG1w6HOQoytj2l1bZ+7tr66QPNzJ2COJj2rKj/peKX4",
	"pCBpt3IUwanIrhBqEyG3GT8ebQ+57Q2Ox/vUERpcYVwfVHgPDwijqTbeHeVLp1sSRWELRm9Okz44IRNg",
	"vBQyeHfTF0SevBJwY7xTLp2+Jtfcku4wiae9Bl6OPBHBN9wUHnDbofq1FRxKcI1hjvFtbAuljzCOpkEr",
	"8XO5Y+FQOOqOhInnvGyCyxNlz1Gq8kJUgc+veoXQU4zDMe4sPCrtoOvgA8emO9YrOfYmGsviuKiLFdiM",
	"F0Uq+dcX+JXh1/CMDraQ102Zrub9ZDeL+5Da/ES5kqbe7JkrNLjldIUw3BjYLMpEYO2L5iMUzQ5jLqLF",
	"Dv9N1aga3xnvNT/63XKIIS+OK10wfIedknodTWdGrLLpmMA75fboaKe+GaG3/e+U0sOD5j/Ee+Uel4v3",
	"KMXfvnQXR5zaeBDBT1dLk3kYo+UVfg8poZqcmV2uhFfZoBIbRj3g5iW2rAd8aJgE/IqXI7kCYl8J3a/k",
	"PxjLGJCPJrjg1icws5ztZUGjSaEomrrnfRm6EMciqCmA+u68Fn6texE67rv7puOpo/C1llmMeuhu5kRr",
	"N/hYL9o3V2NJJEIlE/weV0zxUTxznygfroSqQ2BYiBIPKiH96pMUdSqjjKw/+fbi9/ZajPpYXvsKv7RM",
	"r5N/8xN5YRlIq3d/AI/LYNP7ZXcS0i6Zp9omrCkOOalYZOdWnFLlJ1VQxsuGwVZGrKVDS4MCPQOyejFF",
	"HBjg48N8dl4cdWGmihLNaJTUsXspVmuLNQ3+DrwA/epAzYa2TgMesUoZ0dZoLd1gPknuGoc7mfocwxGw",
	"iGtODMcK8bFXkFsszNsG12mAYypQuMmC0+dftRvG1enm1Yov2bCvTsOwGu+BO36QWipKj0aVTE+mVyU4",
	"a6K76Y3cNTdtQpveq/LJb1uXS8gxb/TeVF4Y/dqmiZoHuwzCsowye4nmpRdmPj/e6tgCtC/T1l54ogpE",
	"twZn7KX/JezuGdahhmRp1eaZ401SKyMGyAUWsmyPGZJ91JgwDWUgFkJIsE9W3ZYPGc2KHSWmu+FcgSTd",
	"xdEmq9szZbos/KS5XNejEmPiE6KxbF/DqtLj+scLLOJtfIAcb1Izx1o6Ox+WFrr2qZ0x8VrjOwlJnsGE",
	"30KWRZqlFJe+wgJihTxV11wXocWdpM2iu0mkgV42M4v2bckwyCFRrALfbuWlcmJENvbkrvucowk4vGco",
	"MrRNcRRC7TUUjUukVAYyq8JblH1w7EMFhb/eCAlmtEAUATeaHPyHNvs5FsrjmAyc+6jXeIFMw4Y76HSU",
	"o3x8zn3Ifk7fQ5qCUCjtoIWpodfDFXvDqyJhBkiMqX7J/G15OP3BTYxNQkrQWfA89ROWy27OOsxMWtQ5",
	"XdDxwWgMcpOzC+1hJUk7TT5cZU9HiNIIXMLulJSgUOo47GAMNElOBHqUkrW3yXdqfjMpuFd3At7vm2mv",
	"UqrMRpwd58Ms632KvxT5JWCWxCbEfaSKPbuPNvbGm3293oWs4lUFEooHJ4ydSXrvFBzb3QKMvcnlPbtv",
	"/i3OWtRU+MAb1U7eyvTrDCxJoG/JzcIw+3mYAcfqbjkVDXIgh/dWjoXcXGP5gm6d05OpWvnQ1dyvs98S",
	"FUGRkkkuyGP1fOTx9RnDJBFRNhN0ZHLmPV3MlCoVy3uTRBZuqDSm4skQIDvpeXcLhR88iYBk5fjEKaTk",
	"gD4toFoyDa0T+ab5EYdF7lMafX/mZpYuv1sqDZ1y9a435UJtHr5golH8z0JYzfXuJlkMB0X2B9aTUSwf",
	"DMdqIrHahbTRWEMclqW6zpBZZU0lkJRq69qZ7mUcytK1/dypXkAU18WNF9R2bM0LliutIY97pJ+iElQb",
	"pSErFYZ5pTzQS+vk7g0+8pKsVCumqlwVQBV10hQ0NlctJUexCaKomiQKiHbwITP1ieh44pTuTiU/Uoai",
	"1sEE9GHzX7s+9Ki+zXtFi87IlzkSsQzG57nyGKLGQ3iRcCgxTN+WmObNS7FFugGdOvJLZnUNc+Zb9KuI",
	"+4PPNbCNMIZAaWjpWpQlvmkX28jz2gQupFE7IvaeY1jllcDYm25+A5KGK3fnNUkfYh5wESeGYnatVb1a",
	"Rym4GziDyqtrrxDHo/xoagyPwhdkboqnbKOM9ZomjdQuuQ05u58rabUqy65RikT0lbe0f8u3Z3luXyp1",
	"ueD55QPUa6WyzUqLeXj63Q8ObGfSveRr3Qs4o4Lvh5MZUzsMlfNEO5lB9ljc0aXvIzDfHeagh23uZ8OF",
	"9dfVZaZpNeZMMm7VRuTpM/XnirYbjZFLsahkVjeqPkkJMLAZHvb4smqCK5BFDtEMkifL550xzwi8kxnZ",
	"jfsvSuD9cdkSPKMZuSiHzMVLUaOJdgYAIKT09NnWmkpWxpJYw1XUirI4oIu8D+jEWwUjkW4HmxvhzoGy",
	"cCugBtGPDYD3yfgwp+x7FEm5UNvw/UGbnu9GwH/YT+Ud5jEW4nXRkpamIK+QQ2eEI6STgO+Nh3qNz94X",
	"U6OimvLCE2/4CIDxOKkODJOipY4FY8lFCUWWqk553tio5pGm7Z9m9YvGC+M5ec7rUBzSjV1r8DldSMTX",
	"Xf9XxR0pqab50JIsC9gCvev4FbSiqo/zyP8CJRWF7BkDVJWVcAWd8DGfaKZGUVNcQehrms6sAKjQG9m3",
	"kaXiouK7vGc48WvPosiaKdhNWlIIsbRT7ICZJGnU2cqMjomZepQcRFeiqHkHf+ZYkaNrBnRHOYGqgY6Q",
	"BT1y6jQ/0gg/hAHOQv+UKBMw8W4aHzqaBaVRt48BHYyTrM3YqZfpMMk4i1LjYMHZisYRSyTe8g1T8Ws5",
	"bpAcknyrbk3cJ6FkhNgvt5CjVOP1HSi8xjPipPBZT5DaJUBBWoHrkrC2r0EyqaIinNfcNKpKm2Uy/EAT",
	"YyMhvTZ9A6dyG814+51lOBgzvTxvo4qEbuj05ub53+Uk7j2Io+OlaMSAf/63x/4VqNurHdgAi51Lt59O",
	"9scylv4W81x8zhZ1GKgs1TVV1Yz10BcQ/KBEfcEF5MVy0VzLIWpz7hOg9k0dIopX3/AdUxr/cVrnP2te",
	"iuUO+QyBH7oxs+aOhLzjlSICfBSom3i/eDUPgAVriwpT0brF1DGj4XZulAhod5GH8keKbfglxNuAwQ7E",
	"P3PrGKepF2i5cFd2bzuHWPCLDylaNryINX3MYdktNB+SK7ve/3/7Fi6eKqSeq0qehxqqvohTl89gneRA",
	"XHYNm/2PJYd8LZBAU3u5JVodXtcXNzCZHsm6Ui8QxgrUdMAe1KQd1Oa51TImWn57VUj2PDOdtJS73oWp",
	"UTcDoONKlofAjwt7fhz8J9PLji1jCvh/FLyPlPKN4aWqvR8By50MHAlYyVq9UNtMw9IcCjAhc7VT53Wb",
	"uyOYWIXMNXBDETfn33vFs82eKqRThCkmtPFpNqMUsBSyZZZCVrVN6DGYRFXuIoTFRn9E64gLbUxKcMLk",
	"FS+/vwKtRTG2ce50UNHLuIhGcHT4vgkTRnOnDgcQptXh8H1ma0aPm7kLnMp0UbimsVwWXBdxcyFZDtrd",
	"++ya78zNPUqNc+CQT4lH0kw3a0DkXULSJkDKnXcK39Lf0wDI79DxM8Fhg3HBCWcNmXasGvHPDGH4Uzhs",
	"NnyblWqFrwhHDoRPm4sePlIBlUQzOMln09Yd5jHiV9g/DRYu8IzIKpx1yhT7z/33uJWoRv4ohd178slG",
	"2X/WSXG3dDADUuWqDf4nYhmex9RLXJ98JX6NG4TN8FQl0B5Emwgj/qGuXXxkFzEMwj/jjo3g0wvCdSMt",
	"Uu99yTKQocXA7AnvB9OGsvPch2cNTWkDUwMhZe5fSx9paSP7fLiXRsCj6v3+rHenbUJm3DjHVNHb/z46",
	"q1SV5VNiPqm2SeHdBB7SLowj9BE5AUbW3YTHmKbaTyfvUafsz7GFBEfLDh3ydlX5PqV/zEw0wtG7Lgi1",
	"RF5Gte3RuoUveRpjyrz/xqxrBmuYBONMQ15rNBNf893hwmwjGaMv/n726eMnPz/59DPmGrBCrMC0CdF7",
	"hc3auEAh+3afjxsJOFieTW9CyD5AiAv+x/CoqtkUf9aI25o2peigrNsx9uXEBZA4jomCWjfaKxynDe3/",
	"Y21XapF3vmMpFPz2e6ZVWaYLUjRyVcKBktqtyIXiNJAKtBHGOkbY9YAK20ZEmzWaBzH37xVlk1Eyh2A/",
	"9lQg7EjIVWohYwG1yM/wbbf3GjHYVqXnVeTp2bcur6eRhQ6FRoyKWQCrVOVFe7FkKYjwBZGOXtZ6wyda",
	"xKMY2YbZUrRsihB95Hma9OKS4vu5fbfcrU1zereJCfEiHMobkOaYf2I8b8FNOElr2v/D8I9EIoY74xrN",
	"cn8LXpHUD/a8OT4bxD00SQgmgTZ8lJ8gDwRg5LVt551k9FAsSkSsyUuA/oTgQO6LH9+2juWDz0IQktDh",
	"AHjx89m2XfOSwYPzO2f0/bZBSrSUd2OU0Fn+oRe5gfU2F0m0Rd5oYi0YYktqKBZGz63N8+YV84hWMnjs",
	"rJWyzGmmZZl4JE12HDxTMeE4lUBf8fLjc42vhDb2DPEBxQ/jT6Pil7IxkgmV5mZ5+l7ySXNHr2Lvbmr5",
	"Ch9m/ye4PUrec34o74Qf3GZo3MGa/qtwK9Bbb3aNY1KQ1ePP2MIX26g05ML0nfvXQThpHoaCFksf0Apb",
	"e+Al6qF1/qTsLch4GSJx2HeRe6vx2XsI2yP6OzOVkZObpPIU9Q3IIoG/FI+KyxcfuC5uWZjhZmlfogRu",
	"R6Z9GRZmnro8Sm3iLp3awHCdk2/rDm4TF3W7tqk5iybXd3j79o1dTEk1lK7F4LpjrqM7KcpwVEmG3yDL",
	"EeHIj+HnTVHMT2N5bym360hu7t5+1KI8GLDSybT+YT5bgQQjDOYS/9nXjvm4d2mAgDIvDI8qwXqbdDGE",
	"mMRaO5NHU0U51CekT/fdEjmv8VVjXmthd1hZORjQxM/JfExfN7k9fG6Yxpfm7z6rLqGpbt9mAqlNuF2/",
	"VrzE+4hcfNLdQqo8YV9Shm9/UP52b/EX+OSvT4tHnzz+y+Kvjz59lMPTTz9/9Ih//pQ//vyTx/Dkr58+",
	"fQSPl599vnhSPHn6ZPH0ydPPPv08/+Tp48XTzz7/yz3HhxzIBGhI7f9s9r+ys3KlsrNX59lrB2yLE16J",
	"b8DtDerKS4UlNx1SczyJsOGinD0LP/2PcMJOcrVphw+/znx9ptna2so8Oz29vr4+ibucrvDpf2ZVna9P",
	"wzxYCLEjr7w6b2L0KQ4Hd7S1HuOmelI4w28/fHnxmp29Oj9pCWb2bPbo5NHJY1/8W/JKzJ7NPsGf8PSs",
	"cd9PMb/mqfGp80+bt1of5oNvVUWJ9d0nT6P+rzXwEhPsuD82YLXIwycNvNj5/5trvlqBPsHXG/TT1ZPT",
	"II2cvveZEz7s+3YaR4acvu8kmCgO9AyRD4eanL4PpX73D9ip6OpjzqIOEwHd1+x0geVypjaFeHXjS0E1",
	"xpy+R0F89PdTb01Jf0SFiE7aaUjUMtKSnuSnP3ZQ+N5u3UL2D+faROPl3Obrujp9j//BQxOtiDJ8ntqt",
	"PEUH8un7DiL85wEiur+33eMWVxtVQABOLZdUCnnf59P39G80EWwr0MJJo5hVx/9K2c9OsezcbvjzTnp3",
	"ZwmpnDU/SgOkLYeKAzuZt0/fGj5yXoTGFzuZB7E5xEQid3jy6BFN/xT/M/NlmXqZXU79eZ6ZplL/XqNN",
	"J6cm8t6eva6Blx74gT2ZIQyPPx4M55LiIB0zpkvjw3z26cfEwrl08g0vGbak6T/5iJsA+krkwF7DplKa",
	"a1Hu2I+yCeWM6vemKPBSqmsZIHcSR73ZcL1DSX6jrsAwXxo4Ik6mwclOFO6BIQAtDeOVxx0feTOr6kUp",
	"8tmcMqi+Q2nNpgSXYEQazhQMaO3g3VPx9cEzMX0XuvLwnpQ1k+A8kMyAhh8K88P9DXvfd8HSVPdSGzT7",
	"FyP4FyO4Q0Zgay1Hj2h0f2HeNaj8E9ec52vYxw+Gt2V0wc8qlUoscbGHWfjqJmO84qLLK9pQw9mzN9OK",
	"/3mvBxm0CzDuMJ8EZcZJ6q2uoRuOFM48+lyjvd5Xcv3Duz/E/f6cy3CeOztObk2uSwG6oQIuhwVn/sUF",
	"/p/hAlQ5i9O+zpmFsjTx2bcKzz55gHw6TUmeuYl8oJP9tBWmOz+fBrtFSgfttnzf+bOrV5l1bQt1Hc2C",
	"Fn9yVw21DPexNv2/T6+5sNlSaZ90ky8t6GFnC7w89RV2er+2Se0HXzBTf/Rj/Jw0+esp9+pG6hvyurGO",
	"A3049dWrfCONQhR0+Nxa3WIrFvLZxn715p3jcliE3bPg1ijz7PQUn8WslbGnsw/z9z2DTfzxXUNYoXbo",
	"rNLiCmscvJvPtpnSYiUkLzNv1WjLhM2enDyaffi/AQAA//9Xe/dd+AkBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
