// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
