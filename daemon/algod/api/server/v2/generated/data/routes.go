// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
