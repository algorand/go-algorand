// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
