// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"6b4uXLX5N59u/n8AAAD//xqyBg3TyQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
