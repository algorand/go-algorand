// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PctpLoX0HNbpUfdyjJr5xYVam9ip3kaOM4LkvJubu2b4Ihe2ZwRAIMAI5m4qv/",
	"fgsNgARJkEM9Yidb55OtIR6NRqPR6OfHWSqKUnDgWs2OP85KKmkBGiT+RdNUVFwnLDN/ZaBSyUrNBJ8d",
	"+29Eacn4ajafMfNrSfV6Np9xWkDTxvSfzyT8VjEJ2exYywrmM5WuoaBmYL0rTet6pG2yEokb4sQOcfpy",
	"djXygWaZBKX6UP7I8x1hPM2rDIiWlCuamk+KXDK9JnrNFHGdCeNEcCBiSfS61ZgsGeSZOvCL/K0CuQtW",
	"6SYfXtJVA2IiRQ59OF+IYsE4eKigBqreEKIFyWCJjdZUEzODgdU31IIooDJdk6WQe0C1QITwAq+K2fG7",
	"mQKegcTdSoFt8L9LCfA7JJrKFejZh3lscUsNMtGsiCzt1GFfgqpyrQi2xTWu2AY4Mb0OyA+V0mQBhHLy",
	"9tsX5MmTJ8/NQgqqNWSOyAZX1cwersl2nx3PMqrBf+7TGs1XQlKeJXX7t9++wPnP3AKntqJKQfywnJgv",
	"5PTl0AJ8xwgJMa5hhfvQon7TI3Iomp8XsBQSJu6JbXynmxLO/1l3JaU6XZeCcR3ZF4Jfif0c5WFB9zEe",
	"VgPQal8aTEkz6Luj5PmHj4/mj46u/u3dSfLf7s9nT64mLv9FPe4eDEQbppWUwNNdspJA8bSsKe/j462j",
	"B7UWVZ6RNd3g5tMCWb3rS0xfyzo3NK8MnbBUipN8JRShjowyWNIq18RPTCqeGzZlRnPUTpgipRQblkE2",
	"N9z3cs3SNUmpskNgO3LJ8tzQYKUgG6K1+OpGDtNViBID143wgQv68yKjWdceTMAWuUGS5kJBosWe68nf",
	"OJRnJLxQmrtKXe+yIudrIDi5+WAvW8QdNzSd5zuicV8zQhWhxF9Nc8KWZCcqcombk7ML7O9WY7BWEIM0",
	"3JzWPWoO7xD6esiIIG8hRA6UI/L8ueujjC/ZqpKgyOUa9NrdeRJUKbgCIhb/hFSbbf/Psx9fEyHJD6AU",
	"XcEbml4Q4KnIIDsgp0vChQ5Iw9ES4tD0HFqHgyt2yf9TCUMThVqVNL2I3+g5K1hkVT/QLSuqgvCqWIA0",
	"W+qvEC2IBF1JPgSQHXEPKRZ025/0XFY8xf1vpm3JcobamCpzukOEFXT71dHcgaMIzXNSAs8YXxG95YNy",
	"nJl7P3iJFBXPJog52uxpcLGqElK2ZJCRepQRSNw0++Bh/HrwNMJXAI4fZBCcepY94HDYRmjGnG7zhZR0",
	"BQHJHJCfHHPDr1pcAK8JnSx2+KmUsGGiUnWnARhx6nEJnAsNSSlhySI0dubQYRiMbeM4cOFkoFRwTRmH",
	"zDBnBFposMxqEKZgwvH3Tv8WX1AFXzwduuObrxN3fym6uz6645N2Gxsl9khGrk7z1R3YuGTV6j/hfRjO",
	"rdgqsT/3NpKtzs1ts2Q53kT/NPvn0VApZAItRPi7SbEVp7qScPyePzR/kYScacozKjPzS2F/+qHKNTtj",
	"K/NTbn96JVYsPWOrAWTWsEYfXNitsP+Y8eLsWG+j74pXQlxUZbigtPVwXezI6cuhTbZjXpcwT+rXbvjw",
	"ON/6x8h1e+htvZEDQA7irqSm4QXsJBhoabrEf7ZLpCe6lL+bf8oyN711uYyh1tCxu5JRfeDUCidlmbOU",
	"GiS+dZ/NV8MEwD4kaNPiEC/U448BiKUUJUjN7KC0LJNcpDRPlKYaR/p3CcvZ8ezfDhv9y6Htrg6DyV+Z",
	"XmfYyYisVgxKaFleY4w3RvRRI8zCMGj8hGzCsj0Umhi3m2hIiRkWnMOGcn3QPFla/KA+wO/cTA2+rbRj",
	"8d15gg0inNiGC1BWArYN7ykSoJ4gWgmiFQXSVS4W9Q/3T8qywSB+PylLiw+UHoGhYAZbprR6gMunzUkK",
	"5zl9eUC+C8dGUVzwfGcuBytqmLth6W4td4vVuiW3hmbEe4rgdgp5YLbGo8GI+XdBcfisWIvcSD17acU0",
	"/rtrG5KZ+X1S578GiYW4HSYufGg5zNk3Dv4SPG7udyinTzhO3XNATrp9b0Y2ZpQ4wdyIVkb30447gsca",
	"hZeSlhZA98XepYzjI802srDekptOZHRRmIMzHNAaQnXjs7b3PEQhQVLowPB1LtKLv1O1voMzv/Bj9Y8f",
	"TkPWQDOQZE3V+mAWkzLC49WMNuWImYb4wCeLYKqDeol3tbw9S8uopsHSHLxxscSiHvsh0wMZebv8iP+h",
	"OTGfzdk2rN8Oe0DOkYEpe5ydkSEzr337QLAzmQaohRCksA98Yl7d14LyRTN5fJ8m7dE3VqfgdsgtAndI",
	"bO/8GHwttjEYvhbb3hEQW1B3QR9mHBQjNRRqAnwvHWQC99+hj0pJd30k49hTkGwWaERXhaeBhze+maVR",
	"zp4shLwZ9+mwFU4alTOhZtSA+c47SMKmVZk4UoyorWyDzkCNlW+caXSHj2GshYUzTf8ALCgz6l1goT3Q",
	"XWNBFCXL4Q5Ifx1l+guq4Mljcvb3k2ePHv/y+NkXhiRLKVaSFmSx06DIffc2I0rvcnjQXxm+jqpcx0f/",
	"4qlXVLbHjY2jRCVTKGjZH8oqQK0IZJsR066PtTaacdU1gFMO5zkYTm7RTqxu34D2kikjYRWLO9mMIYRl",
	"zSwZcZBksJeYrru8ZppduES5k9VdPGVBSiEj+jU8YlqkIk82IBUTEWvKG9eCuBZevC27v1toySVVxMyN",
	"qt+Ko0ARoSy95dP5vh36fMsb3IxyfrveyOrcvFP2pY18r0lUpASZ6C0nGSyqVesltJSiIJRk2BHv6O9A",
	"n+14ilq1uyDS4WdawTiq+NWOp8GbzWxUDtmqtQm3f5t1seL1c3aqeyoCjkHHK/yMz/qXkGt65/JLd4IY",
	"7C/8RlpgSWYa4iv4FVutdSBgvpFCLO8extgsMUDxgxXPc9OnL6S/FhmYxVbqDi7jZrCG1s2ehhROF6LS",
	"hBIuMkCNSqXi1/SA5R5Nhmjp1OHNr9dW4l6AIaSUVma1VUnQjtfjHE3HhKaWehNEjRqwYtTmJ9vKTmet",
	"wrkEmplXPXAiFs5U4IwYuEiKRkjtLzonJETOUguuUooUlIIscSqKvaD5dpaJ6BE8IeAIcD0LUYIsqbw1",
	"sBebvXBewC5Bk7ki97//WT34DPBqoWm+B7HYJobe+sHn7EF9qKdNP0Zw3clDsqMSiOe55nVpGEQOGoZQ",
	"eC2cDO5fF6LeLt4eLRuQaJn5QyneT3I7AqpB/YPp/bbQVuWAI5h76JyzAvV2nHKhIBU8U9HBcqp0so8t",
	"m0at15hZQcAJY5wYBx4QSl5Rpa01kfEMlSD2OsF5rIBiphgGeFAgNSP/7GXR/tipuQe5qlQtmKqqLIXU",
	"kMXWwGE7Mtdr2NZziWUwdi39akEqBftGHsJSML5Dll2JRRDVtdLdmdv7i0PVtLnnd1FUtoBoEDEGyJlv",
	"FWA3dIYZAISpBtGWcJjqUE7tgTOfKS3K0nALnVS87jeEpjPb+kT/1LTtExfVzb2dCVDog+PaO8gvLWat",
	"G9Samic0jkwKemFkD3wQW7NnH2ZzGBPFeArJGOWbY3lmWoVHYO8hrcqVpBkkGeR01x/0J/uZ2M9jA+CO",
	"Nw8foSGx/izxTW8o2bsPjAwtcDwVEx4JfiGpOYLm5dEQiOu9Z+QMcOwYc3J0dK8eCueKbpEfD5dttzoy",
	"It6GG6HNjjt6QJAdR58C8AAe6qFvjgrsnDTvsu4U/wXKTVDLEdefZAdqaAnN+NdawIA2zbkKB+elw947",
	"HDjKNgfZ2B4+MnRkB1R7b6jULGUlvnW+h92dP/26E0QNTiQDTVkOGQk+2GdgGfYn1hOjO+bNnoKTtDB9",
	"8HtqmMhycqZQ5GkDfwE7fHO/sS5+54Fj4B28ZSOjmvuJcoKAeschI4KHTWBLU53vjKCm17AjlyCBqGpR",
	"MK2t6277qatFmYQDRDXcIzM6c451j/M7MMW+dIZDBcvrb8V8Zt8E4/Cddx4GLXS4t0ApRD5Be9RDRhSC",
	"SZZ/Ugqz68x5EXs/Uk9JLSAd00ZbXn3931MtNOMKyH+JiqSU45Or0lDLNEKioIACpJnBiGD1nM7G32AI",
	"cijAviTxy8OH3YU/fOj2nCmyhEvvem8adtHx8CHqcd4IpVuH6w50hea4nUauD1T9m4vPvUK6PGW/jdmN",
	"PGUn33QGr+0F5kwp5QjXLP/WDKBzMrdT1h7SyDT7Oo47SasfDB1bN+77GSuqnOq7sF+MCqT1g4IVBWSM",
	"ash3pJSQgnWvNhKWsrAY0Ih1vErXlK9QsJaiWjnPHzsOMsZKWRWGrHhviKjwUdBtkotVktI8j/NK19hL",
	"9bVamRUMT74oUyPc52JFKjTKM17PyleEhjs6CoJiv8ONIFjsdM0NtEBIrguD3vJkJUVVxnDgnF59oIGR",
	"voCaF2BAT9jZvncuaY12F1sy5SL3dBcQ6XdmzCHrynxWccQAZAZ7MbCdDB7irXkzsjY7ZgHMNjil2dB6",
	"oqh4P/hONyS+ad7pllTbQRtxmsQolERVaQoQ9ciOvYAb6NvBqU24kRvQCHGVtC5phKa6onnIA8jpklC+",
	"a0etUpYrcycxRbAd0lTt5jy3a/MhRUuaW1N5JMYl5Fst+TsgwO7ONijuomaiWQhpd9k+BY5gQ/ZgmJ9h",
	"Mn+MiaUZOgZlf+LAJ675OOQWd1aVZb67AyHVDkQklBIUihShWlHZr2IZhqY5mUPtlIaib3mxXX8ZuAbe",
	"Dr7vBc8Zh6QQHHbRaGzG4Qf8GOVnKNYMdEYBc6hv983Ygr8DVnueKdR4W/zibgcs8k3tD3oHm98dt2N0",
	"C4PyUKkMeUkoSXOGKmfBlZZVqt9zikqt4LBF/Gb8631YzfnCN4nrVSNqTzfUe07RZ6pWdUVt/UuIXLbf",
	"Anhtp6pWK1AdfkqWAO+5a8U4qTjTOFdh9iuxG1aCxCv5wLYs6M6wRNTK/g5SkEWl2zwaA4OUNuzTWgDN",
	"NEQs33OqSQ5UafID4+dbHM5b0D3NcNCXQl7UWIhfKSvgoJhK4v4939mv6Hrplr92bpgYyG0/W5uRGb+J",
	"HtqhzqsJTv6/9//j+N1J8t80+f0oef6/Dj98fHr14GHvx8dXX331/9o/Pbn66sF//HtspzzssbAVB/np",
	"S/eUPn2J76XGaNSD/ZMZDArGkyiRha4RHdoi9zFE0xHQg7Y2Ta/hPddbbghpQ3OWGYH4JuTQZXG9s2hP",
	"R4dqWhvR0Z75tV7zFXILLkMiTKbDGm98jfdd4uIBYmjFdDFfeF6WFbdb6Z8hNv7BuyaJ5bwOArT5QY4J",
	"Roitqferc38+fvbFbN5EdtXfZ/OZ+/ohQsks20alRdjGHpfugODBuKdISXcKBgRShD3qhWWdQcJhCzDv",
	"ELVm5afnFEqzRZzDea9yp6Ta8lNu3b3N+UGb6M6ZWsTy08OtpZHLS72O5Q1oSQrYqtlNgI6fSinFBvic",
	"sAM46CqJMvNwdv5gOdAlxq/jM1xMiZKpz4ElNE8VAdbDhUzSxMToB4Vbx62v5jN3+as7l8fdwDG4unPW",
	"BlD/txbk3nffnJNDxzDVPRtKaocOgv8ir1IX39LyYDLczGZLsbG07/l7/hKWjDPz/fg9z6imhwuqWKoO",
	"KwXya5pTnsLBSpBjHzLzkmr6nvckrcGERkGwEimrRc5SchFKxA152iQV/RHev39H85V4//5Dz5mjL7+6",
	"qaL8xU6QmGe3qHTiQuwTCZdUxoxlqg6xxpFtDo2xWefEjW1ZsQvhd+PHeR4tS9UNtewvvyxzs/yADJUL",
	"JDRbRpQW0ssiRkCx0OD+vhbuYpD00mtWKgWK/FrQ8h3j+gNJ3ldHR0+AtGIPf3VXvqHJXQmT9SuDoaBd",
	"tQou3L5rYKslTUq6itnk3r9/p4GWuPsoLxf4yM5zgt1aMY/epxuHahbg8TG8ARaOa8dv4eLObC+fTim+",
	"BPyEW4htjLjReArcdL+CKMgbb1cnkrK3S5VeJ+ZsR1elDIn7namzrKyMkOXdNxRboYusS0izAJKuIb1w",
	"mUKgKPVu3uruPYScoOlZB1M2h4yNYcIsBmjRWACpyow6UbyrUVrsiAJdqzLfwgXszkWTBOE68ePtcGY1",
	"dFCRUgPp0hBreGzdGN3Nd25oqPIqSx8VjOFhniyOa7rwfYYPshV57+AQx4iiFW47hAgqI4iwxD+Aghss",
	"1Ix3K9KPLc+8Mhb25ovkk/G8n7gmzePJeYyFq0Hzg/1eACakEpeKLKiR24XLpWRDdgMuhtrgAQk5NCpN",
	"DIxtGaJwkH33XvSmE8vuhda7b6Ig28aJWXOUUsB8MaSCj5mOn6CfydotnYkGUyQ6hC1yFJNqh0rLdKhs",
	"Gfdszrch0OIEDJI3AocHo42RULJZU+XTPGE2LH+WJ8kAf2AI+ljikVDBH6S8qvXtnud2z2nvdenSj/ic",
	"Iz7RSPi0nJA0xEj46FUf2w7BUQDKIIeVXbht7AmlCYdvNsjA8eNymTMOJIl5y1GlRMpsnq7mmnFzgJGP",
	"HxJiVcBk8ggxMg7ARns8Dkxei/Bs8tV1gOQunJ/6sdGSH/wN8cgj6z9uRB5RGhbOBgxKqecA1LlY1vdX",
	"x9EXhyGMz4lhcxuaGzbnXnzNIL38Fyi2drJdOI+QB0Pi7IgG3l4s11qTvYpusppQZvJAxwW6EYgXYpvY",
	"0MOoxLvYLgy9R13qMRAydjBtppF7iizEFr2M8GqxLtx7YBmGw4MRvPC3TCG9Yr+h29wCMzbtuDQVo0KF",
	"JOPUeTW5DIkTU6YekGCGyOV+kDzkRgB0lB1NJl73+N37SG2LJ/3LvLnV5k1SLB+tFDv+Q0couksD+Otr",
	"Yep0H2+6EktUT9F2lmlnOglEyBjRGzbRN9L0TUEKcsBHQdISopKLmOnOvG0Ab5wz3y1QXmA+Fcp3DwIP",
	"LAkrpjQ0SnTvMPI51JMU07gJsRxenS7l0qzvrRD1NWXzBGHH1jI/+QrQhXnJpNIJWiCiSzCNvlX4qP7W",
	"NI3LSm0fL5v0lGVx3oDTXsAuyVhexenVzfv9SzPt65olqmqB/JZx67KywCS9Uc/Pkamtc/Dogl/ZBb+i",
	"d7beaafBNDUTS0Mu7Tn+Iueiw3nH2EGEAGPE0d+1QZSOMMggYrfPHQO5yR5OjNg9GNO+9g5T5sfe6zbi",
	"44aH7ig7UnQtgcJgdBUMzURGLGE6yHHbD6UdOAO0LFm27ehC7aiDL2Z6LYWHzwzWwQLurhtsDwYCvWcs",
	"mkeCaieBawR8m624lYPlYBJmztup2kKGEE7FlM+130dUHe23D1fnQPPvYfezaYvLmV3NZ7dTncZw7Ubc",
	"g+s39fZG8YymeatKa1lCrolyWpZSbGieOAXzEGlKsXGkic29PvoTs7q4GvP8m5NXbxz4V/NZmgOVSS0q",
	"DK4K25V/mVXZfHMDB8Tn8jZvPi+zW1Ey2Pw6SVaolL5cg0uKHEijveyNjcEhOIpOSb2MewjtVTk724hd",
	"4oiNBMraRNKo76yFpG0VoRvKcq8389AOePPg4qalAI1yhXCAW1tXAiNZcqfspne646ejoa49PCmcayRt",
	"c2EzkysieNeEjl7Pu9JZ3QuKuRetVqTPnHhVoCYhUTlL4zpWvlCGOLi1naEfNzYeEEbNiBUbMMXyigVj",
	"mWZqwkO3A2QwRxSZPo/nEO4WwlWdqTj7rQLCMuDafJJ4KjsHFZNdOm17/zo1skN/Ljew1dA3w99Gxgjz",
	"jnZvPARiXMAILXU9cF/WT2a/0Fojhe7XjUniGgb/cMbelThirHf04ajZOi+u2xa3sEhMn/8ZwrDZwvdX",
	"qPGPV5cAdWCOaMUZppKlFL9D/J2Hz+NIoJTPtMrQy+V34BN80BvtTlM4p5l9cLuHpJtQC9V2Uhigetz5",
	"wCyHKR+9hppyu9W2AETL1y1OMKFX6aEdvyEYB3PPEzenlwsay4dphAwD00ljAG7p0rUgvrPHvaoDHezs",
	"JLAl122ZDYIvQTYxjP2EOjcUGOy0k0WFRjJAqg1lgrm1/+VKRIap+CXlto6I6WePkuutwCq/TK9LITGF",
	"hYqr/TNIWUHzuOSQpX0Vb8ZWzJbIqBQENRjcQLb8kKUiV8eiDqZyqDldkqN5UAjG7UbGNkyxRQ7Y4pFt",
	"saAKOXmtiKq7mOUB12uFzR9PaL6ueCYh02tlEasEqYU6fN7UxqsF6EsATo6w3aPn5D6a7RTbwAODRXc/",
	"z44fPUelq/3jKHYBuBInY9wkQ3byD8dO4nSMdks7hmHcbtSDaDiQrXE2zLhGTpPtOuUsYUvH6/afpYJy",
	"uoK4p0ixBybbF3cTFWkdvPDMFuhRWoodYTo+P2hq+NOA97lhfxYMkoqiYLpwxh0lCkNPTYEFO6kfzlb7",
	"cblxPVz+I9pIS28i6jwiP63S1N5vsVWjJfs1LaCN1jmhNm9JzhrvBZ+xm5z6tEiYLLjOEWxxY+YyS0cx",
	"B50ZlqSUjGt8WFR6mXxJ0jWVNDXs72AI3GTxxdNIguR2ok5+PcA/Od4lKJCbOOrlANl7GcL1Jfe54Elh",
	"OEr2oIn2CE7loDE3brYbsh2ODz1VKDOjJIPkVrXIjQac+laEx0cGvCUp1uu5Fj1ee2WfnDIrGScPWpkd",
	"+untKydlFELGch02x91JHBK0ZLBB3734Jpkxb7kXMp+0C7eB/vNaHrzIGYhl/izHHgJfi8jr1CftrjXp",
	"zlc9oh0YOqbmgyGDhRtqTtoJkj+90c8rn/vGJ/PFw4p/dIH9zFuKSPYrGNjEIHl7dDuz+ntg/6bka7Gd",
	"uqmdE+I39k+AmihKKpZnPzdRmZ3c+JLydB21Zy1Mx1+aKl714uz9FE0puKacQx4dzsqCv3iZMSLV/lNM",
	"nadgfGLbbrp+u9zO4hrA22B6oPyEBr1M52aCEKvtgLfaoTpfiYzgPE3+uoZ79ss8BMm4f6tA6VjwEH6w",
	"Tl2otzTvXZsLmgDP8LV4QL6zhXrXQFrJifCVVmcVcJmJrUK9KnNBszmm2Tj/5uQVsbPaPrYWjc1FvcJH",
	"SnsVHX1VkJpzmnuwLysTD12YPs64L7VZtdKYK0xpWpSx4FDT4tw3wAjUUIePz5cQOwfkZVBy08aRmiEM",
	"PSyZLMyLqx7Nyi5IE+Y/WtN0jU+yFksdJvnpSdQ9VaqgcGFdgKjOV4nnzsDt8qjbNOpzIsy7+ZIpW58V",
	"NtCOR62Ds51KwMentpcnK84tpURlj7HkATdBuwfOOmp4NX8Usg7irymQ2xoE180pf4a9oumzugnqexUL",
	"bXRjXVjG191OKRecpZi8KnY1u0KuU2xgE/J8dZWs/oi7Exo5XNG0+LWbnMPiYKJ8zwgd4vpK+OCr2VRL",
	"HfZPjRVD11STFWjlOBtkc1/dwekBGVfg8o9i2d+ATwrZsisih4yaqpPapHFNMsKwmIGH3bfm22v37Ed/",
	"8QvGUcB3aHOu6VZTh3UmtXkVME1WApRbTzs2WL0zfQ4wTDaD7YcDX5fSZodBs5xZtrVB94c68RZpZwE2",
	"bV+Yti6LU/1zywPZTnpSlm7S4dofUXlAb/kggiOWxcSbdgLk1uOHo42Q26grCd6nhtBgg4ZoKPEe7hFG",
	"XQejU2PJCK2WorAFsS5c0QwGjEfAeMU4NFVTIxdEGr0ScGPwvA70U6mk2oqAk3jaOdAcrc8xhqa0Mz3c",
	"dqhubiGDElyjn2N4G5sSHgOMo27QCG6U7+pirYa6A2HiBVaJdojsF+RAqcoJURlGFHRKdMQYh2HcvghQ",
	"+wLoH4O+TGS7a0ntybnOTTQUJLqoshXohGZZLEPV1/iV4FefbAq2kFZ12tCyJCnmRGknielTm5soFVxV",
	"xchcvsEtpwtq3kSoIay743cYg1AWO/w3ljNzeGecE8a13QC9x4UrEnJNubk9Uk/qNTSdKLZKpmMC75Tb",
	"o6OZ+maE3vS/U0rPxaoNyCdODTHG5cI9ivG3b8zFEWZO6KUWtFdLndgAne6Er1SIz8Y6JLfNlfAq62WG",
	"RWNPXQltXAExXNNsjpffgOttkBCD2vvVWg+HHHDTQX9xql3kmqZklAUNRgNZ7x0b94NQxDWnQx471mHH",
	"fO71niYZ9uRsHHsUod4VrA/Q997PlJSUOdN4wyz6mHUe6cPqwrFD12xwdxHOz3tQY/f9ZsgnmyjGVzkQ",
	"/N6tAnUBLpy9lLBhovJGZ++V5J+E9ldXhdeOV3vFR9ff907AqT6vGnRQaXvuKg7YZbo3+fc/Wx82AlzL",
	"3Z9Ahdvb9F4Nrb60a9VTTRNSJ6uelLy6dSvGy2EN5z9qch4hPZVCsSZBeqxO1kRft3MsdRXkb+qP5R1N",
	"NpBqzIrfGNAlwHWyOZnJghqM/8qDNPB2rF0CXfqjsZxH/VT4ey60XlhSEFpn04gfTM/wc1K7SSFTwsS8",
	"K+CuDGI74GCy2/NyCalmmz1hYP9YAw9CjOZeCWHLGQdRYax2o8UsItdXsTUAjUVpjcITZPO7NThDQSAX",
	"sLunSIsaonnN5/5euUkCCcQAcofEkIhQMTcEqzV1lmGmaspALHi3H9sdmlRcgyWRgqDGG87lSdLcuE2g",
	"48iU8Zosk+YyXa8V/oseoUORYv2SDsPC9kusoKHqcoU+AUX4JCWn/TR9ly6BBQbt1YYCn8oClP/NR+ja",
	"WXJ2AWHRJjTLXFKZ+RZRPYNXYSQj91EvvMuXI+gCvaxnZo2TZj+gJ5L4CV1x01wY+SsZ8mdu+0XWTgX3",
	"lPX+sJnI0ePTwLUE6YrbobCXCwWJFt6pcwyOMVS4Ovw3QYIaTLZogRtMgfK2yfGCSWcppjyhzrMlXCCR",
	"UFADnQwysQzPOYbsF/a7j2DxSUf3qlNqet1fBsC753byshskhlS/JO623B8ZcxPNCuPcltJVsbQs3KAy",
	"VP2XUmRVai/o8GDU2qfJSY9GWElUKZH2V9kRiIPwwgvYHVqJ39dP8DsYAm0lJwt6EM7f2eQ71TWpGNyr",
	"OwHvc6pp5rNSiDwZ0Oyf9nPJdCn+gqUXkBFzU3g3toESMuQ+KpRr0+3leudzp5QlcMgeHBBywq3jsLfi",
	"tpMZdybn9/TY/FucNatseienQTp4z+MemJh4Sd6Sm/lhxnmYAsPqbjmVHWRPppLtQB4bSS8jBZUOpj5B",
	"+3bVbpGbhqgsFDGZpKnfsscppPYHaWogND4h/bJSIwVCzjtEZNuhLd4Bc+0qIA7IbjGQvRrRAMwJyOkN",
	"H1EqRYqctNfVw9NAyS0tCpb2h2uh5i9hzh80wu8p4RJZX014rsKMD40awFXUNjZuirLFxBZTDVJ14tjo",
	"PkWTlCZ7TVQtGCYZqq4LxhKL8yU0guTTWmKat2qnsk4BH5/Uy9J4Su2LybzWKcsrCS5Ux1YR69SvKKle",
	"ew5qmvffNUZGBoVxNLYGAlX2Fe61Aa6EWfdqEmWSwwZaljsXP1SlKSjFNhCWP7OdSQZQom6sK7HFTFIh",
	"a+9c427tSWDUmILd6L1uEWt3iuy5tKMixpYn9pioqUfJQLRhWUVb+FO3KMk0VI0pwoY9rBM5xbWZRHxx",
	"YyxirxEZaT56LnnchhyGr9UPcpwtqxV3lgibk61KesmHBdiIzqM2bN5+HQQHI6oTTjrgNIuVnpI67+Qd",
	"1Njy1aPqMQeqGtf0c5t30yBRxmnyZvl+Jp2kvvktwmyCClHjSuIwHVgTZyCtFReVSp5fdQ/DDw0fm1ar",
	"ynfYA15oOwiqVflnnAPnMwcD/FAjJVjKICW0lr/PHOEW2DD+YIvsrWeWaZMzWkfS9r4Etib1ojbhDJWU",
	"61p6MPeX4JgPsW8hUmjVx7IKIeGYgy43NP/0Vh5MCneC+HAV0+MLDc0EIZItKtXNPHJf0UlzByaBu5ua",
	"v0Gr1D/A7NFopUd7o9RSljdiI8ukOZYm9KVScUhyiWNa/41HX5CFiyYsJaRMdW+qS5/xvdaKYwGUppD+",
	"uBp+3zp/FvoWZLz0gh953WSPxifXijcQNkf0MzOVgZMbpfIY9fXIIoK/GI8K0/rsuS4uWo4dNht/x2NZ",
	"SLhjB4/AVfOaDh79hEVTl2edGMylUynor3Pybd3CbeSibtY21Tupj9yxFMNTnIrimcNNd/RqsgjBtPsE",
	"QSW/PvqVSFhiXS1BHj7ECR4+nLumvz5ufzbH+eHDeL3+T+XPZHHkxnDzxijm56EIFxvFMRBM1dmPiuXZ",
	"PsJohcY1lekw+OsXFxz7WWrj/WLNzv2j6uoTXceTsrsJiJjIWluTB1MFQW8T4t1ct0h0G6p000oyvcOc",
	"Xf45x36Jel59Vzs2OMeYOsuLu/u0uIA661vjBlEpf7t+J2iO95GRqdGPVWON9m+2tChzcAflq3uLv8GT",
	"L59mR08e/W3x5dGzoxSePnt+dESfP6WPnj95BI+/fPb0CB4tv3i+eJw9fvp48fTx0y+ePU+fPH20ePrF",
	"87/dM3zIgGwBnfkMEbP/gwUkk5M3p8m5AbbBCS3Z97CztaoMGfsqWDTFkwgFZfns2P/0v/0JO0hF0Qzv",
	"f525APTZWutSHR8eXl5eHoRdDldo90y0qNL1oZ+nXxL/zWmtMLaPctxRGx/mlS2eFE7w29tvzs7JyZvT",
	"g6Co7/Hs6ODo4BHWfC2B05LNjmdP8Cc8PWvc90NHbLPjj1fz2eEaaI5uQuaPArRkqf8kgWY79391SVcr",
	"kAeuNJj5afP40IsVhx+d/fdq7NthmGX/8GPLTJ7t6YlZuA8/+uRS461b2Zuce0DQYSIUY80OFxizPrUp",
	"qKDx8FLwsaEOP6K4PPj7oQvkjX/EZ4s9D4felyTesoWlj3prYO30SKlO11V5+BH/g/QZgGXd5gNwZ6tY",
	"TrvvQPuYV9vDOYXW3qA1nZ9mtnnPSdGljbN5dI/fTSsjAn4682rMQDGXWxA5hjkOzYH28XENu9aygjDn",
	"61h2pKt5pOLukq0q2aks3qlZTpgi/3n242siJHHv4zc0vajtEOR0aXMSSbFhGEmXBeGXpme9nN8qkLtm",
	"Pe7qDBfg65Q4g0ahVmU7mKcWyz9gwhcEFBnG46OjO6sV2NvZK6v6r4fzcN1mxB5/feFvzRYZGj759OjR",
	"na2tHSNw64V1h+ut6pSji565BYi95XBBT/+yC3qBr2lD8UvGM1voRVM80/aA4vq+/MuuT7PCuwJwrJkF",
	"CoWBZ3d4wD49ERqZnOYEW9rVPPnLruYM5IalQM6hKIWkkuU78hOvg+KDRHj9a+4nfsHFJfeIMEJ3VRRU",
	"7twVSEmXVflrwF6HQdlSI+3RlUJPBSw9MJvPXMQrbEuQrACOyXSu3E3c+rW+ny23O7S18Ps/77iLW80h",
	"5gX6E1dgVbA+YcWOp0OXNjY+2/H0bX2T9m4QPL1/HKX3N7OGF3kKugn+wSx/Go9+9imx8GkP6Cc7UW+h",
	"EBtQdfn3hjiNlGVeMbYSvBRFQMMHgyfrA6oA4tKrs0z0Z/JWmWbwnii750zctJT6iBPoJDj3eG3b4adU",
	"nq4rO3eixOxU92IbNPsXI/gXI7hDRqAryQePaHB/YSQDlNZtk6Q0XcMYP+jfluFLtxQxj8CzEWbhkuMM",
	"8YqzNq/4U793P/wp7vcXlPvz3Npx60xLZc5A1lRAeT9f0b+4wP8YLmATrzmd0pxoyHMVnn0t8OxbtwIX",
	"oMatu8dEPtCtSxz7+fBjuy5WS7mn1pXOxGXQF43D1rOhr/OrK8W2/j68pEwnSyFdcBrmLe931kDzQ5d2",
	"qfNrk+mg9wXTNwQ/ho5u0V8P67IQ0Y9dxWvsq1M8DjTy3sH+c2OECY0ayCFrc8a7D4Y/YdJhxzwbHf3x",
	"4SEGfKyF0oezq/nHjv4+/PihJgmfjXJWSrbB5BYfrv5/AAAA//+ino+tpcsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
