// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"InG76wAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
