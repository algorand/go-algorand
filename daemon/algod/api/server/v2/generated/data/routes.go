// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
