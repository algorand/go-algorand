// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"lRaXWGP63Yf/HwAA//9wF8brze8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
