// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/zcAAP//AIj0XV/qAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
