// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
