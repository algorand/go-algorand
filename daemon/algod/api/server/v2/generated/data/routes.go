// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round basics.Round) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"FB2dPJ09nrz/PwEAAP//a9NJbd0MAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
