// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
