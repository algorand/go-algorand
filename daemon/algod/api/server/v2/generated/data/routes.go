// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
