// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
