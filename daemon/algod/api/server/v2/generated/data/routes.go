// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
