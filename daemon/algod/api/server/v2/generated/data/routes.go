// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"KfAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
