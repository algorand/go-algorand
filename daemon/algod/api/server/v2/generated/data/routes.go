// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round basics.Round) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/wUAAP//w8NHajINAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
