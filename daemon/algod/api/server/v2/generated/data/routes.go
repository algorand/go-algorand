// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
