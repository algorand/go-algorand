// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
