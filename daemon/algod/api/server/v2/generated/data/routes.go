// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9+5PbNtLgv4LS91X5ceLIr2TXU5X6bmIn2bk4icszyd63ti+ByJaEHRLgAqBGis//",
	"+xUaAAmSIEXNTOzdq/3JHhGPRqPR6Be6P8xSUZSCA9dqdvphVlJJC9Ag8S+apqLiOmGZ+SsDlUpWaib4",
	"7NR/I0pLxtez+YyZX0uqN7P5jNMCmjam/3wm4R8Vk5DNTrWsYD5T6QYKagbW+9K0rkfaJWuRuCHO7BDn",
	"L2cfRz7QLJOgVB/Kn3i+J4yneZUB0ZJyRVPzSZFrpjdEb5girjNhnAgORKyI3rQakxWDPFMnfpH/qEDu",
	"g1W6yYeX9LEBMZEihz6cL0SxZBw8VFADVW8I0YJksMJGG6qJmcHA6htqQRRQmW7ISsgDoFogQniBV8Xs",
	"9O1MAc9A4m6lwLb435UE+B0STeUa9Oz9PLa4lQaZaFZElnbusC9BVblWBNviGtdsC5yYXifkh0ppsgRC",
	"OXnz7Qvy9OnT52YhBdUaMkdkg6tqZg/XZLvPTmcZ1eA/92mN5mshKc+Suv2bb1/g/BdugVNbUaUgfljO",
	"zBdy/nJoAb5jhIQY17DGfWhRv+kRORTNz0tYCQkT98Q2vtNNCef/rLuSUp1uSsG4juwLwa/Efo7ysKD7",
	"GA+rAWi1Lw2mpBn07aPk+fsPj+ePH338j7dnyd/cn188/Thx+S/qcQ9gINowraQEnu6TtQSKp2VDeR8f",
	"bxw9qI2o8oxs6BY3nxbI6l1fYvpa1rmleWXohKVSnOVroQh1ZJTBila5Jn5iUvHcsCkzmqN2whQppdiy",
	"DLK54b7XG5ZuSEqVHQLbkWuW54YGKwXZEK3FVzdymD6GKDFw3QgfuKB/XmQ06zqACdghN0jSXChItDhw",
	"Pfkbh/KMhBdKc1ep4y4rcrkBgpObD/ayRdxxQ9N5vica9zUjVBFK/NU0J2xF9qIi17g5ObvC/m41BmsF",
	"MUjDzWndo+bwDqGvh4wI8pZC5EA5Is+fuz7K+IqtKwmKXG9Ab9ydJ0GVgisgYvl3SLXZ9v918dOPREjy",
	"AyhF1/CaplcEeCoyyE7I+YpwoQPScLSEODQ9h9bh4Ipd8n9XwtBEodYlTa/iN3rOChZZ1Q90x4qqILwq",
	"liDNlvorRAsiQVeSDwFkRzxAigXd9Se9lBVPcf+baVuynKE2psqc7hFhBd199WjuwFGE5jkpgWeMr4ne",
	"8UE5zsx9GLxEiopnE8QcbfY0uFhVCSlbMchIPcoIJG6aQ/Awfhw8jfAVgOMHGQSnnuUAOBx2EZoxp9t8",
	"ISVdQ0AyJ+Rnx9zwqxZXwGtCJ8s9fiolbJmoVN1pAEacelwC50JDUkpYsQiNXTh0GAZj2zgOXDgZKBVc",
	"U8YhM8wZgRYaLLMahCmYcFzf6d/iS6rgy2dDd3zzdeLur0R310d3fNJuY6PEHsnI1Wm+ugMbl6xa/Sfo",
	"h+Hciq0T+3NvI9n60tw2K5bjTfR3s38eDZVCJtBChL+bFFtzqisJp+/4Q/MXSciFpjyjMjO/FPanH6pc",
	"swu2Nj/l9qdXYs3SC7YeQGYNa1Thwm6F/ceMF2fHehfVK14JcVWV4YLSluK63JPzl0ObbMc8ljDPam03",
	"VDwud14ZObaH3tUbOQDkIO5KahpewV6CgZamK/xnt0J6oiv5u/mnLHPTW5erGGoNHbsrGc0HzqxwVpY5",
	"S6lB4hv32Xw1TACsIkGbFgu8UE8/BCCWUpQgNbOD0rJMcpHSPFGaahzpPyWsZqez/1g09peF7a4WweSv",
	"TK8L7GREVisGJbQsjxjjtRF91AizMAwaPyGbsGwPhSbG7SYaUmKGBeewpVyfNCpLix/UB/itm6nBt5V2",
	"LL47KtggwoltuARlJWDb8J4iAeoJopUgWlEgXediWf9w/6wsGwzi97OytPhA6REYCmawY0qrB7h82pyk",
	"cJ7zlyfku3BsFMUFz/fmcrCihrkbVu7WcrdYbVtya2hGvKcIbqeQJ2ZrPBqMmH8XFIdqxUbkRuo5SCum",
	"8V9c25DMzO+TOv9rkFiI22HiQkXLYc7qOPhLoNzc71BOn3CcueeEnHX73oxszChxgrkRrYzupx13BI81",
	"Cq8lLS2A7ou9SxlHJc02srDekptOZHRRmIMzHNAaQnXjs3bwPEQhQVLowPB1LtKrv1C1uYMzv/Rj9Y8f",
	"TkM2QDOQZEPV5mQWkzLC49WMNuWImYao4JNlMNVJvcS7Wt6BpWVU02BpDt64WGJRj/2Q6YGM6C4/4X9o",
	"Tsxnc7YN67fDnpBLZGDKHmfnZMiMtm8VBDuTaYBWCEEKq+ATo3UfBeWLZvL4Pk3ao2+sTcHtkFsE7pDY",
	"3fkx+FrsYjB8LXa9IyB2oO6CPsw4KEZqKNQE+F46yATuv0MflZLu+0jGsacg2SzQiK4KTwMPb3wzS2Oc",
	"PVsKeTPu02ErnDQmZ0LNqAHznXeQhE2rMnGkGDFb2QadgRov3zjT6A4fw1gLCxea/gFYUGbUu8BCe6C7",
	"xoIoSpbDHZD+Jsr0l1TB0yfk4i9nXzx+8uuTL740JFlKsZa0IMu9BkXuO92MKL3P4UF/ZagdVbmOj/7l",
	"M2+obI8bG0eJSqZQ0LI/lDWAWhHINiOmXR9rbTTjqmsApxzOSzCc3KKdWNu+Ae0lU0bCKpZ3shlDCMua",
	"WTLiIMngIDEdu7xmmn24RLmX1V2osiClkBH7Gh4xLVKRJ1uQiomIN+W1a0FcCy/elt3fLbTkmipi5kbT",
	"b8VRoIhQlt7x6XzfDn254w1uRjm/XW9kdW7eKfvSRr63JCpSgkz0jpMMltW6pQmtpCgIJRl2xDv6O9Ao",
	"ClyyAi40LcqfVqu7URUFDhRR2VgBysxEbAsj1ytIBbeREAe0MzfqFPR0EeNNdHoYAIeRiz1P0c54F8d2",
	"WHEtGEenh9rzNNBiDYw5ZOsWWd5eWx1Ch53qnoqAY9DxCj+joeMl5Jp+K+RlYwn8ToqqvHMhrzvn1OVQ",
	"txhnSslMX69DM77O29E3awP7SWyNn2VBL/zxdWtA6JEiX7H1RgdqxWspxOruYYzNEgMUP1ilLDd9+qrZ",
	"jyIzzERX6g5EsGawhsMZug35Gl2KShNKuMgAN79SceFsIF4DHcXo39ahvKc3Vs9agqGulFZmtVVJ0Hvb",
	"uy+ajglN7QlNEDVqwHdVOx1tKzudjQXIJdBsT5YAnIilcxA51xUukqLrWXvxxomGEX7RgquUIgWlIEuc",
	"YeogaL6dvTr0CJ4QcAS4noUoQVZU3hrYq+1BOK9gn2CghCL3v/9FPfgM8GqhaX4Asdgmht5azXdewD7U",
	"06YfI7ju5CHZUQnE3ytEC5Rmc9AwhMKjcDK4f12Iert4e7RsQaI/7g+leD/J7QioBvUPpvfbQluVA+F/",
	"Tr01Ep7ZME658IJVbLCcKp0cYsumUUsHNysIOGGME+PAA4LXK6q09SEznqHpy14nOI8VwswUwwAPqiFm",
	"5F+8BtIfOzX3IFeVqtURVZWlkBqy2Bo47Ebm+hF29VxiFYxd6zxakErBoZGHsBSM75BlV2IRRHXtanFB",
	"Fv3FoUPC3PP7KCpbQDSIGAPkwrcKsBuGQA0AwlSDaEs4THUop467ms+UFmVpuIVOKl73G0LThW19pn9u",
	"2vaJi+rm3s4EKIy8cu0d5NcWszb4bUMVcXCQgl4Z2QPNINbZ3YfZHMZEMZ5CMkb5qOKZVuEROHhIq3It",
	"aQZJBjnd9wf92X4m9vPYALjjjborNCQ2iim+6Q0l+6CRkaEFjqdiwiPBLyQ1R9CoAg2BuN4HRs4Ax44x",
	"J0dH9+qhcK7oFvnxcNl2qyMj4m24FdrsuKMHBNlx9CkAD+ChHvrmqMDOSaN7dqf4b1BuglqOOH6SPaih",
	"JTTjH7WAARuqCxAPzkuHvXc4cJRtDrKxA3xk6MgOGHRfU6lZykrUdb6H/Z2rft0Jom5GkoGmLIeMBB+s",
	"GliG/YmNv+mOeTNVcJLtrQ9+z/gWWU7OFIo8beCvYI8692sb2BmYOu5Cl42Mau4nygkC6sPFjAgeNoEd",
	"TXW+N4Ka3sCeXIMEoqplwbS2AdttVVeLMgkHiPo1RmZ0TjwbFOl3YIpX8QKHCpbX34r5zOoE4/BddhSD",
	"FjqcLlAKkU+wkPWQEYVgUrwHKYXZdeZix330sKekFpCOaaMHt77+76kWmnEF5L9FRVLKUeWqNNQyjZAo",
	"KKAAaWYwIlg9p4vsaDAEORRgNUn88vBhd+EPH7o9Z4qs4No/uDANu+h4+BDtOK+F0q3DdQf2UHPcziPX",
	"Bzp8zMXntJAuTzkcWeBGnrKTrzuD114ic6aUcoRrln9rBtA5mbspaw9pZFpUBY47yZcTDB1bN+77BSuq",
	"nOq78FrBluaJ2IKULIODnNxNzAT/Zkvzn+puB3S6JgqMFQVkjGrI96SUkIKNzjeimqrHPiE2bi/dUL5G",
	"CV2Kau0Cx+w4yGErZW0hsuK9IaJSjN7xBK3KMY7rgoX9Aw0jvwA1OlTXJG01hmtaz+fe5Ey5Cv3ORUz0",
	"Ua/UfDaoYhqkbhsV0yKn/cpkAvdtCVgBfpqJJ/ouEHVG2OjjK9wWQ71mc/8YG3kzdAzK/sRBKFvzcSia",
	"zei3+f4OpAw7EJFQSlB4J4R2IWW/ilX4osxdGmqvNBR907nt+uvA8XszqKAJnjMOSSE47KOPqBmHH/Bj",
	"9DjhvTTQGSWEob5dob8Ffwes9jxTqPG2+MXd7p7QrotIfSvkXfkgnStpqjw9weV30L/tprypY5LmecSX",
	"596bdBmAmtfv25kkVCmRMhSSzjM1twfNuf/c45Q2+l/XUbR3cPa643acVuFTRjTKQl4SStKcoclWcKVl",
	"lep3nKJRKFhqJNrIa7/DZsIXvkncLhkxG7qh3nGKkWa1qSgaIbGCiF3kWwBvLVTVeg1Kd5SLFcA77lox",
	"TirONM5VmOOS2PNSgsSQnxPbsqB7sjI0oQX5HaQgy0q3xW18TqU0y3PnQTPTELF6x6kmOVClyQ+MX+5w",
	"OO9l90eWg74W8qrGQvx2XwMHxVQSj4r6zn7FgFW3/I0LXsXn7/az9bmY8Zs3V3u0GTVPuv/P/f86fXuW",
	"/I0mvz9Knv+PxfsPzz4+eNj78cnHr776v+2fnn786sF//Wdspzzsscc+DvLzl04VPX+J+kbjdOnB/skM",
	"7gXjSZTIwvCJDm2R+/iw1RHQg7Y1Sm/gHdc7bghpS3OWGd5yE3Lo3jC9s2hPR4dqWhvRsT75tR4pxd+C",
	"y5AIk+mwxhtLUf1AwvizOvQCupdyeF5WFbdb6aVv+2rEB3SJ1bx+OmmzqpwSfFe3oT4a0f355IsvZ/Pm",
	"PVz9fTafua/vI5TMsl3s1WMGu5hy5g4IHox7ipR0r0DHuQfCHo1ds8EU4bAFGK1ebVj56TmF0mwZ53A+",
	"Ft8ZeXb8nNsgeXN+0Ke4d64Ksfr0cGsJkEGpN7FsCy1BDVs1uwnQifMopdgCnxN2AiddI0tm9EUXRZcD",
	"XeGrf9Q+xRRtqD4HltA8VQRYDxcyyZIRox8UeRy3/jifuctf3bk65AaOwdWds3Yg+r+1IPe+++aSLBzD",
	"VPfsA1w7dPBkMqJKu1dBrQggw81sjhkr5L3j7/hLWDHOzPfTdzyjmi6WVLFULSoF8muaU57CyVqQU//Q",
	"6CXV9B3vSVqDaaCCJ16krJY5S8lVqJA05GlTe/RHePfuLc3X4t27971giL764KaK8hc7QWIEYVHpxCUm",
	"SCRcUxlzNqn6YTqObDOPjM1qhWxRWYukT3zgxo/zPFqWqvtAtb/8sszN8gMyVO75pdkyorSQXhYxAoqF",
	"Bvf3R+EuBkmvvV2lUqDIbwUt3zKu35PkXfXo0VMgrRebv7kr39DkvoTJ1pXBB7Rdowou3KqVsNOSJiVd",
	"x3xa79691UBL3H2Ulwu0ceQ5wW6tl6I+Eh6Hahbg8TG8ARaOo1+94eIubC+fhCq+BPyEW4htjLjReNpv",
	"ul/B29Ebb1fn/Wlvlyq9SczZjq5KGRL3O1PnplkbIcuHPyi2Rm3VpfFZAkk3kF65/CpQlHo/b3X3ETZO",
	"0PSsgymbece+/MLcD+gRWAKpyow6UZzyffcRvgKtfRzvG7iC/aVoUkcc8+q+/QhcDR1UpNRAujTEGh5b",
	"N0Z3810YFyr2ZenfUuOjOk8WpzVd+D7DB9mKvHdwiGNE0XqkPIQIKiOIsMQ/gIIbLNSMdyvSjy3PaBlL",
	"e/NFsvB43k9ck0Z5chFX4WrQ6m6/F4BpvMS1Iktq5HbhMlDZh84BF6sUXcOAhBw6ZSY+J245cnCQQ/de",
	"9KYTq+6F1rtvoiDbxolZc5RSwHwxpILKTCfOzs9k/X7OM4GJJR3CljmKSXVAomU6VLacYzZT3hBocQIG",
	"yRuBw4PRxkgo2Wyo8smxMIeYP8uTZIA/8OH+WLqW8yBELEgUVidj8Ty3e0572qVL2uIztfj0LKFqOSHV",
	"ipHwMSo9th2CowCUQQ5ru3Db2BNKk0Sg2SADx0+rVc44kCQWbRaYQYNrxs0BRj5+SIi1wJPJI8TIOAAb",
	"/dk4MPlRhGeTr48BkrskCNSPjZ7w4G+Iv9ey8ddG5BGlYeFswKuVeg5AXYhifX91AmVxGML4nBg2t6W5",
	"YXNO42sG6WUNQbG1kyPERVQ8GBJnRxwg9mI5ak32KrrJakKZyQMdF+hGIF6KXWIfbEYl3uVuaeg9GpKO",
	"z0djB9PmZ7mnyFLsMEoHrxYbAn0AlmE4PBiBhr9jCukV+w3d5haYsWnHpakYFSokGWfOq8llSJyYMvWA",
	"BDNELveDlCs3AqBj7GjyFzvl96CS2hZP+pd5c6vNm1Ri/rVP7PgPHaHoLg3gr2+FqZOkvO5KLFE7RTvY",
	"pJ0fJhAhY0Rv2ETfSdN3BSnIAZWCpCVEJVcxz6nRbQBvnAvfLTBeYBYayvcPgggmCWumNDRGdB8n8TnM",
	"kxST3wmxGl6dLuXKrO+NEPU1Zd2I2LG1zE++AgwBXjGpdIIeiOgSTKNvFSrV35qmcVmpHSNlU8WyLM4b",
	"cNor2CcZy6s4vbp5v39ppv2xZomqWiK/ZdwGrCwxtXE0cnJkahtcO7rgV3bBr+idrXfaaTBNzcTSkEt7",
	"jn+Rc9HhvGPsIEKAMeLo79ogSkcYZPDitc8dA7kp8PGfjFlfe4cp82MfjNrx726H7ig7UnQtgcFgdBUM",
	"3URGLGE6yAzcf4o6cAZoWbJs17GF2lEHNWZ6lMHD51PrYAF31w12AAOB3TP2GkaCaqfOawR8m+O5lbnm",
	"ZBJmLtsJ7kKGEE7FlK9Q0EdU/VruEK4ugebfw/4X0xaXM/s4n93OdBrDtRvxAK5f19sbxTO65q0preUJ",
	"ORLltCyl2NI8cQbmIdKUYutIE5t7e/QnZnVxM+blN2evXjvwP85naQ5UJrWoMLgqbFf+y6zKZukbOCA+",
	"A7rR+bzMbkXJYPPr1GKhUfp6Ay6VdCCN9nJeNg6H4Cg6I/UqHiF00OTsfCN2iSM+EihrF0ljvrMekrZX",
	"hG4py73dzEM7EM2Di5uWODXKFcIBbu1dCZxkyZ2ym97pjp+OhroO8KRwrpFk14XN566I4F0XOsY870vn",
	"dS8oZqy0VpE+c+JVgZaEROUsjdtY+VIZ4uDWd2YaE2w8IIyaESs24IrlFQvGMs2m5KTpABnMEUWmiqbF",
	"aXC3FK5WT8XZPyogLAOuzSeJp7JzUDG9ibO2969TIzv053IDWwt9M/xtZIwwW2v3xkMgxgWM0FPXA/dl",
	"rTL7hdYWKfND4JI4wuEfzti7Ekec9Y4+HDXb4MVN2+MWltbp8z9DGDbH+uG6Pl55dWljB+aI1ulhKllJ",
	"8TvE9TxUjyMPjXx+WoZRLr9D+NAhrE7RYjG1dacpN9TMPrjdQ9JNaIVqBykMUD3ufOCWw0SZ3kJNud1q",
	"WzajFesWJ5gwqnRhx28IxsHci8TN6fWSxrKIGiHDwHTWOIBbtnQtiO/sca/q1xZ2dhL4kuu2zD4iL0E2",
	"bwD7CWluKDDYaSeLCo1kgFQbygRz6//LlYgMU/Frym31FdPPHiXXW4E1fple10JiCggVN/tnkLKC5nHJ",
	"IUv7Jt6MrZktLFIpCCpXuIFs0SZLRa76R/2GyKHmfEUezYPyOW43MrZlii1zwBaPbYslVcjJa0NU3cUs",
	"D7jeKGz+ZELzTcUzCZneKItYJUgt1KF6UzuvlqCvATh5hO0ePyf30W2n2BYeGCy6+3l2+vg5Gl3tH49i",
	"F4ArDDPGTTJkJ3917CROx+i3tGMYxu1GPYm+lreV4YYZ18hpsl2nnCVs6Xjd4bNUUE7XEI8UKQ7AZPvi",
	"bqIhrYMXntmyRkpLsSdMx+cHTQ1/Gog+N+zPgkFSURRMF865o0Rh6KkpS2En9cPZGkkuo7CHy39EH2np",
	"XUQdJfLTGk3t/RZbNXqyf6QFtNE6J9Tm/chZE73g85yTc59WCFMs15mVLW7MXGbpKOZgMMOKlJJxjYpF",
	"pVfJn0m6oZKmhv2dDIGbLL98Fkkr3U5vyo8D/JPjXYICuY2jXg6QvZchXF9ynwueFIajZA+a1x7BqRx0",
	"5sbddkO+w/GhpwplZpRkkNyqFrnRgFPfivD4yIC3JMV6PUfR49Er++SUWck4edDK7NDPb145KaMQMpYr",
	"sDnuTuKQoCWDLcbuxTfJjHnLvZD5pF24DfSf1/PgRc5ALPNnOaYIfC0i2qlPdV5b0l2sesQ6MHRMzQdD",
	"Bks31Jy000p/ej56N1FQcU+XN2z3HVvmi8cD/tFFxGcmF9zAxpdvVzJAKEFa/SjJZPX3wMdOyddiN5Vw",
	"OqfQE88/AYqiKKlYnv3SvPzsVC2QlKebqM9saTr+2tRXqxdn78Bo2r8N5Rzy6HBW3vzVy6URyfnvYuo8",
	"BeMT23YLKdjldhbXAN4G0wPlJzToZTo3E4RYbT+qq4O287XICM7T5Jhrjmu/AEeQJv0fFSgde6CEH2zg",
	"GNpGDTuwWboJ8Aw10hPynS2hvAHSSiCEmqDPFNF+NV2VuaDZHDNYXH5z9orYWW0fWyXIZglfoyLUXkXH",
	"Jhakz5wWguwL/sSfR0wfZzxe26xa6aRO6h17gGpaNGnHWcdPgCpSiJ0T8jIohmrfqpohDD2smCyMVleP",
	"ZuUjpAnzH61pukG1r8Vah0l+enp7T5UqKClZl4aqc0riuTNwuwz3NsH9nAijm18zZSvnwhbab17rB+DO",
	"7ODfwLaXJyvOLaWcHHHL1Rkkj0W7B85ekd6VEIWsg/gjhX5bHeLYbP8X2Cua4qpbOqBXS9K+oKxL/viK",
	"6CnlgrMUE0zFrmhXYneKn21CLq6uIdcfcXdCI4crWrCgDsVzWBwsYeAZoUNc39AffDWbaqnD/qmxluuG",
	"arIGrRxng2zu6244WyPjClyOUCzIHPBJIVu+S+SQUXd4UrtNjiQjfHozoDx+a7796EwLGJN+xTgqEQ5t",
	"TvCz1kCsAKqN5sE0WQtQbj3t98fqrelzgk9xM9i9P/EVQ3EM6/ozy7Z+7v5QZ97r7bzMpu0L09YlSKp/",
	"bkU520nPytJNOlyVJSoP6B0fRHDEe5l491GA3Hr8cLQRchsNV8H71BAabNHZDSXewz3CqCuUdKpfGaHV",
	"UhS2IDZMLJolgfEIGK8Yh6aebeSCSKNXAm4MnteBfiqVVFsRcBJPuwSao4c7xtCUdu6N2w7VTQ9lUIJr",
	"9HMMb2NTXGWAcdQNGsGN8n1dRtdQdyBMvMD63Q6R/VIpKFU5ISrDVwud4ikxxmEYty/P1L4A+segLxPZ",
	"7lpSe3KOuYmGHqIuq2wNOqFZFkvZ+jV+JfiVZBVKDrCDtKpTe5YlSTHvSjsRTZ/a3ESp4KoqRubyDW45",
	"XVCNKEINYUUkv8P40GW5x39jeS2Hd8YFehwdauijOo7MvtQPnYxJvYamE8XWyXRM4J1ye3Q0U9+M0Jv+",
	"d0rpuVi3AfnE6SdGk2EFexTjb9+YiyPMztBL1mqvljp5Agb2CV9DEtXG+tlvJ/UX1bSfvRUdSnWNunED",
	"xHC1uTlefgPhvUHSDWrvV+uhHAryTQdj0ql2r+M0JaMsaPDFkY0Qsm+LEIq4dXYoKsgGBZnPvd7TJMOe",
	"nK3jiQ8DhPpwsz5A3/tYVlJS5tzvDbPoY9ZFvfffIUyJh202uLsIF0s+aLH7fjsU9+2TseH3bjWqK3BP",
	"5ksJWyYq79j2kU9eJbS/tmo71ZH30fX3Da841ec1hw4aby9dVQC7TKeTf/+LjZMjwLXc/xOYcnub3qtz",
	"1Zd2rXmqaULqhNKTEky3bsUpiQpjOfGcbNiqtHWgTlifsU4RB/p1v+Yzlh11YcbyKs7sKLFjF6/iNZx2",
	"qkk1hUesFIo1ed1j5b0mhhheYoWuIG1Wfywf37OFVGMy/yZuQQIck0TLTBYUDP13+qkBdbqOxHRZp8ZS",
	"TfUz+B+443uvwYIXjTb7+cn0xEpndXQa8mnMhrwG7mp2tt95TI42X60g1Wx74PXdXzfAg5ddc2+XsbW3",
	"g8d4rI5exuQtx1sdG4DGHseNwhMkUbw1OENvb65gf0+RFjVE07HP/VV7k7wdiAHkDokhEaFi0R/WkOwc",
	"8kzVlIFY8NFWtjs0GdAGKzkFb0lvOJcnSXNxNO9LR6aMl5KZNJfpetSrawzEHXqg169EMax/vMTCH6qu",
	"sujzfoRaOjnvZ0e8dnlD8K1k7TvxGURA+d/8w2g7S86uIKw1hZ6qayoz3yJqevFWnWTkPuq9qvNVFLpA",
	"r+qZWRMb239HFcm3hRHQaS6MGJEMhZG3w1HrWI57ygbd2PTvGGhr4FqBdDX5UP7NhYJECx9LOwbHGCps",
	"ZNGNkKAGc1xa4AYzz7xpUutgrl+KmWaoCygKF0gkFNRAJ4MEOMNzjiH7hf3uHw75XK8HLUw1vR4uOuCj",
	"opnqITGk+hVxt+XhB0k3MTYxzm3dZxXLhsNBtr0hpRRZldoLOjwYtUFucq6pEVYStdOk/VV2dITgVecV",
	"7BdWCfLVGvwOhkBbycmCHmRR6GzynZrfVAzu9Z2A9zktV/NZKUSeDDg7zvspfLoUf8XSK8iIuSl89OBA",
	"5RtyH23stTf7erP3KWvKEjhkD04IOeM2Xts7tts5pDuT83t6bP4dzppVNquWM6qdvOPxwFfMdyVvyc38",
	"MOM8TIFhdbecyg5yIEHMbiB9kKTXkTpQJ1O18r6ruVubpyEqC0VMJmnKzhyIk6lDZJrKH02YTF86yHNx",
	"nSAVJXX+r5jOYdq1maTPeNp0M9heQhBvQ5W7QPdkQzOSCikhDXvEnzhYoAohIckFht/EPIMrbeShAuOa",
	"OcnFmojSqLk2jZ73oUTL0gRz2We2tmdiHTUDiQxAuWe1bhrbuD/PSPWa4yvjXG4i9hZEtMfy0eVvHKEc",
	"XbUiAHMCgR62NZ3Fqvu019WtDzVUrU2LgqVxdP9rRZkMxoYcqF0UWV9Njq60kn8VOICrqMt23ENq69At",
	"p/pJ65zJE49FAMCw57QFwyT/6bFgrLCuY0IjSD6vpdZ5q+wu65x9n8/O0nhKrda6AWLGriS4V2q2AF2n",
	"ck5J9cbfYqZ5X7c0egoofEJmy39QZS0h3iLjqt91xQNRJjlsoeVQdk/nqjQFpdgWwsp5tjPJAEq0T3al",
	"5pinNORyHVHKrT0JfG1TsBuVrSxi7U6RA4JTVMzb8cQeEzX1KBmItiyraAt/6ha1yIbKkEXYsId1Iqc4",
	"mknEFzfGIg7GNiDNR88lj4c2hC83a6MIzpbVxlNLhM3JViW95sNKRMTuVPvbb78OgoMR1XlJPXjly3pX",
	"bqpADlLGGGH06gdGZQ4Fvv5rmPTEi1uub0TGsqYupiIDMNWcZ4zegyY6LGhW0D3J2GoF0hrzlaY8ozIL",
	"mzNOUpCaMqPZ7NXNxVoDraxgflCyNdwVB/UMJibjol3KApLvncpwC6kTPTcRidNetVoMlUjs7Ur8OQHd",
	"Geka46oGiMA9hEbZ2h4wwVFAIgW9giPnUex3GJ8G05M4258WOOuUKWK+1hvmVpvEuvthCJHbLSiGOO4Z",
	"ClMvNm+6pI1mQUuyvyC7NP5Dc3FOK8voOxwAL3QYBoUZve3GgfOZH0f9UCMlWMr7IUpoLf+QD9ItsJE0",
	"gi1yjEBrsIlwbUB9e18CB7N6Uftth2qIdt27mGdRcFvkr+cWtrzJVu0LCMecBbml+ad37WICzjPEB2Rv",
	"ho3BoW8wRLJFpbrZy4RXdNLcgR/w7qbmr9EV/VcwexTVSt1QToSpxXofzIM3C82t4WLlS3htgZNrHNPG",
	"sT3+kizdy+1SQspUVzS69tU1alcYFptyr0F2+oDv7dA6fxH6FmS88poG+bHJ1I86/po3EDZH9DMzlYGT",
	"G6XyGPX1yCKCvxiPClOoHbgurloBbrbySeflhpBwx4FuQcj6kYFu/eRwU5dng7nMpVMp6K9z8m3dwm3k",
	"om7WNjVKs4/csXTuU4Ir41UaTHeM7rQIwRInBEElvz3+jUhYYQ1DQR4+xAkePpy7pr89aX82x/nhw6h0",
	"9sniOi2O3Bhu3hjF/DL00s++Zht4VNrZj4rl2SHCaD0RbqqA4iPYX10igs9Sh/RXG2vSP6quFtwtAuQs",
	"YiJrbU0eTBU8/p3w7td1i7zyRT9OWkmm95gf0dsP2K/RCNTv6mgmFw1X64fu7tPiCuoMm03sU6X87fqd",
	"oDneR1Zt5eYWEvkJ+WZHizIHd1C+urf8Ezz987Ps0dPHf1r++dEXj1J49sXzR4/o82f08fOnj+HJn794",
	"9gger758vnySPXn2ZPnsybMvv3iePn32ePnsy+d/umf4kAHZAjrz2Xhm/xuL9SZnr8+TSwNsgxNasu9h",
	"b+sCGjL2FQdpiicRCsry2an/6X/6E3aSiqIZ3v86c8k+ZhutS3W6WFxfX5+EXRZrDHZItKjSzcLP0ytJ",
	"ePb6vPYSWSsQ7qh9J+ute54UzvDbm28uLsnZ6/OToF796ezRyaOTx1jevAROSzY7nT3Fn/D0bHDfF47Y",
	"ZqcfPs5niw3QHGMDzR8FaMlS/0kCzfbu/+qartcgT1wZRvPT9snCixWLDy7o4+PYt0VY0WTxoRUbkx3o",
	"iRUPFh98Ir/x1q1MeS4mKOgwEYqxZosl5geZ2hRU0Hh4KahsqMUHFJcHf1+4hAbxj6i22POw8AFk8ZYt",
	"LH3QOwNrp0dKdbqpysUH/A/SZwCWfT600Du+QNvH4kNrNe5zbzXt35vuYYttITLwAIvVyiYmHfu8+GD/",
	"DSaCXQmSGcEPQ/bcrza0emGL4fd/3nP3qjGHWEDcz1yBVUx9OoM9T5sA//rInme+8cWep15C9c9k8CA+",
	"efTITv8M/3M3hU/bD3Yi5U8vangxtxxGTCEMjz8dDOccI0oN/yKWP3+cz774lFg4Nzo7pznBlnb6p59w",
	"E0BuWQrkEopSSCpZvic/8zoJQZDcMEaBV1xccw+5udyroqByj0JzIbag6gLkDXESCUZMcbXIpSgCGsbb",
	"ha4VhkNgWYnZ3D7Peo+CkY7JCN5e05/J26qawdun4ruDZ+KmxbxH4uEmwXkggNUOP6X2cV1buPOGyE51",
	"L7ZBs38zgn8zgjtkBLqSfPCIBvcXBnVDaSPYSErTDYzxg/5tGVzws1LEgqMuRpiFS50yxCsu2rwiqFxy",
	"+nZayjLnYLC24wwUc9ncUW8wQnEj1suaI/kzj+6pYK/H8tF+fP9Pcb+/oNyf59aO27hCKnMGsqYCyvvZ",
	"bP7NBf6/4QI2LRe1+zonGvJchWdfCzz71tni3upw6wSbyAe6lXFjPy8+tCsztZQEtal0Jq6Dvmgyt/6e",
	"vu5Q1ypt/b24pkwnKyHdOx3MnN3vrIHmC5eUp/Nr8w6+9wUf9wc/hvEm0V8XdWGC6MeuOhr76tSxgUbe",
	"/e0/N6ap0NSDHLI28rx9b/gTpr11zLOxXJwuFhj7vhFKL2Yf5x86Vo3w4/uaJHyuwlkp2RZTH7z/+P8C",
	"AAD//yvhnHBdywAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
