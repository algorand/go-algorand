// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"i6+AN6kkW2OK93cf/n8AAAD///u0R+EF8wAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
