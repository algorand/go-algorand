// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"CgEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
