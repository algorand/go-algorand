// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
