// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PctpLoX0HNbpUfdyjJr5xYVam9ip3kaOM4LkvJubu2b4Ihe2ZwRAIMAI5m4qv/",
	"fgsNgARJkEM9Yidb55OtIR6NRqPR6OfHWSqKUnDgWs2OP85KKmkBGiT+RdNUVFwnLDN/ZaBSyUrNBJ8d",
	"+29Eacn4ajafMfNrSfV6Np9xWkDTxvSfzyT8VjEJ2exYywrmM5WuoaBmYL0rTet6pG2yEokb4sQOcfpy",
	"djXygWaZBKX6UP7I8x1hPM2rDIiWlCuamk+KXDK9JnrNFHGdCeNEcCBiSfS61ZgsGeSZOvCL/K0CuQtW",
	"6SYfXtJVA2IiRQ59OF+IYsE4eKigBqreEKIFyWCJjdZUEzODgdU31IIooDJdk6WQe0C1QITwAq+K2fG7",
	"mQKegcTdSoFt8L9LCfA7JJrKFejZh3lscUsNMtGsiCzt1GFfgqpyrQi2xTWu2AY4Mb0OyA+V0mQBhHLy",
	"9tsX5MmTJ8/NQgqqNWSOyAZX1cwersl2nx3PMqrBf+7TGs1XQlKeJXX7t9++wPnP3AKntqJKQfywnJgv",
	"5PTl0AJ8xwgJMa5hhfvQon7TI3Iomp8XsBQSJu6JbXynmxLO/1l3JaU6XZeCcR3ZF4Jfif0c5WFB9zEe",
	"VgPQal8aTEkz6Luj5PmHj4/mj46u/u3dSfLf7s9nT64mLv9FPe4eDEQbppWUwNNdspJA8bSsKe/j462j",
	"B7UWVZ6RNd3g5tMCWb3rS0xfyzo3NK8MnbBUipN8JRShjowyWNIq18RPTCqeGzZlRnPUTpgipRQblkE2",
	"N9z3cs3SNUmpskNgO3LJ8tzQYKUgG6K1+OpGDtNViBID143wgQv68yKjWdceTMAWuUGS5kJBosWe68nf",
	"OJRnJLxQmrtKXe+yIudrIDi5+WAvW8QdNzSd5zuicV8zQhWhxF9Nc8KWZCcqcombk7ML7O9WY7BWEIM0",
	"3JzWPWoO7xD6esiIIG8hRA6UI/L8ueujjC/ZqpKgyOUa9NrdeRJUKbgCIhb/hFSbbf/Psx9fEyHJD6AU",
	"XcEbml4Q4KnIIDsgp0vChQ5Iw9ES4tD0HFqHgyt2yf9TCUMThVqVNL2I3+g5K1hkVT/QLSuqgvCqWIA0",
	"W+qvEC2IBF1JPgSQHXEPKRZ025/0XFY8xf1vpm3JcobamCpzukOEFXT71dHcgaMIzXNSAs8YXxG95YNy",
	"nJl7P3iJFBXPJog52uxpcLGqElK2ZJCRepQRSNw0++Bh/HrwNMJXAI4fZBCcepY94HDYRmjGnG7zhZR0",
	"BQHJHJCfHHPDr1pcAK8JnSx2+KmUsGGiUnWnARhx6nEJnAsNSSlhySI0dubQYRiMbeM4cOFkoFRwTRmH",
	"zDBnBFposMxqEKZgwvH3Tv8WX1AFXzwduuObrxN3fym6uz6645N2Gxsl9khGrk7z1R3YuGTV6j/hfRjO",
	"rdgqsT/3NpKtzs1ts2Q53kT/NPvn0VApZAItRPi7SbEVp7qScPyePzR/kYScacozKjPzS2F/+qHKNTtj",
	"K/NTbn96JVYsPWOrAWTWsEYfXNitsP+Y8eLsWG+j74pXQlxUZbigtPVwXezI6cuhTbZjXpcwT+rXbvjw",
	"ON/6x8h1e+htvZEDQA7irqSm4QXsJBhoabrEf7ZLpCe6lL+bf8oyN711uYyh1tCxu5JRfeDUCidlmbOU",
	"GiS+dZ/NV8MEwD4kaNPiEC/U448BiKUUJUjN7KC0LJNcpDRPlKYaR/p3CcvZ8ezfDhv9y6Htrg6DyV+Z",
	"XmfYyYisVgxKaFleY4w3RvRRI8zCMGj8hGzCsj0Umhi3m2hIiRkWnMOGcn3QPFla/KA+wO/cTA2+rbRj",
	"8d15gg0inNiGC1BWArYN7ykSoJ4gWgmiFQXSVS4W9Q/3T8qywSB+PylLiw+UHoGhYAZbprR6gMunzUkK",
	"5zl9eUC+C8dGUVzwfGcuBytqmLth6W4td4vVuiW3hmbEe4rgdgp5YLbGo8GI+XdBcfisWIvcSD17acU0",
	"/rtrG5KZ+X1S578GiYW4HSYufGg5zNk3Dv4SPG7udyinTzhO3XNATrp9b0Y2ZpQ4wdyIVkb30447gsca",
	"hZeSlhZA98XepYzjI802srDekptOZHRRmIMzHNAaQnXjs7b3PEQhQVLowPB1LtKLv1O1voMzv/Bj9Y8f",
	"TkPWQDOQZE3V+mAWkzLC49WMNuWImYb4wCeLYKqDeol3tbw9S8uopsHSHLxxscSiHvsh0wMZebv8iP+h",
	"OTGfzdk2rN8Oe0DOkYEpe5ydkSEzr337QLAzmQaohRCksA98Yl7d14LyRTN5fJ8m7dE3VqfgdsgtAndI",
	"bO/8GHwttjEYvhbb3hEQW1B3QR9mHBQjNRRqAnwvHWQC99+hj0pJd30k49hTkGwWaERXhaeBhze+maVR",
	"zp4shLwZ9+mwFU4alTOhZtSA+c47SMKmVZk4UoyorWyDzkCNlW+caXSHj2GshYUzTf8ALCgz6l1goT3Q",
	"XWNBFCXL4Q5Ifx1l+guq4Mljcvb3k2ePHv/y+NkXhiRLKVaSFmSx06DIffc2I0rvcnjQXxm+jqpcx0f/",
	"4qlXVLbHjY2jRCVTKGjZH8oqQK0IZJsR066PtTaacdU1gFMO5zkYTm7RTqxu34D2kikjYRWLO9mMIYRl",
	"zSwZcZBksJeYrru8ZppduES5k9VdPGVBSiEj+jU8YlqkIk82IBUTEWvKG9eCuBZevC27v1toySVVxMyN",
	"qt+Ko0ARoSy95dP5vh36fMsb3IxyfrveyOrcvFP2pY18r0lUpASZ6C0nGSyqVesltJSiIJRk2BHv6O9A",
	"oyhwzgo407Qof1wu7+apKHCgyJONFaDMTMS2MHK9glRw6wmx53XmRp2Cni5ivIpODwPgMHK24ynqGe/i",
	"2A4/XAvG0eihdjwNXrEGxhyyVYssb/9aHUKHneqeioBj0PEKP6Oi4yXkmt65RNedIAb7C0/aFliSmYa4",
	"W6/Yaq0DkfuNFGJ59zDGZokBih/sgyU3ffrPltciMwdNV+oOxJNmsOb0mz0NzzxdiEoTSrjIAHVMlYoL",
	"LgO+DGhERduvDmUhvbZvkAUYQkppZVZblQQtmz1e2nRMaGqpN0HUqAG7Tm2Qs63sdNZOnkug2Y4sADgR",
	"C2c8cWYdXCRFs6z2V78TmyJnqQVXKUUKSkGWOKXNXtB8O8tW9QieEHAEuJ6FKEGWVN4a2IvNXjgvYJeg",
	"E4Ei97//WT34DPBqoWm+B7HYJobe+gnsLGR9qKdNP0Zw3clDsqMSiOe55r1tGEQOGoZQeC2cDO5fF6Le",
	"Lt4eLRuQaKv6QyneT3I7AqpB/YPp/bbQVuWAa5x7+hnpx2wYp1x4oSM2WE6VTvaxZdOo9T41Kwg4YYwT",
	"48ADQskrqrS1rzKeoVrIXic4jxVQzBTDAA+K6Gbkn7103h87NfcgV5WqRXVVlaWQGrLYGjhsR+Z6Ddt6",
	"LrEMxq7fA1qQSsG+kYewFIzvkGVXYhFEdW2GcA4I/cWhst7c87soKltANIgYA+TMtwqwG7oHDQDCVINo",
	"SzhMdSin9kmaz5QWZWm4hU4qXvcbQtOZbX2if2ra9omL6ubezgQo9Epy7R3klxaz1jFsTRVxcJCCXhjZ",
	"A1UE1hDch9kcxkQxnkIyRvn4/DGtwiOw95BW5UrSDJIMcrrrD/qT/Uzs57EBcMebp6DQkFgPn/imN5Ts",
	"HSpGhhY4nooJjwS/kNQcQfPyaAjE9d4zcgY4dow5OTq6Vw+Fc0W3yI+Hy7ZbHRkRb8ON0GbHHT0gyI6j",
	"TwF4AA/10DdHBXZOmndZd4r/AuUmqOWI60+yAzW0hGb8ay1gQL/onKeD89Jh7x0OHGWbg2xsDx8ZOrID",
	"ys43VGqWshLfOt/D7s6fft0JoiY4koGmLIeMBB/sM7AM+xPrm9Id82ZPwUl6qT74PcVUZDk5UyjytIG/",
	"gB2+ud9Yp8fzwFXyDt6ykVHN/UQ5QUC9K5URwcMmsKWpzndGUNNr2JFLkEBUtSiY1taZuf3U1aJMwgGi",
	"Ov+RGZ2ByzoM+h2YYnE7w6GC5fW3Yj6zb4Jx+M47D4MWOtxboBQin6A96iEjCsEkXwhSCrPrzPlVe89a",
	"T0ktIB3TRutmff3fUy004wrIf4mKpJTjk6vSUMs0QqKggAKkmcGIYPWczuuhwRDkUIB9SeKXhw+7C3/4",
	"0O05U2QJlz4YwTTsouPhQ9TjvBFKtw7XHegKzXE7jVwfaAwxF597hXR5yn6ruxt5yk6+6QxeW1DMmVLK",
	"Ea5Z/q0ZQOdkbqesPaSRaR4HOO4kO0cwdGzduO9nrKhyqu/CojMqkNYPClYUkDGqId+RUkIK1uHcSFjK",
	"wmJAI9YVLV1TvkLBWopq5Xyh7DjIGCtlVRiy4r0hosKH3vJkJUVVxhil83/1MQdG7ABqnj4BIrGzFfQv",
	"aT2fCzOZcoN5hAe7850Zc8jQMp8NvgwNUjfNy9Aipx04EccCRoIkqkpTgKhXdOzNVS+1EyDahPy4AY3Y",
	"UEnrFkZoqiuah1RHTpeE8l07cpSyXBkuyBTBdqZz42o8t2vzYT1LmltzdSTOJDwpLYkv2PkGpV1UTDQ8",
	"IJEYaahPGSEBmuNlyPiPUeI3Q8eg7E8c+KE1H4dc0cwDPN/dgRhkByISSgkKL61QcaXsV7EMw8HcraZ2",
	"SkPR1+3brr8MMJq3gy9IwXPGISkEh100Appx+AE/RhkHXpwDnVGEGerbfZW04O+A1Z5nCjXeFr+42wEv",
	"elP7YN7B5nfH7Zh1wkA4VFtCXhJK0pyhUlNwpWWV6vecotokOGwRXxX/PhxWpL3wTeKau4hizQ31nlP0",
	"U6qVKVH7+hIimoNvAbw+TVWrFagO/yRLgPfctWKcVJxpnKsw+5XYDStBosPIgW1Z0J1hgaj3+x2kIItK",
	"t3kyBuMobdiltTGZaYhYvudUkxzMm/oHxs+3OJy30Xqa4aAvhbyosRC/QlbAQTGVxH1qvrNf0d3RLX/t",
	"XB8xeNp+tlYJM34TsbNDrUoTEPx/7//H8buT5L9p8vtR8vx/HX74+PTqwcPej4+vvvrq/7V/enL11YP/",
	"+PfYTnnYY6EiDvLTl+6xdvoSJfLGLNGD/ZOppAvGkyiRhcb3Dm2R+xgW6QjoQVtfo9fwnustN4S0oTnL",
	"jMh1E3LosrjeWbSno0M1rY3o6Gf8Wq8p596Cy5AIk+mwxhtf4303tHhQFtrJXJwVnpdlxe1WekHXxhx4",
	"dyCxnNeBdzYnxzHBqKw19b5s7s/Hz76YzZtoqvr7bD5zXz9EKJll26h0CNvY88UdEDwY9xQp6U7BgACK",
	"sEc9n6y7QThsAebdq9as/PScQmm2iHM478nt1CBbfsqti7U5P2h12zllvlh+eri1NHJ4qdexWP2WpICt",
	"mt0E6HhClFJsgM8JO4CDrhoiM08z54OVA11izDg+9MSUyJT6HFhC81QRYD1cyKS3fox+ULh13PpqPnOX",
	"v7pzedwNHIOrO2dtYvN/a0HufffNOTl0DFPds+Gbdugg4C7yanUxJS0fGcPNbIYSG7/6nr/nL2HJODPf",
	"j9/zjGp6uKCKpeqwUiC/pjnlKRysBDn2YSovqabveU/SGkwiFAQIkbJa5CwlF6FE3JCnTQzRH+H9+3c0",
	"X4n37z/03AX68qubKspf7ATJJdNrUenEhbUnEi6pjJljVB3WjCPbvBVjs86JG9uyYhc278aP8zxalqob",
	"3thfflnmZvkBGSoXvGe2jCgtpJdFjIBiocH9fS3cxSDppVdhVAoU+bWg5TvG9QeSvK+Ojp4AacX7/equ",
	"fEOTuxImKzIGwy+7+gtcuH3XwFZLmpR0FbP6vH//TgMtcfdRXi7wkZ3nBLu14gy9HzUO1SzA42N4Aywc",
	"146ZwsWd2V4+hVF8CfgJtxDbGHGjsUXfdL+CyMMbb1cnerG3S5VeJ+ZsR1elDIn7nakzm6yMkOUdBBRb",
	"oROmSwKzAJKuIb1w2TmgKPVu3urufVCcoOlZB1M2b4uNG8LMAagzXwCpyow6UbyrQVrsiAKtvRfoW7iA",
	"3bloEg9cJ2a7HUKshg4qUmogXRpiDY+tG6O7+c7RCVVcZekjcTEky5PFcU0Xvs/wQbYi7x0c4hhRtEJc",
	"hxBBZQQRlvgHUHCDhZrxbkX6seWZV8bC3nyRHC6e9xPXpHk8OZ+kcDWo4LbfC8AkUOJSkQU1crtw+Yts",
	"mGzAxSpFVzAgIYdmi4nBqC1TBw6y796L3nRi2b3QevdNFGTbODFrjlIKmC+GVPAx0/FE8zNZy5gzAmBa",
	"QoewRY5iUu2yZ5kOlS3zkc2zNgRanIBB8kbg8GC0MRJKNmuqfGolzEDlz/IkGeAPDPseS/YRKvSDNFO1",
	"ft3z3O457b0uXcoPn+fDJ/cIn5YTEnUYCR/9tmPbITgKQBnksLILt409oTQh6M0GGTh+XC5zxoEkMX8s",
	"qpRImc2N1Vwzbg4w8vFDQqwKmEweIUbGAdho8cWByWsRnk2+ug6Q3IXQUz822oqDvyEe7WM9lI3II0rD",
	"wtmAASn1HIA6J776/uq4kuIwhPE5MWxuQ3PD5tyLrxmkl3MCxdZOhgnnc/BgSJwd0cDbi+Vaa7JX0U1W",
	"E8pMHui4QDcC8UJsExvuF5V4F9uFofeo0zYGH8YOps3ucU+RhdiiHwteLdZJeA8sw3B4MIIX/pYppFfs",
	"N3SbW2DGph2XpmJUqJBknDqvJpchcWLK1AMSzBC53A8SdtwIgI6yo8l+6x6/ex+pbfGkf5k3t9q8SUTl",
	"42Fix3/oCEV3aQB/fS1MnWLjTVdiieop2u4Y7ewigQgZI3rDJvpGmr4pSEEO+ChIWkJUchEz3Zm3DeCN",
	"c+a7BcoLzGFC+e5B4OMjYcWUhkaJ7l0SPod6kmLqNCGWw6vTpVya9b0Vor6mbG4e7Nha5idfATrJLplU",
	"OkELRHQJptG3Ch/V35qmcVmp7UVkE42yLM4bcNoL2CUZy6s4vbp5v39ppn1ds0RVLZDfMm59QxaYGDfq",
	"WzgytXU/HV3wK7vgV/TO1jvtNJimZmJpyKU9x1/kXHQ47xg7iBBgjDj6uzaI0hEGGcSE9rljIDfZw4kx",
	"oQdj2tfeYcr82HvdRnxk6tAdZUeKriVQGIyugqGZyIglTAd5ZfvBmgNngJYly7YdXagddfDFTK+l8PDZ",
	"uDpYwN11g+3BQKD3jMWLSFDtxGuNgG8zBLfynhxMwsx5Oz1ayBDCqZjy+e37iKrjyfbh6hxo/j3sfjZt",
	"cTmzq/nsdqrTGK7diHtw/abe3iie0TRvVWktS8g1UU7LUooNzROnYB4iTSk2jjSxuddHf2JWF1djnn9z",
	"8uqNA/9qPktzoDKpRYXBVWG78i+zKpvjbeCA+PzZ5s3nZXYrSgabXyemCpXSl2twiYgDabSXMbExOARH",
	"0Smpl3EPob0qZ2cbsUscsZFAWZtIGvWdtZC0rSJ0Q1nu9WYe2gFvHlzctLSbUa4QDnBr60pgJEvulN30",
	"Tnf8dDTUtYcnhXONpEoubDZwRQTvmtDRvXhXOqt7QTHfodWK9JkTrwrUJCQqZ2lcx8oXyhAHt7Yz05hg",
	"4wFh1IxYsQFTLK9YMJZpNiWjSQfIYI4oMlU0qUqDu4VwlV4qzn6rgLAMuDafJJ7KzkHFBJNO296/To3s",
	"0J/LDWw19M3wt5Exwlyf3RsPgRgXMEJLXQ/cl/WT2S+01kihu3VjkriGwT+csXcljhjrHX04arbOi+u2",
	"xS0szNLnf4YwbIbu/VVh/OPVJR0dmCNa5YWpZCnF7xB/5+HzOBKK47ObMvRy+R34BJ/zRrvTFKtpZh/c",
	"7iHpJtRCtZ0UBqgedz4wy2GaRa+hptxutS260PJ1ixNM6FV6aMdvCMbB3PPEzenlgsZyUBohw8B00hiA",
	"W7p0LYjv7HGv6sAGOzsJbMl1W2bDrEuQTZRcP2XLDQUGO+1kUaGRDJBqQ5lgbu1/uRKRYSp+Sbmt3WH6",
	"2aPkeiuwyi/T61JITJKg4mr/DFJW0DwuOWRpX8WbsRWzZSkqBUHdAzeQLfljqcjVjqjDdRxqTpfkaB4U",
	"X3G7kbENU2yRA7Z4ZFssqEJOXiui6i5mecD1WmHzxxOaryueScj0WlnEKkFqoQ6fN7XxagH6EoCTI2z3",
	"6Dm5j2Y7xTbwwGDR3c+z40fPUelq/ziKXQCurMgYN8mQnfzDsZM4HaPd0o5hGLcb9SAaT27rig0zrpHT",
	"ZLtOOUvY0vG6/WepoJyuIO4pUuyByfbF3URFWgcvPLNFcZSWYkeYjs8Pmhr+NOB9btifBYOkoiiYLpxx",
	"R4nC0FNT1MBO6oezFXZcPloPl/+INtLSm4g6j8hPqzS191ts1WjJfk0LaKN1TqjNjJGzxnvBZ8kmpz7x",
	"DiborfPyWtyYuczSUcxBZ4YlKSXjGh8WlV4mX5J0TSVNDfs7GAI3WXzxNJKUuJ0ck18P8E+OdwkK5CaO",
	"ejlA9l6GcH3JfS54UhiOkj1ooj2CUzlozI2b7YZsh+NDTxXKzCjJILlVLXKjAae+FeHxkQFvSYr1eq5F",
	"j9de2SenzErGyYNWZod+evvKSRmFkLFses1xdxKHBC0ZbNB3L75JZsxb7oXMJ+3CbaD/vJYHL3IGYpk/",
	"y7GHwNci8jr1ibJrTbrzVY9oB4aOqflgyGDhhpqTdlLiT2/088rnvvHJfPGw4h9dYD/zliKS/QoGNjFI",
	"mB7dzqz+Hti/KflabKduaueE+I39E6AmipKK5dnPTVRmJx+9pDxdR+1ZC9Pxl6ZyVr04ez9Fk9atKeeQ",
	"R4ezsuAvXmaMSLX/FFPnKRif2LabIt8ut7O4BvA2mB4oP6FBL9O5mSDEajvgrXaozlciIzhPkyGt4Z79",
	"0gpBAuzfKlA6FjyEH6xTF+otzXvX5l8mwDN8LR6Q72xx3DWQVvobfKXVWQRc7lurUK/KXNBsjokczr85",
	"eUXsrLaPrf9i8z+v8JHSXkVHXxUkf5zmHuxLucRDF6aPM+5LbVatdFKna44Fh5oWTUJp1tHh4/MlxM4B",
	"eRmUubRxpGYIQw9LJgvz4qpHs7IL0oT5j9Y0XeOTrMVSh0l+euJyT5UqKBZYF/2pMyLiuTNwu9zlNnX5",
	"nAjzbr5kytZEhQ2041Hr4GynEvDxqe3lyYpzSylR2WMsecBN0O6Bs44aXs0fhayD+GsK5Dbv/3XzuJ9h",
	"r2iCpm5S+F6VQBvdWBdz8bWuU8oFZymmR4pdza546hQb2IRMUl0lqz/i7oRGDlc0FX3tJuewOJic3jNC",
	"h7i+Ej74ajbVUof9U2OVzjXVZAVaOc4G2dxXVHB6QMYVuAyXWGo34JNCtuyKyCGjpuqkNmlck4wwLGbg",
	"Yfet+fbaPfvRX/yCcRTwHdqca7rV1GFtR21eBUyTlQDl1tOODVbvTJ8DDJPNYPvhwNeCtNlg0Cxnlm1t",
	"0P2hTrxF2lmATdsXpq3LE1T/3PJAtpOelKWbdLjeRlQe0Fs+iOCIZTHxpp0AufX44Wgj5DbqSoL3qSE0",
	"2KAhGkq8h3uEUdee6NQ1MkKrpShsQawLVzSDAeMRMF4xDk2l0sgFkUavBNwYPK8D/VQqqbYi4CSedg40",
	"R+tzjKEp7UwPtx2qm0vIoATX6OcY3sambMYA46gbNIIb5bu6QKqh7kCYeIGVmR0i+0UwUKpyQlSGEQWd",
	"shgxxmEYty+8074A+segLxPZ7lpSe3KucxMNBYkuqmwFOqFZFstI9TV+JfjVJ5eCLaRVnZiyLEmKOVHa",
	"SWL61OYmSgVXVTEyl29wy+mCOjMRaghr3fgdxiCUxQ7/jWVlHN4Z54RxbTdA73HhylBcU25uj9STeg1N",
	"J4qtkumYwDvl9uhopr4ZoTf975TSc7FqA/KJU0OMcblwj2L87RtzcYSZE3qpRu3VUic2QKc74asD4rOx",
	"DsltcyW8ynq5R9HYU1cfG1dADNcRm+PlN+B6GyTEoPZ+tdbDIQfcdNBfnGoXuaYpGWVBg9FA1nvHxv0g",
	"FHHN6ZDHjnXYMZ97vadJhj05G8ceRah3BesD9L33MyUlZc403jCLPmadR/qwunDs0DUb3F2E8/Me1Nh9",
	"vxnyySaK8VUOBL936wxdgAtnr0vv27V6ryT/JLS/usq3drzaKz66/r53Ak71edWgg0rbc5fT3i7Tvcm/",
	"/9n6sBHgWu7+BCrc3qb3qjT1pV2rnmqakDod8qT0yK1bMV5waTj/UZPzCOmpFIo1KbhjlZgm+rqdYzGl",
	"IH9TfyzvaLKBVGPe9caALgGuk83JTBbUPfxXHqSBt2PtEujSH43lPOonW99zofXCkoLQOpuo+mB6hp+T",
	"2k0KmRJmwF0Bd6UH2wEHk92el0tINdvsCQP7xxp4EGI090oIW0I4iApjtRstZhG5voqtAWgsSmsUniCb",
	"363BGQoCuYDdPUVa1BDNnD3398pNEkggBpA7JIZEhIq5IVitqbMMM1VTBmLBu/3Y7tCk4hosuhMENd5w",
	"Lk+S5sZtAh1HpoxX/Zg0l+l6rfBf9AgdihTrFw0YFrZfYo0GVRfE8wkowicpOe2n6bt0CSwwaK82FPhU",
	"FqD8bz5C186SswsIywKhWeaSysy3iOoZvAojGbmPeuFdPuF9F+hlPTNrnDT7AT2RxE/oipvmwshfyZA/",
	"c9svsnYquKes94dN+Y0enwauJUhXPg2FvVwoSLTwTp1jcIyhwtW+vwkS1GCyRQvcYAqUt02OF0w6SzHl",
	"CXWeLeECiYSCGuhkkIlleM4xZL+w330Ei086uledUtPr/kTz3j2XqR4SQ6pfEndb7o+MuYlmhXFuy9eq",
	"WFoWblAZqv5LKbIqtRd0eDBq7dPkpEcjrCSqlEj7q+wIxEF44QXsDq3E7zP0+x0MgbaSkwU9COfvbPKd",
	"6ppUDO7VnYD3OdU081kpRJ4MaPZP+7lkuhR/wdILyIi5Kbwb20CREnIfFcq16fZyvfO5U8oSOGQPDgg5",
	"4dZx2Ftx28mMO5Pze3ps/i3OmlU2vZPTIB2853EPTEy8JG/Jzfww4zxMgWF1t5zKDrInU8l2II+NpJeR",
	"kj0HU5+gfbtqt4xKQ1QWiphM0lQI2eMUUvuDNDUQGp+QfuGikUoc5x0isu3QFu+AuXa5DQdkt+rGXo1o",
	"AOYE5PSGjyiVItVE2uvq4WmgqJMWBUv7w7VQ85cw5w8a4ffUSomsryY8V8rFh0YN4CpqGxs3RdlyVYup",
	"Bqk6cWx0n6JJSpO9JqoWDJMMVdcFY4nl3xIaQfJpLTHNW9U5WadSjk/qZWk8pfbFZF7rlOWVBBeqY+tU",
	"depXlFSvPQc1zfvvGiMjg8I4GlsDgSr7CvfaAFckq3s1iTLJYQMty52LH6rSFJRiGwgLbNnOJAMoUTfW",
	"ldhiJqmQtXeucbf2JDBqTMFu9F63iLU7RfZc2lERY8sTe0zU1KNkINqwrKIt/Klb1D4aKnsUYcMe1omc",
	"4tpMIr64MRax14iMNB89lzxuQw7D1+oHOc6W1Yo7S4TNyVYlveTDAmxE51EbNm+/DoKDEdUJJx1wmsXK",
	"TkmddzJ2PbrIN0/8ZsamClXnLRdUi6rHHKibW9PPbd5Ng0QZp8mb5fuZdJL65rcIswkqRI0ricN0YE2c",
	"gbRWXFQqeX7VPQw/NHxsWq0q32EPeKHtIKhW5Z9xDpzPHAzwQ42UYCmDlNBa/j5zhFtgw/iDLbK3nlmm",
	"Tc5oHUnb+xLYmtSL2oQzVEKua+nB3F+CYz7EvoVIoVUfyyqEhGMOutzQ/NNbeTAp3Aniw9Xkji80NBOE",
	"SLaoVDfzyH1FJ80dmATubmr+Bq1S/wCzR9FHghvK3Si1lOWN2MgyaW6YeF2ME4cklzim9d949AVZuGjC",
	"UkLKVPemuvQZ32utOBZAaUq1j6vh963zZ6FvQcZLL/iR1032aHxyrXgDYXNEPzNTGTi5USqPUV+PLCL4",
	"i/GoMK3PnuviouXYYbPxdzyWhYQ7dvAIXDWv6eDRT1g0dXnWicFcOpWC/jon39Yt3EYu6mZtU72T+sgd",
	"SzE8xakonjncdEevJosQTLtPEFTy66NfiYQl1tUS5OFDnODhw7lr+uvj9mdznB8+jFeE/1T+TBZHbgw3",
	"b4xifh6KcLFRHAPBVJ39qFie7SOMVmhcU5kOg79+ccGxn6U23i/W7Nw/qq4+0XU8KbubgIiJrLU1eTBV",
	"EPQ2Id7NdYtEt6FKN60k0zvM2eWfc+yXqOfVd7Vjg3OMqbO8uLtPiwuos741bhCV8rfrd4LmeB8ZmRr9",
	"WDVWAf9mS4syB3dQvrq3+Bs8+fJpdvTk0d8WXx49O0rh6bPnR0f0+VP66PmTR/D4y2dPj+DR8ovni8fZ",
	"46ePF08fP/3i2fP0ydNHi6dfPP/bPcOHDMgW0JnPEDH7P1hAMjl5c5qcG2AbnNCS1cX/DRn7Klg0xZMI",
	"BWX57Nj/9L/9CTtIRdEM73+duQD02VrrUh0fHl5eXh6EXQ5XaPdMtKjS9aGfp190/c1prTC2j3LcURsf",
	"5pUtnhRO8Nvbb87Oycmb04OgqO/x7Ojg6OAR1nwtgdOSzY5nT/AnPD1r3PdDR2yz449X89nhGmiObkLm",
	"jwK0ZKn/JIFmO/d/dUlXK5AHrjSY+Wnz+NCLFYcfnf33auzbYZhl//Bjy0ye7emJWbgPP/rkUuOtW9mb",
	"nHtA0GEiFGPNDhcYsz61Kaig8fBS8LGhDj+iuDz4+6EL5I1/xGeLPQ+H3pck3rKFpY96a2Dt9EipTtdV",
	"efgR/4P0GYBl3eYDcGerWE6770D7mFfbwzmF1t6gNZ2fZrZ5z0nRpY2zeXSP300rIwJ+OvNqzEAxl1sQ",
	"OYY5Ds2B9vFxDbvWsoIw5+tYdqSreaTi7pKtKtmpJN6pUU6YIv959uNrIiRx7+M3NL2o7RDkdGlzEkmx",
	"YRhJlwXhl6ZnvZzfKpC7Zj3u6gwX4OuUOINGoVZlO5inFss/YMIXBBQZxuOjozurFdjb2Sur+q+H83Dd",
	"ZsQef33hb80WGRo++fTo0Z2trR0jcOuFdYfrreqUo4ueuQWIveVwQU//sgt6ga9pQ/FLxjNb6EVTPNP2",
	"gOL6vvzLrk+zwrsCcKyZBQqFgWd3eMA+PREamZzmBFva1Tz5y67mDOSGpUDOoSiFpJLlO/ITr4Pig0R4",
	"/WvuJ37BxSX3iDBCd1UUVO7cFUhJl1X5a8Beh0HZUiPt0ZVCTwUsPTCbz1zEK2xLkKwAjsl0ruqbeFOI",
	"DPwNL5ZLm1127PPhR/tvcKG3Bq9/tUzz0JbU7/+84y78NYeYM+lPXIHV5Pq8FzueDt392Phsx9O39YXc",
	"u4iQCfxxB6ZPEzW8yJrQ2/APvjmmsfpnnxILn/acf7KD+RYKsQFVV5FviNMIa+YxZAvKS1EENHwweEA/",
	"oCYhLgQ7A0d/Jm/caQbvScR7zsRNK7KP+JJOgnOP87cdfkoB67pAdCfYzE51L7ZBs38xgn8xgjtkBLqS",
	"fPCIBvcXBkRAab0/SUrTNYzxg/5tGT6YSxFzLDwbYRYux84Qrzhr84o/9bP5w5/ifn9BuT/PrR23PrlU",
	"5gxkTQWU99Me/YsL/I/hAjZ/m1NNzYmGPFfh2dcCz771TnBxbtx6jUzkA93yxrGfDz+2y2u1dIRqXelM",
	"XAZ90cZsHST6qsO64Gzr78NLynSyFNLFuGH6835nDTQ/dNmbOr82CRN6XzALRPBj6C8X/fWwri4R/djV",
	"38a+Ov3lQCPvZOw/N7ac0DaCHLK2irz7YPgT5i52zLNR9R8fHmLcyFoofTi7mn/smAHCjx9qkvBJLWel",
	"ZBvMkfHh6v8HAAD//8J2O3RgywAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
