// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"2WCU0goBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
