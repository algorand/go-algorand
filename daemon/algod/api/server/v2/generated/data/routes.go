// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
