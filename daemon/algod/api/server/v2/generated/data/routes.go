// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ZuzBGc4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
