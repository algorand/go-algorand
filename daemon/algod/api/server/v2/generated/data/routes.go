// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round basics.Round) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"02LiVCF16dHR0+nj0d3/CwAA//9asaDaVw0BAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
