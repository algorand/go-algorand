// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"VmlxjQVx3334vwEAAP//P65aYAPsAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
