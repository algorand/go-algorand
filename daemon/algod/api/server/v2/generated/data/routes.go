// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round basics.Round) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"eHT3/wIAAP//0bIDSawNAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
