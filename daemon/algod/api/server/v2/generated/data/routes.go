// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/ZPbNrLgv4LSe1X+OHHGX8lufLX1bmIn2bnYicszyd57Hl8CkS0JOxTABUCNFJ//",
	"9ys0ABIkAYmaUezsq/3JHpEEGo1Go7/7wyQXq0pw4FpNnn+YVFTSFWiQ+BfNc1FznbHC/FWAyiWrNBN8",
	"8tw/I0pLxheT6YSZXyuql5PphNMVtO+Y76cTCf+omYRi8lzLGqYTlS9hRc3AeluZt5uRNtlCZG6IMzvE",
	"+cvJxx0PaFFIUGoI5Y+83BLG87IugGhJuaK5eaTIDdNLopdMEfcxYZwIDkTMiV52XiZzBmWhTvwi/1GD",
	"3AardJOnl/SxBTGTooQhnC/EasY4eKigAarZEKIFKWCOLy2pJmYGA6t/UQuigMp8SeZC7gHVAhHCC7xe",
	"TZ6/myjgBUjcrRzYGv87lwC/QaapXICevJ/GFjfXIDPNVpGlnTvsS1B1qRXBd3GNC7YGTsxXJ+R1rTSZ",
	"AaGcvP32BXn69OlXZiErqjUUjsiSq2pnD9dkP588nxRUg388pDVaLoSkvMia999++wLnv3ALHPsWVQri",
	"h+XMPCHnL1ML8B9GSIhxDQvchw71my8ih6L9eQZzIWHkntiXj7op4fyfdVdyqvNlJRjXkX0h+JTYx1Ee",
	"Fny+i4c1AHTerwympBn03aPsq/cfHk8fP/r4b+/Osv9yf37x9OPI5b9oxt2DgeiLeS0l8HybLSRQPC1L",
	"yof4eOvoQS1FXRZkSde4+XSFrN59S8y3lnWuaVkbOmG5FGflQihCHRkVMKd1qYmfmNS8NGzKjOaonTBF",
	"KinWrIBiarjvzZLlS5JTZYfA98gNK0tDg7WCIkVr8dXtOEwfQ5QYuG6FD1zQHxcZ7br2YAI2yA2yvBQK",
	"Mi32XE/+xqG8IOGF0t5V6rDLilwugeDk5oG9bBF33NB0WW6Jxn0tCFWEEn81TQmbk62oyQ1uTsmu8Xu3",
	"GoO1FTFIw83p3KPm8KbQN0BGBHkzIUqgHJHnz90QZXzOFrUERW6WoJfuzpOgKsEVEDH7O+TabPv/vvjx",
	"ByIkeQ1K0QW8ofk1AZ6LAooTcj4nXOiANBwtIQ7Nl6l1OLhil/zflTA0sVKLiubX8Ru9ZCsWWdVrumGr",
	"ekV4vZqBNFvqrxAtiARdS54CyI64hxRXdDOc9FLWPMf9b6ftyHKG2piqSrpFhK3o5i+Ppg4cRWhZkgp4",
	"wfiC6A1PynFm7v3gZVLUvBgh5mizp8HFqirI2ZxBQZpRdkDiptkHD+OHwdMKXwE4fpAkOM0se8DhsInQ",
	"jDnd5gmp6AICkjkhPznmhk+1uAbeEDqZbfFRJWHNRK2ajxIw4tS7JXAuNGSVhDmL0NiFQ4dhMPYdx4FX",
	"TgbKBdeUcSgMc0aghQbLrJIwBRPu1neGt/iMKvjyWeqOb5+O3P256O/6zh0ftdv4UmaPZOTqNE/dgY1L",
	"Vp3vR+iH4dyKLTL782Aj2eLS3DZzVuJN9Hezfx4NtUIm0EGEv5sUW3CqawnPr/hD8xfJyIWmvKCyML+s",
	"7E+v61KzC7YwP5X2p1diwfILtkggs4E1qnDhZyv7jxkvzo71JqpXvBLiuq7CBeUdxXW2JecvU5tsxzyU",
	"MM8abTdUPC43Xhk59Au9aTYyAWQSdxU1L17DVoKBluZz/GczR3qic/mb+aeqSvO1ruYx1Bo6dlcymg+c",
	"WeGsqkqWU4PEt+6xeWqYAFhFgrZvnOKF+vxDAGIlRQVSMzsoraqsFDktM6WpxpH+XcJ88nzyb6et/eXU",
	"fq5Og8lfma8u8CMjsloxKKNVdcAYb4zoo3YwC8Og8RGyCcv2UGhi3G6iISVmWHAJa8r1SauydPhBc4Df",
	"uZlafFtpx+K7p4IlEU7sizNQVgK2L95TJEA9QbQSRCsKpItSzJof7p9VVYtBfH5WVRYfKD0CQ8EMNkxp",
	"9QCXT9uTFM5z/vKEfBeOjaK44OXWXA5W1DB3w9zdWu4Wa2xLbg3tiPcUwe0U8sRsjUeDEfOPQXGoVixF",
	"aaSevbRiXv6rezckM/P7qI//OUgsxG2auFDRcpizOg7+Eig393uUMyQcZ+45IWf9b29HNmaUOMHcilZ2",
	"7qcddwceGxTeSFpZAN0Te5cyjkqafcnCekduOpLRRWEOznBAawjVrc/a3vMQhQRJoQfD16XIr/9K1fII",
	"Z37mxxoeP5yGLIEWIMmSquXJJCZlhMerHW3METMvooJPZsFUJ80Sj7W8PUsrqKbB0hy8cbHEoh6/Q6YH",
	"MqK7/Ij/oSUxj83ZNqzfDntCLpGBKXucnZOhMNq+VRDsTOYFtEIIsrIKPjFa90FQvmgnj+/TqD36xtoU",
	"3A65RTQ7dLlhhTrWNuFgqb0KBdTzl1aj07BSEa2tWRWVkm7ja7dzjUHApahICWso+yBYloWjWYSIzdH5",
	"wtdiE4Ppa7EZ8ASxgaPshBkH5WqP3T3wvXSQCbkf8zj2GKSbBRpZXiF74KEIZGZprdVnMyFvx457fJaT",
	"1gZPqBk1uI2mPSThq3WVubMZsePZF3oDtW7P3Vy0P3wMYx0sXGj6O2BBmVGPgYXuQMfGglhVrIQjkP4y",
	"egvOqIKnT8jFX8++ePzklydffGlIspJiIemKzLYaFLnvlFWi9LaEB8OVobpYlzo++pfPvOW2O25sHCVq",
	"mcOKVsOhrEXYyoT2NWLeG2Kti2ZcdQPgKI4I5mqzaCfW2WFAe8mUETlXs6NsRgphRTtLQRwkBewlpkOX",
	"106zDZcot7I+hm4PUgoZvboqKbTIRZmtQSomIu6lN+4N4t7w8n7V/91CS26oImZutIXXHCWsCGXpDR/P",
	"9+3Qlxve4mYn57frjazOzTtmX7rI96ZVRSqQmd5wUsCsXnRUw7kUK0JJgR/iHf0daCu3sBVcaLqqfpzP",
	"j6M7CxwoosOyFSgzE7FvGKlBQS64DQ3Zo666Ucegp48Yb7PUaQAcRi62PEfD6zGObVqTXzGOXiC15Xmg",
	"1hsYSygWHbK8u/qeQoed6p6KgGPQ8Qofo+XnJZSafivkZSv2fSdFXR1dyOvPOXY51C3G2ZYK8603KjC+",
	"KLvhSAsD+0lsjZ9lQS/88XVrQOiRIl+xxVIHetYbKcT8+DDGZokBig+sllqab4a66g+iMMxE1+oIIlg7",
	"WMvhDN2GfI3ORK0JJVwUgJtfq7hwlghgQc85Ovx1KO/ppVU8Z2CoK6e1WW1dEXRnD+6L9sOM5vaEZoga",
	"lXDmNV5Y+5adzgZHlBJosSUzAE7EzHnMnC8PF0nRF6+9eONEwwi/6MBVSZGDUlBkzlK3FzT/nr069A48",
	"IeAIcDMLUYLMqbwzsNfrvXBewzbDyBFF7n//s3rwGeDVQtNyD2LxnRh6G7uHc4sOoR43/S6C608ekh2V",
	"QPy9QrRAabYEDSkUHoST5P71IRrs4t3RsgaJDsrfleL9JHcjoAbU35ne7wptXSXiIZ16ayQ8s2GccuEF",
	"q9hgJVU628eWzUsdHdysIOCEMU6MAycEr1dUaetUZ7xAW6C9TnAeK4SZKdIAJ9UQM/LPXgMZjp2be5Cr",
	"WjXqiKqrSkgNRWwNHDY75voBNs1cYh6M3eg8WpBawb6RU1gKxnfIsiuxCKK68T25qJPh4tBDY+75bRSV",
	"HSBaROwC5MK/FWA3jAlLAMJUi2hLOEz1KKcJRJtOlBZVZbiFzmrefJdC04V9+0z/1L47JC6q23u7EKAw",
	"FM297yC/sZi10YBLqoiDg6zotZE90Axivf9DmM1hzBTjOWS7KB9VPPNWeAT2HtK6WkhaQFZASbfDQX+y",
	"j4l9vGsA3PFW3RUaMhvWFd/0lpJ9FM2OoQWOp2LCI8EnJDdH0KgCLYG4r/eMXACOHWNOjo7uNUPhXNEt",
	"8uPhsu1WR0bE23AttNlxRw8IsuPoYwBO4KEZ+vaowI+zVvfsT/GfoNwEjRxx+CRbUKkltOMftICEDdVF",
	"zAfnpcfeexw4yjaTbGwPH0kd2YRB9w2VmuWsQl3ne9geXfXrTxD1u5ICNGUlFCR4YNXAKvye2ICk/pi3",
	"UwVH2d6G4A+Mb5HllEyhyNMF/hq2qHO/sZGuganjGLpsZFRzP1FOEFAfP2dE8PAV2NBcl1sjqOklbMkN",
	"SCCqnq2Y1jaCvavqalFl4QBRv8aOGZ1XM+pT3OlmvcChguUNt2I6sTrBbvgue4pBBx1OF6iEKEdYyAbI",
	"iEIwKgCGVMLsOnPB9D6c2lNSB0jHtNGl3Vz/91QHzbgC8p+iJjnlqHLVGhqZRkgUFFCANDMYEayZ04W6",
	"tBiCElZgNUl88vBhf+EPH7o9Z4rM4cZnoJgX++h4+BDtOG+E0p3DdQR7qDlu55HrAx0+5uJzWkifp+wP",
	"tXAjj9nJN73BGy+ROVNKOcI1y78zA+idzM2YtYc0Mi7MBMcd5cvpuOyH68Z9v2CruqT6GF4rWNMyE2uQ",
	"khWwl5O7iZng36xp+WPzGWbXQG5oNIcsx5yQkWPBpfnGppGYcRhn5gDbENKxAMG5/erCfrRHxWyj9Nhq",
	"BQWjGsotqSTkYLMnjOSomqWeEBtXmS8pX6DCIEW9cIF9dhxk+LWyphlZ88EQUaFKb3iGRu7YBeCCuX0C",
	"jRGngBqVrm8htwrMDW3mczlTY27mYA/6HoOok2w6SWq8BqnrVuO1yOlmAY24DDryXoCfduKRrhREnZF9",
	"hvgKt8UcJrO5v4/Jvh06BuVw4iDUsH2YijY06na5PYLQYwciEioJCq+o0Eyl7FMxDzP+3B2mtkrDamjJ",
	"t5/+kjh+b5P6ouAl45CtBIdtNMmdcXiND6PHCa/JxMcosKS+7esgHfh7YHXnGUONd8Uv7nb/hPY9Vupb",
	"IY/lErUDjhbvR3gg97rb3ZS39ZPSsoy4Fl0+UJ8BqGlTf4BJQpUSOUOZ7bxQU3vQnDfSJQ910f+miXI+",
	"wtnrj9vzoYWppmgjhrIilOQlQwuy4ErLOtdXnKKNKlhqJPjJK+Npq+UL/0rcTBqxYrqhrjjFwLfGchUN",
	"2JhDxEzzLYA3Xqp6sQCle7rOHOCKu7cYJzVnGudameOS2fNSgcQIpBP75opuydzQhBbkN5CCzGrdlf4x",
	"3U1pVpbOoWemIWJ+xakmJVClyWvGLzc4nHf6+yPLQd8Ied1gIX67L4CDYiqLB2l9Z59iQLFb/tIFF2N5",
	"AvvYB2u2+bcTs8xOyv3/vf8fz9+dZf9Fs98eZV/9j9P3H559fPBw8OOTj3/5y//r/vT0418e/Me/x3bK",
	"wx5LxnKQn790mvH5S1R/Wh/QAPZPZv9fMZ5FiSyM5ujRFrmPiceOgB50jWN6CVdcb7ghpDUtWWF4y23I",
	"oX/DDM6iPR09qulsRM8Y5td6oFJxBy5DIkymxxpvLUUN4xrjaY/olHSZjHhe5jW3W+mlb5vV4+PLxHza",
	"pLbaqjfPCeY9LqkPjnR/Pvniy8m0zVdsnk+mE/f0fYSSWbGJZaUWsInpiu6A4MG4p0hFtwp0nHsg7NFQ",
	"OhvbEQ67gtUMpFqy6tNzCqXZLM7hfK6Eszlt+Dm3gfHm/KCLc+s8J2L+6eHWEqCASi9j1TA6ghq+1e4m",
	"QC/spJJiDXxK2Amc9G0+hdEXXVBfCXSOVRlQ+xRjtKHmHFhC81QRYD1cyCjDSox+emkB7vJXR1eH3MAx",
	"uPpzNv5M/7cW5N5331ySU8cw1T2bIG2HDlJaI6q0y9rqBCQZbmZrAFkh74pf8ZcwR+uD4M+veEE1PZ1R",
	"xXJ1WiuQX9OS8hxOFoI894lgL6mmV3wgaSXLdAUpeKSqZyXLyXWokLTkaUuvDEe4unpHy4W4uno/iM0Y",
	"qg9uqih/sRNkRhAWtc5c4YhMwg2VMd+XagoH4Mi2MsyuWa2QLWprIPWFKdz4cZ5Hq0r1E4iHy6+q0iw/",
	"IEPl0mPNlhGlhfSyiBFQLDS4vz8IdzFIeuPtKrUCRX5d0eod4/o9ya7qR4+eAulk1P7qrnxDk9sKRltX",
	"kgnOfaMKLtyqlbDRkmYVXcRcbFdX7zTQCncf5eUV2jjKkuBnnUxeH5iPQ7UL8PhIb4CF4+CsRFzchf3K",
	"FwmLLwEf4RbiO0bcaB3/t92vILf31tvVyw8e7FKtl5k529FVKUPifmea2kELI2T5aAzFFqitujJLMyD5",
	"EvJrV/8GVpXeTjuf+4AfJ2h61sGUrYxkM/OwNgc6KGZA6qqgThSnfNsvkqBAax9W/BauYXsp2tIeh1RF",
	"6Cbpq9RBRUoNpEtDrOGxdWP0N99FlaFiX1U+1x2THj1ZPG/own+TPshW5D3CIY4RRSeJPIUIKiOIsMSf",
	"QMEtFmrGuxPpx5ZntIyZvfkiVZI87yfulVZ5cgFg4WrQ6m6frwDLrIkbRWbUyO3CVQiziegBF6sVXUBC",
	"Qg59RCPTvTt+JRxk370XvenEvH+hDe6bKMj25cysOUopYJ4YUkFlphf252eybkjnmcDCnw5hsxLFpCY+",
	"0jIdKju+OlvJMAVanIBB8lbg8GB0MRJKNkuqfPEyrPHmz/IoGeB3LKywq5zOeRCxFhRya4rleJ7bP6cD",
	"7dIV1fGVdHz5nFC1HFEKx0j4GCQf2w7BUQAqoISFXbh92RNKW+Sh3SADx4/zeck4kCwW/BaYQYNrxs0B",
	"Rj5+SIi1wJPRI8TIOAAb3es4MPlBhGeTLw4BkrsiFdSPjY754G+Ip4/ZcHAj8ojKsHCW8GrlngNQFzHZ",
	"3F+9uF0chjA+JYbNrWlp2JzT+NpBBlVdUGzt1XBxAR4PUuLsDgeIvVgOWpO9im6zmlBm8kDHBbodEM/E",
	"JrP5o1GJd7aZGXqPRshjNmvsYNr6OfcUmYkNBg3h1WIjsvfAkobDgxFo+BumkF7xu9RtboHZNe1uaSpG",
	"hQpJxpnzGnJJiRNjpk5IMClyuR+UxLkVAD1jR1tf2im/e5XUrngyvMzbW23alnrzyUex4586QtFdSuBv",
	"aIVpiti86UssUTtFN/alW78nECFjRG/YxNBJM3QFKSgBlYKsI0Rl1zHPqdFtAG+cC/9ZYLzAKkGUbx8E",
	"AVUSFkxpaI3oPk7ic5gnKRYnFGKeXp2u5Nys760QzTVl3Yj4YWeZn3wFGJE8Z1LpDD0Q0SWYl75VqFR/",
	"a16Ny0rdkC1bypcVcd6A017DNitYWcfp1c37/Usz7Q8NS1T1DPkt4zZgZYalp6OBnDumtrG+Oxf8yi74",
	"FT3aesedBvOqmVgacunO8U9yLnqcdxc7iBBgjDiGu5ZE6Q4GGSTgDrljIDcFPv6TXdbXwWEq/Nh7o3Z8",
	"GnDqjrIjRdcSGAx2roKhm8iIJUwHlZuHmbGJM0CrihWbni3UjprUmOlBBg9f766HBdxdN9geDHTj8qJh",
	"zp1agS76z9l8TlFAPjUinN1yV2e4G1g3LELZCHEj1/n9zxdaSLoAZwTN7PR3GgJBP2TJQYlHRTSz3syC",
	"zecQGv/UbQxXHeD6Jp5oI4cRBBW3ENaM6y+fxUhmD6W0MO5HWZw6IrSQcgldDo2sXoQKdMymS0mwNbew",
	"lEazRb+Hbfaz0UZIRZlUbXSYs3p2ed0Bu75efQ9bHHlv0JUBbM+uoEr6FpAGYybA5pFNkmjUnbBeKRZ4",
	"6GzhATt1Ft+lI22NqzCbJv42BLtTgbW7lLscjNZHZ2AZsxsXcdeYOT3QRXyflPdtAksY3kJyDMSrcCqm",
	"fD+e4bXTpELvo91LoKUnXlzO5ON0cjdHVOzmciPuwfWb5rKM4hkDnaxjouNXPhDltKqkWNMyc+661EUv",
	"xdpd9Pi69+59YsExTtmX35y9euPA/zid5CVQmTWKV3JV+F71T7MqW5N291WCFjRvAbGKebD5TSHN0MV3",
	"swTXOCHQ7QcVnlv3bXAUnctvHo+33Mv7nKfZLnGHxxmqxuHcOkOsv7nrY6ZrykrvhfDQJmIjcXHjyoRH",
	"uUI4wJ191UHIQXZUdjM43fHT0VLXHp6Ec/2IldHi2gV3ddOQFTnfMz269PStkB3m7xJjor7r30+sMkK2",
	"xWMiVNA34+kLUyfECl6/Ln41p/Hhw/CoPXw4Jb+W7kEAIP4+c7+jfvHwYdStELUaGCaBRgFOV/CgCfJN",
	"bsSnNTFxuBl3QZ+tV41kKdJk2FCodUJ7dN847N1I5vBZuF8KKMH8tD+PrrfpFt0hMGNO0EUqEaaJcVrZ",
	"/j+KCN4P6cMcLENayOxXFCucWy/N8AjxeoWejUyVLI/7fPlMGfbKbSyPeZngywnjmBmxZonQMF6zYCzz",
	"2piSfT0ggzmiyFTRqoEt7mbCHe+as3/UQFhhtJo5A4n3Wu+q88oBjjoQSI3qOZzLDWwjBtrh72LzCKv7",
	"92VGBGK3wSOMHBqA+7Ix4fuFNh6yVmc6NAAxnHHAuHcEDzr6cNRskymW3QigcXrMmD6QntG5NgOJOaJ9",
	"HZnK5lL8BnG7M5rrI3nYvp8Bw6jb3yBUz8JuZh2W0nib2vaU7ez7tnu8bpza+Dvrwn7RTQuF21ym8VN9",
	"2EbeRulV8WqhDskpJSx0PXYjUxOsBY9XEIuF1et9WALl9jzZJOROgkP8VIapRKd2/PZUOpgH6VclvZnR",
	"WGl/owsZmILt7QRQaEH8x34DVJNia2cnQQBh8y6zhYwqkG0dimFRxFvqNXba0RpNq8AgRYWqy9QGfZVK",
	"RIap+Q3ltiWi+c7yK/e1AuvxNF/dCIllyFQ81qOAnK2i5tirq3dFPvTrF2zBbLe/WkHQTs4NZDupWipy",
	"LfmaxHGHmvM5eTQNelq63SjYmik2KwHfeGzfmFGF12XjfWw+McsDrpcKX38y4vVlzQsJhV4qi1glSKN7",
	"opDXRCzNQN8AcPII33v8FbmPsVqKreGBwaITgibPH3+Fnnb7x6PYLeu6Ne5i2QXy7L85nh2nYwxWs2MY",
	"JulGPYlWbLLtmtO3w47TZD8dc5bwTXeh7D9LK8rpAuLhwas9MNlvcTfRe9rDC7feAFBaii1hOj4/aGr4",
	"UyLl0LA/CwbJxWrF9MpF9CixMvTU9oqzk/rhbONS1+bDw+UfYmBc5eOCerauT6zG0FUiZQDDF3+gK+ii",
	"dUqorT1XsjZk1TcfIue+tCX2PWnanVjcmLnM0lGWxAjWOakk4xrtH7WeZ382arGkuWF/Jylws9mXzyL9",
	"Q7ol9vlhgH9yvEtQINdx1MsE2XuZxX1L7nPBs5XhKMWDNsU3OJXJCL54rFYqYGz30GMlXzNKliS3ukNu",
	"NODUdyI8vmPAO5Jis56D6PHglX1yyqxlnDxobXbop7evnJSxEjJWr7o97k7ikKAlgzUmbMQ3yYx5x72Q",
	"5ahduAv0nzfcxIucgVjmz3JUEQg8mrtyNY0U//PrtvAuOlZtIkzPBihkxNrp7HafOLjrMKtb339r43Pw",
	"WQJzo9Fmu7oPsJIIy7Vxt803nzh1N2rutXveMTg+/pVIo4OjHP/wIQL98OHUicG/Puk+tuz94cN4/cuo",
	"yc382mLhLhoxfhvbw69FxADmm001wUMuPTdigExdUuaBYYIzN9SUdBv7fHop4jiJH/HgvvgpuLp6h088",
	"HvCPPiI+M7PEDWzDl9OHvdvYLEoyRfM8CCum5GuxGUs4vTvIE88fAEUJlIw0z+FKBo3bou76vfEiAY2a",
	"UWdQCqNkhj0pQnv+Pw+ezeKnO7Bds7L4uS0t1LtIJOX5MhqUOTMf/tI2WG+WaFlltMz9knIOZXQ4q9v+",
	"4nXgiJb+dzF2nhXjI9/tNw60y+0trgW8C6YHyk9o0Mt0aSYIsdqt2tJkBZcLURCcp62p3jLHYQfOoC3Y",
	"P2pQOnY08IHNTEJnl2G+tisVAV6g9euEfIf1EwwsnYK5aHXypQi7ZbnqqhS0mGKJxMtvzl4RO6v9xrYJ",
	"tl2xFmh06a4iaiUfX6as6fgbz78fP87uhGCzaqWzpolVrMKReaNts8V6oRNojgmxc0JeWkuY8nYWOwnB",
	"QptyBUXQM8vqYkgT5j9a03yJJqbORZYm+fHt3DxVtgb4oDd000MBz52B23V0sw3dpkToJcgbpgAzLmEN",
	"3aJKTYUxZ+L0RZa6y5M155ZSTg6QKZqOCYei3QNnBRLvG45C1kP8gQYG2w3x0O52F/hVtKRzv1Vez3nr",
	"S/Q0PX9fOxtxTrngLMeCyjGBCAvAjPM2jag9HXcTqYk7oZHDFW3Q1+R6OSwmW/Z5RugQN/TcBk/Nplrq",
	"sH9q2LjGLQvQynE2KKa+z6TzazCuwPXEMEQU8kkhI7Ep0Xj2xg9+IBlhbYeEoepb8+wHZ8bEpOdrxtFg",
	"4dDmxGzreSgVQwcjJ0yThQDl1tMtcKXemW9OsNZTAZv3J6/EguUXbIFj2Ggos2wb+jcc6swHArrAO/Pu",
	"C/Ouq8Db/NyJ6rGTnlWVmzTdhTTeennDkwiOhZ/4eIAAuc344Wg7yG1nBC/ep4bQYI3BR1DhPTwgjKYj",
	"Z6/9tVERLEXhG8TmIUXL8DEeAeMV494TFr8g8uiVgBuD5zXxncol1VYEHMXTLoGWiTh2zOuzrtS7DtWv",
	"P2xQgmv0c6S3sW0mmmAczQut4Eb5lvhDYag7ECZe0LKJgI20BkWpyglRBeaI9JqFxhiHYdy+HXH3AtjT",
	"gXzafo41vQ+9iVKVjmZ1sQCd0aKItSj5Gp8SfEqKGiUH2EBeN60sqorkWNizW+l0SG1uolxwVa92zOVf",
	"uON0QffdCDWEHYD9DmMlhdkW/z2kN3wT+3pwLpsPdC0OK+87zM2LSb2GpjPFFtl4TOCdcnd0tFPfjtDb",
	"749K6aVYdAH5HEbSBJcL9yjG374xF0dY/m8QZmyvlqY6H4b0CnzuC1o0daW6XAmvskG3EnReNz3Zd5sh",
	"0t3Vp3j5JfJHQ5O3vV+tGTiVRZonk56pduVXNCU7WVCypIUN+ewZ0YeeoFSYp43yPJ7x2a11J0LTLpjv",
	"Ow4XG+rTMouko+V2vpB2gw91hny/TiUW+2rf+LzfffkaXE22SsKaidoH0fhQVq8S2l87vYyb1O7o+qMB",
	"4p/b+Jw0lV+6Lnh2mU4n//5n60wjwLXc/gEM54NNH/R1Hkq71jzVvkKaBkqjGip1bsUxlfBjRdedbNjp",
	"LL2nL/aArF6OEQeGfa6nk/PioAszVrh/YkeJHbt41+p0XeO2ljEesUoo1vYxi7WzHhkzfokdqYO6zMOx",
	"fCzhGnKNzevaGCkJcEiVZjOZt93/q75xWp1uQutdWeNdtYyHHev23PGDciNByRzb7etkfOXesyYS1iby",
	"3FCFde4l2ri7qa+jE/Dmc8g1W+8p7/K3JfCgdMjU22UQlnlQ7YU16ShYHfRwq2ML0K7qKzvhCar03xmc",
	"VDryNWzvKdKhhmj7sSYX6zaFIREDyB0yQyJCxSLNrCHZBf8w1VAGYsFHdtrPoS2xnexcHBQruuVcniTN",
	"xdEWMNoxZbx16qi5zKcHlfXCzIpUBZhh58W0/vESG10qF+dEm8KSoZZOzofl929cYUosxtP4TnyJSlD+",
	"N195y85SsmsIeyujp+qGysK/ETW9eKtOtuM+GpRt8V0D+0DPm5lZG4c/9FVHCjpjSkteCiNGZKm8oG7o",
	"exM3dk/ZAD/bXwyD+g1cc5CuBz3Kv6VQkGnh4/Z3wbELFTaK8VZIUMkmCha4ZGnTt23tVmwmQ7GUKXXB",
	"i+ECiYQVNdDJoMJqes5dyH5hn/tcat9MZK+FqaHX/V3tfAYGUwMkhlQ/J+623J+jfRtjE+McZOY9T/1y",
	"qxxk1xtSSVHUub2gw4PRGORGl0DZwUqidpp8uMqejhDkOl/D9tQqQb4doN/BEGgrOVnQgzJ9vU0+qvlN",
	"xeBeHAW8z2m5mk4qIcos4ew4H9aI7VP8NcuvoSDmpvCRyolOr+Q+2tgbb/bNcutrolYVcCgenBByxm1u",
	"iHdsd5sU9Sbn9/Su+Tc4a1Hbss3OqHZyxeNB9lhQWd6Rm/lhdvMwBYbV3XEqO8ieCqSbRH1aSW8ifY9P",
	"xmrlQ1dzvxdtS1QWiphMcmE9Vi/woMcMR5jJHpRcQEcmJc7TRVQpYiGZt8m2N0PFMRVOhgBp4GOSvhso",
	"3OBRBES7q0ZOoa1g5mqXiTmR0DqRvfBA8xyUaj0t+4q4DRvBxjT6/szNLF1+1y8bh8khQhZe5GGq7b1M",
	"5YxpSeX2NqXWBo1oB9aTJJb3hmM1kVjtQtporCEOy1LcZMissqaOeUy1Ne+p7mXsW7e035lTPYMgrosq",
	"J6htyZIWJBdSQh5+EU/bs1CthISsFBjmFfNAz7WRu1eYq8NJKRZEVLkowPYDiFNQaq6ac4piEwRRNVEU",
	"WNrBpE/7TUDHI6c8VhdkW5zHLjqzvsxE4CkoV4zHYci+PIR3Rwfhgyrxn8/RIsQw1qWbe22lz7CPMhzY",
	"RpmVpTcYpDopk59UjeFImHhjpnhGVkJpp9nZkVQzVBvidT8XXEtRll0jkBWJF86y/ZpuzvJcvxLiekbz",
	"6weoR3Khm5UWU5+W2g/Ga2eSvYpMI1s+Xy4jdl6cxZ+6g/s6O85xcDvWAMz3+znWfhv3WaxtdXdd/T7s",
	"PFE7U4sVy+M0/M8V3ZaMSYuxhGipJ9sRySbn42vIqMPLoQlmQJY0RDNwQ7Cx/XI8zTl1kXmY/6LE2x+X",
	"zMFdEomLacgnndSS5UnZqgcAQmozRnUtbRulUPJpuIpY2AxzdEn3AR3JxTHy526wmRGODpSGOwE1iDZs",
	"ALxvlf2pLcllIxdnYuOfP2hrdt0K+I+7qTzWej5yihvScp3xfX2PBEeIVwbeGX+ETcL9Dbo/CqlpeTfy",
	"Rg0ASMcldWAYFZ10KBhzykooMqoTlzvahKaBZusyWvqNTJlynDyn9sJeAjFj1xJcvQkrUvcan1fUkJJo",
	"Xh9abnkBG1BYDMJ2b6bK+hm8vwNK20Kqp3yLKithDZ1wLVcEo0bRjq3Bf6uaj0kBUKH3r2+TisUhhXd5",
	"z1Dh1p4FkSxjsBu1XFjE2p0ie8wSUSPKhmf2mKixR8lAtGZFTTv4U4eKHF2zmznKEVQNZPLM621jp/nJ",
	"jvDWD3Dmv4+JMh4T78fxoYNZUBx1uxjQ3rjEWqVOPY+HJYYVXhqHBs5WNI5PS+It31AVveFpA+CQ5Fv1",
	"ZuQ+McEDxH6zgRylmm7c3d1xQnAwonrVm5IiuGx2+PaG5M9CwztJODleTNVQgAx2p6XG04UT2PEFbF3J",
	"jdhrpGZsF+X4v+N/U+y2bwcyerXtXhVqcC/Be+ywoHTjrHACLWsuNB9fOHX1BPtKOQsiq1d0S4TEf4y+",
	"9o+almy+xRNqwfefEbWkhoSci9D6rl28opl4t2Ay9YB5u4DwU9l1s7FjBsNtzSgB0OYKdMYprAx0DeE2",
	"oFvecp5cG5aj6tmKKYWXXW87h1hwi/c1IVa0CHVkrEzXbRvqa5War/9nm7UVTuULSlUlzX2vMiCKrnoG",
	"cduP0BOXXsJqd1rfUD32JND0OGyJVvp03uIWxr0DIzdisfKpfg8dsAe933y7h+Ms45BmxG1m9I6EyFFL",
	"OfYujI0PGQCNTmZf1WsP+LYao68A9inwHy0amVrGGPD/KHhPtMwL4bXd8T4Bljsp/xFYrV11JjaZhLna",
	"FwphDatGEZZtsQBvnGQ8l0CVjQ05/9GpbG1NRMaNCmmjFxvvWzNKAXPGW2bJeFXriAaApRH5NkBYaJ5G",
	"tCacPSkpwYhha1r+uAYpWZHaOHM6bMuusCa9N8m7byPKf3OnDgdgqtV+MJMQ2ky14DVzgduuNzawUGnK",
	"CyqL8HXGSQ7S3Pvkhm7V7X0fBlpZG/lij/eDBtJMN7898IMgaVtAyq1zX97RM9EASI/oohjhWsAI1ohb",
	"wRpFtEh4EoYwxMsq0E1WigXmlyUI0BWfRN+PVVYER4OtlYcOm0ex32D3NFh32x18LXDWMVPsPmc/IupQ",
	"4fmJM73zpFlrWj/hz0Zk2oPg6Z8v2rBwuzlD+o/laF5iEkMnT7PfYN7vtQ0PsfNBwpPRteAmdhEd5C7B",
	"NzTXju9n1PXBxzJBrQ6boW6rdgR+g2qDnGnuAneGRp+BUmyRMnV5tAfahKwl2d8DCfBsV1p3trrTNsEU",
	"ZpxDmkDtzpzNKlFl+ZhoQFuav3AGbQdpF8YEfQTm6sS6m8AJ1TSr6BQ26XStOLQPVrJrxj6/TJXvUrJT",
	"Bo0EB+0ay8UceRkeYWvGwRyPxngx7WcfdQ02DZMglEjIa4kGzRu63d9XKFES9uKvZ188fvLLky++JOYF",
	"UrAFqLascK8vTxsxxnjfzvJpY8QGy9PxTfB56RZx3lPm022aTXFnzXJb1dYMHHQlOsQSGrkAIscx0g/m",
	"VnuF47RB33+s7Yot8ug7FkPB77NnLrI1voAz7vQXMSe7eUa355+O8wsj/EcuKb+1t1hgyh6bzou+DT22",
	"Btk/DBVGEr2PRnvNcn8PiotKmbdrlTsKtGHSb4Q8EIBENl8nDyvspN3Wq5TWtotWYO8w619ir1tH2t6w",
	"c4TEf7AHvDA9r32viZR24Hzmwo+vG6QES3mfooTO8vdl/LkFtp7HYIucqqs1KMuWxFC4CNI51YsmSzIh",
	"2w6SKbFtttFvyjKShGm1bzxTIeEYwVKuafnpuQb2Uz9DfEDxNp16EWbihUi2qFS3qwP2io6aO8i6O97U",
	"/A0mfv4NzB5F7zk3lHM6Dm4ztJ1gY+OFvxVsLim5wTFtUMnjL8nM1WSvJORM9Z2Z1uMURAWuQbK5C+CD",
	"jd6T6bZvnT8LfQcynvvIA/JD4JQQaPxpIWyP6GdmKomTG6XyGPUNyCKCvxiPCns47rku7li/+3ZlJYIC",
	"UQeWlRh2pxy7PFs6wVw6tYLhOkff1h3cRi7qdm1ja6KMLgN+dfVOz8aUMomX7DafYy2Vo9TuPqhy9+9Q",
	"RcXiyI3h5o1RzM+pupq2dmSihGtvP2pW7g0z6BTk/TidLICDYgpLzv7iWgx82rvUQ2Azu4dH1cJ6l3IU",
	"FjGRtXYmD6YKSu2OqLLrPovU1MWsqbyWTG+xvaQ3w7BfovVevmtqB7jaE40HxN19WlxD0+K3rTRQK3+7",
	"fidoifeRdcxwcwuJ8oR8s6GrqnRGRfKXe7M/wdM/PysePX38p9mfH33xKIdnX3z16BH96hl9/NXTx/Dk",
	"z188ewSP519+NXtSPHn2ZPbsybMvv/gqf/rs8ezZl1/96Z7hQwZkC6ivAP188n+ys3IhsrM359mlAbbF",
	"Ca3Y92D2BnXlucD2ZwapOZ5EWFFWTp77n/6XP2EnuVi1w/tfJ66Nx2SpdaWen57e3NychJ+cLjC1ONOi",
	"zpenfh5sStWRV96cNzHJNnoCd7S1QeKmOlI4w2dvv7m4JGdvzk9agpk8nzw6eXTy2HVA5bRik+eTp/gT",
	"np4l7vupI7bJ8w8fp5PTJdASK3GYP1agJcv9Iwm02Lr/qxu6WIA8wbBz+9P6yakXK04/uBTrj7uenYaO",
	"+dMPnUz0Ys+X6FQ+/eD7IO5+u9MDz8XzBB+MhGLXa6cz7H0w9lVQwcvppaCyoU4/oLic/P3U2TziD1Ft",
	"sefh1JdriL/ZwdIHvTGw7vliw4pgJTnV+bKuTj/gf5B6A6BtKb9TveGn6H87/dBZq3s8WGv39/bz8I31",
	"ShTggRPzue0Puevx6Qf7bzARbCqQzIiFWD7D/WrLHJ1im6Dt8Octd96rEmLFKX7iCqza6kuLb3ne5tw0",
	"B/q88C9fbHnu5VcfUobH9MmjR3b6Z/ifiWuj0SvhcOrO42Rcb/Bu8Txkgj3DWQOvzSwCfTJBGB5/OhjO",
	"uQ0jM1zRcu+P08kXnxIL50aj57Qk+Kad/ukn3ASQa5YDuYRVJSSVrNySn3gTCRc0NYxR4DUXN9xDbq7+",
	"erWicosi9UqsQRHXLzEgTiLBCDHWW44e3ZaG8e6hC4X+p3pWsnwytaUS36PYpGMShLfmDGfylqx28O6p",
	"+G7vmRi/C13BdEdtilFw7slatsMPperh/vq973vU7FT3Yhs0+Rcj+BcjOCIj0LXkySMa3F9YYAkql1uX",
	"03wJu/jB8LYMLvhJJWIZ5Bc7mIVrY5DiFRddXtFGak2evxvXrMm5H6xluQDFXKt81CqMyNwK/bLhSP7M",
	"Y/RTsNe7+tB+fP+HuN9fUO7Pc2fHbY0PKksGsqECyoedJf7FBf7bcAHbIofafZ0SDWWpwrOvBZ5964px",
	"dfO4dZGN5AOdMoetMN35+fRD58+uQqSWtS7ETfAtGtStN2ioO5iHter/fXpDmc7mQrqaedgxe/ixBlqe",
	"ugYZvV/bmtSDJ1hoO/gxzE6L/npKnRIRe1b5nvLRh31FNvbUKXKJl3xoqH/cGrVCIxFyz8Y89O694V3Y",
	"Ctcx1tbm8fz0FHMFlkLp08nH6YeePSR8+L4hF9/BbVJJtsYS5e8//v8AAAD//+K2jz4G9wAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
