// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
