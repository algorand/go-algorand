// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
