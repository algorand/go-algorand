// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"uw//NwAA//9kJgVx/OsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
