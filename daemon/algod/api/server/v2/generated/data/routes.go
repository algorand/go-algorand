// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
