// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PctpLoX0HNbpUfdyjJr5xYVam9ip3kaOM4LkvJubu2b4Ihe2ZwRAIMAM4jvvrv",
	"t9AASJAEZziSYidb55OtIR6NRqPRb3ycpKIoBQeu1eT046SkkhagQeJfNE1FxXXCMvNXBiqVrNRM8Mmp",
	"/0aUlowvJtMJM7+WVC8n0wmnBTRtTP/pRMJvFZOQTU61rGA6UekSCmoG1tvStK5H2iQLkbghzuwQ5y8n",
	"1zs+0CyToFQfyh95viWMp3mVAdGSckVT80mRNdNLopdMEdeZME4EByLmRC9bjcmcQZ6pI7/I3yqQ22CV",
	"bvLhJV03ICZS5NCH84UoZoyDhwpqoOoNIVqQDObYaEk1MTMYWH1DLYgCKtMlmQu5B1QLRAgv8KqYnL6b",
	"KOAZSNytFNgK/zuXAL9DoqlcgJ58mMYWN9cgE82KyNLOHfYlqCrXimBbXOOCrYAT0+uI/FApTWZAKCdv",
	"v31Bnjx58twspKBaQ+aIbHBVzezhmmz3yekkoxr85z6t0XwhJOVZUrd/++0LnP/CLXBsK6oUxA/LmflC",
	"zl8OLcB3jJAQ4xoWuA8t6jc9Ioei+XkGcyFh5J7Yxne6KeH8n3VXUqrTZSkY15F9IfiV2M9RHhZ038XD",
	"agBa7UuDKWkGfXeSPP/w8dH00cn1v707S/7b/fnsyfXI5b+ox92DgWjDtJISeLpNFhIonpYl5X18vHX0",
	"oJaiyjOypCvcfFogq3d9ielrWeeK5pWhE5ZKcZYvhCLUkVEGc1rlmviJScVzw6bMaI7aCVOklGLFMsim",
	"hvuulyxdkpQqOwS2I2uW54YGKwXZEK3FV7fjMF2HKDFw3QgfuKA/LzKade3BBGyQGyRpLhQkWuy5nvyN",
	"Q3lGwguluavUYZcVuVwCwcnNB3vZIu64oek83xKN+5oRqggl/mqaEjYnW1GRNW5Ozq6wv1uNwVpBDNJw",
	"c1r3qDm8Q+jrISOCvJkQOVCOyPPnro8yPmeLSoIi6yXopbvzJKhScAVEzP4JqTbb/p8XP74mQpIfQCm6",
	"gDc0vSLAU5FBdkTO54QLHZCGoyXEoek5tA4HV+yS/6cShiYKtShpehW/0XNWsMiqfqAbVlQF4VUxA2m2",
	"1F8hWhAJupJ8CCA74h5SLOimP+mlrHiK+99M25LlDLUxVeZ0iwgr6Oark6kDRxGa56QEnjG+IHrDB+U4",
	"M/d+8BIpKp6NEHO02dPgYlUlpGzOICP1KDsgcdPsg4fxw+BphK8AHD/IIDj1LHvA4bCJ0Iw53eYLKekC",
	"ApI5Ij855oZftbgCXhM6mW3xUylhxUSl6k4DMOLUuyVwLjQkpYQ5i9DYhUOHYTC2jePAhZOBUsE1ZRwy",
	"w5wRaKHBMqtBmIIJd+s7/Vt8RhV88XTojm++jtz9ueju+s4dH7Xb2CixRzJydZqv7sDGJatW/xH6YTi3",
	"YovE/tzbSLa4NLfNnOV4E/3T7J9HQ6WQCbQQ4e8mxRac6krC6Xv+0PxFEnKhKc+ozMwvhf3phyrX7IIt",
	"zE+5/emVWLD0gi0GkFnDGlW4sFth/zHjxdmx3kT1ildCXFVluKC0pbjOtuT85dAm2zEPJcyzWtsNFY/L",
	"jVdGDu2hN/VGDgA5iLuSmoZXsJVgoKXpHP/ZzJGe6Fz+bv4py9z01uU8hlpDx+5KRvOBMyuclWXOUmqQ",
	"+NZ9Nl8NEwCrSNCmxTFeqKcfAxBLKUqQmtlBaVkmuUhpnihNNY707xLmk9PJvx039pdj210dB5O/Mr0u",
	"sJMRWa0YlNCyPGCMN0b0UTuYhWHQ+AnZhGV7KDQxbjfRkBIzLDiHFeX6qFFZWvygPsDv3EwNvq20Y/Hd",
	"UcEGEU5swxkoKwHbhvcUCVBPEK0E0YoC6SIXs/qH+2dl2WAQv5+VpcUHSo/AUDCDDVNaPcDl0+YkhfOc",
	"vzwi34VjoygueL41l4MVNczdMHe3lrvFatuSW0Mz4j1FcDuFPDJb49FgxPy7oDhUK5YiN1LPXloxjf/u",
	"2oZkZn4f1fmvQWIhboeJCxUthzmr4+AvgXJzv0M5fcJx5p4jctbtezOyMaPECeZGtLJzP+24O/BYo3At",
	"aWkBdF/sXco4Kmm2kYX1ltx0JKOLwhyc4YDWEKobn7W95yEKCZJCB4avc5Fe/Z2q5R2c+Zkfq3/8cBqy",
	"BJqBJEuqlkeTmJQRHq9mtDFHzDREBZ/MgqmO6iXe1fL2LC2jmgZLc/DGxRKLeuyHTA9kRHf5Ef9Dc2I+",
	"m7NtWL8d9ohcIgNT9jg7J0NmtH2rINiZTAO0QghSWAWfGK37IChfNJPH92nUHn1jbQpuh9wicIfE5s6P",
	"wddiE4Pha7HpHQGxAXUX9GHGQTFSQ6FGwPfSQSZw/x36qJR020cyjj0GyWaBRnRVeBp4eOObWRrj7NlM",
	"yJtxnw5b4aQxORNqRg2Y77SDJGxalYkjxYjZyjboDNR4+XYzje7wMYy1sHCh6R+ABWVGvQsstAe6ayyI",
	"omQ53AHpL6NMf0YVPHlMLv5+9uzR418eP/vCkGQpxULSgsy2GhS573QzovQ2hwf9laF2VOU6PvoXT72h",
	"sj1ubBwlKplCQcv+UNYAakUg24yYdn2stdGMq64BHHM4L8Fwcot2Ym37BrSXTBkJq5jdyWYMISxrZsmI",
	"gySDvcR06PKaabbhEuVWVnehyoKUQkbsa3jEtEhFnqxAKiYi3pQ3rgVxLbx4W3Z/t9CSNVXEzI2m34qj",
	"QBGhLL3h4/m+Hfpywxvc7OT8dr2R1bl5x+xLG/nekqhICTLRG04ymFWLliY0l6IglGTYEe/o70CjKHDJ",
	"CrjQtCh/nM/vRlUUOFBEZWMFKDMTsS2MXK8gFdxGQuzRztyoY9DTRYw30elhABxGLrY8RTvjXRzbYcW1",
	"YBydHmrL00CLNTDmkC1aZHl7bXUIHXaqeyoCjkHHK/yMho6XkGt65xJdd4IY7C88aVtgSWYa4m69Youl",
	"DkTuN1KI+d3DGJslBih+sApLbvr01ZbXIjMHTVfqDsSTZrDm9Js9Dc88nYlKE0q4yABtTJWKCy4DsQzo",
	"REXfrw5lIb20OsgMDCGltDKrrUqCns0eL206JjS11JsgatSAX6d2yNlWdjrrJ88l0GxLZgCciJlznji3",
	"Di6SoltW+6vfiU2Rs9SCq5QiBaUgS5zRZi9ovp1lq3oHnhBwBLiehShB5lTeGtir1V44r2CbYBCBIve/",
	"/1k9+AzwaqFpvgex2CaG3loFdh6yPtTjpt9FcN3JQ7KjEojnuUbfNgwiBw1DKDwIJ4P714Wot4u3R8sK",
	"JPqq/lCK95PcjoBqUP9ger8ttFU5EBrnVD8j/ZgN45QLL3TEBsup0sk+tmwatfRTs4KAE8Y4MQ48IJS8",
	"okpb/yrjGZqF7HWC81gBxUwxDPCgiG5G/tlL5/2xU3MPclWpWlRXVVkKqSGLrYHDZsdcr2FTzyXmwdi1",
	"PqAFqRTsG3kIS8H4Dll2JRZBVNduCBeA0F8cGuvNPb+NorIFRIOIXYBc+FYBdsPwoAFAmGoQbQmHqQ7l",
	"1DFJ04nSoiwNt9BJxet+Q2i6sK3P9E9N2z5xUd3c25kAhVFJrr2DfG0xawPDllQRBwcp6JWRPdBEYB3B",
	"fZjNYUwU4ykkuygf1R/TKjwCew9pVS4kzSDJIKfb/qA/2c/Eft41AO54owoKDYmN8IlvekPJPqBix9AC",
	"x1Mx4ZHgF5KaI2g0j4ZAXO89I2eAY8eYk6Oje/VQOFd0i/x4uGy71ZER8TZcCW123NEDguw4+hiAB/BQ",
	"D31zVGDnpNHLulP8Fyg3QS1HHD7JFtTQEprxD1rAgH3RBU8H56XD3jscOMo2B9nYHj4ydGQHjJ1vqNQs",
	"ZSXqOt/D9s5Vv+4EURccyUBTlkNGgg9WDSzD/sTGpnTHvJkqOMou1Qe/Z5iKLCdnCkWeNvBXsEWd+40N",
	"erwMQiXvQJeNjGruJ8oJAupDqYwIHjaBDU11vjWCml7ClqxBAlHVrGBa22DmtqqrRZmEA0Rt/jtmdA4u",
	"GzDod2CMx+0ChwqW19+K6cTqBLvhu+woBi10OF2gFCIfYT3qISMKwahYCFIKs+vMxVX7yFpPSS0gHdNG",
	"72Z9/d9TLTTjCsh/iYqklKPKVWmoZRohUVBAAdLMYESwek4X9dBgCHIowGqS+OXhw+7CHz50e84UmcPa",
	"JyOYhl10PHyIdpw3QunW4boDW6E5bueR6wOdIebic1pIl6fs97q7kcfs5JvO4LUHxZwppRzhmuXfmgF0",
	"TuZmzNpDGhkXcYDjjvJzBEPH1o37fsGKKqf6Ljw6sKJ5IlYgJctgLyd3EzPBv1nR/Me62x6dromQYkUB",
	"GaMa8i0pJaRgI9eNqKbqsY+IjWlLl5QvUEKXolq4oCo7DnLYSllbiKx4b4ioFKM3PFlIUZUxjusCaX3y",
	"gpFfgBodKtgR7Gw1hjWt53P5KmOuQr9zwTZ/Z8Yc8thMJ4MqpkHqqlExLXLaGRgjuG9LwArw00w80q6P",
	"qDPCRh9f4bYY6jWb+8fYyJuhY1D2Jw7CvJqPQ5FeRr/Nt3cgZdiBiIRSgsI7IbQLKftVzMNsK3dpqK3S",
	"UPRN57brLwPH7+2ggiZ4zjgkheCwjSYYMw4/4MfoccJ7aaAzSghDfbtCfwv+DljtecZQ423xi7sdnNA3",
	"dYjjHWx+d9yO1yTMM0OrIOQloSTNGdoMBVdaVql+zylaJYLDFgkF8erXsJ3qhW8SN4xF7FZuqPecYhhQ",
	"bauIuq/nEFHMvwXw5ipVLRagdEe6nQO8564V46TiTONchdmvxG5YCRLjMY5sy4JuyZzmaFb7HaQgs0q3",
	"5T3MdVGa5blz4ZhpiJi/51STHIzK+gPjlxsczrtAPc1w0Gshr2osxK+XBXBQTCXxkJXv7FeMJnTLX7rI",
	"QsxNtp+t0d+M3yTEbNFo0eTb/t/7/3H67iz5b5r8fpI8/1/HHz4+vX7wsPfj4+uvvvp/7Z+eXH/14D/+",
	"PbZTHvZYJoaD/Pyl04XOX6LA21j9e7B/MotvwXgSJbLQt92hLXIfsw4dAT1om0P0Et5zveGGkFY0Z5kR",
	"RG5CDl0W1zuL9nR0qKa1ER3zh1/rgWLkLbgMiTCZDmu88TXej/KK5zyhG8qlMeF5mVfcbqUX/2xIv4+2",
	"EfNpnddmS16cEkx6WlIfKub+fPzsi8m0SVaqv0+mE/f1Q4SSWbaJpaRlsIlpB+6A4MG4p0hJtwp0nHsg",
	"7NHAIuvND4ctwKiVasnKT88plGazOIfzgdLOyrDh59xGMJvzg06trbOVi/mnh1tLgAxKvYylwrckBWzV",
	"7CZAJ9CglGIFfErYERx1tfzMKCwuxCkHOseUbFR/xBhxvD4HltA8VQRYDxcySpWO0Q8Kt45bX08n7vJX",
	"dy6Pu4FjcHXnrD1Y/m8tyL3vvrkkx45hqns2O9IOHeSzRXQ5l7LRCkEx3MwWALHpoe/5e/4S5owz8/30",
	"Pc+opsczqliqjisF8muaU57C0UKQU58F8pJq+p73JK3BGj1B/g0pq1nOUnIVSsQNedq6C/0R3r9/R/OF",
	"eP/+Q88b35df3VRR/mInSNZML0WlE5c1nkhYUxnzdqg6axhHtmUhds06JW5sy4pdVrobP87zaFmqbvZg",
	"f/llmZvlB2SoXG6c2TKitJBeFjECioUG9/e1cBeDpGuv2FcKFPm1oOU7xvUHkryvTk6eAGml0/3qrnxD",
	"k9sSRqv3g9mNXa0eF271GthoSZOSLmJOlffv32mgJe4+yssFKtl5TrBbK43PhynjUM0CPD6GN8DCcXBK",
	"Ei7uwvbyFYLiS8BPuIXYxogbjav3pvsVJPbdeLs6yYG9Xar0MjFnO7oqZUjc70xdOGRhhCzvf1dsgTGO",
	"rsbKDEi6hPTKFb+AotTbaau7D/FwgqZnHUzZsig2LQcT89EkPQNSlRl1ojjl226GtAKtfZDlW7iC7aVo",
	"8voPSYluZ+iqoYOKlBpIl4ZYw2PrxuhuvosjwqzEsvSJrpjx5MnitKYL32f4IFuR9w4OcYwoWhmkQ4ig",
	"MoIIS/wDKLjBQs14tyL92PKMljGzN1+kRIrn/cQ1aZQnF/ITrgbNvvZ7AVhjSawVmVEjtwtXHshmoQZc",
	"rFJ0AQMScugVGJnr2fIk4CD77r3oTSfm3Qutd99EQbaNE7PmKKWA+WJIBZWZTqCXn8k6npxpHKv+OYTN",
	"chST6og4y3SobHlnbBmzIdDiBAySNwKHB6ONkVCyWVLlKxdhgSd/lkfJAH9gVvWuWhrnQYxSUMWprpTh",
	"eW73nPa0S1dRw5fR8LUzQtVyRB0MI+FjWHRsOwRHASiDHBZ24baxJ5Qmw7vZIAPHj/N5zjiQJBbuRJUS",
	"KbOlp5prxs0BRj5+SIg1AZPRI8TIOAAbHao4MHktwrPJF4cAyV2GOvVjoys2+BviyTQ2ANiIPKI0LJwN",
	"uFVSzwGoi5Gr769OpCYOQxifEsPmVjQ3bM5pfM0gvZIOKLZ2Cjg4l/6DIXF2hwXeXiwHrcleRTdZTSgz",
	"eaDjAt0OiGdik9hsuqjEO9vMDL1HY6Ixty92MG3xjHuKzMQGw0TwarExuHtgGYbDgxFo+BumkF6x39Bt",
	"boHZNe1uaSpGhQpJxpnzanIZEifGTD0gwQyRy/2gHsaNAOgYO5risk753auktsWT/mXe3GrTps6TTzeJ",
	"Hf+hIxTdpQH89a0wdQWLN12JJWqnaEc7tIt3BCJkjOgNm+g7afquIAU5oFKQtISo5CrmujO6DeCNc+G7",
	"BcYLLBFC+fZBEEIjYcGUhsaI7h31n8M8SbEymRDz4dXpUs7N+t4KUV9TtvQNdmwt85OvAGNQ50wqnaAH",
	"IroE0+hbhUr1t6ZpXFZqB+nYOp4si/MGnPYKtknG8ipOr27e71+aaV/XLFFVM+S3jNuIiRnWnY2G7u2Y",
	"2kZ37lzwK7vgV/TO1jvuNJimZmJpyKU9x1/kXHQ47y52ECHAGHH0d20QpTsYZJBy2eeOgdxkDyemXB7t",
	"sr72DlPmx94bNuITP4fuKDtSdC2BwWDnKhi6iYxYwnRQtrWfCzlwBmhZsmzTsYXaUQc1ZnqQwcMXu+pg",
	"AXfXDbYHA4HdM5aOIUG165o1Ar4twNsqK3I0CjOX7epjIUMIp2LKl4/vI6pO19qHq0ug+few/dm0xeVM",
	"rqeT25lOY7h2I+7B9Zt6e6N4Rte8NaW1PCEHopyWpRQrmifOwDxEmlKsHGlic2+P/sSsLm7GvPzm7NUb",
	"B/71dJLmQGVSiwqDq8J25V9mVbaE2sAB8eWpjc7nZXYrSgabX9d9Co3S6yW4Or+BNNorSNg4HIKj6IzU",
	"83iE0F6Ts/ON2CXu8JFAWbtIGvOd9ZC0vSJ0RVnu7WYe2oFoHlzcuKqWUa4QDnBr70rgJEvulN30Tnf8",
	"dDTUtYcnhXPtqERc2GLbigjedaFj0O22dF73gmI5QWsV6TMnXhVoSUhUztK4jZXPlCEObn1npjHBxgPC",
	"qBmxYgOuWF6xYCzTbEzBkA6QwRxRZKpozZIGdzPhHlKpOPutAsIy4Np8kngqOwcV6zc6a3v/OjWyQ38u",
	"N7C10DfD30bGCEtpdm88BGK3gBF66nrgvqxVZr/Q2iJlfghcEgc4/MMZe1fiDme9ow9HzTZ4cdn2uIXv",
	"nvT5nyEMWwB7/6MrXnl1NT0H5og+osJUMpfid4jreageRzJdfPFQhlEuv0MYaR8+HdBiMbV1p3kLppl9",
	"cLuHpJvQCtUOUhigetz5wC2HVQy9hZpyu9X2TYNWrFucYMKo0mM7fkMwDuZeJG5O1zMaK/FohAwD01nj",
	"AG7Z0rUgvrPHvarD/e3sJPAl122ZzWIuQTZJaP2KKDcUGOy0o0WFRjJAqg1lgqn1/+VKRIap+Jpy+zSG",
	"6WePkuutwBq/TK+1kFiDQMXN/hmkrKB5XHLI0r6JN2MLZl99qBQEzwq4geyLOpaK3NMMdRKLQ835nJxM",
	"g7dN3G5kbMUUm+WALR7ZFjOqkJPXhqi6i1kecL1U2PzxiObLimcSMr1UFrFKkFqoQ/Wmdl7NQK8BODnB",
	"do+ek/votlNsBQ8MFt39PDl99ByNrvaPk9gF4F7t2MVNMmQn/3DsJE7H6Le0YxjG7UY9iqZr22e7hhnX",
	"jtNku445S9jS8br9Z6mgnC4gHilS7IHJ9sXdRENaBy88s2/OKC3FljAdnx80NfxpIPrcsD8LBklFUTBd",
	"OOeOEoWhp+bNADupH84+YOPKvXq4/Ef0kZbeRdRRIj+t0dTeb7FVoyf7NS2gjdYpobbwRM6a6AVfhJqc",
	"+7o2WP+2LntrcWPmMktHMQeDGeaklIxrVCwqPU++JOmSSpoa9nc0BG4y++JppOZvu/YkPwzwT453CQrk",
	"Ko56OUD2XoZwfcl9LnhSGI6SPWiyPYJTOejMjbvthnyHu4ceK5SZUZJBcqta5EYDTn0rwuM7BrwlKdbr",
	"OYgeD17ZJ6fMSsbJg1Zmh356+8pJGYWQsWJ1zXF3EocELRmsMHYvvklmzFvuhcxH7cJtoP+8ngcvcgZi",
	"mT/LMUXgaxHRTn0d6tqS7mLVI9aBoWNqPhgymLmhpqRd8/fT89G7iYKKe7q8Ybvv2DJfPB7wjy4iPjO5",
	"4AY2vny7kgFCCWqeR0kmq78HPnZKvhabsYTTOYWeeP4EKIqipGJ59nOT+dkpKS8pT5dRn9nMdPylefyq",
	"Xpy9A6N155aUc8ijw1l58xcvl0Yk53+KsfMUjI9s261yb5fbWVwDeBtMD5Sf0KCX6dxMEGK1nVRXB23n",
	"C5ERnKcpctYc1/7rCEEN698qUDqWoIQfbOAY2kYNO7AllAnwDDXSI/Kdfd92CaRVwQY1QV+qwJevtUb7",
	"qswFzaZYQuHym7NXxM5q+9gnXGwJ5wUqQu1VdGxiQf3GcSHI/jWWeHrE+HF2x2ubVSud1BWXYwmopkVT",
	"E5p1/ASoIoXYOSIvg5cqba6qGcLQw5zJwmh19WhWPkKaMP/RmqZLVPtarHWY5MfXHvdUqYL3/up3e+qi",
	"hnjuDNyu/LitPj4lwujma6bss6awgnbOa50A7swOPge2vTxZcW4p5eiAW64uYXgo2j1w9or0roQoZB3E",
	"Hyj029L9h5Ziv8Be0RpL3bruvYf+bAZl/R6Lf646pVxwlmKFo9gV7d4/HeNnG1EMqmvI9UfcndDI4YpW",
	"k69D8RwWB+vLe0boENc39AdfzaZa6rB/anxoc0k1WYBWjrNBNvWPIjhbI+MKXJFKfC034JNCtnyXyCGj",
	"7vCkdpscSEaYejOgPH5rvr12pgWMSb9iHJUIhzYn+FlrID7PqI3mwTRZCFBuPe38Y/XO9DnCVNwMNh+O",
	"/HOOOIZ1/ZllWz93f6gz7/V2XmbT9oVp6yr01D+3opztpGdl6SYdfjIjKg/oDR9EcMR7mXj3UYDcevxw",
	"tB3ktjNcBe9TQ2iwQmc3lHgP9wijfj6i8zSREVotRWELYsPEolUSGI+A8YpxaB4bjVwQafRKwI3B8zrQ",
	"T6WSaisCjuJpl0Bz9HDHGJrSzr1x26G69YkMSnCNfo7hbWxevhhgHHWDRnCjfFu/cWqoOxAmXuDjyg6R",
	"/XcsUKpyQlSGWQudly1ijMMwbv92TvsC6B+Dvkxku2tJ7ck55CYaSkSdVdkCdEKzLFYz9Gv8SvArySqU",
	"HGADaVXXlixLkmLdlXYhmj61uYlSwVVV7JjLN7jldMFTMRFqCJ+r8TuMiS6zLf4bK6w4vDMu0OPgUEMf",
	"1eFekjhQbm6P1JN6DU0nii2S8ZjAO+X26GimvhmhN/3vlNJzsWgD8onLT+zicuEexfjbN+biCKsz9KqF",
	"2qulLp6AgX3CP/CHamOd9tvmSniV9cqHokOpfkBstwFi+CmwKV5+A+G9QdENau9X66EcCvJNB2PSqXbZ",
	"cZqSnSxoMOPIRgjZ3CKEIm6dHYoKskFB5nOv9zjJsCdn63jlvQChPtysD9D3PpaVlJQ593vDLPqYdVHv",
	"/TyEMfGwzQZ3F+FiyQctdt+vhuK+iWJ8kQPB792ngq7ApczXr+fbtfrIJ68S2l/d47V2vDryPrr+vuEV",
	"p/q85tBB4+2lK0tvl+l08u9/tnFyBLiW2z+BKbe36b2HlvrSrjVPNU1IXdF4VIXj1q0YfzNpuMZSU1cJ",
	"6akUijVVtGOPKY2Mp7vE95CCGlH9sXwwywpSjaXTGye9BDikYpSZLHi68F+1lgZ0xzrs0JVY2lVXqV8v",
	"fc+F1kt9CtL3bK3po/FVhM7qUCxkSlh7dgHcvR7YTmoYHVo9n0Oq2WpPqtk/lsCDNKapN0LYV4CDzDNW",
	"h+pipZLDTWwNQLsywXbCE1QMvDU4Q4kmV7C9p0iLGqLFr6f+XrlJkQrEAHKHxJCIULFQB2s1dd5npmrK",
	"QCz40CLbHZpyX4Pv5gSJkzecy5OkuXGbZModU8Yf7hg1l+l6UIoxRp0OZaP16/4PC9sv8ZkFVb9p54tc",
	"hCopOe+XAly7IhmYGFg7Cny5DFD+N58FbGfJ2RWEL/ugW2ZNZeZbRO0M3oSR7LiPeilkvmZ9F+h5PTNr",
	"AkH7SUOR4lIY7pvmwshfyVDMdDv2sg5cuKdshIktto1RpQauOUj3AhoKe7lQkGjhA0d3wbELFe75+psg",
	"QQ0WdLTADZZZedvUkcHCthTLqlAXPRMukEgoqIFOBtVehufchewX9rvPkvGFTfeaU2p63V/i3YcAM9VD",
	"Ykj1c+Juy/3ZNzexrDDO7Qu0Klb6hRtUhqb/UoqsSu0FHR6M2vo0urDSDlYSNUqk/VV2BOIghfEKtsdW",
	"4ve18f0OhkBbycmCHpQM6GzyndqaVAzuxZ2A9znNNNNJKUSeDFj2z/v1aroUf8XSK8iIuSl8qNzAOyPk",
	"PhqUa9ftern19VnKEjhkD44IOeM2ONl7cdsFkzuT83t61/wbnDWrbAkpZ0E6es/jUZ5Y3Enekpv5YXbz",
	"MAWG1d1yKjvInmoom4FaOZKuI6/uHI1VQft+1e5LKA1RWShiMknzyMeeoJA6HqR5Z6GJCelLB3ku1glS",
	"UVIXu4rpHKZdm0n68p5NN4PtGQTBJVS5C3RLljQjqZAS0rBHPJ7fAlUICUkuMNYk5gabayMPFRjEy0ku",
	"FkSURs21NeO8wyD6CEgwl80ptT0T65UYyNoH5XJI3TS2cX+eHW+FHP4OyWXnINt2GA/hsHzwYyOOULpv",
	"juy1SgdgjiDQ3vARw17kLZX2urqv8Qy9jaVFwdI4uv9aIRWDgRB7XoqJrK8mR/eQjU+BG8BV1D+52x1o",
	"X/2ajXUK1gWCRx6LAIBhN2ELhlHOwkPBmOMregmNIPm8llqnrUdOWefs++JtlsZTarXWJRAzdiXBpWTZ",
	"574675SUVC/9LWaa93VLo6eAwnwp+9YFVdYS4i0y7q2xrnggyiSHFbS8py5PrEpTUIqtIHynzHYmGUCJ",
	"9smu1BxzC4ZcriNKubUngWNpDHajspVFrN0pskdwiop5G57YY6LGHiUD0YplFW3hT93i5aehR58ibNjD",
	"OpJTHMwk4ovbxSL2OvKR5qPnksf9+GGaYm0Uwdmy2nhqibA52aqkaz6sRETsTrVz+fbrIDgYUZ204cEr",
	"X9a7clMFcpAydhFG77W2qMyhwL+2GVb48OKW6xuRsaypi6nIAEw15xlD1aAJhQqaFXRLMjafg7TGfKUp",
	"z6jMwuaMkxSkpsxoNlt1c7HWQCsrmO6VbA13xUE9g4nJuGiXsoDkW6cy3ELqRM9NROK0V60WQw/S9XYl",
	"HjtPN0a6xiCiASJwWb8oW9sDJjgKSKSgV3DgPIr9DrunwVoczvanBc46ZoqYY/GGhcRGse6+zz1yuwVP",
	"z+32DIV1BpsEJmlDN9CS7C/ILo3/0Fyc4x7B8x32gBc6DINn8LztxoHzmTOBfqiREizlwxAltJa/zwfp",
	"FthIGsEWOUagNdiqrzZ6vL0vgYNZvaj9tkMvNnbdu1hUUHAstNp3C1vehO+1hIRjzoJc0fzTu3ax2uQZ",
	"4sO9pR9faOgbDJFsUaluFob/io6aO/AD3t3U/A26ov8BZo+iWqkbyokwtVjvI1fwZqG5NVzM/XtVK+Bk",
	"jWPaoK1HX5CZS1MuJaRMdUWjtX9KonaF4ctKLvVho/f43vat82ehb0HGc69pkNdNWXrU8Re8gbA5op+Z",
	"qQyc3CiVx6ivRxYR/MV4VFgvbM91cdWK5rLPfHTSFISEO47qCuKzD4zq6ldCG7s8G7lkLp1KQX+do2/r",
	"Fm4jF3WztrEhiX3k7qpdPiaSMP4kgemOoYwWIfieB0FQya+PfiUS5vhgnyAPH+IEDx9OXdNfH7c/m+P8",
	"8GFUOvtkQYwWR24MN2+MYn4eSmuzqVsDGZSd/ahYnu0jjFY+bPPkJWZ8/uKy7j/Lo5u/2FiT/lF1D58d",
	"Ej7d3QRETGStrcmDqYJM1xFJrq5bJKUV/ThpJZneYjFAbz9gv0TDLb+ro5lcNFytH7q7T4srqMtJNrFP",
	"lfK363eC5ngfWbWVm1tI5Efkmw0tyhzcQfnq3uxv8OTLp9nJk0d/m3158uwkhafPnp+c0OdP6aPnTx7B",
	"4y+fPT2BR/Mvns8eZ4+fPp49ffz0i2fP0ydPH82efvH8b/cMHzIgW0AnvvTM5P/gy7TJ2Zvz5NIA2+CE",
	"lux72NpH8AwZ++f1aIonEQrK8smp/+l/+xN2lIqiGd7/OnGVLSZLrUt1eny8Xq+Pwi7HCwx2SLSo0uWx",
	"n6f3/t7Zm/PaS2StQLijNinUW/c8KZzht7ffXFySszfnR8Hr4KeTk6OTo0f4mHQJnJZscjp5gj/h6Vni",
	"vh87YpucfryeTo6XQHOMDTR/FKAlS/0nCTTbuv+rNV0sQB65NwfNT6vHx16sOP7ogj6ud307Dp/vOP7Y",
	"io3J9vTE8v7HH33Vut2tW2XhXExQ0GEkFLuaHc+wGMbYpqCCxsNLQWVDHX9EcXnw92OXvR//iGqLPQ/H",
	"PoAs3rKFpY96Y2Dt9EipTpdVefwR/4P0GYBlc2UCcCdRS8p3oH2iu+3hIsHrEPCazs8z27wXmezqUdoC",
	"3afvxlXmAD+d0RozUMwVLUWOYY5Dc6B9UmzDrtEwFRST3lV27Xoaecp7zhZou/J1G1vvabrn9Jgi/3nx",
	"42siJHH68RuaXtWOL3I+t8XOpFgxTJ/Ngpxr07Nezm8VyG2zHnd1hgvwDyA5D1qhFmU7g68Wyz9gJSkE",
	"FBnG45OTO3uEtLez19bXVA/n4brNiD3++sLfmi0yNHzy6cmjO1tbOzHo1gvrDtdb1TnHuFxzCxB7y+GC",
	"nv5lF/QCtWlD8XPGM/uClKZ4pu0BxfV9+Zddn2aFj//h+BgfKBQGnt3hAfv0RGhkcpoTbGlX8+Qvu5oL",
	"kCuWArmEohSSSpZvyU+8roQRVNjsX3M/8Ssu1twjwgjdVVFQuXVXICVdVuWvAXsdBu8hG2mPLhSGJ+Gb",
	"JpPpxKW5w6YEyQrgWKXrur6JV4XIwN/wYj63Zat3fT7+aP8NLvTW4PWvlmkeYzG5bf/nLXc57znEIsh/",
	"4gqsJdcXu9nydOjux8YXW56+rS/k3kWETOCPOzB9mqjhRdaEIcZ/8M0xjtU/+5RY+LTn/JMdzLdQiBUo",
	"4sS7gDiNsGaUIRtUJkUR0PDR4AH9gJaEuBDsHBz9mbxzpxm8JxHvORPjd6Ftq9kRQD4Kzj0ZH3b4MS/j",
	"1y/PdzJM7VT3Yhs0+Rcj+BcjuENGoCvJB49ocH9hFhSUNuSbpDRdwi5+0L8tQ4W5FLFo4osdzMIV1hri",
	"FRdtXvGnVps//Cnu9xeU+/Pc2nEbiE9lzkDWVEB5v9bZv7jA/xguYIs2OtPUlGjIcxWefS3w7NvoBJfc",
	"ym3UyEg+0H03Pfbz8cf2u30tG6FaVjoT66Av+phtgETfdFi/ZN36+3hNmU7mQrrEVnxXod9ZA82PXcm2",
	"zq9NlZTeFyz9EvwYBmhGfz2un62Jfuzab2Nfnf1yoJGPF/OfG19O6BtBDll7Rd59MPwJi6I75tmY+k+P",
	"jzFZbCmUPp5cTz923ADhxw81SfhKtpNSshUWxvlw/f8DAAD//6iZKAkYzwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
