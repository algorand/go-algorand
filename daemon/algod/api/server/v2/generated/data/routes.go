// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
