// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
