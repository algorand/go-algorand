// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
