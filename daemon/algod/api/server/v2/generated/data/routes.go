// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9f5PbtpIo+lVQ2q1y7CfO+FeyJ351at/ETnLmxUlcHif7dm2/BCJbEs5QAA8Azkjx",
	"9Xe/hW6ABElQomYmTs6t85c9Igk0Go1G/+4Ps1xtKiVBWjN79mFWcc03YEHjXzzPVS1tJgr3VwEm16Ky",
	"QsnZs/CMGauFXM3mM+F+rbhdz+YzyTfQvuO+n880/KMWGorZM6trmM9MvoYNdwPbXeXebkbaZiuV+SHO",
	"aIjzF7OPex7wotBgzBDKH2W5Y0LmZV0As5pLw3P3yLBrYdfMroVh/mMmJFMSmFoyu+68zJYCysKchEX+",
	"owa9i1bpJx9f0scWxEyrEoZwPlebhZAQoIIGqGZDmFWsgCW+tOaWuRkcrOFFq5gBrvM1Wyp9AFQCIoYX",
	"ZL2ZPXs7MyAL0LhbOYgr/O9SA/wGmeV6BXb2fp5a3NKCzqzYJJZ27rGvwdSlNQzfxTWuxBVI5r46Yd/X",
	"xrIFMC7Z62+esydPnnzpFrLh1kLhiWx0Ve3s8Zro89mzWcEthMdDWuPlSmkui6x5//U3z3H+C7/AqW9x",
	"YyB9WM7cE3b+YmwB4cMECQlpYYX70KF+90XiULQ/L2CpNEzcE3r5Tjclnv8P3ZWc23xdKSFtYl8YPmX0",
	"OMnDos/38bAGgM77lcOUdoO+fZh9+f7Do/mjhx//7e1Z9j/+z8+ffJy4/OfNuAcwkHwxr7UGme+ylQaO",
	"p2XN5RAfrz09mLWqy4Kt+RVuPt8gq/ffMvctsc4rXtaOTkSu1Vm5UoZxT0YFLHldWhYmZrUsHZtyo3lq",
	"Z8KwSqsrUUAxd9z3ei3yNcu5oSHwPXYtytLRYG2gGKO19Or2HKaPMUocXDfCBy7oz4uMdl0HMAFb5AZZ",
	"XioDmVUHrqdw43BZsPhCae8qc9xlxd6sgeHk7gFdtog76Wi6LHfM4r4WjBvGWbia5kws2U7V7Bo3pxSX",
	"+L1fjcPahjmk4eZ07lF3eMfQN0BGAnkLpUrgEpEXzt0QZXIpVrUGw67XYNf+ztNgKiUNMLX4O+TWbfv/",
	"e/HjD0xp9j0Yw1fwiueXDGSuCihO2PmSSWUj0vC0hDh0X46tw8OVuuT/bpSjiY1ZVTy/TN/opdiIxKq+",
	"51uxqTdM1psFaLel4QqximmwtZZjANGIB0hxw7fDSd/oWua4/+20HVnOUZswVcl3iLAN3/714dyDYxgv",
	"S1aBLIRcMbuVo3Kcm/sweJlWtSwmiDnW7Wl0sZoKcrEUULBmlD2Q+GkOwSPkcfC0wlcEThhkFJxmlgPg",
	"SNgmaMadbveEVXwFEcmcsJ88c8OnVl2CbAidLXb4qNJwJVRtmo9GYMSp90vgUlnIKg1LkaCxC48Ox2Do",
	"Hc+BN14GypW0XEgoHHNGoJUFYlajMEUT7td3hrf4ghv44unYHd8+nbj7S9Xf9b07Pmm38aWMjmTi6nRP",
	"/YFNS1ad7yfoh/HcRqwy+nmwkWL1xt02S1HiTfR3t38BDbVBJtBBRLibjFhJbmsNz97JB+4vlrELy2XB",
	"deF+2dBP39elFRdi5X4q6aeXaiXyC7EaQWYDa1Lhws829I8bL82O7TapV7xU6rKu4gXlHcV1sWPnL8Y2",
	"mcY8ljDPGm03VjzebIMycuwXdtts5AiQo7iruHvxEnYaHLQ8X+I/2yXSE1/q39w/VVW6r221TKHW0bG/",
	"ktF84M0KZ1VVipw7JL72j91TxwSAFAnevnGKF+qzDxGIlVYVaCtoUF5VWalyXmbGcosj/buG5ezZ7N9O",
	"W/vLKX1uTqPJX7qvLvAjJ7KSGJTxqjpijFdO9DF7mIVj0PgI2QSxPRSahKRNdKQkHAsu4YpLe9KqLB1+",
	"0Bzgt36mFt8k7RC+eyrYKMIZvbgAQxIwvXjPsAj1DNHKEK0okK5KtWh++OysqloM4vOzqiJ8oPQIAgUz",
	"2ApjzX1cPm9PUjzP+YsT9m08NoriSpY7dzmQqOHuhqW/tfwt1tiW/BraEe8Zhtup9InbmoAGJ+b/TZVO",
	"WDF3QXmoXqz9gHjILGzMQeoZQoNnlTaTa813M3/fZ3hvD4nqJwNETxVfCYnQzp0kLNmGXzouzKVC5Duy",
	"AdOIuER5JAw01jAvPngR/mSgMv/JaTu1qUGgcAJHKYxF9ci9aNgaSpR/nHpIIwxI5K5J4yBB9Cih4UTu",
	"90kf/3NwoRi34/wHdXGPOVKD8ZdI//2sx1yGvMVbBE/YWf/bm3EWN0qap9yIViZwhz14bFB4rXlFAPon",
	"JG4JiXo8vUSw3vLCnXgXJmGO2HxEawjVjc/awfOQhARJoQfDV6XKL//GzfoOzvwijDU8fjgNWwMvQLM1",
	"N+sEl+0dr3a0KUfMvYhMji2iqU6aJb5Ud3LjleqYe66qnvOydFMP77feanHgSbykLJl7mcFGoKHcK4xk",
	"WSe9i33N87UTB1jOy3LemohUlZVwBaVT1oWUoOfMrrltbwscOegzeI4MOOZhgUWr8eYlNK3pxgahgW04",
	"spWN02KqsvtNc90avoGe9INsTtVoPYgUjPMXYXVwBRIvsWZoBL9ZI1pp4sFP3Nz+Ec4sFS2OLH82uO0a",
	"/DX8ogO0e7tlkrKdQumCbNXW/SY0y5WmIYht+8ndf4Dr9mOizs8qDZkfQvMr0IaXbnW9Rd1vyPeuTueB",
	"k1lwy6OT6akwrXgR58Dv8M4GnbDO/Ij/4SVzj93V5CippR6BN4yK3KgFSXEOVTSTewHtrIptyITJKp5f",
	"HgXl83byNJuZdPK+Jqup30K/iGaH3mxFYe5qm3Cwsb3qnhCyWQV2NBBc9zKdaK4pCHijKkbsowcCcQoc",
	"jRCitnd+rX2ltimYvlLbwZWmtnAnO+HGmczsv1LbFx4ypQ9jHseegnS3QMk3YPB2kzHjdLO0/rizhdI3",
	"kyZ6F4xkrZeRcTdqJEzNe0jCV+sq82cz4amgF3oDtYEd+4WA/vApjHWwcGH574AF40a9Cyx0B7prLKhN",
	"JUq4A9JfJ4W4BTfw5DG7+NvZ548e//L48y8cSVZarTTfsMXOgmGfeXMcM3ZXwv2kKo3SRXr0L54G31R3",
	"3NQ4RtU6hw2vhkORz4tUGnqNufeGWOuiGVfdADiJI4K72gjtjNy5DrQXwjiNabO4k80YQ1jRzlIwD0kB",
	"B4np2OW10+ziJeqdru/CeglaK528uiqtrMpVmTn5SKiEFeiVf4P5N4K6WvV/J2jZNTfMzY3evloWI8Ye",
	"u5XT+T4N/WYrW9zs5fy03sTq/LxT9qWL/FZ6r0BnditZAYt61bFsLLXaMM4K/BDv6G/BktwiNnBh+ab6",
	"cbm8G9OPwoESJhixAeNmYvSGkxoM5EpS8NsBa4sfdQp6+ogJXhk7DoDHyMVO5uhauotjO26I2giJfm6z",
	"k3lklXIwllCsOmR5e+vTGDpoqnsmAY5Dx0t8jLbtF1Ba/o3Sb1qx71ut6urOhbz+nFOXw/1ivPW8cN8G",
	"m5iQq7IbcLlysJ+k1viHLOh5o3zTGhB6pMiXYrW2kZ71Siu1vHsYU7OkAMUHZGQp3TdDU8sPqnDMxNbm",
	"DkSwdrCWwzm6jfkaX6jaMs6kKgA3vzZp4WwkRA9jgzCkycbyHur1wrAFOOrKee1WW1cMA3YG90X7YcZz",
	"OqEZosaMhCs0cSb0Fk1H4V+lBl7s2AJAMrXwMQE+WgEXyTHayAbxxouGCX7RgavSKgdjoMi8ofkgaOE9",
	"ujrsHjwh4AhwMwszii25vjWwl1cH4byEXYaxcYZ99t3P5v4fAK9VlpcHEIvvpNDbt0MNoZ42/T6C608e",
	"kx1ZuIhqmVUozZZgYQyFR+FkdP/6EA128fZouQKNIRi/K8WHSW5HQA2ovzO93xbauhqJ+PbqrZPw3IZJ",
	"LlUQrFKDldzY7BBbdi91dHC3gogTpjgxDjwieL3kxlLYkJAF2gLpOsF5SAhzU4wDPKqGuJF/DhrIcOzc",
	"3YPS1KZRR0xdVUpbKFJrQLf36Fw/wLaZSy2jsRudxypWGzg08hiWovE9smglhCBuG9epd5sPF4cORnfP",
	"75Ko7ADRImIfIBfhrQi7cdTrCCDCtIgmwhGmRzlNqO18ZqyqKsctbFbL5rsxNF3Q22f2p/bdIXGRc4Du",
	"7UKBQceDf99Dfk2YpXjnNTfMwxHiGNAMQvFNQ5jdYcyMkDlk+ygfVTz3VnwEDh7SulppXkBWQMl3iQgM",
	"eszo8b4BcMdbdVdZyChwNb3pLSWHOME9Qyscz6SER4ZPWO6OoFMFWgLxXx8YuQAcO8WcPB3da4bCuZJb",
	"FMbDZdNWJ0bE2/BKWbfjnh4QZM/RpwA8godm6JujAj/OWt2zP8V/g/ETNHLE8ZPswIwtoR3/qAWM2FB9",
	"TlB0XnrsvceBk2xzlI0d4CNjR3bEoPuKaytyUaGu8x3s7lz160+QdDizAiwXJRQsekBqYBV/zyjksj/m",
	"zVTBSba3IfgD41tiOSEeqgv8JexQ535FsfyRqeMudNnEqO5+4pIhoCFC2Ing8Suw5bktd05Qs2vYsWvQ",
	"wEy9INf/0A9hVZXFAyT9Gntm9F7NpE9xr5v1AoeKlpcK6COdYD98b3qKQQcdXheolConWMgGyEhCMCnm",
	"glXK7brw6UIhYSRQUgdIz7TRpd1c//dMB824AvbfqmY5l6hy1RYamUZpFBRQgHQzOBGsmdNHarUYghI2",
	"QJokPnnwoL/wBw/8ngvDlnAdcuzci310PHiAdpxXytjO4boDe6g7bueJ6wMdPu7i81pIn6ccjhTyI0/Z",
	"yVe9wRsvkTtTxnjCdcu/NQPoncztlLXHNDItSgrHneTL6cbVDNaN+34hNnXJ7V14reCKl5m6Aq1FAQc5",
	"uZ9YKPn1FS9/bD7D/EHIHY3mkOWY9TZxLHjjvqFEOTeOkMIdYAqSnwoQnNNXF/TRARWzDTIVmw0Uglso",
	"d6zSkAPlhznJ0TRLPWEUOZ6vuVyhwqBVvfJxqTQOMvzakGlG13IwRFKosluZoZE7dQH48K6QIujEKeBO",
	"petbyEmBuebNfD4rdMrNHO1B32OQdJLNZ6Mar0PqVavxEnK6eY4TLoOOvBfhp514oisFUedknyG+4m1x",
	"h8lt7u9jsm+HTkE5nDiKlG0fjgXLOnW73N2B0EMDMQ2VBoNXVGymMvRULeOc5hBitzMWNkNLPn36y8jx",
	"ez2qLypZCgnZRknYJct4CAnf48PkccJrcuRjFFjGvu3rIB34e2B155lCjbfFL+52/4T2PVbmG6XvyiVK",
	"A04W7yd4IA+62/2UN/WT8rJMuBZ9xmOfAZh5E+QqNOPGqFygzHZemLmPpiVvpE+P7KL/VROkfwdnrz9u",
	"z4cWJ9OjjRjKinGWlwItyEoaq+vcvpMcbVTRUhPBT0EZH7daPg+vpM2kCSumH+qd5Bj41liukgEbS0iY",
	"ab4BCMZLU69WYGxP11kCvJP+LSFZLYXFuTbuuGR0XirQGIF0Qm9u+I4tHU1YxX4Drdiitl3pHxN6jRVl",
	"6R16bhqmlu8kt6wEbiz7Xsg3WxwuOP3DkZVgr5W+bLCQvt1XIMEIk6WDtL6lpxgP75e/9rHxGCZOj0Ow",
	"ZlthYOaW2Skq8v9/9p/P3p5l/8Oz3x5mX/5fp+8/PP14/8Hgx8cf//rX/9X96cnHv97/z39P7VSAPZVu",
	"6iE/f+E14/MXqP5EIe592D+Z/X8jZJYksjiao0db7DMsreAJ6H7XOGbX8E7arXSEdMVLUTjechNy6N8w",
	"g7NIp6NHNZ2N6BnDwlqPVCpuwWVYgsn0WOONpahhXGM6sRudkj5XG8/Lspa0lUH6pqS0EF+mlvMmeZ/q",
	"ej1jmNm95iE40v/5+PMvZvM2I7t5PpvP/NP3CUoWxTaVd1/ANqUrxskF9wyr+M6ATXMPhD0ZSkexHfGw",
	"G9gsQJu1qD49pzBWLNIcLqT6eJvTVp5LCox35wddnDvvOVHLTw+31QAFVHadqvfTEdTwrXY3AXphJ5VW",
	"VyDnTJzASd/mUzh90Qf1lcCXIf1FKzVFG2rOARFaoIoI6/FCJhlWUvTTSwvwl7+5c3XID5yCqz9n488M",
	"f1vF7n379Rt26hmmuUclIGjoKGk/oUr7pMNOQJLjZnEu1jv5Tr6AJVoflHz2Thbc8tMFNyI3p7UB/RUv",
	"uczhZKXYs5DH+IJb/k4OJK3RQoRRBimr6kUpcnYZKyQteVJxqeEI79695eVKvXv3fhCbMVQf/FRJ/kIT",
	"ZE4QVrXNfGmcTMM11ynfl2lKo+DIVPtq36wkZKuaDKSh9I4fP83zeFWZfomE4fKrqnTLj8jQ+AIAbsuY",
	"sarJ43ICis+ddvv7g/IXg+bXwa5SGzDs1w2v3gpp37PsXf3w4RPMiGtrBvzqr3xHk7sKJltXRks49I0q",
	"uHBSK2FrNc8qvkq52N69e2uBV7j7KC9v0MZRlgw/62TrhcB8HKpdQJNLProBBMfRSbW4uAv6KpRBTC8B",
	"H+EWdjPdb7VfUWr6jbfrQKEDXtt15s52clXGkXjYmaY62soJWSEaw4gVaqu+kNwCWL6G/NJX+IJNZXfz",
	"zuch4McLmoF1CEO13ygzD6sPoYNiAayuCu5FcS53/TIwBqwNYcWv4RJ2b1RbvOiYui/dMiRm7KAipUbS",
	"pSPW+Nj6Mfqb76PKQoKmr+aBSY+BLJ41dBG+GT/IJPLewSFOEUWnBsIYIrhOIIKIfwQFN1ioG+9WpJ9a",
	"npA5SCuuIINSrMQiVbb2v4b+sACro0pfqc9HITcDGiaWzKnyC7pYvXqvuVyBu57dlaoML6kKaTJoA/Wh",
	"NXBtF8DtXju/jGtJBOhQpbzGjGW08M3dEmDr9ltYtNhJuHZaBRqK6B0fvXwyHn9GgENxQ3jC562mcDKq",
	"63rUJSr0hVu5wW6j1vrQvJjOEC56vgEs8amu3b44KJSvTkkVLqL7pTZ8BSO6S+y9m1hHouPxw0EOSSRJ",
	"GUQt+6LGQBJIgkwvZ27NyTMM7ok7xKhm9gIyw0zkIPY+Iyw67RG2KFGAbSJXae+57nhRqYruGGhp1gJa",
	"tqJgAKOLkfg4rrkJxxHriwYuO0k6+x0rtuwr5XYexRJGRUSbQm3hNuxz0IHe7wu6hSpuoXRbrPRPKMPm",
	"dC9MX0hth5IomhZQwooWTi8HQmmrx7Qb5OD4cblE3pKlwhIjA3UkAPg5wGkuDxgj3wibPEKKjCOwMfAB",
	"B2Y/qPhsytUxQEpf/YaHsfGKiP6GdGIfBeo7YVRV7nIVI/7GPHAAX8KhlSx6EdU4DBNyzhybu+KlY3Ne",
	"F28HGVQUQ4WiVz/Mh97cH1M09rim6Mo/ak0kJNxkNbE0G4BOi9p7IF6obUaZvUldZLFdOHpP5i5gnnHq",
	"YFLttnuGLdQWw7nwaqFY+QOwjMMRwIhsL1thkF7xuzE5i4DZN+1+OTdFhQZJxhtaG3IZE/SmTD0iW46R",
	"y2dRra0bAdAzQ7W9DbxZ4qD5oCueDC/z9labt2VGQ1pY6viPHaHkLo3gb2gfS1bcGzUgdU7UJykLNrQs",
	"3aZcG31cUQm2Y6q19cmhA8QerL7qy4FJtHZjvbp4jbCWYiWO+Q6dkkO0GSgBleCsI5pml6lIAafLA97j",
	"F+GzyFiHu8fl7n4UQKhhJYyF1mkU4oL+CHM8x3LDSi3HV2crvXTre61Uc/mT2xw/7Czzk68AI/CXQhub",
	"occtuQT30jcGjUjfuFfTEmg3RJGK84sizXFx2kvYZYUo6zS9+nm/e+Gm/aG5aEy9wFtMSArQWmAziWTg",
	"8p6pKbZ974Jf0oJf8jtb77TT4F51E2tHLt05/knORY+B7WMHCQJMEcdw10ZRuodBRgnnQ+4YSaNRTMvJ",
	"Pm/D4DAVYeyDUWoh7X3s5qeRkmuJyuelMwTVagVFKAsW/GEyKr5WKrmKuh5V1b5acyeMSr5hxbY9xd58",
	"GD6MBeFH4n4mZAHbNPSxVoCQt5l1WKgOJ1mBpHIlabNQEjVxiD++EdnqPrEvtJ8AkAyCftNzZrfRybRL",
	"zXbiBpTAC6+TGAjr238shxviUTcfC5/uVAzdf4RwQKQpYaNGIMMyBCMMmFeVKLY9xxONOmoE40dZl0ek",
	"LWQtfrADGOgGQScJrlN62odaewP7Keq8p04ro9hrH1js6JvnPgG/qDV6MDqRzcM6542uNnHt3/18YZXm",
	"K/BeqIxAutUQuJxj0BBVETfMCgonKcRyCbH3xdzEc9ABbmBjLyaQboLI0i6aWkj7xdMUGR2gnhbGwyhL",
	"U0yCFsZ88m+GXq4g00empOZKiLbmBq6qZLr+d7DLfuZl7ZQMoU0bnuvdTt3L94hdv9p8Bzsc+WDUqwPs",
	"wK6g5ek1IA2mLP3NIxNVCr9nOiXxUb3sbOERO3WW3qU72hrfxGCc+NtbplPkv7uU2xyMNkjCwTJlNy7S",
	"sQnu9EAX8X1SPrQJojgsg0TyfjyVMKHl4/AqampRHKLdN8DLQLy4nNnH+ex2kQCp28yPeADXr5oLNIln",
	"jDQlz3AnsOdIlPOq0uqKl5mPlxi7/LW68pc/vh7CKz6xJpOm7Ddfn7185cH/OJ/lJXCdNZaA0VXhe9U/",
	"zaqopv3+q4SqZHtDJ1mKos1vKhnHMRbXWBG7Z2waNBFp42eio+hjLpbpgPeDvM+H+tAS94T8QNVE/LQ+",
	"Twr46Qb58CsuyuBsDNCOBKfj4qZ1oklyhXiAWwcLRTFf2Z2ym8HpTp+OlroO8CSc60csTZnWOKQvXIms",
	"yAf/8DuXnr5RusP8fWZiMnjo9xOrnJBNeByJ1Q79HvvC1AkjwevX1a/uND54EB+1Bw/m7NfSP4gAxN8X",
	"/nfULx48SHoPk2YsxyTQSiX5Bu43WRajG/FpFXAJ19Mu6LOrTSNZqnEybCiUooACuq899q618Pgs/C8F",
	"lOB+OpmipMebTuiOgZlygi7GMhGbINMNtZg0TMl+TDUmwTrSQmbvWxmQM3Z4hGS9QQdmZkqRp0M75MI4",
	"9iopmNK9zPDlEWutG7EWI7G5shbRWO61KTVTe0BGcySRaZJlW1vcLZQ/3rUU/6iBicJpNUsBGu+13lUX",
	"lAMcdSCQpu1ifmDyU7XD38YOssffFGxB+4wge/13LxqfUlhoqrvSkRHg8YwDxr0netvTh6dmymZbd0Mw",
	"p+kxU1qNB0bnnXUjcyRbhwuTLbX6DdKOEPQfJQphBMenQDPvbyBTkXt9ltI4ldsO6O3sh7Z7um48tvG3",
	"1oXDopsWTDe5TNOn+riNvInSa9Llmj2Sx5SwOMKgmxowwlrweEXBsNg+JEQfcUnniapAdDLM0qcyzuU8",
	"pfHbU+lhHuS/lvx6wVO9VZwu5GCKtrcTJ2UVCx+HDTBNjQOanUUR3M27girJVaBbH8SwKu0N9RqadrJG",
	"0yowSFGx6jKnMIXSqMQwtbzmkrpuu++IX/mvDZAL3n11rTTWgTTpkK4CcrFJmmPfvXtb5MPwnUKsBDWU",
	"rg1EHYv9QNSsn6jId31uKnd41Jwv2cN51Dbd70YhroQRixLwjUf0xoIbvC4bd3jziVseSLs2+PrjCa+v",
	"a1loKOzaEGKNYo3uiUJeE5i4AHsNINlDfO/Rl+wzDMk04gruOyx6IWj27NGXGFBDfzxM3bK+Ifg+ll0g",
	"zw7B2mk6xphUGsMxST9qOvp6qQF+g/HbYc9pok+nnCV8018oh8/Shku+gnR+xuYATPQt7ia683t4keQN",
	"AGO12jFh0/OD5Y4/jeR8O/ZHYLBcbTbCbnzgnlEbR09tO2KaNAxHvfF9n6UAV3iI8a9VCP/r2bo+sRrD",
	"NyM5Wxil/AP6aGO0zhmn4p+laCPTQ/NCdh5qC2PjqabfFOHGzeWWjrIkBqovWaWFtGj/qO0y+4tTizXP",
	"Hfs7GQM3W3zxNNHAqdvjRB4H+CfHuwYD+iqNej1C9kFm8d+yz6SS2cZxlOJ+W2MhOpWjgbrpkMyxuND9",
	"Q0+VfN0o2Si51R1y4xGnvhXhyT0D3pIUm/UcRY9Hr+yTU2at0+TBa7dDP71+6aWMjdKphgHtcfcShwar",
	"BVxhxlx6k9yYt9wLXU7ahdtA/8fGPwWRMxLLwllOKgKRR3NfsryT4n/+vq18jo5VykTs2QCVTlg7vd3u",
	"E0cbHmd16/tvKWAMn41gbjLacJQhVkai7ym8vvnmj4gX6oNEe94xOD76lWmng6Mc/+ABAv3gwdyLwb8+",
	"7j4m9v7gQboAcdLk5n5tsXAbjRi/Te3hVyphAAvd/pqAIl8fIWGAHLuk3APHBBd+qDnrdlb79FLE3eR3",
	"paNN06fg3bu3+CTgAf/oI+IPZpa4gW2Wwvhh73aWTJJM0TyP4tw5+0ptpxJO7w4KxPMnQNEISiaa53Al",
	"g86ZSXf9wXiRiEbdqAsolVMy46ZAsT3/nwfPbvHzPdiuRVn83NZ2610kmst8nYwSXrgPfyEZvXMFE6tM",
	"9hlZcymhTA5Huu0vQQdOaOl/V1Pn2Qg58d1+51Zabm9xLeBdMANQYUKHXmFLN0GM1W7ZrKYsQ7lSBcN5",
	"2qYWLXMctkCO+jL+owZjU0cDH1ACIjq7HPOltoAMZIHWrxP2LRawcbB0Kpaj1SnUgu3WRayrUvFijjVq",
	"33x99pLRrPQNddCmtoQrNLp0V5G0kh/RZ90bnUcKoBzTr31fRQa3amOzpotgqsSce6Ptcyh6oRNojomx",
	"c8JekCWs6V9OkzCsdKw3UERNC0kXQ5pw/7GW52s0MXUusnGSn95PM1Bla4CPksiaJjZ47hzcvqUmddSc",
	"M2XXoK+FAUyshivoVrVrSjx6E2eoctddnq6lJEo5OUKmaFrWHIv2ABwJJME3nISsh/gjDQzUjvbY9qIX",
	"+FU6pL7Xq7TnvA010pqm6997G3HOpZIix4r2KYEIK3BN8zZNKP6fdhOZmT+hicOV7JDapHR6LI72TA2M",
	"0CNu6LmNnrpNJeqgPy1sfeesFVjjORsU89Do1/s1hDTgmxI5Ior5pNKJ2JRkPHvjBz+SjLC4zoih6hv3",
	"7AdvxsTaBpdCosHCo82L2eR5KI1AB6NkwrKVAuPX003KMG/dNydYbK+A7fuTl2ol8guxwjEoGsotm0L/",
	"hkOdhUBAH3jn3n3u3vUl0JufO1E9NOlZVflJx9tAp3vfb+UoglPhJyEeIEJuM3482h5y2xvBi/epIzS4",
	"wuAjqPAeHhBG0xK5O8rXTkUgisI3GCXGJeugCpkA46WQwROWviDy5JWAG4PndeQ7k2tuSQScxNPeAC9H",
	"4tgx0ZRcqbcdql8A3qEE1xjmGN/GtpvzCONoXmgFNy53LBwKR92RMPGcl00EbKI3M0pVXogqMEek1605",
	"xTgc4w794LsXwMEsrOZzbKpw7E00VmpuURcrsBkvilSFoq/wKcOnIdcHtpDXTS+hJsmrW2p6SG1+olxJ",
	"U2/2zBVeuOV0UfvzBDXELdjDDmPBlMUO/0010hnfGR/7enRyZQh0LY6rrz5MFk1JvY6mMyNW2XRM4J1y",
	"e3S0U9+M0Nvv75TSQ9blnyKpssfl4j1K8bev3cUR118dhBnT1dKUR8WQXoXPQ92aprBflyvhVTZoF4XO",
	"a9y8xJb1gA8vJgG/4uVIQnNs8qb7lczAY2nN+WgWPre+ypLlbC8LGq1cQyGfPSP60BM0FuZJUZ53Z3z2",
	"a92L0HEXzHcdhwuF+rTMYtTRcjNfSLvBxzpDvrsay3QP7Rbweb/9/SX4opiVhiuh6hBEE0JZg0pIv3aa",
	"yTe1BpLrTwaI/9HG51FT+RvfhpSW6XXy734mZxoDafXuT2A4H2z6oLH+UNol81T7Cms62E3qaNe5Fae0",
	"Ikl1vfCyYae1f5eWBl1EBmT1Yoo4MMDHx/nsvDjqwkx1TpnRKKlj91Ks1hYLr/8NeAH61YHC8m0xeTxi",
	"lTKibSRZusF8Jc81DncyNWbcEbCIC+MPxwqxhFeQW+we2sZIaYBjyuS7yYLt/l8F5sfV6Sa03teV31dM",
	"ftgy9MAdP6h/E9VwonaLJ9NLp581kbCUyHPNTVt1o5f6OjkBb7mEHIvb7q039F9rkFEtm3mwyyAsy6j8",
	"kGjSUbA88/FWxxagfeWA9sITtUm5NThj6ciXsLtnWIcakv0fm1ysm9R/RQwgd8hCKeAxQ7IP/hGmoQzE",
	"Qojs9BV12x4Ho6V7o+pZN5wrkKS7ONqKWnumTPeunjSX+/So6n2YWTFWkmjY+nZc/3iBnYaNj3PiTf3Y",
	"WEtn58P+J9e+/ixWh2p8J6ESLZjwWygFR7OU4hLi5vboqbrmughv3EltH7qbRBroZTOzaOPwh77qREV9",
	"TGnJS+XEiGwsL6gb+t7Ejd0zFODX1mFBuJagNRSNS6RUBjKrQtz+Pjj2oYKiGG+EBDPaxYaAG61g/Lot",
	"0YzdvDhWLOY+eDFeINOw4Q46HRVSHp9zH7Kf0/OQSx26OR20MDX0eritaMjAEGaAxJjql8zflodztG9i",
	"bBJSgs6C56lfVVl2C2th+cSizumCjg9GY5CbXAJlDytJ2mny4Sp7OkKU63wJu1NSgkI/1rCDMdAkORHo",
	"Ud3I3ibfqfnNpOBe3Ql4f2w5sEqpMhtxdpwPS0H3Kf5S5JeApdyaSOWRVtvsM7SxN97s6/UulD6uKpBQ",
	"3D9h7ExSbkhwbHe7xPUml/fsvvm3OGtRU3V2b1Q7eSfTQfZYN13fkpuFYfbzMAOO1d1yKhrkQKHh7UgZ",
	"as2vE43nT6Zq5UNXc78ZeEtUBEVKJrkgj9VzPOgpwxFmskclF9CRyZn3dDFTqlRI5k2y7d1QaUzFkyFA",
	"FuSUpO8GCj94EgHJ9taJU0gVzHztMrVkGlon8k2LuA07cac0+v7MzSxdfrdUGjo9td3XVLCxyV8Ize+5",
	"Xgirud7dpNTaoBP4wHoyiuWD4VhNJFa7kDYaa4jDslTXGTKrrGlXkFJt3XumexmH3lntd+5ULyCK6+LG",
	"C2o7tuYFy5XWkMdfpNP2CKqN0pCVCsO8Uh7opXVy9wZzdSQr1YqpKlcFUNuPNAWNzVVLyVFsgiiqJokC",
	"oh1M+qRvIjqeOOVdtaGn4jy06Ix8mSOBp2B8MR6PIXp5CO+eFu5HNdw4X6JFSGCsSzf3mqTPuJE9HNnH",
	"XpRlMBiMtbJnP5kaw5Ew8cZN8ZRtlLFes6ORTDNUG+L1Wa6k1aosu0YgEolX3rL9Pd+e5bl9qdTlgueX",
	"91GPlMo2Ky3mIS21H4zXzqR7FZkm9tzvVzil9zA0zRPJ0Y31Pec4uh92BOb7wxzrsI37LNEHv7euLvNK",
	"qw1nknGrNiJP0/A/V3TbaExaiiUkSz1RSzpKzsfXkFHHl0MTzIAsaYhmkDzZU+uMeZ7mnbrIPNx/UeLt",
	"j8uW4C+JkYtpyCe91JLlo7JVDwCElDJGba2pj10s+TRcRa0owxxd0n1AJ3JxjPy5HWxuhDsHysKtgBpE",
	"GzYAfkbK/pxKclHk4kJtw/P7bc2uGwH/cT+Vd5jHWEjVRUtamoKqQn2PEY6Qrgy8N/7oDWYLL6ZGITU9",
	"RyfeqBEA43FJHRgmRScdC8aSixKKLNWy7ryxCc0jzdZntPQ7SQvjOXnO69Axzo1da/D1Jkik1l1/U8Ud",
	"Kanm9aHlVhawBYPFIKh9PjfkZwj+DiipU1xP+VZVVsIVdMK1fBGMGkU7cQXhW9N8zAqACr1/fZtUKg4p",
	"vst7hgq/9iyKZJmC3aTlghBLO8UOmCWSRpStzOiYmKlHyUF0JYqad/BnjhU5umY3d5QTqBrI5FnQ26ZO",
	"8xON8DoMcBa+T4kyARPvp/Gho1lQGnX7GNDBuMTajJ16mQ5LjCu8NA4NnK1oHJ9E4i3fMBW/luMGwCHJ",
	"t+rNxH0SSkaI/XoLOUo13bi72+OE4WDM9Ko3jYrgutnhmxuS/xAa3kvCo+OlVA0DyGD3WmoCXXiBHV/A",
	"3sHSib1OasaucJ7/e/43Z4s6DOT0ampSF2twLyB47LCgdOOs8AKtaC60EF849/UE+0q5iCKrN3zHlMZ/",
	"nL72j5qXYrnDE0rgh8+YWXNHQt5FSL5rH6/oJt4vmMwDYMEuoMJUtG4xdcxouJ0bJQLaXYGhm4hiG34J",
	"8TagW544T24dyzH1YiOMwcuut51DLPjFh5oQG17EOjJWpuv2bQ61St3X/3ebtRVPFQpKVSXPQ0tC3xOl",
	"YxCntqOBuOwaNvvT+obqcSCBppVpS7Q6pPMWNzDuHRm5kYqVH+v30AF70OJx0OriVss4pht8mxm9JyFy",
	"0lLuehemxocMgI4bwx0CP+6T92nwnywaObaMKeD/WfA+0hkzhpeaYH4CLHdS/hOwkl11obaZhqU5FApB",
	"hlWnCOu2WEAwTgqZa+CGYkPOf/QqW1sTUUinQlL0YuN9a0YpYClkyyyFrGqb0ACwNKLcRQiLzdOI1hFn",
	"z5iU4MSwK17+eAVai2Js49zpoB5ycU36YJL33yaU/+ZOHQ4gTKv9YCYhtJlq0WvuAqeuNxRYaCyXBddF",
	"/LqQLAft7n12zXfm5r4PB62unXxxwPvBI2mmm98e+UGQtAmQcufdl7f0TDQA8jt0UUxwLWAEa8KtQEYR",
	"q0Y8CUMY0mUV+DYr1Qrzy0YI0BefRN8PKStKosGW5KHj5jHiN9g/Ddbd9gffKpx1yhT7z9mPiDpUeH6S",
	"wu49aWRN6yf8UUQmHYRA/3LVhoXT5gzpP5Wj+QaTGDp5mkG4C0kMYa8pPITmgxFPRteCO7KL6CD3Cb6x",
	"uXZ6P6OuDz6VCUo6bIa6rdkT+A2mDXLmuQ/cGRp9BkoxIWXu82iPtAmRJTncAyPgUfNpf7a60zbBFG6c",
	"Y5pA7c+czSpVZfmUaEAqzV94g7aHtAvjCH1E5uqRdTeBE6ZpVtEpbNLpWnFsH6zRrhmH/DJVvk/JHjNo",
	"jHDQrrFcLZGXUWtmtMNgjkdjvJj3s4+6BpuGSTDONOS1RoPmNd8d7is0UhL24m9nnz96/Mvjz79g7gVW",
	"iBWYtqxwry9PGzEmZN/O8mljxAbLs+lNCHnphLjgKQvpNs2m+LNG3Na0NQMHXYmOsYQmLoDEcUz0g7nR",
	"XuE4bdD3n2u7Uou88x1LoeD33zOtyjJd1r0R3RKm/tRuRcZ+J/FXoI0w1jHCrq9O2DZW1qzRHIfFPa+o",
	"zoiSua++3lCBsCPBOKmFjIVaIj/DrF/v32CwrUrPq8gnsW9dXi8iixgGZ2D8xgJYpSovSoslS0GEuSU6",
	"yrn0hkYM74yiJxtmS3GUKUL0Mclp0os74u7n9t1ujTbN6d0mJsSLcChvQJpjlvTxjPabcJLWlP6n4R+J",
	"FP074xrNcn8PXpHUD27WdXsSaMN07QR5IAAjeZidDLq4KX9baVSTVR7t98HV2Rc/vm9doAcTBhCS8MEB",
	"8OLEyva9Jsbdg/MHl+z8vkFKtJT3Y5TQWf6hXM3AepuLJNoib6SwFgyxJTUUC6NEXPO8yW8d0UoGabDY",
	"gd9ppmWZSJ8luwmeqZhwnEqgr3j56bnGN0Ibe4b4gOL1eNJMnEMZI5lQaW5Wwe0lnzR3lC95d1PLV5iy",
	"+1/g9ih5z/mhvLt4cJuh1QtbUq/CrUBZwOwax6RwoEdfsIWvpl9pyIXpu6Gvg3DSpAyCFksfeglbeyBH",
	"8dA6f1b2FmS8DDEj7IfInaTQbNdC2B7RP5ipjJzcJJWnqG9AFgn8pXhU3H3zwHVxy8rrNysIEpX2OrIg",
	"yLCv6NTlUdELd+nUBobrnHxbd3CbuKjbtU2tZjO5gPu7d2/tYkoRmnSxdfc5VsG5k6rrR9Vc/x3q3xCO",
	"/Bh+3hTF/DxWEZWqfo4U3+3tRy3KgwEinVLKH+ezFUgwwmCx4F98c4hPe5cGCCgnf3hUCdbbFBIhxCTW",
	"2pk8mioqkjyhPrL/LFENGfPd8loLu8PGoMGAJn5JVur5tqn64KuGNL4rf/dZdQlNc+a2RkRtwu36reIl",
	"3kfkUpPuFlLlCft6yzdV6c3B7K/3Fv8BT/7ytHj45NF/LP7y8POHOTz9/MuHD/mXT/mjL588gsd/+fzp",
	"Q3i0/OLLxePi8dPHi6ePn37x+Zf5k6ePFk+/+PI/7jk+5EAmQEPt7mez/y87K1cqO3t1nr1xwLY44ZX4",
	"DtzeoK68VNi4ziE1x5MIGy7K2bPw0/8TTthJrjbt8OHXmW/AMltbW5lnp6fX19cn8SenK0wKz6yq8/Vp",
	"mAfbiXXklVfnTTQ5xb3gjrbWY9xUTwpn+Oz11xdv2Nmr85OWYGbPZg9PHp488r1rJa/E7NnsCf6Ep2eN",
	"+37qiW327MPH+ex0DbzEGirujw1YLfLwSAMvdv7/5pqvVqBPMGGAfrp6fBrEitMPPjn+475np3FIxemH",
	"Tg2B4sCXIWTg0CunH0KTy/0Ddhoc+mCt6IOJgO577XSBjS2mvgrx6saXgvqIOf2AEvXo76feLJJ+iJoN",
	"HZnTUItj5E3Kuk4/7KDwg926hewfzr0TjZdzm6/r6vQD/gepP1oRFXE8tVt5ip7X0w8dRPjHA0R0f28/",
	"j9+42qgCAnBquaTOoPsen36gf6OJYFuBFk6sxMIp/lcqcHWKDaJ2w5930vstS0iVJflJGiC1NxSV38m8",
	"zbZqGMJ5EV6+2Mk8yL8hmBCP+eOHD2n6p/ifmW+g0ivecerP82xaV/hu2URkoj3DWwMv5ZSBPZkhDI8+",
	"HQznkgIIHVcl7v9xPvv8U2LhXDpBhZcM36Tpn3zCTQB9JXJgb2BTKc21KHfsJ9nEQEbtLFMUeCnVtQyQ",
	"O9Gh3my43qFIvlFXYJjvlBkRJ9PghCCKk0BffkvDeHdxx0fezqp6UYp8Nqcime9R7LIpCSRYg4YzBUtY",
	"O3j3VHx78ExM34WuYLunKskkOA/kq9PwQ6l8uL9h7/u+VJrqXmqDZv9iBP9iBHfICGyt5egRje4vLK0F",
	"lc+qzHm+hn38YHhbRhf8rFKp2gEXe5iFb2AxxisuuryijdGbPXs7rU2Xd1+QZboA4w7zSdBKnMjdKg26",
	"4UjhzKPzNNrrfR2IP77/U9zvz7kM57mz4+Sf5LoUoBsq4HLYU+RfXOD/GC5AzZE47eucWShLE599q/Ds",
	"kyvHV0yU5GKbyAc6BS5bYbrz82kwQKR00O6bHzp/dvUqs65toa6jWdB0T36noZbhHtam//fpNRc2Wyrt",
	"6ypiV/XhxxZ4eeqbqPR+beuWD55gMfboxziDMfnrKffqRupZRT38Rx729eHUU6/yjbwUwofD49Z8Fpuj",
	"kM82hqi37x2Xw3bJngW31pVnp6eYT7JWxp7OPs4/9Cwv8cP3DWGFLn+zSosrLGP/fj7bZkqLlZC8zLxV",
	"o+0ENXt88nD28X8HAAD//2PohBGwAwEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
