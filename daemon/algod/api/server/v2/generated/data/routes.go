// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
