// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
