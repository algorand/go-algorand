// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
