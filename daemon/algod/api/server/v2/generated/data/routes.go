// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
