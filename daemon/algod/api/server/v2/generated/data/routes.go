// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
