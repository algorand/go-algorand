// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"u8Lkou8//r8AAAD//0RvLXki4wAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
