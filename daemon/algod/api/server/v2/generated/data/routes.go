// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"k0eTD/8/AAD//2IruLI/CwEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
