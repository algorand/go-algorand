// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9aZMbt5LgX0FwJkLHsrp12fOsjRezbclHj2VboW57dkattcGqJInXRaAegOomrdV/",
	"30DiKFQViiyyKclv432SmoUjkUgk8kLm+0kuVpXgwLWaPH8/qaikK9Ag8S+a56LmOmOF+asAlUtWaSb4",
	"5Ln/RpSWjC8m0wkzv1ZULyfTCacraNqY/tOJhL/XTEIxea5lDdOJypewomZgvalM6zDSOluIzA1xZoc4",
	"fzn5sOUDLQoJSvWh/JmXG8J4XtYFEC0pVzQ3nxS5ZXpJ9JIp4joTxongQMSc6GWrMZkzKAt14hf59xrk",
	"Jlqlm3x4SR8aEDMpSujD+UKsZoyDhwoCUGFDiBakgDk2WlJNzAwGVt9QC6KAynxJ5kLuANUCEcMLvF5N",
	"nr+dKOAFSNytHNgN/ncuAf6ATFO5AD15N00tbq5BZpqtEks7d9iXoOpSK4JtcY0LdgOcmF4n5MdaaTID",
	"Qjl58+0L8vTp06/MQlZUaygckQ2uqpk9XpPtPnk+KagG/7lPa7RcCEl5kYX2b759gfNfuAWObUWVgvRh",
	"OTNfyPnLoQX4jknwa8b1l88a2BnXsMCdaZ0HM0bimDQ/z2AuJIzcJdv4qNsUz/9Z9ymnOl9WgnGd2CmC",
	"X4n9nORqUfdtXC0A0GpfGUxJM+jbR9lX794/nj5+9OFf3p5l/+3+/OLph5HLfxHG3YGBZMO8lhJ4vskW",
	"EiienyXlfXy8cfSglqIuC7KkN7j5dIXM3/Ulpq9lpje0rA2dsFyKs3IhFKGOjAqY07rUxE9Mal4axmVG",
	"c/RPmCKVFDesgGJq+PHtkuVLklNlh8B25JaVpaHBWkExRGvp1e11vD7ESDKQHoQhXOKfFz3NuvbGDayR",
	"Y2R5KRRkWuy41Pw9RXlB4muoueHUflccuVwCwcnNB3tFIza5gb4sN0Tj3heEKkKJv9CmhM3JRtTkFrer",
	"ZNfY363G4HFFDBpxu1q3rzngQwjtISMhDMyEKIFyRJ7HcB9lfM4WtQRFbpegl+6mlKAqwRUQMfsb5NoQ",
	"wn9c/PwTEZL8CErRBbym+TUBnosCihNyPidc6IhYHHUhDk3PoXU4uFKiwd+UMFSyUouK5tdpOaBkK5ZY",
	"1Y90zVb1ivB6NQNpttRfM1oQCbqWfAggO+LexLmi6z4Yl7LmOVJEA0hLJjT0x1RV0g2icEXXf300dQAq",
	"QsuSVMALxhdEr/mgPGjmPgTgTIqaFyMEKG32PbqgVQU5mzMoSBhlC2xumv0hZHw/CBtBLwLQDzIIYJhl",
	"bwA5rBO0Z7iE+UIquoCI9E7IL45t4lctroGHA0NmG/xUSbhholah0wDUOPV2+Z8LDVklYc4SlHnhEGQY",
	"lW3jePvKyVu54JoyDoVh+wi00GCZ3iBM0YTbta2+xDCjCr58NiRPNF9H0sNcdOlgKw0cuP/YLbNHO3FN",
	"m6/u4Kflulb/UZLdNmgUW2T2595ms8WludnmrMRb729mjz2qaoXspYUsfw8qtuBU1xKeX/GH5i+SkQtN",
	"eUFlYX5Z2Z9+rEvNLtjC/FTan16JBcsv2GIA4QHWpEqI3Vb2HzNemvXrdVLzeSXEdV3FC8pbqvVsQ85f",
	"DhGCHXNf4j0L+nisCF2uvXK0bw+9Dhs5AOQg7ipqGl7DRoKBluZz/Gc9Rwqjc/mH+aeqStNbV/MUag1l",
	"u+sfDRzO8HFWVSXLqUHiG/fZfDWMAqxiQ5sWp3h5P38fgVhJUYHUzA5KqyorRU7LTGmqcaR/lTCfPJ/8",
	"y2ljITq13dVpNPkr0+sCOxmB2YpcGa2qPcZ4bcQstYWhGCaOn5CVWNaIAhrjdhMNKTHDpku4oVwbghrH",
	"M8Ihf+vmbnbAylp2BzpK4uAWENtwBspK5LbhPUWizSCIaIKIRnF4UYpZ+OH+WVU1OMXvZ1VlMYSyKzAU",
	"C2HNlFYPECG0OVvxPOcvT8h38dioGghebsyVYsUac6PM3V3n7r5gD3NraEa8pwhusJAnZrM8GozacQwa",
	"RDVnKUojYe2kHtP4e9c2Jjzz+6jO/6hEF2N7mNxQFXS4tDoX/hIpW/c7tNQnJWe0OiFn3b6HEZIZZQsJ",
	"qfMGr8cmJ/yFaVipnbQRQRTRl9seKiXdTJywmaHQ2CecXxRYmqnognGEdmrUOU5W9Nruh0C8G0IAFfQ0",
	"S11WEg2GYCe7OtSf9GxD/5D0m9pqL+MaGbhkSqPmj43JEkoUySn3JB4Tz0G0MoIEtiwiwHwraWWp232x",
	"whrjaHGwjSysd7yuR96kSZijKyHaeoTqYNa9k70mIUE+0oHh61Lk199TtTzCmZ/5sfqnAachS6AFSLKk",
	"apk4Sh3abkYbQ9+mIdIsmUVTnYQlvhILdYQllmIfZlZVL2hZmqn7TKyzWhx41EEuS2IaE1gxNPs7ldT6",
	"CaxmR76h+dKIDiSnZTltjFmiykq4gZIISRjnIKdEL6luDj+O7LUhPEcKDPvTQKLVOEMYGgFlsIRIICuK",
	"d9LK6EBV2e4TeKqiK+hISnhHihotFpF6cv7Srw5ugCNPCkMj+GGNaD2KBz8xc7tPODMXdnHWRqm9WzLg",
	"L/CLFtCmdXPD8mYKIQtredfmNyZJLqQdwt75bnLzH6Cy6Wyp834lIXNDSHoDUtHSrK6zqAeBfI91Onec",
	"zIJqGp1MR4Vptc1yDuyHIiDIhP3nZ/wPLYn5bOQaQ0kN9TAUT0TkJi7sVW1QZWcyDdAiLMjKGltJRfPr",
	"vaB80UyeZjOjTt431r7rttAtIuzQ5ZoV6ljbhIMN7VX7hFirmGdHPelkK9OJ5hqDgEtREcs+OiBYToGj",
	"WYSI9dGvta/FOgXT12Ldu9LEGo6yE2ac0cwe4funpDokqVpkTveQWHEb8Urn8W1hFtK4VM9mQh4mQnVu",
	"VU4aRzGhZtRIgpx2KAOb1lXmGFLCkWQbdAZqonW2Sz7d4VPYamHhQtOPgAVlRj0GFtoDHRsLYlWxEo5w",
	"3pdJyXVGFTx9Qi6+P/vi8ZPfnnzxpSHJSoqFpCsy22hQ5L6zYBKlNyU8SB49FKnSo3/5zLsO2+OmxlGi",
	"ljmsaNUfyrokrRHANiOmXR9rbTTjqgOAo64BMPe5RTux/ncD2kuY1YsL0Noo/K+lmB/9CujNkIIOG72u",
	"pJGmVNt960TE08I0OYW1lvS0wpbACxsiYtbBlFF8V7OjENXQxhfNLAVxGC1g56HYd5uaaTbxVsmNrI9h",
	"5QEphUzKHZUUWuSizIxwy0Ti9nvtWhDXwm9X1f3dQktuqSJmbnQh17wYuOT0mo+/tO3Ql2ve4GarwGTX",
	"m1idm3fMvrSR36heFchMrzlB6mzdvXMpVoSSAjuigPUdaCt0shVcaLqqfp7Pj2MGFjhQQkhgK1BmJmJb",
	"GJFPQS64jczcWx5w84xBWBdV3kWnh0FyOLrY8Bw9j8c4yMPC04pxDLBQG55HkpSBsYRiYQn1I9r2hhBk",
	"J7+nEgAaBL3Cz+joeAmlpt8KednI9d9JUVdHZ+HdOccuh7rFOFdKYfp6iznji7IdMbwwsJ+k1vhZFvQi",
	"WFfsGhB6pNFXbLHUkSL9WoqPcG8mZ0kBih+sFa00ffq2tJ9EYRiOrtURxM1msIYLGrqNeR+diVoTSrgo",
	"ADe/VmlBdCCiFMPUMN5Ox7ItGm6YIjMw1JXT2qy2rgjGjvXulKZjRnN7QjNEjRqIeAkBTraVnc7GJpYS",
	"aLEhMwBOxMyFlbiAF1wkxcA37UU5JwaP4iAtSCspclAKisxZ7XcC69vZC0dvwRwuBZcQZiFKkDmVHwH8",
	"65udkF/DJsPgTkXu//CrevCnWIEWmpY7kI9tUlvQNU/213EoQNsItwtOTL7WFGqp34jShtGUoGEIzXfE",
	"2+Cud2Hs7f3HQN0NSIwG+qhnyU9ybEIMwH/kk3R8+Otq4MGEMy0YqdRsM6dceNFv3PAlVTrbdXGYRi2L",
	"iFllxKtTdwUOPCAsvqJK20g4xgs0R9sLD+exgqOZYp8lDKpXZq5fvWbVny03dzdXtQpqlqqrSkgNRWpV",
	"aMYcnOsnWIe5xDwaO+hyWpBawa6Rh/AWje/Q5zR7/IPqYLR0ZtD+4jBkwsgmm5HIbYHVoGYbaBe+VYTv",
	"OIx8ADSmGtRb4mKqQ10hdn06UVpUleFDOqt56DeEuAvb+kz/0rTtE6D1YVnpoxCg0D/m2jvIby2u7QOC",
	"JVXEweEt1Wi4skF8fZjNEc4U4zlk204HKrOmVXxMDjjadbWQtICsgJJuElZ3+5nYz/sNiVTRKP9CQ2Yj",
	"wdOE0dC/D6rdazKBM6iU4EzwC8nNUTZqUENWrvfecxWAs6UYoaPHe2FwnD251X48RI0lmcSIeIPfCG0o",
	"x9EVLsLdMIctYQBXYbJjoguHyxptvTvpf4FyUwaJ6RjTbkANLbOZ8Y6LHLDCu4eB0fntXECdOyLJ2AfZ",
	"6g6+NsRCBlwCr6nULGcVapA/wOboCnV3gmScBilAU1ZCQaIPVrmu4v7Exjl3xzxMwR5l9eyD3zN7Jpbj",
	"o8LawF/DBi0Zr+3TnMiAdAwLQWJUc19SThBQH5ZvFJK4CaxprsuNEUD1EjbkFiQQVc9sxEzfk6VFlcUD",
	"JD1jW2Z0wQBJV/zW6IQLHCpaXsqFbPWh7fBddpSiFjqcHlQJUR5kieyhJwnTqOAlUglDB8y9EPQvwjxt",
	"tcB21wHGhgQB5Z5qIR7XRP5L1CSnHFXSWkOQuoREUQaFXjODERvDnC5etsEZlLACq3vjl4cPuwt/+NBR",
	"AVNkDrf+6a1p2EXHw4doL3stlG4dtyNYos0BPE9cOuhENFeq07e6XGZ3yJ0becxOvu4MHjyP5pQp5UjZ",
	"LP/OLKFzVtdj1h7TyLhwQxx3lF+tHaDWWzfu+wVb1SXVx/Agwg0tM3EDUrICdvJ2NzET/JsbWv4cuuGT",
	"YcgNjeaQ5fjQdeRYcGn62LexZhzGmTnA9q3KWIDg3Pa6sJ12KMpNSApbraBgVEO5IZWEHOwDUCOTqrDU",
	"E2Kfa+RLyheo0khRL1wUix0Hr4BaWdOVrHlviJGimF7zDN0LqUvCRU76d8JGCANqFNOub8IqXbc0QOAe",
	"i4+5vaNd6fpqki7M6WRQbzdovmn0douu9mPngy6MlpQYYawBZaRbC5FpJKY+BuOtMwfOEMDHcZ80Q6eg",
	"7E8chaU3H4ci0y/qqio3RxCV7EBEQiVB4TUWG+2U/SrmcfIDH8+6URpWfa+K7frbwBF9s4dGK3jJOGQr",
	"wWGTzBLEOPyIH0ceQrxuB4ZDUWj8aF19p7XqDujtmcfQ8F13BWmke9K7Pkf1rZDHcnPbAUerEiN8yDuD",
	"KtyUh3q6aVkmnMPu2XOXbahpiJhkklClRM5QGjwv1NQFvFt/snsj3Ub/6/AI6wgntjtuxwsaZ+ZAOzuU",
	"FaEkLxla4QVXWta5vuIU7XPRUhOhet4UMGzDfeGbpI3GCZuuG+qKUwzTDFa7ZFjOHBKmpW8BvClX1YsF",
	"KN3Rq+YAV9y1YpzUnGmca2WOS2bPSwUS4+VObMsV3ZC5oQktyB8gBZnVuq1X4Kt+pVlZOpesmYaI+RWn",
	"mpRAlSY/Mn65xuF8IIc/shz0rZDXAQtj5YYFcFBMZekgw+/sV3zE4hCydA9a8G2H/ewjrKMZzcJbeY3+",
	"z/1/f/72LPtvmv3xKPvqf5y+e//sw4OHvR+ffPjrX/9v+6enH/764N//NbV3HvbUC3MH+flLp5efv0RV",
	"K3qX0oX9M3pMVoxnSUKMo3g69EfuYy4XR2QP2gY9vYQrrtfcENsNLVlh+M9xSKZ7L/VOsD1THcpqbVbH",
	"XOdXv6eScwfeRBKsqcNQP4rE1p1ga6xLvN+ddwyOFaqjA+gGTsHVnTMVxXrvu28uyakjBHXPZrywQ0c5",
	"ChIKinsl2QqwMbsUPx674lf8JcxRyxP8+RUvqKanM6pYrk5rBfJrWlKew8lCkOf+4eVLqukV7907g5kh",
	"o/fSpKpnJcvJtRWwutzBZvLqj3B19ZaWC3F19a4XEdAXptxUI9mEnTIzgoKodeayDmUSbqlM+TNUyB+D",
	"c9nUY9vgsEKIqK1pymc1cuOPvVFoValu1og+iqqqNCiKSFW5DAhmW4nSIjxOMwzcve81NPCTcLEdkt56",
	"jbZWoMjvK1q9ZVy/I9lV/ejRU3zm1yRN+N0xQEO3mwpG67WDWS266iwu3AriGMOdVXSRcolcXb3VQCuk",
	"EJQwVqhLliXBbq0niD7wHodqFhDeO++xJRayvd8O43IvbC+fzTK9KPyEm9p+n32nHYwe3B+8gTse7dNa",
	"LzPDEZKrUuYY+L0K6eoW5srx/n3FFijxu1x/MyD5EvJrl3INVpXeTFvdfeCJu4g9w2HKpuezDxAxjROa",
	"j2dA6qqgTnihfNPNlaPs2wMc9A1cw+ZSNFmg9kmO087VooaOLtJudNca8o0Pshuju/kuAsq/Q3UJTvBt",
	"pyeL54EufJ/ho20FgCMc6xRRtDKHDCGCygQiLPEPoOCAhZrx7kT6qeUxngPX7AYyKNmCzVLZh/+z763w",
	"sBqqdKkTXSxuGFARNidGHZrZ69ipSJLyBZhL3VzEQtHSpo5NOutROlwClXoGVG+1wvL4XaCHDoXwW3yY",
	"jVaSqVkCrM1+M41WDw63RqNDZdu2cTG8J/vEONmlQHEghL578/76ZA99waE3kVbR3+5hB4Jq4ELEYlpE",
	"SO33FWDuVnFr9s7AJVySUZspJrqVakUXMBbYlrtnZJKNlhcHB9kl6ySlGzHvCjE9iWLkImz3zOAlyQvA",
	"fDHMAE35nQBDP7d1AzrPAOYgd0idlSg+h9hMSzFUtnxlNoXyeGDTTAskb0RTD1gba/FBX1LlDzoml/X8",
	"+0DZ8JO+9N2Wbe88ioSLcsqGXHr+Lu7y72nIvWiTwvucez7Rns+uN5nulSlvOnFPCFJbJjiKygWUsLCo",
	"sI09eTX5nZpNNHD8PJ8jZ8tSQXWRiTESP9wcYLSth4RYCzgZPUKK+COw0SmOA5OfRHzG+WIfILnLT0X9",
	"2HhBRX9D+gGeDXs3orCozNXOBjxPueckLk9GI9d04opxGML4lBgGekNLw0DdY85mkF6KN1RwOgndXKDG",
	"gyHFZy8HhBVB9lqlFVoOWV8sXftlpEX/vdYwE+vMvjZO6k+z9cycieTbAHz7nDq8NuHePUVmYo0BQnix",
	"2ajyvaEbhswDFkVwrJlCKsd+Q7KhBW8/QLZL6ylqVkh6zngWyG5IXD0MmAGZeYjs7keZ944EUsdK2RTj",
	"cGabncaUtpDVF0CaW3baZKb1z8BSrGbocCZ3cgCjfQtpO1fe902WxOEsa/6sfpIkgX3L213SOdrOlU3R",
	"uE82xy45tIDYgtXXXdk1idZ2zFEbrxHWUizJMPq+C6uPNgUloLqftcTp7Drlab66eqsAZYYL3y0yZuLu",
	"Ub55EAWySVgwpaFxH/j4lE/v1EGboVGtxHx4dbqSc7O+N0IEQcM6WbFja5mffAUYYz5nUukMfS/JJZhG",
	"3yo0l31rmqbl33aonK0UwYqxXBkBuYZNVrCyTlOwg+SHlwaQn8KFpeoZ3o+M20ChGVY/SQbZ7gWMjcze",
	"ipRXFimv6EfEybgzZJoaUKQhsvas/yCnqcP2tjGRBNmmCKi/j4Mo3cJWo2fpfZ4ayctR3MTJNh9O7wgW",
	"fuyd8VP+cfyQvGBHSq4lyqKYfqUnFgsofHY49+LSJo1yOfhKwRdRca+q2pZy8ITYzH+YuG9Lzj8XVg5D",
	"QeWRQpIxXsA6DX2styDkzVs2zFeIkyyA28QnY81mSWTFQezYIrJuflrW3QtxTwb1XnYCeZtoW7tvYYNx",
	"S0qghdOaFPj1bT+o/S1yqJsOhQO3UsluP1Q4IFIZ01Etm376ggEmTauKFeuO886OuodJkO5loR+Q45D9",
	"uMF24KQd5pskwVZGcxdM7JwUp6i5nxq90UYXu0BZcwZo7p7pF7VEL1ArdrefUD/ojiPX/sOvF1pIugDn",
	"ycssSHcaApezDxqi5PSKaGbDlQs2n0PswVKHeF9awPX8FMUIYh5FdmnHl2udIKwd9NRAvRuJaRpKUMdQ",
	"fMRl33fo9YfIRBYukmizDnAAJh/j/wCb7Fda1kahYVI1gaPOmde+svegg5vVD7DBkXfGYxrAduwKWtTe",
	"AFJlyjcSPqkoa/g91aq9gKpsawv32Kmz9C4daWtc/Yzh49DcRK1qEu2lHPeoNCEsBrox+3ORjgox5wna",
	"W9El7l3bwordskykScRTMeUrpI65wEI2ip0RX0BLT+C4wMmH6eRuMRipO9CNuAP7r8O1m8Q8RkVan3wr",
	"EGvPTaBVJcUNLTMXuzIkREhx44QIbO5DXT6xjpSm9ctvzl69duB/mE7yEqjMgmVicFXYrvqHWZWtuLH9",
	"urFp2J0p1lquos0PqbLj6JZbTLneMX71Kto0sUzR4XTRLvN0uPZO/ujCruwSt4RfQRWirxq/sQ2+agdc",
	"0RvKSu+e9dCODq3G5Y4rnZTkE/EAdw7ciiLy7jzWYLD+1dXbG4/Zxv1hg5dCKvxEfJs6yKjfZTTpg9oQ",
	"+g72iIv8GTN5ppUo7vJ8Ild0EWD06MLet0K2bib3eDAZQfbxpECjJVg8ph3ol74Ka1f2OyFWTvx98bth",
	"DA8fxqf+4cMp+b10HyIA8feZ+x0VpIcPk07cpK3O8Cs0xXG6ggfhccLgRnxamwKH23GywtnNKgjCYpgM",
	"A4XaUDCP7luHvVvJHD4L90sBJZifTsbYHeJNt+iOgRlzgi6GHgKGaOSVLfyqiODdp+74KtWQFt47rmyH",
	"9Yn3jxCvV+gjzlTJ8nRcDp8pw4+4jbE1jQk2Hm22NnPUbCDQm9csGt00OyzpbGch0axJhKtkJtwGvzPh",
	"WEDN2d9rIKwwitqcgcRruHMze30HR+1J1GkDoRvYuvma4Y9r/tniwPNGsW22n60O0ZfBSeeXnionteeT",
	"g3jGHrvf8lzA0ZC/LfEx2dJF795RWfM+06QdxTlpPcN0/tDRszY1MXEkmy6GqWwuxR+QFg7QaZfIguG9",
	"zQyt5H8ATwWGdplV8OT7Fcaz7yKJ8UaCIeK4s1HALzpUwTvkmk7zgrtu7SHav0rnzXZoH9I949CP9nuV",
	"ARaFhzKKvsa6JD7gjHJ7Cm1SiNYDr/RZjh9gntrxm7PsYO49Wi3p7YymahYZFdDAFG14KzROC+I7+y1R",
	"IcGBnZ1ETwZCW2ZT31UgG6dOPxnwgeqcnXa0ItfobUhjscY2tdEipRKJYWp+S7mtu2/6WS7neiuwkRCm",
	"162QmNxSpaP4CsjZKmm7vrp6W+T92KuCLZgtKV8riKqPu4GIzaCJVOSqvIdEHg4153PyaNqcUr8bBbth",
	"is1KwBaPbYsZVXjthqiE0MUsD7heKmz+ZETzZc0LCYVeKotYJUhQuVGgDLGoM9C3AJw8wnaPvyL3MVJX",
	"sRt4kD7zTgSbPH/8FUY62T8epW7rAua0LvU2tl4gX/fvBdKUjeHMdgzDSN2o6QcAcwnwBwzfIFvOl+06",
	"5nRhS3fp7D5dK8rpAtJPhFY7YLJ9cX8xqqKDF26dKaC0FBvCdHp+0NRwrIGH2oYhWjBILlYrplcuVlOJ",
	"laGwpmy4ndQPh6XyfEUzD5f/iEHQVUJt/wxKFF0NPCTEcPaf0A0eo3VKqM1fWrLm4YOvMUvOfSpmLPEW",
	"KrtZ3Ji5zNJRJsV3EHNSScY1GoJqPc/+YpRySXPDEE+GwM1mXz5LlEprF9bh+wH+yfEuQYG8SaNeDpC9",
	"l2tcX3KfC56tDEcpHjSpEqJTORitnY6wHQr8HRj6zhK0GTcbJMC6RYA04uZ3IkW+ZcA7EmdYz14UuvfK",
	"Pjmt1jJNMLQ2O/TLm1dOElkJmarl0DAAJ5VI0JLBDT7jTG+SGfOOeyHLUbtwF+g/b9CZF0sj0c2f7qSy",
	"EDmEE5pZSFdkJP1ff2zSwqNf2j6P7dgkhUxYX50d8RMHhu5nBey6v22UHn4bwNxotOEofawMPLiwLypC",
	"n88RktUFye55ywD6+HcijeaOsv7Dhwj0w4dTJyr//qT92bL3hw/HZjpOmgDNrwm8HEWzxr6pff5aJAxy",
	"X4u15dQ+rsulA0kYTZMXmblPZ26MKWlX//v0QsdxXgmOjQhOHxqPEfzcRcln5qm4h9t4ARa6HWXgwjX2",
	"ipkmvfo7Q0+iLTGjzqAURgXD2kWjbO1J0uzchJ5KP+8OGHQ4gJP4r1lZ/Np4STtsVlKeL5OByzPT8Tcr",
	"07YuqG0VSZaUcyiT41ll8DevNCbU2r+J0ROtGB/buFtl1664s74G9DagHiw/o8Ew06WZIEZsO/VTSKZR",
	"LkRBcJ6mlEXDIPr1uVMlQhPvy3HYVa1d7Cy+13cVJuasxMDPtKMXW2aS6gEmg0XsfU0jMw7WlFdWM7ej",
	"gySUrfDmUnRVlYDH9QYkXWBXwaHTHROD4chRnQqiKvMJW2KaEUF0LTkR83m0DOCaSSg3U1JRpewgj8yy",
	"YI1zT54/fvTo0chEBQZfI9Zu8eoX/nOzuMen2MR+caWebAr+vcA/BPoPDdXts/l94nJ1NbFUdooZ2xra",
	"aHBB16e53WxNzVD/9YR8h5mwDKG3ks6jXdCn6m2nm6yrUtBiikmFL785e0XsrLaPBEQd1vRcoBGsfUSS",
	"no3x6Td9pq+BLEnjx9mepMWsWuksFNxM5ekzLZoioawT04PmsRg7J+SltUyGcBU7CcHU1HIFRVTf02rC",
	"SBzmP1rTfIkmv9GB8KOr0Xqe1/hIoueWoVQS8nUDuCtIa+vRTgmWa79lCjDdAdxAOxNgSJ3prNA+M2B7",
	"fbLm3JLKPlXcQ2GkffHugbMinw8VSEK2L+Z3WXxsmep9y/VeYK/0M5JO7d+O595WW1j7eg0n5Edn2M8p",
	"F5zlWJUgJXpidr9xTsMRJR3Svj01cYc2cd6SFYfDc2iHxcEaxJ43OsT1nfTRV7PNll7snxrWrs7bArRy",
	"zA6KqS8A7pxRjCtwpa8MWcWsU8hE8FLyxUYIgrgzYWFSrgFb4rfm20/O9oxZSa4ZR5uSQ6RTdqwDqVQM",
	"PcecME0WApRbYftpknpr+pxcrvm5WcO7k1diwfILtsAxbACdQYQNXO0PdebDWF3YqGn7wrR1ie3Dz61A",
	"MDvpWVW5SYcLxidlUr3me6A8FcPkw0MidIcZ4/G3kOTWGHW8hg0xwg1GsEGF13ePeEIZ8vYo3xjFzVId",
	"tiD2CWkyBy3jCTBeMe5dnGMvmjx5teDm4SkfPZLKJdVWexnFGy+BlgPvO/Cxt/Wj33WobqJ/gzZctZ9j",
	"eKubKusDDCg0aBQOyjfEHyVzJiI55QUtQ9R3omY6CmxOPrNRsZ0q6ikGZC6AzL8jbaFr5wvG0B0LbOx7",
	"ow2lupzVxQJ0Rosilf3sa/xK8Kt/FQdryOtQaSo8kGwnBx9Df27qXHBVr7bM7hscHYCCKaoUrGZlIhT1",
	"ZfgIRaACTKI02+C/qVJMw7vnIsD3fs7sw72L/bLm959np4RuQ/eZYotsPCbwtro7OpqpDzsMTf+jngb/",
	"qvlP8Wi5wwnjPUrxwG/MBRTnke7FvNsrKqR5xvhygd99LquQarTNufBK7BUcw1gG3LzElnWA9w2TgN/Q",
	"ciCFQOzvsPe09QEMJRLIB3NjUO0yr2lK9mRTg7mrbERyx6fSdwwOxRzbkOOP6Xlw+NiK9GEf3Q8tj5yN",
	"F2sYyqAn7jBnWUME+3rLXH2AvnGWlqXIR3MGN8yZ6TScS1asVi41eyKe7WYlivgsxHFQAGnGZsN5E08N",
	"UDtOfkNFLflF3qZHa5lVAtGMFcMRjW4JU/tK0YPngbFTxxNFll6HWfItK7E+0X9c/PzTZHgjox3ob6nL",
	"7Zy0jg9tTHi21SWPhRhrLxc8NsrHMvSAtR7zGqVPgyuBm/zwrbUrjk1/88PLfVq/Gjt4jwAWwtYpShV2",
	"6KdbmTTb4ZEfUUOzvZajxNSRoopu/Z+EDmVtpU0TEipijqqQ2ZKRxpQbSlW2cdqEN9zai8blUrPlfnqV",
	"gnoM9OUY4bCHjw/TyXmxl/iUqo40saOkGOwrtljqr0uRX38PtABpC16klFBb7mIFRp1VS1ahjlQJxZrC",
	"tKUZzGWaXuJwJ2OfqlwuwaU88S/je2P50OMbyDXWJ24CKCXAeFNuan1meu+6xCafIYJCAhRQ6eVWScnG",
	"RFd62ZSqBPcMiykyA+fuuAE+JewETrovt4omxREpgc69GVcKcVjOxvDGBxEbLyNFbr3awdulwl4esyg7",
	"ny3oejK+aMhZCK637xBvqWoyI/m0Avs+ZZ7PIccE7Vszyf3nEniUb2zqbYQIyzxKLMfCazosMXAMK3kD",
	"4ra0blshjMolfQQAh9JBXMPmniItiklWoQ3PTQ/JWI44sb5fn/J+yDni4gmZCtSDePHh4y5PfFMBaI8U",
	"9VE2xQNn94RsrqQmw+JeQKTr94+a3XS9Y8ZXFD2HEtL1C3kP68IvsW66cgGXNORAj21I5Lxf5/fW5VDH",
	"3IDBjeizqYPyv/n0oXaWkl27IimIJ+u0vaWy8C2OktnN3owsDfQ8zMyaR0P9QKFRFWjwjV5eCiPWZEOP",
	"Idsvd0JI6z1lY4+bnFsI6RykhCK4C0uhINPCPzvaD7Jt6LIh1wchanQMOiYZMQsYzN3/pilggFUGKebq",
	"py72OkYCkbCiBl4ZFRXYB4ptW/TCfvd5M3xNuQPsqOEk7C627B+iMdVDfXye5sTd8Idk6DjEyMo4B5l5",
	"7263wgBvp3DE9L5FnVsxIz6EwTQ9Om3WFraVtE/m/VV2tKEo4cQ1bE6tBcfXrfa7HANtJUILepTXuEMI",
	"RzU7qxTci6OA93nTTFZClNmAs/C8XxahewauWX4NmDQ0PM8wEuy99mkxk5D76H8KMSS3y41P+l9VwKF4",
	"cELIGbdP5Hw4SbvCZWdyfk9vm3+Nsxa1rW/ijMknVzz91gjrjMg78kA/zL6cT4FhmXec3A6yd/r8NR+K",
	"j7vFmiTt8rMnY20U/ZCPjpQUEZ6FIiUjXViP7wtkBqnq8phyJMqNg+EDlDhPMVGlSMWhH5IWxQyVxlQ8",
	"GQKkgR+WiyPA5aZLosSF3O3IKuo++7yZYk4kNMEchyYQdTk5LUNXQxaP7sxhljaXnAsJ8YwYdWoTCoen",
	"XpibF/8zY1pSuTkkzWcbVSnr0iCWd8ZOhrDJZiFN6GQfh2UpbjNkcVko+JNS60071b7CfX3Mpp85+TOI",
	"gjCpcmLihixpQXIhJeRxj/SbZwvVSkjISoExmam4j7k2msEKHzpyUooFEVUuCrAludIUNDRXzTlF8Qui",
	"eLckCizt4Bt62yei45FTmpvYel0zFNl21n7wm39p+th8Dk2KN7vozMYCDLxLAOVSujkM2cZ9eJFwbOKh",
	"rq11LP+eszVSEsgUE5gTLWuYEteiWwDesQIqgayYUha4QF23rCwxwQJbR7EMIYAojewBgfoc46RvGMbJ",
	"tZNtWDm7MndnyEkSc4WLOBUZ0Usp6sUyymwf4PSKu6ydWh+P8ouqMZQRX1GaKZ6RlVDaacd2pGbJTcDo",
	"/VxwLUVZtk10VvhfOO/uj3R9luf6lRDXM5pfP0BdnAsdVlpMfdaBbmxvM1M/Tf/2azuz1ft35wi37TD0",
	"1RH2aCbaYYM9x8IuS30E5rvdXHa33+Ksv7DuutoMN60gnXFCtVixPH3u/rFiZQcjXFNsLJlZ0JbBtflZ",
	"sBke//hCCwFMyEb7aAZOk3U8z4hjDS5sAxmQ+S/K9t1xyRwc6xm4TPvsxsleWT4oIXYAQEhtigBdS1s7",
	"N5bfAp8RC5tSBINOuoCOvHkw/u9usJkRjg6UhjsB1YtdDgDet2aNqc0AaeOgZ2Ltvz9oUkQeBPyH7VTe",
	"Yh5DgZUXDWlJG1rpUzwNcIR0Jv2tUYiXmB5iNjYWMdRCP1gKiEAajk5sQTUqRvHugM0pK6HIUqV0z4PN",
	"bBrp+e4hZzSfr0douX1Oa1+31oxdS3BpiayqINtexYoachOhed9mzgtYg33e9QdIYcvPTiMfFpS2Om3H",
	"FCGqrIQbaIVxulxJNYqs7AZ8XxU6kwKgQq9v10KXNgltkwA6hhyHjSyKcBuD76Rlx6La7h3ZYbZJGpnW",
	"PLOHS409gAaiG1bUtIVRta+g0jZLGgaQQFVP+8i8hjp2ml/sCG/8AGe+f0oA8ph4N4577c240qjbxrZ2",
	"RjDXaogz8HQAc5waLDiXcLYiuLct0Te8RVX0lg8bSMccgka1G7lzTPAI1d+sIUfpyGlSUDhdasAd47IM",
	"If1zgMLqG6ZLwkOwBE64iOr63lIVlKAmG6r/wU6MjRh3mvsBzvsmzvjue01wMKI66Qz3UFFkoOXDXQqf",
	"5bRuPayD46WoRoF7O7zF+uZPgFNosIGoy4Jwg2ejVWBlXHf3OU4/JbPaD1SW4taW7o113pfg/cSWHr0j",
	"ywn8LFzvPsJ66lL3dg0tLHp/sqIbIiT+YzTcv9e0ZPMN8iILvu9G1JIaonKOaRt54SK2zcTbBbepB8zb",
	"eoSfyq6bjR0zGm5jRomANte/r2AmyIpeQ7wNGFRieWyuDXNV9QytJOai72xnHwtu8T4l0ooWsVUB07lu",
	"WvzCpw43vf9n82o2nsrnXKxKmvtCza4OW5vzYAl3T1x6Cavt76r7nM6TQCgL3xCt9Bk8igMMtnsys9SL",
	"oqH6US2we4Wve6Wz7rSMkXbnTkmgLS/SRy3laODfObqpt4y4qO2uBcU1fj/NjiRzLw8tYwz4f96dGKgO",
	"Hq/AFgL/BHhvZQJKwGrt6TOxziTM1a6QHGtQn4l1A7AKJl/GcwlU2ail85+dktukFmbcqOE2qjf4asMo",
	"BcwZbxgq41WtE/oQZhjmmwhhsVsC0Tra7TckWxih9IaWP9+AlKwY2kpzgmxF3LjGjXfOuL4Jk0q4ifsD",
	"MNVoh/i2uzH0x83MtW9r79mAW6UpL6gs4uaMkxykkRbILd2ow71gwX2xyw9GIxmonZYk8oghsVtAyo1z",
	"bd/RRxUApEd0Vo1wMmFkd8LBZE1NWgz4lPow/IM6mVZ0nZViga+LB46IyzKNfkqrbgqOhnor5x2KCT+z",
	"Yn/A9omx4IdjX1ogHIdNup1b/IwEgErsL5zprfzCWlq7T8JtLLU9zh7xfNE8A7Ek1j/FqXf9Lm9U/Lbf",
	"C7Y+p4qnWIg2Gkb7vdr2/oG9x6AQl0oiNu6Prw3ZjjtJZQ+wtosMbRpqy9MPUM2jBpq7gLa++a9nDLFo",
	"mrr8DHe2DlpPhL8DBwBG841yXKQNSAgyMuPsU2Jze/6FrBJVlo+JyLWVhArnEHGQtmEcTUORA2QAEyGg",
	"SIVqW61Eb62yW/vWHR0s+7XL01fl28wSQ6atgduj7X4Rc+SSePCtiQ9fggUD0NQbALyHvm3MC6yFUCIh",
	"ryWav2/pZneNxoGs8hffn33x+MlvT774kpgGpGALUE2tgk6NwybakvFBW9Unia/sLU+nN8FnQLGI875X",
	"/ygvbIo7fZZHqybJcK/C4z5W8sS1kXo63C9od9Be4TjNA44/13alFnn0HUuh4OPvmRRlma4VEyS2hBso",
	"tVuRI8joPxVIxZQ2jLDt/WW6iTNXSzRgYjbwG5sHS/AcvM3bUQHTAyFpqYUMhSkjP8NMEc73RWBdlY5X",
	"WX/VtnU5LdHaEFEcxRihGZBKVE6NYHOSggjfkskagjXfmWbRih9FHgdma2OQU4To4vnTpHfGnR4u5mQ7",
	"t29Xx9ZpTm82MSGC+EN5AGkO+VSGs6Acwkkad8Sfhn8k0rocjWuE5X4MXpHUKra8WT/rxXyElCajQOun",
	"70iQBwIw8Fq79YY2eg4YpR2X1o+BHg/vBu+KHz827vGdj20QEt9hB3jxY+umXXgf4sD5zMm7fwxIiZby",
	"bogSWsvf9X7bs95wkURb5Aw0WoOybEn0xcLoub56EV7BD+gpvcfyUghNjD5blolH9tZmhGcqJhyjEsgb",
	"Wn56rvEtk0qfIT6geDP8BC1+RR0j2aJSHSvn6Cs6CproxfTHBIa/xqf+/wlmH5N3oRvKhRv0bjw0LdHS",
	"hqjPg5cdOLnFMW0Q2uMvycwV7akk5Ex1wxhuvQATHgSDZHMXAgxrvfeb5F0r/1XoOxD/3MclkZ8it12I",
	"TnAwNwf7M7OigfOePBspCu0RSgJ/Kc4WVzvfccncscDLYWmlokSTe6aV6tdxH7s8XAdeVbWC/jpH3/Et",
	"3Cau92ZtY/Omja4Tc3X1Vs/GJDdL13Qx3THf2lGKu9yxtMsnybRm8ejGcJAkqaqRrnel0ekEbUY5I9pb",
	"aCT7gcruS4t7MxrK//Oa2/FCDVN84e55uphPQ1CE4Kbbc3LFHxK1pF6NcH8++eLLyXQCvF6ZxTffJ9OJ",
	"+/oupZQV6+Sr2CajTy9Q1VVDuKdIRTd7PMGv9kBuk6/o04suSrNZWnf73mwYKqjumcQ5RyaPjMXenS6R",
	"zz8zEY1+EhrOiiXGJiVR2Idd2Yl+HUrvb1PYD9Qp6TDdmpU7o+1ahWc+TCcLmycN66r85grNfdo99xAM",
	"pCx0S79LJjKLmMRaW5NHU0V55UaUknHdErU98NF4XkumNxcG/962zn67TiWg+i6khHJpx4JL34m8WlwD",
	"98FqTQKpWnmh+jtBSxQ6baQBN6KmKE/IN7a2ibsN/3pv9m/w9C/PikdPH//b7C+PvniUw7Mvvnr0iH71",
	"jD7+6uljePKXL549gsfzL7+aPSmePHsye/bk2ZdffJU/ffZ49uzLr/7tnqF0A7IF1Fc6ej7539lZuRDZ",
	"2evz7NIA2+CEVuwHMHuDZrQ55khEpOZ4ucKKsnLy3P/0v/wVeZKLVTO8/3XiijlOllpX6vnp6e3t7Unc",
	"5XSBOVsyLep8eernwXSaLTXl9Xl4umSDCHFHG8cSbmpIMWi+vfnm4pKcvT4/aQhm8nzy6OTRyWNM6VgB",
	"pxWbPJ88xZ/w9Cxx308x2fepcmWETsMz1w/T3reqskWGzKdFyERq/loCLZE/mj9WoCXL/ScJtNi4/6tb",
	"uliAPMFHbfanmyenXuU4fe+S4HzY9u00Dms7fd/KHlTs6OmDtHY1OX3vq/NvH7BVh90FzEYdRgK6rdnp",
	"DOvmjW0K8eqGl4Jyhjp9jxr54O+n7rJOf0RbiT1pp14CGWhpc6CkP7ZQ+F6vzUK2D2faROPlVOfLujp9",
	"j//BQxOtyKYSP9VrfopxLKfvW4hwn3uIaP/edI9bYAZcD5yYzxWG22z7fPre/htNBOsKJDMqJyZac7/a",
	"xJqnWKN20/95w138RAmpFGW/cAXWkOYrK2143rwRDnzkvPCNLzY897qxD+hG7vDk0SM7/TP8z8TVZ+yk",
	"7Tp153li7/Od9txW8m7kvR1TfoDXvoQ2ojDC8PjTwXDObRC3Ycb20vgwnXzxKbFwzo18Q0uCLe30Tz/h",
	"JoC8YTmQS1hVQlLJyg35hYc49KjGfooCr7m45R5yI3HUqxWVGxSZV+IGFHHl+yPiJBKM7GQVFZSEGxrG",
	"K48aPvJ2UtWzkuWTqU3V/g6lNZ0SXLx9uT+Tt603g7dPxXc7z8T4XWjLw1uyho2Cc281wE6YSGbc23FP",
	"Dd14DTv5vdSWTf7JGv7JGo7IGnQt+eChjW40TLwJlcsFkNN8Cds4RP/+jK78SSVSWXoutrAPV9ZtiHtc",
	"tLlHEwM9ef52XHlg5yK13q8ClDnMJ169MbJ7o33IwKP8mccAjWiv+yzDLWny/FGCfbz7U8gALyj3J7xF",
	"AzYqgsqSgQx0QXm/9t4/+cL/N3zBVhGldl+nRENZqpgbaIHcwBrbXF5mbh37IzlDK7F2I3C3fj71to2U",
	"ntpu+b71Z1v3UstaF+I2mgWdgdbb3ddEzMdadf8+vaVMZ3MhXa5mOtcg+5010PLUlRbs/NpU2Ol9wbJB",
	"0Y/xm/rkr6fUqSSpb8j9hjr2dObUV6cWDjTyDzb858YyF1u6kPMGG9fbd4bLKZA3nik3hpvnp6f47m8p",
	"lD6dfJi+7xh14o/vAmH5CvWTSrIbLLj0bjpZZ0KyBeO0zJzlo6mYOnly8mjy4f8FAAD//zbvnmuzFAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
