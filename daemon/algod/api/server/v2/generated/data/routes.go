// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PctpLoX0HNbpUfdyjJr5xYVam9ip3kaOM4LkvJubu2b4Ihe2ZwRAIMAI5m4qv/",
	"fgsNgARJkEM9Yidb55OtIR6NRqPR6OfHWSqKUnDgWs2OP85KKmkBGiT+RdNUVFwnLDN/ZaBSyUrNBJ8d",
	"+29Eacn4ajafMfNrSfV6Np9xWkDTxvSfzyT8VjEJ2exYywrmM5WuoaBmYL0rTet6pG2yEokb4sQOcfpy",
	"djXygWaZBKX6UP7I8x1hPM2rDIiWlCuamk+KXDK9JnrNFHGdCeNEcCBiSfS61ZgsGeSZOvCL/K0CuQtW",
	"6SYfXtJVA2IiRQ59OF+IYsE4eKigBqreEKIFyWCJjdZUEzODgdU31IIooDJdk6WQe0C1QITwAq+K2fG7",
	"mQKegcTdSoFt8L9LCfA7JJrKFejZh3lscUsNMtGsiCzt1GFfgqpyrQi2xTWu2AY4Mb0OyA+V0mQBhHLy",
	"9tsX5MmTJ8/NQgqqNWSOyAZX1cwersl2nx3PMqrBf+7TGs1XQlKeJXX7t9++wPnP3AKntqJKQfywnJgv",
	"5PTl0AJ8xwgJMa5hhfvQon7TI3Iomp8XsBQSJu6JbXynmxLO/1l3JaU6XZeCcR3ZF4Jfif0c5WFB9zEe",
	"VgPQal8aTEkz6Luj5PmHj4/mj46u/u3dSfLf7s9nT64mLv9FPe4eDEQbppWUwNNdspJA8bSsKe/j462j",
	"B7UWVZ6RNd3g5tMCWb3rS0xfyzo3NK8MnbBUipN8JRShjowyWNIq18RPTCqeGzZlRnPUTpgipRQblkE2",
	"N9z3cs3SNUmpskNgO3LJ8tzQYKUgG6K1+OpGDtNViBID143wgQv68yKjWdceTMAWuUGS5kJBosWe68nf",
	"OJRnJLxQmrtKXe+yIudrIDi5+WAvW8QdNzSd5zuicV8zQhWhxF9Nc8KWZCcqcombk7ML7O9WY7BWEIM0",
	"3JzWPWoO7xD6esiIIG8hRA6UI/L8ueujjC/ZqpKgyOUa9NrdeRJUKbgCIhb/hFSbbf/Psx9fEyHJD6AU",
	"XcEbml4Q4KnIIDsgp0vChQ5Iw9ES4tD0HFqHgyt2yf9TCUMThVqVNL2I3+g5K1hkVT/QLSuqgvCqWIA0",
	"W+qvEC2IBF1JPgSQHXEPKRZ025/0XFY8xf1vpm3JcobamCpzukOEFXT71dHcgaMIzXNSAs8YXxG95YNy",
	"nJl7P3iJFBXPJog52uxpcLGqElK2ZJCRepQRSNw0++Bh/HrwNMJXAI4fZBCcepY94HDYRmjGnG7zhZR0",
	"BQHJHJCfHHPDr1pcAK8JnSx2+KmUsGGiUnWnARhx6nEJnAsNSSlhySI0dubQYRiMbeM4cOFkoFRwTRmH",
	"zDBnBFposMxqEKZgwvH3Tv8WX1AFXzwduuObrxN3fym6uz6645N2Gxsl9khGrk7z1R3YuGTV6j/hfRjO",
	"rdgqsT/3NpKtzs1ts2Q53kT/NPvn0VApZAItRPi7SbEVp7qScPyePzR/kYScacozKjPzS2F/+qHKNTtj",
	"K/NTbn96JVYsPWOrAWTWsEYfXNitsP+Y8eLsWG+j74pXQlxUZbigtPVwXezI6cuhTbZjXpcwT+rXbvjw",
	"ON/6x8h1e+htvZEDQA7irqSm4QXsJBhoabrEf7ZLpCe6lL+bf8oyN711uYyh1tCxu5JRfeDUCidlmbOU",
	"GiS+dZ/NV8MEwD4kaNPiEC/U448BiKUUJUjN7KC0LJNcpDRPlKYaR/p3CcvZ8ezfDhv9y6Htrg6DyV+Z",
	"XmfYyYisVgxKaFleY4w3RvRRI8zCMGj8hGzCsj0Umhi3m2hIiRkWnMOGcn3QPFla/KA+wO/cTA2+rbRj",
	"8d15gg0inNiGC1BWArYN7ykSoJ4gWgmiFQXSVS4W9Q/3T8qywSB+PylLiw+UHoGhYAZbprR6gMunzUkK",
	"5zl9eUC+C8dGUVzwfGcuBytqmLth6W4td4vVuiW3hmbEe4rgdgp5YLbGo8GI+XdBcfisWIvcSD17acU0",
	"/rtrG5KZ+X1S578GiYW4HSYufGg5zNk3Dv4SPG7udyinTzhO3XNATrp9b0Y2ZpQ4wdyIVkb30447gsca",
	"hZeSlhZA98XepYzjI802srDekptOZHRRmIMzHNAaQnXjs7b3PEQhQVLowPB1LtKLv1O1voMzv/Bj9Y8f",
	"TkPWQDOQZE3V+mAWkzLC49WMNuWImYb4wCeLYKqDeol3tbw9S8uopsHSHLxxscSiHvsh0wMZebv8iP+h",
	"OTGfzdk2rN8Oe0DOkYEpe5ydkSEzr337QLAzmQaohRCksA98Yl7d14LyRTN5fJ8m7dE3VqfgdsgtAndI",
	"bO/8GHwttjEYvhbb3hEQW1B3QR9mHBQjNRRqAnwvHWQC99+hj0pJd30k49hTkGwWaERXhaeBhze+maVR",
	"zp4shLwZ9+mwFU4alTOhZtSA+c47SMKmVZk4UoyorWyDzkCNlW+caXSHj2GshYUzTf8ALCgz6l1goT3Q",
	"XWNBFCXL4Q5Ifx1l+guq4Mljcvb3k2ePHv/y+NkXhiRLKVaSFmSx06DIffc2I0rvcnjQXxm+jqpcx0f/",
	"4qlXVLbHjY2jRCVTKGjZH8oqQK0IZJsR066PtTaacdU1gFMO5zkYTm7RTqxu34D2kikjYRWLO9mMIYRl",
	"zSwZcZBksJeYrru8ZppduES5k9VdPGVBSiEj+jU8YlqkIk82IBUTEWvKG9eCuBZevC27v1toySVVxMyN",
	"qt+Ko0ARoSy95dP5vh36fMsb3IxyfrveyOrcvFP2pY18r0lUpASZ6C0nGSyqVesltJSiIJRk2BHv6O9A",
	"oyhwzgo407Qof1wu7+apKHCgyJONFaDMTMS2MHK9glRw6wmx53XmRp2Cni5ivIpODwPgMHK24ynqGe/i",
	"2A4/XAvG0eihdjwNXrEGxhyyVYssb/9aHUKHneqeioBj0PEKP6Oi4yXkmt65RNedIAb7C0/aFliSmYa4",
	"W6/Yaq0DkfuNFGJ59zDGZokBih/sgyU3ffrPltciMwdNV+oOxJNmsOb0mz0NzzxdiEoTSrjIAHVMlYoL",
	"LgO+DGhERduvDmUhvbZvkAUYQkppZVZblQQtmz1e2nRMaGqpN0HUqAG7Tm2Qs63sdNZOnkug2Y4sADgR",
	"C2c8cWYdXCRFs6z2V78TmyJnqQVXKUUKSkGWOKXNXtB8O8tW9QieEHAEuJ6FKEGWVN4a2IvNXjgvYJeg",
	"E4Ei97//WT34DPBqoWm+B7HYJobe+gnsLGR9qKdNP0Zw3clDsqMSiOe55r1tGEQOGoZQeC2cDO5fF6Le",
	"Lt4eLRuQaKv6QyneT3I7AqpB/YPp/bbQVuWAa5x7+hnpx2wYp1x4oSM2WE6VTvaxZdOo9T41Kwg4YYwT",
	"48ADQskrqrS1rzKeoVrIXic4jxVQzBTDAA+K6Gbkn7103h87NfcgV5WqRXVVlaWQGrLYGjhsR+Z6Ddt6",
	"LrEMxq7fA1qQSsG+kYewFIzvkGVXYhFEdW2GcA4I/cWhst7c87soKltANIgYA+TMtwqwG7oHDQDCVINo",
	"SzhMdSin9kmaz5QWZWm4hU4qXvcbQtOZbX2if2ra9omL6ubezgQo9Epy7R3klxaz1jFsTRVxcJCCXhjZ",
	"A1UE1hDch9kcxkQxnkIyRvn4/DGtwiOw95BW5UrSDJIMcrrrD/qT/Uzs57EBcMebp6DQkFgPn/imN5Ts",
	"HSpGhhY4nooJjwS/kNQcQfPyaAjE9d4zcgY4dow5OTq6Vw+Fc0W3yI+Hy7ZbHRkRb8ON0GbHHT0gyI6j",
	"TwF4AA/10DdHBXZOmndZd4r/AuUmqOWI60+yAzW0hGb8ay1gQL/onKeD89Jh7x0OHGWbg2xsDx8ZOrID",
	"ys43VGqWshLfOt/D7s6fft0JoiY4koGmLIeMBB/sM7AM+xPrm9Id82ZPwUl6qT74PcVUZDk5UyjytIG/",
	"gB2+ud9Yp8fzwFXyDt6ykVHN/UQ5QUC9K5URwcMmsKWpzndGUNNr2JFLkEBUtSiY1taZuf3U1aJMwgGi",
	"Ov+RGZ2ByzoM+h2YYnE7w6GC5fW3Yj6zb4Jx+M47D4MWOtxboBQin6A96iEjCsEkXwhSCrPrzPlVe89a",
	"T0ktIB3TRutmff3fUy004wrIf4mKpJTjk6vSUMs0QqKggAKkmcGIYPWczuuhwRDkUIB9SeKXhw+7C3/4",
	"0O05U2QJlz4YwTTsouPhQ9TjvBFKtw7XHegKzXE7jVwfaAwxF597hXR5yn6ruxt5yk6+6QxeW1DMmVLK",
	"Ea5Z/q0ZQOdkbqesPaSRaR4HOO4kO0cwdGzduO9nrKhyqu/CogMbmidiA1KyDPZycjcxE/ybDc1/rLvt",
	"edM1HlKsKCBjVEO+I6WEFKznuhHVVD32AbE+bema8hVK6FJUK+dUZcdBDlspqwuRFe8NEZVi9JYnKymq",
	"MsZxnSOtD14w8gtQ84YKdgQ72xfDJa3nc/EqU65Cv3PBNn9nxhyy2Mxng09Mg9RN88S0yGlHYEzgvi0B",
	"K8BPM/FEvT6izggbfXyF22Ko12zuH6Mjb4aOQdmfOHDzaj4OeXqZ922+uwMpww5EJJQSFN4JoV5I2a9i",
	"GUZbuUtD7ZSGoq86t11/GTh+bwcfaILnjENSCA67aIAx4/ADfoweJ7yXBjqjhDDUtyv0t+DvgNWeZwo1",
	"3ha/uNvBCX1TuzjeweZ3x+1YTcI4M9QKQl4SStKcoc5QcKVller3nKJWIjhsEVcQ//wa1lO98E3iirGI",
	"3soN9Z5TdAOqdRVR8/USIg/zbwG8ukpVqxUo3ZFulwDvuWvFOKk40zhXYfYrsRtWgkR/jAPbsqA7sqQ5",
	"qtV+BynIotJteQ9jXZRmee5MOGYaIpbvOdUkB/Nk/YHx8y0O502gnmY46EshL2osxK+XFXBQTCVxl5Xv",
	"7Ff0JnTLXzvPQoxNtp+t0t+M3wTE7FBp0cTb/t/7/3H87iT5b5r8fpQ8/1+HHz4+vXrwsPfj46uvvvp/",
	"7Z+eXH314D/+PbZTHvZYJIaD/PSlewudvkSBt9H692D/ZBrfgvEkSmShbbtDW+Q+Rh06AnrQVofoNbzn",
	"essNIW1ozjIjiNyEHLosrncW7enoUE1rIzrqD7/Wa4qRt+AyJMJkOqzxxtd438srHvOEZigXxoTnZVlx",
	"u5Ve/LMu/d7bRizndVybTXlxTDDoaU29q5j78/GzL2bzJlip/j6bz9zXDxFKZtk2FpKWwTb2OnAHBA/G",
	"PUVKulOg49wDYY86FllrfjhsAeZZqdas/PScQmm2iHM47yjttAxbfsqtB7M5P2jU2jlduVh+eri1BMig",
	"1OtYKHxLUsBWzW4CdBwNSik2wOeEHcBB95WfmQeLc3HKgS4xJBufP2KKOF6fA0tonioCrIcLmfSUjtEP",
	"CreOW1/NZ+7yV3cuj7uBY3B156wtWP5vLci97745J4eOYap7NjrSDh3Es0Xeci5ko+WCYriZTQBiw0Pf",
	"8/f8JSwZZ+b78XueUU0PF1SxVB1WCuTXNKc8hYOVIMc+CuQl1fQ970lagzl6gvgbUlaLnKXkIpSIG/K0",
	"eRf6I7x//47mK/H+/YeeNb4vv7qpovzFTpBcMr0WlU5c1Hgi4ZLKmLVD1VHDOLJNCzE265y4sS0rdlHp",
	"bvw4z6NlqbrRg/3ll2Vulh+QoXKxcWbLiNJCelnECCgWGtzf18JdDJJe+od9pUCRXwtavmNcfyDJ++ro",
	"6AmQVjjdr+7KNzS5K2Hy834wurH7qseF23cNbLWkSUlXMaPK+/fvNNASdx/l5QIf2XlOsFsrjM+7KeNQ",
	"zQI8PoY3wMJx7ZAkXNyZ7eUzBMWXgJ9wC7GNETcaU+9N9ysI7LvxdnWCA3u7VOl1Ys52dFXKkLjfmTpx",
	"yMoIWd7+rtgKfRxdjpUFkHQN6YVLfgFFqXfzVnfv4uEETc86mLJpUWxYDgbmo0p6AaQqM+pEccp33Qhp",
	"BVp7J8u3cAG7c9HE9V8nJLodoauGDipSaiBdGmINj60bo7v5zo8IoxLL0ge6YsSTJ4vjmi58n+GDbEXe",
	"OzjEMaJoRZAOIYLKCCIs8Q+g4AYLNePdivRjyzOvjIW9+SIpUjzvJ65J83hyLj/halDta78XgDmWxKUi",
	"C2rkduHSA9ko1ICLVYquYEBCDq0CE2M9W5YEHGTfvRe96cSye6H17psoyLZxYtYcpRQwXwyp4GOm4+jl",
	"Z7KGJ6cax6x/DmGLHMWk2iPOMh0qW9YZm8ZsCLQ4AYPkjcDhwWhjJJRs1lT5zEWY4Mmf5UkywB8YVT2W",
	"S+M08FEKsjjVmTI8z+2e097r0mXU8Gk0fO6M8Gk5IQ+GkfDRLTq2HYKjAJRBDiu7cNvYE0oT4d1skIHj",
	"x+UyZxxIEnN3okqJlNnUU8014+YAIx8/JMSqgMnkEWJkHICNBlUcmLwW4dnkq+sAyV2EOvVjoyk2+Bvi",
	"wTTWAdiIPKI0LJwNmFVSzwGo85Gr76+OpyYOQxifE8PmNjQ3bM69+JpBeikdUGztJHBwJv0HQ+LsiAbe",
	"XizXWpO9im6ymlBm8kDHBboRiBdim9houqjEu9guDL1HfaIxti92MG3yjHuKLMQW3UTwarE+uHtgGYbD",
	"gxG88LdMIb1iv6Hb3AIzNu24NBWjQoUk49R5NbkMiRNTph6QYIbI5X6QD+NGAHSUHU1yWff43ftIbYsn",
	"/cu8udXmTZ4nH24SO/5DRyi6SwP462th6gwWb7oSS1RP0fZ2aCfvCETIGNEbNtE30vRNQQpywEdB0hKi",
	"kouY6c68bQBvnDPfLVBeYIoQyncPAhcaCSumNDRKdG+o/xzqSYqZyYRYDq9Ol3Jp1vdWiPqasqlvsGNr",
	"mZ98BeiDumRS6QQtENElmEbfKnxUf2uaxmWltpOOzePJsjhvwGkvYJdkLK/i9Orm/f6lmfZ1zRJVtUB+",
	"y7j1mFhg3tmo697I1Na7c3TBr+yCX9E7W++002CamomlIZf2HH+Rc9HhvGPsIEKAMeLo79ogSkcYZBBy",
	"2eeOgdxkDyeGXB6MaV97hynzY+91G/GBn0N3lB0pupZAYTC6CoZmIiOWMB2kbe3HQg6cAVqWLNt2dKF2",
	"1MEXM72WwsMnu+pgAXfXDbYHA4HeMxaOIUG185o1Ar5NwNtKK3IwCTPn7exjIUMIp2LKp4/vI6oO19qH",
	"q3Og+few+9m0xeXMruaz26lOY7h2I+7B9Zt6e6N4RtO8VaW1LCHXRDktSyk2NE+cgnmINKXYONLE5l4f",
	"/YlZXVyNef7Nyas3Dvyr+SzNgcqkFhUGV4Xtyr/MqmwKtYED4tNTmzefl9mtKBlsfp33KVRKX67B5fkN",
	"pNFeQsLG4BAcRaekXsY9hPaqnJ1txC5xxEYCZW0iadR31kLStorQDWW515t5aAe8eXBx07JaRrlCOMCt",
	"rSuBkSy5U3bTO93x09FQ1x6eFM41kom4sMm2FRG8a0JHp9td6azuBcV0glYr0mdOvCpQk5ConKVxHStf",
	"KEMc3NrOTGOCjQeEUTNixQZMsbxiwVim2ZSEIR0ggzmiyFTRnCUN7hbCFVKpOPutAsIy4Np8kngqOwcV",
	"8zc6bXv/OjWyQ38uN7DV0DfD30bGCFNpdm88BGJcwAgtdT1wX9ZPZr/QWiNlfghMEtcw+Icz9q7EEWO9",
	"ow9HzdZ5cd22uIV1T/r8zxCGTYC9v+iKf7y6nJ4Dc0SLqDCVLKX4HeLvPHweRyJdfPJQhl4uv0PoaR+W",
	"DmixmFq709SCaWYf3O4h6SbUQrWdFAaoHnc+MMthFkOvoabcbrWtadDydYsTTOhVemjHbwjGwdzzxM3p",
	"5YLGUjwaIcPAdNIYgFu6dC2I7+xxr2p3fzs7CWzJdVtmo5hLkE0QWj8jyg0FBjvtZFGhkQyQakOZYG7t",
	"f7kSkWEqfkm5LY1h+tmj5HorsMov0+tSSMxBoOJq/wxSVtA8LjlkaV/Fm7EVs1UfKgVBWQE3kK2oY6nI",
	"lWaog1gcak6X5Gge1DZxu5GxDVNskQO2eGRbLKhCTl4rououZnnA9Vph88cTmq8rnknI9FpZxCpBaqEO",
	"nze18WoB+hKAkyNs9+g5uY9mO8U28MBg0d3Ps+NHz1Hpav84il0ArmrHGDfJkJ38w7GTOB2j3dKOYRi3",
	"G/UgGq5ty3YNM66R02S7TjlL2NLxuv1nqaCcriDuKVLsgcn2xd1ERVoHLzyzNWeUlmJHmI7PD5oa/jTg",
	"fW7YnwWDpKIomC6ccUeJwtBTUzPATuqHswVsXLpXD5f/iDbS0puIOo/IT6s0tfdbbNVoyX5NC2ijdU6o",
	"TTyRs8Z7wSehJqc+rw3mv63T3lrcmLnM0lHMQWeGJSkl4xofFpVeJl+SdE0lTQ37OxgCN1l88TSS87ed",
	"e5JfD/BPjncJCuQmjno5QPZehnB9yX0ueFIYjpI9aKI9glM5aMyNm+2GbIfjQ08VyswoySC5VS1yowGn",
	"vhXh8ZEBb0mK9XquRY/XXtknp8xKxsmDVmaHfnr7ykkZhZCxZHXNcXcShwQtGWzQdy++SWbMW+6FzCft",
	"wm2g/7yWBy9yBmKZP8uxh8DXIvI69Xmoa02681WPaAeGjqn5YMhg4Yaak3bO309v9PPK577xyXzxsOIf",
	"XWA/85Yikv0KBjYxyEce3c6s/h7Yvyn5WmynbmrnhPiN/ROgJoqSiuXZz01UZifdu6Q8XUftWQvT8Zem",
	"MFW9OHs/RXPCrSnnkEeHs7LgL15mjEi1/xRT5ykYn9i2m4HeLrezuAbwNpgeKD+hQS/TuZkgxGo74K12",
	"qM5XIiM4T5OArOGe/coFQX7p3ypQOhY8hB+sUxfqLc1716Y3JsAzfC0ekO9s7dk1kFZ2GXyl+TQCPrWs",
	"VahXZS5oNsf0BuffnLwidlbbx5ZXsemVV/hIaa+io68KcitOcw/2lVLioQvTxxn3pTarVjqpsyHHgkNN",
	"iyZfM+vo8PH5EmLngLwMqkjaOFIzhKGHJZOFeXHVo1nZBWnC/Edrmq7xSdZiqcMkPz0vuKdKFdTiq2vq",
	"1AkH8dwZuF1qcJsZfE6EeTdfMmVLjsIG2vGodXC2Uwn4+NT28mTFuaWUqOwxljzgJmj3wFlHDa/mj0LW",
	"Qfw1BXKbVv+6adLPsFc0/1E353qvCJ+NbqxrpfhS0inlgrMUsw/FrmZXm3SKDWxCoqauktUfcXdCI4cr",
	"mum9dpNzWBzM/e4ZoUNcXwkffDWbaqnD/qmxCOaaarICrRxng2zuCxY4PSDjClwCSaxkG/BJIVt2ReSQ",
	"UVN1Ups0rklGGBYz8LD71nx77Z796C9+wTgK+A5tzjXdauqwdKI2rwKmyUqAcutpxward6bPAYbJZrD9",
	"cOBLLeIY1ixnlm1t0P2hTrxF2lmATdsXpq3LnlP/3PJAtpOelKWbdLicRVQe0Fs+iOCIZTHxpp0AufX4",
	"4Wgj5DbqSoL3qSE02KAhGkq8h3uEUZd26JQNMkKrpShsQawLVzSDAeMRMF4xDk0h0MgFkUavBNwYPK8D",
	"/VQqqbYi4CSedg40R+tzjKEp7UwPtx2qmzvIoATX6OcY3samKsUA46gbNIIb5bu6/qih7kCYeIGFjx0i",
	"+zUmUKpyQlSGEQWdqhMxxmEYt69r074A+segLxPZ7lpSe3KucxMNBYkuqmwFOqFZFsvn+TV+JfiVZBVK",
	"DrCFtKrzPpYlSTEnSjtJTJ/a3ESp4KoqRubyDW45XVDGJUINYSkZv8MYhLLY4b+xpIfDO+OcMK7tBug9",
	"LlyVh2vKze2RelKvoelEsVUyHRN4p9weHc3UNyP0pv+dUnouVm1APnFqiDEuF+5RjL99Yy6OMHNCL5On",
	"vVrqxAbodCd88T18NtYhuW2uhFdZL7UnGnvq4l7jCojhMl1zvPwGXG+DhBjU3q/WejjkgJsO+otT7SLX",
	"NCWjLGgwGsh679i4H4Qirjkd8tixDjvmc6/3NMmwJ2freFa8AKHeFawP0Pfez5SUlDnTeMMs+ph1HunD",
	"6sKxQ9dscHcRzs97UGP3/WbIJ5soxlc5EPzeLeNzAS6cva5sb9fqvZL8k9D+6grL2vFqr/jo+vveCTjV",
	"51WDDiptz13KeLtM9yb//mfrw0aAa7n7E6hwe5veK4LUl3ateqppQupsw5OyD7duxXg9o+H8R03OI6Sn",
	"UijWZLiOFTqa6Ot2jrWKgvxN/bG8o8kGUo1pzRsDugS4TjYnM1lQVvBfeZAG3o61S6BLfzSW86ify3zP",
	"hdYLSwpC62we6IPpGX5OajcpZEqYF3YF3FX2awccTHZ7Xi4h1WyzJwzsH2vgQYjR3CshbIXeICqM1W60",
	"mEXk+iq2BqCxKK1ReIJsfrcGZygI5AJ29xRpUUM0MfXc3ys3SSCBGEDukBgSESrmhmC1ps4yzFRNGYgF",
	"7/Zju0OTimuwpk0Q1HjDuTxJmhu3CXQcmTJeVGPSXKbrtcJ/0SN0KFKsn5N/WNh+iSUQVF1vziegCJ+k",
	"5LSfpu/SJbDAoL3aUOBTWYDyv/kIXTtLzi4grLqDZplLKjPfIqpn8CqMZOQ+6oV3+XzyXaCX9cyscdLs",
	"B/REEj+hK26aCyN/JUP+zG2/yLBcP3p/2ETY6PFp4FqCdNXJUNjLhYJEC+/UOQbHGCpcafmbIEENJlu0",
	"wA2mQHnb5HjBpLMUU55Q59kSLpBIKKiBTgaZWIbnHEP2C/vdR7D4pKN71Sk1ve5Pv+7dc5nqITGk+iVx",
	"t+X+yJibaFYY57Y6rIqlZeEGlaHqv5Qiq1J7QYcHo9Y+TU56NMJKokqJtL/KjkAchBdewO7QSvw+b73f",
	"wRBoKzlZ0INw/s4m36muScXgXt0JeJ9TTTOflULkyYBm/7SfS6ZL8RcsvYCMmJvCu7EN1AAh91GhXJtu",
	"L9c7nzulLIFD9uCAkBNuHYe9FbedzLgzOb+nx+bf4qxZZdM7OQ3SwXse98DExEvyltzMDzPOwxQYVnfL",
	"qewgezKVbAfy2Eh6GamIczD1Cdq3q3arlDREZaGIySRNAY49TiG1P0hTA6HxCelJBzlb6iQXqyRnBRvK",
	"zOLc4MkypytLhaabE7JNP4J5hlZElClWtLO6+mhtjLCwnk98hVlQUDcZeezkubhsc2ef87Ppb7Z5AYFX",
	"C1Xu5t6RNc1IKqSENOwRh2isWsd550jZduiZ4Ka9dkkOt2Xdyhx79cMBmBNIpTd8RMUWqTjSXle3Zs1Q",
	"BSktCpb2h2uh5i/h3DDokrCnnkpkffUxdOVefKDYAK6ilsJxw5ytjbWYap6r0+hG9ymasjXZa7BrwTDJ",
	"bHddMJZYay6hESSf1vLjvFUKlHWq6fgUZ5bGU2rfj2sgZuxKggtcskWxOtU8SqrX/j4xzfuvPPNiAIVR",
	"RbYiBFVWJ+F1I64iV/eiFmWSwwZadkwXTVWlKSjFNhBW87KdSQZQoqawK7/GDHThRdcRatzak8DEMwW7",
	"USnHItbuFNkjwkQFri1P7DFRU4+SgWjDsoq28KduUR9pqDRShA17WCdyimszifjixljEXpM60nz0XPK4",
	"RT0M5qvVEzhbVqsxLRE2J1uV9JIPi/MRDVBt5r39OggORlQnuHawQJesd+WmT7lByhgjjF5Ns6jMocDX",
	"pAzzYFhxjfgyahGRyyqdmIoMwFRzntFpDBqnpKBZQXckY8slSKtWV5ryjMosbM44SUFqyswbYxdRPxV0",
	"i/IlksVA0RQb+IkSpKUewfH2JwW9iCzt+tpbD4Riv8M4DJirwemftECQ7mD+SZKu2S9ZwXyvsGvuF2rE",
	"Ys9iY2Iv6sjsVuQ793wZCJzv0+fNUmRNYrd9i3XkRgqKqo3bVcIMek1ojrSOD6iH9Zdaly5/aC67aeXd",
	"fIc94IXmtqDAm9d8OHA+c/zMDzVSgqV8GKKE1vL3WfDcAhvpINgiR7pag81nan2v2/sSmGfVi9rqOVSL",
	"sGscxXR5gmMK0b5R1Z4mrEQSEo45xXJD809vGMU8iieID1clPr7Q0LIWItmiUt3Mif0VnTR3YEW7u6n5",
	"GzTk/gPMHkVfkm4oJ3bUorj3+0BeSHOrdVj6Skwb4OQSx7QuT4++IAsXgFtKSJnqijOXvkhCbUjCmkEu",
	"cGCr91iu9q3zZ6FvQcZL/zogr5uE6/guX/EGwuaIfmamMnByo1Qeo74eWUTwF+NRYSasPdfFRcsXyhaw",
	"6Dj5Cwl37BMVeDdf0yeqn+Nr6vKs34+5dCoF/XVOvq1buI1c1M3apjr09ZE7lpV7ih9ePNm+6Y6OgBYh",
	"WKmCIKjk10e/EglLLEUnyMOHOMHDh3PX9NfH7c/mOD98GH08fDIXQIsjN4abN0YxPw8FhdnAp4H4w85+",
	"VCzP9hFGK5q0KeaI8ZK/uHjyz1JO8hfrqdE/qq6k13Wcj7ubgIiJrLU1eTBVECc6IUTUdYsEhKIVJK0k",
	"0ztMc+ff/OyXqLPid7UvkPMlq9907u7T4gLqRImN51Cl/O36naA53kf2qcnNLSTyA/LNlhZlDu6gfHVv",
	"8Td48uXT7OjJo78tvjx6dpTC02fPj47o86f00fMnj+Dxl8+eHsGj5RfPF4+zx08fL54+fvrFs+fpk6eP",
	"Fk+/eP63e4YPGZAtoDOfVGX2f7DmanLy5jQ5N8A2OKEl+x52trybIWNfOI6meBKhoCyfHfuf/rc/YQep",
	"KJrh/a8zl7Nhtta6VMeHh5eXlwdhl8MVugokWlTp+tDP06ssd/LmtLaxWM0N7qgNqfQaOU8KJ/jt7Tdn",
	"5+TkzelBUPf6eHZ0cHTwCMskl8BpyWbHsyf4E56eNe77oSO22fHHq/nscA00R88680cBWrLUf5JAs537",
	"v7qkqxXIA1dNz/y0eXzoxYrDj85l4mrs22FYmOLwY8uzJNvTExPXH370+djGW7cSnjmPmqDDRCjGmh0u",
	"MM3D1KaggsbDS8HHhjr8iOLy4O+HLvY9/hGfLfY8HHr3q3jLFpY+6q2BtdMjpTpdV+XhR/wP0mcAlo00",
	"CcCdrWJpIL8D7cPEbQ/nR107UNd0fprZ5j2/Xpdp0aaePn43rfIO+OnMqzEDxVw6TuQY5jg0B9qHlDbs",
	"GlUpQZrksYRiV/NIkeolW6G2xWckbFWKdIXimCL/efbjayIkce/jNzS9qI1V5HRp03hJsWEYfJoFEcum",
	"Z72c3yqQu2Y97uoMF+BL+zirV6FWZTv+rRbLP2COJAQUGcbjo6M7K6/Z29krax+qh/Nw3WbEHn994W/N",
	"FhkaPvn06NGdra0dVnPrhXWH663qlKNXq7kFiL3lcEFP/7ILeoGvaUPxS8YzWxtJUzzT9oDi+r78y65P",
	"s8J7z3AsMwcKhYFnd3jAPj0RGpmc5gRb2tU8+cuu5gzkhqVAzqEohaSS5TvyE6/zSAS5I/vX3E/8gotL",
	"7hFhhO6qKKjcuSuQki6r8teAvQ6DSr9G2qMrhc49WK1jNp+5IHHYliBZARzzT13VN/GmEBn4G14slzYh",
	"89jnw4/23+BCbw1e/2qZ5iGmSdv1f95xFzGeQ8z/+ieuwGpyfaqYHU+H7n5sfLbj6dv6Qu5dRMgE/rgD",
	"06eJGl5kTeig+wffHNNY/bNPiYVPe84/2cF8C4XYgCJOvAuI0whr5jGEej20XzY0fDB4QD+gJiEuBDsD",
	"R38mb9xpBu9JxHvOxPRdaOtqRtyvJ8G5J17CDj+l5ntdU70Tn2mnuhfboNm/GMG/GMEdMgJdST54RIP7",
	"C2OIoLQO0ySl6RrG+EH/tgwfzKWI+eKejTALl5ZqiFectXnFn/rZ/OFPcb+/oNyf59aOWzd2KnMGsqYC",
	"yvuZwv7FBf7HcAGb8tCppuZEQ56r8OxrgWffeie40FBuvUYm8oFuRfDYz4cf2xXpWjpCta50Ji6Dvmhj",
	"tg4SfdVhXaO59ffhJWU6WQrpwkKxYkC/swaaH7qEZ51fmxwjvS+YOCX4MXSqjP56WBdkiX7s6m9jX53+",
	"cqCR93DynxtbTmgbQQ5ZW0XefTD8CdN9O+bZqPqPDw8x1GotlD6cXc0/dswA4ccPNUn4PLCzUrINppX5",
	"cPX/AwAA///U1osD8s0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
