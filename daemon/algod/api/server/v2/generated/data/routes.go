// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"dx/+bwAAAP//oCDbo8rnAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
