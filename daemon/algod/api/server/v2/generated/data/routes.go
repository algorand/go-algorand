// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
