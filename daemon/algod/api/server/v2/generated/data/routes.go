// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
