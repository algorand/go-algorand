// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
