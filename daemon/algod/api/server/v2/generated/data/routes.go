// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//mHsAobH1AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
