// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
