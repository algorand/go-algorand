// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"kvC52GaVZFcY2v3h0/8PAAD//w9yI6wKzgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
