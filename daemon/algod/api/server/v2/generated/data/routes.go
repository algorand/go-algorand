// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
