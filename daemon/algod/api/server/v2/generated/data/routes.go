// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
