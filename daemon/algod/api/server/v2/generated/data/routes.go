// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
