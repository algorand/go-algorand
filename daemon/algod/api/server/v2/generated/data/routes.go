// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
