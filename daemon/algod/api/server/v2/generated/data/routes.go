// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
