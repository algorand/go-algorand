// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
