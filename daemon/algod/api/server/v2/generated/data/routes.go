// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"H1rpAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
