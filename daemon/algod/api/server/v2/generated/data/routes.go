// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PctpLoX0HNbpUfdyjJr5xYVam9ip3kaOM4LkvJubu2b4Ihe2ZwRAIMAI5m4qv/",
	"fgsNgARJkEM9Yidb55OtIR6NRqPRb3ycpaIoBQeu1ez446ykkhagQeJfNE1FxXXCMvNXBiqVrNRM8Nmx",
	"/0aUloyvZvMZM7+WVK9n8xmnBTRtTP/5TMJvFZOQzY61rGA+U+kaCmoG1rvStK5H2iYrkbghTuwQpy9n",
	"VyMfaJZJUKoP5Y883xHG07zKgGhJuaKp+aTIJdNrotdMEdeZME4EByKWRK9bjcmSQZ6pA7/I3yqQu2CV",
	"bvLhJV01ICZS5NCH84UoFoyDhwpqoOoNIVqQDJbYaE01MTMYWH1DLYgCKtM1WQq5B1QLRAgv8KqYHb+b",
	"KeAZSNytFNgG/7uUAL9DoqlcgZ59mMcWt9QgE82KyNJOHfYlqCrXimBbXOOKbYAT0+uA/FApTRZAKCdv",
	"v31Bnjx58twspKBaQ+aIbHBVzezhmmz32fEsoxr85z6t0XwlJOVZUrd/++0LnP/MLXBqK6oUxA/LiflC",
	"Tl8OLcB3jJAQ4xpWuA8t6jc9Ioei+XkBSyFh4p7Yxne6KeH8n3VXUqrTdSkY15F9IfiV2M9RHhZ0H+Nh",
	"NQCt9qXBlDSDvjtKnn/4+Gj+6Ojq396dJP/t/nz25Gri8l/U4+7BQLRhWkkJPN0lKwkUT8ua8j4+3jp6",
	"UGtR5RlZ0w1uPi2Q1bu+xPS1rHND88rQCUulOMlXQhHqyCiDJa1yTfzEpOK5YVNmNEfthClSSrFhGWRz",
	"w30v1yxdk5QqOwS2I5cszw0NVgqyIVqLr27kMF2FKDFw3QgfuKA/LzKade3BBGyRGyRpLhQkWuy5nvyN",
	"Q3lGwguluavU9S4rcr4GgpObD/ayRdxxQ9N5viMa9zUjVBFK/NU0J2xJdqIil7g5ObvA/m41BmsFMUjD",
	"zWndo+bwDqGvh4wI8hZC5EA5Is+fuz7K+JKtKgmKXK5Br92dJ0GVgisgYvFPSLXZ9v88+/E1EZL8AErR",
	"Fbyh6QUBnooMsgNyuiRc6IA0HC0hDk3PoXU4uGKX/D+VMDRRqFVJ04v4jZ6zgkVW9QPdsqIqCK+KBUiz",
	"pf4K0YJI0JXkQwDZEfeQYkG3/UnPZcVT3P9m2pYsZ6iNqTKnO0RYQbdfHc0dOIrQPCcl8IzxFdFbPijH",
	"mbn3g5dIUfFsgpijzZ4GF6sqIWVLBhmpRxmBxE2zDx7GrwdPI3wF4PhBBsGpZ9kDDodthGbM6TZfSElX",
	"EJDMAfnJMTf8qsUF8JrQyWKHn0oJGyYqVXcagBGnHpfAudCQlBKWLEJjZw4dhsHYNo4DF04GSgXXlHHI",
	"DHNGoIUGy6wGYQomHNd3+rf4gir44unQHd98nbj7S9Hd9dEdn7Tb2CixRzJydZqv7sDGJatW/wn6YTi3",
	"YqvE/tzbSLY6N7fNkuV4E/3T7J9HQ6WQCbQQ4e8mxVac6krC8Xv+0PxFEnKmKc+ozMwvhf3phyrX7Iyt",
	"zE+5/emVWLH0jK0GkFnDGlW4sFth/zHjxdmx3kb1ildCXFRluKC0pbguduT05dAm2zGvS5gntbYbKh7n",
	"W6+MXLeH3tYbOQDkIO5KahpewE6CgZamS/xnu0R6okv5u/mnLHPTW5fLGGoNHbsrGc0HzqxwUpY5S6lB",
	"4lv32Xw1TACsIkGbFod4oR5/DEAspShBamYHpWWZ5CKleaI01TjSv0tYzo5n/3bY2F8ObXd1GEz+yvQ6",
	"w05GZLViUELL8hpjvDGijxphFoZB4ydkE5btodDEuN1EQ0rMsOAcNpTrg0ZlafGD+gC/czM1+LbSjsV3",
	"RwUbRDixDRegrARsG95TJEA9QbQSRCsKpKtcLOof7p+UZYNB/H5SlhYfKD0CQ8EMtkxp9QCXT5uTFM5z",
	"+vKAfBeOjaK44PnOXA5W1DB3w9LdWu4Wq21Lbg3NiPcUwe0U8sBsjUeDEfPvguJQrViL3Eg9e2nFNP67",
	"axuSmfl9Uue/BomFuB0mLlS0HOasjoO/BMrN/Q7l9AnHmXsOyEm3783IxowSJ5gb0croftpxR/BYo/BS",
	"0tIC6L7Yu5RxVNJsIwvrLbnpREYXhTk4wwGtIVQ3Pmt7z0MUEiSFDgxf5yK9+DtV6zs48ws/Vv/44TRk",
	"DTQDSdZUrQ9mMSkjPF7NaFOOmGmICj5ZBFMd1Eu8q+XtWVpGNQ2W5uCNiyUW9dgPmR7IiO7yI/6H5sR8",
	"NmfbsH477AE5Rwam7HF2TobMaPtWQbAzmQZohRCksAo+MVr3taB80Uwe36dJe/SNtSm4HXKLwB0S2zs/",
	"Bl+LbQyGr8W2dwTEFtRd0IcZB8VIDYWaAN9LB5nA/Xfoo1LSXR/JOPYUJJsFGtFV4Wng4Y1vZmmMsycL",
	"IW/GfTpshZPG5EyoGTVgvvMOkrBpVSaOFCNmK9ugM1Dj5RtnGt3hYxhrYeFM0z8AC8qMehdYaA9011gQ",
	"RclyuAPSX0eZ/oIqePKYnP395Nmjx788fvaFIclSipWkBVnsNChy3+lmROldDg/6K0PtqMp1fPQvnnpD",
	"ZXvc2DhKVDKFgpb9oawB1IpAthkx7fpYa6MZV10DOOVwnoPh5BbtxNr2DWgvmTISVrG4k80YQljWzJIR",
	"B0kGe4npustrptmFS5Q7Wd2FKgtSChmxr+ER0yIVebIBqZiIeFPeuBbEtfDibdn93UJLLqkiZm40/VYc",
	"BYoIZektn8737dDnW97gZpTz2/VGVufmnbIvbeR7S6IiJchEbznJYFGtWprQUoqCUJJhR7yjvwONosA5",
	"K+BM06L8cbm8G1VR4EARlY0VoMxMxLYwcr2CVHAbCbFHO3OjTkFPFzHeRKeHAXAYOdvxFO2Md3FshxXX",
	"gnF0eqgdTwMt1sCYQ7ZqkeXttdUhdNip7qkIOAYdr/AzGjpeQq7pnUt03QlisL/wpG2BJZlpiLv1iq3W",
	"OhC530ghlncPY2yWGKD4wSosuenTV1tei8wcNF2pOxBPmsGa02/2NDzzdCEqTSjhIgO0MVUqLrgMxDKg",
	"ExV9vzqUhfTa6iALMISU0sqstioJejZ7vLTpmNDUUm+CqFEDfp3aIWdb2emsnzyXQLMdWQBwIhbOeeLc",
	"OrhIim5Z7a9+JzZFzlILrlKKFJSCLHFGm72g+XaWreoRPCHgCHA9C1GCLKm8NbAXm71wXsAuwSACRe5/",
	"/7N68Bng1ULTfA9isU0MvbUK7DxkfainTT9GcN3JQ7KjEojnuUbfNgwiBw1DKLwWTgb3rwtRbxdvj5YN",
	"SPRV/aEU7ye5HQHVoP7B9H5baKtyIDTOqX5G+jEbxikXXuiIDZZTpZN9bNk0aumnZgUBJ4xxYhx4QCh5",
	"RZW2/lXGMzQL2esE57ECipliGOBBEd2M/LOXzvtjp+Ye5KpStaiuqrIUUkMWWwOH7chcr2FbzyWWwdi1",
	"PqAFqRTsG3kIS8H4Dll2JRZBVNduCBeA0F8cGuvNPb+LorIFRIOIMUDOfKsAu2F40AAgTDWItoTDVIdy",
	"6pik+UxpUZaGW+ik4nW/ITSd2dYn+qembZ+4qG7u7UyAwqgk195BfmkxawPD1lQRBwcp6IWRPdBEYB3B",
	"fZjNYUwU4ykkY5SP6o9pFR6BvYe0KleSZpBkkNNdf9Cf7GdiP48NgDveqIJCQ2IjfOKb3lCyD6gYGVrg",
	"eComPBL8QlJzBI3m0RCI671n5Axw7BhzcnR0rx4K54pukR8Pl223OjIi3oYboc2OO3pAkB1HnwLwAB7q",
	"oW+OCuycNHpZd4r/AuUmqOWI60+yAzW0hGb8ay1gwL7ogqeD89Jh7x0OHGWbg2xsDx8ZOrIDxs43VGqW",
	"shJ1ne9hd+eqX3eCqAuOZKApyyEjwQerBpZhf2JjU7pj3kwVnGSX6oPfM0xFlpMzhSJPG/gL2KHO/cYG",
	"PZ4HoZJ3oMtGRjX3E+UEAfWhVEYED5vAlqY63xlBTa9hRy5BAlHVomBa22DmtqqrRZmEA0Rt/iMzOgeX",
	"DRj0OzDF43aGQwXL62/FfGZ1gnH4zjuKQQsdThcohcgnWI96yIhCMCkWgpTC7DpzcdU+stZTUgtIx7TR",
	"u1lf//dUC824AvJfoiIp5ahyVRpqmUZIFBRQgDQzGBGsntNFPTQYghwKsJokfnn4sLvwhw/dnjNFlnDp",
	"kxFMwy46Hj5EO84boXTrcN2BrdAct9PI9YHOEHPxOS2ky1P2e93dyFN28k1n8NqDYs6UUo5wzfJvzQA6",
	"J3M7Ze0hjUyLOMBxJ/k5gqFj68Z9P2NFlVN9Fx4d2NA8ERuQkmWwl5O7iZng32xo/mPdbY9O10RIsaKA",
	"jFEN+Y6UElKwketGVFP12AfExrSla8pXKKFLUa1cUJUdBzlspawtRFa8N0RUitFbnqykqMoYx3WBtD55",
	"wcgvQI0OFewIdrYawyWt53P5KlOuQr9zwTZ/Z8Yc8tjMZ4MqpkHqplExLXLaGRgTuG9LwArw00w80a6P",
	"qDPCRh9f4bYY6jWb+8fYyJuhY1D2Jw7CvJqPQ5FeRr/Nd3cgZdiBiIRSgsI7IbQLKftVLMNsK3dpqJ3S",
	"UPRN57brLwPH7+2ggiZ4zjgkheCwiyYYMw4/4MfoccJ7aaAzSghDfbtCfwv+DljteaZQ423xi7sdnNA3",
	"dYjjHWx+d9yO1yTMM0OrIOQloSTNGdoMBVdaVql+zylaJYLDFgkF8erXsJ3qhW8SN4xF7FZuqPecYhhQ",
	"bauIuq+XEFHMvwXw5ipVrVagdEe6XQK8564V46TiTONchdmvxG5YCRLjMQ5sy4LuyJLmaFb7HaQgi0q3",
	"5T3MdVGa5blz4ZhpiFi+51STHIzK+gPj51sczrtAPc1w0JdCXtRYiF8vK+CgmEriISvf2a8YTeiWv3aR",
	"hZibbD9bo78Zv0mI2aHRosm3/b/3/+P43Uny3zT5/Sh5/r8OP3x8evXgYe/Hx1dfffX/2j89ufrqwX/8",
	"e2ynPOyxTAwH+elLpwudvkSBt7H692D/ZBbfgvEkSmShb7tDW+Q+Zh06AnrQNofoNbznessNIW1ozjIj",
	"iNyEHLosrncW7enoUE1rIzrmD7/Wa4qRt+AyJMJkOqzxxtd4P8ornvOEbiiXxoTnZVlxu5Ve/LMh/T7a",
	"RizndV6bLXlxTDDpaU19qJj78/GzL2bzJlmp/j6bz9zXDxFKZtk2lpKWwTamHbgDggfjniIl3SnQce6B",
	"sEcDi6w3Pxy2AKNWqjUrPz2nUJot4hzOB0o7K8OWn3IbwWzODzq1ds5WLpafHm4tATIo9TqWCt+SFLBV",
	"s5sAnUCDUooN8DlhB3DQ1fIzo7C4EKcc6BJTslH9EVPE8focWELzVBFgPVzIJFU6Rj8o3DpufTWfuctf",
	"3bk87gaOwdWds/Zg+b+1IPe+++acHDqGqe7Z7Eg7dJDPFtHlXMpGKwTFcDNbAMSmh77n7/lLWDLOzPfj",
	"9zyjmh4uqGKpOqwUyK9pTnkKBytBjn0WyEuq6Xvek7QGa/QE+TekrBY5S8lFKBE35GnrLvRHeP/+Hc1X",
	"4v37Dz1vfF9+dVNF+YudILlkei0qnbis8UTCJZUxb4eqs4ZxZFsWYmzWOXFjW1bsstLd+HGeR8tSdbMH",
	"+8svy9wsPyBD5XLjzJYRpYX0sogRUCw0uL+vhbsYJL30in2lQJFfC1q+Y1x/IMn76ujoCZBWOt2v7so3",
	"NLkrYbJ6P5jd2NXqceFWr4GtljQp6SrmVHn//p0GWuLuo7xcoJKd5wS7tdL4fJgyDtUswONjeAMsHNdO",
	"ScLFndlevkJQfAn4CbcQ2xhxo3H13nS/gsS+G29XJzmwt0uVXifmbEdXpQyJ+52pC4esjJDl/e+KrTDG",
	"0dVYWQBJ15BeuOIXUJR6N2919yEeTtD0rIMpWxbFpuVgYj6apBdAqjKjThSnfNfNkFagtQ+yfAsXsDsX",
	"TV7/dVKi2xm6auigIqUG0qUh1vDYujG6m+/iiDArsSx9oitmPHmyOK7pwvcZPshW5L2DQxwjilYG6RAi",
	"qIwgwhL/AApusFAz3q1IP7Y8o2Us7M0XKZHieT9xTRrlyYX8hKtBs6/9XgDWWBKXiiyokduFKw9ks1AD",
	"LlYpuoIBCTn0CkzM9Wx5EnCQffde9KYTy+6F1rtvoiDbxolZc5RSwHwxpILKTCfQy89kHU/ONI5V/xzC",
	"FjmKSXVEnGU6VLa8M7aM2RBocQIGyRuBw4PRxkgo2ayp8pWLsMCTP8uTZIA/MKt6rJbGaRCjFFRxqitl",
	"eJ7bPac97dJV1PBlNHztjFC1nFAHw0j4GBYd2w7BUQDKIIeVXbht7AmlyfBuNsjA8eNymTMOJImFO1Gl",
	"RMps6anmmnFzgJGPHxJiTcBk8ggxMg7ARocqDkxei/Bs8tV1gOQuQ536sdEVG/wN8WQaGwBsRB5RGhbO",
	"BtwqqecA1MXI1fdXJ1IThyGMz4lhcxuaGzbnNL5mkF5JBxRbOwUcnEv/wZA4O2KBtxfLtdZkr6KbrCaU",
	"mTzQcYFuBOKF2CY2my4q8S62C0Pv0ZhozO2LHUxbPOOeIguxxTARvFpsDO4eWIbh8GAEGv6WKaRX7Dd0",
	"m1tgxqYdl6ZiVKiQZJw5ryaXIXFiytQDEswQudwP6mHcCICOsaMpLuuU371Kals86V/mza02b+o8+XST",
	"2PEfOkLRXRrAX98KU1eweNOVWKJ2ina0Q7t4RyBCxojesIm+k6bvClKQAyoFSUuISi5irjuj2wDeOGe+",
	"W2C8wBIhlO8eBCE0ElZMaWiM6N5R/znMkxQrkwmxHF6dLuXSrO+tEPU1ZUvfYMfWMj/5CjAGdcmk0gl6",
	"IKJLMI2+VahUf2uaxmWldpCOrePJsjhvwGkvYJdkLK/i9Orm/f6lmfZ1zRJVtUB+y7iNmFhg3dlo6N7I",
	"1Da6c3TBr+yCX9E7W++002CamomlIZf2HH+Rc9HhvGPsIEKAMeLo79ogSkcYZJBy2eeOgdxkDyemXB6M",
	"WV97hynzY+8NG/GJn0N3lB0pupbAYDC6CoZuIiOWMB2Ube3nQg6cAVqWLNt2bKF21EGNmV7L4OGLXXWw",
	"gLvrBtuDgcDuGUvHkKDadc0aAd8W4G2VFTmYhJnzdvWxkCGEUzHly8f3EVWna+3D1TnQ/HvY/Wza4nJm",
	"V/PZ7UynMVy7Effg+k29vVE8o2vemtJanpBropyWpRQbmifOwDxEmlJsHGlic2+P/sSsLm7GPP/m5NUb",
	"B/7VfJbmQGVSiwqDq8J25V9mVbaE2sAB8eWpjc7nZXYrSgabX9d9Co3Sl2twdX4DabRXkLBxOARH0Rmp",
	"l/EIob0mZ+cbsUsc8ZFAWbtIGvOd9ZC0vSJ0Q1nu7WYe2oFoHlzctKqWUa4QDnBr70rgJEvulN30Tnf8",
	"dDTUtYcnhXONVCIubLFtRQTvutAx6HZXOq97QbGcoLWK9JkTrwq0JCQqZ2ncxsoXyhAHt74z05hg4wFh",
	"1IxYsQFXLK9YMJZpNqVgSAfIYI4oMlW0ZkmDu4VwD6lUnP1WAWEZcG0+STyVnYOK9Rudtb1/nRrZoT+X",
	"G9ha6JvhbyNjhKU0uzceAjEuYISeuh64L2uV2S+0tkiZHwKXxDUc/uGMvStxxFnv6MNRsw1eXLc9buG7",
	"J33+ZwjDFsDe/+iKV15dTc+BOaKPqDCVLKX4HeJ6HqrHkUwXXzyUYZTL7xBG2odPB7RYTG3dad6CaWYf",
	"3O4h6Sa0QrWDFAaoHnc+cMthFUNvoabcbrV906AV6xYnmDCq9NCO3xCMg7kXiZvTywWNlXg0QoaB6aRx",
	"ALds6VoQ39njXtXh/nZ2EviS67bMZjGXIJsktH5FlBsKDHbayaJCIxkg1YYywdz6/3IlIsNU/JJy+zSG",
	"6WePkuutwBq/TK9LIbEGgYqb/TNIWUHzuOSQpX0Tb8ZWzL76UCkInhVwA9kXdSwVuacZ6iQWh5rTJTma",
	"B2+buN3I2IYptsgBWzyyLRZUISevDVF1F7M84HqtsPnjCc3XFc8kZHqtLGKVILVQh+pN7bxagL4E4OQI",
	"2z16Tu6j206xDTwwWHT38+z40XM0uto/jmIXgHu1Y4ybZMhO/uHYSZyO0W9pxzCM2416EE3Xts92DTOu",
	"kdNku045S9jS8br9Z6mgnK4gHilS7IHJ9sXdRENaBy88s2/OKC3FjjAdnx80NfxpIPrcsD8LBklFUTBd",
	"OOeOEoWhp+bNADupH84+YOPKvXq4/Ef0kZbeRdRRIj+t0dTeb7FVoyf7NS2gjdY5obbwRM6a6AVfhJqc",
	"+ro2WP+2LntrcWPmMktHMQeDGZaklIxrVCwqvUy+JOmaSpoa9ncwBG6y+OJppOZvu/Ykvx7gnxzvEhTI",
	"TRz1coDsvQzh+pL7XPCkMBwle9BkewSnctCZG3fbDfkOx4eeKpSZUZJBcqta5EYDTn0rwuMjA96SFOv1",
	"XIser72yT06ZlYyTB63MDv309pWTMgohY8XqmuPuJA4JWjLYYOxefJPMmLfcC5lP2oXbQP95PQ9e5AzE",
	"Mn+WY4rA1yKinfo61LUl3cWqR6wDQ8fUfDBksHBDzUm75u+nd/p543Pf+WS+eFjxjy6wn3lLEcl+BQOb",
	"GNQjj25nVn8P/N+UfC22Uze1c0L8xv4JUBNFScXy7OcmK7NT7l1Snq6j/qyF6fhL8zBVvTh7P0Vrwq0p",
	"55BHh7Oy4C9eZoxItf8UU+cpGJ/YtluB3i63s7gG8DaYHig/oUEv07mZIMRqO+GtDqjOVyIjOE9TgKzh",
	"nv2XC4L60r9VoHQseQg/2KAutFsafdeWNybAM9QWD8h39u3ZNZBWdRnU0nwZAV9a1hrUqzIXNJtjeYPz",
	"b05eETur7WOfV7HllVeopLRX0bFXBbUVp4UH+5dS4qkL08cZj6U2q1Y6qashx5JDTYumXjPr2PBRfQmx",
	"c0BeBq9I2jxSM4ShhyWThdG46tGs7II0Yf6jNU3XqJK1WOowyU+vC+6pUgVv8dVv6tQFB/HcGbhdaXBb",
	"GXxOhNGbL5myT47CBtr5qHVytjMJ+PzU9vJkxbmllKjsMVY84CZo98DZQA1v5o9C1kH8NQVyW1b/umXS",
	"z7BXtP5Rt+Z67xE+m91Yv5Xin5JOKRecpVh9KHY1u7dJp/jAJhRq6hpZ/RF3JzRyuKKV3uswOYfFwdrv",
	"nhE6xPWN8MFXs6mWOuyfGh/BXFNNVqCV42yQzf2DBc4OyLgCV0ASX7IN+KSQLb8icsioqzqpXRrXJCNM",
	"ixlQ7L413147tR/jxS8YRwHfoc2FpltLHT6dqI1WwDRZCVBuPe3cYPXO9DnANNkMth8O/FOLOIZ1y5ll",
	"Wx90f6gT75F2HmDT9oVp66rn1D+3IpDtpCdl6SYdfs4iKg/oLR9EcMSzmHjXToDcevxwtBFyGw0lwfvU",
	"EBps0BENJd7DPcKon3boPBtkhFZLUdiC2BCuaAUDxiNgvGIcmodAIxdEGr0ScGPwvA70U6mk2oqAk3ja",
	"OdAcvc8xhqa0cz3cdqhu7SCDElyjn2N4G5tXKQYYR92gEdwo39XvjxrqDoSJF/jwsUNk/40JlKqcEJVh",
	"RkHn1YkY4zCM279r074A+segLxPZ7lpSe3KucxMNJYkuqmwFOqFZFqvn+TV+JfiVZBVKDrCFtKrrPpYl",
	"SbEmSrtITJ/a3ESp4KoqRubyDW45XfCMS4Qawqdk/A5jEspih//Gih4O74wLwrh2GKCPuHCvPFxTbm6P",
	"1JN6DU0niq2S6ZjAO+X26GimvhmhN/3vlNJzsWoD8olLQ4xxuXCPYvztG3NxhJUTepU87dVSFzbAoDvh",
	"H99DtbFOyW1zJbzKeqU90dlTP+41boAYfqZrjpffQOhtUBCD2vvVeg+HAnDTwXhxql3mmqZklAUNZgPZ",
	"6B2b94NQxC2nQxE7NmDHfO71niYZ9uRsHa+KFyDUh4L1Afrex5mSkjLnGm+YRR+zLiJ92Fw4duiaDe4u",
	"wsV5D1rsvt8MxWQTxfgqB4Lfu8/4XIBLZ69ftrdr9VFJXiW0v7qHZe14dVR8dP396ASc6vOaQQeNtueu",
	"ZLxdptPJv//ZxrAR4Fru/gQm3N6m9x5B6ku71jzVNCF1teFJ1Ydbt2L8PaPh+kdNzSOkp1Io1lS4jj10",
	"NDHW7RzfKgrqN/XH8oEmG0g1ljVvHOgS4DrVnMxkwbOC/6qDNKA71iGBrvzRWM2jfi3zPRdaLy0pSK2z",
	"daAPplf4OanDpJApYV3YFXD3sl874WBy2PNyCalmmz1pYP9YAw9SjObeCGFf6A2ywlgdRotVRK5vYmsA",
	"GsvSGoUnqOZ3a3CGkkAuYHdPkRY1RAtTz/29cpMCEogB5A6JIRGhYmEI1mrqPMNM1ZSBWPBhP7Y7NKW4",
	"Bt+0CZIabziXJ0lz4zaJjiNTxh/VmDSX6Xqt9F+MCB3KFOvX5B8Wtl/iEwiqfm/OF6AIVVJy2i/Td+kK",
	"WGDSXu0o8KUsQPnffIaunSVnFxC+uoNumUsqM98iamfwJoxk5D7qpXf5evJdoJf1zKwJ0uwn9EQKP2Eo",
	"bpoLI38lQ/HM7bjI8Ll+jP6whbAx4tPAtQTpXidDYS8XChItfFDnGBxjqHBPy98ECWqw2KIFbrAEytum",
	"xgsWnaVY8oS6yJZwgURCQQ10MqjEMjznGLJf2O8+g8UXHd1rTqnpdX/5dR+ey1QPiSHVL4m7LfdnxtzE",
	"ssI4t6/DqlhZFm5QGZr+SymyKrUXdHgwauvT5KJHI6wkapRI+6vsCMRBeuEF7A6txO/r1vsdDIG2kpMF",
	"PUjn72zyndqaVAzu1Z2A9znNNPNZKUSeDFj2T/u1ZLoUf8HSC8iIuSl8GNvAGyDkPhqUa9ft5Xrna6eU",
	"JXDIHhwQcsJt4LD34raLGXcm5/f02PxbnDWrbHknZ0E6eM/jEZhYeEnekpv5YcZ5mALD6m45lR1kT6WS",
	"7UAdG0kvIy/iHExVQft+1e4rJQ1RWShiMknzAMeeoJA6HqR5A6GJCelLB3kuLhOkoqQuRBXTOUy7NpP0",
	"pTebbgbbCwiCS6hyF+iOrGlGUiElpGGPeKy9BaoQEpJcYKxJzA221EYeKjDAlpNcrIgojZpr67l5h0H0",
	"gY7wpbyRBzrOO6fItsNgBLfEa7/C4Xap+xjHXpNwAOYE6ugNH7GqRR4Zaa+r+0zN0KNRWhQs7Q/XQs1f",
	"Ip5hMAphzxMqkfXVJ8+98OJzwwZwFXUOjvvi7HNYi6keubpybnSfolVak70+uhYMkzx11wVjic/LJTSC",
	"5NNaZJy3Xv9knQd0fFUzS+MptSrjGogZu5LgcpXsO1idBzxKqtf+CjHN+4qdURJAYSKRfQSCKmuG8OYQ",
	"9whX924WZZLDBlquS5dAVaUpKMU2ED7gZTuTDKBE42BXZI355MK7rSPHuLUngVdnCnajgo1FrN0pskdq",
	"icpYW57YY6KmHiUD0YZlFW3hT93iSaSh15AibNjDOpFTXJtJxBc3xiL2etGR5qPnksed6GH+Xm2RwNmy",
	"2nJpibA52aqkl3xYgo8YfWrP7u3XQXAwojr5tINvcsl6V26qvQ1Sxhhh9J4xi8ocCvwzlGHpCy/ruL4R",
	"AcfamZiKDMBUc54xTgyaOKSgWUF3JGPLJUhrSVea8ozKLGzOOElBasqMWrFTN5cpDbSygvlesdJwVxzU",
	"M5iYgIlGIQtIvnPyelzkK+jWyJUYPjOwAy4XFaVKS92Co3RCCnoRQf31DcoeCMV+h3EYsHyEM4lpgSDd",
	"ev6YM+6GhbEmcdy+nzpyKQVPqY17U8K6eU1CjrThDmh99fdalzR/aO67aY+6+Q57wAudbMGzbt7e4cD5",
	"zFkzP9RICZbyYYgSWsvf57dzC2wEhGCL3PnVGmwVUxtx3d6XwCmrXtS+zqEXCLsuUSySJzgWDu27Ui1L",
	"wfdHQsIxB0VuaP7p3aFYPfEE8eHeho8vNPSnhUi2qFQ3C11/RSfNHfjO7m5q/gbdt/8As0dRZdIN5SSP",
	"Whr30R54IdDcKvtL//7SBji5xDFtoNOjL8jCpd2WElKmuhLNpX8aoXYf4UtBLl1gq/f4q/at82ehb0HG",
	"S68gkNdNmXVUzVe8gbA5op+ZqQyc3CiVx6ivRxYR/MV4VFj/as91cdGKgLLPVnRC+4WEO46ECmKarxkJ",
	"1a/sNXV5NtrHXDqVgv46J9/WLdxGLupmbVPD+PrIHavFPSX6Ll5i33TH8D+LEHyfgiCo5NdHvxIJS3yA",
	"TpCHD3GChw/nrumvj9ufzXF++DCqP3yywD+LIzeGmzdGMT8PpYLZdKeBrMPOflQsz/YRRiuHtHnCEbMk",
	"f3FZ5J/lEclfbHxG/6i6h7yuE3Lc3QRETGStrcmDqYLs0AmJoa5bJA0UfR9pJZneYXE7r/azX6Ihit/V",
	"EUAugqxW69zdp8UF1OURm3ihSvnb9TtBc7yPrLbJzS0k8gPyzZYWZQ7uoHx1b/E3ePLl0+zoyaO/Lb48",
	"enaUwtNnz4+O6POn9NHzJ4/g8ZfPnh7Bo+UXzxePs8dPHy+ePn76xbPn6ZOnjxZPv3j+t3uGDxmQLaAz",
	"X0pl9n/wpdXk5M1pcm6AbXBCS/Y97OyjboaM/XNxNMWTCAVl+ezY//S//Qk7SEXRDO9/nblKDbO11qU6",
	"Pjy8vLw8CLscrjBAINGiSteHfp7+4/9vTmvPijXe4I7aREpvlPOkcILf3n5zdk5O3pweBK9dH8+ODo4O",
	"HuHjyCVwWrLZ8ewJ/oSnZ437fuiIbXb88Wo+O1wDzTGezvxRgJYs9Z8k0Gzn/q8u6WoF8sC9oWd+2jw+",
	"9GLF4UcXKHE19u0wfI7i8GMrniTb0xPL1R9+9FXYxlu3ypy5OJqgw0QoxpodLrC4w9SmoILGw0tBZUMd",
	"fkRxefD3Q5fxHv+Iaos9D4c+6CresoWlj3prYO30SKlO11V5+BH/g/QZgGXzSwJwZ6tY8cfvQPvkcNvD",
	"RU/XYdM1nZ9mtnkvmtfVV7QFp4/fTXtvB/x0RmvMQDFXhBM5hjkOzYH2iaQNu0Z7UlAceayM2NU88jT1",
	"kq3Q5OTrELbeh3TPwzFF/vPsx9dESOL04zc0vaj9VeR0aYt3SbFhmHKaBXnKpme9nN8qkLtmPe7qDBfg",
	"H/Rxjq9Crcp21lstln/AykgIKDKMx0dHd/aoZm9nr6yLqB7Ow3WbEXv89YW/NVtkaPjk06NHd7a2djLN",
	"rRfWHa63qlOOsazmFiD2lsMFPf3LLugFatOG4peMZ/ZFJE3xTNsDiuv78i+7Ps0KHzPD8XE5UCgMPLvD",
	"A/bpidDI5DQn2NKu5slfdjVnIDcsBXIORSkklSzfkZ94XT0iqBjZv+Z+4hdcXHKPCCN0V0VB5c5dgZR0",
	"WZW/Bux1GLzva6Q9ulIY0oNvdMzmM5caDtsSJCuAY9Wpq/om3hQiA3/Di+XSlmEe+3z40f4bXOitwetf",
	"LdM8xOJou/7PO+7yxHOIRV3/xBVYS64vELPj6dDdj43Pdjx9W1/IvYsImcAfd2D6NFHDi6wJw3L/4Jtj",
	"Gqt/9imx8GnP+Sc7mG+hEBtQxIl3AXEaYc0oQ2jXQxdmQ8MHgwf0A1oS4kKwc3D0Z/LOnWbwnkS850xM",
	"34W2rWYk6HoSnHuyJOzwU156r19S72Rl2qnuxTZo9i9G8C9GcIeMQFeSDx7R4P7CzCEobZg0SWm6hjF+",
	"0L8tQ4W5FLEI3LMRZuGKUQ3xirM2r/hTq80f/hT3+wvK/Xlu7bgNXqcyZyBrKqC8Xx/sX1zgfwwXsIUO",
	"nWlqTjTkuQrPvhZ49m10gksI5TZqZCIf6L4DHvv58GP7HbqWjVCtK52Jy6Av+phtgETfdFi/zNz6+/CS",
	"Mp0shXTJoPhOQL+zBpofujJnnV+byiK9L1guJfgxjKuM/npYP8MS/di138a+OvvlQCMf5uU/N76c0DeC",
	"HLL2irz7YPgTFvl2zLMx9R8fHmKC1VoofTi7mn/suAHCjx9qkvDVX2elZBssJvPh6v8HAAD//ziAABno",
	"zQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
