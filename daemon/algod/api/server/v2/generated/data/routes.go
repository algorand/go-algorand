// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XmbeZNG2eZo9PXk8+/C/AwAA//9w3Cdpmv0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
