// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
