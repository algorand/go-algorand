// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"xcoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
