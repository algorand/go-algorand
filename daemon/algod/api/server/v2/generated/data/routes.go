// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9AuaVVpcY0Hcdx/+bwAAAP//5LJvQQPsAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
