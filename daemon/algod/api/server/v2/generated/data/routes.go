// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"o7n5jh3KAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
