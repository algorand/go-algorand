// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
