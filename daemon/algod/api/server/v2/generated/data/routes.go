// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
