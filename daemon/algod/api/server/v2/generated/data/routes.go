// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round basics.Round) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
