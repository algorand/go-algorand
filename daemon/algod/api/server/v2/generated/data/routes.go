// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"xwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
