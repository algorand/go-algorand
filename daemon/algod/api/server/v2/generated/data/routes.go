// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
