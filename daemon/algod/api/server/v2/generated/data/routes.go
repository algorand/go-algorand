// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
