// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"UrINZrF8//H/BQAA//9OCny/T+EAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
