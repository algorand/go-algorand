// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Gm0puNnjk4ezD/8vAAD//wntaq8tCwEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
