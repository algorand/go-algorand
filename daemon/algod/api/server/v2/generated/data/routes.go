// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round basics.Round) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"jp5OH4/u/l8AAAD//2Q3BRCzDQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
