// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round basics.Round) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Prr/PwEAAP//q6JtrfMMAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
