// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round basics.Round) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"dPRsej66/z8BAAD//396blD7DAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
