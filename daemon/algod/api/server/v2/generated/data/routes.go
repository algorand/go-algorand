// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9f3PctpIo+lVQs1vl2G8o2Y6TPfGrU/sUO8nRi5O4IiX7dm2/BEP2zOCIA/AAoDQT",
	"X3/3W+gGSJAEZziS4uTcOn/ZGpJAo9Fo9O9+P8vVplISpDWz5+9nFdd8AxY0/sXzXNXSZqJwfxVgci0q",
	"K5ScPQ/PmLFayNVsPhPu14rb9Ww+k3wD7Tvu+/lMwz9qoaGYPbe6hvnM5GvYcDew3VXu7WakbbZSmR/i",
	"jIY4fzn7sOcBLwoNxgyh/EGWOyZkXtYFMKu5NDx3jwy7EXbN7FoY5j9mQjIlgakls+vOy2wpoCzMSVjk",
	"P2rQu2iVfvLxJX1oQcy0KmEI5wu1WQgJASpogGo2hFnFCljiS2tumZvBwRpetIoZ4Dpfs6XSB0AlIGJ4",
	"Qdab2fM3MwOyAI27lYO4xv8uNcBvkFmuV2Bn7+apxS0t6MyKTWJp5x77GkxdWsPwXVzjSlyDZO6rE/Zd",
	"bSxbAOOS/fj1C/bpp59+4Ray4dZC4YlsdFXt7PGa6PPZ81nBLYTHQ1rj5UppLousef/Hr1/g/Bd+gVPf",
	"4sZA+rCcuSfs/OXYAsKHCRIS0sIK96FD/e6LxKFof17AUmmYuCf08r1uSjz/H7orObf5ulJC2sS+MHzK",
	"6HGSh0Wf7+NhDQCd9yuHKe0GffM4++Ld+yfzJ48//Nubs+x//J+fffph4vJfNOMewEDyxbzWGmS+y1Ya",
	"OJ6WNZdDfPzo6cGsVV0WbM2vcfP5Blm9/5a5b4l1XvOydnQicq3OypUyjHsyKmDJ69KyMDGrZenYlBvN",
	"UzsThlVaXYsCirnjvjdrka9Zzg0Nge+xG1GWjgZrA8UYraVXt+cwfYhR4uC6FT5wQX9eZLTrOoAJ2CI3",
	"yPJSGcisOnA9hRuHy4LFF0p7V5njLit2uQaGk7sHdNki7qSj6bLcMYv7WjBuGGfhapozsWQ7VbMb3JxS",
	"XOH3fjUOaxvmkIab07lH3eEdQ98AGQnkLZQqgUtEXjh3Q5TJpVjVGgy7WYNd+ztPg6mUNMDU4u+QW7ft",
	"/+/FD98zpdl3YAxfwWueXzGQuSqgOGHnSyaVjUjD0xLi0H05tg4PV+qS/7tRjiY2ZlXx/Cp9o5diIxKr",
	"+o5vxabeMFlvFqDdloYrxCqmwdZajgFEIx4gxQ3fDie91LXMcf/baTuynKM2YaqS7xBhG7796+O5B8cw",
	"XpasAlkIuWJ2K0flODf3YfAyrWpZTBBzrNvT6GI1FeRiKaBgzSh7IPHTHIJHyOPgaYWvCJwwyCg4zSwH",
	"wJGwTdCMO93uCav4CiKSOWE/eeaGT626AtkQOlvs8FGl4Vqo2jQfjcCIU++XwKWykFUaliJBYxceHY7B",
	"0DueA2+8DJQrabmQUDjmjEArC8SsRmGKJtyv7wxv8QU38PmzsTu+fTpx95eqv+t7d3zSbuNLGR3JxNXp",
	"nvoDm5asOt9P0A/juY1YZfTzYCPF6tLdNktR4k30d7d/AQ21QSbQQUS4m4xYSW5rDc/fykfuL5axC8tl",
	"wXXhftnQT9/VpRUXYuV+KumnV2ol8guxGkFmA2tS4cLPNvSPGy/Nju02qVe8UuqqruIF5R3FdbFj5y/H",
	"NpnGPJYwzxptN1Y8LrdBGTn2C7ttNnIEyFHcVdy9eAU7DQ5ani/xn+0S6Ykv9W/un6oq3de2WqZQ6+jY",
	"X8loPvBmhbOqKkXOHRJ/9I/dU8cEgBQJ3r5xihfq8/cRiJVWFWgraFBeVVmpcl5mxnKLI/27huXs+ezf",
	"Tlv7yyl9bk6jyV+5ry7wIyeykhiU8ao6YozXTvQxe5iFY9D4CNkEsT0UmoSkTXSkJBwLLuGaS3vSqiwd",
	"ftAc4Dd+phbfJO0Qvnsq2CjCGb24AEMSML34wLAI9QzRyhCtKJCuSrVofvjkrKpaDOLzs6oifKD0CAIF",
	"M9gKY81DXD5vT1I8z/nLE/ZNPDaK4kqWO3c5kKjh7oalv7X8LdbYlvwa2hEfGIbbqfSJ25qABifm3wfF",
	"oVqxVqWTeg7Sinv5b/7dmMzc75M+/ucgsRi348SFipbHHOk4+Euk3HzSo5wh4Xhzzwk76397O7Jxo6QJ",
	"5la0snc/adw9eGxQeKN5RQD6J3SXColKGr1EsN6Rm05kdEmYozMc0RpCdeuzdvA8JCFBUujB8GWp8qu/",
	"cbO+hzO/CGMNjx9Ow9bAC9Bszc36ZJaSMuLj1Y425Yi5F1HBZ4toqpNmia/UytzDEku1wn+FhY2ZQBkv",
	"eFm6qVHQoDVwrflusFoceBIvcceXTqv7hi212jBVO63K8QohpftfVbGcl6UJugIZVUnkZl/xfN280oim",
	"eGok3LAIbG8kmDO7rvGgaWAbsVqjQrJxgmhVBkuCaX0Hhm+gd3khcARmLB+evwwQwjVI61bWDNtfilWd",
	"wU8coP4RziwVYYQMNzZ4XRp9qcMRkCjui+YP0HvBLY/o3e9tWlal84jf4U0IOqHQ/oD/4SVzjx3Dd/IA",
	"DXvCLvFWM8TjGxzcrIGwQDO5F9A0pdiGrD6s4vnVUVC+aCdPH95J9PwVGZr8sfWLaHbocisKc1/bhION",
	"7VWXKknND4e8x6gOHOVorikIuFQVK+Eayj4IdCJxNEKI2t77ZfGl2qZg+lJtBxeF2sK97IQbZzIL/VJt",
	"X3rIlD6MeRx7CtLdAp2CZ/DOkDGzcrO0LoyzhdK3u6N7bFuy1jHDuBs1YkjzHpLw1brK/NlMGHfphd5A",
	"rS98/9XaHz6FsQ4WLiz/HbBg3Kj3gYXuQPeNBbWpRAn3QPrrpGi04AY+fcou/nb22ZOnvzz97HNHkpVW",
	"K803bLGzYNgn3oLBjN2V8HC4MrQh1KVNj/75s2DO746bGseoWuew4dVwKHITkOhBrzH33hBrXTTjqhsA",
	"J3FEcFcboZ2RB8yB9lIYp4dsFveyGWMIK9pZCuYhKeAgMR27vHaaXbxEvdP1fRh8QGulk1dXpZVVuSqz",
	"a9BGqITP8bV/g/k3ghJY9X8naNkNN8zNjQ6SWqLYnaAsu5XT+T4NfbmVLW72cn5ab2J1ft4p+9JFfrC3",
	"G1aBzuxWsgIW9apjL0DZm7MCP8Q7+huwJLeIDVxYvql+WC7vx6CicKCEYUNswLiZGL3hpAYDuZIUL3TA",
	"huFHnYKePmKCIduOA+AxcrGTOVrj7+PYjpt3NkKia9DsZB7ZelBTgmLVIcu723TG0EFTPTAJcBw6XuFj",
	"NAe+hNLyr5W+bMW+b7Sqq3sX8vpzTl0O94vxBsfCfRssTUKuym6M2srBfpJa4x+yoBfh+Po1IPRIka+c",
	"AhvpWa+1Usv7hzE1SwpQfECmi5JU674B43tVOGZia3MPIlg7WMvhHN3GfI0vVG0ZZ1IVgJtfm7RwNhLV",
	"hOEUGAViY3nPrknxXICjrpzXbrV1xTDGYXBftB9mPKcTmiFqzIiHt3HN01s0HUXMlBp4sWMLAMnUwrtR",
	"vYMXF8kxQMMG8caLhgl+0YGr0ioHY6DIvPn2IGjhPbo67B48IeAIcDMLM4otub4zsFfXB+G8gl2G4USG",
	"ffLtz+bhHwCvVZaXBxCL76TQ27f9DKGeNv0+gutPHpMd18DCvcKsQmm2BAtjKDwKJ6P714dosIt3R8s1",
	"aPRa/64UHya5GwE1oP7O9H5XaOtqJEjWq7dOwnMbJrlUQbBKDVZyY7NDbNm91NHB3QoiTpjixDjwiOD1",
	"ihtLkRZCFmgLpOsE5yEhzE0xDvCoGuJG/jloIMOxc3cPSlObRh0xdVUpbaFIrUHCds9c38O2mUsto7Eb",
	"nccqVhs4NPIYlqLxPbJoJYQgbhuHpA9FGi4O3Xbunt8lUdkBokXEPkAuwlsRduNAwRFAhGkRTYQjTI9y",
	"mujE+cxYVVWOW9isls13Y2i6oLfP7E/tu0Pi4ra9twsFBo39/n0P+Q1hlkJE19wwDwfb8Csne6AZhEJC",
	"hjC7w5gZIXPI9lE+qnjurfgIHDykdbXSvICsgJLvhoP+RI8ZPd43AO54q+4qCxnF+qU3vaXkEFq1Z2iF",
	"45mU8MjwCcvdEXSqQEsg/usDIxeAY6eYk6ejB81QOFdyi8J4uGza6sSIeBteK+t23NMDguw5+hSAR/DQ",
	"DH17VODHWat79qf4bzB+gkaOOH6SHZixJbTjH7WAERuqT6OIzkuPvfc4cJJtjrKxA3xk7MiOGHRfc21F",
	"LirUdb6F3b2rfv0Jkm5cVoDlooSCRQ9IDazi7xlFqfXHvJ0qOMn2NgR/YHxLLKcUBkWeLvBXsEOd+zWF",
	"P0emjvvQZROjuvuJS4aAhqBKJ4LHr8CW57bcOUHNrmHHbkADM/ViI6yltIauqmtVlcUDJP0ae2YMDvKU",
	"T3Gvm/UCh4qWN9yK+Yx0gv3wXfYUgw46vC5QKVVOsJANkJGEYFIkA6uU23XhMyxCjH2gpA6QnmmjS7u5",
	"/h+YDppxBey/Vc1yLlHlqi00Mo3SKCigAOlmcCJYM6ePf2oxBCVsgDRJfPLoUX/hjx75PReGLeEmpCW5",
	"F/voePQI7TivlbGdw3UP9lB33M4T1wc6fNzF57WQPk85HH/jR56yk697gzdeInemjPGE65Z/ZwbQO5nb",
	"KWuPaWRa7BGOO8mX041lGawb9/1CbOqS2/vwWsE1LzN1DVqLAg5ycj+xUPKra17+0HyGKVeQOxrNIcsx",
	"UWjiWHDpvqHcIjeOkMIdYIorngoQnNNXF/TRARWzDd0Umw0Uglsod6zSkAOl1DjJ0TRLPWEUbJuvuVyh",
	"wqBVvfLRnjQOMvzakGlG13IwRFKosluZoZE7dQH4MKqQVeXEKeBOpetbyEmBueHNfD6RbsrNHO1B32OQ",
	"dJLNZ6Mar0PqdavxEnK6qWETLoOOvBfhp514oisFUedknyG+4m1xh8lt7u9jsm+HTkE5nDiKP20fjoWg",
	"OnW73N2D0EMDMQ2VBoNXVGymMvRULeM0UH+HmZ2xsBla8unTX0aO34+j+qKSpZCQbZSEXbLygZDwHT5M",
	"Hie8Jkc+RoFl7Nu+DtKBvwdWd54p1HhX/OJu909o32Nlvlb6vlyiNOBk8X6CB/Kgu91PeVs/KS/LhGvR",
	"J4n1GYCZN4GlQjNujMoFymznhZnTQfPeSJ9R1kX/6yb0/R7OXn/cng8tzj9GGzGUFeMsLwVakJU0Vte5",
	"fSsp0DZaaiL4KSjj41bLF+GVtJk0YcX0Q72VHAPfGstVMmBjCQkzzdcAwXhp6tUKjO3pOkuAt9K/JSSr",
	"pbA418Ydl4zOSwUaI5BO6M0N37Glowmr2G+gFVvUtiv9Yw6ksaIsvUPPTcPU8q3klpXAjWXfCXm5xeGC",
	"0z8cWQn2RumrBgvp230FEowwWTpI6xt6ilHmfvlrH3GO4dX0OARrtknZM7fMTh2G//+T/3z+5iz7H579",
	"9jj74v86fff+2YeHjwY/Pv3w17/+r+5Pn37468P//PfUTgXYUxl6HvLzl14zPn+J6k/rAxrA/tHs/xsh",
	"sySRxdEcPdpin2A2uiegh13jmF3DW2m30hHSNS9F4XjLbcihf8MMziKdjh7VdDaiZwwLaz1SqbgDl2EJ",
	"JtNjjbeWooZxjelcWHRK+vRWPC/LWtJWBumbUr1CfJlazpt8ZyqF9JxhMuyah+BI/+fTzz6fzdsk1ub5",
	"bD7zT98lKFkU21SqcgHblK7oDwgejAeGVXxnwKa5B8KeDKWj2I542A1sFqDNWlQfn1MYKxZpDhcSaLzN",
	"aSvPJQXGu/ODLs6d95yo5ceH22qAAiq7TpVI6Qhq+Fa7mwC9sJNKq2uQcyZO4KRv8ymcvuiD+krgy5By",
	"opWaog0154AILVBFhPV4IZMMKyn66aUF+Mvf3Ls65AdOwdWfs/Fnhr+tYg+++eqSnXqGaR5Q1jwNHeU5",
	"J1Rpn8rXCUhy3CzOYXor38qXsETrg5LP38qCW3664Ebk5rQ2oL/kJZc5nKwUex6yA19yy9/KgaQ1Wrst",
	"ystkVb0oRc6uYoWkJU+qxzMc4e3bN7xcqbdv3w1iM4bqg58qyV9ogswJwqq2ma8mkmm44Trl+zJNNQkc",
	"mcoF7ZuVhGxVk4E0VCvx46d5Hq8q088qHy6/qkq3/IgMjc+ZdlvGjFU6yCJOQCFocH+/V/5i0Pwm2FVq",
	"A4b9uuHVGyHtO5a9rR8//hRYJ836V3/lO5rcVTDZujKa9d43quDCSa2ErdU8q/gq5WJ7+/aNBV7h7qO8",
	"vEEbR1ky/KyTIRcC83GodgEBH+MbQHAcnaqKi7ugr0LluPQS8BFuIb7jxI3W8X/b/YoSvm+9Xb2k8cEu",
	"1XadubOdXJVxJB52pikotXJCVojGMGKF2qqvvbUAlq8hv/JFkWBT2d2883kI+PGCZmAdwlC5LMrMw4It",
	"6KBYAKurgntRnMtdv3KGAWtDWPGPcAW7S9XWezmmVEa3coMZO6hIqZF06Yg1PrZ+jP7m+6gyVOyrKhRA",
	"wKTHQBbPG7oI34wfZBJ57+EQp4iiU1lgDBFcJxBBxD+Cglss1I13J9JPLU/IHKQV15BBKVZikar0+V9D",
	"f1iA1VGlL27mo5CbAQ0TS+ZU+QVdrF6911yuwF3P7kpVhpdUuDEZtIH60Bq4tgvgdq+dX8YVGgJ0qFLe",
	"YJYwWvjmbgmwdfstLFrsJNw4rQINRfSOj14+GY8/I8ChuCU84fNWUzgZ1XU96hJFzcKt3GC3UWt9aF5M",
	"ZwgXPd8AVkVUN25fHBTKF/SjuhHR/VIbvoIR3SX23k2sztDx+OEghySSpAyiln1RYyAJJEGmlzO35uQZ",
	"BvfEHWJUM3sBmWEmchB7nxHW6fUIW5QowDaRq7T3XHe8qFR4dAy0NGsBLVtRMIDRxUh8HNfchOOIJRkD",
	"l50knf2OdVD2Vb86j2IJo7qLTW2rcBv2OehA7/c1sELhq1DtKlb6J1SucroXpi+ktkNJFE0LKGFFC6eX",
	"A6G0NVnaDXJw/LBcIm/JUmGJkYE6EgD8HOA0l0eMkW+ETR4hRcYR2Bj4gAOz71V8NuXqGCClrynDw9h4",
	"RUR/QzqxjwL1nTCqKne5ihF/Yx44APexrI1k0YuoxmGYkHPm2Nw1Lx2b87p4O8igCBMqFL2SSz705uGY",
	"orHHNUVX/lFrIiHhNquJpdmmoEZS1N4D8UJtM8rsTeoii+3C0XsydwHzjFMHk8pdPTBsobYYzoVXC8XK",
	"H4BlHI4ARmR72QqD9IrfjclZBMy+affLuSkqNEgy3tDakMuYoDdl6hHZcoxcPokqWN0KgJ4Zqi0H780S",
	"B80HXfFkeJm3t9q8rcwY0sJSx3/sCCV3aQR/Q/tYU3PqdV9iSVqQulFJ3XJbkXCfInrHJobus6GTzkAJ",
	"qK5lHSEqu0r5tJ3WCXjjXITPIrMSFvXicvcwCnXTsBLGQuveCBEsf4ThmGMtUaWW46uzlV669f2oVHNN",
	"kYMXP+ws86OvAGPFl0Ibm6FvKLkE99LXBs0dX7tX07JSN5iOKm+LIs0bcNor2GWFKOs0vfp5v33ppv2+",
	"YYmmXiC/FZJCiRZYKT4ZYrtnaorC3rvgV7TgV/ze1jvtNLhX3cTakUt3jn+Sc9HjvPvYQYIAU8Qx3LVR",
	"lO5hkFFq9JA7RnJTFH1xss8uPjhMRRj7YDxVSNAeu6NopORaovJp6Vw2tVpBEQpYBc+NbEub8VLJVdTS",
	"pKr2VSJLYKBFVSZkAds0HLEkijC02VxYkAzDDVcgqURG2hSRXGQcVo5vRPahj+x/6wedJwNvL3sO1DYi",
	"1heoCxuDEnIJvPBysIGwvv0HbLghHnXzsZDdTu3H/YcBB6Qiejaq1z9MfR9hpbyqRLHtOTto1FHDCz/K",
	"ohmqnPawgkzCD3YAA93A2yTBdSrE+vBeb9Q9RT3r1GkCFO/rg1kdffPcJ30XtUareSeadliOuNEPJq79",
	"258vrNJ8Bd7zkRFIdxoCl3MMGqJiv4ZZQSEMhVguIbb4m9tYqzvADey6xQTSTRBZ2i1QC2k/f5YiowPU",
	"08J4GGVpiknQwpgf+HLoWQnSeWS+aJh7tDW3cI8kU8S/hV32s1N0WcWFNm1IqHd1dK/RI3b9evMt7HDk",
	"g5GWDrADu4LWjh8BaTBlXW4eUWZUo0nHlauxqktnC4/YqbP0Lt3T1vha4+PE394ynVrc3aXc5WC0jnkH",
	"y5TduEj7w93pgS7i+6R8aBNEcVgGiST3eCphQme24VXU1D84RLuXwMtAvLic2Yf57G7e59Rt5kc8gOvX",
	"zQWaxDNGN5I3shNMciTKeVVpdc3LzPvoxy5/ra795Y+vB5f+R9ZJ0pR9+dXZq9ce/A/zWV4C11mj04+u",
	"Ct+r/mlWRdXJ918lKLEE4xrZfKLNb6rnxn79G6x73DMbDWr9tzEb0VH0fv5lOsj6IO/z4SW0xD1hJlA1",
	"USatn42CTLqBJfyaizI4uAK0IwHRuLhpDSOSXCEe4M4BKlGcUXav7GZwutOno6WuAzwJ5/oByyGmNQ7p",
	"iyUiK/IBJ/zepaevle4wf58NlwxY+f3EKidkEx5H4oNDW7a+MHXCSPD6dfWrO42PHsVH7dGjOfu19A8i",
	"APH3hf8d9YtHj5Ieq6RByjEJtDdJvoGHTWT/6EZ8XAVcws20C/rsetNIlmqcDBsKpciTgO4bj70bLTw+",
	"C/9LASW4n06mKOnxphO6Y2CmnKCLsey3JrBxQ53gDFOyH8eLiZeOtJDZbzj2uiAH4PAIyXqDTrPMlCJP",
	"hxPIhXHsVVIAn3uZ4csjdlc3Yi1G4kFlLaKx3GtT6nT2gIzmSCLTJEuFtrhbKH+8ayn+UQMThdNqlsI3",
	"EehddUE5wFEHAmnaLuYHpmCUdvi72EHiPi99mdHbgvYZQeJwwQG4LxvvUFho43xtdaZjo47jGQeMe0/E",
	"sKcPT82UQbXuhv1N02OmdAQOjM43nBmZI9nhV5hsqdVvkHZpoCcoUXwhdLYRaLD9DWQqWqzPUhpHZtuo",
	"uJ390HZP143HNv7OunBYdNNM5zaXafpUH7eRt1F6TbpEsEfymBIWe7W74egjrAWPVxSAiS0rQsQLl3Se",
	"qPJAJ6spfSrj/MFTGr89lR7mQc5lyW8WPNXPw+lCDqZoezuxOVax8HHYANPk1dPsLIoabt4VVL2sAt0W",
	"nxlWQr2lXkPTTtZoWgUGKSpWXeYUT1galRimljdcUnNc9x3xK/+1AXKmu69ulMbagyYdRlRALjZJc+zb",
	"t2+KfBgyUoiVoL6vtYGosagfiHpqExX55qxNtQiPmvMlezyPuhv73SjEtTBiUQK+8YTeWHCD12Xj2G4+",
	"ccsDadcGX3864fV1LQsNhV0bQqxRrNE9UchrguEWYG8AJHuM7z35gn2CYYBGXMNDh0UvBM2eP/kCgzjo",
	"j8epW9b37d3Hsgvk2SFAOE3HGAdJYzgm6UdNR/xS4/7x22HPaaJPp5wlfNNfKIfP0oZLvoJ0TsDmAEz0",
	"Le4mOuZ7eJHkDQBjtdoxYdPzg+WOP43kGTv2R2CwXG02wm58sJhRG0dPbddQmjQMRy2sfW+fAFd4iDGX",
	"VQg569m6PrIawzcjeUIYGfs930AXrXPGqeBkKdpo6NCGjp2HerbY7KjpcUS4cXO5paMsicHRS1ZpIS3a",
	"P2q7zP7i1GLNc8f+TsbAzRafP0s0Der21ZDHAf7R8a7BgL5Oo16PkH2QWfy37BOpZLZxHKV42Ob1R6dy",
	"NDg0HQY4Fou4f+ipkq8bJRslt7pDbjzi1HciPLlnwDuSYrOeo+jx6JV9dMqsdZo8eO126KcfX3kpY6N0",
	"qkh9e9y9xKHBagHXmKWV3iQ35h33QpeTduEu0P+xkUxB5IzEsnCWk4pA5NHcl6DtpPifv2urbaNjlbLf",
	"ejZApRPWTm+3+8hxg8dZ3fr+Wwr9wmcjmJuMNhxliJWRiG8K6W6++SPihfog0Z53DI5PfmXa6eAoxz96",
	"hEA/ejT3YvCvT7uPib0/epQueps0ublfWyzcRSPGb1N7+KVKGMBCh7kmoMjn5CcMkGOXlHvgmODCDzVn",
	"3W5eH1+KuJ+conTcaPoUvH37Bp8EPOAffUT8wcwSN7CNjB8/7N1uhkmSKZrnUcQ6Z1+q7VTC6d1BgXj+",
	"BCgaQclE8xyuZNCtMemuPxgvEtGoG3UBpXJKZtyIJrbn//Pg2S1+vgfbtSiLn9t6Yr2LRHOZr5Pxvgv3",
	"4S8ko3euYGKVyd4Way4llMnhSLf9JejACS3972rqPBshJ77b7xZKy+0trgW8C2YAKkzo0Cts6SaIsdot",
	"1dSUAihXqmA4T9tIoWWOw7a7US/Af9RgbOpo4ANKekNnl2O+1IqOgSzQ+nXCvsGiKQ6WTpVstDqF+qPd",
	"Wnx1VSpezLEu6uVXZ68YzUrfUMN4aoW3QqNLdxVJK/kRHbND7/d00Y1jOm/vqwLgVm1s1nSuS5U1c2+0",
	"vfVEL3QCzTExdk7YS7KENX2qaRKG1XX1BoqoUR7pYkgT7j/W8nyNJqbORTZO8tN7OAaqbA3wPPw/bxun",
	"4LlzcPs2jtTFcc6UXYO+EQYwmReuoVtJrSkr6E2cobJad3m6lpIo5eQImaJpk3Is2gNwJJAE33ASsh7i",
	"jzQwUAvUY1taXuBX6ZD6Xn/MnvM21OVqGn1/523EOZdKihyrqKcEIqz6NM3bNKHgfNpNZGb+hCYOV7Ir",
	"Z5NG6LE42qczMEKPuKHnNnrqNpWog/60sPXdmlZgjedsUMxDc1nv1xDSgG+E44go5pNKJ2JTkvHsjR/8",
	"SDLCgi4jhqqv3bPvvRkT8+mvhESDhUebF7PJ81AagQ5GyYRlKwXGr6eblGHeuG9OsMBbAdt3J6/USuQX",
	"YoVjUDSUWzaF/g2HOguBgD7wzr37wr3ry243P3eiemjSs6ryk463Hk73W9/KUQSnwk9CPECE3Gb8eLQ9",
	"5LY3ghfvU0docI3BR1DhPTwgjKYNb6/nvVMRiKLwDUYpbsnam0ImwHglZPCEpS+IPHkl4MbgeR35zuSa",
	"WxIBJ/G0S+DlSBw7poySK/WuQ/WLjjuU4BrDHOPb2HYQHmEczQut4MbljoVD4ag7EiZe8LKJgE30A0ap",
	"ygtRBeaI9DoEpxiHY9yhB3n3AjiYhdV8joX8j72JxsqbLepiBTbjRZGqivMlPmX4NOT6wBbyuulf0yR5",
	"dcsbD6nNT5QraerNnrnCC3ecLmq5naCGuO132GEs0rHY4b+p5i3jO+NjX49OkwyBrsVxNb2HaZ8pqdfR",
	"dGbEKpuOCbxT7o6OdurbEXr7/b1Sesi6/FMkVfa4XLxHKf72lbs44pqfgzBjulqakpwY0qvweaiV0hST",
	"63IlvMoGLYrQeY2bl9iyHvDhxSTg17wcSU2OTd50v5IZeCxBOR/Np+fWV/axnO1lQaPVUijks2dEH3qC",
	"xsI8Kcrz/ozPfq17ETrugvm243ChUJ+WWYw6Wm7nC2k3+FhnyLfXYznrocQ/Pu+3XL8CX4ix0nAtVB2C",
	"aEIoa1AJ6ddOA/OmakBy/ckA8T/a+DxqKr/0rS9pmV4n//ZncqYxkFbv/gSG88GmD5q5D6VdMk+1r7Cm",
	"a9qkLmqdW3FK+4tUpwUvG3bayR9ohj8gq5dTxIFhc/v57Lw46sJMdeuY0SipY5duVT9ezLwtYI5HrFJG",
	"tM0LUz3sJ8aMX2Ib+qgY+3CsEEt4DbnFjpVtjJQGOKY0u5ss2O7/VdR8XJ1uQut9LfN9BcyHbSoP3PGD",
	"SjZRNSZq8XcyvVz3WRMJS4k8N9y0VTd6qa+TE/CWS8ixoOreykH/tQYZVaWZB7sMwrKMCgmJJh0FSwIf",
	"b3VsAdpX2GcvPFFrjjuDM5aOfAW7B4Z1qCHZc7DJxbpNzVHEAHKHLJSfHTMk++AfYRrKQCyEyE5fxbWt",
	"qz9aLjaqg3XLuQJJuoujrY21Z8p0v+RJc7lPj6oYh5kVY8WFhu1Wx/WPl9jd1vg4J97ULI21dHY+7Llx",
	"42ueYp2nxncSqp+CCb+Fom40SymuIG6ojp6qG66L8Ma91Pahu0mkgV42M4s2Dn/oq05UcceUlrxUTozI",
	"xvKCuqHvTdzYA0MBfm0dFoRrCVpD0bhESmUgsyrE7e+DYx8qKIrxVkgwo51TCLjRqrk/tmWBsYMUxyq5",
	"3AcvxgtkGjbcQaej4r3jc+5D9gt6HnKpQwehgxamhl4Pt7IMGRjCDJAYU/2S+dvycI72bYxNQkrQWfA8",
	"9Sv5ym6JLCyEWNQ5XdDxwWgMcpNLoOxhJUk7TT5cZU9HiHKdr2B3SkpQ6AEadjAGmiQnAj2qANnb5Hs1",
	"v5kU3Kt7Ae+PLQdWKVVmI86O82H54T7FX4n8CrAoWxOpPNLemX2CNvbGm32z3oVyu1UFEoqHJ4ydScoN",
	"CY7tbmey3uTygd03/xZnLWqqCO6NaidvZTrIHmt16ztyszDMfh5mwLG6O05FgxwobrsdKX2s+U2i2fnJ",
	"VK186GruN6BuiYqgSMkkF+SxeoEHPWU4wkz2qOQCOjI5854uZkqVCsm8Tba9GyqNqXgyBMiCnJL03UDh",
	"B08iINlSOXEKqYKZr12mlkxD60S+bRG3YffnlEbfn7mZpcvvlkpDp4+z+1rpIog8wrQN17leCKu53t2m",
	"1Nqg+/TAejKK5YPhWE0kVruQNhpriMOyVDcZMqusKZGfUm3de6Z7GYd+Te137lQvIIrr4sYLaju25gXL",
	"ldaQx1+k0/YIqo3SkJUKw7xSHuildXL3BnN1JCvViqkqVwVQq4k0BY3NVUvJUWyCKKomiQKiHUz6pG8i",
	"Op445X21PqfiPLTojHyZI4GnYHwxHo8henkI75624Uc1eThfokVIYKxLN/eapM+4eToc2TtdlGUwGIy1",
	"T2c/mRrDkTDxxk3xjG2UsV6zo5FMM1Qb4vVJrqTVqiy7RiASiVfesv0d357luX2l1NWC51cPUY+UyjYr",
	"LeYhLbUfjNfOpHsVmSb2ee9XOKX3MDTNE8nRzdw95zi6B3ME5rvDHOuwjfss1au+u64u80qrDWeScas2",
	"Ik/T8D9XdNtoTFqKJSRLPVEbNErOx9eQUceXQxPMgCxpiGaQPNnH6Yx5nuadusg83H9R4u2Py5bgL4mR",
	"i2nIJ73UkuWjslUPAISUMkZtral3Wiz5NFxFrSjDHF3SfUAncnGM/LkbbG6EewfKwp2AGkQbNgB+Qsr+",
	"nEpyUeTiQm3D84dtza5bAf9hP5V3mMdYSNVFS1qagqpCfY8RjpCuDLw3/ugSs4UXU6OQmj6XE2/UCIDx",
	"uKQODJOik44FY8lFCUWWapN23tiE5pFm6zNa+t2LhfGcPOd16FLmxq41+HoTJFLrrr+p4o6UVPP60HIr",
	"C9iCwWIQ1LKdG/IzBH8HlNSdrKd8qyor4Ro64Vq+CEaNop24hvCtaT5mBUCF3r++TSoVhxTf5T1DhV97",
	"FkWyTMFu0nJBiKWdYgfMEkkjylZmdEzM1KPkILoWRc07+DPHihxds5s7yglUDWTyLOhtU6f5iUb4MQxw",
	"Fr5PiTIBE++m8aGjWVAadfsY0MG4xNqMnXqZDkuMK7w0Dg2crWgcn0TiLd8wFb+R4wbAIcm36s3EfRJK",
	"Roj9ags5SjXduLu744ThYMz0qjeNiuC62eHbG5L/EBreS8Kj46VUDQPIYPdaagJdeIEdX8B+tdKJvU5q",
	"xk5knv97/jdnizoM5PRqaowWa3AvIXjssKB046zwAq1oLrQQXzj39QT7SrmIIqs3fMeUxn+cvvaPmpdi",
	"ucMTSuCHz5hZc0dC3kVIvmsfr+gm3i+YzANgwS6gwlS0bjF1zGi4nRslAtpdgd44hZWBriDeBnTLE+fJ",
	"rWM5pl5shDF42fW2c4gFv/hQE2LDi1hHxsp03V7BoVap+/r/brO24qlCQamq5HlogwfM8E3PIE6tLgNx",
	"2TVs9qf1DdXjQAJN+8yWaHVI5y1uYdw7MnIjFSs/1u+hA/agreCg1cWdlnFMB/I2M3pPQuSkpdz3LkyN",
	"DxkAjU7mUNXrAPhUjTFUAPsY+E8WjRxbxhTw/yx4H+nGGMNLjRc/ApY7Kf8JWMmuulDbTMPSHAqFIMOq",
	"U4R1WywgGCeFzDVwQ7Eh5z94la2tiSikUyEperHxvjWjFLAUsmWWQla1TWgAWBpR7iKExeZpROuIs2dM",
	"SnBi2DUvf7gGrUUxtnHudFA3uLgmfTDJ+28Tyn9zpw4HEKbVfjCTENpMteg1d4FT1xsKLDSWy4LrIn5d",
	"SJaDdvc+u+E7c3vfh4NW106+OOD94JE0081vj/wgSNoESLnz7ss7eiYaAPk9uigmuBYwgjXhViCjiFUj",
	"noQhDOmyCnyblWqF+WUjBOiLT6Lvh5QVJdFgS/LQcfMY8RvsnwbrbvuDbxXOOmWK/efsB0QdKjw/SWH3",
	"njSypvUT/igikw5CoH+5asPCaXOG9J/K0bzEJIZOnmYQ7kISQ9hrCg+h+WDEk9G14I7sIjrIfYJvbK6d",
	"3s+o64NPZYKSDpuhbmv2BH6DaYOcee4Dd4ZGn4FSTEiZ+zzaI21CZEkO98AIeNTw2J+t7rRNMIUb55gm",
	"UPszZ7NKVVk+JRqQSvMX3qDtIe3COEIfkbl6ZN1N4IRpmlV0Cpt0ulYc2wdrtGvGIb9Mle9TsscMGiMc",
	"tGssV0vkZXiEyYyDOR6N8WLezz7qGmwaJsE405DXGg2aN3x3uK/QSEnYi7+dffbk6S9PP/ucuRdYIVZg",
	"2rLCvb48bcSYkH07y8eNERssz6Y3IeSlE+KCpyyk2zSb4s8acVvT1gwcdCU6xhKauAASxzHRD+ZWe4Xj",
	"tEHff67tSi3y3ncshYLff8+0Kst0WfdGdEuY+lO7FRn7ncRfgTbCWMcIu746YdtYWbNGcxwW97ymOiNK",
	"5r76ekMFwo4E46QWMhZqifwMs369f4PBtio9ryKfxL51eb2ILGIYnIHxGwtglaq8KC2WLAUR5pboKOfS",
	"GxoxvDOKnmyYLcVRpgjRxySnSS/uiLuf23e7Ndo0p3ebmBAvwqG8BWmOWdLHM9pvw0laU/qfhn8kUvTv",
	"jWs0y/09eEVSP7hd/+xJoA3TtRPkgQCM5GF2Muji9vptpVFNVnm03wdXZ1/8+K51gR5MGEBIwgcHwIsT",
	"K9v3mhh3D84fXLLzuwYp0VLejVFCZ/mHcjUD620ukmiLvJHCWjDEltRQLIwScc2LJr91RCsZpMFiL32n",
	"mZZlIn2W7CZ4pmLCcSqBvublx+caXwtt7BniA4ofx5Nm4hzKGMmESnO7Cm6v+KS5o3zJ+5tavsaU3f8C",
	"t0fJe84P5d3Fg9sMrV7YknoVbgXKAmY3OCaFAz35nC18Nf1KQy5M3w19E4STJmUQtFj60EvY2gM5iofW",
	"+bOydyDjZYgZYd9H7iSFZrsWwvaI/sFMZeTkJqk8RX0DskjgL8Wj4u6bB66LO1Zev11BkKi015EFQYZ9",
	"Racuj4peuEunNjBc5+TbuoPbxEXdrm1qNZvJBdzfvn1jF1OK0KSLrbvPsQrOvVRdP6rm+u9Q/4Zw5Mfw",
	"86Yo5uexiqhU9XOk+G5vP2pRHgwQ6ZRS/jCfrUCCEQaLBf/im0N83Ls0QEA5+cOjSrDepZAIISax1s7k",
	"0VRRkeQJ9ZH9Z4lqyJjvltda2B02Bg0GNPFLslLPN03VB181pPFd+bvPqitomjO3NSJqE27XbxQv8T4i",
	"l5p0t5AqT9hXW76pSm8OZn99sPgP+PQvz4rHnz75j8VfHn/2OIdnn33x+DH/4hl/8sWnT+DpXz579hie",
	"LD//YvG0ePrs6eLZ02eff/ZF/umzJ4tnn3/xHw8cH3IgE6Chdvfz2f+XnZUrlZ29Ps8uHbAtTnglvgW3",
	"N6grLxU2rnNIzfEkwoaLcvY8/PT/hBN2kqtNO3z4deYbsMzW1lbm+enpzc3NSfzJ6QqTwjOr6nx9GubB",
	"dmIdeeX1eRNNTnEvuKOt9Rg31ZPCGT778auLS3b2+vykJZjZ89njk8cnT3zvWskrMXs++xR/wtOzxn0/",
	"9cQ2e/7+w3x2ugZeYg0V98cGrBZ5eKSBFzv/f3PDVyvQJ5gwQD9dPz0NYsXpe58c/2Hfs9M4pOL0faeG",
	"QHHgSwwHOH0fOljuf7vTvdBHYkUfTIRi32unC+xaMfVVMNHL40tBZcOcvkdxefT3U2/zSD9EtYXOw2ko",
	"tDHyJqVUpx92UPjebt1C9g/n3onGy7nN13V1+h7/g6QdrYgqNJ7arTxFt+rp+w4i/OMBIrq/t5/Hb1xv",
	"VAEBOLVcUtvPfY9P39O/0USwrUALJzNiVRT/K1WvOsXuT7vhzzvpnZIlpGqO/CQNkE4bKsbvZN6mUjWn",
	"/bwIL1/sZB6E2xApiGf46ePHNP0z/M/Md0fpVeY49Yd1Nq3le7cmInLInlWtgZcSxsCezBCGJx8PhnNJ",
	"0YGOZRJr/zCfffYxsXDu1H3JS4Zv0vSffsRNAH0tcmCXsKmU5lqUO/aTbAIco16VKQq8kupGBsidXFBv",
	"NlzvUN7eqGswzLfBjIiTaXASDgVBoKO+pWG8mLjjI29mVb0oRT6bUwXMdyhT2ZR4EUw9w5mCmasdvHsq",
	"vjl4JqbvQldq3VNyZBKcB5LRafihyD3c37D3fUcpTfUgtUGzfzGCfzGCe2QEttZy9IhG9xfWzYLKp0zm",
	"PF/DPn4wvC2jC35WqVRhgIs9zMJ3pxjjFRddXtEG4M2ev5nWg8v7JsjsXIBxh/kkqBxOnm41At1wpHDm",
	"0TMa7fW+9sIf3v0p7vcXXIbz3Nlxcj5yXQrQDRVwOWwY8i8u8H8MF6DOR5z2dc4slKWJz75VePbJT+PL",
	"IUryn03kA53qla0w3fn5NFgXUgpm9833nT+7epVZ17ZQN9EsaJcnp9JQy3APa9P/+/SGC5stlfZFE7Fl",
	"+vBjC7w89R1Ser+2RckHT7DSevRjnJ6Y/PWUe3Uj9ayiBv0jD/v6cOqpV/lGXgqxweFxaxuLbU3IZxsr",
	"05t3jsthL2TPglvTyfPTU0wWWStjT2cf5u97ZpX44buGsEILv1mlxTXWqH83n20zpcVKSF5m3mTRtnma",
	"PT15PPvwvwMAAP//sjITDjT/AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
