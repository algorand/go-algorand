// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
