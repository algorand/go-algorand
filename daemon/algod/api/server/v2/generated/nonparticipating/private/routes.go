// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
