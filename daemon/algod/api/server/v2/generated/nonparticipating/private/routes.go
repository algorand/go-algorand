// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"fLj5nwAAAP//54eCASXiAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
