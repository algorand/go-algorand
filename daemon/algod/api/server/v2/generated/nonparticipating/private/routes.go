// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"cPP/AwAA//93BMBnrfYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
