// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XMbN7Lgv4Livip/HEfyZ3btq613ip1kdXESl6Vk7z3Ll4AzTRKrITABMBIZn/73",
	"KzSAGcwMQA4lxk7qvZ9scfDRaDQa/YXuj5NcrCrBgWs1eflxUlFJV6BB4l80z0XNdcYK81cBKpes0kzw",
	"yUv/jSgtGV9MphNmfq2oXk6mE05X0LYx/acTCb/WTEIxeallDdOJypewomZgvalM62akdbYQmRvixA5x",
	"+npys+UDLQoJSg2h/IGXG8J4XtYFEC0pVzQ3nxS5ZnpJ9JIp4joTxongQMSc6GWnMZkzKAt15Bf5aw1y",
	"E6zSTZ5e0k0LYiZFCUM4X4nVjHHwUEEDVLMhRAtSwBwbLakmZgYDq2+oBVFAZb4kcyF3gGqBCOEFXq8m",
	"L99PFPACJO5WDuwK/zuXAL9BpqlcgJ58mMYWN9cgM81WkaWdOuxLUHWpFcG2uMYFuwJOTK8j8l2tNJkB",
	"oZy8+/oVefr06QuzkBXVGgpHZMlVtbOHa7LdJy8nBdXgPw9pjZYLISkvsqb9u69f4fxnboFjW1GlIH5Y",
	"TswXcvo6tQDfMUJCjGtY4D50qN/0iByK9ucZzIWEkXtiGx90U8L5P+uu5FTny0owriP7QvArsZ+jPCzo",
	"vo2HNQB02lcGU9IM+v5R9uLDx8fTx49u/vL+JPtP9+fzpzcjl/+qGXcHBqIN81pK4PkmW0igeFqWlA/x",
	"8c7Rg1qKuizIkl7h5tMVsnrXl5i+lnVe0bI2dMJyKU7KhVCEOjIqYE7rUhM/Mal5adiUGc1RO2GKVFJc",
	"sQKKqeG+10uWL0lOlR0C25FrVpaGBmsFRYrW4qvbcphuQpQYuG6FD1zQHxcZ7bp2YALWyA2yvBQKMi12",
	"XE/+xqG8IOGF0t5Var/LipwvgeDk5oO9bBF33NB0WW6Ixn0tCFWEEn81TQmbk42oyTVuTskusb9bjcHa",
	"ihik4eZ07lFzeFPoGyAjgryZECVQjsjz526IMj5ni1qCItdL0Et350lQleAKiJj9C3Jttv1/n/3wPRGS",
	"fAdK0QW8pfklAZ6LAoojcjonXOiANBwtIQ5Nz9Q6HFyxS/5fShiaWKlFRfPL+I1eshWLrOo7umarekV4",
	"vZqBNFvqrxAtiARdS54CyI64gxRXdD2c9FzWPMf9b6ftyHKG2piqSrpBhK3o+u+Ppg4cRWhZkgp4wfiC",
	"6DVPynFm7t3gZVLUvBgh5mizp8HFqirI2ZxBQZpRtkDiptkFD+P7wdMKXwE4fpAkOM0sO8DhsI7QjDnd",
	"5gup6AICkjkiPzrmhl+1uATeEDqZbfBTJeGKiVo1nRIw4tTbJXAuNGSVhDmL0NiZQ4dhMLaN48ArJwPl",
	"gmvKOBSGOSPQQoNlVkmYggm36zvDW3xGFXzxLHXHt19H7v5c9Hd9646P2m1slNkjGbk6zVd3YOOSVaf/",
	"CP0wnFuxRWZ/HmwkW5yb22bOSryJ/mX2z6OhVsgEOojwd5NiC051LeHlBX9o/iIZOdOUF1QW5peV/em7",
	"utTsjC3MT6X96Y1YsPyMLRLIbGCNKlzYbWX/MePF2bFeR/WKN0Jc1lW4oLyjuM425PR1apPtmPsS5kmj",
	"7YaKx/naKyP79tDrZiMTQCZxV1HT8BI2Egy0NJ/jP+s50hOdy9/MP1VVmt66msdQa+jYXcloPnBmhZOq",
	"KllODRLfuc/mq2ECYBUJ2rY4xgv15ccAxEqKCqRmdlBaVVkpclpmSlONI/2bhPnk5eQvx6395dh2V8fB",
	"5G9MrzPsZERWKwZltKr2GOOtEX3UFmZhGDR+QjZh2R4KTYzbTTSkxAwLLuGKcn3UqiwdftAc4Pduphbf",
	"Vtqx+O6pYEmEE9twBspKwLbhPUUC1BNEK0G0okC6KMWs+eH+SVW1GMTvJ1Vl8YHSIzAUzGDNlFYPcPm0",
	"PUnhPKevj8g34dgoigtebszlYEUNczfM3a3lbrHGtuTW0I54TxHcTiGPzNZ4NBgx/xAUh2rFUpRG6tlJ",
	"K6bxP1zbkMzM76M6/zlILMRtmrhQ0XKYszoO/hIoN/d7lDMkHGfuOSIn/b63IxszSpxgbkUrW/fTjrsF",
	"jw0KryWtLIDui71LGUclzTaysN6Rm45kdFGYgzMc0BpCdeuztvM8RCFBUujB8GUp8st/ULU8wJmf+bGG",
	"xw+nIUugBUiypGp5NIlJGeHxakcbc8RMQ1TwySyY6qhZ4qGWt2NpBdU0WJqDNy6WWNRjP2R6ICO6yw/4",
	"H1oS89mcbcP67bBH5BwZmLLH2TkZCqPtWwXBzmQaoBVCkJVV8InRuveC8lU7eXyfRu3RV9am4HbILaLZ",
	"ofM1K9ShtgkHS+1VKKCevrYanYaVimhtzaqolHQTX7udawwCzkVFSriCsg+CZVk4mkWIWB+cL3wp1jGY",
	"vhTrAU8QazjITphxUK722N0B32sHmZC7MY9jj0G6WaCR5RWyBx6KQGaW1lp9MhPyduy4x2c5aW3whJpR",
	"g9to2kMSNq2rzJ3NiB3PNugN1Lo9t3PR/vAxjHWwcKbp74AFZUY9BBa6Ax0aC2JVsRIOQPrL6C04owqe",
	"PiFn/zh5/vjJz0+ef2FIspJiIemKzDYaFLnvlFWi9KaEB8OVobpYlzo++hfPvOW2O25sHCVqmcOKVsOh",
	"rEXYyoS2GTHthljrohlX3QA4iiOCudos2ol1dhjQXjNlRM7V7CCbkUJY0c5SEAdJATuJad/ltdNswiXK",
	"jawPoduDlEJGr65KCi1yUWZXIBUTEffSW9eCuBZe3q/6v1toyTVVxMyNtvCao4QVoSy95uP5vh36fM1b",
	"3Gzl/Ha9kdW5ecfsSxf53rSqSAUy02tOCpjVi45qOJdiRSgpsCPe0d+AtnILW8GZpqvqh/n8MLqzwIEi",
	"OixbgTIzEdvCSA0KcsFtaMgOddWNOgY9fcR4m6VOA+AwcrbhORpeD3Fs05r8inH0AqkNzwO13sBYQrHo",
	"kOXd1fcUOuxU91QEHIOON/gZLT+vodT0ayHPW7HvGynq6uBCXn/OscuhbjHOtlSYvt6owPii7IYjLQzs",
	"R7E1fpYFvfLH160BoUeKfMMWSx3oWW+lEPPDwxibJQYofrBaamn6DHXV70VhmImu1QFEsHawlsMZug35",
	"Gp2JWhNKuCgAN79WceEsEcCCnnN0+OtQ3tNLq3jOwFBXTmuz2roi6M4e3Bdtx4zm9oRmiBqVcOY1Xljb",
	"yk5ngyNKCbTYkBkAJ2LmPGbOl4eLpOiL1168caJhhF904KqkyEEpKDJnqdsJmm9nrw69BU8IOALczEKU",
	"IHMq7wzs5dVOOC9hk2HkiCL3v/1JPfgM8GqhabkDsdgmht7G7uHcokOox02/jeD6k4dkRyUQf68QLVCa",
	"LUFDCoV74SS5f32IBrt4d7RcgUQH5e9K8X6SuxFQA+rvTO93hbauEvGQTr01Ep7ZME658IJVbLCSKp3t",
	"YsumUUcHNysIOGGME+PACcHrDVXaOtUZL9AWaK8TnMcKYWaKNMBJNcSM/JPXQIZj5+Ye5KpWjTqi6qoS",
	"UkMRWwOH9Za5vod1M5eYB2M3Oo8WpFawa+QUloLxHbLsSiyCqG58Ty7qZLg49NCYe34TRWUHiBYR2wA5",
	"860C7IYxYQlAmGoRbQmHqR7lNIFo04nSoqoMt9BZzZt+KTSd2dYn+se27ZC4qG7v7UKAwlA0195Bfm0x",
	"a6MBl1QRBwdZ0Usje6AZxHr/hzCbw5gpxnPItlE+qnimVXgEdh7SulpIWkBWQEk3w0F/tJ+J/bxtANzx",
	"Vt0VGjIb1hXf9JaSfRTNlqEFjqdiwiPBLyQ3R9CoAi2BuN47Ri4Ax44xJ0dH95qhcK7oFvnxcNl2qyMj",
	"4m14JbTZcUcPCLLj6GMATuChGfr2qMDOWat79qf4D1BugkaO2H+SDajUEtrx91pAwobqIuaD89Jj7z0O",
	"HGWbSTa2g4+kjmzCoPuWSs1yVqGu8y1sDq769SeI+l1JAZqyEgoSfLBqYBX2JzYgqT/m7VTBUba3IfgD",
	"41tkOSVTKPJ0gb+EDercb22ka2DqOIQuGxnV3E+UEwTUx88ZETxsAmua63JjBDW9hA25BglE1bMV09pG",
	"sHdVXS2qLBwg6tfYMqPzakZ9ilvdrGc4VLC84VZMJ1Yn2A7feU8x6KDD6QKVEOUIC9kAGVEIRgXAkEqY",
	"XWcumN6HU3tK6gDpmDa6tJvr/57qoBlXQP5D1CSnHFWuWkMj0wiJggIKkGYGI4I1c7pQlxZDUMIKrCaJ",
	"Xx4+7C/84UO350yROVz7FyimYR8dDx+iHeetULpzuA5gDzXH7TRyfaDDx1x8Tgvp85TdoRZu5DE7+bY3",
	"eOMlMmdKKUe4Zvl3ZgC9k7kes/aQRsaFmeC4o3w5HZf9cN2472dsVZdUH8JrBVe0zMQVSMkK2MnJ3cRM",
	"8K+uaPlD0w1f10BuaDSHLMc3ISPHgnPTxz4jMeMwzswBtiGkYwGCU9vrzHbaoWK2UXpstYKCUQ3lhlQS",
	"crCvJ4zkqJqlHhEbV5kvKV+gwiBFvXCBfXYcZPi1sqYZWfPBEFGhSq95hkbu2AXggrn9AxojTgE1Kl3f",
	"Qm4VmGvazOfeTI25mYM96HsMok6y6SSp8RqkXrUar0VO9xXQiMugI+8F+GknHulKQdQZ2WeIr3BbzGEy",
	"m/v7mOzboWNQDicOQg3bj6loQ6Nul5sDCD12ICKhkqDwigrNVMp+FfPwxZ+7w9RGaVgNLfm268+J4/cu",
	"qS8KXjIO2Upw2EQfuTMO3+HH6HHCazLRGQWWVN++DtKBvwdWd54x1HhX/OJu909o32OlvhbyUC5RO+Bo",
	"8X6EB3Knu91NeVs/KS3LiGvRvQfqMwA1bfIPMEmoUiJnKLOdFmpqD5rzRrrHQ130v22inA9w9vrj9nxo",
	"4VNTtBFDWRFK8pKhBVlwpWWd6wtO0UYVLDUS/OSV8bTV8pVvEjeTRqyYbqgLTjHwrbFcRQM25hAx03wN",
	"4I2Xql4sQOmerjMHuOCuFeOk5kzjXCtzXDJ7XiqQGIF0ZFuu6IbMDU1oQX4DKcis1l3pH5+7Kc3K0jn0",
	"zDREzC841aQEqjT5jvHzNQ7nnf7+yHLQ10JeNliI3+4L4KCYyuJBWt/YrxhQ7Ja/dMHFmJ7AfvbBmu37",
	"24lZZufJ/f+9/+8v359k/0mz3x5lL/7H8YePz24ePBz8+OTm73//f92fnt78/cG//1tspzzsscdYDvLT",
	"104zPn2N6k/rAxrA/sns/yvGsyiRhdEcPdoi9/HhsSOgB13jmF7CBddrbgjpipasMLzlNuTQv2EGZ9Ge",
	"jh7VdDaiZwzza91TqbgDlyERJtNjjbeWooZxjfFnj+iUdC8Z8bzMa2630kvf9lWPjy8T82nztNVmvXlJ",
	"8N3jkvrgSPfnk+dfTKbte8Xm+2Q6cV8/RCiZFevYq9QC1jFd0R0QPBj3FKnoRoGOcw+EPRpKZ2M7wmFX",
	"sJqBVEtWfXpOoTSbxTmcfyvhbE5rfsptYLw5P+ji3DjPiZh/eri1BCig0stYNoyOoIat2t0E6IWdVFJc",
	"AZ8SdgRHfZtPYfRFF9RXAp1jVgbUPsUYbag5B5bQPFUEWA8XMsqwEqOf3rMAd/mrg6tDbuAYXP05G3+m",
	"/1sLcu+br87JsWOY6p59IG2HDp60RlRp92qrE5BkuJnNAWSFvAt+wV/DHK0Pgr+84AXV9HhGFcvVca1A",
	"fklLynM4Wgjy0j8Ee001veADSSuZpit4gkeqelaynFyGCklLnjb1ynCEi4v3tFyIi4sPg9iMofrgpory",
	"FztBZgRhUevMJY7IJFxTGfN9qSZxAI5sM8Nsm9UK2aK2BlKfmMKNH+d5tKpU/wHxcPlVVZrlB2So3PNY",
	"s2VEaSG9LGIEFAsN7u/3wl0Mkl57u0qtQJFfVrR6z7j+QLKL+tGjp0A6L2p/cVe+oclNBaOtK8kHzn2j",
	"Ci7cqpWw1pJmFV3EXGwXF+810Ap3H+XlFdo4ypJgt85LXh+Yj0O1C/D4SG+AhWPvV4m4uDPbyycJiy8B",
	"P+EWYhsjbrSO/9vuV/C299bb1XsfPNilWi8zc7ajq1KGxP3ONLmDFkbI8tEYii1QW3VplmZA8iXkly7/",
	"DawqvZl2uvuAHydoetbBlM2MZF/mYW4OdFDMgNRVQZ0oTvmmnyRBgdY+rPgdXMLmXLSpPfbJitB9pK9S",
	"BxUpNZAuDbGGx9aN0d98F1WGin1V+bfu+OjRk8XLhi58n/RBtiLvAQ5xjCg6j8hTiKAygghL/AkU3GKh",
	"Zrw7kX5seUbLmNmbL5IlyfN+4pq0ypMLAAtXg1Z3+30FmGZNXCsyo0ZuFy5DmH2IHnCxWtEFJCTk0Ec0",
	"8rl3x6+Eg+y696I3nZj3L7TBfRMF2TbOzJqjlALmiyEVVGZ6YX9+JuuGdJ4JTPzpEDYrUUxq4iMt06Gy",
	"46uzmQxToMUJGCRvBQ4PRhcjoWSzpMonL8Mcb/4sj5IBfsfECtvS6ZwGEWtBIrcmWY7nuf1zOtAuXVId",
	"n0nHp88JVcsRqXCMhI9B8rHtEBwFoAJKWNiF28aeUNokD+0GGTh+mM9LxoFkseC3wAwaXDNuDjDy8UNC",
	"rAWejB4hRsYB2Ohex4HJ9yI8m3yxD5DcJamgfmx0zAd/Q/z5mA0HNyKPqAwLZwmvVu45AHURk8391Yvb",
	"xWEI41Ni2NwVLQ2bcxpfO8ggqwuKrb0cLi7A40FKnN3iALEXy15rslfRbVYTykwe6LhAtwXimVhn9v1o",
	"VOKdrWeG3qMR8viaNXYwbf6ce4rMxBqDhvBqsRHZO2BJw+HBCDT8NVNIr9gvdZtbYLZNu12ailGhQpJx",
	"5ryGXFLixJipExJMilzuBylxbgVAz9jR5pd2yu9OJbUrngwv8/ZWm7ap3vzjo9jxTx2h6C4l8De0wjRJ",
	"bN72JZaonaIb+9LN3xOIkDGiN2xi6KQZuoIUlIBKQdYRorLLmOfU6DaAN86Z7xYYLzBLEOWbB0FAlYQF",
	"UxpaI7qPk/gc5kmKyQmFmKdXpys5N+t7J0RzTVk3InbsLPOTrwAjkudMKp2hByK6BNPoa4VK9demaVxW",
	"6oZs2VS+rIjzBpz2EjZZwco6Tq9u3m9fm2m/b1iiqmfIbxm3ASszTD0dDeTcMrWN9d264Dd2wW/owdY7",
	"7jSYpmZiacilO8ef5Fz0OO82dhAhwBhxDHctidItDDJ4gDvkjoHcFPj4j7ZZXweHqfBj74za8c+AU3eU",
	"HSm6lsBgsHUVDN1ERixhOsjcPHwZmzgDtKpYse7ZQu2oSY2Z7mXw8PnueljA3XWD7cBANy4vGubcyRXo",
	"ov+czecYBeRjI8LZLXd5hruBdcMklI0QN3Kd3/50poWkC3BG0MxOf6chEPR9lhykeFREM+vNLNh8DqHx",
	"T93GcNUBrm/iiRZyGEFQcQthzbj+4lmMZHZQSgvjbpTFqSNCCymX0PnQyOpFqEDHbKqUBFtzC0tp9LXo",
	"t7DJfjLaCKkok6qNDnNWzy6v22PXr1bfwgZH3hl0ZQDbsSuokr4DpMGYCbD5ZB9JNOpOmK8UEzx0tnCP",
	"nTqJ79KBtsZlmE0TfxuC3cnA2l3KXQ5G66MzsIzZjbO4a8ycHugivk/KuzaBJQxvITkG4lU4FVO+Hs/w",
	"2mmeQu+i3XOgpSdeXM7kZjq5myMqdnO5EXfg+m1zWUbxjIFO1jHR8SvviXJaVVJc0TJz7rrURS/Flbvo",
	"sbn37n1iwTFO2edfnbx568C/mU7yEqjMGsUruSpsV/1pVmVz0m6/StCC5i0gVjEPNr9JpBm6+K6X4Aon",
	"BLr9IMNz674NjqJz+c3j8ZY7eZ/zNNslbvE4Q9U4nFtniPU3d33M9Iqy0nshPLSJ2Ehc3Lg04VGuEA5w",
	"Z191EHKQHZTdDE53/HS01LWDJ+FcP2BmtLh2wV3eNGRFzvdMDy49fS1kh/m7hzFR3/XvJ1YZIdviMREq",
	"6Ivx9IWpI2IFr18Wv5jT+PBheNQePpySX0r3IQAQf5+531G/ePgw6laIWg0Mk0CjAKcreNAE+SY34tOa",
	"mDhcj7ugT65WjWQp0mTYUKh1Qnt0XzvsXUvm8Fm4Xwoowfy0+x1db9MtukNgxpygs9RDmCbGaWXr/ygi",
	"eD+kD99gGdJCZr+imOHcemmGR4jXK/RsZKpkedzny2fKsFduY3lMY4KNE8YxM2LNEqFhvGbBWKbZmJR9",
	"PSCDOaLIVNGsgS3uZsId75qzX2sgrDBazZyBxHutd9V55QBHHQikRvUczuUGthED7fB3sXmE2f37MiMC",
	"sd3gEUYODcB93Zjw/UIbD1mrM+0bgBjOOGDcW4IHHX04araPKZbdCKBxesyYOpCe0bkyA4k5onUdmcrm",
	"UvwGcbszmusj77B9PQOGUbe/QaiehdXMOiyl8Ta15Snb2Xdt93jdOLXxd9aF/aKbEgq3uUzjp3q/jbyN",
	"0qvi2UIdklNKWOh67EamJlgLHq8gFguz1/uwBMrtebKPkDsPHOKnMnxKdGzHb0+lg3nw/Kqk1zMaS+1v",
	"dCEDU7C9nQAKLYjv7DdANU9s7ewkCCBs2jKbyKgC2eahGCZFvKVeY6cdrdG0CgxSVKi6TG3QV6lEZJia",
	"X1NuSyKafpZfud4KrMfT9LoWEtOQqXisRwE5W0XNsRcX74t86Ncv2ILZan+1gqCcnBvIVlK1VORK8jUP",
	"xx1qTufk0TSoael2o2BXTLFZCdjisW0xowqvy8b72HQxywOulwqbPxnRfFnzQkKhl8oiVgnS6J4o5DUR",
	"SzPQ1wCcPMJ2j1+Q+xirpdgVPDBYdELQ5OXjF+hpt388it2yrlrjNpZdIM/+p+PZcTrGYDU7hmGSbtSj",
	"aMYmW645fTtsOU2265izhC3dhbL7LK0opwuIhwevdsBk++Juove0hxduvQGgtBQbwnR8ftDU8KfEk0PD",
	"/iwYJBerFdMrF9GjxMrQU1srzk7qh7OFS12ZDw+X/4iBcZWPC+rZuj6xGkNXiScDGL74PV1BF61TQm3u",
	"uZK1Iau++BA59aktse5JU+7E4sbMZZaOsiRGsM5JJRnXaP+o9Tz7m1GLJc0N+ztKgZvNvngWqR/STbHP",
	"9wP8k+NdggJ5FUe9TJC9l1lcX3KfC56tDEcpHrRPfINTmYzgi8dqpQLGtg89VvI1o2RJcqs75EYDTn0n",
	"wuNbBrwjKTbr2Yse917ZJ6fMWsbJg9Zmh35898ZJGSshY/mq2+PuJA4JWjK4wgcb8U0yY95xL2Q5ahfu",
	"Av3nDTfxImcglvmzHFUEAo/mtreaRor/6bs28S46Vu1DmJ4NUMiItdPZ7T5xcNd+Vre+/9bG5+C3BOZG",
	"o81WdR9gJRGWa+Numz6f+Olu1Nxr97xjcHz8C5FGB0c5/uFDBPrhw6kTg3950v1s2fvDh/H8l1GTm/m1",
	"xcJdNGLsG9vDL0XEAOaLTTXBQ+55bsQAmbqkzAfDBGduqCnpFvb59FLEYR5+xIP74qfg4uI9fvF4wD/6",
	"iPjMzBI3sA1fTh/2bmGzKMkUzfcgrJiSL8V6LOH07iBPPH8AFCVQMtI8hysZFG6Luut3xosENGpGnUEp",
	"jJIZ1qQI7fl/HjybxU+3YLtmZfFTm1qod5FIyvNlNChzZjr+3BZYb5ZoWWU0zf2Scg5ldDir2/7sdeCI",
	"lv4vMXaeFeMj2/YLB9rl9hbXAt4F0wPlJzToZbo0E4RY7WZtaV4FlwtREJynzaneMsdhBc6gLNivNSgd",
	"Oxr4wb5MQmeXYb62KhUBXqD164h8g/kTDCydhLlodfKpCLtpueqqFLSYYorE869O3hA7q+1jywTbqlgL",
	"NLp0VxG1ko9PU9ZU/I2/vx8/zvYHwWbVSmdNEatYhiPToi2zxXqhE2iOCbFzRF5bS5jydhY7CcFEm3IF",
	"RVAzy+piSBPmP1rTfIkmps5Flib58eXcPFW2BvigNnRTQwHPnYHbVXSzBd2mROglyGumAF9cwhV0kyo1",
	"GcacidMnWeouT9acW0o52kOmaCom7It2D5wVSLxvOApZD/F7GhhsNcR9q9udYa9oSud+qbye89an6Glq",
	"/n7nbMQ55YKzHBMqxwQiTAAzzts0Ivd03E2kJu6ERg5XtEBf89bLYTFZss8zQoe4oec2+Go21VKH/VPD",
	"2hVuWYBWjrNBMfV1Jp1fg3EFriaGIaKQTwoZiU2JxrM3fvA9yQhzOyQMVV+bb987MyY+er5kHA0WDm1O",
	"zLaeh1IxdDBywjRZCFBuPd0EV+q96XOEuZ4KWH84eiMWLD9jCxzDRkOZZdvQv+FQJz4Q0AXembavTFuX",
	"gbf5uRPVYyc9qSo3aboKabz08ponERwLP/HxAAFym/HD0baQ29YIXrxPDaHBFQYfQYX38IAwmoqcvfLX",
	"RkWwFIUtiH2HFE3Dx3gEjDeMe09Y/ILIo1cCbgye10Q/lUuqrQg4iqedAy0Tcez4rs+6Uu86VD//sEEJ",
	"rtHPkd7GtphognE0DVrBjfIN8YfCUHcgTLyiZRMBGykNilKVE6IKfCPSKxYaYxyGcftyxN0LYEcF8mnb",
	"HXN673sTpTIdzepiATqjRRErUfIlfiX4lRQ1Sg6whrxuSllUFckxsWc30+mQ2txEueCqXm2Zyze443RB",
	"9d0INYQVgP0OYyaF2Qb/3ac2fBP7uvdbNh/oWuyX3nf4Ni8m9RqazhRbZOMxgXfK3dHRTn07Qm/7H5TS",
	"S7HoAvI5jKQJLhfuUYy/fWUujjD93yDM2F4tTXY+DOkV+N0ntGjySnW5El5lg2ol6LxuarJvN0Okq6tP",
	"8fJLvB8NTd72frVm4NQr0jz56Jlql35FU7KVBSVTWtiQz54RfegJSoV52ijPwxmf3Vq3IjTtgvm243Cx",
	"oT4ts0g6Wm7nC2k3eF9nyLdXqYfFPts3fu9XX74El5OtknDFRO2DaHwoq1cJ7a+dWsbN0+7o+qMB4p/b",
	"+Jw0lZ+7Knh2mU4n//Yn60wjwLXc/AEM54NNH9R1Hkq71jzVNiFNAaVRBZU6t+KYTPixpOtONuxUlt5R",
	"F3tAVq/HiAPDOtfTyWmx14UZS9w/saPEjl28anU6r3GbyxiPWCUUa+uYxcpZj4wZP8eK1EFe5uFYPpbw",
	"CnKNxevaGCkJsE+WZjOZt93/d37jtDrdhNa7tMbbchkPK9btuOMH6UaClDm22tfR+My9J00krH3Ic00V",
	"5rmXaOPuPn0d/QBvPodcs6sd6V3+uQQepA6ZersMwjIPsr2w5jkKZgfd3+rYArQt+8pWeIIs/XcGJ/Uc",
	"+RI29xTpUEO0/FjzFus2iSERA8gdMkMiQsUizawh2QX/MNVQBmLBR3ba7tCm2E5WLg6SFd1yLk+S5uJo",
	"ExhtmTJeOnXUXKbrXmm98GVFKgPMsPJiWv94jYUulYtzok1iyVBLJ6fD9PvXLjElJuNpfCc+RSUo/5vP",
	"vGVnKdklhLWV0VN1TWXhW0RNL96qk225jwZpW3zVwD7Q82Zm1sbhD33VkYTO+KQlL4URI7LUu6Bu6HsT",
	"N3ZP2QA/W18Mg/oNXHOQrgY9yr+lUJBp4eP2t8GxDRU2ivFWSFDJIgoWuGRq03dt7lYsJkMxlSl1wYvh",
	"AomEFTXQySDDanrObch+Zb/7t9S+mMhOC1NDr7ur2vkXGEwNkBhS/Zy423L3G+3bGJsY5yAz73nqp1vl",
	"ILvekEqKos7tBR0ejMYgNzoFyhZWErXT5MNV9nSE4K3zJWyOrRLkywH6HQyBtpKTBT1I09fb5IOa31QM",
	"7sVBwPuclqvppBKizBLOjtNhjtg+xV+y/BIKYm4KH6mcqPRK7qONvfFmXy83PidqVQGH4sERISfcvg3x",
	"ju1ukaLe5Pye3jb/Gmctapu22RnVji54PMgeEyrLO3IzP8x2HqbAsLo7TmUH2ZGBdJ3ITyvpdaTu8dFY",
	"rXzoau7Xom2JykIRk0nOrMfqFR70mOEIX7IHKRfQkUmJ83QRVYpYSOZtXtuboeKYCidDgDTwMY++Gyjc",
	"4FEERKurRk6hzWDmcpeJOZHQOpG98EDzHJRqPS27krgNC8HGNPr+zM0sXX7XTxuHj0OELLzIw1Rbe5nK",
	"GdOSys1tUq0NCtEOrCdJLO8Mx2oisdqFtNFYQxyWpbjOkFllTR7zmGpr2qnuZexLt7T9zKmeQRDXRZUT",
	"1DZkSQuSCykhD3vEn+1ZqFZCQlYKDPOKeaDn2sjdK3yrw0kpFkRUuSjA1gOIU1BqrppzimITBFE1URRY",
	"2sFHn7ZPQMcjpzxUFWSbnMcuOrO+zETgKSiXjMdhyDYewrulgvBemfhP52gRYhjr0n17baXPsI4y7FlG",
	"mZWlNxikKimTH1WN4Uj48MZM8YyshNJOs7MjqWaoNsTrfi64lqIsu0YgKxIvnGX7O7o+yXP9RojLGc0v",
	"H6AeyYVuVlpM/bPUfjBeO5PsZWQaWfL5fBmx8+Is/tTtXdfZcY69y7EGYH7YzbF227hPYmWru+vq12Hn",
	"idyZWqxYHqfhP1d0WzImLcYSoqmebEUk+zgfmyGjDi+HJpgBWdIQzcANwcb2y/E059RF5mH+ixJvf1wy",
	"B3dJJC6mIZ90UkuWJ2WrHgAIqX0xqmtpyyiFkk/DVcTCvjBHl3Qf0JFcHCN/7gabGeHgQGm4E1CDaMMG",
	"wPtW2Z/alFw2cnEm1v77gzZn162Av9lO5bHS85FT3JCWq4zv83skOEI8M/DW+CMsEu5v0N1RSE3Ju5E3",
	"agBAOi6pA8Oo6KR9wZhTVkKRUZ243NEmNA00W/eipV/IlCnHyXNqL+wlEDN2LcHlm7Aida/weUUNKYmm",
	"+dByywtYg8JkELZ6M1XWz+D9HVDaElI95VtUWQlX0AnXckkwahTt2BX4vqrpTAqACr1/fZtULA4pvMt7",
	"hgq39iyIZBmD3ajlwiLW7hTZYZaIGlHWPLPHRI09SgaiK1bUtIM/ta/I0TW7maMcQdVAJs+83jZ2mh/t",
	"CO/8ACe+f0yU8Zj4MI4P7c2C4qjbxoB2xiXWKnXqeTwsMczw0jg0cLaicXxaEm/5hqroNU8bAIck36o3",
	"I/eJCR4g9qs15CjVdOPu7o4TgoMR1cvelBTBZbPDtzckfxYa3krCyfFiqoYCZLBbLTWeLpzAjg2wdCU3",
	"Yq+RmrFclOP/jv9Nsdq+Hcjo1bZ6VajBvQbvscOE0o2zwgm0rLnQfHzh1OUT7CvlLIisXtENERL/Mfra",
	"rzUt2XyDJ9SC77sRtaSGhJyL0PquXbyimXi7YDL1gHm7gPBT2XWzsWMGw23MKAHQ5gp0xinMDHQJ4Tag",
	"W95ynlwblqPq2YophZddbzuHWHCL9zkhVrQIdWTMTNctG+pzlZre/7N9tRVO5RNKVSXNfa0yIIquegZx",
	"W4/QE5dewmr7s76heuxJoKlx2BKt9M95i1sY9/aM3IjFyqfqPXTAHtR+8+UeDrOMfYoRty+jtzyIHLWU",
	"Q+/C2PiQAdDoZPZZvXaAb7Mx+gxgnwL/0aSRqWWMAf+PgvdEybwQXlsd7xNgufPkPwKrtavOxDqTMFe7",
	"QiGsYdUowrJNFuCNk4znEqiysSGnPziVrc2JyLhRIW30YuN9a0YpYM54yywZr2od0QAwNSLfBAgLzdOI",
	"1oSzJyUlGDHsipY/XIGUrEhtnDkdtmRXmJPem+Rd34jy39ypwwGYarUffEkI7Uu1oJm5wG3VGxtYqDTl",
	"BZVF2JxxkoM09z65pht1e9+HgVbWRr7Y4f2ggTTTfd8e+EGQtC0g5ca5L+/omWgApAd0UYxwLWAEa8St",
	"YI0iWiQ8CUMY4mkV6DorxQLflyUI0CWfRN+PVVYER4OtlYf2m0ex32D7NJh32x18LXDWMVNsP2c/IOpQ",
	"4fmRM731pFlrWv/Bn43ItAfB0z9ftGHhdnOG9B97o3mOjxg67zT7Beb9XtvwEDsfJDwZXQtuYhfRQe4e",
	"+Ibm2vH1jLo++NhLUKvDZqjbqi2B36DaIGeau8CdodFnoBRbpEzdO9o9bULWkuzvgQR4tiqtO1vdaZtg",
	"CjPOPkWgtr+czSpRZfmYaECbmr9wBm0HaRfGBH0E5urEupvACdUUq+gkNulUrdi3DlayasYuv0yVb1Oy",
	"UwaNBAftGsvFHHkZHmFrxsE3Ho3xYtp/fdQ12DRMglAiIa8lGjSv6WZ3XaFEStizf5w8f/zk5yfPvyCm",
	"ASnYAlSbVrhXl6eNGGO8b2f5tDFig+Xp+Cb4d+kWcd5T5p/bNJvizprltqrNGTioSrSPJTRyAUSOY6Qe",
	"zK32Csdpg77/WNsVW+TBdyyGgt9nz1xka3wBJ9zpL2JOtvOMbs0/HecXRviPXFJ+a2+xwJQ9Nv0u+jb0",
	"2Bpk/zBUGHnofTDaa5b7e1BcVMq8XancUaANH/1GyAMBSLzm67zDCitpt/kqpbXtohXYO8z6l9h3rSNt",
	"Z9g5QuI77AAvfJ7XtmsipR04nznx43cNUoKlfEhRQmf5u178uQW2nsdgi5yqqzUoy5bEULgInnOqV80r",
	"yYRsO3hMiWWzjX5TlpFHmFb7xjMVEo4RLOUVLT8918B66ieIDyjepZ9ehC/xQiRbVKrb5QF7Q0fNHby6",
	"O9zU/C0+/PwnmD2K3nNuKOd0HNxmaDvBwsYLfyvYt6TkGse0QSWPvyAzl5O9kpAz1XdmWo9TEBV4BZLN",
	"XQAfrPWOl2671vmT0Hcg47mPPCDfB04JgcafFsL2iH5mppI4uVEqj1HfgCwi+IvxqLCG447r4o75u2+X",
	"ViJIELVnWolhdcqxy7OpE8ylUysYrnP0bd3BbeSibtc2NifK6DTgFxfv9WxMKpN4ym7THXOpHCR3916Z",
	"u3+HLCoWR24MN2+MYn5K5dW0uSMTKVx7+1GzcmeYQSch7810sgAOiilMOfuzKzHwae9SD4F92T08qhbW",
	"u6SjsIiJrLUzeTBVkGp3RJZd1y2SUxdfTeW1ZHqD5SW9GYb9HM338k2TO8Dlnmg8IO7u0+ISmhK/baaB",
	"Wvnb9RtBS7yPrGOGm1tIlEfkqzVdVaUzKpK/35v9FZ7+7Vnx6Onjv87+9uj5oxyePX/x6BF98Yw+fvH0",
	"MTz52/Nnj+Dx/IsXsyfFk2dPZs+ePPvi+Yv86bPHs2dfvPjrPcOHDMgWUJ8B+uXk/2Qn5UJkJ29Ps3MD",
	"bIsTWrFvwewN6spzgeXPDFJzPImwoqycvPQ//S9/wo5ysWqH979OXBmPyVLrSr08Pr6+vj4Kuxwv8Glx",
	"pkWdL4/9PFiUqiOvvD1tYpJt9ATuaGuDxE11pHCC3959dXZOTt6eHrUEM3k5eXT06Oixq4DKacUmLydP",
	"8Sc8PUvc92NHbJOXH2+mk+Ml0BIzcZg/VqAly/0nCbTYuP+ra7pYgDzCsHP709WTYy9WHH90T6xvtn07",
	"Dh3zxx87L9GLHT3RqXz80ddB3N66UwPPxfMEHUZCsa3Z8QxrH4xtCiponF4KKhvq+COKy8nfj53NI/4R",
	"1RZ7Ho59uoZ4yw6WPuq1gXVHjzUrgpXkVOfLujr+iP9B6r2x7KSEWOoGm5Obkrb5lDBN6ExIrJyn86Xh",
	"IL5kF1NBy7CQ7mlhjoHp9cpC4Cugopd28vL9MAAdByJ+JOQZ5kC0R7ozU8u10cEZ1Plv7qRO+/Zmev8o",
	"e/Hh4+Pp40c3fzE3j/vz+dObkW81XjXjkrPmWhnZ8APWu8KoNDzpTx498uzNKQ8BaR67kxwsbqBEtYu0",
	"m9QEvQ1vfUcL6QBjt1W9gUiDjB11eXrDD4UX5OjP9lzxVktTJ9EgDt8vhFAQ/y4S53786eY+5TbUztwc",
	"9oa7mU6ef8rVn3JD8rQk2DIotDjc+h/5JRfX3Lc04ki9WlG58cdYdZgCcZuNlx5dKHR8SXZFUQrkggfZ",
	"k/hi8gHf4cfepib4jdL0FvzmzPT6b37zqfgNbtIh+E13oAPzmyd7nvk//4r/a3PYZ4/+9ukg8E/rz9kK",
	"RK3/rBz+zLLbO3F4J3Da7NDHes2PMaTr+GNHfHafB+Jz9/e2e9jiaiUK8PKumM9tyfFtn48/2n+DiWBd",
	"gWQr4Lb2p/vVZs48xsqTm+HPG55Hfxyuo5M1MPHz8cfOn139Qi1rXYhrWwIpemWeVZAzWrqSv2hMbhRT",
	"LYgfoE1TSH5wmZXLjX97TyiWfBG1bi0HNijVPWprfDv4xl0tnRF9wThOgEZ6nMXWtqZByI+CXPAC9eHe",
	"9ewg+14UMLye8QL+tQa5aW9gB+Nk2uHPjsAjlaTvfN0N2enNfuSPzgTrCRsSh/lYq/7fx9eUaXOJu3yB",
	"iNFhZw20PHbFQXq/tvm4B18wyXjwY/gyL/rrMe1Se1dP9/X0ox/7Snzsq1NiE418WKz/3Br0QgMZkktj",
	"Gnv/wew6lgF2lNTae14eH+M7iaVQ+nhyM/3YswWFHz80G+2r1zUbfvPh5v8HAAD//xEUdXwC+AAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
