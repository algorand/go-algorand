// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XMbN7Lgv4Livip/HEeSv7JrX229U+wkq4uTuCwle+9ZvgScaZJYDYEJgJHI+Py/",
	"X6EBzGBmAHIoMXZS7/1ki4OPRqPR6C90f5jkYlUJDlyryYsPk4pKugINEv+ieS5qrjNWmL8KULlklWaC",
	"T174b0RpyfhiMp0w82tF9XIynXC6graN6T+dSPi1ZhKKyQsta5hOVL6EFTUD601lWjcjrbOFyNwQp3aI",
	"s1eTj1s+0KKQoNQQyh94uSGM52VdANGSckVz80mRG6aXRC+ZIq4zYZwIDkTMiV52GpM5g7JQR36Rv9Yg",
	"N8Eq3eTpJX1sQcykKGEI50uxmjEOHipogGo2hGhBCphjoyXVxMxgYPUNtSAKqMyXZC7kDlAtECG8wOvV",
	"5MW7iQJegMTdyoFd43/nEuA3yDSVC9CT99PY4uYaZKbZKrK0M4d9CaoutSLYFte4YNfAiel1RL6rlSYz",
	"IJSTt1+/JE+ePHluFrKiWkPhiCy5qnb2cE22++TFpKAa/OchrdFyISTlRda0f/v1S5z/3C1wbCuqFMQP",
	"y6n5Qs5epRbgO0ZIiHENC9yHDvWbHpFD0f48g7mQMHJPbOODbko4/2fdlZzqfFkJxnVkXwh+JfZzlIcF",
	"3bfxsAaATvvKYEqaQd+dZM/ff3g0fXTy8S/vTrP/dH8+e/Jx5PJfNuPuwEC0YV5LCTzfZAsJFE/LkvIh",
	"Pt46elBLUZcFWdJr3Hy6Qlbv+hLT17LOa1rWhk5YLsVpuRCKUEdGBcxpXWriJyY1Lw2bMqM5aidMkUqK",
	"a1ZAMTXc92bJ8iXJqbJDYDtyw8rS0GCtoEjRWnx1Ww7TxxAlBq5b4QMX9MdFRruuHZiANXKDLC+FgkyL",
	"HdeTv3EoL0h4obR3ldrvsiIXSyA4uflgL1vEHTc0XZYbonFfC0IVocRfTVPC5mQjanKDm1OyK+zvVmOw",
	"tiIGabg5nXvUHN4U+gbIiCBvJkQJlCPy/LkboozP2aKWoMjNEvTS3XkSVCW4AiJm/4Jcm23/3+c/fE+E",
	"JN+BUnQBb2h+RYDnooDiiJzNCRc6IA1HS4hD0zO1DgdX7JL/lxKGJlZqUdH8Kn6jl2zFIqv6jq7Zql4R",
	"Xq9mIM2W+itECyJB15KnALIj7iDFFV0PJ72QNc9x/9tpO7KcoTamqpJuEGEruv77ydSBowgtS1IBLxhf",
	"EL3mSTnOzL0bvEyKmhcjxBxt9jS4WFUFOZszKEgzyhZI3DS74GF8P3ha4SsAxw+SBKeZZQc4HNYRmjGn",
	"23whFV1AQDJH5EfH3PCrFlfAG0Insw1+qiRcM1GrplMCRpx6uwTOhYaskjBnERo7d+gwDMa2cRx45WSg",
	"XHBNGYfCMGcEWmiwzCoJUzDhdn1neIvPqIIvnqbu+PbryN2fi/6ub93xUbuNjTJ7JCNXp/nqDmxcsur0",
	"H6EfhnMrtsjsz4ONZIsLc9vMWYk30b/M/nk01AqZQAcR/m5SbMGpriW8uOQPzV8kI+ea8oLKwvyysj99",
	"V5eanbOF+am0P70WC5afs0UCmQ2sUYULu63sP2a8ODvW66he8VqIq7oKF5R3FNfZhpy9Sm2yHXNfwjxt",
	"tN1Q8bhYe2Vk3x563WxkAsgk7ipqGl7BRoKBluZz/Gc9R3qic/mb+aeqStNbV/MYag0duysZzQfOrHBa",
	"VSXLqUHiW/fZfDVMAKwiQdsWx3ihvvgQgFhJUYHUzA5KqyorRU7LTGmqcaR/kzCfvJj85bi1vxzb7uo4",
	"mPy16XWOnYzIasWgjFbVHmO8MaKP2sIsDIPGT8gmLNtDoYlxu4mGlJhhwSVcU66PWpWlww+aA/zOzdTi",
	"20o7Ft89FSyJcGIbzkBZCdg2vKdIgHqCaCWIVhRIF6WYNT/cP62qFoP4/bSqLD5QegSGghmsmdLqAS6f",
	"ticpnOfs1RH5JhwbRXHBy425HKyoYe6Gubu13C3W2JbcGtoR7ymC2ynkkdkajwYj5h+C4lCtWIrSSD07",
	"acU0/odrG5KZ+X1U5z8HiYW4TRMXKloOc1bHwV8C5eZ+j3KGhOPMPUfktN/3dmRjRokTzK1oZet+2nG3",
	"4LFB4Y2klQXQfbF3KeOopNlGFtY7ctORjC4Kc3CGA1pDqG591naehygkSAo9GL4sRX71D6qWBzjzMz/W",
	"8PjhNGQJtABJllQtjyYxKSM8Xu1oY46YaYgKPpkFUx01SzzU8nYsraCaBktz8MbFEot67IdMD2REd/kB",
	"/0NLYj6bs21Yvx32iFwgA1P2ODsnQ2G0fasg2JlMA7RCCLKyCj4xWvdeUL5sJ4/v06g9+sraFNwOuUU0",
	"O3SxZoU61DbhYKm9CgXUs1dWo9OwUhGtrVkVlZJu4mu3c41BwIWoSAnXUPZBsCwLR7MIEeuD84UvxToG",
	"05diPeAJYg0H2QkzDsrVHrs74HvlIBNyN+Zx7DFINws0srxC9sBDEcjM0lqrT2dC3o4d9/gsJ60NnlAz",
	"anAbTXtIwqZ1lbmzGbHj2Qa9gVq353Yu2h8+hrEOFs41/R2woMyoh8BCd6BDY0GsKlbCAUh/Gb0FZ1TB",
	"k8fk/B+nzx49/vnxsy8MSVZSLCRdkdlGgyL3nbJKlN6U8GC4MlQX61LHR//iqbfcdseNjaNELXNY0Wo4",
	"lLUIW5nQNiOm3RBrXTTjqhsAR3FEMFebRTuxzg4D2iumjMi5mh1kM1IIK9pZCuIgKWAnMe27vHaaTbhE",
	"uZH1IXR7kFLI6NVVSaFFLsrsGqRiIuJeeuNaENfCy/tV/3cLLbmhipi50RZec5SwIpSl13w837dDX6x5",
	"i5utnN+uN7I6N++Yfeki35tWFalAZnrNSQGzetFRDedSrAglBXbEO/ob0FZuYSs413RV/TCfH0Z3FjhQ",
	"RIdlK1BmJmJbGKlBQS64DQ3Zoa66Ucegp48Yb7PUaQAcRs43PEfD6yGObVqTXzGOXiC14Xmg1hsYSygW",
	"HbK8u/qeQoed6p6KgGPQ8Ro/o+XnFZSafi3kRSv2fSNFXR1cyOvPOXY51C3G2ZYK09cbFRhflN1wpIWB",
	"/Si2xs+yoJf++Lo1IPRIka/ZYqkDPeuNFGJ+eBhjs8QAxQ9WSy1Nn6Gu+r0oDDPRtTqACNYO1nI4Q7ch",
	"X6MzUWtCCRcF4ObXKi6cJQJY0HOODn8dynt6aRXPGRjqymltVltXBN3Zg/ui7ZjR3J7QDFGjEs68xgtr",
	"W9npbHBEKYEWGzID4ETMnMfM+fJwkRR98dqLN040jPCLDlyVFDkoBUXmLHU7QfPt7NWht+AJAUeAm1mI",
	"EmRO5Z2BvbreCecVbDKMHFHk/rc/qQefAV4tNC13IBbbxNDb2D2cW3QI9bjptxFcf/KQ7KgE4u8VogVK",
	"syVoSKFwL5wk968P0WAX746Wa5DooPxdKd5PcjcCakD9nen9rtDWVSIe0qm3RsIzG8YpF16wig1WUqWz",
	"XWzZNOro4GYFASeMcWIcOCF4vaZKW6c64wXaAu11gvNYIcxMkQY4qYaYkX/yGshw7Nzcg1zVqlFHVF1V",
	"QmooYmvgsN4y1/ewbuYS82DsRufRgtQKdo2cwlIwvkOWXYlFENWN78lFnQwXhx4ac89voqjsANEiYhsg",
	"575VgN0wJiwBCFMtoi3hMNWjnCYQbTpRWlSV4RY6q3nTL4Wmc9v6VP/Yth0SF9XtvV0IUBiK5to7yG8s",
	"Zm004JIq4uAgK3plZA80g1jv/xBmcxgzxXgO2TbKRxXPtAqPwM5DWlcLSQvICijpZjjoj/YzsZ+3DYA7",
	"3qq7QkNmw7rim95Sso+i2TK0wPFUTHgk+IXk5ggaVaAlENd7x8gF4Ngx5uTo6F4zFM4V3SI/Hi7bbnVk",
	"RLwNr4U2O+7oAUF2HH0MwAk8NEPfHhXYOWt1z/4U/wHKTdDIEftPsgGVWkI7/l4LSNhQXcR8cF567L3H",
	"gaNsM8nGdvCR1JFNGHTfUKlZzirUdb6FzcFVv/4EUb8rKUBTVkJBgg9WDazC/sQGJPXHvJ0qOMr2NgR/",
	"YHyLLKdkCkWeLvBXsEGd+42NdA1MHYfQZSOjmvuJcoKA+vg5I4KHTWBNc11ujKCml7AhNyCBqHq2Ylrb",
	"CPauqqtFlYUDRP0aW2Z0Xs2oT3Grm/UchwqWN9yK6cTqBNvhu+gpBh10OF2gEqIcYSEbICMKwagAGFIJ",
	"s+vMBdP7cGpPSR0gHdNGl3Zz/d9THTTjCsh/iJrklKPKVWtoZBohUVBAAdLMYESwZk4X6tJiCEpYgdUk",
	"8cvDh/2FP3zo9pwpMocb/wLFNOyj4+FDtOO8EUp3DtcB7KHmuJ1Frg90+JiLz2khfZ6yO9TCjTxmJ9/0",
	"Bm+8ROZMKeUI1yz/zgygdzLXY9Ye0si4MBMcd5Qvp+OyH64b9/2creqS6kN4reCalpm4BilZATs5uZuY",
	"Cf7VNS1/aLrh6xrIDY3mkOX4JmTkWHBh+thnJGYcxpk5wDaEdCxAcGZ7ndtOO1TMNkqPrVZQMKqh3JBK",
	"Qg729YSRHFWz1CNi4yrzJeULVBikqBcusM+Ogwy/VtY0I2s+GCIqVOk1z9DIHbsAXDC3f0BjxCmgRqXr",
	"W8itAnNDm/ncm6kxN3OwB32PQdRJNp0kNV6D1OtW47XI6b4CGnEZdOS9AD/txCNdKYg6I/sM8RVuizlM",
	"ZnN/H5N9O3QMyuHEQahh+zEVbWjU7XJzAKHHDkQkVBIUXlGhmUrZr2Ievvhzd5jaKA2roSXfdv05cfze",
	"JvVFwUvGIVsJDpvoI3fG4Tv8GD1OeE0mOqPAkurb10E68PfA6s4zhhrvil/c7f4J7Xus1NdCHsolagcc",
	"Ld6P8EDudLe7KW/rJ6VlGXEtuvdAfQagpk3+ASYJVUrkDGW2s0JN7UFz3kj3eKiL/jdNlPMBzl5/3J4P",
	"LXxqijZiKCtCSV4ytCALrrSsc33JKdqogqVGgp+8Mp62Wr70TeJm0ogV0w11ySkGvjWWq2jAxhwiZpqv",
	"AbzxUtWLBSjd03XmAJfctWKc1JxpnGtljktmz0sFEiOQjmzLFd2QuaEJLchvIAWZ1bor/eNzN6VZWTqH",
	"npmGiPklp5qUQJUm3zF+scbhvNPfH1kO+kbIqwYL8dt9ARwUU1k8SOsb+xUDit3yly64GNMT2M8+WLN9",
	"fzsxy+w8uf+/9//9xbvT7D9p9ttJ9vx/HL//8PTjg4eDHx9//Pvf/1/3pycf//7g3/8ttlMe9thjLAf5",
	"2SunGZ+9QvWn9QENYP9k9v8V41mUyMJojh5tkfv48NgR0IOucUwv4ZLrNTeEdE1LVhjechty6N8wg7No",
	"T0ePajob0TOG+bXuqVTcgcuQCJPpscZbS1HDuMb4s0d0SrqXjHhe5jW3W+mlb/uqx8eXifm0edpqs968",
	"IPjucUl9cKT78/GzLybT9r1i830ynbiv7yOUzIp17FVqAeuYrugOCB6Me4pUdKNAx7kHwh4NpbOxHeGw",
	"K1jNQKolqz49p1CazeIczr+VcDanNT/jNjDenB90cW6c50TMPz3cWgIUUOllLBtGR1DDVu1uAvTCTiop",
	"roFPCTuCo77NpzD6ogvqK4HOMSsDap9ijDbUnANLaJ4qAqyHCxllWInRT+9ZgLv81cHVITdwDK7+nI0/",
	"0/+tBbn3zVcX5NgxTHXPPpC2QwdPWiOqtHu11QlIMtzM5gCyQt4lv+SvYI7WB8FfXPKCano8o4rl6rhW",
	"IL+kJeU5HC0EeeEfgr2iml7ygaSVTNMVPMEjVT0rWU6uQoWkJU+bemU4wuXlO1ouxOXl+0FsxlB9cFNF",
	"+YudIDOCsKh15hJHZBJuqIz5vlSTOABHtplhts1qhWxRWwOpT0zhxo/zPFpVqv+AeLj8qirN8gMyVO55",
	"rNkyorSQXhYxAoqFBvf3e+EuBklvvF2lVqDILytavWNcvyfZZX1y8gRI50XtL+7KNzS5qWC0dSX5wLlv",
	"VMGFW7US1lrSrKKLmIvt8vKdBlrh7qO8vEIbR1kS7NZ5yesD83GodgEeH+kNsHDs/SoRF3due/kkYfEl",
	"4CfcQmxjxI3W8X/b/Qre9t56u3rvgwe7VOtlZs52dFXKkLjfmSZ30MIIWT4aQ7EFaqsuzdIMSL6E/Mrl",
	"v4FVpTfTTncf8OMETc86mLKZkezLPMzNgQ6KGZC6KqgTxSnf9JMkKNDahxW/hSvYXIg2tcc+WRG6j/RV",
	"6qAipQbSpSHW8Ni6Mfqb76LKULGvKv/WHR89erJ40dCF75M+yFbkPcAhjhFF5xF5ChFURhBhiT+Bglss",
	"1Ix3J9KPLY/xHLhm15BByRZsFkvq+M+hP8zDaqjS5bFyUcjNgIqwOTGq/MxerE69l5QvwFzP5koVipY2",
	"R180aMOoQK53JIWTv5iaCRrNzkWnhahGl4D9vgLMASduDGhGqRAufZl9JR+w2FrRBSTE99CBNfItesfp",
	"hYPsupSj17CY92/bwWUYBdk2zsyao2QM5ouhY9S0ejGJfibrI3VuE8xK6hA2K1GGa4I3LUeksuNItGkW",
	"U6DFTxdI3kpDHowuRkKKXFLlKRIT0HlGM0pA+R2zPmzL9XMWhNMFWeaaTD7+QugzkYHq6zL++DQ/PrdP",
	"qPeOyNNj1A+M4I9th+AonRVQwsIu3Db2hNJmoGg3yMDxw3xeMg4ki0XmBTba4A50c4AR3h8SYt0DZPQI",
	"MTIOwEbfPw5Mvhfh2eSLfYDkLoMG9WMjlwz+hvjbNhurbuQxUZn7hSVcbrnnANSFczaXay+oGIchjE+J",
	"YXPXtDRszqmj7SCDlDMoU/cSzLjokwcpWXuLd8beenutyd6Tt1lNKNB5oOPS5haIZ2Kd2cetUXF8tp4Z",
	"eo+G7+NT29jBtMl97ikyE2uMaMKrxYaL74AlDYcHIzA/rJlCesV+KVHDArNt2u2iXowKFZKMszU25JKS",
	"dcZMnRCvUuRyP8jXcysAepaYNvm108x3atBd8WR4mbe32rTNQ+dfRsWOf+oIRXcpgb+hiajJsPOmL7FE",
	"jSjdwJxucqFAvo0RvWETQw/S0E+loATUWLKOEJVdxdy6RvECvHHOfbfAsoIpjCjfPAiivSQsmNLQWvh9",
	"EMfnsJ1SzJwoxDy9Ol3JuVnfWyGaa8r6OLFjZ5mffAUYLj1nUukM3SPRJZhGXyvU+L82TeOyUjeezOYZ",
	"ZkWcN+C0V7DJClbWcXp18377ykz7fcMSVT1Dfsu4jaaZYV7saJTplqltIPLWBb+2C35ND7becafBNDUT",
	"S0Mu3Tn+JOeix3m3sYMIAcaIY7hrSZRuYZDB6+AhdwzkpiAA4WibaXhwmAo/9s6QIv9GOXVH2ZGiawms",
	"GVtXwdCHZcQSo6MH9TL6K0qcAVpVrFj3DLV21KTGTPeyxvhkfD0s4O66wXZgoBs0GI3B7iQydKGJziB1",
	"jALysRHhbKyiC8QDiVqOfbBa1BItfp1IwGHWzEawG7n2b38610LSBTirbWZButMQuJx90BDkpFREM+t+",
	"Ldh8DqG1Ut3G0tYBbmCTKkaQboTI4ibNmnH9xdMYGe2gnhbG3SiLU0yEFlI+rIuhVdiLVYHe2ZRVCbbm",
	"Fqbd6PPWb2GT/WQ0FFJRJlUbzubMtF3+t8euX6++hQ2OvDNKzAC2Y1dQTX0LSIMxs2Dzyb7qaFSgMMEq",
	"ZqTobOEeO3Ua36UDbY1LiZsm/jZmvJMytruUuxyM1qloYBmzG+dxX545PdBFfJ+Ud20CSxjjQnIMRK5w",
	"KqZ8AaHhVdS83d5FuxdAS0+8uJzJx+nkbp6z2G3mRtyB6zfNBRrFM0ZmWU9KxxG+J8ppVUlxTcvM+RdT",
	"l78U1+7yx+beHfmJhck4ZV98dfr6jQP/43SSl0Bl1ihjyVVhu+pPsyqbRHf7VYISi7eKWGU92Pwm82fo",
	"k7xZgqv0EOj7g5TUrb85OIrORzmPB4ju5H3ONW6XuMVFDlXjIW8dJNZB3nWK02vKSu+Z8NAmgjlxcePy",
	"mke5QjjAnZ3rQYxEdlB2Mzjd8dPRUtcOnoRz/YCp3OIaB3eJ3pAVOWc5Pbj09LWQHebvXvJEne2/n1hl",
	"hGyLx0Rso68e1BemjogVvH5Z/GJO48OH4VF7+HBKfindhwBA/H3mfkf94uHDqKshakkwTAINBZyu4EET",
	"lZzciE9rduJwM+6CPr1eNZKlSJNhQ6HWa+7RfeOwdyOZw2fhfimgBPPT7od/vU236A6BGXOCzlMvd5qg",
	"rJUtWKSI4P0YRHw0ZkgLmf2KYkp267kZHiFer9DbkamS5XE/MJ8pw165DT4yjQk2ThjMzIg1S8Sy8ZoF",
	"Y5lmY3IM9oAM5ogiU0XTHLa4mwl3vGvOfq2BsMJoNXMGEu+13lXnlQMcdSCQGtVzOJcb2EYRtMPfxQ4S",
	"liPoy4wIxHYjSBjqNAD3VWPW9wttvGatzrRvxGQ444Bxb4l2dPThqNm+/lh2Q5bG6TFjCld6RufqIiTm",
	"iBaiZCqbS/EbxG3RaMKPPBz3BRgYhgn/BjwW6dJnKY0Hqq2n2c6+a7vH68apjb+zLuwX3dR8uM1lGj/V",
	"+23kbZReFU9v6pCcUsJCd2Q3lDbBWvB4BcFjmG7fhypQbs+TfTXdeZERP5Xh26djO357Kh3Mg/diJb2Z",
	"0VgtAqMLGZiC7e0EVWhBfGe/Aap5E2xnJ0HEY9OW2cxLFcg2ccYwi+Mt9Ro77WiNplVgkKJC1WVqA8FK",
	"JSLD1PyGclvD0fSz/Mr1VmC9oKbXjZCYN03F4z8KyNkqao69vHxX5ENff8EWzJYnrBUE9e/cQLb0q6Ui",
	"V0OweenuUHM2JyfToAin242CXTPFZiVgi0e2xYwqvC4bj2TTxSwPuF4qbP54RPNlzQsJhV4qi1glSKN7",
	"opDXRDHNQN8AcHKC7R49J/cxfkuxa3hgsOiEoMmLR8/R+27/OIndsq685DaWXSDP9sGNcTrGADY7hmGS",
	"btR4tKKtL52+HbacJtt1zFnClu5C2X2WVpTTBcTjmVc7YLJ9cTfRo9rDC7feAFBaig1hOj4/aGr4U+KN",
	"pGF/FgySi9WK6ZWL8lFiZeipLW5nJ/XD2Uqrri6Jh8t/xGC5yscK9Wxdn1iNoavEGwcMafyerqCL1imh",
	"NlleydowVl8tiZz5XJxYqKWpz2JxY+YyS0dZEqNa56SSjGu0f9R6nv3NqMWS5ob9HaXAzWZfPI0UPOnW",
	"BOD7Af7J8S5BgbyOo14myN7LLK4vuc8Fz1aGoxQP2jfJwalMRvXF47dSQWTbhx4r+ZpRsiS51R1yowGn",
	"vhPh8S0D3pEUm/XsRY97r+yTU2Yt4+RBa7NDP7597aSMlZCxBNvtcXcShwQtGVzjC5P4Jpkx77gXshy1",
	"C3eB/vOGoHiRMxDL/FmOKgKBR3Pb41Ijxf/0XZspGB2r9uVOzwYoZMTa6ex2nzjgaz+rW99/a2N28FsC",
	"c6PRZsvQD7CSCNW1sbhNn0/81jhq7rV73jE4PvqFSKODoxz/8CEC/fDh1InBvzzufrbs/eHDeMLOqMnN",
	"/Npi4S4aMfaN7eGXImIA89WxmoAi9544YoBMXVLmg2GCMzfUlHQrEX16KeIwj0HiAX/xU3B5+Q6/eDzg",
	"H31EfGZmiRvYhjSnD3u3EluUZIrmexBqTMmXYj2WcHp3kCeePwCKEigZaZ7DlQwqzUXd9TvjRQIaNaPO",
	"oBRGyQyLaIT2/D8Pns3ip1uwXbOy+KnNhdS7SCTl+TIaqDkzHX9uK8I3S7SsMpqXf0k5hzI6nNVtf/Y6",
	"cERL/5cYO8+K8ZFt+5UO7XJ7i2sB74LpgfITGvQyXZoJQqx208w0z5jLhSgIztMmgW+Z47BkaFDH7Nca",
	"lI4dDfxgXyuhs8swX1tGiwAv0Pp1RL7BhA8Glk6GX7Q6+dyJ3TxidVUKWkwxp+PFV6eviZ3V9rF1jW0Z",
	"rwUaXbqriFrJx+dVa0oUxxMGjB9n+wtms2qls6bqViwlk2nR1gVjvdAJNMeE2Dkir6wlTHk7i52EYGZQ",
	"uYIiKPJldTGkCfMfrWm+RBNT5yJLk/z4+nOeKlsDfFDMuin6gOfOwO1K0NkKdFMi9BLkDVOArzDhGrpZ",
	"oJqUaM7E6bNCdZcna84tpRztIVM0JR72RbsHzgok3jcchayH+D0NDLZ8477l+M6xVzQHdb+2X89563MK",
	"NUWKv3M24pxywVmOGaBjAhFmrBnnbRqRLDvuJlITd0IjhytaUbB5/+WwmKwx6BmhQ9zQcxt8NZtqqcP+",
	"qWHtKs0sQCvH2aCY+sKYzq/BuAJXxMMQUcgnhYzEpkTj2Rs/+J5khMkoEoaqr823750ZEx9CXzGOBguH",
	"NidmW89DqRg6GDlhmiwEKLeebkYu9c70OcLkVAWs3x+9FguWn7MFjmGjocyybejfcKhTHwjoAu9M25em",
	"rUsZ3Pzcieqxk55WlZs0XTY1Xit6zZMIjoWf+HiAALnN+OFoW8htawQv3qeG0OAag4+gwnt4QBhNCdFe",
	"vW6jIliKwhbEvk2K5g1kPALGa8a9Jyx+QeTRKwE3Bs9rop/KJdVWBBzF0y6Alok4dnzrZ12pdx2qnzDZ",
	"oATX6OdIb2Nb/TTBOJoGreBG+Yb4Q2GoOxAmXtKyiYCN1DJFqcoJUQW+EelVN40xDsO4ff3k7gWwo2T6",
	"tO2OScj3vYlSqZlmdbEAndGiiNVU+RK/Evzq3/rAGvK6qb1RVSTHTKTd1KxDanMT5YKrerVlLt/gjtMF",
	"5YIj1BCWLPY7jNkVZhv8d59i9k3s697v23yga7FfPuLhe72Y1GtoOlNskY3HBN4pd0dHO/XtCL3tf1BK",
	"L8WiC8jnMJImuFy4RzH+9pW5OMJ8hYMwY3u1NOkEMaRX4Hef5KJJhNXlSniVDcqroPO6KSK/3QyRLgc/",
	"xcsv8aY0NHnb+9WagVMvS/PkQ2iqXUoWTclWFpRMc2FDPntG9KEnKBXmaaM8D2d8dmvditC0C+bbjsPF",
	"hvq0zCLpaLmdL6Td4H2dId9epx4b+/Tk+L1fLvoKXBK5SsI1E7UPovGhrF4ltL92ii83z72j648GiH9u",
	"43PSVH7hyvbZZTqd/NufrDONANdy8wcwnA82fVCIeijtWvNU24Q0FZ9GVYDq3IpjUvfHssQ72bBTCntH",
	"Ie8BWb0aIw4MC3NPJ2fFXhdmrNLAxI4SO3bxMtvpRMxt8mU8YpVQrC28Fqu/PTJm/AJLaAeJpIdj+VjC",
	"a8g1VttrY6QkwD5ppc1k3nb/3wmZ0+p0E1rv8jBvS748LLG3444fpCAJ0ujY8mRH41MNnzaRsPYhzw1V",
	"mJhfoo27+/R19AO8+RxyTAa5NeXLP5fAg3QiU2+XQVjmQQYY1jxHwXSm+1sdW4C2ZWTZCk9QVuDO4KSe",
	"I1/B5p4iHWqI1ktr3mLdJlkkYgC5Q+ZTZ6YMyS74h6mGMhALPrLTdoc2J3iy1HKQwOiWc3mSNBdHm9Ro",
	"y5TxWq+j5jJd90r1hS8rUllhhqUi0/rHK6zMqVycE22STYZaOjkb1gu4cckqMUFP4zvxaStB+d98Ni47",
	"S8muICwGjZ6qGyoL3yJqevFWnWzLfTRI5eLLHPaBnjczszYOf+irjmSgxicteSmMGJGl3gV1Q9+buLF7",
	"ygb4tXlYEK45SFc0H+XfUijItPBx+9vg2IYKG8V4KySoZNUHC1wy3enbNp8rVr+hmN6UuuDFcIFEwooa",
	"6GSQdTU95zZkv7Tf/VtqX/1kp4WpodfdZfj8CwymBkgMqX5O3G25+432bYxNjHOQmfc89VOwcpBdb0gl",
	"RVHn9oIOD0ZjkBudAmULK4naafLhKns6QvDW+Qo2x1YJ8vUL/Q6GQFvJyYIepO7rbfJBzW8qBvfiIOB9",
	"TsvVdFIJUWYJZ8fZMG9sn+KvWH4FBTE3hY9UTpSmJffRxt54s2+WG58ntaqAQ/HgiJBTbt+GeMd2t6pS",
	"b3J+T2+bf42zFrVN5eyMakeXPB5kj0mW5R25mR9mOw9TYFjdHaeyg+zISrpO5KyV9CZSqPlorFY+dDX3",
	"i+e2RGWhiMkk59Zj9RIPesxwhC/Zg5QL6MikxHm6iCpFLCTzNq/tzVBxTIWTIUAa+JhH3w0UbvAoAqLl",
	"YCOn0GYwc7nLxJxIaJ3It03iNqxcG9Po+zM3s3T53VxI6NSgNb2FLLzIw1RbLJrKGdOSys1tUq0NKucO",
	"rCdJLO8Mx2oisdqFtNFYQxyWpbjJkFllTW7zmGpr2qnuZexrzbT9zKmeQRDXRZUT1DZkSQuSCykhD3vE",
	"n+1ZqFZCQlYKDPOKeaDn2sjdK3yrw0kpFkRUuSjA1giIU1BqrppzimITBFE1URRY2sFHn7ZPQMcjpzxU",
	"2WabnMcuOrO+zETgKSiXjMdhyDYewrul5PFe2fnP5mgRYhjr0n17baXPsPAz7Fn3mZWlNxikSj+TH1WN",
	"4Uj48MZM8ZSshNJOs7MjqWaoNsTrfi64lqIsu0YgKxIvnGX7O7o+zXP9WoirGc2vHqAeyYVuVlpM/bPU",
	"fjBeO5PsZWQaWaP6Yhmx8+Is/tTtXYjacY6968cGYL7fzbF227hPY3W2u+vqF47nidyZWqxYHqfhP1d0",
	"WzImLcYSoqmebAkn+zgfmyGjDi+HJpgBWdIQzcBptAbNKXE8zTl1kXmY/6LE2x+XzMFdEomLacgnndSS",
	"5UnZqgcAQmpfjOpa2rpPoeTTcBWxsC/M0SXdB3QkF8fIn7vBZkY4OFAa7gTUINqwAfC+VfanNiWXjVyc",
	"ibX//qDN2XUr4D9up/JYrfzIKW5Iy5Xy9/k9Ehwhnhl4a/wRVjX3N+juKKSmRt/IGzUAIB2X1IFhVHTS",
	"vmDMKSuhyKhOXO5oE5oGmq170dKvvMqU4+Q5tRf2EogZu5bg8k1YkbpXqb2ihpRE03xoueUFrEFhMghb",
	"bpoq62fw/g4obVmpnvItqqyEa+iEa7kkGDWKduwafF/VdCYFQIXev75NKhaHFN7lPUOFW3sWRLKMwW7U",
	"cmERa3eK7DBLRI0oa57ZY6LGHiUD0TUratrBn9pX5Oia3cxRjqBqIJNnXm8bO82PdoS3foBT3z8mynhM",
	"vB/Hh/ZmQXHUbWNAO+MSa5U69TwelhhmeGkcGjhb0Tg+LYm3fENV9IanDYBDkm/Vm5H7xAQPEPvVGnKU",
	"arpxd3fHCcHBiOplb0qK4LLZ4dsbkj8LDW8l4eR4MVVDATLYrZYaTxdOYMcGWGuTG7HXSM1YQsrxf8f/",
	"pmRW+4GMXm0rWoUa3CvwHjtMKN04K5xAy5oLzccXTl0+wb5SzoLI6hXdECHxH6Ov/VrTks03eEIt+L4b",
	"UUtqSMi5CK3v2sUrmom3CyZTD5i3Cwg/lV03GztmMNzGjBIAba5AZ5zCzEBXEG4DuuUt58m1YTmqnq2Y",
	"UnjZ9bZziAW3eJ8TYkWLUEfGzHTdOqc+V6np/T/bV1vhVD6hVFXS3NcvA6LoqmcQtzUKPXHpJay2P+sb",
	"qseeBJq6hy3RSv+ct7iFcW/PyI1YrHyq3kMH7EE9uEGpizstY5/qye3L6C0PIkct5dC7MDY+ZAA0Opl9",
	"Vq8d4NtsjD4D2KfAfzRpZGoZY8D/o+A9UUYvhNdWzPsEWO48+Y/Aau2qM7HOJMzVrlAIa1g1irBskwV4",
	"4yTjuQSqbGzI2Q9OZWtzIjJuVEgbvdh435pRCpgz3jJLxqtaRzQATI3INwHCQvM0ojXh7ElJCUYMu6bl",
	"D9cgJStSG2dOhy3jFeak9yZ51zei/Dd36nAAplrtB18SQvtSLWhmLnBb9cYGFipNeUFlETZnnOQgzb1P",
	"buhG3d73YaCVtZEvdng/aCDNdN+3B34QJG0LSLlx7ss7eiYaAOkBXRQjXAsYwRpxK1ijiBYJT8IQhnha",
	"BbrOSrHA92UJAnTJJ9H3Y5UVwdFga+Wh/eZR7DfYPg3m3XYHXwucdcwU28/ZD4g6VHh+5ExvPWnWmtZ/",
	"8GcjMu1B8PTPF21YuN2cIf3H3mhe4COGzjvNfkV8v9c2PMTOBwlPRteCm9hFdJC7B76huXZ8PaOuDz72",
	"EtTqsBnqtmpL4DeoNsiZ5i5wZ2j0GSjFFilT9452T5uQtST7eyABnq1U685Wd9ommMKMs08RqO0vZ7NK",
	"VFk+JhrQpuYvnEHbQdqFMUEfgbk6se4mcEI1xSo6iU06VSv2rYOVrJqxyy9T5duU7JRBI8FBu8ZyMUde",
	"hkfYmnHwjUdjvJj2Xx91DTYNkyCUSMhriQbNG7rZXVcokRL2/B+nzx49/vnxsy+IaUAKtgDVphXu1eVp",
	"I8YY79tZPm2M2GB5Or4J/l26RZz3lPnnNs2muLNmua1qcwYOqhLtYwmNXACR4xipB3OrvcJx2qDvP9Z2",
	"xRZ58B2LoeD33zMpyjKe1r0R3SKm/thuBcZ+I/FXIBVT2jDCrq+O6TZWVi3RHIfJPa9tnhHBc5d9vaEC",
	"phPBOLGFpEItkZ/hq1/n3yCwrkrHq6xPYtu6nF5kLWIYnIHxGzMglaicKM3mJAYRvi2RwZtLZ2jE8M4g",
	"erJhtjaOMkaILiY5Tnqn3GmeYk62c/tutUYd5/RmEyPihT+UtyDNlCU9/aL9NpykNaX/YfhH5In+wbhG",
	"s9zfg1dE9YPbFT4eBdrwuXaEPBCAxDvMzgu6sC56m2lUWqs82u+9q7MvfnzXukB3PhhASHyHHeCFDyvb",
	"dk2MuwPnM6fs/K5BSrCU9ylK6Cx/11tNz3qbiyTYImek0BqUZUtiKBYGD3HVy+Z9a0IrGTyDxSLoRjMt",
	"y8jzWWs3wTMVEo5RCeQ1LT8918Dq+KeIDyjeph/NhG8oQyRbVKrbZXB7TUfNHbyXPNzU/A0+2f0nmD2K",
	"3nNuKOcuHtxmaPXCktQLfyvYV8DkBse04UCPviAzl02/kpAz1XdD33jhpHkyCJLNXeglrPWON4q71vmT",
	"0Hcg47mPGSHfB+4kgWa7FsL2iH5mppI4uVEqj1HfgCwi+IvxqLD65o7r4o6Z12+XECRI7bVnQpBhXdGx",
	"y7NJL8ylUysYrnP0bd3BbeSibtc2NpvN6ATul5fv9GxMEpp4snXTHbPgHCTr+l4513+H/DcWR24MN2+M",
	"Yn5KZUS1WT8TyXd7+1GzcmeASCeV8sfpZAEcFFOYLPhnVxzi096lHgL7Jn94VC2sd0kkYhETWWtn8mCq",
	"IEnyiPzIrlskGzK+d8tryfQGC4N6Axr7OZqp55sm64PLGtL4rtzdp8UVNMWZ2xwRtfK36zeClngfWZca",
	"N7eQKI/IV2u6qkpnDiZ/vzf7Kzz529Pi5Mmjv87+dvLsJIenz56fnNDnT+mj508eweO/PXt6Ao/mXzyf",
	"PS4eP308e/r46RfPnudPnj6aPf3i+V/vGT5kQLaA+tzdLyb/JzstFyI7fXOWXRhgW5zQin0LZm9QV54L",
	"LFxnkJrjSYQVZeXkhf/pf/kTdpSLVTu8/3XiCrBMllpX6sXx8c3NzVHY5XiBj8IzLep8eeznwXJiHXnl",
	"zVkTTW7jXnBHW+sxbqojhVP89var8wty+ubsqCWYyYvJydHJ0SNXu5bTik1eTJ7gT3h6lrjvx47YJi8+",
	"fJxOjpdAS8yhYv5YgZYs958k0GLj/q9u6GIB8ggfDNifrh8fe7Hi+IN7HP9x27fjMKTi+EMnh0CxoyeG",
	"Axx/8BUst7fuVC90kVhBh5FQbGt2PMOqFWObggoap5eCyoY6/oDicvL3Y2fziH9EtcWeh2OfaCPesoOl",
	"D3ptYN3RY82KYCU51fmyro4/4H+Qej9adlJCLOmGzaZOSdt8SpgmdCYk1jzU+dJwEF9sjamgZVgC+aww",
	"x8D0emkh8LVr0b8+efFu+HQAByJ+JOQZ5kC0R7ozU8u10b45aUumN3dSp317M707yZ6///Bo+ujk41/M",
	"zeP+fPbk48hXNi+bccl5c62MbPgeK5VhPCGe9McnJ569OeUhIM1jd5KDxQ2UqHaRdpOacMXhre9oIR0a",
	"7raqNxBpkLGjolJv+KHwghz96Z4r3mpp6qSIxOH7JSwK4l+04tyPPt3cZ9wGSZqbw95wH6eTZ59y9Wfc",
	"kDwtCbYMSmQOt/5HfsXFDfctjThSr1ZUbvwxVh2mQNxm46VHFwpdlpJdU5QCueBB3iu+mLzHDAqxV8UJ",
	"fqM0vQW/OTe9/pvfdBrGS6Rb84crpxo42u1l0lSPAZ8M0AfX0uKa8tzH8bfhwbhfVuB1hNFEoNUK5nXp",
	"X4xXJZvbKrVClH4iVVeV4ThzqhrKcjHJRoK1D3CboUnNc8FtLAOGf3uPDD6kRa+OumJVpwubG6py9VM5",
	"gHtjiZv+aw1y0+76ihlRtN3eQbTN78nCLR4PwMK7Ax2YhT/ek43++Vf8X/vSenryt08Hgc8zccFWIGr9",
	"Z700z+0NdqdL08nwNlX6sV7zY4xvPP7Q0Ujc54FG0v297R62uF6JArwKIeZzW39/2+fjD/bfYCJYVyDZ",
	"CrgthOt+tTfHMZZh3Qx/3vA8+uNwHZ0Umomfj72JI6bldlt+6PzZVe7UstaFuLGVw6LyCl6ftHSVstGS",
	"31gFzD3oBmize5IfquaicikrCMVKSaLWrdnGxnK7t6CNYw1vtCa8YsE4ToAeEpzFloSnwQWuwNyNaIzo",
	"yUYOsu9FAUPZKHYROhg7l2FzFCIF2O98MQ4Z78f9Dgp6cqwbckhG5mOt+n8f31CmjQTl0mwiRoedNdDy",
	"2NXU6f3aprEffMHc/MGP4YPW6K/HtHsuukYSs2WpjgMLSuyrsyAkGvlocv+5taaG1kkkl8Yu+e692XWs",
	"nu0oqTW2vTg+xudFS6H0MUqiXUNc+PF9s9G+6GOz4ebbOhOSLRinZeaMXG1hsMnjo5PJx/8fAAD//9sE",
	"6a4N/AAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
