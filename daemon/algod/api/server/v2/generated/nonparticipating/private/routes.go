// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
