// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//xjCbNGuFAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
