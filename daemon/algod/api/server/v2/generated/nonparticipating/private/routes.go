// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4/X/BAAA///WXlTym8AAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
