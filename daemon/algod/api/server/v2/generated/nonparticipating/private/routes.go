// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"04A1VcMmT04eTT7+3wAAAP//lhM0FGMCAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
