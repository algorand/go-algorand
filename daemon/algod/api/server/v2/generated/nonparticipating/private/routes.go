// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
