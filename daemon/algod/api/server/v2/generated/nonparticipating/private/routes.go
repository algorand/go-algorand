// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
