// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3Mbt5LoX0Fxt8qP5Uiy42RPfOvUXsXOQxsncVlK9u5avgk4A5I4GgJzAIxExtf/",
	"/Ra6AQxmBkMOKdo5qd1Ptjh4NBqNRqOf7ye5XFVSMGH05Pn7SUUVXTHDFPxF81zWwmS8sH8VTOeKV4ZL",
	"MXnuvxFtFBeLyXTC7a8VNcvJdCLoijVtbP/pRLG/11yxYvLcqJpNJzpfshW1A5tNZVuHkdbZQmZuiHMc",
	"4uLl5MOWD7QoFNO6D+VPotwQLvKyLhgxigpNc/tJkztulsQsuSauM+GCSMGInBOzbDUmc87KQp/4Rf69",
	"ZmoTrdJNPrykDw2ImZIl68P5Qq5mXDAPFQtAhQ0hRpKCzaHRkhpiZ7Cw+oZGEs2oypdkLtUOUBGIGF4m",
	"6tXk+duJZqJgCnYrZ/wW/jtXjP3OMkPVgpnJu2lqcXPDVGb4KrG0C4d9xXRdGk2gLaxxwW+ZILbXCfmh",
	"1obMGKGCvPnmBfnss8++tAtZUWNY4YhscFXN7PGasPvk+aSghvnPfVqj5UIqKoostH/zzQuY/9ItcGwr",
	"qjVLH5Zz+4VcvBxagO+YBL/mwnzxrIGdC8MWsDOt82DHSByT5ucZm0vFRu4SNj7qNsXz/6H7lFOTLyvJ",
	"hUnsFIGvBD8nuVrUfRtXCwC02lcWU8oO+vYs+/Ld+yfTJ2cf/untefZf7s/PP/swcvkvwrg7MJBsmNdK",
	"MZFvsoViFM7Pkoo+Pt44etBLWZcFWdJb2Hy6Aubv+hLbF5npLS1rSyc8V/K8XEhNqCOjgs1pXRriJya1",
	"KC3jsqM5+idck0rJW16wYmr58d2S50uSU41DQDtyx8vS0mCtWTFEa+nV7XW8PsRIspAehCFY4j8uepp1",
	"7Y0btgaOkeWl1Cwzcsel5u8pKgoSX0PNDaf3u+LI1ZIRmNx+wCsasCks9GW5IQb2viBUE0r8hTYlfE42",
	"siZ3sF0lv4H+bjUWjyti0Qjb1bp97QEfQmgPGQlhYCZlyagA5HkM91Em5nxRK6bJ3ZKZpbspFdOVFJoR",
	"Ofsby40lhH+//OlHIhX5gWlNF+w1zW8IE7ksWHFCLuZESBMRi6MuwKHtObQOB1dKNPiblpZKVnpR0fwm",
	"LQeUfMUTq/qBrvmqXhFRr2ZM2S3114yRRDFTKzEEEI64N3Gu6LoPxpWqRQ4U0QDSkgkt/XFdlXQDKFzR",
	"9V/Ppg5ATWhZkoqJgosFMWsxKA/auQ8BOFOyFsUIAcrYfY8uaF2xnM85K0gYZQtsbpr9IeRiPwgbQS8C",
	"0A8yCGCYZW8ABVsnaM9yCfuFVHTBItI7IT87tglfjbxhIhwYMtvAp0qxWy5rHToNQA1Tb5f/hTQsqxSb",
	"8wRlXjoEWUaFbRxvXzl5K5fCUC5YYdk+AC0NQ6Y3CFM04fbXVl9imFHNvng2JE80X0fSw1x26WArDRy4",
	"/9Atw6OduKbtV3fw03Jdq/8oyW4bNJovMvy5t9l8cWVvtjkv4db7m91jj6paA3tpIcvfg5ovBDW1Ys+v",
	"xWP7F8nIpaGioKqwv6zwpx/q0vBLvrA/lfjTK7ng+SVfDCA8wJp8EkK3Ff5jx0uzfrNOvnxeSXlTV/GC",
	"8tbTerYhFy+HCAHH3Jd4z8N7PH4IXa3942jfHmYdNnIAyEHcVdQ2vGEbxSy0NJ/DP+s5UBidq9/tP1VV",
	"2t6mmqdQaynbXf+g4HCKj/OqKnlOLRLfuM/2q2UUDB82tGlxCpf38/cRiJWSFVOG46C0qrJS5rTMtKEG",
	"RvpnxeaT55N/Om00RKfYXZ9Gk7+yvS6hkxWYUeTKaFXtMcZrK2bpLQzFMnH4BKwEWSMIaFzgJlpS4pZN",
	"l+yWCmMJahzPCIf8rZu72QGUtXAHOo/EwS0g2HDGNErk2PCBJtFmEEA0AUSDOLwo5Sz88PC8qhqcwvfz",
	"qkIMgezKOIiFbM210Y8AIbQ5W/E8Fy9PyLfx2PA0kKLc2CsFxRp7o8zdXefuvqAPc2toRnygCWywVCd2",
	"szwa7LPjGDQIz5ylLK2EtZN6bOPvXNuY8Ozvozr/WYkuxvYwucFT0OES31zwS/TYetihpT4pOaXVCTnv",
	"9j2MkOwoW0hIXzR4PTY5wS/csJXeSRsRRBF9ue2hStHNxAmbGQiNfcL5WTOkmYouuABop/Y5J8iK3uB+",
	"SMC7JQSmwzsNqQsl0aAIdrKrQ/1JTzf0p6Tf1FZ7GdfKwCXXBl7+0JgsWQkiORWexGPiOYhWRpDAlkUE",
	"mO8UrZC63RcU1rgAjQM2QljveV2PvEmTMEdXQrT1ANXBrHsne01CAnykA8NXpcxvvqN6eYQzP/Nj9U8D",
	"TEOWjBZMkSXVy8RR6tB2M9oY+rYNgWbJLJrqJCzxlVzoIyyxlPsws6p6QcvSTt1nYp3VwsCjDnJZEtuY",
	"sBUHtb97kqKdAF925GuaL63oQHJaltNGmSWrrGS3rCRSES4EU1NiltQ0hx9G9q8hOEeaWfZnGIlW4xRh",
	"oARUQROiGFlRuJNW9g1Ule0+gadqumIdSQnuSFmDxiJ6nly89Ktjt0wATwpDA/hhjaA9igc/sXO7TzCz",
	"kLg41FEab5YM+Av8ogW0bd3csKKZQqoCNe/G/sYVyaXCIfDOd5Pb/zCqms5InQ8rxTI3hKK3TGla2tV1",
	"FvUokO+xTueOk1lQQ6OT6agw/WxDzgH9QARkKqH/+Qn+Q0tiP1u5xlJSQz0cxBMZmYkLvKotqnAm2wA0",
	"wpKsUNlKKprf7AXli2byNJsZdfK+Rv2u20K3iLBDV2te6GNtEww2tFftE4JaMc+OetLJVqYTzTUGAVey",
	"Isg+OiAgp4DRECFyffRr7Su5TsH0lVz3rjS5ZkfZCTvOaGYP8P2PpDokqSIyp3tIrLCNcKWL+LawC2lM",
	"quczqQ4ToTq3qiCNoZhQO2okQU47lAFN6ypzDClhSMIGnYEab53tkk93+BS2Wli4NPQjYEHbUY+BhfZA",
	"x8aCXFW8ZEc478uk5Dqjmn32lFx+d/75k6e/Pv38C0uSlZILRVdktjFMk4dOg0m02ZTsUfLogUiVHv2L",
	"Z9502B43NY6WtcrZilb9odAkiUoAbEZsuz7W2miGVQcAR10DzN7niHaC9ncL2ks2qxeXzBj74H+t5Pzo",
	"V0BvhhR00Oh1paw0pdvmWycinha2ySlbG0VPK2jJRIEuInYdXNuH72p2FKIa2viimaUgDqMF23ko9t2m",
	"ZppNvFVqo+pjaHmYUlIl5Y5KSSNzWWZWuOUycfu9di2Ia+G3q+r+jtCSO6qJnRtMyLUoBi45sxbjL20c",
	"+motGtxsFZhwvYnVuXnH7Esb+c3Tq2IqM2tBgDpbd+9cyRWhpICOIGB9ywwKnXzFLg1dVT/N58dRA0sY",
	"KCEk8BXTdiaCLazIp1kuBXpm7i0PuHnGIKyLKm+iM8MgORxdbkQOlsdjHORh4WnFBThY6I3II0nKwliy",
	"YoGE+hF1e0MIwskf6ASAFkGv4DMYOl6y0tBvpLpq5Ppvlayro7Pw7pxjl0PdYpwppbB9vcaci0XZ9hhe",
	"WNhPUmv8Qxb0ImhXcA0APdDoK75Ymugh/VrJj3BvJmdJAQofUItW2j59XdqPsrAMx9T6COJmM1jDBS3d",
	"xryPzmRtCCVCFgw2v9ZpQXTAoxTc1MDfzsSyLShuuCYzZqkrp7VdbV0R8B3r3SlNx4zmeEIzQI0e8HgJ",
	"Dk7YCqdD38RSMVpsyIwxQeTMuZU4hxdYJAXHN+NFOScGj+IgLUgrJXOmNSsyp7XfCaxvhxeO2YI5WAos",
	"IcxCtCRzqj4C+De3OyG/YZsMnDs1efj9L/rRP8QKjDS03IF8aJPagq56sr+OQwHaRrhdcGLyRVUoUr8V",
	"pS2jKZlhQ2i+J94Gd70LY2/vPwbqbpkCb6CPepb8JMcmxAD8Rz5Jx4e/rgYCJpxqwUqldpsFFdKLfuOG",
	"L6k22a6LwzZqaUTsKiNenborYOABYfEV1QY94bgoQB2NFx7Mg4KjnWKfJQw+r+xcv/iXVX+23N7dQtc6",
	"PLN0XVVSGVakVgVqzMG5fmTrMJecR2OHt5yRpNZs18hDeIvGd+hzL3v4g5qgtHRq0P7iwGXCyiabkcht",
	"gdWgZhtol75VhO/YjXwANK4b1CNxcd2hruC7Pp1oI6vK8iGT1SL0G0LcJbY+Nz83bfsEiDYslD4KyTTY",
	"x1x7B/kd4hoDCJZUEweH11SD4gqd+Pow2yOcaS5ylm07HfCYta3iY3LA0a6rhaIFywpW0k1C646fCX7e",
	"b0igiubxLw3L0BM8TRgN/Xun2r0mkzCDTgnOBL6Q3B5l+wxqyMr13nuugsFsKUbo6PFBGBxmT261Hw9Q",
	"gySTGBFu8FtpLOU4uoJFuBvmsCUM4CpMdkx0wXBZ81rvTvqfTLspg8R0jGk3TA8ts5nxnosc0MK7wMDo",
	"/HYuoM4dkWTsg2x1B18bYiEDJoHXVBme8wpekN+zzdEf1N0Jkn4apGCG8pIVJPqAj+sq7k/Qz7k75mEP",
	"7FFazz74PbVnYjneK6wN/A3bgCbjNYbmRAqkY2gIEqPa+5IKAoB6t3z7IImbsDXNTbmxAqhZsg25Y4oR",
	"Xc/QY6ZvyTKyyuIBkpaxLTM6Z4CkKX6rd8IlDBUtL2VCxvfQdviuOo+iFjrcO6iSsjxIE9lDTxKmUc5L",
	"pJKWDriLEPQRYZ62WmC76wB8Q4KA8kC3EA9rIv8pa5JTAU/S2rAgdUkFogwIvXYGKzaGOZ2/bIMzVrIV",
	"w7c3fHn8uLvwx48dFXBN5uzOh97ahl10PH4M+rLXUpvWcTuCJtoewIvEpQNGRHuluvdWl8vsdrlzI4/Z",
	"ydedwYPl0Z4yrR0p2+XfmyV0zup6zNpjGhnnbgjjjrKrtR3UeuuGfb/kq7qk5hgWRHZLy0zeMqV4wXby",
	"djcxl+LrW1r+FLpByDDLLY3mLMsh0HXkWOzK9sHYWDsOF9weYIxVGQsQu8Bel9hpx0O5cUnhqxUrODWs",
	"3JBKsZxhAKiVSXVY6gnBcI18ScUCnjRK1gvnxYLjwBVQa1RdqVr0hhgpipm1yMC8kLoknOekjxO2Qhij",
	"9mHatU3go+uOBghcsPiY2zvala6tJmnCnE4G3+0WzbfNux3R1Q52PujCaEmJEcYaUEaatQCZVmLqYzDe",
	"OnvgLAF8HPNJM3QKyv7EkVt683HIM/2yrqpycwRRCQciilWKabjGYqWdxq9yHic/8P6sG23Yqm9Vwa6/",
	"DhzRN3u8aKUouWDZSgq2SWYJ4oL9AB9HHkK4bgeGA1Fo/Gjd905r1R3Q2zOPoeH77grQSPekd22O+hup",
	"jmXmxgFHPyVG2JB3OlW4KQ+1dNOyTBiHXdhzl23oafCY5IpQrWXOQRq8KPTUObyjPdnFSLfR/zoEYR3h",
	"xHbH7VhB48wcoGdnZUUoyUsOWngptFF1bq4FBf1ctNSEq55XBQzrcF/4JmmlcUKn64a6FhTcNIPWLumW",
	"M2cJ1dI3jHlVrq4XC6ZN5101Z+xauFZckFpwA3Ot7HHJ8LxUTIG/3Am2XNENmVuaMJL8zpQks9q03xUQ",
	"1a8NL0tnkrXTEDm/FtSQklFtyA9cXK1hOO/I4Y+sYOZOqpuAhbFyw4IJprnO0k6G3+JXCGJxCFm6gBaI",
	"7cDP3sM6mtEuvJXX6P8+/Lfnb8+z/6LZ72fZl/9y+u79sw+PHvd+fPrhr3/9f+2fPvvw10f/9s+pvfOw",
	"pyLMHeQXL927/OIlPLWiuJQu7H+gxWTFRZYkxNiLp0N/5CHkcnFE9qit0DNLdi3MWlhiu6UlLyz/OQ7J",
	"dO+l3gnGM9WhrNZmddR1fvV7PnLuwZtIgjV1GOpHkdi6E2z1dYn3uxPH4FihPjqAbuAUXN05U16sD779",
	"+oqcOkLQDzDjBQ4d5ShIPFBclGTLwcbuUhw8di2uxUs2h1eeFM+vRUENPZ1RzXN9WmumvqIlFTk7WUjy",
	"3AdevqSGXovevTOYGTKKlyZVPSt5Tm5QwOpyB8zk1R/h+votLRfy+vpdzyOgL0y5qUayCZwys4KCrE3m",
	"sg5lit1RlbJn6JA/BubC1GPb4EAhRNaomvJZjdz4Y28UWlW6mzWij6KqKi2KIlLVLgOC3VaijQzBaZaB",
	"u/heSwM/Sufboeidf9HWmmny24pWb7kw70h2XZ+dfQZhfk3ShN8cA7R0u6nY6HftYFaL7nMWFo6COPhw",
	"ZxVdpEwi19dvDaMVUAhIGCt4S5YlgW6tEETveA9DNQsI8c57bAlCtnfsMCz3Env5bJbpRcEn2NR2fPa9",
	"djAKuD94A3cE7dPaLDPLEZKr0vYY+L0K6eoW9srx9n3NFyDxu1x/M0byJctvXMo1tqrMZtrq7h1P3EXs",
	"GQ7XmJ4PAxAhjROoj2eM1FVBnfBCxaabK0dj7AEM+obdsM2VbLJA7ZMcp52rRQ8dXaDd6K615BsfZDdG",
	"d/OdB5SPQ3UJTiC205PF80AXvs/w0UYB4AjHOkUUrcwhQ4igKoEIJP4BFBywUDvevUg/tTwuciYMv2UZ",
	"K/mCz1LZh/+jb63wsFqqdKkTnS9uGFATPif2OTTD69g9kRQVC2YvdXsRS01LTB2bNNaDdLhkVJkZo2ar",
	"FlbEcYEeOhDC7yAwG7QkU7sEtrb7zQ1oPQS7sy86eGxjG+fDe7KPjxMuhRUHQui7N/HXJ3u8Fxx6E2kV",
	"/e0ediA8DZyLWEyLACl+XzHI3Srv7N5ZuKRLMoqZYqJbqdZ0wcYC2zL3jEyy0bLiwCC7ZJ2kdCPnXSGm",
	"J1GMXAR2zyxekryA2S+WGYAqv+Ng6OdGM6CzDEAOcofUWQnic/DNRIqhqmUrwxTK44FNMy2mRCOaesDa",
	"WIsP+pJqf9Ahuazn3wfKhp800ndbtr2LyBMuyikbcun5u7jLv6ch9yImhfc593yiPZ9dbzLdK1PedOJC",
	"CFJbJgWIygUr2QJRgY09eTX5nZpNtHD8NJ8DZ8tSTnWRijESP9wczL62HhOCGnAyeoQU8Udgg1EcBiY/",
	"yviMi8U+QAqXn4r6seGCiv5m6QA8dHu3orCs7NXOByxPueckLk9GI9d0/IphGMLFlFgGektLy0BdMGcz",
	"SC/FGzxwOgndnKPGo6GHz14GCBRB9lolCi2HrC+Wrv0y0qL/XmuYyXWG0cbJ99NsPbNnIhkbALHPqcOL",
	"CfceaDKTa3AQgosNvcr3hm4YMg9Y5MGx5hqoHPoNyYYI3n6AbJfWU9SsgfSc8iyQ3ZC4ehgwAzLzENk9",
	"jDLvHQmkjpayKcbh1DY7lSltIasvgDS37LTJTOvDwFKsZuhwJndyAKN9DWk7V953TZbE4Sxr/qx+kiSB",
	"fc3bfdI5YucKUzTuk82xSw4tILZg9XVXdk2ite1z1MZrhLUUS7KMvm/C6qNNs5LBcz9ridPZTcrSfH39",
	"VjOQGS59t0iZCbtHxeZR5Mim2IJrwxrzgfdP+fRGHdAZ2qeVnA+vzlRqbtf3RsogaKCRFTq2lvnJVwA+",
	"5nOutMnA9pJcgm30jQZ12Te2aVr+bbvKYaUIXozlygDIDdtkBS/rNAU7SL5/aQH5MVxYup7B/cgFOgrN",
	"oPpJ0sl2L2DQM3srUl4hUl7Rj4iTcWfINrWgKEtk7Vn/JKepw/a2MZEE2aYIqL+PgyjdwlajsPQ+T43k",
	"5chv4mSbDad3BAs/9k7/KR8cPyQv4EjJtURZFNNRenKxYIXPDuciLjFplMvBV0qxiIp7VdW2lIMnBDP/",
	"QeK+LTn/nFs5G3Iqjx4kGRcFW6ehj98tAHkTywb5CmGSBROY+GSs2iyJrNiJHVpE2s1Py7p7Lu5Jp96r",
	"jiNv422L+xY2GLakZLRwrybN/Pq2H9T+FjnUTYfcgVupZLcfKhgQqIybqJZNP33BAJOmVcWLdcd4h6Pu",
	"oRKke2noB+Q4YD9usB04abv5JkmwldHcORM7I8UpvNxP7bsRvYudo6w9AzR3YfpFrcAK1PLd7SfUD2/H",
	"kWv//pdLIxVdMGfJyxCkew0By9kHDVFyek0MR3flgs/nLLZg6UOsLy3genaKYgQxjyK7tOHLtU4Q1g56",
	"aqDejcQ0DSWoY8g/4qpvO/Tvh0hFFi6SaLMOMAAmg/G/Z5vsF1rW9kHDlW4cR50xr31l70EHt6vv2QZG",
	"3umPaQHbsSugUXvDgCpTtpHwSUdZwx/oVu0FeMq2tnCPnTpP79KRtsbVzxg+Ds1N1Kom0V7KcY9K48Ji",
	"oRuzP5dprxB7nlh7K7rEvWtbeLFbloleEvFUXPsKqWMusJCNYqfHF6OlJ3BY4OTDdHI/H4zUHehG3IH9",
	"1+HaTWIevCLRJt9yxNpzE2hVKXlLy8z5rgwJEUreOiECmntXl0/8RkrT+tXX569eO/A/TCd5yajKgmZi",
	"cFXQrvrTrAorbmy/bjANu1PFouYq2vyQKjv2brmDlOsd5Vevok3jyxQdTuftMk+7a+/kj87tCpe4xf2K",
	"VcH7qrEbo/NV2+GK3lJeevOsh3a0azUsd1zppCSfiAe4t+NW5JF377EGnfWvr9/eesw25g90Xgqp8BP+",
	"bfogpX6X0aQPakPoO9gjLPInyOSZfkQJl+cTuKLzAKNHF/a+kap1M7ngwaQH2ceTAu0rAfGYNqBf+Sqs",
	"XdnvhKCc+NviN8sYHj+OT/3jx1PyW+k+RADC7zP3OzyQHj9OGnGTujrLr0AVJ+iKPQrBCYMb8Wl1CoLd",
	"jZMVzm9XQRCWw2QYKBRdwTy67xz27hR3+CzcLwUrmf3pZIzeId50RHcMzJgTdDkUCBi8kVdY+FUTKbqh",
	"7hCVakkL7h1XtgNt4v0jJOoV2IgzXfI87ZcjZtryI4E+trYxgcaj1dZ2jpoPOHqLmkej22aHJZ3tLCSa",
	"NYlwncyE2+B3Jh0LqAX/e80IL+xDbc6Zgmu4czP79w6M2pOo0wpCNzCa+Zrhj6v+2WLA80qxbbqfrQbR",
	"l8FI55eeKie1Z8hBPGOP3W8JF3A05G9LCCZbOu/dez7WvM00qUdxRlrPMJ09dPSsTU1MGAnTxXCdzZX8",
	"naWFAzDaJbJgeGszBy3570ykHEO7zCpY8v0K49l3kcR4JcEQcdxbKeAXHargHXJNp3nBfbf2kNe/TufN",
	"dmgfenvGrh/teJUBFgWHMvK+hrok3uGMCjyFmBSiFeCVPstxAOYpjt+cZQdzL2i1pHczmqpZZJ+AFqZo",
	"w1uucUYS39lviQ4JDnB2EoUMhLYcU99VTDVGnX4y4AOfczjt6Idc824DGotfbFP0Fim1TAxTizsqsO6+",
	"7YdczvXWDD0hbK87qSC5pU578RUs56uk7vr6+m2R932vCr7gWFK+1iyqPu4GIphBE6jIVXkPiTwcai7m",
	"5GzanFK/GwW/5ZrPSgYtnmCLGdVw7QavhNDFLo8Js9TQ/OmI5staFIoVZqkRsVqS8OQGgTL4os6YuWNM",
	"kDNo9+RL8hA8dTW/ZY/SZ96JYJPnT74ETyf84yx1WxdsTuvSbGPrBfB1Hy+QpmxwZ8YxLCN1o6YDAOaK",
	"sd/Z8A2y5Xxh1zGnC1q6S2f36VpRQRcsHSK02gET9oX9Ba+KDl4EGlOYNkpuCDfp+ZmhlmMNBGpbhohg",
	"kFyuVtysnK+mlitLYU3ZcJzUDwel8nxFMw+X/whO0FXi2f4HPKLoaiCQENzZfwQzeIzWKaGYv7TkTeCD",
	"rzFLLnwqZijxFiq7IW7sXHbpIJNCHMScVIoLA4qg2syzv9hHuaK5ZYgnQ+Bmsy+eJUqltQvriP0A/+R4",
	"V0wzdZtGvRogey/XuL7koZAiW1mOUjxqUiVEp3LQWzvtYTvk+Dsw9L0laDtuNkiAdYsAacTN70WKYsuA",
	"9yTOsJ69KHTvlX1yWq1VmmBobXfo5zevnCSykipVy6FhAE4qUcwozm4hjDO9SXbMe+6FKkftwn2g/2Od",
	"zrxYGolu/nQnHwuRQTjxMgvpiqyk/8sPTVp4sEtjeGxHJylVQvvq9Iif2DF0Py1g1/yNXnrwbQBzo9EG",
	"o/SxMhBwgREVoc8f4ZLVBQn3vKUAffIbUfblDrL+48cA9OPHUycq//a0/RnZ++PHYzMdJ1WA9tcEXo7y",
	"soa+qX3+SiYUcl/JNXJq79fl0oEklKbJi8zepzM3xpS0q/99eqHjOFGCYz2C04fGYwQ+d1HyB/NU2MNt",
	"vAAK3Y5ScMEae8VMk1b9na4n0ZbYUWeslPYJBrWLRunak6TZuQk9lf6xO2DR4QBO4r/mZfFLYyXtsFlF",
	"Rb5MOi7PbMdfUaZtXVDbKpIsqRCsTI6Hj8Ff/aMx8az9mxw90YqLsY27VXZxxZ31NaC3AfVg+Rkthrkp",
	"7QQxYtupn0IyjXIhCwLzNKUsGgbRr8+dKhGaiC+HYVe1cb6zEK/vKkzMeQmOn2lDL7TMFDUDTAaK2Pua",
	"RnYcqCmv8WWOozNFKF/BzaXpqioZHNdbpugCukrBOt0hMRiMHNWpILqyn6AlpBmRxNRKEDmfR8tgwnDF",
	"ys2UVFRrHOTMLoutYe7J8ydnZ2cjExVYfI1YO+LVL/ynZnFPTqEJfnGlnjAF/17gHwL9h4bq9tn8PnG5",
	"uppQKjvFjLGGNihcwPRpbzesqRnqv56QbyETliX0VtJ50Av6VL3tdJN1VUpaTCGp8NXX568Izop9FAPU",
	"QU3PBSjB2kckadkYn37TZ/oayJI0fpztSVrsqrXJQsHNVJ4+26IpEso7Pj2gHouxc0JeomYyuKvgJARS",
	"U6sVK6L6nvgSBuKw/zGG5ktQ+Y12hB9djdbzvMZGEoVbhlJJwNct4K4gLdajnRIo137HNYN0B+yWtTMB",
	"htSZTgvtMwO216dqIZBU9qniHgoj7Yt3DxyKfN5VIAnZvpjfpfHBMtX7luu9hF7pMJJO7d+O5R6rLax9",
	"vYYT8oNT7OdUSMFzqEqQEj0hu984o+GIkg5p256euEObOG/JisMhHNphcbAGseeNDnF9I3301W4z0gv+",
	"adja1XlbMKMds2PF1BcAd8YoLjRzpa8sWcWsU6qE81IyYiM4QdybsCAp14Au8Rv77Uene4asJDdcgE7J",
	"IdI9dtCAVGoOlmNBuCELybRbYTs0Sb+1fU6u1uLCruHdySu54PklX8AY6EBnEYGOq/2hzr0bq3MbtW1f",
	"2LYusX34ueUIhpOeV5WbdLhgfFImNWuxB8pTPkzePSRCd5gxHn8LSW71UYdr2BIjuwUPNlbB9d0jnlCG",
	"vD3K1/bhhlQHLQiGkCZz0HKRAOMVF97EOfaiyZNXC2wenPLRI+lcUYOvl1G88YrRciC+A4K90Y5+36G6",
	"if4t2mDVfo7hrW6qrA8woNCgeXBQsSH+KNkzEckpL2gZvL4TNdNBYHPyGXrFdqqopxiQvQAyH0faQtfO",
	"CMbQHQps7HujDaW6nNXFgpmMFkUq+9lX8JXAVx8Vx9Ysr0OlqRAg2U4OPob+3NS5FLpebZndNzg6AAXX",
	"VGu2mpUJV9SX4SMrAhVAEqXZBv5NlWIa3j3nAb53OLN39y72y5rfD89OCd2W7jPNF9l4TMBtdX90NFMf",
	"dhia/kc9DT6q+R8iaLnDCeM9SvHAr+0FFOeR7vm84xUV0jyDf7mE7z6XVUg12uZccCX2Co6BLwNsXmLL",
	"OsD7hknAb2k5kEIgtnfgPY02gKFEAvlgbgxqXOY1Q8mebGowdxV6JHdsKn3D4JDPMbocf0zLg8PHVqQP",
	"2+i+b1nk0F+sYSiDlrjDjGUNEexrLXP1AfrKWVqWMh/NGdww57bTcC5ZuVq51OwJf7bblSzisxD7QTGW",
	"ZmzozpsINYDXcfIbPNSSX9RderSWWsV9dUJnj2QAaQ7gKcYkemD81DhRPGyk13V4JN/wEqoR/fvlTz9O",
	"hrctwnd/A10m56QufGgbQpBWlxgWMrF6KL+T/F0P6OEhY1Gazl1x2+SHb7RJToM5ewY/vUp26+3ZQqZq",
	"LvQzoUwa3HlMRVvX7AUe9ngrU1vYLc2TeN6gGrNpQkKxylHFK1viy5hKQKmiM07Q9zpVvANcmjOsxNMr",
	"4tPjbS/HyG09fHyYTi6KvSSbVOGiCY6S4n2v+GJpviplfvMdowVTWIsi9T7EShQrZglIL3kFz5dKat7U",
	"jC3tYC4J9BKGOxkbRXK1ZC4biQ9a743lvYJvWW6gdHDj26gYG69lTa3PTu+titDkD3BuUIwVrDLLrUIM",
	"uitXZtlUkWQuQoprMmPOEnHLxJTwE3bSDaoqmuxDpGR07jWsSsrD0imG8BtAbLyMFLn1yvpuF9h6Kcai",
	"xHlYa/VkfD2P8+D3jiGCd1Q3SYt8xP++UcbzOcshd/rWJG//sWQiSgU29eo7gGUe5XzjIdANsv8fQ4Hd",
	"gLgt49pWCKNKRh8BwKFMDTds80CTFsUkC8SGSNBDkokDTtAs67PRD9ktnKsf14F6AC/es9ulcG+K8+yR",
	"PT5KdHjg7J6Q7ZXUJD/cC4h0af1Rs9uu90zGCnLiUK64fo3t4WfqSyhprp0vJA3pyWP1Drnol+C9c+nN",
	"IW1fsPD5ROdM+998Zk+cpeQ3rn4J4AntqXdUFb7FUZKu4c3I00DPw8y8iefp+/CMKg4D4XN5Ka1Ykw3F",
	"KbaDaoK36QONbsFNOiyAdM6UYkWw5JVSs8xIHxG0H2Tb0IXe0AcharR7OOT/sAsYTKv/pqktAAUAKaTR",
	"p84tOkYCUWxFLbwqyve/DxTbtugFfvcpLXy5twNUnOEk7K6D7GPEuO6hPj5Pc+Ju+EOSZxyi/+RCMJV5",
	"w2s3+b9oZ1eEzLtFnaOYER/CoDUendFqC9tKqg7z/io7r6EoF8QN25yicsWXlPa7HAONEiGCHqUc7hDC",
	"UTXCOgX34ijg/bEZICspy2zAjnfRr1jQPQM3PL9hkM8zRE5YCfZB+7TYSchDMA0F94675cbn468qJljx",
	"6ISQc4HRa97To118sjO5eGC2zb+GWYsaS484Pe/JtUiHAUEJEHVPHuiH2ZfzaWZZ5j0nx0H2zmy/FkOu",
	"a3dQLqRdGfZkrI6i743RkZIiwkMoUjLSJRpjXwAzSBV+h2wgUdoasOxT4oy4RJcy5SJ+SMYSO1QaU/Fk",
	"AJBh4rA0GQEuN10SJcm6/omzi4ktXUpLOSeKNX4Wh+b2dOkykaHrIY1Hd+YwS5tLzqVi8YzgEIq5fkMU",
	"FqTNhf/MuFFUbQ7JwNlGVUq7NIjlnW6NwaOxWUjj1djHYVnKuwxYXBZq8aSe9badbl/hvnRl08+e/BmL",
	"/COpdmLihixpQXKpFMvjHulwZIRqJRXLSgnukimXjLmxL4MVxCAKUsoFkVUuC4bVstIUNDRXLQQF8YtF",
	"rmhJFCDtQHg79onoeOSU9iZGg2gGItvOsgx+869sH0y10GRfw0VnaKYfCBlg2mVbcxjCxn14gXAwJ1BX",
	"1zqWf8/5GiiJqRQTmBOjajYlrkW3NrtjBVQxsuJaI3CBuu54WULuA76O3AyCb08a2QMC9QW4MN9ycGFr",
	"58FAObuyd2dIFxJzhcs4SxgxSyXrxTJKOh/g9A93VbtnfTzKz7oGL0MIcLRTPCMrqY17HeNIzZIbX86H",
	"uRRGybJsq+hQ+F84w+sPdH2e5+aVlDczmt88gre4kCastJj6hABdt9tmpn4G/e3XdoaF9Xen78Z24JXq",
	"CHs0E+2wwZ5hYZemPgLz3W4uu9tucd5fWHddbYabfiCdC0KNXPE8fe7+XG6sg86nKTaWTPqHFWoxdQo0",
	"g+MfX2jBtwjYaB/NTNBkic1z4liD86gABmT/C7J9d1wyZ471DFymfXbjZK8sH5QQOwAApBi9b2qFZW1j",
	"+S3wGbnAbB/gD9IFdOTNA65594PNjnB0oAy7F1A9t+IA4ENUa0wxOSO6KM/k2n9/1GRvPAj4D9upvMU8",
	"hnweLxvSUuj16LMvDXCEdJL7rQ6CV5C5YTbWTTCUKT9YCohAGnYcbEE1yn3w/oDNKS9ZkaWq3F4Endk0",
	"eue7GMtoPl8qELl9TmtfUtaOXSvmMgbhU0G1rYoVteQmQ/O+zlwUbM0w8up3piRWhp1GNixWYuHYjipC",
	"VlnJblnLw9KlMapBZOW3zPfVoTMpGKvA6tvV0KVVQtskgI4ix2Eji5zPxuA7qdlBVOPekR1qm6SSaS0y",
	"PFx67AG0EN3yoqYtjOp9BZW2WtIygASqeq+PzL9Qx07zM47wxg9w7vunBCCPiXfjuNfejCuNum1sa6dz",
	"ca2HOINI+xbHWbuCcQlmK4J5G4m+4S26ondiWEE65hA0T7uRO8eliFD99ZrlIB25lxQr3FtqwBzjEgAB",
	"/QvGCnxv2C4JC8GSCSJkVHL3jurwCGoSlfofcGJoxIV7uR9gvG9cgO+/1wQGI7qTaXCPJ4oKtHy4SeEP",
	"Oa1bD+vgeCmq0cyF9W7RvvkT4B400EDWZUGExbN9VUDRWnf3OU4/JbPaD1SW8g6r6sZv3pfM24mRHr0h",
	"ywn8PFzv3vl56rLqdhUtPAoNWdENkQr+sS/cv9e05PMN8CIE33cjekktUTnDNHpeOGdqO/F2wW3qAfO6",
	"HumnwnXzsWNGw23sKBHQ9vr3xcUkWdEbFm8DOJUgj82NZa66noGWxF70ne3sY8Et3mcrWtEi1ipAptVN",
	"i1/4rN629/9qAlrjqXw6xKqkua+h7EqktTkPVFf3xGWWbLU95LnP6TwJhIrtDdEqn1yjOEBhuyczSwX7",
	"DJV2aoHdq0ndq2p1r2WM1Dt3qvVsCRYftZSjgX9v76beMuJ6s7sWFJff/TQ7kkyLPLSMMeD/4+7EQOHu",
	"eAVYo/sT4L2VpCcBK+rTZ3KdKTbXu1xyUKE+k+sGYB1UvlzkilGNXksXP7lHbpP1lwv7DEev3mCrDaMU",
	"bM5Fw1C5qGqTeA9B8l+xiRAWmyUAraPNfkOyhRVKb2n50y1TihdDW2lPEBarjcvPeOOM65tQqYSbuD8A",
	"183rEMKuG0V/3Mxe+1gWDx1utaGioKqIm3NBcqastEDu6EYfbgUL5otddjAayUDtjCGRRQyIHQEpN860",
	"fU8bVQCQHtFYNcLIBJ7dCQMTqpqMHLAp9WH4kxqZVnSdlXIBgb8DR8QlgAY7JT43pQBFPcp5h2LCz6z5",
	"72z7xFCLw7EvIwGOwybdzi1+AgKAR+zPgput/AI1rd1obfSlxuPsES8WTRgIklj/FKdC7l1Kpzjs3gu2",
	"Pt2Jp1gWbTQbbfdq6/sH9h6cQlyWh1i5P75sY9vvJBXYj7qLDHQaekvoB9NNUAPNnUNbX/3XU4YgmqYu",
	"dcK9tYNoifB34ADAoL7Rjou0AQlORnacfapfbk+NkFWyyvIxHrlY5KdwBhEHaRvG0TQUGUAGMBEcinQo",
	"hNXKwdaqiLVvSdDBily7LH1Vvk0tMaTaGrg92uYXOQcuCQcfVXwQCRYUQFOvAPAW+rYyL7AWQoliea1A",
	"/X1HN7vLJw4kfL/87vzzJ09/ffr5F8Q2IAVfMN2UEeiUH2y8LbkY1FV9Ev/K3vJMehN8chJEnLe9+qC8",
	"sCnu9CGP1k3+317xxX205IlrIxXV2681d9BewThNAMc/1nalFnn0HUuh4OPvmZJlmS7jEiS2hBkotVuR",
	"Ici+fyqmNNfGMsK29Zebxs9cL0GBCYm6bzFFlRQ58zpvRwXcDLikpRYy5KYM/AySODjbF2HrqnS8Cu1V",
	"29blXomoQwRxFHyEZoxUsnLPCD4nKYgglkzVLGjznWoWtPiR53FgtuiDnCJE58+fJr1z4d7hck62c/t2",
	"4WqT5vR2ExMiiD+UB5DmkE1lOEHJIZykMUf8w/CPRMaVo3GNsNyPwSuSr4otMevnPZ+PkG1kFGj9zBoJ",
	"8gAABqK1WzG0UThglBFcoR0DLB7eDN4VP35ozOM7g20AEt9hB3hxsHXTLsSHOHD+4LzaPwSkREt5N0QJ",
	"reXvit/2rDdcJNEWOQWNMUwjW5J9sTAK19cvQhT8wDulFyyvpDTEvmfLMhFkjzojOFMx4dgngbql5afn",
	"Gt9wpc054IMVb4ZD0OIo6hjJiEp9rHSgr+goaKKI6Y8JjHgNof7/wew+Ju9CN5RzN+jdeKBaoiW6qM+D",
	"lZ0JcgdjohPaky/IzNXTqRTLue66Mdx5ASYEBDPF584FmK3N3jHJu1b+izT3IP6590siP0Zmu+Cd4GBu",
	"DvYfzIoGznvybKQotEcoCfylOFtciHzHJXPP2iuHZXyKckDumfGpX2J97PJgHXBV1Zr11zn6jm/hNnG9",
	"N2sbm9JsdAmX6+u3ZjYm71i63IrtDqnQjlJ35Z5VVz5JEjTEoxvDQZKkqka63pVGp+O0GeWMaG+hlewH",
	"iq4vEfd2NJD/57XA8UJ5UYhw9zxdzqfBKUIK2+05uRaPiV5S/4xwfz79/IvJdMJEvbKLb75PphP39V3q",
	"UVask1GxTUafnqOqK1TwQJOKbvYIwa/2QG6Tr+jTiy7a8Fn67fad3TB4oLowiQsBTB4YC96dLpHP/2Qi",
	"Gh0SGs4KEmOTkijsw67sRL8MZd7H7PIDJUQ6TLfm5U5vu1ZNmA/TyQLzpEHJk19dDbhPu+cegoFsgm7p",
	"98lEhohJrLU1eTRVlFduRJUX1y1RdgOCxvNacbO5tPj3unX+600qAdW3ISWUSzsWTPpO5DXyhgnvrNYk",
	"kKq1F6q/lbQEoRM9DYQVNWV5Qr7GsiPuNvzrg9m/ss/+8qw4++zJv87+cvb5Wc6eff7l2Rn98hl98uVn",
	"T9jTv3z+7Iw9mX/x5exp8fTZ09mzp8+++PzL/LNnT2bPvvjyXx9YSrcgI6C+CNHzyf/JzsuFzM5fX2RX",
	"FtgGJ7Ti3zO7N6BGm0NCQ0BqDpcrW1FeTp77n/63vyJPcrlqhve/TlydxcnSmEo/Pz29u7s7ibucLiBn",
	"S2ZknS9P/TyQ6bL1THl9EUKX0IkQdrQxLMGmhhSD9tubry+vyPnri5OGYCbPJ2cnZydPICVjxQSt+OT5",
	"5DP4CU7PEvb9FPJwn2pX4ee0CXNNug+8gUge/25XC1aQhyE88V+CA4l+5KMc5y5r5d80EmNYxUUBxOXq",
	"kU+gnip4kgJYT8/O/F6450wkVZ5CUNzz9xPkH6lkuT2kXjUAJyFrqjn3F/2zuBHyThBICIwHqF6tqNrg",
	"ClrYiAaHbaILDfY3xW8hOaTt3cV5Vbm6SkMoh2qV7VPuOwOBhKI79oRhLR5XHUmnUN6v6XRP7G9NEN2b",
	"LLE70Oi1hdnnWAtJld016HAGriuIsHBGUCPZQ/R0UtUJdH4N8YZ6G86mUR0ghEaWRcB4D6Ov6/8mGLWk",
	"uwjJge1fS0ZLkIvsHytLqLn/pBgtNu7/+o4uFkyduHXan26fnnpVw+l7l/zqw7Zvp7E76+n7VtawYkdP",
	"75y5q8npe5dXa8eAse3j1DnKRx1GArqt2ekMSlmObcri1Q0vBWhen74HTdzg76dOSE9/BB0p3rCn/uUx",
	"0BJzH6U/tlD43qztQrYPZ9tE4+XU5Mu6On0P/wGy/YCnvWSpxH1YJYySpvmUcEPoTCqj8VfLDXxRd66j",
	"lr0jf257vUAI4Db1Xo6T52/7YbEwEPEjgYhi799GgmjN1AiJYGmNmEIQgVvtG0H47Vn25bv3T6ZPzj78",
	"kxV03Z+ff/ZhZDDQizAuuQxS7MiG7+7J8Xqq2maRuEmBgfUfGY4WhgMY3VZ1BiIBGTvqNHeGT2SGtl2e",
	"HZHHt2sPJPj7V7QgPsMMzP3k0819ITDAxQqqKFB/mE4+/5SrvxCW5GnpRbIDhbdzPPwxUyBus1PC23Qi",
	"pIhy8IoFihkyleVngN9oQw/gN5e21//wm1bDngMABBqjkWXFBXjSNvoVvExCHV7mk5d7HSAtbqnIfbRp",
	"E9oF+4WStyOMEBlQazavS5/BqSqdlso+bv1Euq4qy3HmVAfKcvFk9sGM6WbC0KQWuRToZwmhe943BNLG",
	"gH+JvuFVqwufW6qC3HU+sPTEb/rfa6Y2za6vuH35JrZ3WKP0MZk6YvYITL090JGZ+tM9Geuff8X/va+x",
	"Z2d/+XQQ+ExwV3zFZG3+rNfoJd5p97pGnVSPVblOzVqcQtzJ6fvWA8Z97j1g2r833eMWUEzGPyrkfK5B",
	"2bLt8+l7/DeaiK0rpviKCQOJ0d2veJecWm5fbvo/b0Se/LG/jlaC/4GfT72ONfVubrd83/qz/RbUy9oU",
	"8g6rxCQlGLhQaUlWVNAFZjIJakl7M7oBmtoD5KcqXF0uOQGhUBNY1qbRG2PUnctqEpx+4I4Lrp8LLmAC",
	"8MyAWejcdqXRle5Kd/e1ipcOsh9lwfrSUupqdDC2rsdwFMaVxH53HA1mxIo/7Hd0wKcEnab6hGU/1rr7",
	"9+kd5cZKWS7lP+C439kwWp664rGdX5saar0vUBgu+jFOzZL89ZS2T0pby2I3cahjTwWT+uq0DAONfNyf",
	"/9wYeGKDCRBQMJW8fWd3XTN162mr0f8/Pz2F8PGl1OYUpNW2bSD++C5s9HtPkH7D7bd1JhVfcEHLzCnS",
	"mprYk6cnZ5MP/z8AAP//CUjMZpUaAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
