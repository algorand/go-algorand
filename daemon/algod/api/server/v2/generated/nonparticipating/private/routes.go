// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XPcNrLgv4KafVWOfUNJ/squdbX1TrGTrC6247KU7L1n+bIYsmcGKw7AAKBmJj79",
	"71doACRIghyONLE39d5Ptob4aDQaje5Gf3yapGJVCA5cq8npp0lBJV2BBol/0TQVJdcJy8xfGahUskIz",
	"wSen/htRWjK+mEwnzPxaUL2cTCecrqBuY/pPJxJ+LZmEbHKqZQnTiUqXsKJmYL0tTOtqpE2yEIkb4swO",
	"cf5qcjvwgWaZBKW6UP7I8y1hPM3LDIiWlCuamk+KrJleEr1kirjOhHEiOBAxJ3rZaEzmDPJMHflF/lqC",
	"3AardJP3L+m2BjGRIocunC/FasY4eKigAqraEKIFyWCOjZZUEzODgdU31IIooDJdkrmQO0C1QITwAi9X",
	"k9MPEwU8A4m7lQK7wf/OJcBvkGgqF6AnH6exxc01yESzVWRp5w77ElSZa0WwLa5xwW6AE9PriLwplSYz",
	"IJST99+9JE+fPn1hFrKiWkPmiKx3VfXs4Zps98npJKMa/OcurdF8ISTlWVK1f//dS5z/wi1wbCuqFMQP",
	"y5n5Qs5f9S3Ad4yQEOMaFrgPDeo3PSKHov55BnMhYeSe2MYH3ZRw/i+6KynV6bIQjOvIvhD8SuznKA8L",
	"ug/xsAqARvvCYEqaQT+cJC8+fno8fXxy+6cPZ8l/uj+fP70dufyX1bg7MBBtmJZSAk+3yUICxdOypLyL",
	"j/eOHtRSlHlGlvQGN5+ukNW7vsT0tazzhualoROWSnGWL4Qi1JFRBnNa5pr4iUnJc8OmzGiO2glTpJDi",
	"hmWQTQ33XS9ZuiQpVXYIbEfWLM8NDZYKsj5ai69u4DDdhigxcN0JH7igf11k1OvagQnYIDdI0lwoSLTY",
	"cT35G4fyjIQXSn1Xqf0uK3K5BIKTmw/2skXccUPTeb4lGvc1I1QRSvzVNCVsTraiJGvcnJxdY3+3GoO1",
	"FTFIw81p3KPm8Pahr4OMCPJmQuRAOSLPn7suyvicLUoJiqyXoJfuzpOgCsEVEDH7J6TabPv/vvjxLRGS",
	"vAGl6ALe0fSaAE9FBtkROZ8TLnRAGo6WEIemZ986HFyxS/6fShiaWKlFQdPr+I2esxWLrOoN3bBVuSK8",
	"XM1Ami31V4gWRIIuJe8DyI64gxRXdNOd9FKWPMX9r6dtyHKG2pgqcrpFhK3o5q8nUweOIjTPSQE8Y3xB",
	"9Ib3ynFm7t3gJVKUPBsh5mizp8HFqgpI2ZxBRqpRBiBx0+yCh/H94KmFrwAcP0gvONUsO8DhsInQjDnd",
	"5gsp6AICkjkiPznmhl+1uAZeETqZbfFTIeGGiVJVnXpgxKmHJXAuNCSFhDmL0NiFQ4dhMLaN48ArJwOl",
	"gmvKOGSGOSPQQoNlVr0wBRMO6zvdW3xGFXz9rO+Or7+O3P25aO/64I6P2m1slNgjGbk6zVd3YOOSVaP/",
	"CP0wnFuxRWJ/7mwkW1ya22bOcryJ/mn2z6OhVMgEGojwd5NiC051KeH0ij8yf5GEXGjKMyoz88vK/vSm",
	"zDW7YAvzU25/ei0WLL1gix5kVrBGFS7strL/mPHi7FhvonrFayGuyyJcUNpQXGdbcv6qb5PtmPsS5lml",
	"7YaKx+XGKyP79tCbaiN7gOzFXUFNw2vYSjDQ0nSO/2zmSE90Ln8z/xRFbnrrYh5DraFjdyWj+cCZFc6K",
	"ImcpNUh87z6br4YJgFUkaN3iGC/U008BiIUUBUjN7KC0KJJcpDRPlKYaR/o3CfPJ6eRPx7X95dh2V8fB",
	"5K9NrwvsZERWKwYltCj2GOOdEX3UALMwDBo/IZuwbA+FJsbtJhpSYoYF53BDuT6qVZYGP6gO8Ac3U41v",
	"K+1YfLdUsF6EE9twBspKwLbhA0UC1BNEK0G0okC6yMWs+uGrs6KoMYjfz4rC4gOlR2AomMGGKa0e4vJp",
	"fZLCec5fHZHvw7FRFBc835rLwYoa5m6Yu1vL3WKVbcmtoR7xgSK4nUIema3xaDBi/iEoDtWKpciN1LOT",
	"Vkzjv7m2IZmZ30d1/mOQWIjbfuJCRcthzuo4+Eug3HzVopwu4ThzzxE5a/e9G9mYUeIEcydaGdxPO+4A",
	"HisUriUtLIDui71LGUclzTaysN6Tm45kdFGYgzMc0BpCdeeztvM8RCFBUmjB8E0u0uu/UbU8wJmf+bG6",
	"xw+nIUugGUiypGp5NIlJGeHxqkcbc8RMQ1TwySyY6qha4qGWt2NpGdU0WJqDNy6WWNRjP2R6ICO6y4/4",
	"H5oT89mcbcP67bBH5BIZmLLH2T0yZEbbtwqCnck0QCuEICur4BOjde8F5ct68vg+jdqjb61Nwe2QWwTu",
	"kNgc/Bh8IzYxGL4Rm84REBtQh6APMw6KkRpWagR8rxxkAvffoY9KSbddJOPYY5BsFmhEV4WngYc3vpml",
	"Ns6ezYS8G/dpsRVOapMzoWbUgPlOW0jCpmWROFKMmK1sg9ZA9SvfMNNoDx/DWAMLF5r+DlhQZtRDYKE5",
	"0KGxIFYFy+EApL+MMv0ZVfD0Cbn429nzx09+efL8a0OShRQLSVdkttWgyFdONyNKb3N42F0ZakdlruOj",
	"f/3MGyqb48bGUaKUKaxo0R3KGkCtCGSbEdOui7UmmnHVFYBjDuclGE5u0U6sbd+A9oopI2GtZgfZjD6E",
	"ZfUsGXGQZLCTmPZdXj3NNlyi3MryEKosSClkxL6GR0yLVOTJDUjFROQ15Z1rQVwLL94W7d8ttGRNFTFz",
	"o+m35ChQRChLb/h4vm+HvtzwGjeDnN+uN7I6N++YfWki31sSFSlAJnrDSQazctHQhOZSrAglGXbEO/p7",
	"0CgKXLIVXGi6Kn6czw+jKgocKKKysRUoMxOxLYxcryAV3HpC7NDO3Khj0NNGjDfR6X4AHEYutjxFO+Mh",
	"jm2/4rpiHB891JangRZrYMwhWzTI8v7aah867FQPVAQcg47X+BkNHa8g1/Q7IS9rS+D3UpTFwYW89pxj",
	"l0PdYpwpJTN9vQ7N+CJvet8sDOxHsTV+kQW99MfXrQGhR4p8zRZLHagV76QQ88PDGJslBih+sEpZbvp0",
	"VbO3IjPMRJfqACJYPVjN4QzdhnyNzkSpCSVcZICbX6q4cNbjr4EPxfi+rUN5Ty+tnjUDQ10pLc1qy4Lg",
	"623nvqg7JjS1JzRB1Kiet6vq0dG2stNZX4BcAs22ZAbAiZi5ByL3dIWLpPj0rL1440TDCL9owFVIkYJS",
	"kCXOMLUTNN/OXh16AE8IOAJczUKUIHMq7w3s9c1OOK9hm6CjhCJf/fCzevgF4NVC03wHYrFNDL2Vmu9e",
	"AbtQj5t+iODak4dkRyUQf68QLVCazUFDHwr3wknv/rUh6uzi/dFyAxLf435XiveT3I+AKlB/Z3q/L7Rl",
	"0eP+59RbI+GZDeOUCy9YxQbLqdLJLrZsGjV0cLOCgBPGODEO3CN4vaZK2zdkxjM0fdnrBOexQpiZoh/g",
	"XjXEjPyz10C6Y6fmHuSqVJU6osqiEFJDFlsDh83AXG9hU80l5sHYlc6jBSkV7Bq5D0vB+A5ZdiUWQVRX",
	"Ty3OyaK7OHyQMPf8NorKBhA1IoYAufCtAuyGLlA9gDBVI9oSDlMtyqn8rqYTpUVRGG6hk5JX/frQdGFb",
	"n+mf6rZd4qK6vrczAQo9r1x7B/naYtY6vy2pIg4OsqLXRvZAM4h97O7CbA5johhPIRmifFTxTKvwCOw8",
	"pGWxkDSDJIOcbruD/mQ/E/t5aADc8VrdFRoS68UU3/Sakr3TyMDQAsdTMeGR4BeSmiNoVIGaQFzvHSNn",
	"gGPHmJOjowfVUDhXdIv8eLhsu9WREfE2vBHa7LijBwTZcfQxAPfgoRr67qjAzkmte7an+A9QboJKjth/",
	"ki2oviXU4++1gB4bqnMQD85Li723OHCUbfaysR18pO/I9hh031GpWcoK1HV+gO3BVb/2BNFnRpKBpiyH",
	"jAQfrBpYhP2J9b9pj3k3VXCU7a0Lfsf4FllOzhSKPE3gr2GLOvc769gZmDoOoctGRjX3E+UEAfXuYkYE",
	"D5vAhqY63xpBTS9hS9YggahytmJaW4ftpqqrRZGEA0TfNQZmdI941inS78CYV8ULHCpYXncrphOrEwzD",
	"d9lSDBrocLpAIUQ+wkLWQUYUglH+HqQQZteZ8x333sOekhpAOqaNL7jV9f9ANdCMKyD/IUqSUo4qV6mh",
	"kmmEREEBBUgzgxHBqjmdZ0eNIchhBVaTxC+PHrUX/uiR23OmyBzWPuDCNGyj49EjtOO8E0o3DtcB7KHm",
	"uJ1Hrg988DEXn9NC2jxlt2eBG3nMTr5rDV69EpkzpZQjXLP8ezOA1sncjFl7SCPjvCpw3FFvOcHQsXXj",
	"vl+wVZlTfYhXK7iheSJuQEqWwU5O7iZmgn97Q/Mfq24YTAKpodEUkhRDIEaOBZemj42a2KUb1t5kbLWC",
	"jFEN+ZYUElKwXv5G5FMVjEfE+v+lS8oXKOlLUS6cA5odBzl1qaxNRZa8M0RUGtIbnqB1Osa5ndOxD/Qw",
	"chBQo4u1TdtW81jTaj4X2zPmSg2Q1zb1R1+3ppNeVdUg9aZWVS1ymtEqI7h4Q1AL8FNPPPINBFFnhJYu",
	"vsJtMafAbO7vY2uvh45B2Z04cImrP/Z5xRk9Od8eQFqxAxEJhQSFd0toX1L2q5iHkWnu8lFbpWHVNcHb",
	"rr/0HL/3vYqe4DnjkKwEh200GJtxeIMfo8cJ77eezihp9PVtKw8N+FtgNecZQ433xS/udvuEtp+a1HdC",
	"Huot0w44Wi4f8XS4853cTXnXB06a55E3QRe30mYAalrFyTNJqFIiZShsnWdqag+ae0Z0QS5N9L+rvHEP",
	"cPba47Yev8KQSDTuQl4QStKcoelXcKVlmeorTtG4FCw14rXkteh+c+NL3yRu34yYH91QV5yix1plcop6",
	"WswhYl/5DsBbHVW5WIDSLSVlDnDFXSvGScmZxrlW5rgk9rwUINF16Mi2XNEtmRua0IL8BlKQWambYjuG",
	"ZSnN8ty9xJlpiJhfcapJDlRp8obxyw0O51/r/ZHloNdCXldYiN/uC+CgmEri3lXf26/o+OqWv3ROsBhG",
	"bz/btxszfh27tUXbUx0a/n+/+vfTD2fJf9Lkt5Pkxf84/vjp2e3DR50fn9z+9a//r/nT09u/Pvz3f4vt",
	"lIc9FjTkID9/5VTa81eot9SPNx3YP5vhfsV4EiWy0A2jRVvkKwyQdQT0sGnV0ku44nrDDSHd0Jxlhrfc",
	"hRzaN0znLNrT0aKaxka0rFh+rXtqA/fgMiTCZFqs8c5SVNchMR6eh6+JLuIOz8u85HYrvfRto0+8Y5iY",
	"T6sQTJud5ZRgfN6Seq9G9+eT519PpnVcXfV9Mp24rx8jlMyyTSx6MoNNTMlzBwQPxgNFCrpVoOPcA2GP",
	"+sBZp4xw2BWsZiDVkhWfn1MozWZxDud9+p2xaMPPuXW2N+cH3ya37slDzD8/3FoCZFDoZSxrQ0NQw1b1",
	"bgK0/EUKKW6ATwk7gqO2sSYz+qLzxsuBzjF7AGqfYow2VJ0DS2ieKgKshwsZZRGJ0Q+KPI5b304n7vJX",
	"B1eH3MAxuNpzVg+R/m8tyIPvv70kx45hqgc2kNcOHYReRlRpF13U8CQy3MzmqrFC3hW/4q9gzjgz30+v",
	"eEY1PZ5RxVJ1XCqQ39Cc8hSOFoKc+oClV1TTK96RtHrTSQWhYqQoZzlLyXWokNTkaVOEdEe4uvpA84W4",
	"uvrYcaroqg9uqih/sRMkRhAWpU5cgoNEwprK2KOVqgLccWSbwWRoVitki9JaNn0CBTd+nOfRolDtQNfu",
	"8osiN8sPyFC5ME6zZURpIb0sYgQUCw3u71vhLgZJ196uUipQ5B8rWnxgXH8kyVV5cvIUSCPy8x/uyjc0",
	"uS1gtHWlNxC3bVTBhVu1EjZa0qSgi9jb2NXVBw20wN1HeXmFNo48J9itEXHqPepxqHoBHh/9G2Dh2Dt6",
	"Dhd3YXv5ZFbxJeAn3EJsY8SN+sX+rvsVxKDeebtacaydXSr1MjFnO7oqZUjc70yV42ZhhCzvRqHYArVV",
	"lw5oBiRdQnrt8rTAqtDbaaO799RxgqZnHUzZDD42ggxzSODLwgxIWWTUieKUb9vB/Aq09v7A7+Eatpei",
	"TkGxT/R+M5hc9R1UpNRAujTEGh5bN0Z78507GCr2ReFjsjE4z5PFaUUXvk//QbYi7wEOcYwoGsHOfYig",
	"MoIIS/w9KLjDQs149yL92PKMljGzN18km4/n/cQ1qZUn57kVrgat7vb7CjAdmFgrMqNGbhcuk5UNmA64",
	"WKnoAnok5PBxZ2RYcuNBCAfZde9Fbzoxb19onfsmCrJtnJg1RykFzBdDKqjMtPz1/Ez2/dC9TGCCSoew",
	"WY5iUuXYaJkOlY1HNptxrw+0OAGD5LXA4cFoYiSUbJZU+SRbmIvMn+VRMsDvmABgKO3LeeBqFiQcq5K6",
	"eJ7bPqcd7dIlf/EZX3yal1C1HJGyxUj46N0e2w7BUQDKIIeFXbht7AmlTkZQb5CB48f5PGccSBLzWgvM",
	"oME14+YAIx8/IsRa4MnoEWJkHICN7+I4MHkrwrPJF/sAyV0yBerHxhf14G+Ix31ZP24j8ojCsHDW86qV",
	"eg5AnatjdX+1HG5xGML4lBg2d0Nzw+acxlcP0sk+gmJrK9eI88x42CfODjyA2ItlrzXZq+guqwllJg90",
	"XKAbgHgmNokN/IxKvLPNzNB71LUdw1BjB9PmeXmgyExs0NsHrxbrSr0Dln44PBiBhr9hCukV+/Xd5haY",
	"oWmHpakYFSokGWfOq8ilT5wYM3WPBNNHLl8FqVvuBEDL2FHnQXbK704ltSmedC/z+lab1inJfNRQ7Pj3",
	"HaHoLvXgr2uFqZKtvGtLLFE7RdNppZlnJhAhY0Rv2ET3kab7FKQgB1QKkoYQlVzHXk6NbgN441z4boHx",
	"ArPZUL59GHhCSVgwpaE2ons/iS9hnqSYRE+Ief/qdCHnZn3vhaiuKfuMiB0by/zsK0BX4jmTSif4AhFd",
	"gmn0nUKl+jvTNC4rNX2tbMpZlsV5A057DdskY3kZp1c37w+vzLRvK5aoyhnyW8atw8oMUyRHPTAHprZO",
	"uoMLfm0X/JoebL3jToNpaiaWhlyac/xBzkWL8w6xgwgBxoiju2u9KB1gkEHkbJc7BnJT8MZ/NGR97Rym",
	"zI+902vHx+/23VF2pOhaAoPB4CoYPhMZsYTpIMNwN6S15wzQomDZpmULtaP2asx0L4OHz8vWwgLurhts",
	"BwZQpH0Pc5AQNSFUn6x3dCUuhXn5MLK7kQonsum9xv+mKc1flFWhhGCiOxjBXCbF/j2ufS8bmQabS9kl",
	"GFVmfDPdGIRfxK3nF0aXaOI20Khscu4deGY9unlIgQEHDqdiypeW6FJmFea4izgvgeY/wPZn0xaXM7md",
	"Tu5nq44RtxtxB67fVecpimf0hbC2y8bT054op0UhxQ3NE2fR7+MFUtw4XoDN/QPAZ75b4kfm8tuz1+8c",
	"+LfTSZoDlUklm/WuCtsVf5hV2fSKPQfEp643SrZXkqzsHmx+lRMufAVYL8HlAA/E/06y0vqFJziK7lVg",
	"HnfJ2sne3GOUXeLAoxQU1ZtUbS+1T1LNZyh6Q1nuDZUe2h73KVzcuIy3Ua4QDnDv56zgVTI5KLvpnO74",
	"6aipawdPCucayFK+son4FRG87bOATubbwrk5rCimGrVmqC5z4uUKTTeJylkaN2rzmTLEwe1jpWlMsHGP",
	"9G9GLFnP2zcvWTCWaTYmmVALyGCOKDJVNJ9RjbuZcLJDydmvJRCWAdfmk8RT2TqoXnrBUTvXqRHWunO5",
	"ge2TSD38fYS6MM1u+8ZDIIYluvBptAPuq8pG4RdamQBroW5fD4twxs6VOOAd4ejDUbP1Fl02nzjDmkhd",
	"/mcIwybH312QyQt3Lt9vzxzRAktMJXMpfoO4Yo32iEiEmE8szNCt6DcI5cewrEiDxVTmtLpOVD37ru0e",
	"L7z3bfy9hXW/6CqX8V0k9fipHr+RA1K5iqcqc3jskxJD82nTu6aHe+AJCt6TMVOsf1qh3B4ZGwHVcNKM",
	"H7zQHfrYjl8fPAdzx4U8p+sZjaXRNcKagSnYwcYjkBbEd/Y4VlWYkJ2dBE4QVVtmsygUIOsg2G5GpjsK",
	"Xnba0SJXLWEh0YSy1dQ+XOdKRIYp+ZpyW37I9LMsyfVWYK22ptdaSMyBouLvVRmkbEXzuASWpd23iYwt",
	"mK2sUyoISre4gWzVMktFrvxNFfzmUHM+JyfToH6U242M3TDFZjlgi8e2xYwqvBErC2rVxSwPuF4qbP5k",
	"RPNlyTMJmV4qi1glSCUco5pYvbrOQK8BODnBdo9fkK/wvVmxG3hosOjknMnp4xf4WmD/OIldpK4y0hBX",
	"zpAt/92x5Tgd44O7HcPwQTfqUTRdhC2N2H8BDJwm23XMWcKW7s7YfZZWlNMFxF2cVjtgsn1xN9EC3MIL",
	"z2xdL6Wl2BKm4/ODpoY/9YRNGPZnwSCpWK2YXrlXSSVWhp7quix2Uj+cLRLmUmp7uPxHfNwv/NtmSxn/",
	"vNZ+KyfEVo0uGG/pCpponRJqE9/krHa78Yn+ybnPq4U5xqvU4hY3Zi6zdBQX0QtnTgrJuEYFrdTz5C8k",
	"XVJJU8P+jvrATWZfP4vkVW/m9+X7Af7Z8S5BgbyJo172kL0XS1xf8hUXPFkZjpI9rMOUglPZ64UQf2/u",
	"e/QeHnqscGtGSXrJrWyQGw049b0Ijw8MeE9SrNazFz3uvbLPTpmljJMHLc0O/fT+tZMyVkLGkmXWx91J",
	"HBK0ZHCDTqfxTTJj3nMvZD5qF+4D/Zd9MvMiZyCW+bMcVQRuVj9783ZvsIkR4X9+4+qAdmTvHgcZ6wFT",
	"9fnMQTRRXzoroaH/KcFVk388/geRRllEafTRIwT60aOpE+b+8aT52TKpR4/iKaSitiHza42FvVhhO8WG",
	"6Rvbw29ExFLj6zVUz3guUCZiKetjteaDOcozN9SUNHPjf/678DAumPFn9vgpuLr6gF88HvCPNiK+8JHH",
	"DawdiexKegglqA0SJZms+h44+FDyjdiMJZwWJ/XE8y+Aoh6UjLQj4Uo6tU+ir2LRl1dy/iqkTTPaDHJh",
	"VKQwnXNocP7j4NcsejqA5ZLl2c91cH/rApGUp8uoW8TMdPylLsVZLdGyyGiG2CXlHPLocFYz+8VrcBEd",
	"859i7Dwrxke2bdfcscttLa4GvAmmB8pPaNDLdG4mCLHajJuu4nLyhcgIzlOnI62ZYrdWU1BR49cSlI4d",
	"CfxgfYPxNcYwXVvQgQDP0HZzRL631faXQBq55tBm4pMBNRNjlEUuaDbFJEWX3569JnZW28cWlLMFJRZo",
	"MmiuImrGHZ8opKoNF4+AGz/OcEiOWbXSSVX/IZZjwLSoK1Sw1sskGhNC7ByRV0HdbJuOwAxBMEeVXEEW",
	"lJuwmgTShPmP1jRdooGkcYH1k/z4SiieKlVQfbiqIlilH8ZzZ+B2xVBsLZQpEXoJcs2ULbION9BMa1Dl",
	"+HAGOp/moLk8WXJuKeVoD1miSja8L9o9cFYQ8Y+XUchaiN9TPbaFhPYtDHOBvaLZENtVZjplh22QfFUd",
	"7o0vHE254CzFXIQxQchVYx/zHDIibWP8kUNN3AmNHK5obZvK29phsbfajWeEDnHdp8Xgq9lUSx32T41l",
	"v5dUkwVo5TgbZFNfoslZ5RlX4NJJY+3+gE8K2fCWqLzAuuV3q4faPckIoyt7zCzfmW9vnREOw46uGUd1",
	"26HNidfWbo7ForXR0ZkmCwHKraeZYkJ9MH2OMNtCBpuPR764NI5hnQ3Msq1nTXeoM+9n4/xaTNuXpq3L",
	"gVf93AhksZOeFYWbtL+AV1Qe0Bvei+CICJT4B+sAudX44WgD5DboIIf3qSE0uEH3GijwHu4QRlXMqlUo",
	"0agGlqKwBbGewNFEOIxHwHjNONSlzyMXRBq9EnBj8Lz29FOppNqKgKN42iXQ3JotIgxNafcQeN+h2hkA",
	"DUpwjX6O/m2s63D1MI6qQS24Ub6tKq4b6g6EiZc0rxzMIlW1UKpyQlSGgWmtOlsxxmEYt6/k17wAeqwp",
	"DZnIdsd0mPveRH25BmZltgCd0CyLZff+Br8S/EqyEiUH2EBaVlmgi4KkmFqrmWusS21uolRwVa4G5vIN",
	"7jldULguQg1h8Ty/wxjLONviv7EUyP0741zL9vYm935k2X4J9rre8TGp19B0otgiGY8JvFPuj4566rsR",
	"et3/oJSei0UTkC9hHO3hcuEexfjbt+biCBPwdPJ626ulyo+DrsTClxtGtbHK7NDkSniVdRJ949NrVc50",
	"2AzRX5h0ipdfTwRHaOq296s1//bFcaS9YUdUuwBoTckgC+oNKrU+iS3jefcdo88P0bohHs7o7NY6iFDv",
	"4NoF6AfvPU8KypyjSs0suph1gU3dULMxHvj1BrcX4cKFeu2iP9z0hfb4fJv4vV248BpcVpRCwg0TpXcB",
	"8b6WXiW0vzbKAFbBVdH1d83bONWXNTr3msgvXQEZu0ynk//ws/XMJcC13P4LGMw7m94pidiVdq15qm5C",
	"qtoDo2oRNG7FMbloY2lPnWzYKMq4o6Rkh6xejREHuiUip5PzbK8LM5Y6d2JHiR27eMHH/syCdTZBPGKF",
	"UKwuARKrBDnSqfkSizkGmRG7Y3lPuBtINdZ9qT18JMA+eRLNZEFt6f/OMNijTle+3y6x4FA2wW6xlx13",
	"fCfgNwhat4Uyjsbnzjur/DiRT2PC+wVwV965GVk2Or5lPodUs5sdAdZ/XwIPgnen3i6DsMyDeGtWxUtg",
	"fq79rY41QEPxz4PwBHly7w1OX7TfNWwfKNKghmjljqm/au+SmgkxgNwhMSQiVMxPyhqSnesKUxVlIBa8",
	"X6LtDnWSy96if0G6gDvO5UnSXBx1CoGBKeNVx0bNZbrulVgDXf/7YrC7RYv69Y9XWCNKVQV5fWqnUEsn",
	"590EuGuXGgrD4au3E58kCpT/zee+sLPk7BrCsoT4UrWmMvMtoqYXb9VJBu6jTuC0L7jTBnpezcxqL/Lu",
	"G3UkpSLGXKS5MGJE0he40nTcrryeHijrnmYrfKBLuoFrDtKVb0X5NxcKEi281/kQHEOosD54d0KC6k1j",
	"bIHrTS72vs6ehuncKSYTo871LlwgkbCiBjoZ5Djrn3MI2S/tdx+q6NN577QwVfS6u66Mjx9gqoPEkOrn",
	"xN2Wu0Mg72JsYpyDTPzLUzvhGQfZfA0ppMjK1F7Q4cGoDHKj0wkOsJKonSbtrrKlIwRx5NewPbZKkC/I",
	"43cwBNpKThb0IFFOa5MPan5TMbgXBwHvS1quppNCiDzpeew472Zpa1P8NUuvISPmpvB+tj1F0shXaGOv",
	"XrPXy63PSlYUwCF7eETIGbeRDf5hu1kmoDU5f6CH5t/grFlpEyc6o9rRFY+7iGNKQ3lPbuaHGeZhCgyr",
	"u+dUdpAdOcA2PRniJF1HSgYejdXKu0/N7TJuNVFZKGIyyYV9sXqJBz1mOFpLpsE5NthL3GwkcS9dROUi",
	"5ooJ63HZJiq3XbMjuei5uMPJECANY9J61FC4waMIqEq07XAUqnyE6upWtZ9QVzzKc7FO8BglVY7LmNJl",
	"2qnmNeHTetf9DL3NIPA4osqJEFuypBlJhZSQhj3i4VAWqpWQkOQCHZBib6NzbSTCFcZAcJKLBRGFUfRt",
	"rlj/ihStvdaZq+Sc4oUOgb9HFAU0TVH7FMT1IVWfsVMeqrSdzcpgF53YV7aeJDSgXBYGhyHbuAvvQHW5",
	"/SvXXS4jxjLEnCeQvcvTOSLfu6pUAOaIw7XbUHgWq77XXFe7DmRfVVYtViyNo/uP5SLU69gTo94YKlxi",
	"dxufi82Qp4R8rHoRxtPTRTNwOsuj94M7fu5lDOnc/BfFhva4ZA6On/Xw0EgZecv6k7T3gmoBgJDaoDFd",
	"SpsNPrw+qhqTYmGDTPFdrw3oSIaD7hP3g82McEigbocJJVaEMnIQqt1xNTJ9lHzPoYo6Zgz7QdjCxLOx",
	"3hBV8YuR/DMAoN8/ogHDKC+JfcGYY6HvhEaQfF7pptNAwnae9e2SRkw5ZphSa5taAjFjlxJc1LatSNwq",
	"gVhQvfSyqmnetSDxDDagMKTa1nGjyto7vd3VlUNuKwGiSHK4gYbbiAslL/EiZzcQllK2nUkGUOArRFs3",
	"jvlDhNdhS2Fya0+CF/Ux2I1qUBaxdqfIDvUoqsxteGKPiRp7lAxENywraQN/6h5FZfvryXYksMRKWvZA",
	"jCsi/JMdwzMNJ8nFhAGPiI/j2NDeHCiOuSH+s9M9Cg9U9NDzuHdUmCahsqvibFn1/mIpvGYbqqBr3m+H",
	"6FJ8LcuO36YAsd9uIEW5oOn+c3+cEByMqFYKlF4hVlY7fHd71gFJ2FPvmTK6kuFOA2Q8RMWd0tpxzRW0",
	"S8wbppXzypXrG7nYrWmfqcgATNWcDb2VofaGDZqt6JZkbD4HaR8vlaY8ozILmzNOUpCaMk7WdKvursUa",
	"aGUJ0516rLlncFDPamMaLdrhLSD51plI7qljVgDSAyqbI5REfCWPKIhW4NGir+J4B4Z46BbdGD0efVh7",
	"CNClZ0Et3nIiwVGfISt6DXvOo9hvMDwNJp9z7yxa4KxjprgdPGc/IuqQm/3EmR48aVZSbjsV21dfexA8",
	"/fNF7XpiN6dL/zE/8Etb9zL0BW+XkfJ7bU3Qdj7oSYvdVHB6dhGNcC6IINRm1HhFv2Hni3mb2wsqwYtL",
	"DTiXgAoKb6bucaAr0HVuPIuUqfPV31Pes4oWzTJmBaV4cXysPeHOVnPaymBrxhn/LhFYJ+MQFaJI0jEv",
	"jhnkYNic1fccpE0YR1g0i3THlRSVAHq4UlO5FHPkD3gsrNyDvlnVbT9tew02JZzq4GER/bSUqACs6XZ3",
	"ut1ayokHXNiRvfXC+5FVULsNtkdc2bps0Wy2+4jWEa4TK03WzSN6+MXYSKLa1+H3W457zYwv4Iw7FRML",
	"zg7RW62EelKJ0Brl2xjT8O91d1hgn/A7whf+YFtVnZbfY4OGL8m4ihYThNoSjxeGMLQTRbOmv5MqZ+5y",
	"7cpKtd+El8grpmYFGXP7pq4YI4c5c5ew/VhBoJbUCAlH5JzboFmyFjJTKOCasSUQLkxzLZmPLOR1DkF0",
	"XvAg+cR1RU7TumR6115DznIliAIvauotedCvaDwwA/UqsGijBoggKERLR9azxp6Uci50DD8OLf/TVZ3R",
	"kior9A8t2GaEx/uO6raO1tWSsXnPheqXY5h8kGg+3HbpM0tkNgGckJmXhyqjFP5nxrSkcnvn0q51dotY",
	"IBf63vhUfTsWY7Oo+rR+n2Mp0WSvkWU0FJhDq7X14B/HMJLIiENy9yjW4FQBGpr/jfAwnPlgYCt9IcYD",
	"beKezq19KRYGD1Krtt3BgB4QnofqjjVOxWeEqacKXAiSLfj2Gc5nI3dOBFZr/5iJTSJhrnZJ+gH4Nciq",
	"cillPJVAlXW3PP/RGQSOxirFd6vfMwoN3TioCC4QgJ4Ah4Zreljeq07dJW04Hbqyett9++y/qW36Oz3x",
	"EBLfYQd4YcRC3a5yHnPgfOEcWG8qpARL+dhHCY3l7wqCcAusH0GCLXKWOa3BFlu0GT2a+xJEuKiXVeBI",
	"jyreiS/BWl6CY33DblyKNRaiDB0SjjkL8obmnz+2BIu8nSE+IHvf740aBieESLaoVHdLjfKajpo7CEQ4",
	"3NT8HcbC/B3MHkXVQDeUewDpKHto6qW59Ruau7hCMyRZ45j2bfvx12TmkqwWElKm2g8ra1/BvfLFB8nm",
	"LrAFNnqH8/+udf4s9D3IeO4fQcnbQAgRaKuuIayP6BdmKj0nN0rlMerrkEUEfzEeFVaN2XFdXDcibGsr",
	"TnCjCQkHjrQNcmbsGWnbrYczdnk2mtRcOqWC7jpH39YN3EYu6nptY8PER2dExVK9Y6K749lLTXcMLz9I",
	"GtO9kpj+DoHlFkduDDdvjGJ+7ks1ZtNp9WS1a+1HyfKdT56NHIW308kCOCimMAvfLy5n8Oe9Sz0ENtit",
	"e1QtrPeJ0LWIiay1MXkwVZB9cETiQdctkmYQHcnTUjK9xZJQ3q7CfomGwH9fhVO6cNzqwdbdfVpcQ1VU",
	"rA6+LJW/Xb8XNMf7yL4jc3MLifyIfLuhqyJ3byDkrw9mf4anf3mWnTx9/OfZX06en6Tw7PmLkxP64hl9",
	"/OLpY3jyl+fPTuDx/OsXsyfZk2dPZs+ePPv6+Yv06bPHs2dfv/jzA8OHDMgWUJ8U83Tyf5KzfCGSs3fn",
	"yaUBtsYJLdgPYPYGTclzgfVMDFJTPImwoiyfnPqf/pc/YUepWNXD+18nLi/3ZKl1oU6Pj9fr9VHY5XiB",
	"0VaJFmW6PPbzYJWJhrzy7rzyMLQ+JLijlT+7dZR2pHCG395/e3FJzt6dH9UEMzmdnBydHD0244sCOC3Y",
	"5HTyFH/C07PEfT92xDY5/XQ7nRwvgeYYnGz+WIGWLPWfJNBs6/6v1nSxAHmETqT2p5snx16sOP7kos5u",
	"h74dh5aF40+N4LxsR0/U/I8/+dpFw60bRW1cUGLQYSQUQ82OZ5gGemxTUEHj/qWgsqGOP6G43Pv7scuo",
	"Gv+Iaos9D8c+gjXesoGlT3pjYG31SKlOl2Vx/An/g/R5axlGDrF4VZuIlJK6+ZQwTehMSCx2o9Ol4RG+",
	"ygZTQcsJUq0l+PPMELrp9dJC4OuS2cq4px+6Xqw4EPEjIVcwJF8f2sZMNV9Gj4ugdmh16zTa13fPh5Pk",
	"xcdPj6ePT27/ZO4W9+fzp7cjfatfVuOSi+riGNnwI5pf0eUIz/KTkxPPwJx6EBDfsTurweI6alK9SLtJ",
	"VSah7r3uaKHfm9FtVWsgUiFjRyr91vBd8QR59rM9VzxoS2pkV8Lh29mfM+JDbnDux59v7nOOYf+GxxN7",
	"h91OJ88/5+rPuSF5mhNsGdRG6m79T/yaizX3LY3AUa5WVG79MVYNpkDcZuO1RhcKvQYku6Eo53HBg5QR",
	"fDH5iMGHsbCnHn6jNL0Dv7kwvf6b33wufoObdAh+0xzowPzmyZ5n/o+/4v/aHPbZyV8+HwQ+avOSrUCU",
	"+o/K4S8su70Xh3cCp02Jeaw3/Bi9C44/NQRk97kjIDd/r7uHLW5WIgMvA4v53BYCHfp8/Mn+G0wEmwIk",
	"WwG35brcrzZd2DEWi9p2f97yNPpjdx2NVEk9Px9/avzZ1CDUstSZWNu6D9ErEwsY09xV6UNzcaV6akH8",
	"AHVuJvKjSyeZb9FGzjIgFPPci1LXtgH7bOgiaKrXGzMCUUtnJl8wjhOgGR5nseUoafAyqSAVPEONt3U9",
	"O8jeigy61zNewL+WILf1DexgnEwb/NkReKT4472vuy47vd2P/PG5wL51dYnDfCxV++/jNWXaXOIuSRJi",
	"tNtZA82PXUb01q91EtLOF8ysGvwYhgFFfz2u6lBHP7ZV8dhXp4r2NPK++P5zbZYLzVxIEpWB68NHs7NY",
	"nc9RS221OT0+RqehpVD6eHI7/dSy6IQfP1ab6cvxVJt6+/H2/wcAAP//5z2ncgXnAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
