// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+SHXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
