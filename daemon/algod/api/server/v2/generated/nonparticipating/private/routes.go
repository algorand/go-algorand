// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Jx//bwAAAP///jejaoMBAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
