// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
