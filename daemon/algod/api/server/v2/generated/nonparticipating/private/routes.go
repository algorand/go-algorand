// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/nj9PwEAAP//00zgtSPHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
