// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
