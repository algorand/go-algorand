// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"KPz4od5oX36s3vCbDzf/PwAA//8Gcj3eyfAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
