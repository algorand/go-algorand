// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
