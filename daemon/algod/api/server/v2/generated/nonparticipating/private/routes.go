// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
