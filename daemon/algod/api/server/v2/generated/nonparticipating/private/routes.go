// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
