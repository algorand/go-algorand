// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
