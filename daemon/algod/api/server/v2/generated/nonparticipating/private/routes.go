// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
