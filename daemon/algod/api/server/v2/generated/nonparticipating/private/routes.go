// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP///tTDWpnXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
