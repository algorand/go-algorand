// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
