// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
