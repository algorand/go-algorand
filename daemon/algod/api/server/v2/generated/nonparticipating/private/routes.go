// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/4gxi48YFwEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
