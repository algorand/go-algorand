// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
