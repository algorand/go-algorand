// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
