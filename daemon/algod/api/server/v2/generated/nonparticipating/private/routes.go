// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XPcNrLgv4KafVX+uKEkf+5aVal3ip1kdXEcl6Vk7z3bl2DInhmsSIABQGkmPv3v",
	"r9AASJAEORxJsTdV+5OtIdBoNBqNRn/h0ywVRSk4cK1mx59mJZW0AA0S/6JpKiquE5aZvzJQqWSlZoLP",
	"jv03orRkfDWbz5j5taR6PZvPOC2gaWP6z2cSfquYhGx2rGUF85lK11BQA1hvS9O6hrRJViJxIE4siNNX",
	"s+uRDzTLJCjVx/JHnm8J42leZUC0pFzR1HxS5IrpNdFrpojrTBgnggMRS6LXrcZkySDP1IGf5G8VyG0w",
	"Szf48JSuGxQTKXLo4/lSFAvGwWMFNVL1ghAtSAZLbLSmmpgRDK6+oRZEAZXpmiyF3IGqRSLEF3hVzI7f",
	"zxTwDCSuVgrsEv+7lAC/Q6KpXIGefZzHJrfUIBPNisjUTh31Jagq14pgW5zjil0CJ6bXAfmhUposgFBO",
	"3n37kjx58uSFmUhBtYbMMdngrJrRwznZ7rPjWUY1+M99XqP5SkjKs6Ru/+7blzj+mZvg1FZUKYhvlhPz",
	"hZy+GpqA7xhhIcY1rHAdWtxvekQ2RfPzApZCwsQ1sY3vdFHC8b/oqqRUp+tSMK4j60LwK7GfozIs6D4m",
	"w2oEWu1LQylpgL4/Sl58/PRo/ujo+i/vT5L/dn8+e3I9cfova7g7KBBtmFZSAk+3yUoCxd2yprxPj3eO",
	"H9RaVHlG1vQSF58WKOpdX2L6WtF5SfPK8AlLpTjJV0IR6tgogyWtck38wKTiuRFTBprjdsIUKaW4ZBlk",
	"cyN9r9YsXZOUKgsC25ErlueGBysF2RCvxWc3spmuQ5IYvG5ED5zQvy4xmnntoARsUBokaS4UJFrsOJ78",
	"iUN5RsIDpTmr1H6HFTlfA8HBzQd72CLtuOHpPN8SjeuaEaoIJf5omhO2JFtRkStcnJxdYH83G0O1ghii",
	"4eK0zlGzeYfI1yNGhHgLIXKgHInn912fZHzJVpUERa7WoNfuzJOgSsEVELH4J6TaLPv/OfvxDRGS/ABK",
	"0RW8pekFAZ6KDLIDcrokXOiANRwvIQ1Nz6F5OLxih/w/lTA8UahVSdOL+Imes4JFZvUD3bCiKgivigVI",
	"s6T+CNGCSNCV5EMIWYg7WLGgm/6g57LiKa5/M2xLlzPcxlSZ0y0SrKCbr47mDh1FaJ6TEnjG+IroDR/U",
	"48zYu9FLpKh4NkHN0WZNg4NVlZCyJYOM1FBGMHHD7MKH8f3waZSvAB0PZBCdepQd6HDYRHjG7G7zhZR0",
	"BQHLHJCfnHDDr1pcAK8ZnSy2+KmUcMlEpepOAzji0OMaOBcaklLCkkV47MyRwwgY28ZJ4MLpQKngmjIO",
	"mRHOiLTQYIXVIE7BgOP3nf4pvqAKnj8dOuObrxNXfym6qz664pNWGxsldktGjk7z1W3YuGbV6j/hfhiO",
	"rdgqsT/3FpKtzs1ps2Q5nkT/NOvnyVApFAItQvizSbEVp7qScPyBPzR/kYScacozKjPzS2F/+qHKNTtj",
	"K/NTbn96LVYsPWOrAWLWuEYvXNitsP8YeHFxrDfRe8VrIS6qMpxQ2rq4Lrbk9NXQIluY+zLmSX3bDS8e",
	"5xt/Gdm3h97UCzmA5CDtSmoaXsBWgsGWpkv8Z7NEfqJL+bv5pyxz01uXyxhpDR+7IxnNB86scFKWOUup",
	"IeI799l8NUIA7EWCNi0O8UA9/hSgWEpRgtTMAqVlmeQipXmiNNUI6T8kLGfHs78cNvaXQ9tdHQaDvza9",
	"zrCTUVmtGpTQstwDxluj+qgRYWEENH5CMWHFHipNjNtFNKzEjAjO4ZJyfdBcWVryoN7A791IDb2ttmPp",
	"3bmCDRKc2IYLUFYDtg3vKRKQniBZCZIVFdJVLhb1D/dPyrKhIH4/KUtLD9QegaFiBhumtHqA06fNTgrH",
	"OX11QL4LYaMqLni+NYeDVTXM2bB0p5Y7xWrbkptDA/GeIricQh6YpfFkMGr+XXAcXivWIjdaz05eMY3/",
	"7tqGbGZ+n9T5z8FiIW2HmQsvWo5y9o6DvwSXm/sdzukzjjP3HJCTbt+bsY2BEmeYG/HK6HpauCN0rEl4",
	"JWlpEXRf7FnKOF7SbCOL6y2l6URBF8U52MMBryFWN95rO/dDFBNkhQ4OX+civfg7Ves72PMLD6u//XAY",
	"sgaagSRrqtYHs5iWEW6vBtqULWYa4gWfLIKhDuop3tX0dkwto5oGU3P4xtUSS3rsh0IPZOTu8iP+h+bE",
	"fDZ724h+C/aAnKMAU3Y7OydDZm779oJgRzIN0AohSGEv+MTcuvfC8mUzeHydJq3RN9am4FbITQJXSGzu",
	"fBt8LTYxHL4Wm94WEBtQd8EfBg6qkRoKNQG/Vw4zgevvyEelpNs+kRH2FCKbCRrVVeFu4OGJb0ZpjLMn",
	"CyFvJn06YoWTxuRMqIEaCN95h0jYtCoTx4oRs5Vt0AHUePnGhUYXfIxiLSqcafoHUEEZqHdBhTagu6aC",
	"KEqWwx2w/joq9BdUwZPH5OzvJ88ePf7l8bPnhiVLKVaSFmSx1aDIfXc3I0pvc3jQnxnejqpcx6E/f+oN",
	"lW24MThKVDKFgpZ9UNYAalUg24yYdn2qtcmMs64RnLI5z8FIckt2Ym37BrVXTBkNq1jcyWIMESxrRsmI",
	"wySDncy07/SaYbbhFOVWVndxlQUphYzY13CLaZGKPLkEqZiIeFPeuhbEtfDqbdn93WJLrqgiZmw0/VYc",
	"FYoIZ+kNny73LejzDW9oMyr57Xwjs3PjTlmXNvG9JVGREmSiN5xksKhWrZvQUoqCUJJhRzyjvwN9tuUp",
	"WtXugkmHr2kF42jiV1ueBnc2s1A5ZKvWItz+btalirfP2aHuqQg6hhyv8TNe619Brumd6y/dAWK4v/QL",
	"aZElmWmIt+DXbLXWgYL5VgqxvHscY6PEEMUPVj3PTZ++kv5GZGAmW6k7OIwbYA2vmzUNOZwuRKUJJVxk",
	"gBaVSsWP6QHPPboM0dOpw5Nfr63GvQDDSCmtzGyrkqAfryc5mo4JTS33JkgaNeDFqN1PtpUdznqFcwk0",
	"M7d64EQsnKvAOTFwkhSdkNofdE5JiOylFl6lFCkoBVniTBQ7UfPtrBDRI3RCxBHhehSiBFlSeWtkLy53",
	"4nkB2wRd5orc//5n9eAL4KuFpvkOwmKbGHnrC5/zB/Wxnjb8GMN1Bw/ZjkogXuaa26UREDloGCLhXjQZ",
	"XL8uRr1VvD1ZLkGiZ+YP5Xg/yO0YqEb1D+b322JblQOBYO6ic84KtNtxyoWCVPBMRYHlVOlkl1g2jVq3",
	"MTODQBLGJDECHlBKXlOlrTeR8QyNIPY4wXGsgmKGGEZ4UCE1kH/2umgfdmrOQa4qVSumqipLITVksTlw",
	"2IyM9QY29VhiGcCutV8tSKVgF+QhKgXwHbHsTCyBqK6N7s7d3p8cmqbNOb+NkrKFREOIMUTOfKuAumEw",
	"zAAiTDWEtozDVIdz6gic+UxpUZZGWuik4nW/ITKd2dYn+qembZ+5qG7O7UyAwhgc195hfmUpa8Og1tRc",
	"oREyKeiF0T3wQmzdnn2czWZMFOMpJGOcb7blmWkVboGdm7QqV5JmkGSQ020f6E/2M7GfxwDgijcXH6Eh",
	"sfEs8UVvONmHD4yAFghPxZRHgl9IaraguXk0DOJ674CcAcKOCSfHR/dqUDhWdIk8PJy2XeoIRDwNL4U2",
	"K+74AVF2En0KwgN0qEHfnBTYOWnuZd0h/guUG6DWI/YfZAtqaAoN/L0mMGBNc6HCwX7piPeOBI6KzUEx",
	"tkOODG3ZAdPeWyo1S1mJd53vYXvnV7/uAFGHE8lAU5ZDRoIP9hpYhv2JjcTowrzZVXCSFaaPfs8ME5lO",
	"zhSqPG3kL2CLd+63NsTvPAgMvIO7bASqOZ8oJ4ioDxwyKnjYBDY01fnWKGp6DVtyBRKIqhYF09qG7rav",
	"ulqUSQggauEeGdG5c2x4nF+BKf6lMwQVTK+/FPOZvROM43feuRi0yOHuAqUQ+QTrUY8YUQwmef5JKcyq",
	"MxdF7ONIPSe1kHRCG3159fF/T7XIjDMg/yUqklKOV65KQ63TCImKAiqQZgSjgtVjOh9/QyHIoQB7k8Qv",
	"Dx92J/7woVtzpsgSrnzovWnYJcfDh2jHeSuUbm2uO7AVmu12Gjk+0PRvDj53C+nKlN0+Zgd5ykq+7QCv",
	"/QVmTynlGNdM/9YCoLMzN1PmHvLINP86wp1k1Q9Ax+aN637Giiqn+i78F6MKaX2hYEUBGaMa8i0pJaRg",
	"w6uNhqUsLgY1YgOv0jXlK1SspahWLvLHwkHBWClrwpAV74GIKh8F3SS5WCUpzfO4rHSNvVZfm5VZwXDn",
	"izI1yn0uVqRCpzzj9ah8RWi4oqMoKPY73AiDxVbX0kALxGRfHPSGJyspqjJGAxf06hMNjPYF1NwAA37C",
	"zva+c0VrsrvckikHuee7gEm/MzCHvCvzWcWRApAZ6sXQdjp4SLfmzsja4pgFONvklGZB64Gi6v3gPd2w",
	"+GVzT7es2k7aiPMkZqEkqkpTgGhEduwG3GDfTk5t0o0cQKPEVdKGpBGa6ormoQwgp0tC+badtUpZrsyZ",
	"xBTBdshTdZjz3M7NpxQtaW5d5ZEcl1ButfTvgAG7K9uQuEuaiW4h5N1lexc4hg3FgxF+Rsj8MS6WBnQM",
	"y/7AQUxc83EoLO6sKst8ewdKqgVEJJQSFKoUoVlR2a9iGaamOZ1DbZWGou95sV1/GTgG3g3e7wXPGYek",
	"EBy20WxsxuEH/BiVZ6jWDHRGBXOob/fO2MK/g1Z7nCnceFv64moHIvJtHQ96B4vfhdtxuoVJeWhUhrwk",
	"lKQ5Q5Oz4ErLKtUfOEWjVrDZInEz/vY+bOZ86ZvE7aoRs6cD9YFTjJmqTV1RX/8SIofttwDe2qmq1QpU",
	"R56SJcAH7loxTirONI5VmPVK7IKVIPFIPrAtC7o1IhGtsr+DFGRR6baMxsQgpY34tB5AMwwRyw+capID",
	"VZr8wPj5BsF5D7rnGQ76SsiLmgrxI2UFHBRTSTy+5zv7FUMv3fTXLgwTE7ntZ+szMvCb7KEt2rya5OT/",
	"d/8/j9+fJP9Nk9+Pkhf/6/Djp6fXDx72fnx8/dVX/7/905Prrx7853/EVsrjHktbcZifvnJX6dNXeF9q",
	"nEY93D+bw6BgPIkyWRga0eEtch9TNB0DPWhb0/QaPnC94YaRLmnOMqMQ34QduiKutxft7uhwTWshOtYz",
	"P9c9byG3kDIkImQ6ovHGx3g/JC6eIIZeTJfzhftlWXG7lP4aYvMffGiSWM7rJEBbH+SYYIbYmvq4Ovfn",
	"42fPZ/Mms6v+PpvP3NePEU5m2SaqLcImdrl0GwQ3xj1FSrpVMKCQIu7RKCwbDBKCLcDcQ9SalZ9fUijN",
	"FnEJ56PKnZFqw0+5Dfc2+wd9olvnahHLz4+3lkYvL/U6VjegpSlgq2Y1ATpxKqUUl8DnhB3AQddIlJmL",
	"s4sHy4EuMX8dr+FiSpZMvQ8so3muCKgeTmSSJSbGP6jcOml9PZ+5w1/duT7uAMfw6o5ZO0D931qQe999",
	"c04OncBU92wqqQUdJP9FbqUuv6UVwWSkma2WYnNpP/AP/BUsGWfm+/EHnlFNDxdUsVQdVgrk1zSnPIWD",
	"lSDHPmXmFdX0A+9pWoMFjYJkJVJWi5yl5CLUiBv2tEUq+hA+fHhP85X48OFjL5ijr7+6oaLyxQ6QmGu3",
	"qHTiUuwTCVdUxpxlqk6xRsi2hsbYqHPiYFtR7FL4Hfy4zKNlqbqplv3pl2Vuph+woXKJhGbJiNJCel3E",
	"KCgWG1zfN8IdDJJeectKpUCRXwtavmdcfyTJh+ro6AmQVu7hr+7INzy5LWGyfWUwFbRrVsGJ23sNbLSk",
	"SUlXMZ/chw/vNdASVx/15QIv2XlOsFsr59HHdCOoZgKeHsMLYPHYO38LJ3dme/lySvEp4CdcQmxj1I0m",
	"UuCm6xVkQd54uTqZlL1VqvQ6MXs7OitlWNyvTF1lZWWULB++odgKQ2RdQZoFkHQN6YWrFAJFqbfzVncf",
	"IeQUTS86mLI1ZGwOE1YxQI/GAkhVZtSp4l2L0mJLFOjalPkOLmB7LpoiCPvkj7fTmdXQRkVODbRLw6zh",
	"tnUwuovvwtDQ5FWWPisY08M8WxzXfOH7DG9kq/LewSaOMUUr3XaIEFRGCGGZf4AEN5iogXcr1o9Nz9wy",
	"Fvbki9ST8bKfuCbN5clFjIWzQfeD/V4AFqQSV4osqNHbhaulZFN2AymG1uABDTl0Kk1MjG05ohDIrnMv",
	"etKJZfdA6503UZRt48TMOcopYL4YVsHLTCdO0I9k/ZbORYMlEh3BFjmqSXVApRU6VLace7bm2xBqcQYG",
	"yRuFw6PRpkio2ayp8mWesBqW38uTdIA/MAV9rPBIaOAPSl7V9nYvc7v7tHe7dOVHfM0RX2gkvFpOKBpi",
	"NHyMqo8th+CoAGWQw8pO3Db2jNKkwzcLZPD4cbnMGQeSxKLlqFIiZbZOV3PMuDHA6McPCbEmYDIZQoyN",
	"A7TRH4+AyRsR7k2+2gdJ7tL5qYeNnvzgb4hnHtn4caPyiNKIcDbgUEq9BKAuxLI+vzqBvgiGMD4nRsxd",
	"0tyIOXfja4D06l+g2tqpduEiQh4MqbMjFnh7sOw1J3sU3WQ2oc7kkY4rdCMYL8QmsamHUY13sVkYfo+G",
	"1GMiZGxj2koj9xRZiA1GGeHRYkO4d+AyjIdHI7jhb5hCfsV+Q6e5RWZs2HFtKsaFClnGmfNqdhlSJ6YM",
	"PaDBDLHL/aB4yI0Q6Bg7mkq87vK785LaVk/6h3lzqs2bolg+Wym2/Ye2UHSVBujXt8LU5T7edjWWqJ2i",
	"HSzTrnQSqJAxpjdiou+k6buCFOSAl4KkpUQlFzHXnbnbAJ44Z75bYLzAeiqUbx8EEVgSVkxpaIzoPmDk",
	"S5gnKZZxE2I5PDtdyqWZ3zsh6mPK1gnCjq1pfvYZYAjzkkmlE/RARKdgGn2r8FL9rWka15XaMV626CnL",
	"4rIBh72AbZKxvIrzqxv3+1dm2De1SFTVAuUt4zZkZYFFeqORnyND2+Dg0Qm/thN+Te9svtN2g2lqBpaG",
	"Xdpj/En2RUfyjomDCAPGmKO/aoMkHRGQQcZuXzoGepPdnJixezBmfe1tpszD3hk24vOGh84oCyk6l8Bg",
	"MDoLhm4io5YwHdS47afSDuwBWpYs23RsoRbq4I2Z7mXw8JXBOlTA1XXAdlAgsHvGsnkkqHYRuEbBt9WK",
	"WzVYDiZR5rxdqi0UCOFQTPla+31C1dl+u2h1DjT/HrY/m7Y4ndn1fHY702mM1g7iDlq/rZc3Smd0zVtT",
	"WssTsifJaVlKcUnzxBmYh1hTikvHmtjc26M/s6iLmzHPvzl5/dahfz2fpTlQmdSqwuCssF35p5mVrTc3",
	"sEF8LW9z5/M6u1Ulg8Wvi2SFRumrNbiiyIE22qve2Dgcgq3ojNTLeITQTpOz843YKY74SKCsXSSN+c56",
	"SNpeEXpJWe7tZh7bgWgenNy0EqBRqRACuLV3JXCSJXcqbnq7O747Gu7aIZPCsUbKNhe2Mrkigndd6Bj1",
	"vC2d172gWHvRWkX6wolXBVoSEpWzNG5j5QtlmINb3xnGcWPjAWXUQKzYgCuWVyyAZZqpCRfdDpLBGFFi",
	"+jqeQ7RbCPfqTMXZbxUQlgHX5pPEXdnZqFjs0lnb+8ep0R36YznA1kLfgL+NjhHWHe2eeIjEuIIReup6",
	"6L6qr8x+orVFCsOvG5fEHg7/cMTekTjirHf84bjZBi+u2x638JGYvvwzjGGrhe9+ocZfXl0B1IExoi/O",
	"MJUspfgd4vc8vB5HEqV8pVWGUS6/A58Qg95Yd5qHc5rRB5d7SLsJrVDtIIUBrseVD9xyWPLRW6gpt0tt",
	"H4BoxbrFGSaMKj208BuGcTj3InFzerWgsXqYRskwOJ00DuCWLV0L4jt72qs60cGOTgJfct2W2ST4EmST",
	"w9gvqHNDhcEOO1lVaDQD5NpQJ5hb/1+uRARMxa8ot++ImH52K7neCqzxy/S6EhJLWKi42T+DlBU0j2sO",
	"Wdo38WZsxewTGZWC4A0GB8g+P2S5yL1jUSdTOdKcLsnRPHgIxq1Gxi6ZYoscsMUj22JBFUry2hBVdzHT",
	"A67XCps/ntB8XfFMQqbXyhJWCVIrdXi9qZ1XC9BXAJwcYbtHL8h9dNspdgkPDBXd+Tw7fvQCja72j6PY",
	"AeCeOBmTJhmKk384cRLnY/RbWhhGcDuoB9F0IPvG2bDgGtlNtuuUvYQtnazbvZcKyukK4pEixQ6cbF9c",
	"TTSkdejCM/tAj9JSbAnT8fFBUyOfBqLPjfizaJBUFAXThXPuKFEYfmoeWLCDenD2tR9XG9fj5T+ij7T0",
	"LqLOJfLzGk3t+RabNXqy39AC2mSdE2rrluSsiV7wFbvJqS+LhMWC6xrBljZmLDN1VHMwmGFJSsm4xotF",
	"pZfJ30i6ppKmRvwdDKGbLJ4/jRRIbhfq5Psh/tnpLkGBvIyTXg6wvdchXF9ynwueFEaiZA+abI9gVw46",
	"c+NuuyHf4TjoqUqZgZIMslvVYjcaSOpbMR4fAXhLVqznsxc/7j2zz86ZlYyzB63MCv307rXTMgohY7UO",
	"m+3uNA4JWjK4xNi9+CIZmLdcC5lPWoXbYP9lPQ9e5QzUMr+XYxeBr0XkduqLdteWdBerHrEODG1T88Gw",
	"wcKBmpN2geTP7/Tzxue+88l88bjiH11kv/CSIpH9DAYWMSjeHl3OrP4e+L8p+Vpspi5qZ4f4hf0XIE2U",
	"JBXLs5+brMxObXxJebqO+rMWpuMvzSte9eTs+RQtKbimnEMeBWd1wV+8zhjRav8ppo5TMD6xbbdcv51u",
	"Z3IN4m00PVJ+QENepnMzQEjVdsJbHVCdr0RGcJymfl0jPfvPPATFuH+rQOlY8hB+sEFdaLc0911bC5oA",
	"z/C2eEC+sw/1roG0ihPhLa2uKuAqE1uDelXmgmZzLLNx/s3Ja2JHtX3sWzS2FvUKLyntWXTsVUFpzmnh",
	"wf5ZmXjqwnQ447HUZtZKY60wpWlRxpJDTYtz3wAzUEMbPl5fQuockFfBk5s2j9SAMPywZLIwN64amtVd",
	"kCfMf7Sm6RqvZC2ROszy04uoe65UwcOF9QNEdb1K3HcGb1dH3ZZRnxNh7s1XTNn3WeES2vmodXK2Mwn4",
	"/NT29GTFueWUqO4xVjzgJmT3yNlADW/mj2LWIfyeCrl9g2DfmvJn2CtaPqtboL73YqHNbqwflvHvbqeU",
	"C85SLF4VO5rdQ65TfGAT6nx1jax+i7sdGtlc0bL4dZico+JgoXwvCB3h+kb44KtZVMsd9k+NL4auqSYr",
	"0MpJNsjm/nUHZwdkXIGrP4rP/gZyUsiWXxElZNRVndQujT3ZCNNiBi5235pvb9y1H+PFLxhHBd+RzYWm",
	"W0sdvjOpza2AabISoNx82rnB6r3pc4BpshlsPh74dyltdRh0y5lpWx90H9SJ90g7D7Bp+9K0dVWc6p9b",
	"Ech20JOydIMOv/0R1Qf0hg8SOOJZTLxrJyBuDT+ENsJuo6EkeJ4aRoNLdERDiedwjzHqdzA6bywZpdVy",
	"FLYgNoQrWsGA8QgarxmH5tXUyAGRRo8EXBjcrwP9VCqptirgJJl2DjRH73NMoCntXA+3BdWtLWRIgnP0",
	"YwwvY/OEx4DgqBs0ihvl2/qxVsPdgTLxEl+JdoTsP8iBWpVTojLMKOg80RETHEZw+0eA2gdAfxv0dSLb",
	"XUtqd84+J9FQkuiiylagE5plsQpVX+NXgl99sSnYQFrVZUPLkqRYE6VdJKbPbW6gVHBVFSNj+Qa3HC54",
	"8ybCDeG7O36FMQllscV/YzUzh1fGBWHsHQboIy7cIyF76s1tSD2t1/B0otgqmU4JPFNuT45m6JsxetP/",
	"Tjk9F6s2Ip+5NMSYlAvXKCbfvjEHR1g5oVda0B4tdWEDDLoT/qVCvDbWKbltqYRHWa8yLDp76pfQxg0Q",
	"w2+azfHwGwi9DQpiUHu+Wu/hUABuOhgvTrXLXNOUjIqgwWwgG71j834Qi7jldChixwbsmM+93tM0w56e",
	"jbBHCepDwfoIfe/jTElJmXONN8KiT1kXkT5sLhzbdM0Cdyfh4rwHLXbfXw7FZBPF+CoHgt+7r0BdgEtn",
	"LyVcMlF5p7OPSvJXQvure4XXwquj4qPz70cn4FBf1gw6aLQ9dy8O2Gm6O/n3P9sYNgJcy+2/gAm3t+i9",
	"N7T62q41TzVNSF2selLx6tapGH8Oa7j+UVPzCPmpFIo1BdJj72RNjHU7x6eugvpNfVg+0OQSUo1V8RsH",
	"ugTYp5qTGSx4g/HfdZAG7o51SKArfzRW86hfCn/HgdZLSwpS62wZ8YPpFX5O6jApFEpYmHcF3D2D2E44",
	"mBz2vFxCqtnljjSwf6yBBylGc2+EsM8ZB1lhrA6jxSoi+5vYGoTGsrRG8Qmq+d0anaEkkAvY3lOkxQ3R",
	"uuZzf67cpIAEUgClQ2JYRKhYGIK1mjrPMFM1ZyAVfNiP7Q5NKa7BJ5GCpMYbjuVZ0py4TaLjyJDxN1km",
	"jWW67pX+ixGhQ5li/ScdhpXtV/iChqqfK/QFKMIrKTntl+m7cgUsMGmvdhT4Uhag/G8+Q9eOkrMLCB9t",
	"QrfMFZWZbxG1M3gTRjJyHvXSu/xzBF2kl/XIrAnS7Cf0RAo/YShumgujfyVD8cztuMg6qOCestEfthI5",
	"RnwavJYg3eN2qOzlQkGihQ/qHMNjjBTuHf6bEEENFlu0yA2WQHnX1HjBorMUS55QF9kSTpBIKKjBTgaV",
	"WIbHHCP2S/vdZ7D4oqM7zSk1v+5+BsCH53bqshsihly/JO603J0ZcxPLCuPcPqWrYmVZuCFlaPovpciq",
	"1B7Q4caorU+Tix6NiJKoUSLtz7KjEAfphRewPbQav38/wa9giLTVnCzqQTp/Z5Hv1NakYniv7gS9L2mm",
	"mc9KIfJkwLJ/2q8l0+X4C5ZeQEbMSeHD2AaekCH30aBcu26v1ltfO6UsgUP24ICQE24Dh70Xt13MuDM4",
	"v6fHxt/gqFllyzs5C9LBBx6PwMTCS/KW0syDGZdhCoyou+VQFsiOSiWbgTo2kl5FHlQ6mHoF7ftVu4/c",
	"NExlsYjpJM37LTuCQup4kOYNhCYmpP+s1MgDIecdJrLt0BfvkNn7FRCHZPcxkJ0W0QDNCcTpgY8YlSKP",
	"nLTn1aPTwJNbWhQs7YNrkeZP4c4fdMLveMIlMr+a8dwLMz41aoBWUd/YuCvKPia2mOqQqgvHRtcpWqQ0",
	"2emiauEwyVG1LxpLfJwvoREin9Ya07z1dirrPODji3pZHk+pvTGZ2zpleSXBperYV8Q671eUVK+9BDXN",
	"+/caoyODwjwa+wYCVfYW7q0B7gmz7tEkyiSHS2h57lz+UJWmoBS7hPD5M9uZZAAl2sa6GlvMJRWK9s4x",
	"7uaeBE6NKdSNnuuWsHalyI5DO6pibHhit4maupUMRpcsq2iLfuoWTzINvcYUEcMe14mSYm8hEZ/cmIjY",
	"6URGno/uSx73IYfpa/WFHEfLasOdZcJmZ6uSXvFhBTZi86gdm7efB0FgRHXSSQeCZvGlp6SuO3kHb2z5",
	"16NqmAOvGtf8c5t70yBTxnnyZvV+Ju2kvvstImyCF6LGjcRhObAmz0BaLy4alby86m6GHxo5Nu2tKt9h",
	"B3qh7yB4rcpf4xw6XzgZ4IeaKMFUBjmhNf1d7gg3wUbwB0tkTz0zTVuc0QaSttcl8DWpl7ULZ+hJua6n",
	"B2t/CY71EPseIoVefXxWIWQcs9HlJc0/v5cHi8KdID3ci+nxiYZugpDIlpTqZhG5r+mksQOXwN0Nzd+i",
	"V+ofYNZo9KVHe6LUWpZ3YqPIpDk+TeifSkWQ5Aph2viNR8/JwmUTlhJSpron1ZWv+F5bxfEBlOYh/XEz",
	"/K55/iz0Ldh46RU/8qapHo1XrhVvMGy26BcWKgM7N8rlMe7rsUWEfjEZFZb12XFcXLQCO2w1/k7EspBw",
	"xwEeQajmngEe/YJFU6dngxjMoVMp6M9z8mndom3koG7mNjU6qU/csRLDU4KK4pXDTXeMarIEwbL7BFEl",
	"vz76lUhY4rtagjx8iAM8fDh3TX993P5stvPDh/H3+j9XPJOlkYPhxo1xzM9DGS42i2MgmaqzHhXLs12M",
	"0UqNa16mw+SvX1xy7Bd5G+8X63bub1X3PtE+kZTdRUDCRObaGjwYKkh6m5Dv5rpFstvQpJtWkukt1uzy",
	"1zn2SzTy6rs6sMEFxtRVXtzZp8UF1FXfmjCISvnT9TtBczyPjE6Ncawa32j/ZkOLMge3Ub66t/grPPnb",
	"0+zoyaO/Lv529OwohafPXhwd0RdP6aMXTx7B4789e3oEj5bPXyweZ4+fPl48ffz0+bMX6ZOnjxZPn7/4",
	"6z0jhwzKFtGZrxAx+7/4gGRy8vY0OTfINjShJfsetvatKsPG/hUsmuJOhIKyfHbsf/rffocdpKJowPtf",
	"Zy4BfbbWulTHh4dXV1cHYZfDFfo9Ey2qdH3ox+k/if/2tDYY20s5rqjND/PGFs8KJ/jt3Tdn5+Tk7elB",
	"8Kjv8ezo4OjgEb75WgKnJZsdz57gT7h71rjuh47ZZsefruezwzXQHMOEzB8FaMlS/0kCzbbu/+qKrlYg",
	"D9zTYOany8eHXq04/OT8v9dj3w7DKvuHn1pu8mxHT6zCffjJF5cab92q3uTCA4IOE7EYa3a4wJz1qU1B",
	"BY2Hp4KXDXX4CdXlwd8PXSJv/CNeW+x+OPSxJPGWLSp90huDa6dHSnW6rsrDT/gf5M9rKzByiEWO2PxX",
	"Sprmc8I0oQshsaqTTtdGRvhyMkwFLWfItZbhTzPD6KbXS4uBLxxnK+kev++bTxAQ8ZBQKhiWbzZta6RG",
	"LmtZQVjctT51Wu2bs+f9UfLi46dH80dH138xZ4v789mT64lugpc1XHJWHxwTG37EWixolMG9/Pjo6Bav",
	"FJ/wgPx2kYLHsHvlzexKDFtw3VJ1AJGaGDtqRnTAx549vJ7Pnu4541FbUiuoP/J84dc0I977h2M/+nxj",
	"n3IMwDMyntgz7Ho+e/Y5Z3/KDcvTnGDLoAhYf+l/4hdcXHHf0igcVVFQufXbWLWEAnGLjccaXSl0yUp2",
	"SVHP44K3XjaafcQwgJgHdkDeKE1vIG/OTK9/y5vPJW9wke5C3rQB3bG8ebznnv/zz/jfEvbPJmHPrLi7",
	"lYR1Cp/NhOxroLApQbICuK3H5n61lUwOsRrYtv/zlqfRH/vgu4/+xX4+/NR+dKKlOat1pTNxZcvsRI8K",
	"rKxMc1eGEc2k9ZVLC+IBNNkB5EeXvZdv0TbMMiAUy4qISjd3YtO59pbXXgsDoXkQdMU4DoDmZxzF1hul",
	"QdytglRw+3xe51hymL0RGfSPJTx4fqtAbpuTx+E4m7fkkmOsSHXPW4v5vhi53o/t0ExufTx95qjfzGv9",
	"fXhFmTaHlwvTR4r2O2ug+aErQNH5tcn57H3BRNbgx9DlH/31sC6QHf3YvYLGvror2EAjHyflPzfmqNC8",
	"gyxRG3befzQri+UXHbc01orjw0MMfV0LpQ9n1/NPHUtG+PFjvZi+Lle9qNcfr/8nAAD//+M2Rc6vxAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
