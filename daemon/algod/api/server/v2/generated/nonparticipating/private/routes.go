// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
