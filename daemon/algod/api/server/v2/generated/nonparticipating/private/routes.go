// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"CD9+qnbL13Wqdu320+3/DwAA///ZHOwLk8UAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
