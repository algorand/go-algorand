// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8f8FAAD//22BJVXhDAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
