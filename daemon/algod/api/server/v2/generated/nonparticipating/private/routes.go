// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AQAA///uLcinWxABAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
