// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Rb3+eP0/AQAA//8Y9ys4z8MAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
