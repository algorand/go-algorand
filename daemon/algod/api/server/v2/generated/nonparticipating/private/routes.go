// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
