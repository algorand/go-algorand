// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"j9f/EwAA//8QewCDvcMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
