// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+L7Z6FAEqNnwj+8//t8AAAD//5R90cnG6AAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
