// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"GjZ5fHQy+fj/AwAA///d4l4d6f8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
