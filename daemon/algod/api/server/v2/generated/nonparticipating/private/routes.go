// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAAA///eKJn4cA8BAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
