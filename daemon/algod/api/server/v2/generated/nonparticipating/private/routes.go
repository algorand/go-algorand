// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tbYm96by0plGZDLZboG8JSSutCqZ2mGdMGf6ZD8HY2q+q70l1gtcV5axcocSl1BXmmt8K5V0ks13guYo",
	"C2h9BiMUlRD5jHyzpZsiB8uk/vpg8Wd49pfn2dGzJ39e/OXoxVEKz1+8PDqiL5/TJy+fPYGnf3nx/Aie",
	"LL96uXiaPX3+dPH86fOvXrxMnz1/snj+1cs/P9B3gAbZADpxVSkm/xufuk5O3p0m5xrYBie0YN/DzryF",
	"qcnYvbJJU+SCsKEsnxy7n/6n426zVGya4d2vE5v0PlkrVcjj+fz6+nrmd5mv0JiaKFGl67mbp/cM58m7",
	"0zo9zMRC4Y6azB9NCriplhRO8Nv7b87Oycm701lDMJPjydHsaPYEaxkXwGnBJseTZ/gTnp417vvcFRE+",
	"/nQznczXQHP0ies/NqBKlrpP8pquVlDO7HOj+qerp3Mnxs0/WUPyzdC3uf9yz/xTy96e7emJgS7zT66I",
	"1XDrVpUo62fwOoyEYqjZfIEZyGObgvQax5eCyp2cf0L1JPr73KZlhj+immjOwNw5pcItW1j6pLYa1k6P",
	"lKp0XRXzT/gfpMkbwyRyCLmgTDYjJU3zKWGK0IUosXqUSteaL7iyNUx6LSdIqYbITzNN3LrXKwOBK1Bn",
	"KvYef+gHIOJAxI2EnECTeXNQWzM1vBj97l4R2fqmabVv7psPR8nLj5+eTJ8c3fxJ3yf2zxfPbkb6kl/V",
	"45Kz+rIY2fAj1nxBqzie36dHRwc9DdxTS5tFmk2qw5EDQQxmJ5JNzHJit6ozEKmRsac2RWf40FPKN9PJ",
	"8wNXPGi7a4VoB55E/ppmxCX44txPPt/cpxw9+ZqvE3Nv3UwnLz7n6k+5JnmaE2zpFRvrb/3f+SUX19y1",
	"1EJGtdnQcueOsWwxBWI3G68yupJoyS3ZFUXZjgveLlf/Eb0HoSTrCL+Rit6C35zpXv/mN5+L3+Am3Qe/",
	"aQ90z/zm6YFn/o+/4n9z2D8ahz0z7O5OHNYKfCavrS+Bmsj+OdYX2/V/3vE0+GN/oO6TwaGf55/aL/G0",
	"ZGS5rlQmrk15lOClgLWaaW4LO6IBulaolCBugCagkPxos67yHVrdWQaEYnS7qFSj8erOzk3cmJf0CM1z",
	"4ivGcQI07OMspoIp9UJ1JKSCm8d3OxeQheytyKB/AeEV82sF5a65YyyMk2mLA1kSCtQLvTND7zOMm8MI",
	"DB0QxnvWJ476xd3W3/NrypS+pmxkH2K031kBzee2cEDn1yZXr/cFExC9Hz2dKPzrvK6HFfzYVTZDX62y",
	"5Ro11iTfOoN7XttlPnzUW4cVGy05NMaG4/kcw2HWQqr55Gb6qWOI8D9+rHfLFUyqd+3m483/DwAA//9F",
	"XhOfNsUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
