// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
