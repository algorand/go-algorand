// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
