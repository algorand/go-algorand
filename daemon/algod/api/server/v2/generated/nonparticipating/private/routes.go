// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XPcNrLgv4KafVX+uKEkf+5aVal3ip1kdXEcl6Vk7z3bl2DInhmsOABDgNJMfPrf",
	"X6EbIEESnOFIir2p2p9sDYFGo9FoNPoLnyapWhVKgjR6cvxpUvCSr8BAiX/xNFWVNInI7F8Z6LQUhRFK",
	"To79N6ZNKeRiMp0I+2vBzXIynUi+gqaN7T+dlPBbJUrIJsemrGA60ekSVtwCNpvCtq4hrZOFShyIEwJx",
	"+mpyveUDz7IStO5j+aPMN0zINK8yYKbkUvPUftLsSpglM0uhmevMhGRKAlNzZpatxmwuIM/0gZ/kbxWU",
	"m2CWbvDhKV03KCalyqGP50u1mgkJHiuokaoXhBnFMphjoyU3zI5gcfUNjWIaeJku2VyVO1AlJEJ8QVar",
	"yfH7iQaZQYmrlYK4xP/OS4DfITG8XICZfJzGJjc3UCZGrCJTO3XUL0FXudEM2+IcF+ISJLO9DtgPlTZs",
	"BoxL9u7bl+zJkycv7ERW3BjIHJMNzqoZPZwTdZ8cTzJuwH/u8xrPF6rkMkvq9u++fYnjn7kJjm3FtYb4",
	"ZjmxX9jpq6EJ+I4RFhLSwALXocX9tkdkUzQ/z2CuShi5JtT4ThclHP+LrkrKTboslJAmsi4MvzL6HJVh",
	"QfdtMqxGoNW+sJQqLdD3R8mLj58eTR8dXf/l/Uny3+7PZ0+uR07/ZQ13BwWiDdOqLEGmm2RRAsfdsuSy",
	"T493jh/0UlV5xpb8Ehefr1DUu77M9iXRecnzyvKJSEt1ki+UZtyxUQZzXuWG+YFZJXMrpiw0x+1MaFaU",
	"6lJkkE2t9L1ainTJUq4JBLZjVyLPLQ9WGrIhXovPbstmug5JYvG6ET1wQv+6xGjmtYMSsEZpkKS50pAY",
	"teN48icOlxkLD5TmrNL7HVbsfAkMB7cf6LBF2knL03m+YQbXNWNcM8780TRlYs42qmJXuDi5uMD+bjaW",
	"aitmiYaL0zpH7eYdIl+PGBHizZTKgUsknt93fZLJuVhUJWh2tQSzdGdeCbpQUgNTs39Cauyy/5+zH98w",
	"VbIfQGu+gLc8vWAgU5VBdsBO50wqE7CG4yWkoe05NA+HV+yQ/6dWlidWelHw9CJ+oudiJSKz+oGvxapa",
	"MVmtZlDaJfVHiFGsBFOVcgghgriDFVd83R/0vKxkiuvfDNvS5Sy3CV3kfIMEW/H1V0dTh45mPM9ZATIT",
	"csHMWg7qcXbs3eglpapkNkLNMXZNg4NVF5CKuYCM1VC2YOKG2YWPkPvh0yhfAToeyCA69Sg70JGwjvCM",
	"3d32Cyv4AgKWOWA/OeGGX426AFkzOptt8FNRwqVQla47DeCIQ2/XwKUykBQlzEWEx84cOayAoTZOAq+c",
	"DpQqabiQkFnhjEgrAySsBnEKBtx+3+mf4jOu4fnToTO++Tpy9eequ+pbV3zUamOjhLZk5Oi0X92GjWtW",
	"rf4j7ofh2FosEvq5t5BicW5Pm7nI8ST6p10/T4ZKoxBoEcKfTVosJDdVCccf5EP7F0vYmeEy42Vmf1nR",
	"Tz9UuRFnYmF/yumn12oh0jOxGCBmjWv0woXdVvSPhRcXx2YdvVe8VuqiKsIJpa2L62zDTl8NLTLB3Jcx",
	"T+rbbnjxOF/7y8i+Pcy6XsgBJAdpV3Db8AI2JVhseTrHf9Zz5Cc+L3+3/xRFbnubYh4jreVjdySj+cCZ",
	"FU6KIhcpt0R85z7br1YIAF0keNPiEA/U408BikWpCiiNIKC8KJJcpTxPtOEGIf1HCfPJ8eQvh4395ZC6",
	"68Ng8Ne21xl2siorqUEJL4o9YLy1qo/eIiysgMZPKCZI7KHSJCQtomUlYUVwDpdcmoPmytKSB/UGfu9G",
	"auhN2g7Ru3MFGyQ4o4Yz0KQBU8N7mgWkZ0hWhmRFhXSRq1n9w/2TomgoiN9PioLogdojCFTMYC200Q9w",
	"+rzZSeE4p68O2HchbFTFlcw39nAgVcOeDXN3arlTrLYtuTk0EO9phsupygO7NJ4MVs2/C47Da8VS5Vbr",
	"2ckrtvHfXduQzezvozr/OVgspO0wc+FFy1GO7jj4S3C5ud/hnD7jOHPPATvp9r0Z21gocYa5Ea9sXU+C",
	"u4WONQmvSl4Qgu4LnaVC4iWNGhGut5SmIwVdFOdgDwe8hljdeK/t3A9RTJAVOjh8nav04u9cL+9gz888",
	"rP72w2HYEngGJVtyvTyYxLSMcHs10MZsMdsQL/hsFgx1UE/xrqa3Y2oZNzyYmsM3rpYQ6bEfCj0oI3eX",
	"H/E/PGf2s93bVvQT2AN2jgJM03Z2TobM3vbpgkAj2QZohVBsRRd8Zm/de2H5shk8vk6j1ugbsim4FXKT",
	"wBVS6zvfBl+rdQyHr9W6twXUGvRd8IeFg2qkgZUegd8rh5nC9Xfk42XJN30iI+wxRLYTtKqrxt0gwxPf",
	"jtIYZ09mqryZ9OmIFckakzPjFmogfKcdImHTqkgcK0bMVtSgA6jx8m0XGl3wMYq1qHBm+B9ABW2h3gUV",
	"2oDumgpqVYgc7oD1l1GhP+ManjxmZ38/efbo8S+Pnz23LFmUalHyFZttDGh2393NmDabHB70Z4a3oyo3",
	"cejPn3pDZRtuDI5WVZnCihd9UGQAJRWImjHbrk+1Nplx1jWCYzbnOVhJTmRnZNu3qL0S2mpYq9mdLMYQ",
	"wbJmlIw5TDLYyUz7Tq8ZZhNOsdyU1V1cZaEsVRmxr+EWMypVeXIJpRYq4k1561ow18Krt0X3d8KWXXHN",
	"7Nho+q0kKhQRzjJrOV7uE+jztWxos1Xy03wjs3PjjlmXNvG9JVGzAsrErCXLYFYtWjehealWjLMMO+IZ",
	"/R2Ys41M0ap2F0w6fE1bCYkmfr2RaXBnswuVQ7ZoLcLt72Zdqnj7HA11T0fQseR4jZ/xWv8KcsPvXH/p",
	"DhDD/aVfSEKWZbYh3oJfi8XSBArm21Kp+d3jGBslhih+IPU8t336SvoblYGdbKXv4DBugDW8btc05HA+",
	"U5VhnEmVAVpUKh0/pgc89+gyRE+nCU9+sySNewaWkVJe2dlWBUM/Xk9yNB0TnhL3JkgaPeDFqN1P1IqG",
	"I69wXgLP7K0eJFMz5ypwTgycJEcnpPEHnVMSInuphVdRqhS0hixxJoqdqPl2JETMFjoh4ohwPQrTis15",
	"eWtkLy534nkBmwRd5prd//5n/eAL4GuU4fkOwmKbGHnrC5/zB/WxHjf8NobrDh6yHS+BeZlrb5dWQORg",
	"YIiEe9FkcP26GPVW8fZkuYQSPTN/KMf7QW7HQDWqfzC/3xbbqhgIBHMXnXOxQrud5FJpSJXMdBRYzrVJ",
	"doll26h1G7MzCCRhTBIj4AGl5DXXhryJQmZoBKHjBMchBcUOMYzwoEJqIf/sddE+7NSeg1JXulZMdVUU",
	"qjSQxeYgYb1lrDewrsdS8wB2rf0axSoNuyAPUSmA74hFMyECcVMb3Z27vT85NE3bc34TJWULiYYQ2xA5",
	"860C6obBMAOICN0QmhhH6A7n1BE404k2qiistDBJJet+Q2Q6o9Yn5qembZ+5uGnO7UyBxhgc195hfkWU",
	"pTCoJbdXaITMVvzC6h54ISa3Zx9nuxkTLWQKyTbOt9vyzLYKt8DOTVoVi5JnkGSQ800f6E/0mdHnbQBw",
	"xZuLjzKQUDxLfNEbTvbhA1tAK4SnY8ojwy8stVvQ3jwaBnG9d0DOAGHHhJPjo3s1KBwrukQeHk6bljoC",
	"EU/DS2Xsijt+QJSdRB+D8AAdatA3JwV2Tpp7WXeI/wLtBqj1iP0H2YAemkIDf68JDFjTXKhwsF864r0j",
	"gaNic1CM7ZAjQ1t2wLT3lpdGpKLAu873sLnzq193gKjDiWVguMghY8EHugYWYX9GkRhdmDe7Co6ywvTR",
	"75lhItPJhUaVp438BWzwzv2WQvzOg8DAO7jLRqDa84lLhoj6wCGrgodNYM1Tk2+somaWsGFXUALT1Wwl",
	"jKHQ3fZV16giCQFELdxbRnTuHAqP8yswxr90hqCC6fWXYjqhO8F2/M47F4MWOdxdoFAqH2E96hEjisEo",
	"zz8rlF114aKIfRyp56QWkk5ooy+vPv7v6RaZcQbsv1TFUi7xylUZqHUaVaKigAqkHcGqYPWYzsffUAhy",
	"WAHdJPHLw4fdiT986NZcaDaHKx96bxt2yfHwIdpx3iptWpvrDmyFdrudRo4PNP3bg8/dQroyZbeP2UEe",
	"s5JvO8Brf4HdU1o7xrXTv7UA6OzM9Zi5hzwyzr+OcEdZ9QPQsXnjup+JVZVzcxf+i60KaX2hEKsVZIIb",
	"yDesKCEFCq+2GpYmXCxqjAKv0iWXC1SsS1UtXOQPwUHBWGkyYZSV7IGIKh9mLZNFqaoiJihdtKePsLdq",
	"B3B79QkIiZ1J0b/i9XguqWLMCeYJHqzOdxbmkFthOqkkRsBDluRqEUPbKZ/+ImLp2VyWRFsOiQBnysrI",
	"1YJVGF5QDxTVawcvqHZtL5sLKq1RO1shvhiYfpHoKk0BoqHIsatfg307K7PJs3EArfZSlRSLxXhqKp6H",
	"zM9O54zLTTtdk4tcW2EsNMN2tnMT3zuluflcmjnPyUccSe4IN2xL8QwYsLuyDYm7pBnpD0HetUpan2HD",
	"fWF3vd1df4xvoQEdw7I/cBAM1nwcigc7q4oi39yBdkaAWAlFCRrP0tCepumrmoc5We6w1RttYNV3OVDX",
	"Xwbk37vBi62SuZCQrJSETTQNWUj4AT9G5Rme5wOdUbMa6tu9LLXw76DVHmcMN96WvrjagYh8WwdC3sHi",
	"d+F2vE1hNhpaUyEvGGdpLtDWqqQ2ZZWaD5KjNSfYbJGAEX9tHbbvvfRN4gbFiL3PgfogOQYL1TaeqJN7",
	"DhGDxrcA3synq8UCdEeesjnAB+laCckqKQyOtbLrldCCFVBi1MYBtVzxjRWJaI78HUrFZpVpy2jMiNHG",
	"ik9yfdlhmJp/kNywHOxV/wchz9cIzruOPc9IMFeqvKipED9SFiBBC53EA1u+o68Yc+imv3Txh5jBTJ/J",
	"WWLhN2kzGzT2NFm5/+/+fx6/P0n+mye/HyUv/tfhx09Prx887P34+Pqrr/5/+6cn1189+M//iK2Uxz2W",
	"r+EwP33l7pCnr/Ci0HhLerh/Nkv5SsgkymRhTECHt9h9zE10DPSgbUYyS/ggzVpaRrrkucisJngTduiK",
	"uN5epN3R4ZrWQnTMRn6ue6rft5AyLCJkOqLxxsd4PxYsnhmF7juX7IT7ZV5JWkqvf1Pgv4/JUfNpnf1G",
	"hTGOGaZGLbkPKHN/Pn72fDJtUprq75PpxH39GOFkka2j2iKsY7cqt0FwY9zTrOAbDQMKKeIeDT+iKIgQ",
	"7ArsdVwvRfH5JYU2YhaXcD6c2lln1vJUUpyz3T/oDNw4H4Oaf368TWn18sIsYwnzLU0BWzWrCdAJ0ChK",
	"dQlyysQBHHStI5m9MbpAqBz4HBO38f6pxqSH1PuAGM1zRUD1cCKjTBAx/kHl1knr6+nEHf76zvVxBziG",
	"V3fM2vPn/zaK3fvum3N26ASmvkc5lAQ6yHqL3EpdYkcrdMdKMyoTQkmkH+QH+QrmQgr7/fiDzLjhhzOu",
	"RaoPKw3l1zznMoWDhWLHPlfkFTf8g+xpWoOVfIIsHVZUs1yk7CLUiBv2pOoMfQgfPrzn+UJ9+PCxF8XQ",
	"11/dUFH5QgMk9tqtKpO43PKkhCtexrxEus4tRshUPGLbqFPmYJModrnrDn5c5vGi0N0cw/70iyK30w/Y",
	"ULsMOrtkTBtVel3EKiiEDa7vG+UOhpJfectKpUGzX1e8eC+k+ciSD9XR0RNgraS7X92Rb3lyU8Bo+8pg",
	"DmTXrIITp3sNrE3Jk4IvYs6oDx/eG+AFrj7qyyu8ZOc5w26tZD8fzIygmgl4egwvAOGxd+ISTu6Mevk6",
	"QvEp4CdcQmxj1Y3GRX7T9QrS/268XJ0Uwt4qVWaZ2L0dnZW2LO5Xpi4vsrBKlo9b0GKBsaGuEssMWLqE",
	"9MKVyIBVYTbTVncfGuMUTS86hKbiKZS8g+n7aMqfAauKjDtVvGtRmm2YBmN8cOo7uIDNuWqy//dJnG7n",
	"8eqhjYqcGmiXllnDbetgdBffxV+hyasofDos5kV5tjiu+cL3Gd7IpPLewSaOMUUrz3SIELyMEIKYf4AE",
	"N5iohXcr1o9Nz94yZnTyRQqpeNnPXJPm8uRCpcLZoN2dvq8AKzGpK81m3OrtyhURolzVQIqhNXhAQw69",
	"KSMzQlseGASy69yLnnRq3j3QeudNFGVqnNg5RzkF7BfLKniZ6QTI+ZHIYed8E1gb0BFslqOaVEcSktDh",
	"ZcurRcXOhlCLMzCUslE4PBptioSazZJrX98Iy0D5vTxKB/gDc6+3VdwIDfxBrafa3u5lbnef9m6Xru6G",
	"L7bhK2yEV8sR1TKsho/h5LHlUBIVoAxyWNDEqbFnlCYPvFkgi8eP83kuJLAkFibGtVapoAJVzTHjxgCr",
	"Hz9kjEzAbDSEGBsHaKMjGgGzNyrcm3KxD5LS5bFzDxtd2MHfEE+5ocBpq/KowopwMeBQSr0E4C62sD6/",
	"OhGuCIYJOWVWzF3y3Io5d+NrgPQKP6Da2inz4EIhHgyps1ss8HSw7DUnOopuMptQZ/JIxxW6LRjP1Dqh",
	"nLuoxjtbzyy/R2PJMQMwtjGpxMY9zWZqjeE1eLRQ7PIOXIbx8GgEN/y10Miv2G/oNCdktg27XZuKcaFG",
	"lnHmvJpdhtSJMUMPaDBD7HI/qJpxIwQ6xo6mBK27/O68pLbVk/5h3pxq06YalE/TiW3/oS0UXaUB+vWt",
	"MHWdi7ddjSVqp2hHibRLfAQqZIzprZjoO2n6riANOeClIGkpUclFzHVn7zaAJ86Z7xYYL7CQCJebB0Ho",
	"UQkLoQ00RnQfKfElzJMc65cpNR+enSnKuZ3fO6XqY4oK5GDH1jQ/+wwwdncuSm0S9EBEp2AbfavxUv2t",
	"bRrXldrBTVTtU2Rx2YDDXsAmyURexfnVjfv9Kzvsm1ok6mqG8lZIClmZYXXaaMjjlqEpKnbrhF/ThF/z",
	"O5vvuN1gm9qBS8su7TH+JPuiI3m3iYMIA8aYo79qgyTdIiCDVNW+dAz0JtqcmKp6sM362ttMmYe9M2zE",
	"J8wOnVEEKTqXwGCwdRYC3URWLREmKO7azyEd2AO8KES27thCCergjZnvZfDwJbE6VMDVdcB2UCCwe8bS",
	"WErQ7epnjYJPZXpbxUcORlHmvF2jLBQI4VBC+yLzfULVaW67aHUOPP8eNj/btjidyfV0cjvTaYzWDuIO",
	"Wr+tlzdKZ3TNkymt5QnZk+S8KEp1yfPEGZiHWLNUl441sbm3R39mURc3Y55/c/L6rUP/ejpJc+BlUqsK",
	"g7PCdsWfZlZUaG1gg/gi1vbO53V2UiWDxa+rQ4VG6asluGrAgTbaK1vYOByCreiM1PN4hNBOk7PzjdAU",
	"t/hIoKhdJI35jjwkba8Iv+Qi93Yzj+1ANA9Oblzty6hUCAHc2rsSOMmSOxU3vd0d3x0Nd+2QSeFYW+oV",
	"r6gkt2ZKdl3oGPW8KZzXfcWx6CBZRfrCSVYrtCQkOhdp3MYqZ9oyhyTfmW3MsPGAMmohVmLAFSsrEcCy",
	"zfSIi24HyWCMKDF9Acsh2s2Ue26lkuK3CpjIQBr7qcRd2dmoWOXRWdv7x6nVHfpjOcBkoW/A30bHCAtu",
	"dk88RGK7ghF66nrovqqvzH6itUUKw68bl8QeDv9wxN6RuMVZ7/jDcTMFLy7bHrfwdZS+/LOMQWWydz/N",
	"4i+vrvLnwBjRp1aETual+h3i9zy8HkcyhHyJUYFRLr+DHBGD3lh3mhdjmtEHl3tIuwmtUO0ghQGux5UP",
	"3HJY69BbqLmkpaaXD1qxbnGGCaNKDwl+wzAO514kbs6vZjxWCNIqGRank8YB3LKlG8V8Z097XSc60Ogs",
	"8CXXbQVlfxdQNsl7/UoyN1QYaNjRqkKjGSDXhjrBlPx/uVYRMJW84pIe0LD9aCu53hrI+GV7XakSazfo",
	"uNk/g1SseB7XHLK0b+LNxELQ2xCVhuDxAQeI3t0hLnIPONRZRI40p3N2NA1eQHGrkYlLocUsB2zxiFrM",
	"uEZJXhui6i52eiDNUmPzxyOaLyuZlZCZpSbCasVqpQ6vN7XzagbmCkCyI2z36AW7j247LS7hgaWiO58n",
	"x49eoNGV/jiKHQDubY9t0iRDcfIPJ07ifIx+S4JhBbeDehBNB6LHvYYF15bdRF3H7CVs6WTd7r204pIv",
	"IB4pstqBE/XF1URDWocuMqOXabQp1YYJEx8fDLfyaSD63Io/QoOlarUSZuWcO1qtLD81LwvQoB4cPXPj",
	"isJ6vPxH9JEW3kXUuUR+XqMpnW+xWaMn+w1fQZusU8apYEcumugFX6qanfp6QFglty6OS7SxY9mpo5qD",
	"wQxzVpRCGrxYVGae/I2lS17y1Iq/gyF0k9nzp5HKwO0KlXI/xD873UvQUF7GSV8OsL3XIVxfdl8qmays",
	"RMkeNNkewa4cdObG3XZDvsPtoMcqZRZKMshuVYvdeCCpb8V4cgvAW7JiPZ+9+HHvmX12zqzKOHvwyq7Q",
	"T+9eOy1jpcpYkb9muzuNowRTCrjE2L34IlmYt1yLMh+1CrfB/st6HrzKGahlfi/HLgJfq8jt1Ferri3p",
	"LlY9Yh0Y2qb2g2WDmQM1Ze3KwJ/f6eeNz33nk/3iccU/ush+4SVFIvsZDCxiULU8upxZ/T3wf3P2tVqP",
	"XdTODvEL+y9AmihJKpFnPzdZmZ2i8CWX6TLqz5rZjr80z1fVk6PzKVpLb8mlhDwKjnTBX7zOGNFq/6nG",
	"jrMScmTbbp16mm5ncg3ibTQ9Un5AS15hcjtASNV2wlsdUJ0vVMZwnKZwWyM9++8bBFWof6tAm1jyEH6g",
	"oC60W9r7LhVBZiAzvC0esO/ohdolsFZVHryl1VUFXEleMqhXRa54NsX6EuffnLxmNCr1oUdYqAjzAi8p",
	"7Vl07FVBTcpx4cH+PZV46sJ4ONtjqe2stcEiWdrwVRFLDrUtzn0DzEANbfh4fQmpc8BeBW9NUh6pBWH5",
	"YS7Klb1x1dBId0GesP8xhqdLvJK1ROowy4+vHu65Ugcv9tUv79SFGnHfWbxdAXGqHz5lyt6br4Smh0nh",
	"Etr5qHVytjMJ+PzU9vTKSkrilKjusa14wE3I7pGjQA1v5o9i1iH8ngo5Fd/ft5j6GfaK1o3qVmbvPdVH",
	"2Y31iyr+wemUSyVFilWbYkeze8F0jA9sRIGrrpHVb3G3QyObK1oPvg6Tc1QcrBDvBaEjXN8IH3y1i0rc",
	"QX8afCpzyQ1bgNFOskE29c8aODugkBpc4U187zaQk6ps+RVRQkZd1Unt0tiTjTAtZuBi96399sZd+zFe",
	"/EJIVPAd2VxoOlnq8IFFY28FwrCFAu3m084N1u9tnwNMk81g/fHAP8hI1WHQLWenTT7oPqgT75F2HmDb",
	"9qVt68oX1T+3IpBp0JOicIMOP3oR1QfMWg4SOOJZTLxrJyBuDT+EtoXdtoaS4HlqGQ0u0RENBZ7DPcao",
	"H4DoPC5klVbiKGzBKIQrWsFAyAgar4WE5rnQyAGRRo8EXBjcrwP9dFpyQyrgKJl2DjxH73NMoGnjXA+3",
	"BdWtLWRJgnP0YwwvY/N2xYDgqBs0ihuXm/qVUsvdgTLxEp9HdoTsv0SBWpVTojLMKOi8TRETHFZw+9dv",
	"2gdAfxv0dSLqbkpOO2efk2goSXRWZQswCc+yWIWqr/Erw6++2BSsIa3qeplFwVKsidIuEtPnNjdQqqSu",
	"VlvG8g1uOVzw2EuEG8IHZ/wKYxLKbIP/xopFDq+MC8LYOwzQR1y41zH21JvbkHpar+XpRItFMp4SeKbc",
	"nhzN0Ddj9Kb/nXJ6rhZtRD5zaYhtUi5co5h8+8YeHGHlhF4FVDpa6sIGGHSn/BN9eG2sU3LbUgmPsl5J",
	"VHT21E+AbTdADD/mNcXDbyD0NiiIwel8Je/hUABuOhgvzo3LXDOcbRVBg9lAFL1DeT+IRdxyOhSxQwE7",
	"9nOv9zjNsKdnI+ytBPWhYH2EvvdxpqzgwrnGG2HRp6yLSB82F27bdM0Cdyfh4rwHLXbfXw7FZDMt5CIH",
	"ht+7zx9dgEtnr9+/p7n6qCR/JaRf3fOzBK+Oio/Ovx+dgEN9WTPooNH23JXap2m6O/n3P1MMGwNpys2/",
	"gAm3t+i9x6P62i6Zp5omrK7SPKpqc+tUjL8DNVz/qKl5hPxUKC2ayuCxB6JGxrqd4xtPQf2mPiwfaHIJ",
	"qcFy8I0DvQTYp5qTHSx4fPDfdZAG7o51SKArf7St5lG/BvyOA62XlhSk1lH97IPxFX5O6jApFEpYmHcB",
	"0r3/1044GB32PJ9DasTljjSwfyxBBilGU2+EoHd8g6wwUYfRYhWR/U1sDULbsrS24hNU87s1OkNJIBew",
	"uadZixuiBb2n/ly5SQEJpABKh8SyiNKxMASymjrPsNA1ZyAVfNgPdYemFNfgW0BBUuMNx/IsaU/cJtFx",
	"y5Dxx0hGjWW77pX+ixGhQ5li/bcMhpXtV/h0hK7f6fMFKMIrKTvtl+m7cgUsMGmvdhT4Uhag/W8+Q5dG",
	"ycUFhK8VoVvmipeZbxG1M3gTRrLlPOqld/k6/F2k5/XIognS7Cf0RAo/YShumiurfyVD8cztuMjwUX+M",
	"/qBK5BjxafGaQ+ledUNlL1caEqN8UOc2PLaRwj1AfxMi6MFii4TcYAmUd02NFyw6y7HkCXeRLeEEWQkr",
	"brErg0osw2NuI/ZL+u4zWHzR0Z3mlJpfd9e/9+G5nbrslogh18+ZOy13Z8bcxLIipKQ3ZHWsLIu0pAxN",
	"/0WpsiqlAzrcGLX1aXTRoy2iJGqUSPuz7CjEQXrhBWwOSeP3Dwf4FQyRJs2JUA/S+TuLfKe2Jh3De3En",
	"6H1JM810UiiVJwOW/dN+LZkux1+I9AIyZk8KH8Y28HYKu48G5dp1e7Xc+NopRQESsgcHjJ1IChz2Xtx2",
	"MePO4PKe2Tb+GkfNKirv5CxIBx9kPAITCy+Vt5RmHsx2GabBirpbDkVAdlQqWQ/UsSn5VeQloYOxV9C+",
	"X7X7ukvDVIRFTCfZ8Y5GxGfsX0Dwz3z4/BSjViLtv5kQdVBs9wfQU0azsV6Bunpnb+zBSpHJTj9BC4dR",
	"3oJ90Zjj02AJjxD5tD62pq2XG0XnFRVfWYkep0g5qa32ysRFXpXg8iXoDaPOIwIFN0vPxrZ5X7m0igpo",
	"TGagQvRc01XIX8ncA0pd+aCKJIdLaLlPXBJHlaagtbiE8PEl6swygAINFN1jM+YXCPdXR5a6uSeBZXkM",
	"daPClQhLK8V2SM6Bp/ET2iZ67FayGF2KrOIt+ulbvIsz8qX9ENeRkmJvIRGf3DYRsdOThzwf3Zcy7sgL",
	"c4jqWxGOltXWE2LCZmfrgl/JYS0icvGsvUu3nwdDYEx3cvoGIhfxuZ2kLv53Bw8d+Sd8apgDb6rW/HMb",
	"5XWQKeM8ebOiK6N2Ut8HEhE2wTM92y11YU2mJti7JFca3uy9vOpuhh8aOTbuwSDfYQd6oQE3eDLI69IO",
	"nS8ckf1DTZRgKoOc0Jr+Lpuwm2Aj+IMlolPPTpMq5FE0X3tdAoO/flnb0Yfe9eqa27EAk5JYlK5vptfo",
	"WsXa9iHj2I1eXvL885vasTLXCdLDvdccn2hoqw2JTKTUNwuLfM1HjR3YZe9uaPkWXQP/ALtGUZ+4A+VO",
	"lFrL8p5EFJk8x/fh/EONCJJdIUxyoj96zmYupasoIRW6e1Jd+bLbtWkSX6FonvHebgvdNc+flbkFG8+9",
	"4sfeNCV8jcITo8Gw2aJfWKgM7Nwol8e4r8cWEfrFZFRYW2XHcXHR8q5TSfRO2Kgq4Y697EG83J5e9n7V",
	"mLHTI0+yPXQqDf15jj6tW7SNHNTN3MaGiPSJu63O65jIjnj5ZtsdQ0uIIFj7nCGq7NdHv7IS5vi4kWIP",
	"H+IADx9OXdNfH7c/2+388GH8tfDPFVRCNHIw3Lgxjvl5KM2AQukHMlo661GJPNvFGK38pOZ5MMzA+cVl",
	"KH6RB8p+Id9ff6u6R2L2CWfrLgISJjLX1uDBUEHm0YikI9ctkmKEdrW0KoXZYOEkf50Tv0TDX76rvcsu",
	"OqEuteHOPqMuoC691fiiK+1P1+8Uz/E8sjo1BhMafCH6mzVfFTm4jfLVvdlf4cnfnmZHTx79dfa3o2dH",
	"KTx99uLoiL94yh+9ePIIHv/t2dMjeDR//mL2OHv89PHs6eOnz5+9SJ88fTR7+vzFX+9ZOWRRJkQnPk1/",
	"8n/xFb/k5O1pcm6RbWjCC1E/DG/Z2D9FxFPcibDiIp8c+5/+t99hB6laNeD9rxOXBTxZGlPo48PDq6ur",
	"g7DL4QKdT4lRVbo89OP0H+R+e1pnctGlHFeUknS8scWzwgl+e/fN2Tk7eXt6ELysejw5Ojg6eIQPbxYg",
	"eSEmx5Mn+BPuniWu+6Fjtsnxp+vp5HAJPMdYDfvHCkwpUv+pBJ5t3P/1FV8soDxw7zPZny4fH3q14vCT",
	"c8Jdb/t2GJY6P/zU8lVmO3piKeTDT77Cz/bWrRI6zkcbdBiJxbZmhzNMHB7bFHTQeHgqeNnQh59QXR78",
	"/dBlU8Y/4rWF9sOhd+jHW7ao9MmsLa6dHik36bIqDj/hf5A/r0lg5BBz31MSImdN8ykThvGZKrG0jkmX",
	"Vkb4mh5CBy0nyLXE8KeZZXTb6yVh4Kt3UTnT4/d98wkCYh4SSgXL8s2mbY3UyGVTVhBW2KxPnVb75ux5",
	"f5S8+Pjp0fTR0fVf7Nni/nz25HpkHM7LGi47qw+OkQ0/YkEMNMrgXn58dHSLp2JPZEB+WqTgReJejSla",
	"iWELrluqDiBWE2NH4n4HfOztuevp5OmeM95qS2pFVkfekPuaZ8zn5eLYjz7f2KcSo6CsjGd0hl1PJ88+",
	"5+xPpWV5njNsGVRi6i/9T/JCqivpW1qFo1qteLnx21i3hAJzi43HGl9o9IuV4pKjnieVbD0vM/mIvthY",
	"bvSAvNGG30DenNle/5Y3n0ve4CLdhbxpA7pjefN4zz3/55/xvyXsn03CnpG4u5WEdQofpaP1NVBYF1CK",
	"FUgqiuV+pXISh/Tiff/njUyjP/bBd19ei/18+Kld+b+lOetlZTJ1RbVOokcFlrfluauFh2bS+splFPMA",
	"mhBt9qNLoco3aBsWGTCOtR1UZZo7se1ce8trr4WF0LzKuBASB0DzM45CRR95EPyoIVWS3jDrHEsOszcq",
	"g/6xhAfPbxWUm+bkcThOpi255BgrUmLx1mK+L0au92M7NJOTj6fPHPXDZa2/D6+4MPbwcrHSSNF+ZwM8",
	"P3RVADq/Nol3vS+YTRj8GLr8o78e1lWKox+7V9DYV3cFG2jka7j4z405KjTvIEvUhp33H+3KYg08xy2N",
	"teL48BDjD5dKm8PJ9fRTx5IRfvxYL6YvjlQv6vXH6/8JAAD//9OOsFYtwQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
