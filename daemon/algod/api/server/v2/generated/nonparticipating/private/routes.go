// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
