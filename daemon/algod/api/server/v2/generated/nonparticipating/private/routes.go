// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
