// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
