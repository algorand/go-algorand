// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
