// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9e3Mbt5I4+lVQ3K3yY0lKduzsiW+d2qvYeWjjxC5Lyd5dyzcBZ5okjobAHAAjkfHV",
	"d7+FxmMwMxhySNFOUvv7yxYHj0aj0Wj08+MoE6tScOBajV58HJVU0hVokPgXzXMJCv+bg8okKzUTfPRi",
	"dMYJzTJRcU3KalawjFzDZjoaj5j5WlK9HI1HnK5g9CIMMh5J+GfFJOSjF1pWMB6pbAkraqfVGqTp+/5s",
	"8j+nk68+fHz+t7vReKQ3pRlDacn4YjQerScLMXE/zqhimZqeufHvdn2lZVmwjJolTFieXlTdhLAcuGZz",
	"BrJvYc3xtq1vxThbVavRi9OwJMY1LED2rKksz3kO675FRZ+pUqB712M+DliJH+OoazCDbl1Fo0FGdbYs",
	"BeM6sRKCX4n9nFxC1H3bIuZCrqhut4/ID2nvyfjJ6d2/BFJ8Mn7+RZoYabEQkvJ8EsZ9GcYlF7bd3R4N",
	"/dc2Al4KPmeLSoIit0vQS5BEL4FIUKXgCoiY/QMyTZgi/3nx5iciJPkRlKILeEuzawI8EznkU3I+J1xo",
	"Ukpxw3LIxySHOa0KrYgW2DPQxz8rkJsauw6uGJPADS28H/1DCT4aj1ZqUdLsevShjaa7u/GoYCuWWNWP",
	"dG0oivBqNQNJxNwsyIMjQVeS9wFkR4zh2UqSFeP6y2dtOqx/XdF1F7xLWfGMasgjALWkXNHMtEAoc6bK",
	"gm4QtSu6/vvp2AGuCC0KUgLPGV8Qveaqbylm7qMthMM6gejLJRDzhZR0ARGep+RnBUhJ+FWLa+CBOshs",
	"g59KCTdMVCp06lkHTp1YSEQHUlQ8xagIfnBo7uFRtu8xGdQ7HPFu+zfFFu5TG+oLtrjclEDmrDD3JflH",
	"pXQg4Erhti+BqBIyw3tzYoYxyFdswamuJLy44o/NX2RCLjTlOZW5+WVlf/qxKjS7YAvzU2F/ei0WLLtg",
	"i54dCLCmzqnCbiv7jxkvfVT1OnmXvBbiuirjBWXxWTC0cv6qjzLsmP2kkWaQZ0FuwP1xY12uz1/1sdTt",
	"PfQ6bGQPkL24K6lpeA0bCQZams3xn/UcSYvO5e8jK16Y3rqcp1BryN+xaxSozqz8dFYLEe/cZ/M1E1yD",
	"vQojMeMEme2Lj7HkJEUJUjM7KC3LSSEyWkyUphpH+lcJ89GL0b+c1ILeie2uTqLJX5teF9jJXMYSDOOb",
	"0LLcY4y3RnhEUavnoBs+ZI/6XEhyu2TZkuglU4Rxu4kodxlOU8AN5Xo62usk38Xc4b0Dot4Ke0narWgx",
	"oN69ILbhDBTSvhN6H6iGpIgYJ4hxQnlOFoWYhR8enpVljVz8flaWFlVjwuYEGN7nsGZKq0eIGVofsnie",
	"81dT8l089i0rCiJ4sSEzcPcO5GZMy7cdH3cCuEEsrqEe8YEiuNNCTs2ueTQYuewYxIhS5VIU5grcSUam",
	"8feubUyB5vdBnf/y1BejvZ/uUKJ3SEVqsr/UDzfysEVUXZrCHoaaztp9D6MoM8oWWlLnNYKPTVf4C9Ow",
	"UjuJJIIoIjS3PVRKuvES1AQloS4F/azAEk9JF4wjtGMjkHOyotd2PwTi3RACqCBpWzKz4tUt08ta5Aqo",
	"n3beF39tQk7tOTEbTpmRjUnBlDbCEG6mIksoUOCkQbEQU9FBRDOAFrYsIsB8K2lpydx9sXIc44SG95eF",
	"9Z43+cBLNglzrLao8Y5QHczMdzLcJCRW4dCE4etCZNffU7U8wuGf+bG6xwKnIUugOUiypGqZOFMt2q5H",
	"G0LfpiHSLJlFU03DEl+LhTrCEguxD1cry5e0KMzUXW7WWi0OPOggFwUxjQmsmDYPYMbxBCzYDXDLeqbk",
	"G5otjTBBMloU41ovIcpJATdQECEJ4xzkmOgl1fXhx5H9QwnPkQLDBzWQaDVOpzEll0uQMBcSH6oSyIri",
	"5bQyz6OyaPYJzFXRFbRkJ7wsRaUNjNHL5fyVXx3cAEeeFIZG8MMa8cEfDz41c7tPODMXdnFUAipaGM+K",
	"Kq/xF/hFA2jTur5qeT2FkDkqeqg2vzFJMiHtEPbyd5Ob/wCVdWdLnQ9LCRM3hKQ3IBUtzOpai3oUyPdY",
	"p3PHycypptHJdFSYftFZzoH9UCgEmdBuvMH/0IKYz0bAMZRUUw9DOQVlmrAfeGcbVNmZTAPDt7QgK6s3",
	"IyXNrveC8mU9eZrNDDp531hVndtCt4iwQ5drlqtjbRMO1rdXzRNidT6eHXXElK1MJ5prCAIuRUks+2iB",
	"YDkFjmYRItZHv9a+FusUTF+LdedKE2s4yk6YcQYz+6/F+pWDTMjdmMexhyDdLJDTFSi83RpmEDNLrao+",
	"mwl5mDTRMU3UCnhCzaiRMDVuIQmbVuXEnc2Eetw2aA1EgnppuxDQHj6FsQYWLjT9BFhQZtRjYKE50LGx",
	"IFYlK+AIpL9MCnEzquCLp+Ti+7PnT57++vT5l4YkSykWkq7IbKNBkYdOz0eU3hTwKPlwQukiPfqXz7xB",
	"pDluahwlKpnBipbdoayhxT6MbTNi2nWx1kQzrjoAOIgjgrnaLNrJO9vvbjx6BbNqcQFam0fwWynmR+eG",
	"nRlS0GGjt6U0goVqGqWctHSSmyYnsNaSnpTYEnhuTW9mHUyZN+BqdhSi6tv4vJ4lJw6jOew8FPtuUz3N",
	"Jt4quZHVMTQfIKWQySu4lEKLTBQTI+cxkdBdvHUtiGvht6ts/26hJbdUETM3GsAqnveoKPSaD7+/7NCX",
	"a17jZusNZtebWJ2bd8i+NJFfv0JKkBO95gSps6E5mUuxIpTk2BFlje9AW/mLreBC01X5Zj4/jo5U4EAJ",
	"FQ9bgTIzEdvCSD8KMsFztVOb462BLWS6qYbgrI0tb8vS/VA5NF1seIZqpGOc5X7tlzP1EbXhWaQKMzAW",
	"kC8atPpJVV59mLJQPFAJSA2mXuNntAi8gkLTb4W8rMXd76SoyqOz8/acQ5dD3WKczSE3fb1GmfFFAQ1J",
	"fWFgn6bW+Ics6GVQOtg1IPRIrK/ZYqmj9+VbKT7BHZqcJQUofrDKpcL06aqYfhK5YT66UkcQPevBao5o",
	"6Dbmg3QmKk0o4SIH3PxKpYXSHq8dc1CzSkrgOpZzUZ/BFJmBoa6MVma1VUm0SN0vdccJzewJnSBqVI+b",
	"Q3DVsK3sdEt6A4QWEmi+ITMATsTMLLr2csBFUkVKIzs7sc6JxEP5bQPYUooMlIJ84vTZO+H17ez9o7cg",
	"D1eDqwizECXInMpPs4Lrm53AX8NmckOLyojnP/yiHv1ZFqGFpsWOLcA2qY1oq++6S7kHTNuIuA1RTMpW",
	"W2hPghGxDdMpQEMfsu+Pvd7tb4PZIYJPhMAbkOhR80mPlp/kExBlgP8TH6xPsoSqnBgxsFf9YCRXs9+c",
	"cuFlwx0zhAkKqvRk15ViGjX0JmapERdP3SI4cI88+ZoqjWIgYTxH/a29CnEeK1uaKUZ7OpXhlL2vMTPp",
	"L/4h1p02M9c7V5UKrzJVlaWQGvLU8tBm3TvXT7AOc4l5NHZ4+mlBKgW7Ru5DYDS+w6NTBOAfVAcLtbN5",
	"dxeHXgdGfNnsi+UGfDWOtsF44VtFiI+dantgZKreA0tuTLXobSZEARRVpkqLsjQcSk8qHvr1YfDCtj7T",
	"P9dtuyRpzUBWUskFKDQxufYO8luLdIW2riVVxMHh/RNQ4WVd5Lowm2M9UYxnMNl2XvARbFrFB+eg416V",
	"C0lzmORQ0E3C28J+JvbznoThx0YCqfUHQsNkhtbENI3UZ8L7mx42q8CpVErwJviFZOacm2dUTWqu9+GT",
	"5oDTpvimI9YHYRYEI0kHfjxElqWnxIh4998IbcjKER2uxt1K91xLD/bCrJ8EgTjupFYEtGf/b1Bu7iCA",
	"HXX+Dai+hddTH2vZPep/vNsbF2brKmvdNskropcv72CMfTyoxxbxlkrNMlbic/UH2Bz99d6eIOkrQXLQ",
	"lBWQk+iDfcmXcX9i3ZDbYx72mh+kbu2C39G3JpbjPbOawF/DBtUmb21EQ6StOoY6IjGquXApJwio95o3",
	"L564CaxppouNEWz1EjbkFiQQVc2s10rXhKZFOYkHSMdM9c/oDPJJc/hWD4ELHCpaXsrz0L62tsN32Xpy",
	"NdDhXlmlEEVC/9k+8R1kJCEY5C5ESmF2ndGi2BAdwmY8JTWAdBcEemMEeeaBaqAZV0D+W1QkoxxfuJWG",
	"IKQJiZIPCstmBiNuhjmdq2qNIShgBfY1j18eP24v/PFjt+dMkTncWpcbjg3b6Hj8GFVxb4XSjcN1BG23",
	"OW7niUsHbZXmknWvtjZP2e3k5kYespNvW4MHA6c5U0o5wjXLvzcDaJ3M9ZC1xzQyzMEPxx1kvmu6hHXW",
	"jft+wVZVQfUxDJVwQ4uJuAEpWQ47ObmbmAn+zQ0t3oRud+MRrCEzNJrBJMMowYFjwaXpYwMLzTiMM3OA",
	"beDIUIDg3Pa6sJ12vLRrv2W2WkHOqIZiQ0oJGdgoOSOlqrDUKbEhE9mS8gW+gKSoFs7V2Y6DDL9SVhMm",
	"K94ZYl9RTK/5BE0YKhmmhmZLH21phDCg5mXbtn/Yx9otDaDYy2jQpR1tT9selDSZjke9D3+D75v64W/x",
	"1gwZPdSY2JAPI6TV0Ay0niE+jazURWK8jebwGWL4NFaaeugUlN2JI6fw+mOfX/hFVZbF5ghCkh2ISCgl",
	"KLzSYjWgsl/FnPzIMinOioUId57aKA2rrvHGdv2157i+O+QFLHjBOExWgkPiSf8Gv/6IHwerHe013DMi",
	"CkR7Ddh++DSQ0FpAc/IhJH3fTUKSaZ/9tqVTfSvksazsdsDBb4oBluudbh1uykPt67QoEiZpq37ocBE1",
	"Dk7hTBKqlMgYCornuRo773NrxbZu7S30vw2hUUc4wO1xW7bXKAzLKvKhKAklWcFQzS+40rLK9BWnqOmL",
	"lppwFvTKgX618EvfJK2HTqiJ3VBXnKKjaND/JR2D5pDQQ30L4LXDqlosQOnWA2sOcMVdK8ZJxZnGuVbm",
	"uEzseSlBosfe1LZc0Q2ZG5rQgvwOUpBZpZtPjlWlNFGaFYUzBJtpiJhfcapJAVRp8iPjl2sczvuR+CPL",
	"Qd8KeR2wMB3OuBbAQTE1SXs6fme/YlCJw8nSBZhgrIX97D2e69wQI7P2RtKK//fhf7x4fzb5Hzr5/XTy",
	"1b+dfPj47O7R486PT+/+/vf/r/nTF3d/f/Qf/5raPg97KhjcQX7+yr3Rz1/hQyyKE2nD/mcwyKwYnySJ",
	"MnYoatEieYj5MhzBPWrq/fQSrrhec0N4N7RgueFFRyOf9jXVOdD2iLWorLFxLTWeR8Cez6F7sCqS4FQt",
	"/vpJ5Ln2BFsdbuItb8UYOM6ojg6gGzgFV3vOlFvtg+++uSQnjhDUAyQWN3SUWiDxgnERjA0vH7NLcWDX",
	"Fb/ir2CO70HBX1zxnGp6Yk/TSaVAfk0LyjOYLgR54YMiX1FNr3jnGupNIBUFNUcZpFKcgq7Sa7m6ek+L",
	"hbi6+tDxQ+jKVm6qmIu6c9ZVk/kpJ0ZuEJWeuCQuEwm3VKZsIT7Fh4uGxt5b4bAyiaisEssniXHjT4dC",
	"WZaqneyhi6KyLAyKIlJVLl+B2VaitAiBY4aZu9hbQwM/CedUIumtf/JWChT5bUXL94zrD2RyVZ2efoEh",
	"eHWKg98cDzR0uylh8MO3NxlF+72LC7dyOTqVT0q6SNlMrq7ea6AlUggKHCt8aRYFwW6N8EAfCYBD1QsI",
	"sch7bImFbO+4Xlzuhe3l03qlF4WfcFObsdP32sEoKv7gDdwRWU8rvZwYjpBclTLHwO+VTzBAF+bK8R4E",
	"ii3wAaCWojJLBpItIbt2ma1gVerNuNHdO7q4u9gzHKZQZ+SCA+fM4C+j3AxYlTl1ggzlm3aKG2WDIXDQ",
	"d3ANm0thu08HZgeLstFFKVZU39FF2o3uWkO+8UF2Y7Q33/ld+RhRl44E4y49WbwIdOH79B9tKwAc4Vin",
	"iKKR56MPEVQmEGGJvwcFByzUjHcv0k8tj/EMuGY3MIGCLdisSLDp/+raNTyshiolZMBufFRvGFARNifm",
	"dTSz17F7MUnKF2AudXMRC0ULdNqfJg39KB0ugUo9A6q36mt5nGbCQ4cC+S0GTaPSZGyWAGuz30yjEoTD",
	"rXng4dvbtnGOxNOD3KnsmiA/EFTfvQ6Snh7yiHAIT+Sz8/d92JPwXnD+aTF1Isj2+8rgcCHFrdlNA6Dw",
	"qRsxwUt0T1WKLmDoddQwFQ1MidGwAOEgu6SfpLwj5m2xpiNjDFyE7T4xeElyBzBfDHtAM0DLxdHPbU2I",
	"zqrwhhcbj9RZgQJ1cBC1pENlw87GF/sBm2ZjIHktrHrAmliLj/6SKn/083HE0Q+UFv+YVDLb8uedR953",
	"VHez4/lrus3ax1afMwMiuOnhs+j51Hk+X95ovFfuu/HIhTik9k5wlKJzKGBhcWIbezqr8zPVu2ngeDOf",
	"I9ObpBz5ImVkJJm4OcA8xB4TYjXmZPAIqVMQgY2WdRyY/CTiw84X+wDJXX4p6sfGuyv6G9LBgtYb30jJ",
	"ojS3PuuxWmWepbj0FrXI03JxxmEI42NiOOkNLQwndYGn9SCdXG349mllZnO+HY/63kQDD5pbI0one63S",
	"yjOHrC8WvP0y0q+CvdYwE+uJjYxOPq1m65k5E8l4BYzTTh1emznvgSIzsUafIrzhrIP73tD1Q+YBi9xA",
	"1kwhlWO/PrHRgrcfINsF+RQ1KyQ9p1cLZNcnyR4GTI843Ud2D6MUekcCqaXArNOAO43OTj1LU9rqSiL1",
	"dTsO2WFDmFqK1fQdzuRO9mC0qzxt5rr7vk532J8czZ/Vz5Lkr6uUu09eRtu5tLkW90nL2CaHBhBbsPq2",
	"LcQm0dp0XGriNcJaiiUZRt81dnXRpqAA1ARMGnL15Dpllr66eq8AZYYL3y3Sc+LuUb55FHnDSVgwpaE2",
	"Lngnl89v+0F1onlsiXn/6nQp52Z974QIgoY1x2LHxjI/+wrQdX3OpNITtMwkl2AafatQk/ataZoWhJv+",
	"dkxZU8/ecjBCdA2bSc6KKk3KDqQfXhmIfgo3l6pmeFEybr2NZpgKP+mgu4dtEuGxjt1bEfTaIug1/Rz4",
	"GXawTFMDkzSU15z+L3LEWrxwG2dJ0HKKmLob2ovSLbw2iqXvMtpIiI7cLqbbbD6dc5n7sXd6Y/mI/j4h",
	"wo6UXEuUETEdQCgWC8h9pjcXFGqzXrl8eoXgizqXoPl9S/rAKbFZ/DAJ35b8fc49Hfqc0xvlRLAqRhL6",
	"+DGDkNfRdZh7ECdZALeZW0b71xspkoiLHeOxRaQZ/by8veM2n3Qdvmy5C9c+vXYPw2bj9hRAc/esUuDX",
	"t/3QdrfLoW7c53TcSBG7/YDhgEhxTKtIgOkQTQ/npmXJ8nXL8GdHnR5AEgPFvW4m+BbOkC25wXbgp+lY",
	"vKNWzwNzO2J7Z+w4wWf+iXlkWn9m55FrzgbNXLaBvJJoTWp4C3fz6YeH5sC1//DLhRaSLsBZBCcWpHsN",
	"gcvZBw1RSnpFNLMO0jmbzyG2hKlDrDgN4Dr2jnwAYfeQYNdcFt6WW+mzS2Q7aKtewW6EpukpQSl9PheX",
	"XXukf3hEurVw2UQbd4BRMZlQ4AfYTH6hRWVeQkyq2jfVGQib1/oeNHGz+gE2OPJOl08D2I5dQVXcO0AK",
	"TVlXwicVZQl/oBrVF/AN3NjCPXbqLL1LR9oaV0qj/2jUN1SjnkRzKZ/u2NQuMgbSIXt1kfY6MWcLmtvS",
	"JvRdW8Ty3bJP9ASJp2LovXHIJRcybez0LgNaeMLHxY7uxqP7+Xuk7kk34o6deBuu5uQuoDemtf83nL72",
	"3BBallLc0GLi/GT6hA4pbpzQgc29W81nfl+lT8XlN2ev3zrw78ajrAAqJ0HV0bsqbFf+ZVZlS3Bsv4Zs",
	"Onan27WqsGjzQ8rs2JPmFlOvt7RpnVo3td9UdFCdZ8087Sm+k286Fy+7xC2uXlAGT6/aIm0dvZrOXfSG",
	"ssIbfj20Q7XsdrnDqisl+UQ8wL2dxCLvv3uP1RsncHX1/sZjtranWEepkBI/4UunDvR07vCa9FmtaX0H",
	"h8R1vsFMpul3F3d5TpExOoczenQ58FshGxeVi2pMOqx9OgHRPCYsHtNG+Utnhe+IhVNiRcjfFr8Z3vD4",
	"cXzwHz8ek98K9yECEH+fud/xHfX4cdIwnFT1GZaFmjxOV/AoxEX0bsTnVUNwuB0mLpzdrIKMLPrJMFCo",
	"9Tzz6L512LuVzOEzd7/kUID5aTpEVRFvukV3DMyQE3TRF5UYnJ9XtpynIoK3Y/AxStaQFl49roKHtbN3",
	"jxCvVmh3nqiCZWmnHz5ThiVx69JrGhNsPNiGbOaoWI9fOa9YNLpppg4yebYWEs2aRLhKZgKu8TsTjgVU",
	"nP2zgqisL97ErcvZP4Vw1I6AndYvuoHbVYNHhxT8vb+J0GvVtimMtppcXwUzoEdEqs7UnvEO8Ywd5r8l",
	"VsFRlL8+MbBt6VyHd1LW1nfe9iLQzgzs2aezuPY/kFw5TLuZr4bsNFOTuRS/Q1p2QCNhInWHt24zVMD/",
	"Djzlo9pmZMFzoC5YXc++i0CG6xb6SOXeugS/6FA175ArPM0n9tvoPZUG0X73qw1UOr2424S+h2rseNIM",
	"pOlhZnhgI7dwrOXj3d0otyfU5rVoRJ6lz3kcKHpix6/PuYO5E1xb0NsZTRU6Mu9FA1O0/Q3HPC2I7+w3",
	"SIXUDHZ2EsUyhLbMJvsrQdbWo26q5APffnbawa+++pGHFBc/78bWV6VQIjFMxW8pRz9C7Gc5oOutwPph",
	"mF63QmKCT5X2IcwhY6ukMvzq6n2edT2/crZgtqR4pYDQuXZ5Ht1Atqi8pSJXzTvkInGoOZ+T03F9Zv1u",
	"5OyGKTYrAFs8sS1mVOEFHXwiQhezPOB6qbD50wHNlxXPJeR6qSxilSDhfY6iZ/CEnYG+BeDkFNs9+Yo8",
	"RIdhxW7gUfqCccLa6MWTr8bbKmcjxrFI/DYmnyOX94EMacpGr2o7hmGrbtR0ZMJcAvwO/ffJlvNluw45",
	"XdjSXUG7T9eKcmoQkoJptQMm2xf3F105Wnjh1joDSkuxIUyn5wdNDcfqiSY3DNGCQTKxWjG9cp6iSqwM",
	"hdVlyO2kfjisr+fLoHm4/Ed0wS4Tb/w/4LlFVz0RjuhV/xPa22O0jgm1GVsLVsdf+Aq15Nxnpsa6cKEc",
	"nMWNmcssHeVVDMeYk1IyrlFrVOn55G/m+S5pZhjitA/cyezLZ4n6as0SRHw/wD873iUokDdp1MsesvdS",
	"jutLHnLBJyvDUfJHdUqH6FT2+oqn/Xv73I57hr63dG3GnfQSYNUgQBpx83uRIt8y4D2JM6xnLwrde2Wf",
	"nVYrmSYYWpkd+vndayeJrIRMVbqoGYCTSiRoyeAG40vTm2TGvOdeyGLQLtwH+j/Wu82LpZHo5k938rEQ",
	"WZUT77SQVslI+r/8WOfHR+O2jdttaS+FTOhpncbxM7ul7qcvbNvQrTsgfuvB3GC04ShdrPSEe9h4jtDn",
	"j/D3aoNk97yhKn3yG5HmHY+y/uPHCPTjx2MnKv/2tPnZsvfHj4e7zKb1hebXBGoOu2va2StN39RWfy0S",
	"2jtfxTP4jblUJQkNa/IuM1fqzI0xJs1SiZ9f7jhOvOLebsjpA+RRg5/buPmD+StuZh0B088fmtVjk+ST",
	"h+9RDAUlX4v1UCJqXVuenv4EKOpByUCtIK6kUx036Smx080nIlsz6gwKYV6qcQGswV4rf6FdMKgZb9mL",
	"ihX5L7UVunUzScqzZdKpfGY6/mqfAVGDSIORLSnnUCR729fyr/5VnXj3/0P0DLtiPP2pXYjZwt6CtAar",
	"CYSf0o9vcMV0YSaIUdRMyBVSnBQLkROcp65cUrPGbkXzVCXZRIw/DruqtPNKxuQJrqDInBXoRpu2h2PL",
	"iaS6h6ti2X9f4sqMg1X4lVVL2NFBEspWeG0ruioLwEN4A5IusKvg0OqOGdtw5KgsCVGl+YQtMfmLILqS",
	"nIj5PFoGcM0kFJsxKalSdpBTsyxY49yjF09OT0+HGRkRXwPWbvHqF/6mXtyTE2xiv7jKX7Zgwl7gHwL9",
	"XU11+2x+l7hc+dV/VqB0isXiBxuQjRZic6/b0quhTPCUfIf5yQyhN0oEoFLUZ1hu5gStykLQfIxJoS+/",
	"OXtN7Ky2jwREHZZ+XaAGsHlEkkae4TlSff61ntxVw8fZnjrHrFrpSSjKmsqkaFrUtWRZy/sJdYMxdqbk",
	"lVXLBsceOwnB1OJyBXlUA9aqAZA4zH+0ptkS9Z3T0VaVck81oOEljD0HrM1FUdxrKJiFHNwsw1UxtkWM",
	"x0ToJchbpgDzTsANNBM2hmynTiHvEzg2Vysrzi3hTPeQXkN5rH13wQNnRV/vX5GErLUP97b91Zk8sMj5",
	"vsWeL7BXOm6nVTm65fdgS2asfdGNKfnRGTsyygVnGRabSIngmIpxmFl1QF2OtL1TjdxZThzDZL3qEKDu",
	"sNhbwdqzTIe4rlND9NXstyUc+6eGtSsCuACtHA+EfOzLxzsDHeMKXAE0Q18xRxUy4fqVDIsJLiRHdEkf",
	"jzCbWo+u9Vvz7Senm8ecMdeMo87NIdW9BK2BrVAM7eycME0WApRbbTMuTL03faaXa44gfJi+FguWXbAF",
	"jmFdEQ1SrBdwd6gz7xPsfHBN25emratdEH5uuNTZSf26PyRZiAr7n6q53ov+lO+Xd6SJkBvGj0fbQoxb",
	"Xf3xXjZkCDfo+Qcl3ucdsgnl65ujfGOerJbesAWxkbvJtMGMJ8B4zbg3+KbzYGXJuwQ3Bk9zTz+VSart",
	"o2MQx7sEWvSEw2BQvfUYuO9Q7UoMBiW4Rj9H/zbWlfd72EpoUL8uKN8QfygMdUdCyUtaBGf4RB19lM6c",
	"MGadhVuV9VNsxbD1iQ/NbaBrZyBo6I7VUPa9p/qyjc6qfAF6QvM8lXfua/xK8KsPKIQ1ZFUoAhbiTJvp",
	"2rvU5ibKBFfVastcvsE9p8uZokrBalYkXG9fhY+Qhx3GRFSzDf6bqoDVvzPO6X3v6G/v4Z7vV6OgG82e",
	"kp4NTU8UW0yGYwLvlPujo576MEKv+x+V0n3g958irrvF5eI9SvG3b8zFEafp7vj426slZNFGf3qB330+",
	"sJDJtcmV8Crr1HlDjwzcvMSWtYD3DZOA39CiJ+NCbLWx96u1ZPTlXch604pQ7bLXaUpqnjBEhdGf/8t6",
	"YLcsQ13zZp+PtXWx/pTGE4ePrUjvtzT+0LArWq+3mqH02hMPM/nVRLCvzc+VYujqS2lRiGwwZ3DDnJlO",
	"/al6xWrlMt8nvPJuViKPz0LszQWQZmzWYTkRWoEP2+Q3fFolv8jb9GgN/UggmqFZyxCNbgljG5jpwfPA",
	"2KnjiSKVrcMs+ZYVWBzqPy/e/DTq38hoB7pb6lJnJ1XYfRsTItXa5LEQDXxs4QGCF2n9t+pRqWNuqPRp",
	"cNWJkx++tQrCISDZPEn7tH49dPAOASyErQqVqpvRzU4zqrfDIz+ihnp7LUeJqSNFFe1qS4m3j1V61k1I",
	"KEQ6qDBpQ0YaUtwpVUfIvRS8BtZeNC4fnS2u1KnL1GGgr4YIhx183I1H5/le4lOqFtXIjpJisK/ZYqm/",
	"LkR2/T3QHKStJ5J6TtpqIiswz1C1ZCW+f0qhWF0PuDCDuUTeSxxuOjQ053IJLiuMTxLQGcs7UN9AprE+",
	"dO0GKgGG+zmU6SUaCLxBEZv8Aa4gEiCHUi+3CkvWubvUy7psKLjIM6bIDJzp4gb4mLApTNvBanmdFIoU",
	"QOdeCSuF0APq6oawJURjDHSKvjo1mreLgZ2cb1FKQ1tKdzq8CMtZiAmwgZa3VNWZo1ppFAaHa8/nkGHC",
	"+63p9/5rCTzKxzb2qjuEZR5l42MhXBBLNhxVo13Dui0R3lZQo5pUnxLSvoQY17B5oEiDhpIVgUOE7SEZ",
	"4BE51o7riwr0mTacYyRTgZ4QQd4P3iXgr2ssHVIEIMpOeSAYnsbN9VRnrDwMGi/RHACG6Tq9V9H+Oh0e",
	"CqZ92f261dX7X8qvsJi9ck6lNKSbj/VJ5LxbjvnWpavHRIvBWugT14Pyv/kErXaWgl27CjWIMGubvaUy",
	"9y2OkibP3pssDfQ8zMzqwKiul8++fjk2QjErhBGAJn2Boc1IpeDC+0BZX+s6aRlCPQcpIQ82wUIomGjh",
	"w6z2SP7pwie3YM96mR+Et5ZH/x4hw3ZFvTUU3tWFJLAcJMWaCdQ5n8dYIRJW1EAvo+IOaTXorh16ab/7",
	"nCK+vN929Wof3sO52F0h24feMdXBfHy65sQJB3tzr0YikgM0s4xzkBNvxG2XduDNNJmYVzmvMiuqxGcz",
	"aK8Hpx3bws2SSs2su8rWEyrKynENmxOr9vFVx/2Ox0BbGdKCHiWUbhHFUXXVKgX34ijg/bHpO0shikmP",
	"ZfC8W4+ifRiuWXYNmJg1RKYYKfhB89iYSchDNEgFn5Hb5cZXWyhL4JA/mhJyxm10oHcfaVYgbU3OH+ht",
	"869x1ryyFWacBnp6xdNhVljpRd6T+/lhtvC8Pt6kwPDLe85vBzlgdr3mfT5yt1gSplkneDpUvdH172iJ",
	"UBH5WShSAtSFNQS/RJaQeEcRzM4SpRFC/wBKnAGZqEKkvPAPySBjhkpjKp4MAdLABzxXayjc4EkEOCe7",
	"HVlZ3Wefd1TMiYTaN+PQBKwup6ll4qpPNdKeOczS5IxzISGeEf1MbaLmENmGeY7xPzOmJZWbQ9KkNlGV",
	"UkP1Ynmnt2RwlKwXUjtLdnFYFOJ2gmxtEqorpdQBpp1qXtu+Tmndzxz1GURul1Q5EXFDljQnmZASsrhH",
	"OsTbQrUSEiaFQC/MlGPHXJtHwgrjOjkpxIKIMhM52EJoaQrqm6vinKLsBZErWxIFlnYwZYDtE9HxwCnN",
	"7WvNsxOU13YW2vCbf2n62PQVdfo7u+iJdRHoiS8A5dLdOQzZxl14kXBsRqa2UjYtIs/ZGukGZOrIz4mW",
	"FYyJa9Guwu8OPpVAVkwpC0qgpVtWFJg9gq0jh4bgD5RGbY/sfI5+0DcMHd6amUSsSF2a2zGkX4l5wEWc",
	"kY3opRTVYhnVBwhw+qe7rNzDPh7lZ1WhTyKGiJopnpGVUNo9i+1I9ZJrF9CHmeBaiqJoKvKsnL9wRt8f",
	"6fosy/RrIa5nNLt+hI9wLnRYaT72KRXavrv1TLKVg3HYS0Gv+QTJQ+1Os27boVero+fBvLPF/TqGh12a",
	"/AjMD7uZ6267xll3Ye11Nfls+i10xgnVYsWy9HH7a3m/9vqsprhXMtOirUJss9BgM+QD8T0W3JmQe3bR",
	"DJwmy6ieEccjnFsHciLzXxTj2+OSOTge1HOHdvmOE7AmWa8Y2AIAIbWJEHQlbeniWEgLDEcsbOIUdEpp",
	"AzrwwkHfv/vBZkY4OlAa7gVUxxs5APjQajDGNiOm9WyeibX//qhOmXkQ8HfbqbzBPPqcKi9q0pLWrdIn",
	"surhCOkCBFs9EC8xCcZsqB9iKEU/8PKPAOj3TGzAMMg/cV8w5pQVkE9SVYrPgw5sHD3XXYxlNLqv52g5",
	"eUYrXwnYjF1JcImVrPQvm+bEkhpSEqF5VyPOc1iDjdH6HaSwdXzHkTkLClvmt6VREOWkgBtoOGy6bE8V",
	"SqHsBnxfFTqTHKBEi29b0ZbyRIyrBLa0L27tk8iXbQh2k+oYi1i7U2SHriWpGVrziT0mauhRMhDdsLyi",
	"DfypfUWOpi7RHOUEqjrPh4l/Yg6d5mc7wjs/wJnvnxJlPCY+DONDe7OgNOq2MaCdnsmV6jv1PO2YHKcy",
	"C4YinC0Pdm1L4jXfUCW95f1azS7J1y+xgfvEBI8Q+80aMpRq3FMIcvcY6rGcuBxISO0cILcPBtMloc1f",
	"AidcRDWPb6kKr5g6q6v/wU6MjRh3D+0DbPS1//D9d5bgYES1ki2mS5QGsr6fjv8POYlbD2LveCkaUeBC",
	"ebeoxjx1u2cHNhBVkRNu9tPI/lgj2N1ijouPyazyAxWFuLVFjOMn6ivw9lxLfd7E5MRyFq5l7yc9dgmH",
	"21oQFkWIrOiGCIn/mAfpPytasPkG+YwF33cjakkNCTkDsvWicH7XZuLt4tXYA+YVMcJPZdfNho4ZDbcx",
	"o0RAm4vcl20TZEWvId4GdBCx/DPThnGqaoZKDXNlt7aziwW3eJ+eaUXzWAmAiWY3De7gE56b3v9XHbYa",
	"T+XzP5YFzXzJald8rslnsKq9Jy69hNX2MOcuX/MkECrl10QrfZqM/ABt6p6sKxXz01ccqwF2pwR4py7Y",
	"vZYxUCncqnG0JUB80FKOvQvHieHsLCku9btrcXHl48+zO8kM0X3LGAL+n2hXGu4Vnci2dAX1eD22WPpn",
	"2IVGIp4ErFYNPhPriYS52uVIY/XgM7GuAVZBd8t4JoEq63d0/sY9W+sEyIybZ7T12g1m1TBKDnPGa1bL",
	"eFnpxCsI8yDzTYSw2JqAaO2xzfXJGEYUvaHFmxuQkuV9G2dOjy0NHBfp8RYU1zehAAk3cncApuoXIMZT",
	"1/r5uJm5/m2BQes7qzTlOZV53JxxkoE0UgO5pRt1uKkqWB12GatoJAs1s4VEZiskbQtIsXHW5nsakgKA",
	"9IgWpQGWIHTSTliBrGJIix7DTxeGv4QlaEXXk0IsMOq350C4PNdoOrQPSMFRiW6lu2Hr9vMo9jtsnwZL",
	"kThGpAXOOmSK7ef+DW4lPkJ/5kxvPflWw9kOw7aezvZgeqTyRR2eYYmlex5TkfMuMVMcPe9FVZ+mxNMe",
	"RJuYdInuaNV7dhH9K1zahViFPrxYZdOFIxWfb/UKE9Q3qC0BGKDquAKaOQ+xriKuo6iwSBm77AZ76ums",
	"dt/fSz3goSJFubPenDY46Jhx9qnwuT2fwaQU5SQb4ttqqxXlzsjgIG3C2EMfkQmhZ93B70aF+l2NnGiN",
	"Ql77FjntLSS2y1ZWZttUBn1Kph6O3jRgiDnyMjzCVrWGsVZBFTP2j3Nv7G4q0QKTIJRIyCqJSuZbutld",
	"+LEn+/zF92fPnzz99enzL4lpQHK2AFXXNGgVTqxdExlva40+rzNiZ3k6vQk+W4hFnLde+rC3sCnurFlu",
	"q+pkxJ2ykftopxMXQCo4t1si76C9wnHqsIg/13alFnn0HUuh4NPvmRRFka4pE+SqhPkltVuRAca8QEqQ",
	"iiltGGHTfsp07ZStlqhcxKzhNzY3lOAZeO2zowKme3y5Ugvp8+lFfoa5GJzNicC6LByvsnaibety7zSr",
	"30OhEd1tZkBKUTrRns1JCiKM2ZIVBL26U5uiPj1y0w3M1jrspgjROb+nSe+Mu5ewmJPt3L5ZilunOb3Z",
	"xIR44Q/lAaTZZ93ozzNyCCepDQN/Gv6RSJxyNK4RlvspeEXyfbAlKvys4zURkoYMAq2bICNBHghATzx0",
	"I2g1CrKLcpNLa2NAa4Q3P7fFjx9rs/TOyBSExHfYAV4cy1y3C8EUDpw/OLH3jwEp0VI+9FFCY/m7wqM9",
	"6w0XSbRFTmmiNSjLlkRXLIwC4tXLEGfe8yrphKNLITQxL9OiSISxWz0OnqmYcMyTQN7Q4vNzjW+ZVPoM",
	"8QH5u/7ArThsOUayRaU6ekLO13QQWFGI8meBir/F2Pr/ArOzydvRzeIM/507EFVCtLDe3vNgAQdObnFM",
	"69j15Esyc+V+SgkZU22Hglsv0oR4W5Bs7vxrYa3bsb/3LhP0i9D3OA5z7w9EfoqMbMFzwMFcH/U/mDn1",
	"cIDkaUmRaodQEvhL8bq4qPqOa+eepWEOS+UUJW7cM5VTt1z80OXhOvDyqhR01zn41m/gNnHh12sbmqts",
	"cIWZq6v3ejYkoVi6GozpjjnOjlIW5v5FYT5LgjOLSjeGgyRJWLXIvSt7TctfMsrT0NxFI+73FJBfWvSb",
	"0fBRMK+4HS8UQMVYcc/WxXwcvBgEN91ekCv+mKgl9W8L9+fT51+OxiPg1cosvv4+Go/c1w+pl1q+TsaV",
	"1ol0Oj6irprAA0VKuhlaQ64/b04SuXWaoM8vzyjNZukH3fdmw/DV6qIPzjnyeeQt9vp0yXP+92b/2TuD",
	"WDgrlhjrxEBhH3blCPqlLyG+TfreU+ejxXcrVux0j2uUYLkbjxY2PRnWJfnVVan7vHvuIejJFOiWfp8E",
	"YBYxibU2Jo+mitK5DSjF4rolamNgzHVWSaY3Fwb/XuHOfr1OpYH6LiRmctm+gu3dSb1aXAP33mV1GqdK",
	"ebn6O0ELlDutSwA30qYopuQbWxvEXYh/fzD7d/jib8/y0y+e/Pvsb6fPTzN49vyr01P61TP65KsvnsDT",
	"vz1/dgpP5l9+NXuaP332dPbs6bMvn3+VffHsyezZl1/9+wND6QZkC6iv+fNi9P9MzoqFmJy9PZ9cGmBr",
	"nNCS/QBmb1C3NsfUhIjUDC9XWFFWjF74n/5vf0VOM7Gqh/e/jlwlyNFS61K9ODm5vb2dxl1OFpj9ZKJF",
	"lS1P/DyYxbLxUnl7HiKCrNcf7mhtbcJNDZn9zLd331xckrO359OaYEYvRqfT0+kTzKRYAqclG70YfYE/",
	"4elZ4r6fYP7sE+XK8JzUQaNJO/87DJDxj3m5gJw8DOF//xY8PdQjH0U4d/kn/6EsMYZVnOdIXK5i+ggr",
	"vqLrJ4L19PTU74V70USC5QnGmr34OLL8I5UIt4PUyxrgJGR1venuon/m11zccoLJfu0BqlYrKjd2BQ1s",
	"RIPjNtGFQqOcZDeYk9H0buO8LF3xoz6UYz3N5in3nZFAQmUcc8JswRxXwkilUN4tvHRP7G9N/tyZLLE7",
	"2OitgdknOAsJk9016HCGPiYWYeGMWDVlB9HjUVkl0PkNhvGpbTgbR8V6LDSiyAPGOxh9W/0vwagh3UVI",
	"/Gv+WgItUC4yf6wMoWb+kwSab9z/1S1dLEBO3TrNTzdPT7y24eSjyyR1t+3bSex/evKxkY4r39HTe1Du",
	"anLy0WWo2jFgbBA5cZ7tUYeBgG5rdjLDSptDm0K8uv6lIM2rk4+olev9/cQJ6emPqDi1N+yJf3n0tLTZ",
	"g9IfGyj8qNdmIduHM22i8TKqs2VVnnzE/yDZ3tnTXkAqNZ4t5UVJ3XxMmCZ0JqRW9lfDDXzZeaailp0j",
	"f2Z6vbQQ4G3q3RFHL953o01xIOJHQhHF3L+1BNGYqRYS0fwaMYUgAjfa14Lw+9PJVx8+Phk/Ob37FyPo",
	"uj+ff3E3MFbnZRiXXAQpdmDDD/fkeB1tbb1Iu0mBgXUfGY4W+qMJ3Va1BiIBGTsqSbeGTyRkNl2eHZHH",
	"N+sKJPj71zQnPl8Lzv3k8819zm1EihFUrUB9Nx49/5yrP+eG5GnhRbIDhbcze/hjpkDcZqeEt/GICx5l",
	"wuULK2aIVM6cHn6jND2A31yYXv+H3zQadrwCMOrX2llcFcBIv2Ivk1ACF3zOcK8DpPkN5ZkP/axjsXC/",
	"rOTtCCM47FcK5lXh8yGVhdNSmcetn0hVZWk4zpyqQFkuAMw8mG06lzA0qXgmuHW1xFg77zCCaVnQ6URd",
	"s7LRhc0NVWH2Nx/3OfWb/s8K5Kbe9RUzL9/Om2lYMpb+b5+S8VvsH4HxNwc6MuN/uifz/euv+H/3Vffs",
	"9G+fDwKfe+2SrUBU+q961V7Ye+9eV62T/G1VrhO95icYRHLysfHIcZ87j5zm73X3uAUWk/EPDzGfK1TI",
	"bPt88tH+G00E6xIkWwHXmLDc/WrvmxNzIxSb7s8bniV/7K6jkYq/5+cTr4dNva2bLT82/my+F9Wy0rm4",
	"tTVhklIOXrq0ICvK6cImGgmqS3N7ugHqKgHkTRmuN5dfgFAs7isqXeuWbcCcSzoSvIXwHgw+owvGcQJ0",
	"4MBZ6Nx0pdG172pwdzWPFw6yn0QOXYkqdX06GBtXaDgKpwlzzIfj6DQjxnu330FBRxPrW9UlI/OxUu2/",
	"T24p00bucon3EaPdzhpoceKKu7Z+rSumdb5gGbjoxzhzSvLXE9o8F029i9myvo4dpUzqq9M79DTyIXv+",
	"c23yiU0oSC7BePL+g9l1BfLGU1JtEXhxcoIR4Euh9AnKr01rQfzxQ9joj578/Iabb+uJkGzBOC0mTrVW",
	"F68ePZ2eju7+/wAAAP//dCgz5mATAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
