// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"yZOTR5OP/zcAAP//+kXjhv8FAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
