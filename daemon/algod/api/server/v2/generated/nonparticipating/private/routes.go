// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"TwAAAP//xilWefLGAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
