// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
