// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4k3Npt5+uP1/AQAA///a5/yiM+kAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
