// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
