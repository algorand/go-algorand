// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

<<<<<<< HEAD
	"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",
	"fqp2y9dPqnbt5tPN/w8AAP///IEwx/vEAAA=",
=======
	"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",
	"1VOqN/X20+3/DwAA//+vckvpEccAAA==",
>>>>>>> master
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
