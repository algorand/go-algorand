// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
