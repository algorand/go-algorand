// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ttrk0ePj06OP/y8AAP//qrVxWz8QAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
