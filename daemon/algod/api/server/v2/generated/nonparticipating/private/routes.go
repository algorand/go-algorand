// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
