// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
