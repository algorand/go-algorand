// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"P36oN9MXKKk39fbD7f8EAAD//003X+sX4gAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
