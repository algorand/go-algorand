// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
