// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"r0xVb/jt+9v/HwAA//9bWhkhW+sAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
