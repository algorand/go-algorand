// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"QfHH981Gh1pJzYZ/fP/x/wYAAP//GCszTf/sAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
