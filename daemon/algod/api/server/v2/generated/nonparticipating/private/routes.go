// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"CQAA//96zAjpy+EAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
