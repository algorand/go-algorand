// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
