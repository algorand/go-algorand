// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a5PbtpLoX0Fpt8qPFWfGj2RPfOvU3omdx2yc2OWZZO+u7ZtAJCThDAXwAKBGiq//",
	"+y10AyBIghI1o9gntfvJHhGPRqPRaPTzwySXq0oKJoyePPswqaiiK2aYgr9onstamIwX9q+C6VzxynAp",
	"Js/8N6KN4mIxmU64/bWiZjmZTgRdsaaN7T+dKPb3mitWTJ4ZVbPpROdLtqJ2YLOtbOsw0iZbyMwNcY5D",
	"XLyYfNzxgRaFYlr3oXwlyi3hIi/rghGjqNA0t580ueFmScySa+I6Ey6IFIzIOTHLVmMy56ws9Ilf5N9r",
	"prbRKt3kw0v62ICYKVmyPpzP5WrGBfNQsQBU2BBiJCnYHBotqSF2Bgurb2gk0YyqfEnmUu0BFYGI4WWi",
	"Xk2evZ1oJgqmYLdyxtfw37li7HeWGaoWzEzeT1OLmxumMsNXiaVdOOwrpuvSaAJtYY0LvmaC2F4n5Mda",
	"GzJjhAry5tvn5MmTJ1/ZhayoMaxwRDa4qmb2eE3YffJsUlDD/Oc+rdFyIRUVRRbav/n2Ocx/6RY4thXV",
	"mqUPy7n9Qi5eDC3Ad0yQEBeGLWAfWtRveyQORfPzjM2lYiP3BBsfdVPi+T/rruTU5MtKcmES+0LgK8HP",
	"SR4Wdd/FwwIArfaVxZSyg749y756/+HR9NHZx396e579l/vziycfRy7/eRh3DwaSDfNaKSbybbZQjMJp",
	"WVLRx8cbRw96KeuyIEu6hs2nK2D1ri+xfZF1rmlZWzrhuZLn5UJqQh0ZFWxO69IQPzGpRWnZlB3NUTvh",
	"mlRKrnnBiqnlvjdLni9JTjUOAe3IDS9LS4O1ZsUQraVXt+MwfYxRYuG6FT5gQf+4yGjWtQcTbAPcIMtL",
	"qVlm5J7ryd84VBQkvlCau0ofdlmRqyUjMLn9gJct4E5Ymi7LLTGwrwWhmlDir6Yp4XOylTW5gc0p+TX0",
	"d6uxWFsRizTYnNY9ag/vEPp6yEggbyZlyagA5Plz10eZmPNFrZgmN0tmlu7OU0xXUmhG5OxvLDd22//9",
	"8tVPRCryI9OaLthrml8TJnJZsOKEXMyJkCYiDUdLgEPbc2gdDq7UJf83LS1NrPSiovl1+kYv+YonVvUj",
	"3fBVvSKiXs2YslvqrxAjiWKmVmIIIBxxDymu6KY/6ZWqRQ7730zbkuUstXFdlXQLCFvRzV/Ppg4cTWhZ",
	"koqJgosFMRsxKMfZufeDlylZi2KEmGPsnkYXq65YzuecFSSMsgMSN80+eLg4DJ5G+IrA8YMMghNm2QOO",
	"YJsEzdjTbb+Qii5YRDIn5GfH3OCrkddMBEInsy18qhRbc1nr0GkARph6twQupGFZpdicJ2js0qHDMhhs",
	"4zjwyslAuRSGcsEKy5wBaGkYMqtBmKIJd793+rf4jGr25dOhO775OnL357K76zt3fNRuQ6MMj2Ti6rRf",
	"3YFNS1at/iPeh/Hcmi8y/Lm3kXxxZW+bOS/hJvqb3T+PhloDE2ghwt9Nmi8ENbViz96Jh/YvkpFLQ0VB",
	"VWF/WeFPP9al4Zd8YX8q8aeXcsHzS74YQGaANfnggm4r/MeOl2bHZpN8V7yU8rqu4gXlrYfrbEsuXgxt",
	"Mo55KGGeh9du/PC42vjHyKE9zCZs5ACQg7irqG14zbaKWWhpPod/NnOgJzpXv9t/qqq0vU01T6HW0rG7",
	"kkF94NQK51VV8pxaJL5xn+1XywQYPiRo0+IULtRnHyIQKyUrpgzHQWlVZaXMaZlpQw2M9M+KzSfPJv90",
	"2uhfTrG7Po0mf2l7XUInK7KiGJTRqjpgjNdW9NE7mIVl0PAJ2ASyPRCauMBNtKTELQsu2ZoKc9I8WVr8",
	"IBzgt26mBt8o7SC+O0+wQYQTbDhjGiVgbHhPkwj1BNBKAK0gkC5KOQs/3D+vqgaD8P28qhAfID0yDoIZ",
	"23Bt9ANYPm1OUjzPxYsT8l08NojiUpRbezmgqGHvhrm7tdwtFnRLbg3NiPc0ge2U6sRujUeDFfOPQXHw",
	"rFjK0ko9e2nFNv7etY3JzP4+qvOfg8Ri3A4TFzy0HObwjQO/RI+b+x3K6ROOU/eckPNu39uRjR1lB8Ho",
	"iwaLxyYe+IUbttJ7KSGCKKImtz1UKbqdOCExA2GvTyY/a4YUUtEFFwDt1D6fBFnRa9wPCXi3hMB0eBch",
	"LaEEGVSoTuZ0qD/p6Vn+BNSa2lgviVpJteTawLsaGpMlK0FwpsITdEwqt6KMERu+YxEB5htFK6Rl9wXF",
	"Li7gPY+NENY7Xrwj78QkzBG7jzYaoLo1W97LOpOQANfowPB1KfPr76leHuGEz/xYfdqHaciS0YIpsqR6",
	"mTg4HdpuRhtD37Yh0CyZRVOdhCW+lAt9hCWW8hDWVVXPaVnaqfssq7NaGHjUQS5LYhsTtuKgMHcPR9Sw",
	"4/uLfEPzpRULSE7LctqoimSVlWzNSvto50IwNSVmSU1z+GFk/66Bc6SZZXaGkWg1Ts0EKjYVdBGKkRWF",
	"G2hlXzNV2e4TOKimK9aRguBGlDVoEaKHxsULvzq2ZgJ4UhgawA9rBG1NPPiJndt9gpmFxMWhBtB4813A",
	"X+AXLaBt6+Y+Fc0UUhWoszb2N65ILhUOgTe8m9z+h1HVdEbqvF8plrkhFF0zpWlpV9dZ1INAvsc6nXtO",
	"ZkENjU6mo8L0Aww5B/QD8Y6phJbmFfyHlsR+tlKMpaSGejgIIzIypxZ4MVtU4Uy2AehbJVmhKpNUNL8+",
	"CMrnzeRpNjPq5H2D2lO3hW4RYYeuNrzQx9omGGxor9onBHVXnh31ZJGdTCeaawwCrmRFkH10QEBOAaMh",
	"QuTm6Nfa13KTgulrueldaXLDjrITdpzRzB7g+x+51BEWoG56gHwKmwYXuIjvBgt2Y3o8n0l1O4Gpc4cK",
	"0hhUCbWjRvLitEMH0LSuMsd+EkYZbNAZqPFh2S3ndIdPYauFhUtD/wAsaDvqMbDQHujYWJCripfsCKd7",
	"mZRTZ1SzJ4/J5ffnXzx6/OvjL760JFkpuVB0RWZbwzS57zSPRJttyR4kDxoIUOnRv3zqzXDtcVPjaFmr",
	"nK1o1R8KzXv4wMdmxLbrY62NZlh1AHAU02f29ka0E7RcW9BesFm9uGTG2Mf8ayXnR2f4vRlS0EGj15Wy",
	"spNum0KdQHha2CanbGMUPa2gJRMFulLYdXBtn7mr2VGIamjji2aWgjiMFmzvoTh0m5pptvFWqa2qj6HB",
	"YUpJlZQyKiWNzGWZWVGWy8Rd99q1IK6F366q+ztCS26oJnZuMNDWohi40sxGjL+iceirjWhws1M8wvUm",
	"VufmHbMvbeQ3D62KqcxsBAHqbN20cyVXhJICOoI49R0zKGLyFbs0dFW9ms+Po9CVMFBCJOArpu1MBFtY",
	"AU+zXAr0V9xz+7tRx6CnixhvSDPDADiMXG5FDtbAYxzbYcFoxQW4JuityCMpycJYsmLRIsu7a+mG0IFT",
	"3dMJcCw6XsJnMEe8YKWh30p11Ujo3ylZV0dnz905xy6HusU4g0dh+3pNNxeLsu0ju7Cwn6TW+FkW9Dzo",
	"SXANAD1Q5Eu+WJroSfxayT/gTkzOkgIUPqA+rLR9+lqxn2RhmYmp9RFEyWawhsNZuo35Gp3J2hBKhCwY",
	"bH6t00LmgFcluHOBF5qJ5VZQwXBNZsxSV05ru9q6IuBj1bsvmo4ZzfGEZoAaPeBhElyDsBVOhx57pWK0",
	"2JIZY4LImXPjcA4msEgKDmLGi2lOxE3wixZclZI505oVmdO27wXNt8Orw+zAEwAOAIdZiJZkTtWdgb1e",
	"74Xzmm0zcGfU5P4Pv+gHnwFeIw0t9yAW2qTQ21UZ9qEeN/0ugutOHpMdKiORaq14axlEyQwbQuFBOBnc",
	"vy5EvV28O1rWTIHXzB9K8X6SuxFQAPUPpve7QltXA0767pluJTy7YYIK6QWr1GAl1Sbbx5Zto5Yuwa4g",
	"4oQpTgwDDwheL6k26OnFRQFqW7xOYB4UwuwUwwAPPkPsyL/4F0h/7Nzeg0LXOjxHdF1VUhlWpNYAyr3B",
	"uX5imzCXnEdjhzePkaTWbN/IQ1iKxnfIci9g+IOaoMpzysH+4sBtwN7z2yQqW0A0iNgFyKVvFWE3dlQe",
	"AITrBtFIOFx3KCd4R08n2siqstzCZLUI/YbQdImtz83PTds+caEdB+/tQjINNiLX3kF+g5hFF/Ul1cTB",
	"4bW1oM5Bl7Q+zPYwZpqLnGW7KB+eeLZVfAT2HtK6WihasKxgJd0m9Mz4meDnXQPAjjfPXWlYhr7G6U1v",
	"KNm7du4YWsJ4OiU8EvhCcnsE7VOgIRDXe8/IBYOxU8zJ0dG9MBTMldwiPx4sG7c6MSLchmtp7I47egCQ",
	"HUcfA/AAHsLQt0cFdM6at2d3iv9k2k0Q5IjDJ9kyPbSEZvyDFjCgC3ZhXNF56bD3DgdOss1BNraHjwwd",
	"2QHF9GuqDM95BW+dH9j26E+/7gRJ3wBSMEN5yQoSfcBnYBX3J+gl2x3zdk/BUbq3Pvg95VtiOd4TqQ38",
	"NdvCm/s1hl9Eqo5jvGUTo9r7iQoCgHqnbiuCx03Yhuam3FpBzSzZltwwxYiuZ+il0benGFll8QBJ+8yO",
	"GZ0BOmn+3WkRv4ShouWlzJb4JtgN31XnYdBCh3sLVFKWIzRkPWQkIRjlHkMqaXeduwgvH+PjKakFpGPa",
	"4H0Qrv97uoVmWAH5T1mTnAp4ctWGBZlGKhAUQIC0M1gRLMzp/C8bDLGSrRi+JOHLw4fdhT986PacazJn",
	"Nz4s0jbsouPhQ9DjvJbatA7XEfSh9rhdJK4PMFzZi8+9Qro8Zb9Tlxt5zE6+7gwerF32TGntCNcu/84M",
	"oHMyN2PWHtPIOIc2GHeULaftAtVbN+z7JV/VJTXHsFqxNS0zuWZK8YLt5eRuYi7FN2tavgrdIOST5ZZG",
	"c5blEKg4cix2ZftgbKMdhwtuDzDGNYwFiF1gr0vstOeJ2Tg98NWKFZwaVm5JpVjOMKTPSo46LPWEoLN/",
	"vqRiAQ8GJeuF85PAcYDh1xpVM6oWvSGSQpXZiAyU3KkLwHni+ahOK04xap90XQ05PmBuaJjPBfKOuZmj",
	"PehaDJJGsulk8MVrkbpuXryInHZo6ojLoCXvRfhpJh5pSgHUWdmnj694W+xhspv7x6jsm6FTUPYnjpya",
	"m49Dfs32uV1ujyD04EBEsUoxDVdUrKbS+FXO4zB07w251Yat+pp87PrrwPF7M/helKLkgmUrKdg2mXmF",
	"C/YjfEweJ7gmBzqDwDLUt/sGacHfAas9zxhqvCt+Ybe7J7RrsdLfSnUskygOOFq8H2GB3Gtud1Pe1k5K",
	"yzJhWnRBql0GoKfBc44rQrWWOQeZ7aLQU+f4jNZIF9HaRv/rEHpzhLPXHbdjQ4vzH4COmJUVoSQvOWiQ",
	"pdBG1bl5JyjoqKKlJpy4/GN8WGv53DdJq0kTWkw31DtBwYEvaK6SDhtzllDTfMuYV17qerFg2nTeOnPG",
	"3gnXigtSC25grpU9Lhmel4op8KQ6wZYruiVzSxNGkt+ZkmRWm7b0DzHY2vCydAY9Ow2R83eCGlIyqg35",
	"kYurDQznjf7+yApmbqS6DlhI3+4LJpjmOks7m32HXyF0wS1/6cIYwKMfP3u/2iYpxMQus5UH5v/e/7dn",
	"b8+z/6LZ72fZV/9y+v7D048PHvZ+fPzxr3/9f+2fnnz864N/++fUTnnYUxHCDvKLF+5lfPECnj9RNEIX",
	"9k+m/19xkSWJLPbm6NAWuQ/ZMBwBPWgrx8ySvRNmIywhrWnJC8tbbkMO3RumdxbxdHSoprURHWWYX+uB",
	"j4o7cBmSYDId1nhrKarvn5mOxQejpAuvh/MyrwVupZe+MdTU+5fJ+TTkW8BUbM8IBOMvqXfydH8+/uLL",
	"ybQJog/fJ9OJ+/o+Qcm82KRSJRRsk3orxnEg9zSp6FYzk+YeAHvSlQ59O+JhV2w1Y0ovefXpOYU2fJbm",
	"cD4qy+mcNuJCYAyDPT9g4tw6y4mcf3q4jWKsYJVZplI0tQQ1aNXsJmMdt5NKyTUTU8JP2ElX51PY96Jz",
	"6isZnXvHVCXlmNdQOAdIaJ4qIqzHCxmlWEnRTyeCw13++ujPITdwCq7unCmP3nvffXNFTh3D1PcwawcO",
	"HeVZSDylXXxoyyHJcrM4bO6deCdesDloH6R49k4U1NDTGdU816e1ZuprWlKRs5OFJM98yOkLaug70ZO0",
	"BnNHRnHhpKpnJc/JdfwgacgT84H1R3j37i0tF/Ldu/c934z+88FNleQvOEFmBWFZm8xlM8oUu6EqZfvS",
	"IZsNjIzpynbNikK2rFFB6rMlufHTPI9Wle5mtegvv6pKu/yIDLXL2WC3jGgjQ8idFVBc1LLd35+kuxgU",
	"vfF6lVozTX5b0eotF+Y9yd7VZ2dPIHixSfPwm7vyLU1uKzZauzKYdaOrVIGF47MSfNWzii5SJrZ3794a",
	"RivYfZCXV6DjKEsC3VqBlT7AAIZqFhCiuAc3AOE4OP4ZFneJvXzmyvQS4BNsYTvG/E77FaUIuPV27Ukz",
	"QGuzzOzZTq5KWxL3OxMS2i2skOW9MTRfwGvV5f6bMZIvWX7tkrKxVWW201Z37/DjBE3POrjGdH0YRAkJ",
	"o8BAMWOkrgrqRHEqtt3MPRojKmDQN+yaba9kk2/qkFQ97cwxeuigAqVG0qUl1vjYujG6m++8ynwsrUvA",
	"AvGpniyeBbrwfYYPMoq8RzjEKaJoZTYZQgRVCUQg8Q+g4BYLtePdifRTy+MiZ8LwNctYyRd8lso0/B99",
	"e5iH1VKlS67ovJDDgJrwObFP+RlerO55r6hYMHs92ytValpi4tik0wa8h5aMKjNj1OzU84s4ttFDB0/K",
	"GwguBw3f1C6Bbex+cwMaO8Fu7KsCFEXYxnkvnwz7nyHgrLglPL5781I4GXzrOtQlkir6WzlgNzxrnWte",
	"TGcAF35fMcjKKm/svlgopEsoinlrovul1nTBBt4usfVuZMqPlsUPBtknkSRlEDnviho9SSAJMjbO7JqT",
	"Z5jZL/YQwzOz45DpZ0IDsbMZQZ5wh7BZCQJs8FzFvaeqZUXFxMdDoKVZC1OiEQU9GG2MxMdxSbU/jpAS",
	"1nPZUdLZHxhBvCv73kXkSxjlfQ259fxt2OWgvXe/y8HnE+/5bHvxo39E5jz79oLwhdR2SAGiacFKtsCF",
	"Y2NPKE1OqGaDLByv5nPgLVnKLTFSUEcCgJuD2ZfLQ0LQNkJGj5Ai4whscHyAgclPMj6bYnEIkMLltKJ+",
	"bLgior9ZOrAPHfWtMCore7nyAXtj7jmAy7bRSBYdj2oYhnAxJZbNrWlp2Zx7izeD9JLAwYOik/LNud48",
	"GHpo7DBN4ZV/0JpQSLjNamJp1gOdFrV3QDyTmwwjlJNvkdlmZuk9GbsA8dKpg4np9u5pMpMbcOeCqwV9",
	"5ffAMgyHByPSvWy4BnqFfkNyFgKza9rdcm6KCjWQjFO0BnIZEvTGTD0gWw6Ry/0og96tAOiooZpyFE4t",
	"sVd90BZP+pd5c6tNm8ywPiwsdfyHjlBylwbw19ePtXPefd/kNhzOn+ZP1CdJ9tfXLN0lCSN2rjCx4iE5",
	"GLvk0AJiB1Zfd+XAJFrbvl5tvEZYS7ESy3z7Rsk+2jQrGTyCs5Zoml2nPAXsW57BPX7pu0XKOtg9KrYP",
	"IgdCxRZcG9YYjbxf0OdQx1PIEC3lfHh1plJzu743UobLH83m0LG1zE++AvDAn3OlTQYWt+QSbKNvNSiR",
	"vrVN0xJo20UR6ynwIs1xYdprts0KXtZpenXz/vDCTvtTuGh0PYNbjAt00JpB/Y+k4/KOqdG3feeCX+KC",
	"X9KjrXfcabBN7cTKkkt7jj/JuegwsF3sIEGAKeLo79ogSncwyCjgvM8dI2k08mk52WVt6B2mwo+910vN",
	"h70P3fw4UnItUabDdISgXCxY4TO4eXuYiPLklVIsokJVVbUrLeAJwex8kFxvR14+54bPhpzwI3E/46Jg",
	"mzT08asAIG8i6yCnIEyyYALTlaTVQknUxC7+0CLS1X1iW2g3ACDpBH3VMWY33sm4S2E7YQNKRgv3JtHM",
	"r2/3sexviEPddMh9upXcdfcRggGBpriJarf00xAMMGBaVbzYdAxPOOqgEowepF0ekLaAtbjB9mCg7QSd",
	"JLhWtnDnau0U7Kfw5j21rzL0vXaOxZa+ae4C8ItagQWj5dncT00f3moj1/7DL5dGKrpgzgqVIUh3GgKW",
	"cwgaosTvmhiO7iQFn89ZbH3Rt7EctIDr6diLEaSbILK0iabmwnz5NEVGe6ingXE/ytIUk6CFIZv8Vd/K",
	"5WX6SJUUroRoa25hqkqG6//AttkvtKztI4Mr3bjnOrNT+/I9YNfXqx/YFkbe6/VqAduzK6B5esOABlOa",
	"/vBJRzm67+lWFQN4Xra28ICdOk/v0pG2xtWdGCb+5pZp1WVoL+UuB6NxkrCwjNmNy7Rvgj09rI34Linv",
	"2wRe7JdBInk/noprX6WzfxWFXBT7aPeK0dITLyxn8nE6uZsnQOo2cyPuwfXrcIEm8QyepmgZbjn2HIhy",
	"WlVKrmmZOX+JoctfybW7/KG5d6/4xC+ZNGVffXP+8rUD/+N0kpeMqixoAgZXBe2qP82qsFLF7qsEE5o7",
	"RSdqiqLND0mnYx+LG0he3lE29eq+NP4z0VF0PhfztMP7Xt7nXH1wiTtcflgVPH4amyc6/LSdfOia8tIb",
	"Gz20A87psLhxxYOSXCEe4M7OQpHP153HGgxuePfu7drjsTEToMNMSCGf8KDSIxTkXSaSPoQNEe9hfbCk",
	"V5ABM/2wES4/JnA852NEjy6kfStV645xAZBJH6U/TnqzsjziccAl3FcC7cpsJwTlu98Wv9lD//BhfKIf",
	"PpyS30r3IQIQfp+53+EZ8/Bh0kiZ1JZZXgTKMEFX7EEI5hjciE/7zhfsZpwccL5eBQFWDpNhoFB0NvLo",
	"vnHYu1Hc4bNwvxSsZPankzG6gHjTEd0xMGNO0OVQwGPwZV1h8VFNpOi6bkOsrSUtuFNccQu0+faPkKhX",
	"YCfNdMnztAeJmGnLfQT6bNrGBBoPKIXtiDUfcAEWNY/Gss3GpGbtABnNkUSmTmaHbXA3k+5414L/vWaE",
	"F/bxNOdMwfXZuVH9GwRG7cm9afWbGxjNYc3wd1G37DBreZXTLl3LTjPhi2C68gtNlU860NE8nrHHuHc4",
	"iTv68LccBM0t256e455LY4rQe0bnbIIDcySLynOdzZX8naUvbDBTJfJtePsqB23y70ykHAS7LCXYrpva",
	"+M3s+7Z7/BN8aOPv/OT2iw71225zmaZP9WEbeZu3tU5nhXZIHnrrxY4M7QiEAdYCxyvyuYWKGt7JiQo8",
	"T5hsohXIlj6VccjoKY7fnEoHcy/MtqQ3M5qqtmOfXBamaHtb7lhGEt/Zb4AOqRRwdhI5ioe2HBPWVUw1",
	"po5+8ttbPp9w2tEPp+adBBQVv5Cm6A1RapkYphY3VGA9dtsP+ZXrrRla+m2vG6kg3aROe44VLOerpNb3",
	"3bu3Rd73Eir4gmOp8VqzqJa1G4hgTkugIlcPPCQIcai5mJOzaVRQ3+1Gwddc81nJoMUjbDGjGq7LYHUP",
	"XezymDBLDc0fj2i+rEWhWGGWGhGrJQlPXBDygv/jjJkbxgQ5g3aPviL3wfNT8zV7YLHohKDJs0dfgd8O",
	"/nGWumVdqfhdLLsAnu19wtN0DK6vOIZlkm7UtJP3XDH2Oxu+HXacJuw65ixBS3eh7D9Luy4sFa8+WvHO",
	"m8rugaALlo4sWe1ZJvYFAgFHhA6qBdoxmDZKbgk3ySWtmKGW5Q1Eq1uOimCQXK5W3Kycy6GWK0uiTe1r",
	"nNQPB1XifDEvD5f/CJ67VeLl/RleRnQ1EG0G/tU/gXU5RuuUUExbWvLGp94XUyUXPisyVDcLRc0QN3Yu",
	"u3QQT8HFfk4qxYUBzU1t5tlf7Etb0dxy1JMhcLPZl08TVcLaVWbEYYB/crwrpplap1GvBsjei0GuL7kv",
	"pMhWlkkVD5rsENFBH3QxTjuTDnm07h56rDBtR8kGya1ukRuNmP+dCE/sGPCOpBjWcxA9HryyT06ZtUqT",
	"B63tDv385qUTXFZSpUodNMfdCTGKGcXZGmL90ptkx7zjXqhy1C7cBfrP67nlpdhI0vNnOfm2iGyxu8L8",
	"7cPglx+bnO1gEsYYyo5aUaqEAtWpAj+xn+Rhiryu5Rld3eDbAOZGow1G6WNlIG4AAwNCn8/h6dQFCfe8",
	"pcN89BtR9lkPT4OHDwHohw+nTrL+7XH7M7L3hw/TqZOTWjz7a4OFuzyyoW9qD7+WCZ3a13KDXNi7QrnM",
	"DgmdZvKSsjfjzI0xJe2idp9efDhOSFraQTZN/n798LmLgM/MHWHHdp1qqM06So8Fa+xV5Eyaz/f6b0Qb",
	"YEedsVLa11hcpCdWfCfJrnODeQr8vPi2i3cAJ7Fd87L4pTFHdtijoiJfJr12Z7bjryh5ti4WZADJuh9L",
	"KgQrk8Phi+1X/7Lrv/3o3+TYeVZcjGzbrQqLy+0srgG8DaYHyk9o0ctNaSeIsdpOYxXSJJQLWRCYpyky",
	"0Zz8fvXoVEnLRLwxDLuqjfMjhdhslwBozktwi0wbWKFlpqgZ4CdQYt3X+7HjQMVzjY9nHJ0pQvkKrhtN",
	"V1XJ4GSumbIvfzmHGNd2d0hpBiNHFSSIruwnaAkJJCQxtRJEzufRMpgwXLFyOyUV1RoHObPLYhuYe/Ls",
	"0dlZUj8E2BmxUsSiX+arZimPTqEJfnFFjzA1/0HA7of1Y0NRh2xsn3BcjUco0pziqVi9GfQdYE60VxLW",
	"dwy1SE/Id5CJyBJxK/U86PV8Ut92gsu6KiUtppBs+Oqb85cEZ8U+WLUe60suQK3VJv+kHWJ8wk+faWkg",
	"k834cXan1rCr1iYL5SBTuQJti6ZgJe/4wIB2KsbOCXmBusbg8IGTEEhZrVasiKpP4tMUiMP+xxiaL0Hj",
	"1rrmh3nl+MKonp01Jo4oGjBUIwKGbeF2tVGxNOqUQJ3wG64ZRMizNWunJwy5Op0S2acrbC9P1UIgpRxS",
	"PjzUHjoU7R44FNO89T0JWQfxB+pbsD7yoXViL6FXOjaiU3S2Yx73ye58ymvyo9PC51RIwXMoTZASFyGV",
	"2jh73ogqDmlDnJ64E5o4XMlStyE212FxsPitZ4QOcX3bePTVbipSB/5p2MaVQFswox1nY8XUV552liMu",
	"NHPVpSwRxXxSqoT3TzIwIXgaHEhGkCVpQG/3rf32k9PqQpKKay5Af+PQ5h4faNspNQcTriDckIVk2q2n",
	"HV2j39o+J5A1sWCb9ycv5YLnl3wBY6C/mV02+nD2hzr3Hp3Og9K2fW7bulz24eeW3xROel5VbtLhuuRJ",
	"QdJsxCCCUw4+3uMiQm4YPx5tB7ntdMWG+9QSGluDexer4B7uEUaobd0e5Rv7kEKKghYEIxyTCW25SIDx",
	"kgtva0xfEHnySoCNgfM60E/nihp8O4ziaVeMlgMBCRAxjMbquw7VzeRvUQJr9HMMb2NTlnuAcYQGjcRP",
	"xZb4Q2GpOxImntMyuDInimyDVOWEKHT+7JTdTjEOy7gzH8LYQtfecLrQHapjHHoTDeUMnNXFgpmMFkUq",
	"1dTX8JXAVx+0xTYsr0NRqBCt184Z3qc2N1Euha5XO+byDe44XVTHPkENcS19v8OQ+Wa2hX9TFZGGd8Y5",
	"MR8cJes9lovDEuX3o35TUq+l6UzzRTYeE3Cn3B0dzdS3I/Sm/1Ep3YfP/kNEx3a4XLxHKf72jb044kS6",
	"PUduvFpCnltwmpbw3ScgChka21wJrrJe3S+w5cPmJbasA7xvmAR8TcuByPTYAoD3K2rFh+LT88F0CtS4",
	"dFmGkp0saDAFETrVdmwKfcPYkCMt+tEeTxfv1roTocMWqR9a9id0pmqYxaDd6XamoWaDD7UNuQIAfZUm",
	"LUuZjz71bphz22k4vaZcrVze6YSz13oli5jOY7chxtJMC/1YE77x8PZMfoOHUfKLukmP1tJZHKoqRTS6",
	"JUwxZM6D54HBqeOJIhWpwyz5lpdQOOjfL1/9NBneyGgH+lvq0t0mlcpDGxOiirrksZAtfNTDuhMpytQj",
	"YjrRA0puSGqTPg2uOmzyw7eotBsDEuZ+OaT1y7GD9whgIVPZ3Pu5OSbNRni0R3TQbCzykpguUvTQLeST",
	"eNGgCrJpQkK5yVHlJ1uSz5i6QakSNU7+9/pQvD5cCi2s29Mr+dNjnS/GiHw9fHycTi6Kg4SiVJmjCY6S",
	"Yq0v+WJpoErC94wWTL3eUwWiqfwAr5pKat5UfS3tYC7t7hKGOxkbeXG1ZC5jhg++7o3lPXLXLDdQ6rdx",
	"C1SMHVLTwk7mDXv/Uw1imC2EABVXBGJX5Yd+fd89clwvWVWUcA1ro56Mr3NwHvzJMRzuhuomRU4nTn10",
	"tOx8znLIRL0zOdh/LJmIEk9Nve4NYJlHucJ4COqCXOqHa5YbgHbl7toJT1TT6M7gDOUOuGbbe5q0qCFZ",
	"rDVENN4mWTNgAM2cPm/3kLHA+btxHSgDsOCdmV3666YgyWCe7SjV3S3n8iRpL44m/d2OKdOF5kfNZbse",
	"lGoTxL6h/GH9OtXDb8wXUBZcO9c+GpI9x5oYctEvVnTjkkVDKrdgH/Npo5n2v/m8jThLya9dzQbACloj",
	"b6gqfIujJOLCu4mngZ6HmXkTzdJ3ZEmUv4DAsLyUVozIhqLr2gEkwVXynkaf1iZpEsA1Z0qxIpi9SqlZ",
	"ZqSPftkFxy5UoOPurZCgB0tOIXCD6cbfNPnUofQehfTi1Pnrxgskiq2ohU5FWc+H59yF7Of43Sc+8KXX",
	"9moRA73urwHs45i47iExpvo5cbfl/oQKt1EociGYyrx1sZsCXbSz4EGu06LO8YKOD0ZQuo7OV7SDlSR1",
	"cXl/lZ03QpQx4JptT1Gj4Ysn+x2MgUbJCUGPkrx2NvmoKladgntxFPA+b+6+SsoyGzBoXfTztncp/prn",
	"1wzyLgbn/IG6+OQ+2FGCx8LNcuvzlFcVE6x4cELIucAIK++80C7p2Jlc3DO75t/ArEWNpRSc4vTknUjH",
	"lUCRA3VHbuaH2c3DNLOs7o5T4SB7soJvxJBb1Q0URGhXTj0Z+yrvuxN0K/c3RIVQpGSSS7RKPoeDnipo",
	"DvkgosQlYKymxFkziS5lygv5Njkr7FBpTMWTAUCGiTGpEwIUbvAkApK16BOnENMNukSDck4UaxwFbptx",
	"sV82P/Wi784cZmnzu7lUrFUA3/bG7KohZAdSl8J/Ztwoqra3yYvYK9vf054MYnmvy13wtmsW0njc9XFY",
	"lvImA2aVhdoiqaetbafbl7EvdNf0s6d6xiLfPaqdoLYlS1qQXCrF8rhHOiwUoVpJxbJSgitfystgbqzc",
	"vYLwNEFKuSCyymXBsEZPmoKG5qqFoCA2schzKokCpB0IncY+ER2PnNLeqWgrzEDU2pvS3m/+le2DYfxN",
	"Ji1cdIb26gGvdKZd5iyHIWzchxcIB3PAdHWJad485xugG6ZSR35OjKrZlLgW3brk7uBTxciKa42gBFq6",
	"4WUJUfR8E1nXg3NKGrUDYu8FuM6uOfhXtTMqoDRc2TsvpJmIecBlnAOKmKWS9WIZJfUOcPonr6rdgzge",
	"5WddgwscxL7ZKZ6SldTGvTRxpGbJjVvh/VwKo2RZtpVSKKIvnAXyR7o5z3PzUsrrGc2vH8C7VkgTVlpM",
	"fbB51wG0mUl10rm1L+AMS8jvT4+M7cAd0hHtaAbZYXEHF9OPwHy/n4Pu17mf9xfWXVebmaafMeeCUCNX",
	"PE+fqT+XR+WgH2SKRSUTuGE9S0y5Ac3gsMeXVXCgARbZRzMTNFmQ75w4RuAcCYDd2P+CBN4dl8yZYzQD",
	"F2WfuTgpKssHZb0OAAApBm2bWmERzFgSC1xFLjBzArhBdAEdeauAt9ndYLMjHB0ow+4EVM/DNQB4H5UP",
	"U0y0h96yM7nx3x80mfhuBfzH3VTeYh5DbnyXDWkpdOTzWXsGOEI6rfhOn7crCNifjfV8CwWLR97wEQDD",
	"vnAtGEZ5xB0KxpzykhVZqt7lRdBRTaOXtgu/65ah59px8pzWvtykHbtWzGWRQRFfte1fFbWkJEPzviZZ",
	"FGzDMHbnd6Yk1pGcRvYXVmKZyY4yQFZZydas5SLoUtvUIGryNfN9dehMCsYqsEZ2dWQp37f4Lu8oTtza",
	"s8h7agx2k5oURCzuFNmjJkkqdTYiw2Oixx4lC9GaFzVt4U8fKnK01YD2KCdQ1XsjZP4dOXaan3GEN36A",
	"c98/Jcp4TLwfx4cOZkFp1O1iQHt9YWs9dOpF2hU2ztsUDCwwWxEMsUjiDd/QFb0RwwrJPsk3z62R+8Sl",
	"iBD7zYblINW49w4r3ItnwEjh8rUAtQvGCnwV2C4JbfuSCSJkVNbzhurwVGkSSvofcGJoxIV7Td/CqNx4",
	"rN59ZwkMRnQns9zgQ0IFOr29ev6znMSdB3FwvBSNaOZCPHfovzx1u2cHNIDy6cLup5X9oTCmu8UcF5+S",
	"We0HKkt5g3U643foC+btoEh93gTkxHIermXvmTt1uU67qg4exSSs6JZIBf/YV+ffa1ry+Rb4DILvuxG9",
	"pJaEnOEVPQKcp6+deLd4NfWAeW2L9FPhuvnYMaPhtnaUCGh7kfuCSpKs6DWLtwGcHZB/5sYyTl3PQHNh",
	"r+zOdvax4Bbvk8usaBG/9CFrZrt0vc+jbHv/rybeMZ7KJ7urSpr7qqyuLFSbz0DlZU9cZslWuwNi+3zN",
	"k0Co5twQrfIZFIpbqEwPZF2pKJOhkjctsHtVbnvVfu60jJGa305dkx2hxKOWcuxdGOt10wM6ro25D/y4",
	"VOinwX8yoe3QMsaA/4+C94HiwDG8WAf4E2C5lWUlAStqq2dykyk21/scTFBdbZ/zqsnP4lWsXOSKUY0e",
	"Nxev3MOzydfKhX0Io09osGmGUQo256JhllxUtUm8YyBtq9hGCIuV/oDWARPakJRghck1LV+tmVK8GNo4",
	"ezqwjGZclsMbOlzfhAoj3Kn9Abhu3nAQg9uo0eNm9gLHwl/orqkNFQVVRdycC5IzZe99ckO3+vYWpWAc",
	"2GdTopE0084MEVmXgLQRkHLrjMJ3tPcEAOkRDT8jDDbgF5ww1qBqx8gB+0wfhj+FwWZFN1kpFxApOnAg",
	"XKJesPDhE1AKUIOjfDZu3X4ezX9nu6eBGgWOERkJs46ZYve5fwVbCc/InwU3O08+6ii7obvod4sH0yNV",
	"LBrnfySW/nlMRVu7BDtxxLUXNn2GCk97LNpENmAfauvFB3YR3CBcqH6sBB9fYq7taZGK6UbNQAYaA73D",
	"vZ/pxpWd5s49q69K66kaEClTFxF/oKYN9fP+XhoAD1Qh2p319rTBZcaOc0hdvt0x8Fklqywf4/OJZUwK",
	"ZyZwkLZhHKCPyAgwsO7gHqNDYZ9WbqtWhZ9DSxMOVhjaZ+2q8l2P/iE10QBHb5sg5Bx4GVbLB+0WRPIE",
	"ZcrUP6+9TbqtBgtMglCiWF4rUBPf0O3+Um8Dua4vvz//4tHjXx9/8SWxDUjBF0w3Kdg7pdIav0Auunqf",
	"T+sJ2FueSW+CzzCBiPP2Rx9UFTbFnTXktrpJhtorFHeIfjlxAaSCPvu1s261VzBO49r/j7VdqUUefcdS",
	"KPjj90zJskyXwAhyVcKAktqtyIRiXyAVU5prYxlh2wLKTeMRrZegHoSsxWvMGCRFzrz+2FEBNwMuV6mF",
	"DDnUAj+D+H1nNSJsU5WOV6GlZ9e63DsNNXQgNIJXzIyRSlZOtOdzkoIIIohUzYJm3Ck+QSMe+cgGZove",
	"silCdJ7nadKLi5Tv5vbtAromzentJibEC38ob0GaQ/aJ4dwUt+EkjWr/H4Z/JJJtHI1rhOX+Ebwi+T7Y",
	"EXN83vN7CIkmRoHWT7yQIA8AYCDathUnGQWKRSmUFVoJwJ7gDchd8ePHxrC8NywEIPEd9oAXh8827UIk",
	"gwPnM6cm/jEgJVrK+yFKaC1/X0SuZ73hIom2yClNjGEa2ZLsi4VRuLV+HqKYB14lvWBnJaUh9mValokg",
	"adTjwJmKCcc+CdSalp+ea3zLlTbngA9WvBkOjYojZWMkIyr17XIxvqSj5o6iYo83tXgNgdn/weweJe85",
	"N5QzwvduM1Du0BLdq+fBGs0EuYEx0cnq0Zdk5sqEVIrlXHeN+zdeOAmBoUzxuXNoZRuzJxJ13zp/keYO",
	"ZDz3njjkp8i8FWz2DsLmiH5mpjJwcpNUnqK+Hlkk8JfiUXFB5D3XxR1LStwutU+UpO/A1D79Us9jlwfr",
	"gEun1qy/ztG3dQu3iYu6WdvYvFSjK1O8e/fWzMakk0pXkbDdIZ/VUcpJHFRM4g/IZIU4cmO4eVMU88tQ",
	"bmPM3zuQf72zHzUv9zqstLLpf5xOFpjMBvLF/+qq3nzau9RDMJBRyi39LuliEDGJtbYmj6aKkv+MSJHv",
	"uiXymkNUY14rbrZQRNkr0PivybLX34XcHi43TLClubvPyGsW6uU3mUBq7W/X7yQt4T5CE5+wt5AsT8g3",
	"mMXdHZS/3pv9K3vyl6fF2ZNH/zr7y9kXZzl7+sVXZ2f0q6f00VdPHrHHf/ni6Rl7NP/yq9nj4vHTx7On",
	"j59++cVX+ZOnj2ZPv/zqX+9ZPmRBRkB9+YZnk/+TnZcLmZ2/vsiuLLANTmjFf2B2b+CtPIcUVoDUHE4i",
	"W1FeTp75n/63P2EnuVw1w/tfJ66y1GRpTKWfnZ7e3NycxF1OFxD6nxlZ58tTPw9kO2vJK68vgo8++uHA",
	"jjbaY9jUkAfKfnvzzeUVOX99cTKJiuRPzk7OTh65Ot+CVnzybPIEfoLTs4R9P4UcqqfalUc4bWK1kna7",
	"N+Cy7oVztWAFuR+ibv4lWG71Ax+8M3d5yv6mkRjDKi4KIC5XsHUC9eLAGQvAenx25vfCSTrRhXMK0R/P",
	"Pkx0KALeFSZ6SL1qAE5C1hTA7C/6Z3Et5I0gkPARD1C9WlG1xRW0sBENDttEFxqU7IqvIYOX7d3FeVW5",
	"ohRDKIf6XO1T7jsDgYSqBvaEYbEDV1pCp1DeL4hxR+zvTADamyyxO9DotYXZp88JSTOdQcjhDGzGiLBw",
	"RlDt0EP0dFLVCXR+A4E1ehfOplGhBYRGlkXAeA+jr+v/Jhi1pLsICSLtX0tGS0isZf9YWULN/SfFaLF1",
	"/9c3dLFg6sSt0/60fnzqXyGnH1zGlI+7vp3GHmGnH1qJZYo9Pb3H074mpx98/fDdA7ZqRztf06jDSEB3",
	"NTudQYGvsU1ZvLrhpQDN69MP8AAf/P3UaVHTH0ERgjfsqU/QNNASU3GkP7ZQ+MFs7EJ2D2fbROPl1OTL",
	"ujr9AP8Bsv2Ip71kqUxOWIaFkqb5lHBD6EwqKEdt8qXlBr5oLddRy96RP7e9niMEcJt696LJs7f9+C8Y",
	"iPiRQESx928jQbRmaoREMKdETCGIwK32jSD89iz76v2HR9NHZx//yQq67s8vnnwc6T3/PIxLLoMUO7Lh",
	"+ztyvJ7OplkkblJgYP1HhqOF4fget1WdgUhAxp7KlJ3hE+k7bZenR+Tx7dzSCf7+NS2IT5MAcz/6dHNf",
	"CPQRt4IqCtQfp5MvPuXqL4QleVp6keyWwts5Hv6YKRC32SnhbToRUkTJFMUCxQyZSlUxwG+0obfgN5e2",
	"1//wm1bDnpUP4vBQ2+oq3Ud+PXiZhHqFzGeY9bEFtFhTkftgrCY6AvYLJW9HGMEBt9ZsXpc+DUlV8vkW",
	"7RCy9BPpuqosx5lTHSjLhWTYBzNmUQhDk1rkUqDrFES/eAMwZEMAI7K+5lWrC59bqnKl7TES68Rv+t9r",
	"prbNrq+4ffn23kyNc98fycIRj0dg4e2BjszCHx/IRv/8K/7vfWk9PfvLp4PAJy+64isma/NnvTQv8Qa7",
	"06XpZHissXJqNuIU3LtPP7SeK+5z77nS/r3pHreA8gH+CSHncw2qlV2fTz/gv9FEbFMxxVdMGMh5637F",
	"m+MUytlv+z9vRZ78sb+OVl7mgZ9PvUY19Uput/zQ+rP98tPL2hTyBqsAJOUVuD5pSVZU0AUG8QclpL0H",
	"3QBNymjyqgoXlYvdJRRKLMraNFpiDGVxAf3Bjg83WvDmWnABE4BBFmahc9uVRhe4q3La1yFeOsh+kgXr",
	"y0api9DB2LoMw1FI1RN9fxztZMR4Px52UMBwjF4PfTKyH2vd/fv0hnJjJSiXuxkw2u9sGC1PXTG+zq9N",
	"/ZveFyjqE/0YZyVI/npK2+eirUGxWzbUsadeSX11GoSBRj6Yxn9ujDexMQTIJZhB3r63u66ZWntKanT7",
	"z05PIbpyKbU5BUm0rfePP74PG+2rrocNt982mVR8wQUtM6ckayqKTh6fnE0+/v8AAAD//wtqGsd0EQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
