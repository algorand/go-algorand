// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XkX/1G7TAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
