// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
