// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
