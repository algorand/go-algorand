// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
