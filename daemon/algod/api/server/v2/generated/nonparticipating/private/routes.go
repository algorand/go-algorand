// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"VBSdPD45m3z8/wEAAP//703xCbERAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
