// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
