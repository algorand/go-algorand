// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"uAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
