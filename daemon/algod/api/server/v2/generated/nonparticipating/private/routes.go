// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"RSX8+LHeTJ+Tst7U64/X/xMAAP//sENPbgTNAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
