// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
