// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
