// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"fwAAAP//jcRXgN3FAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
