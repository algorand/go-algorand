// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
