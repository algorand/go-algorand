// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

<<<<<<< HEAD
	"H4sIAAAAAAAC/+x9+3PcNtLgv4Ka/aoc+4Yz8iu7VlXqO8V2srp1HJelzd59ti/BkD0zWJEAA4DSTHz6",
	"36/QAEiQBDnUY50vVfuTrSEejUaj0W98nqWiKAUHrtXs+POspJIWoEHiXzRNRcV1wjLzVwYqlazUTPDZ",
	"sf9GlJaMb2bzGTO/llRvZ/MZpwU0bUz/+UzCrxWTkM2OtaxgPlPpFgpqBtb70rSuR9olG5G4IU7sEKev",
	"ZtcjH2iWSVCqD+WPPN8TxtO8yoBoSbmiqfmkyBXTW6K3TBHXmTBOBAci1kRvW43JmkGeqYVf5K8VyH2w",
	"Sjf58JKuGxATKXLow/lSFCvGwUMFNVD1hhAtSAZrbLSlmpgZDKy+oRZEAZXplqyFPACqBSKEF3hVzI4/",
	"zBTwDCTuVgrsEv+7lgC/QaKp3ICefZrHFrfWIBPNisjSTh32Jagq14pgW1zjhl0CJ6bXgvxQKU1WQCgn",
	"7797SZ4+ffrCLKSgWkPmiGxwVc3s4Zps99nxLKMa/Oc+rdF8IyTlWVK3f//dS5z/zC1waiuqFMQPy4n5",
	"Qk5fDS3Ad4yQEOMaNrgPLeo3PSKHovl5BWshYeKe2Mb3uinh/L/rrqRUp9tSMK4j+0LwK7Gfozws6D7G",
	"w2oAWu1LgylpBv1wlLz49Pnx/PHR9Z8+nCT/5f58/vR64vJf1uMewEC0YVpJCTzdJxsJFE/LlvI+Pt47",
	"elBbUeUZ2dJL3HxaIKt3fYnpa1nnJc0rQycsleIk3whFqCOjDNa0yjXxE5OK54ZNmdEctROmSCnFJcsg",
	"mxvue7Vl6ZakVNkhsB25YnluaLBSkA3RWnx1I4fpOkSJgetW+MAF/fdFRrOuA5iAHXKDJM2FgkSLA9eT",
	"v3Eoz0h4oTR3lbrZZUXOt0BwcvPBXraIO25oOs/3ROO+ZoQqQom/muaErcleVOQKNydnF9jfrcZgrSAG",
	"abg5rXvUHN4h9PWQEUHeSogcKEfk+XPXRxlfs00lQZGrLeitu/MkqFJwBUSs/gmpNtv+v85+fEuEJD+A",
	"UnQD72h6QYCnIhveYzdp7Ab/pxJmwwu1KWl6Eb+uc1awCMg/0B0rqoLwqliBNPvl7wctiARdST4EkB3x",
	"AJ0VdNef9FxWPMXNbaZtCWqGlJgqc7pfkNM1Kejum6O5A0cRmuekBJ4xviF6xweFNDP3YfASKSqeTZBh",
	"tNmw4NZUJaRszSAj9SgjkLhpDsHD+M3gaSSrABw/yCA49SwHwOGwi9CMObrmCynpBgKSWZC/O86FX7W4",
	"AF4zOLLa46dSwiUTlao7DcCIU4+L11xoSEoJaxahsTOHDsM9bBvHXgsn4KSCa8o4ZIbzItBCg+VEgzAF",
	"E44rM/0rekUVfP1s6AJvvk7c/bXo7vrojk/abWyU2CMZuRfNV3dg42JTq/8E5S+cW7FNYn/ubSTbnJur",
	"ZM1yvGb+afbPo6FSyARaiPAXj2IbTnUl4fgjf2T+Igk505RnVGbml8L+9EOVa3bGNuan3P70RmxYesY2",
	"A8isYY1qU9itsP+Y8eLsWO+iSsMbIS6qMlxQ2tJKV3ty+mpok+2YNyXMk1qVDbWK853XNG7aQ+/qjRwA",
	"chB3JTUNL2AvwUBL0zX+s1sjPdG1/M38U5a56a3LdQy1ho7dfYu2AWczOCnLnKXUIPG9+2y+GiYAVkug",
	"TYslXqjHnwMQSylKkJrZQWlZJrlIaZ4oTTWO9B8S1rPj2Z+WjXFlaburZTD5G9PrDDsZedTKOAktyxuM",
	"8c7INWqEWRgGjZ+QTVi2hxIR43YTDSkxw4JzuKRcLxp9pMUP6gP8wc3U4NuKMhbfHf1qEOHENlyBsuKt",
	"bfhAkQD1BNFKEK0obW5ysap/+OqkLBsM4veTsrT4QNEQGEpdsGNKq4e4fNqcpHCe01cL8n04NsrZgud7",
	"czlYUcPcDWt3a7lbrDYcuTU0Iz5QBLdTyIXZGo8GI8PfB8WhzrAVuZF6DtKKafxX1zYkM/P7pM5/DBIL",
	"cTtMXKhFOcxZBQZ/CTSXrzqU0yccZ8tZkJNu39uRjRklTjC3opXR/bTjjuCxRuGVpKUF0H2xdynjqIHZ",
	"RhbWO3LTiYwuCnNwhgNaQ6hufdYOnocoJEgKHRi+zUV68Veqtvdw5ld+rP7xw2nIFmgGkmyp2i5mMSkj",
	"PF7NaFOOmGmI2jtZBVMt6iXe1/IOLC2jmgZLc/DGxRKLeuyHTA9kRHf5Ef9Dc2I+m7NtWL8ddkHOkYEp",
	"e5ydByEzqrxVEOxMpgGaGAQprPZOjNZ9IyhfNpPH92nSHr22BgO3Q24RuENid+/H4Fuxi8Hwrdj1joDY",
	"gboP+jDjoBipoVAT4HvlIBO4/w59VEq67yMZx56CZLNAI7oqPA08vPHNLI3l9WQl5O24T4etcNLYkwk1",
	"owbMd95BEjatysSRYsQmZRt0BmpceONMozt8DGMtLJxp+i/AgjKj3gcW2gPdNxZEUbIc7oH0t1Gmv6IK",
	"nj4hZ389ef74yc9Pnn9tSLKUYiNpQVZ7DYp85XQzovQ+h4f9laF2VOU6PvrXz7wVsj1ubBwlKplCQcv+",
	"UNa6aUUg24yYdn2stdGMq64BnHI4z8Fwcot2Yg33BrRXTBkJq1jdy2YMISxrZsmIgySDg8R00+U10+zD",
	"Jcq9rO5DlQUphYzY1/CIaZGKPLkEqZiIuEreuRbEtfDibdn93UJLrqgiZm40/VYcBYoIZekdn8737dDn",
	"O97gZpTz2/VGVufmnbIvbeR7S6IiJchE7zjJYFVtWprQWoqCUJJhR7yj37DNVgciyzspxPreb+3oLLEl",
	"4Qcr8OWmT1/seysyMGp3pe6BvTeDNdgzlBPijK5EpQklXGSAOnql4ox/wNGLHiZ0jOnwLtFbK8OtwOiD",
	"Ka3MaquSoNunR4tNx4SmlooSRI0asIvXDg3byk5nnYi5BJoZPRE4EStnfHZmcVwkRZ+V9qzTXTsRzbkF",
	"VylFCkoZ/d5qbQdB8+0sWeoRPCHgCHA9C1GCrKm8JbBaaJofABTbxMCtRXJnse9DPW36sQ3sTh5uI5VG",
	"xbdUYOR/c+By0DCEwok4uQSJlut/6f75SW67fVU5EFfiRKtzVqClgFMuFKSCZyo6WE6VTg4dW9OoJf+Z",
	"FQQnJXZSceABa9UbqrT1XzCeodpl2Q3OY81YZophgAevQDPyT/7264+dGj7JVaXqq1BVZSmkhiy2Bg67",
	"kbnewq6eS6yDsev7VgtSKTg08hCWgvEdsuxKLIKors18zsHXXxwaw8w9sI+isgVEg4gxQM58qwC7oW99",
	"ABCjo9c9kXCY6lBO7dCfz5QWZWnOn04qXvcbQtOZbX2i/9607RMX1Q1fzwSY2bWHyUF+ZTFroyq21Ajt",
	"ODIp6IW5m1AEt46WPszmMCaK8RSSMco3x/LMtAqPwMFDWpUbSTNIaFlKcRk59H+3DYhvEIPQD5JBTvfD",
	"Q9jPY1BwMdybC3IpWhpKZAAjMwg1sgzfIHJw/Bh6K0FtRZ4Nj9I0OWjrbrHUFu/qMJwOT4ge5MGDdYCy",
	"h4hoQL19R6VmKStROvsb7O9dWO1OEDW6kgw0ZUblCj5YwbUM+xPrjeyOeTvhdZIm0ge/p4pElpMzhZdw",
	"G/gL2KP35Z0NczkPgmPuQfqOjGo4JuUEAfXOcyPkhE1gR1Od743ooLewJ1cggahqVTCtbdxSWzjXokzC",
	"AaJWnpEZnUnThoj4HZhiYz3DoYLl9bdiPrOi4Dh85x1hsIUOJ4SWQuQTvFs9ZEQhmOT9IqUwu85cmJyP",
	"pfKU1ALSCYZoz64vpAeqhWZcAfk/oiIp5SjUVhrqW1ZIvLpQpDEzGKGgntP5uRoMQQ4FWFkdvzx61F34",
	"o0duz5kia7jysaWmYRcdjx6h5vlOKN06XPdg9jDH7TTCy9H8ZS5fJxd3ecphP4sbecpOvusMXtvMzJlS",
	"yhGuWf6dGUDnZO6mrD2kkWk+Jhx3kmUrGDq2btx3dPL/a+wizdAx6PoTB67R5uOQd9TIrPn+Hvi0HYhI",
	"KCUoPFWhrqfsV7EOw4/dsVN7paHom0ts158HhMX3XizoSVKC54xDUggO+2jGDePwA36M9bYne6Az8tih",
	"vl2xqQV/B6z2PFOo8K74xd0OSPldHRZwD5vfHbdjKQsDr1HTh7wklKQ5QzuA4ErLKtUfOUVNIzjLEfeJ",
	"15+Gdc+Xvklc2Y3oom6oj5yi66zWP6Im3zVEpPPvALwKqqrNBpTuyAdrgI/ctWKcVJxpnKsw+5XYDStB",
	"og9jYVsWdE/WNEdV+TeQgqwq3b4xMT5UaaPJWrOdmYaI9UdONcnBaPU/MH6+w+F8GKanGQ76SsiLGguL",
	"6HnYAAfFVBJ383xvv6IH3i1/67zxmKxjP1vDlBm/CSLda2gloPzfr/7z+MNJ8l80+e0oefE/lp8+P7t+",
	"+Kj345Prb775f+2fnl5/8/A//yO2Ux72WPSig/z0lZMmT1+hyNAY7HqwfzErTsF4EiWy8y2QgnEMgu/Q",
	"FvnKCD6egB42pj+36x+53nFDSJc0ZxnVtyOHLovrnUV7OjpU09qIjgLp1/opFpGwEUlJ0wv0ks42TG+r",
	"1SIVxdJL0cuNqCXqZUahEBy/ZUtasqUqIV1ePj5wpd+BX5EIu+ow2VsLBH0fazziGM3ALogYT9664pYo",
	"KuUMvxhQ531dYj2vo8ptNukxwZDjLfWOWvfnk+dfz+ZNqHD93Wjq9uunyJlg2S4WEJ7BLiapuaOGR+yB",
	"IiXdK9BxPoSwR9161hcUDluAEfHVlpVfnucozVZxXunDlJzGt+On3MYPmZOIJu+9s6SJ9ZeHW0uADEq9",
	"jWWZtWQObNXsJkDHTYVWNj4nbAGLrsaVbUB5B2MOdI3ZTmi2FVPCLutzYAnNU0WA9XAhk9SaGP2gmOz4",
	"/vV85sQIde+SvRs4Bld3ztq+7f/Wgjz4/vU5WTrWqx7Y3AQ7dBBNHrFkuIDJlgPTcDObW2uTMz7yj/wV",
	"rBln5vvxR55RTZcrqliqlpUC+S3NKU9hsRHk2MdgvqKafuQ9mW0w/T2IfiVltcpZSi5C2bohT5vS2B/h",
	"48cPhuN//Pip5w3rS8Juqih/sRMkV0xvRaUTl7OVSLiiMouAruqcHRzZZlyOzTonbmzLil1OmBs/zvNo",
	"Wapu7H5/+WWZm+UHZKhcZLrZMqK0kF6qMaKOhQb3961wF4OkVz7hr1KgyC8FLT8wrj+R5GN1dPQUSCuY",
	"/RcnPBia3JfQsnndKrega+/ChVsNCXZa0qSkG1DR5WugJe4+St4FWlfznGC3VhC9DxLCoZoFeHwMb4CF",
	"48YBwbi4M9vLJ9/Hl4CfcAuxjRE3GkfQbfcrCKu/9XZ1QvN7u1TpbWLOdnRVypC435k6J3djhCzvnVNs",
	"w80hcOnLKyDpFtILyDCTEopS7+et7t4B7ERWzzqYshnHNigW0+LQPLgCUpUZdUI95ftufpICrX1S1nu4",
	"gP25aLLqbpKQ1M6PUUMHFSk1kC4NsYbH1o3R3XwXTIA5AWXp00ww3tiTxXFNF77P8EG2Iu89HOIYUbTy",
	"N4YQQWUEEZb4B1Bwi4Wa8e5E+rHlGX1lZW++SIKy5/3ENWnUMBcQEK4G01Ls9wKwfIG4UmRFjdwuXOa9",
	"zQEJuFil6AYGJOTQQjsx06Jl1cVBDt170ZtOrLsXWu++iYJsGydmzVFKAfPFkAoqM50wED+TdQLgChYE",
	"C+o4hK1yFJPqCBTLdKhsWcpthZAh0OIEDJI3AocHo42RULLZUuWLAmDtBH+WJ8kA/8KcprFM1tMggiEo",
	"kFDnqXqe2z2nPe3S5bP6JFafuRqqlhOyUI2Ej0F1se0QHAWgDHLY2IXbxp5QmvyqZoMMHD+u1znjQJJY",
	"MARVSqTMVnVorhk3Bxj5+BEh1phMJo8QI+MAbHRu4cDkrQjPJt/cBEju8sOoHxvdYsHfEA9lteFuRuQR",
	"pWHhjA8EKnoOQF0ETX1/deK4cBjC+JwYNndJc8PmnMbXDNJLqESxtZM+6dyrD4fE2RFbvr1YbrQmexXd",
	"ZjWhzOSBjgt0IxCvxC6xsexRiXe1Wxl6j0YAYmR97GDa1NUHiqzEDl32eLVgTRh1AJZhODwYgYa/Ywrp",
	"FfsN3eYWmLFpx6WpGBUqJBlnzqvJZUicmDL1gAQzRC5fBdmotwKgY+xo6rY55fegktoWT/qXeXOrzZsq",
	"Cz5YOXb8h45QdJcG8Ne3wtT5o++6EkvUTtH2PLdTZwMRMkb0hk303T19p5KCHFApSFpCVHIRcwIa3Qbw",
	"xjnz3QLjBSboUr5/GIQzSNgwpaExx5uL2fuXvrR5kmJdECHWw6vTpVyb9b0Xor6mbOI5dmwt84uv4FJo",
	"SNZMKp2gLyO6BNPoO4VK9XemaVxWagdM2BJZLIvzBpz2AvZJxvIqTq9u3r+9MtO+rVmiqlbIbxknQNMt",
	"WWFJt2gY1cjUNtJudMFv7ILf0Htb77TTYJqaiaUhl/Ycf5Bz0eG8Y+wgQoAx4ujv2iBKRxgkyj6vINex",
	"rMNAbrKHMzMNF2PW195hyvzYBwNQLBTDd5QdKbqWwGAwugqGbiIjljAdVETrZ9IMnAFalizbdWyhdtRB",
	"jZneyODhS010sIC76wY7gIHA7hkL1pag2lVFGgHf1rZrJfUuJmHmvF37I2QI4VRM+cqsfUQZ0kZR8RCu",
	"zoHmf4P9T6YtLmd2PZ/dzXQaw7Ub8QCu39XbG8UzOvmtKa3lCbkhym1YOc0TZ2AeIk0pLh1pYnNvj/7C",
	"rC5uxjx/ffLmnQP/ej5Lc6AyqUWFwVVhu/IPsypbwGTggPjKj0bn8zK7FSWDza+rLoRG6astuCp7gTTa",
	"KwfUOByCo+iM1Ot4rNFBk7PzjdgljvhIoKxdJI35znpI2l4ReklZ7u1mHtqBuCBc3LSaUlGuEA5wZ+9K",
	"4CRL7pXd9E53/HQ01HWAJ4VzjdQBLGypS0UE77rQjQiJ5jgk1YJiMR9rFekzJ14VaElIVM7SuI2Vr5Qh",
	"Dm59Z6YxwcYDwqgZsWIDrlhesWAs00xNUHQ7QAZzRJHpC0MN4W4lXI3yirNfKyAsA67NJ4mnsnNQsXqS",
	"s7b3r1MjO/TncgNbC30z/F1kjLCQVffGQyDGBYzQU9cD91WtMvuF1hYp80PgkriBwz+csXcljjjrHX04",
	"arZhkNu2xy0sKd7nf4YwbPnJw/XMvfLqKmoNzBGtT85UspbiN4jreageR7IOfOkuhlEuvwFfRNLNuiym",
	"tu40Zdab2Qe3e0i6Ca1Q7SCFAarHnQ/cclhDyFuoKbdbbcsFt2Ld4gQTxqcu7fgNwTiYezG9Ob1a0ViB",
	"JSNkGJhOGgdwy5auBfGdPe6d2Z+5amoLEviS67bM5jiWIJuEoH4+/S0FBjvtZFGhkQyQakOZYG79f7kS",
	"kWEqfkW5rTpt+tmj5HorsMYv0+tKSMxQVnGzfwYpK2gelxyytG/izdiG2ZrLlYKgqK8byBart1TkCiNb",
	"F3uDmtM1OZoHZcPdbmTskim2ygFbPLYtVlQhJ68NUXUXszzgequw+ZMJzbcVzyRkeqssYpUgtVCH6k3t",
	"vFqBvgLg5AjbPX5BvkK3nWKX8NBg0d3Ps+PHL9Doav84il0Arrj6GDfJkJ38w7GTOB2j39KOYRi3G3UR",
	"zWa1L2IMM66R02S7TjlL2NLxusNnqaCcbiAeKVIcgMn2xd1EQ1oHLzyz5dyVlmJPmI7PD5oa/jQQx27Y",
	"nwWDpKIomC6cc0eJwtBTU7HXTuqHs7XhXbE1D5f/iD7S0ruIOkrklzWa2vsttmr0ZL+lBbTROifUpqXn",
	"rIle8CUgyakvboHV5+qicxY3Zi6zdBRzMJhhTUrJuEbFotLr5C8k3VJJU8P+FkPgJquvn0Uq7rUrP/Gb",
	"Af7F8S5BgbyMo14OkL2XIVxf8hUXPCkMR8keNnkjwakcdObG3XZDvsPxoacKZWaUZJDcqha50YBT34nw",
	"+MiAdyTFej03oscbr+yLU2Yl4+RBK7NDf3//xkkZhZCxUkfNcXcShwQtGVxi7F58k8yYd9wLmU/ahbtA",
	"//t6HrzIGYhl/izHFIFvRUQ79VUga0u6i1WPWAeGjqn5YMhg5Yaak3bFvS/v9PPG577zyXzxsOIfXWB/",
	"5y1FJPsVDGxiUA00up1Z/T3wf1PyrdhN3dTOCfEb+98ANVGUVCzPfmryOzvFViXl6Tbqz1qZjj83z0LU",
	"i7P3U7Ri1JZyDnl0OCsL/uxlxohU+08xdZ6C8Yltu/Vf7XI7i2sAb4PpgfITGvQynZsJQqy2E97qgOp8",
	"IzKC8zTliRru2a8bHFR3/LUCpWPJQ/jBBnWh3dLou7a4IAGeoba4IN/bZ922QFqVPlBLY0WV26oRkG1A",
	"OoN6VeaCZnNixjl/ffKG2FltH1vc3BY33KCS0l5Fx14V1DKbFh7s65THUxemjzMeS21WrTQW3lGaFmUs",
	"zdS0OPcNMJc1tOGj+hJiZ0FeWc1Reb3ETmLoYc1kYTSuejQruyBNmP9oTdMtqmQtljpM8tOrcnqqVMFL",
	"OHVF+7ocGZ47A7crzGnrcs6JMHrzFVP2NS+4hHZma53m7UwCPtO1vTxZcW4pJSp7jJUhuA3aPXA2UMOb",
	"+aOQdRB/Q4HcFrW9aZHSM+wVrUXTrXjaewLHZjfWlcr9K40p5YKzFCvBxK5m9zLYFB/YhKI5XSOrP+Lu",
	"hEYOV7TOah0m57A4WHnVM0KHuL4RPvhqNtVSh/1T4xNUW6rJBrRynA2yuS8X7OyAjCtw5eXwkbiATwrZ",
	"8isih4y6qpPapXFDMsK0mAHF7jvz7a1T+zFe/IJxFPAd2lxourXU4cNF2mgFTJONAOXW084NVh9MnwWm",
	"yWaw+7TwDx3hGNYtZ5ZtfdD9oU68R9p5gE3bl6atLYrS/NyKQLaTnpSlm3S4mHRUHtA7PojgiGcx8a6d",
	"ALn1+OFoI+Q2GkqC96khNLhERzSUeA/3CKMurNwp2m+EVktR2ILYEK5oLQTGI2C8YRyaZ7giF0QavRJw",
	"Y/C8DvRTqaTaioCTeNo50By9zzGGprRzPdx1qM4GI0pwjX6O4W1sakIPMI66QSO4Ub6vX/8y1B0IEy/x",
	"2UGHyH6FZ5SqnBCVYUZBp+ZzjHEYxu2ryrcvgP4x6MtEtruW1J6cm9xEQ0miqyrbgE5olsXqcn6LXwl+",
	"JVmFkgPsIK3qGnxlSVKsrtIuN9OnNjdRKriqipG5fIM7TpeKmBz9FidQPmWiGXxBkP0a1vvq9bv3r1+e",
	"nL9+Ze8LRVRls0SNzC2hMAxxQU650mBE50oB+SVE4y/Y75fOguNgBrXeI0Qb1pv3hIi5Mqs9/hurkzdM",
	"QC5W5MbRij4wBDveWLxvj9QTzs3RSxTbJNMxgVff3dHRTH2789j0v9cDmYtNG5AvXMFijBmHexRjw6/N",
	"/RYWeOgVf7Q3YF1/AWMDhX+hB7XbOnO4zTzxxu1Vg0SfVP0CyLidZPgtjzne0QMRwkHdDmrFAOvkHIoT",
	"TgfD2ql2CXaaklFOOZi0ZIOMbHqSfYg6auAdCiyycUXmc6/3NAG2pw7g2KMI9RFrfYD+5sNhSUmZ8+A3",
	"zKKPWRc4P2zVHDt0zQZ3F+HC0QcNi/EHFYZL6DRlc/AaKIViTcHa2EsLE8OlzvGxhKAEUH8sH6twCak2",
	"Qn3gg5UANykIZCYL3oX5dymdAfWjjipzFXTGyub0SxMfYDa9zJYgO8uWdV1MLxJzUkfaoP8fX2bZAHdP",
	"s7Rj1idHzq7XkGp2eSCT6B9GS22yVOZej7VPrAWJRayOxPRP399QvW4AGkv0GYUnKC13Z3CG8gguYP9A",
	"kRY1ROvMzj3Pu00NAsQAcgdXDT3mybaGN+dcZKqmDMSCjxxxtdKbak6DjyYEeXG3nMuTJKFhrtzIlJci",
	"prlPmst0vVEGKQYVDiUb9UtsDwtCr7CiuaofvKnftg+0GnLar/R25WogYN5XbWv21RBA+d98kqedJWcX",
	"ED7rgJb9Kyoz3yKqqnotOBm5j3oZQr48dBfodT0za+L8+jkhkdpBGM2Z5kIxvkmGQmLboXXhe6sYQIDX",
	"AdYuR7jWIN1zLmhCzoWCRAsfFzgGxxgq3Nugt0GCGqzXZ4EbrKLxvikTghVQKVbNoC44Ilyg0VupgU4G",
	"xTyG5xxD9kv73SdB+AqYEzRyR6/JwWocPsKTqR4SQ6pfE3dbHk6uuI3Wyzi3z3upWGUPblAZWo9LKbIq",
	"tRd0eDAaG8PUujkjrCSqMKb9VfZk/xyrSL0JUtUuYL+08ne6pbwp59U+1laEsmsIUsM7u32vBoG47pNv",
	"7AI29wLn76lUz2elEHkyYC4+7Rco6Z6BC5ZeQEbM3eFjowaK/JOv0EpZ+wOvtntfkKMsgUP2cEGIUcuL",
	"Uu+9a7Bda7czOX+gx+bf4axZZWsGOX1/8ZHHw/qwmo+8I3/zw4xzNQWG+d1xKjvIgfIXu4HiKJJeRZ68",
	"mPqKcMRZ132GoCEqC0VMSrllLvSk893X+SOkH9ThH9d+wlIJTQyWtKYjlJa8QacrvPzQWISmvQjgOxwA",
	"L1SKgzcBPDdy4PzOgVI/1EgJljJICa3lH9Kz/ePXNV8KtkhhZL1Zpi1cY53s7X0JjCjqZW2biOO5b8LA",
	"ugiCY62YvulDoSkRS86GhGPOpbyk+Zc3X2DBjBPEh3ssLL7QUP8NkWxRqW4XrfCGTpo70HXvb2r+Ds0t",
	"/wCzR1EbsBvK2VHrtxh8CUksjUZzkovmTRYcklzhmNZo/PhrsnKR1qWElCnWSUK58tUwa3UPi0M3b8iN",
	"65eH1vmT0HcgY6cgiJK8bSrraYH3QwNhc0R/Z6YycHKjVB6jvh5ZRPAX41FhyvOB6+KiZU22lUo70RxC",
	"wj1blQM39g2tyv1k7qnLw3XgpVMp6K9z8m3dwm3kom7WNtUl0kfuWPm1KZ6MeFVF0x1dKRYhWJKUIKjk",
	"l8e/EAlrfHNAkEePcIJHj+au6S9P2p/NcX70KP6S4JdyorSeW3fzxijmp6HoPxvhNhBo2tmPitnnDMcI",
	"oxU23Lz/gYGxP7vEgd/lBZKfrT21f1Rd7fabuG+7m4CIiay1NXkwVRAQPCEW2HVbRB/EV5BWkuk91jPw",
	"5jf2c7RO1Pe1xd55fOoMWHf3aXEBdUWMxr5fKX+7fi/sA/qFkanRea7xMbjXO1qUObiD8s2D1Z/h6V+e",
	"ZUdPH/959Zej50cpPHv+4uiIvnhGH794+hie/OX5syN4vP76xepJ9uTZk9WzJ8++fv4iffrs8erZ1y/+",
	"/MDwIQOyBXTms+dm/xuf6UlO3p0m5wbYBie0ZPUbkIaM/QsBNMWTCAVl+ezY//Q//QlbpKJohve/zlxy",
	"zmyrdamOl8urq6tF2GW5QYNeokWVbpd+nv7be+9O6wBrm/CNO2pjZw0p4KY6UjjBb+9fn52Tk3eni4Zg",
	"Zsezo8XR4jG+rFUCpyWbHc+e4k94era470tHbLPjz9fz2XILNEf/l/mjAC1Z6j+pK7rZgFy4pxLMT5dP",
	"ll6UWH52xszrsW/LsOro8nPL5psd6IlVCZeffbL9eOtWNruzdQcdJkIx1my5whyeqU1BBY2Hl2JfAl9+",
	"RhF58PelS2yIf0RVxZ6BpXeMxFu2sPRZ7wysnR7uEdnl5+al7GvLJHKIuUFsPgANHtaeE6YJXQmJWe46",
	"3Rq+4NNrmWo/rF4T+WlmiNv0elm/Gh5UFjv+0JPy7UDEj4ScwJB5c1BbMzW8WMsKwmJX9U3Tat/cNx+O",
	"khefPj+ePz66/pO5T9yfz59eT/RnvmweHT+rL4uJDT9hbipaZvH8Pjk6usP7byc8fAEdNyl4ZrBX7sE9",
	"KFwMae9uqzoDkRoZB3LoOsMPPBH87IYrHrUftaKHIs+5fEsz4lNkcO7HX27uU47eZMPXib23ruez519y",
	"9afckDzNCbYMiiJE3qfmF1xccd/SCBlVUVC598dYtZgCcZuNVxndKLQmSnZJUbbjgrcqvc8+oQU7Fl45",
	"wG+UprfgN2em17/5zZfiN7hJ98Fv2gPdM795csMz/8df8b857B+Nw55ZdncnDusEPpurubQP0zZyYPeR",
	"ktjPy8/tIrktyVZtK52JK5sWHGXlWAmO5q5sDJouazVIC+IHaELRyI8ujDffo72WZUAopkGKSjd6quns",
	"HYyNJ8GM0DxgtGEcJ0CTMM5i6yPRIMhDQSq4fe6jc204yN6KDPrXBl4Mv1Yg983N4GCczVt8w218pBrR",
	"ndlw/5hf34ws0HRt/S597aR+46P19/KKMm0uFxcThhjtd9ZA86VLmOv82gR/975gRHvwY/uJ/civy7qg",
	"X/RjV0WMfXUqkm/U2IBCmwrueW1N+fDJbB3Wg3Hk0JgIjpdLDKTYCqWXs+v55475IPz4qd4tXyig3rXr",
	"T9f/PwAA//+sp7Hhbq8AAA==",
=======
	"H4sIAAAAAAAC/+x9+5PbNtLgv4LSflV+nCjN+JFdT1Xqu4ntZOfiOC7PbPbus30JRLYk7JAAA4AjKb75",
	"36/QAEiQBCXOI86Xqv3JHhGPRqPR6Dc+T1JRlIID12py8nlSUkkL0CDxL5qmouI6YZn5KwOVSlZqJvjk",
	"xH8jSkvGV5PphJlfS6rXk+mE0wKaNqb/dCLh14pJyCYnWlYwnah0DQU1A+tdaVrXI22TlUjcEKd2iLNX",
	"k+s9H2iWSVCqD+WPPN8RxtO8yoBoSbmiqfmkyIbpNdFrpojrTBgnggMRS6LXrcZkySDP1Mwv8tcK5C5Y",
	"pZt8eEnXDYiJFDn04XwpigXj4KGCGqh6Q4gWJIMlNlpTTcwMBlbfUAuigMp0TZZCHgDVAhHCC7wqJicf",
	"Jgp4BhJ3KwV2hf9dSoDfINFUrkBPPk1ji1tqkIlmRWRpZw77ElSVa0WwLa5xxa6AE9NrRn6olCYLIJST",
	"99++JE+fPn1hFlJQrSFzRDa4qmb2cE22++RkklEN/nOf1mi+EpLyLKnbv//2Jc5/7hY4thVVCuKH5dR8",
	"IWevhhbgO0ZIiHENK9yHFvWbHpFD0fy8gKWQMHJPbON73ZRw/j90V1Kq03UpGNeRfSH4ldjPUR4WdN/H",
	"w2oAWu1LgylpBv1wlLz49Pl4enx0/ZcPp8l/uT+fP70eufyX9bgHMBBtmFZSAk93yUoCxdOypryPj/eO",
	"HtRaVHlG1vQKN58WyOpdX2L6WtZ5RfPK0AlLpTjNV0IR6sgogyWtck38xKTiuWFTZjRH7YQpUkpxxTLI",
	"pob7btYsXZOUKjsEtiMblueGBisF2RCtxVe35zBdhygxcN0KH7ig/77IaNZ1ABOwRW6QpLlQkGhx4Hry",
	"Nw7lGQkvlOauUje7rMjFGghObj7YyxZxxw1N5/mOaNzXjFBFKPFX05SwJdmJimxwc3J2if3dagzWCmKQ",
	"hpvTukfN4R1CXw8ZEeQthMiBckSeP3d9lPElW1USFNmsQa/dnSdBlYIrIGLxL0i12fb/df7jWyIk+QGU",
	"oit4R9NLAjwV2fAeu0ljN/i/lDAbXqhVSdPL+HWds4JFQP6BbllRFYRXxQKk2S9/P2hBJOhK8iGA7IgH",
	"6Kyg2/6kF7LiKW5uM21LUDOkxFSZ092MnC1JQbdfH00dOIrQPCcl8IzxFdFbPiikmbkPg5dIUfFshAyj",
	"zYYFt6YqIWVLBhmpR9kDiZvmEDyM3wyeRrIKwPGDDIJTz3IAHA7bCM2Yo2u+kJKuICCZGfmH41z4VYtL",
	"4DWDI4sdfiolXDFRqbrTAIw49X7xmgsNSSlhySI0du7QYbiHbePYa+EEnFRwTRmHzHBeBFposJxoEKZg",
	"wv3KTP+KXlAFXz0busCbryN3fym6u753x0ftNjZK7JGM3IvmqzuwcbGp1X+E8hfOrdgqsT/3NpKtLsxV",
	"smQ5XjP/Mvvn0VApZAItRPiLR7EVp7qScPKRPzZ/kYSca8ozKjPzS2F/+qHKNTtnK/NTbn96I1YsPWer",
	"AWTWsEa1KexW2H/MeHF2rLdRpeGNEJdVGS4obWmlix05ezW0yXbMmxLmaa3KhlrFxdZrGjftobf1Rg4A",
	"OYi7kpqGl7CTYKCl6RL/2S6RnuhS/mb+Kcvc9NblMoZaQ8fuvkXbgLMZnJZlzlJqkPjefTZfDRMAqyXQ",
	"psUcL9STzwGIpRQlSM3soLQsk1ykNE+UphpH+g8Jy8nJ5C/zxrgyt93VPJj8jel1jp2MPGplnISW5Q3G",
	"eGfkGrWHWRgGjZ+QTVi2hxIR43YTDSkxw4JzuKJczxp9pMUP6gP8wc3U4NuKMhbfHf1qEOHENlyAsuKt",
	"bfhAkQD1BNFKEK0oba5ysah/eHhalg0G8ftpWVp8oGgIDKUu2DKl1SNcPm1OUjjP2asZ+S4cG+VswfOd",
	"uRysqGHuhqW7tdwtVhuO3BqaER8ogtsp5MxsjUeDkeHvg+JQZ1iL3Eg9B2nFNP67axuSmfl9VOc/B4mF",
	"uB0mLtSiHOasAoO/BJrLww7l9AnH2XJm5LTb93ZkY0aJE8ytaGXvftpx9+CxRuFG0tIC6L7Yu5Rx1MBs",
	"IwvrHbnpSEYXhTk4wwGtIVS3PmsHz0MUEiSFDgzf5CK9/DtV63s48ws/Vv/44TRkDTQDSdZUrWeTmJQR",
	"Hq9mtDFHzDRE7Z0sgqlm9RLva3kHlpZRTYOlOXjjYolFPfZDpgcyorv8iP+hOTGfzdk2rN8OOyMXyMCU",
	"Pc7Og5AZVd4qCHYm0wBNDIIUVnsnRuu+EZQvm8nj+zRqj15bg4HbIbcI3CGxvfdj8I3YxmD4Rmx7R0Bs",
	"Qd0HfZhxUIzUUKgR8L1ykAncf4c+KiXd9ZGMY49BslmgEV0VngYe3vhmlsbyeroQ8nbcp8NWOGnsyYSa",
	"UQPmO+0gCZtWZeJIMWKTsg06AzUuvP1Mozt8DGMtLJxr+jtgQZlR7wML7YHuGwuiKFkO90D66yjTX1AF",
	"T5+Q87+fPj9+8vOT518ZkiylWElakMVOgyIPnW5GlN7l8Ki/MtSOqlzHR//qmbdCtseNjaNEJVMoaNkf",
	"ylo3rQhkmxHTro+1Nppx1TWAYw7nBRhObtFOrOHegPaKKSNhFYt72YwhhGXNLBlxkGRwkJhuurxmml24",
	"RLmT1X2osiClkBH7Gh4xLVKRJ1cgFRMRV8k714K4Fl68Lbu/W2jJhipi5kbTb8VRoIhQlt7y8XzfDn2x",
	"5Q1u9nJ+u97I6ty8Y/aljXxvSVSkBJnoLScZLKpVSxNaSlEQSjLsiHf0G7Za60BkeSeFWN77rR2dJbYk",
	"/GAFvtz06Yt9b0UGRu2u1D2w92awBnuGckKc0YWoNKGEiwxQR69UnPEPOHrRw4SOMR3eJXptZbgFGH0w",
	"pZVZbVUSdPv0aLHpmNDUUlGCqFEDdvHaoWFb2emsEzGXQDOjJwInYuGMz84sjouk6LPSnnW6ayeiObfg",
	"KqVIQSmj31ut7SBovp0lS70HTwg4AlzPQpQgSyrvDOzl1UE4L2GXoIdVkYff/6Qe/QHwaqFpfgCx2CaG",
	"3lqFcB6GPtTjpt9HcN3JQ7KjEojnfUZfMQwiBw1DKLwRTgb3rwtRbxfvjpYrkGjr/10p3k9yNwKqQf2d",
	"6f2u0FblQNyQE50vWIGWIE65UJAKnqnoYDlVOjnElk2jlnxvVhBwwhgnxoEHrJFvqNLWP8V4hmq1vU5w",
	"HmumNFMMAzwo4piRf/LSTX/s1NyDXFWqFnVUVZZCashia+Cw3TPXW9jWc4llMHYtT2lBKgWHRh7CUjC+",
	"Q5ZdiUUQ1bUZ1zlw+4tDY6e553dRVLaAaBCxD5Bz3yrAbhg7MQAIUw2iLeEw1aGcOmBjOlFalKXhFjqp",
	"eN1vCE3ntvWp/kfTtk9cVDf3dibAzK49TA7yjcWsjZpZU6OU4cikoJdG9kAVyzrS+jCbw5goxlNI9lG+",
	"OZbnplV4BA4c0gHt1sXlBbN1DkeHfqNEN0gEB3ZhaMEDqvY7KjVLWYmS4vewu3fBuTtB1ABMMtCUGfUv",
	"+GCF6DLsT6xntDvm7QTpUVpRH/yeWhRZTs4UXhht4C9hh56gdzbk5iII1LkHTSAyqjndlBME1DvyjQAT",
	"NoEtTXW+M9ecXsOObEACUdWiYFrbGKq2oqBFmYQDRC1Oe2Z05lUbruJ3YIy99xyHCpbX34rpxEpU++G7",
	"6IhVLXQ4SaoUIh/haeshIwrBKE8cKYXZdeZC9nxcl6ekFpBOiEHbes08H6gWmnEF5P+IiqSUo8Baaahv",
	"BCGRzeL1a2YwF1g9p/O5NRiCHAqwcjh+efy4u/DHj92eM0WWsPFxrqZhFx2PH6MW/E4o3Tpc92CCMcft",
	"LMLb0RRnLgonw3V5ymGfjxt5zE6+6wxe2+/MmVLKEa5Z/p0ZQOdkbsesPaSRcf4uHHeUlS0YOrZu3HcM",
	"OPh9bDTN0DHo+hMHbtrm45Cn1shX+e4e+LQdiEgoJSg8VaFeouxXsQxDod2xUzuloeibbmzXnwcEm/de",
	"LOhJmYLnjENSCA67aPYP4/ADfoz1tid7oDPy2KG+XbGpBX8HrPY8Y6jwrvjF3Q5I+V0donAPm98dt2O1",
	"C4PAUSuFvCSUpDlDnVVwpWWV6o+colQcnOWIK8fL+sN60kvfJK6YRfQmN9RHTtGNV8vKUfPzEiJa8LcA",
	"Xl1S1WoFSnfkgyXAR+5aMU4qzjTOVZj9SuyGlSDRnzKzLQu6I0uao1r3G0hBFpVu35gYq6q00bqsCdFM",
	"Q8TyI6ea5GA00B8Yv9jicD4k1NMMB70R8rLGwix6HlbAQTGVxF1O39mvGA3glr92kQGYOGQ/W6OTGb8J",
	"aN1paCXD/N+H/3ny4TT5L5r8dpS8+B/zT5+fXT963PvxyfXXX/+/9k9Pr79+9J//EdspD3ssktJBfvbK",
	"SZNnr1BkaKxOPdi/mMWhYDyJEtnFGkjBOAbkd2iLPDSCjyegR41Zz+36R6633BDSFc1ZRvXtyKHL4npn",
	"0Z6ODtW0NqKjQPq1fopFR6xEUtL0Ej22kxXT62oxS0Ux91L0fCVqiXqeUSgEx2/ZnJZsrkpI51fHB670",
	"O/ArEmFXHSZ7a4Gg7++NRz+jQdUFNOPJW1bcEkWlnFEXg/u8300sp3WEu81sPSEY/rym3mns/nzy/KvJ",
	"tAlbrr8bTd1+/RQ5EyzbxoLTM9jGJDV31PCIPVCkpDsFOs6HEPaoi9H6pcJhCzAivlqz8svzHKXZIs4r",
	"fciU0/i2/IzbWCZzEtE8u3NWH7H88nBrCZBBqdexjLeWzIGtmt0E6LjMSimugE8Jm8Gsq3FlK1De2ZkD",
	"XWLmFZoYxZgQ0PocWELzVBFgPVzIKLUmRj8oJju+fz2dODFC3btk7waOwdWds7bF+r+1IA++e31B5o71",
	"qgc2T8IOHUS2RywZLniz5Uw13Mzm+dpEkY/8I38FS8aZ+X7ykWdU0/mCKpaqeaVAfkNzylOYrQQ58fGg",
	"r6imH3lPZhtMxQ8icUlZLXKWkstQtm7I06ZX9kf4+PGD4fgfP37q+ZX6krCbKspf7ATJhum1qHTi8scS",
	"CRsqswjoqs4fwpFt9ue+WafEjW1ZsctPc+PHeR4tS9XNI+gvvyxzs/yADJWLkjdbRpQW0ks1RtSx0OD+",
	"vhXuYpB045MPKwWK/FLQ8gPj+hNJPlZHR0+BtALrf3HCg6HJXQktm9et8hy69i5cuNWQYKslTUq6AhVd",
	"vgZa4u6j5F2gdTXPCXZrBfT7gCUcqlmAx8fwBlg4bhycjIs7t718IYD4EvATbiG2MeJG47S47X4FIf63",
	"3q5OmkBvlyq9TszZjq5KGRL3O1PnB6+MkOU9SYqtuDkELpV6ASRdQ3oJGWZ1QlHq3bTV3TsrncjqWQdT",
	"NvvZBuhiih6aBxdAqjKjTqinfNfNlVKgtU8Qew+XsLsQTYbfTZKj2rk6auigIqUG0qUh1vDYujG6m+88",
	"4pifUJY+5QVjnz1ZnNR04fsMH2Qr8t7DIY4RRSuXZAgRVEYQYYl/AAW3WKgZ706kH1ue0VcW9uaLJEt7",
	"3k9ck0YNc87rcDWYImO/F4ClFMRGkQU1crtwVQBsPkrAxSpFVzAgIYcW2pFZHy2rLg5y6N6L3nRi2b3Q",
	"evdNFGTbODFrjlIKmC+GVFCZ6YQs+JmsEwBXMCNY3MchbJGjmFTHdlimQ2XLUm6rlQyBFidgkLwRODwY",
	"bYyEks2aKl+gAOs4+LM8Sgb4HfOr9mXVngXe9qBYQ50z63lu95z2tEuXW+sTan0WbahajsiINRI+BvjF",
	"tkNwFIAyyGFlF24be0Jpcr2aDTJw/Lhc5owDSWKOe6qUSJmtMNFcM24OMPLxY0KsMZmMHiFGxgHY6NzC",
	"gclbEZ5NvroJkNzlqlE/NrrFgr8hHlZrQ9mMyCNKw8IZHwia9ByAumiP+v7qxBzhMITxKTFs7ormhs05",
	"ja8ZpJfciWJrJ5XTuVcfDYmze2z59mK50ZrsVXSb1YQykwc6LtDtgXghtomNq49KvIvtwtB7NLoPo/xj",
	"B9Om0T5QZCG26LLHq8VGkx2AZRgOD0ag4W+ZQnrFfkO3uQVm37T7pakYFSokGWfOq8llSJwYM/WABDNE",
	"Lg+DzNhbAdAxdjQ15Jzye1BJbYsn/cu8udWmTcUHHzgdO/5DRyi6SwP461th6lzWd12JJWqnaHue22m8",
	"gQgZI3rDJvrunr5TSUEOqBQkLSEquYw5AY1uA3jjnPtugfECk4Up3z0KwhkkrJjS0JjjzcXs/Utf2jxJ",
	"sUaJEMvh1elSLs363gtRX1M2CR47tpb5xVdwJTQkSyaVTtCXEV2CafStQqX6W9M0Liu1AyZsuS6WxXkD",
	"TnsJuyRjeRWnVzfv96/MtG9rlqiqBfJbxgnQdE0WWF4uGka1Z2obabd3wW/sgt/Qe1vvuNNgmpqJpSGX",
	"9hx/knPR4bz72EGEAGPE0d+1QZTuYZAo+7yCXMcyIAO5yR7OzDSc7bO+9g5T5sc+GIBioRi+o+xI0bUE",
	"BoO9q2DoJjJiCdNBdbZ+Vs/AGaBlybJtxxZqRx3UmOmNDB6+7EUHC7i7brADGAjsnrHAYgmqXeGkEfBt",
	"nb1WgvFsFGYu2nVIQoYQTsWUrxLbR1SdeHAIVxdA8+9h95Npi8uZXE8ndzOdxnDtRjyA63f19kbxjE5+",
	"a0preUJuiHJallJc0TxxBuYh0pTiypEmNvf26C/M6uJmzIvXp2/eOfCvp5M0ByqTWlQYXBW2K/80q7LF",
	"VAYOiK9CaXQ+L7NbUTLY/LoCRGiU3qzBVfwLpNFeaaLG4RAcRWekXsZjjQ6anJ1vxC5xj48EytpF0pjv",
	"rIek7RWhV5Tl3m7moR2IC8LFjatvFeUK4QB39q4ETrLkXtlN73THT0dDXQd4UjjXnpqEhS27qYjgXRe6",
	"ESHRHIekWlAsLGStIn3mxKsCLQmJylkat7HyhTLEwa3vzDQm2HhAGDUjVmzAFcsrFoxlmqkRim4HyGCO",
	"KDJ9kaoh3C2Eq5decfZrBYRlwLX5JPFUdg4qVnJy1vb+dWpkh/5cbmBroW+Gv4uMERbV6t54CMR+ASP0",
	"1PXAfVWrzH6htUXK/BC4JG7g8A9n7F2Je5z1jj4cNdswyHXb4xaWN+/zP0MYthTm4drqXnl11b0G5ojW",
	"SmcqWUrxG8T1PFSPI1kHvowYwyiX34DPIslbXRZTW3eaku/N7IPbPSTdhFaodpDCANXjzgduOaxn5C3U",
	"lNuttqWLW7FucYIJ41PndvyGYBzMvZjenG4WNFbsyQgZBqbTxgHcsqVrQXxnj3tn9meustuMBL7kui2z",
	"+XglyCYhqJ/bf0uBwU47WlRoJAOk2lAmmFr/X65EZJiKbyi3FbBNP3uUXG8F1vhlem2ExGxaFTf7Z5Cy",
	"guZxySFL+ybejK2Yrf9cKQgKDLuBbOF8S0WuSLN1sTeoOVuSo2lQwtztRsaumGKLHLDFsW2xoAo5eW2I",
	"qruY5QHXa4XNn4xovq54JiHTa2URqwSphTpUb2rn1QL0BoCTI2x3/II8RLedYlfwyGDR3c+Tk+MXaHS1",
	"fxzFLgBX6H0fN8mQnfzTsZM4HaPf0o5hGLcbdRbNDbWvcwwzrj2nyXYdc5awpeN1h89SQTldQTxSpDgA",
	"k+2Lu4mGtA5eeGZLyystxY4wHZ8fNDX8aSCO3bA/CwZJRVEwXTjnjhKFoaemerCd1A9n69S7wm8eLv8R",
	"faSldxF1lMgvazS191ts1ejJfksLaKN1SqhNoc5ZE73gy1GSM1+hASvh1QXwLG7MXGbpKOZgMMOSlJJx",
	"jYpFpZfJ30i6ppKmhv3NhsBNFl89i1T/a1eh4jcD/IvjXYICeRVHvRwgey9DuL7kIRc8KQxHyR41eSPB",
	"qRx05sbddkO+w/1DjxXKzCjJILlVLXKjAae+E+HxPQPekRTr9dyIHm+8si9OmZWMkwetzA794/0bJ2UU",
	"QsbKLjXH3UkcErRkcIWxe/FNMmPecS9kPmoX7gL9H+t58CJnIJb5sxxTBL4REe3UV6SsLekuVj1iHRg6",
	"puaDIYOFG2pK2tX/vrzTzxuf+84n88XDin90gf2DtxSR7FcwsIlBZdLodmb198D/Tck3Yjt2UzsnxG/s",
	"fwPURFFSsTz7qcnv7BR+lZSn66g/a2E6/tw8UVEvzt5P0epGa8o55NHhrCz4s5cZI1Ltv8TYeQrGR7bt",
	"1qK1y+0srgG8DaYHyk9o0Mt0biYIsdpOeKsDqvOVyAjO05TSabhnv4ZxUGny1wqUjiUP4Qcb1IV2S6Pv",
	"2kKHBHiG2uKMfGefmFsDaVX6QC2NFVVuq0ZAtgLpDOpVmQuaTYkZ5+L16RtiZ7V9bKF1W2hxhUpKexUd",
	"e1VQJWxceLCvmR5PXRg/zv5YarNqpbHwjtK0KGNppqbFhW+AuayhDR/VlxA7M/LKao7K6yV2EkMPSyYL",
	"o3HVo1nZBWnC/Edrmq5RJWux1GGSH18h1FOlCl7lqavr16Wz8NwZuF2RUFsjdEqE0Zs3TNmXxeAK2pmt",
	"dZq3Mwn4TNf28mTFuaWUqOyxrwzBbdDugbOBGt7MH4Wsg/gbCuS2wO5NC6aeY69oLZpu9dXeczw2u7Gu",
	"mu5fjEwpF5ylWAkmdjW7V8rG+MBGFM3pGln9EXcnNHK4ojVf6zA5h8XBKrCeETrE9Y3wwVezqZY67J8a",
	"n8NaU01WoJXjbJBNfeliZwdkXIErhYYP1gV8UsiWXxE5ZNRVndQujRuSEabFDCh235pvb53aj/Hil4yj",
	"gO/Q5kLTraUOH1HSRitgmqwEKLeedm6w+mD6zDBNNoPtp5l/dAnHsG45s2zrg+4Pdeo90s4DbNq+NG1t",
	"UZTm51YEsp30tCzdpMOFraPygN7yQQRHPIuJd+0EyK3HD0fbQ257Q0nwPjWEBlfoiIYS7+EeYdRFnjsP",
	"CBih1VIUtiA2hCtaC4HxCBhvGIfmSbDIBZFGrwTcGDyvA/1UKqm2IuAonnYBNEfvc4yhKe1cD3cdqrPB",
	"iBJco59jeBub+tQDjKNu0AhulO/ql8gMdQfCxEt8AtEhsl9tGqUqJ0RlmFHQqT8dYxyGcfsK9+0LoH8M",
	"+jKR7a4ltSfnJjfRUJLoospWoBOaZbEakt/gV4JfSVah5ABbSKu6Bl9ZkhSrq7TLzfSpzU2UCq6qYs9c",
	"vsEdp0tFTI5+ixMonzLRDD4jyH4N6331+t371y9PL16/sveFIqqyWaJG5pZQGIY4I2dcaTCic6WA/BKi",
	"8Rfs90tnwXEwg7rzEaINa997QsRcmcUO/43VyRsmIBcrcuNoRR8Ygh1vLN63R+oJ5+boJYqtkvGYwKvv",
	"7uhopr7deWz63+uBzMWqDcgXrmCxjxmHexRjw6/N/RYWeOgVf7Q3YF1/AWMDhX8tCLXbOnO4zTzxxu1V",
	"g0SfVP0ayX47yfC7IlO8owcihIO6HdSKAdbJORQnnA6GtVPtEuw0JXs55WDSkg0ysulJ9lHsqIF3KLDI",
	"xhWZz73e4wTYnjqAY+9FqI9Y6wP0vQ+HJSVlzoPfMIs+Zl3g/LBVc9+haza4uwgXjj5oWIw/7jBcQqcp",
	"m4PXQCkUawrWxl59GBkudYEPNwQlgPpj+ViFK0i1EeoDH6wEuElBIDNZ8EbNv0vpDKgfdVSZq6Czr2xO",
	"vzTxAWbTy2wJsrNsWdfZ+CIxp3WkDfr/8ZWYFXD3TEw7Zn105OxyCalmVwcyif5ptNQmS2Xq9Vj73FuQ",
	"WMTqSEz/DP8N1esGoH2JPnvhCUrL3RmcoTyCS9g9UKRFDdE6s1PP825TgwAxgNwhMSQiVMyTbQ1vzrnI",
	"VE0ZiAUfOWK7Q1PNabDAf5AXd8u5PEkSGubK7ZnySsQ091Fzma43yiDFoMKhZKN+ie1hQegVVjRX9eM7",
	"9Tv7gVZDzvqV3jauBgLmfdW2Zl8NAZT/zSd52llydgnhEwRo2d9QmfkWUVXVa8HJnvuolyHky0N3gV7W",
	"M7Mmzq+fExKpHYTRnGkuFOOrZCgkth1aF779igEEeB1g7XKEawnSPdWCJuRcKEi08HGB++DYhwr3Tult",
	"kKAG6/VZ4AaraLxvyoRgBVSKVTOoC44IF2j0Vmqgk0Exj+E59yH7pf3ukyB8BcwRGrmj1+RgNQ4f4clU",
	"D4kh1S+Juy0PJ1fcRutlnNunxlSssgc3qAytx6UUWZXaCzo8GI2NYWzdnD2sJKowpv1V9mT/HKtIvQlS",
	"1S5hN7fyd7qmvCnn1T7WVoSyawhSwzu7fa8Ggbjuk6/sAlb3AucfqVRPJ6UQeTJgLj7rFyjpnoFLll5C",
	"Rszd4WOjBor8k4dopaz9gZv1zhfkKEvgkD2aEWLU8qLUO+8abNfa7UzOH+h9829x1qyyNYOcvj/7yONh",
	"fVjNR96Rv/lh9nM1BYb53XEqO8iB8hfbgeIokm4iT16MfdE44qzrPkPQEJWFIial3DIXetT57uv8EdIP",
	"6vDv137CUglNDJa0piOUlrxBpyu8/NBYhMa9COA7HAAvVIqDNwE8N3Lg/MGBUj/USAmWMkgJreUf0rP9",
	"Q9w1Xwq2SGFkvVmmLVxjneztfQmMKOplbZuI47lvwsC6CIJjrZi+6UOhKRFLzoaEY86lvKL5lzdfYMGM",
	"U8SHe9gqvtBQ/w2RbFGpbhet8IaOmjvQde9vav4OzS3/BLNHURuwG8rZUeu3GHwJSSyNRnOSi+ZNFhyS",
	"bHBMazQ+/oosXKR1KSFlinWSUDa+Gmat7mFx6Oa9s/365aF1/iT0HcjYKQiiJG+bynpa4P3QQNgc0T+Y",
	"qQyc3CiVx6ivRxYR/MV4VJjyfOC6uGxZk22l0k40h5Bwz1blwI19Q6tyP5l77PJwHXjpVAr66xx9W7dw",
	"G7mom7WNdYn0kbuv/NoYT0a8qqLpjq4UixAsSUoQVPLL8S9EwhLfHBDk8WOc4PHjqWv6y5P2Z3OcHz+O",
	"inFfzInSevrdzRujmJ+Gov9shNtAoGlnPyqWZ4cIoxU23Lz/gYGxP7vEgT/kBZKfrT21f1Rd7fabuG+7",
	"m4CIiay1NXkwVRAQPCIW2HWbRR/nV5BWkukd1jPw5jf2c7RO1He1xd55fOoMWHf3aXEJdUWMxr5fKX+7",
	"fifsY/6FkanRea7xMbjXW1qUObiD8vWDxV/h6d+eZUdPj/+6+NvR86MUnj1/cXREXzyjxy+eHsOTvz1/",
	"dgTHy69eLJ5kT549WTx78uyr5y/Sp8+OF8++evHXB4YPGZAtoBOfPTf53/hMT3L67iy5MMA2OKElq9+A",
	"NGTsXwigKZ5EKCjLJyf+p//pT9gsFUUzvP914pJzJmutS3Uyn282m1nYZb5Cg16iRZWu536e/tt7787q",
	"AGub8I07amNnDSngpjpSOMVv71+fX5DTd2ezhmAmJ5Oj2dHsGF/WKoHTkk1OJk/xJzw9a9z3uSO2ycnn",
	"6+lkvgaao//L/FGAliz1n9SGrlYgZ+6pBPPT1ZO5FyXmn50x83rft3lYdXT+uWXzzQ70xKqE888+2X5/",
	"61Y2u7N1Bx1GQrGv2XyBOTxjm4IKGg8vxb7yPf+MIvLg73OX2BD/iKqKPQNz7xiJt2xh6bPeGlg7Pdwj",
	"svPPzavO15ZJ5BBzg9h8ABo8Aj0lTBO6EBKz3HW6NnzBp9cy1X4dvCbys8wQt+n1sn7hOqgsdvKhJ+Xb",
	"gYgfCTmBIfPmoLZmanixlhWExa7qm6bVvrlvPhwlLz59Pp4eH13/xdwn7s/nT69H+jNfNg9kn9eXxciG",
	"nzA3FS2zeH6fHB3d4f23Ux6+1o2bFDwz2Cv34B4ULoa0d7dVnYFIjYwDOXSd4QeeCH52wxXvtR+1ooci",
	"z7l8QzPiU2Rw7uMvN/cZR2+y4evE3lvX08nzL7n6M25InuYEWwZFEfpb/w9+ycWG+5ZGyKiKgsqdP8aq",
	"xRT8u/V4ldGVQmuiZFcUZTsueKvS++QTWrBj4ZUD/EZpegt+c256/ZvffCl+g5t0H/ymPdA985snNzzz",
	"f/4V/5vD/tk47Llld3fisE7gs7mac/swbSMHdh8pif08/9wuktuSbNW60pnY2LTgKCvHSnA0d2Vj0HRZ",
	"q0FaED9AE4pGfnRhvPkO7bUsA0IxDVJUutFTTWfvYGw8CWaE5gGjFeM4AZqEcRZbH4kGQR4KUsHtcx+d",
	"a8NB9lZk0L828GL4tQK5a24GB+Nk2uIbbuMj1YjuzIb7x/z6ZmSBpmvrd+lrJ/UbH62/5xvKtLlcXEwY",
	"YrTfWQPN5y5hrvNrE/zd+4IR7cGP7Sf2I7/O64J+0Y9dFTH21alIvlFjAwptKrjntTXlwyezdVgPxpFD",
	"YyI4mc8xkGItlJ5PrqefO+aD8OOnerd8oYB6164/Xf//AAAA//9kloV/+q8AAA==",
>>>>>>> master
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
