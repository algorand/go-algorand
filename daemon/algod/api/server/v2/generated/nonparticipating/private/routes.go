// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
