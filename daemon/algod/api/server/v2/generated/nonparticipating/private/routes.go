// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//3fkOGLXEAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
