// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/w8AAP//Nc6QEJoTAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
