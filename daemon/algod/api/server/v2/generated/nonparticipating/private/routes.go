// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"2cf/EwAA//96SivwPRABAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
