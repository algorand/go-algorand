// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
