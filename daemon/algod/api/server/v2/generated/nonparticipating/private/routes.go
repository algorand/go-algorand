// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
