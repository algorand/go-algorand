// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
