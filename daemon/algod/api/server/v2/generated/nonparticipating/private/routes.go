// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"CT9+qDfT15qpN/X2w+3/CwAA//+9BdxhHuQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
