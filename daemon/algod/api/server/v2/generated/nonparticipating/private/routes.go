// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
