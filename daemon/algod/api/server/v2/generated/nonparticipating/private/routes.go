// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
