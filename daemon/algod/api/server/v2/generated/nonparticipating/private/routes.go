// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XMbN7Lgv4Livip/HEeSv7JrX229U+wkq4uTuCwle+9ZvgScAUmshsAEwEhkfP7f",
	"r9ANzGBmAHIoMXZS7/1ki4OPRqPRaPTnh0kuV5UUTBg9efFhUlFFV8wwBX/RPJe1MBkv7F8F07nileFS",
	"TF74b0QbxcViMp1w+2tFzXIynQi6Ym0b2386UezXmitWTF4YVbPpROdLtqJ2YLOpbOtmpHW2kJkb4hSH",
	"OHs1+bjlAy0KxbQeQvmDKDeEi7ysC0aMokLT3H7S5IabJTFLronrTLggUjAi58QsO43JnLOy0Ed+kb/W",
	"TG2CVbrJ00v62IKYKVmyIZwv5WrGBfNQsQaoZkOIkaRgc2i0pIbYGSysvqGRRDOq8iWZS7UDVAQihJeJ",
	"ejV58W6imSiYgt3KGb+G/84VY7+xzFC1YGbyfhpb3NwwlRm+iiztzGFfMV2XRhNoC2tc8GsmiO11RL6r",
	"tSEzRqggb79+SZ48efLcLmRFjWGFI7LkqtrZwzVh98mLSUEN85+HtEbLhVRUFFnT/u3XL2H+c7fAsa2o",
	"1ix+WE7tF3L2KrUA3zFCQlwYtoB96FC/7RE5FO3PMzaXio3cE2x80E0J5/+su5JTky8ryYWJ7AuBrwQ/",
	"R3lY0H0bD2sA6LSvLKaUHfTdSfb8/YdH00cnH//y7jT7T/fnsycfRy7/ZTPuDgxEG+a1Ukzkm2yhGIXT",
	"sqRiiI+3jh70UtZlQZb0GjafroDVu77E9kXWeU3L2tIJz5U8LRdSE+rIqGBzWpeG+IlJLUrLpuxojtoJ",
	"16RS8poXrJha7nuz5PmS5FTjENCO3PCytDRYa1akaC2+ui2H6WOIEgvXrfABC/rjIqNd1w5MsDVwgywv",
	"pWaZkTuuJ3/jUFGQ8EJp7yq932VFLpaMwOT2A162gDthabosN8TAvhaEakKJv5qmhM/JRtbkBjan5FfQ",
	"363GYm1FLNJgczr3qD28KfQNkBFB3kzKklEByPPnbogyMeeLWjFNbpbMLN2dp5iupNCMyNm/WG7stv/v",
	"8x++J1KR75jWdMHe0PyKMJHLghVH5GxOhDQBaThaAhzanql1OLhil/y/tLQ0sdKLiuZX8Ru95CseWdV3",
	"dM1X9YqIejVjym6pv0KMJIqZWokUQDjiDlJc0fVw0gtVixz2v522I8tZauO6KukGELai67+fTB04mtCy",
	"JBUTBRcLYtYiKcfZuXeDlylZi2KEmGPsngYXq65YzuecFaQZZQskbppd8HCxHzyt8BWA4wdJgtPMsgMc",
	"wdYRmrGn234hFV2wgGSOyI+OucFXI6+YaAidzDbwqVLsmstaN50SMMLU2yVwIQ3LKsXmPEJj5w4dlsFg",
	"G8eBV04GyqUwlAtWWOYMQEvDkFklYQom3P7eGd7iM6rZF09Td3z7deTuz2V/17fu+KjdhkYZHsnI1Wm/",
	"ugMbl6w6/Ue8D8O5NV9k+PNgI/niwt42c17CTfQvu38eDbUGJtBBhL+bNF8IamrFXlyKh/YvkpFzQ0VB",
	"VWF/WeFP39Wl4ed8YX8q8afXcsHzc75IILOBNfrggm4r/MeOF2fHZh19V7yW8qquwgXlnYfrbEPOXqU2",
	"GcfclzBPm9du+PC4WPvHyL49zLrZyASQSdxV1Da8YhvFLLQ0n8M/6znQE52r3+w/VVXa3qaax1Br6dhd",
	"yaA+cGqF06oqeU4tEt+6z/arZQIMHxK0bXEMF+qLDwGIlZIVU4bjoLSqslLmtMy0oQZG+jfF5pMXk78c",
	"t/qXY+yuj4PJX9te59DJiqwoBmW0qvYY440VffQWZmEZNHwCNoFsD4QmLnATLSlxy4JLdk2FOWqfLB1+",
	"0Bzgd26mFt8o7SC+e0+wJMIJNpwxjRIwNrynSYB6AmglgFYQSBelnDU/3D+tqhaD8P20qhAfID0yDoIZ",
	"W3Nt9ANYPm1PUjjP2asj8k04NojiUpQbezmgqGHvhrm7tdwt1uiW3BraEe9pAtsp1ZHdGo8GK+YfguLg",
	"WbGUpZV6dtKKbfwP1zYkM/v7qM5/DhILcZsmLnhoOczhGwd+CR4393uUMyQcp+45Iqf9vrcjGztKnGBu",
	"RStb9xPH3YLHBoU3ilYIoPuCdykX8EjDRgjrHbnpSEYXhTk4wwGtAVS3Pms7z0MUEiCFHgxfljK/+gfV",
	"ywOc+Zkfa3j8YBqyZLRgiiypXh5NYlJGeLza0cYcMdsQHvhkFkx11CzxtVzoAyyxlAv4lxu20rt2wk8M",
	"UgYugCpFN4OlwqijGIk9u3hUbR8yV3JFZG2fVJZRcCHs/6qK5LQstX8ooEYV2ZXHx6G2e8dWF9TQYKvd",
	"yuJiGpIi9INLgKnIW+4H+A8tif1seZ29CnHYI3IBDF0je3NGl4LcLBniAWeyDUArI8kKFR6kovnVXlC+",
	"bCeP0+2o3fwKdSyOYt0imh26WPNCH2qbYLDUXoUC+9krfOF6+u6d0R2EHMw1BgEXsiIlu2ZlHwRk4TAa",
	"IkSuD84nv5TrGExfyvWAR8o1O8hO2HHGcw+5fuUgk2o35mHsMUi3C7RvGw3sUoQioZ2l1d6fzqS63fXU",
	"Y1qCtDYJQu2owe087SEJmtZV5s5mRK+JDXoDtWbg7bdKf/gYxjpYODf0d8CCtqMeAgvdgQ6NBbmqeMkO",
	"QPrLqFQwo5o9eUzO/3H67NHjnx8/+8KSZKXkQtEVmW0M0+S+e7wTbTYlezBcGTyf69LER//iqddkd8eN",
	"jaNlrXK2otVwKNSQ48WLzYhtN8RaF82w6gbAURyR2asN0U7Q+GNBe8W1FcFXs4NsRgphRTtLQRwkBdtJ",
	"TPsur51mEy5RbVR9CF0HU0qq6NVVKWlkLsvsminNZcTc9sa1IK6Ff/9U/d8RWnJDNbFzg22gFiBxRijL",
	"rMV4vo9DX6xFi5utnB/XG1mdm3fMvnSR71XNmlRMZWYtSMFm9aLzVAbJk5ICOsId/Q0zKLfwFTs3dFX9",
	"MJ8fRpcgYaDIm56vmLYzEWxhpQbNcinQVWbH892NOgY9fcR4Ha5JA+Awcr4ROSiiD3Fs05qNFRdgFdMb",
	"kQdqDngnsGLRIcu7qzNS6MCp7ukIOBYdr+EzaMJesdLQr6W6aMW+b5Ssq4MLef05xy6HusU4XVth+3ol",
	"CxeLsuuetbCwH8XW+FkW9NIfX7cGgB4o8jVfLE3wznqjpJwfHsbYLDFA4QO+2kvbZ/h2/14WlpmYWh9A",
	"BGsHazmcpduQr9GZrA2hRMiCwebXOi6cJRx6wJMAHCBMKO+ZJT48Z8xSV05ru9q6ImDeH9wXbceM5nhC",
	"M0CNThg3G6s0tsLp0FmkVIwWGzJjTBA5cxZEZ9uERVLwTTBevHGiYYRfdOCqlMyZ1qzInOZyJ2i+HV4d",
	"ZgueAHAAuJmFaEnmVN0Z2KvrnXBesU0GnjSa3P/2J/3gM8BrpKHlDsRCmxh6G72H0/4MoR43/TaC608e",
	"kh1VjPh7hRgJ0mzJDEuhcC+cJPevD9FgF++OlmumwGD7u1K8n+RuBNSA+jvT+12hrauEf6h73loJz26Y",
	"oEJ6wSo2WEm1yXaxZduo8wa3Kwg4YYwTw8AJwes11QadDLgoQBeI1wnMg0KYnSINcPIZYkf+yb9AhmPn",
	"9h4UutbNc0TXVSWVYUVsDYKtt8z1PVs3c8l5MHbz5jGS1JrtGjmFpWB8hyxcCSKImsYW57xwhosDi5W9",
	"5zdRVHaAaBGxDZBz3yrAbugjlwCE6xbRSDhc9yinccybTrSRVWW5hclq0fRLoekcW5+aH9u2Q+Kipr23",
	"C8k0uOa59g7yG8QsekcuqSYODrKiV1b2ADUIekMMYbaHMdNc5CzbRvnwxLOtwiOw85DW1ULRgmUFK+lm",
	"OOiP+Jng520DwI63z11pWIZubvFNbynZexVtGVrCeDomPBL4QnJ7BO1ToCUQ13vHyAWDsWPMydHRvWYo",
	"mCu6RX48WDZudWREuA2vpbE77ugBQHYcfQzACTw0Q98eFdA5a9+e/Sn+g2k3QSNH7D/JhunUEtrx91pA",
	"QofqIgiC89Jj7z0OHGWbSTa2g4+kjmxCofuGKsNzXsFb51u2OfjTrz9B1IhJCmYoL1lBgg/4DKzC/gQd",
	"tPpj3u4pOEr3NgR/oHyLLKfkGkSeLvBXbANv7jfo+RuoOg7xlo2Mau8nKggA6v0JrQgeNmFrmptyYwU1",
	"s2QbcsMUI7qerbgx6NHffeoaWWXhAFG7xpYZnVUzalPcamY9h6GC5Q23YjrBN8F2+C56D4MOOtxboJKy",
	"HKEhGyAjCsEoOz6ppN117oILvHu5p6QOkI5pg0m7uf7v6Q6aYQXkP2RNcirgyVUb1sg0UoGgAAKkncGK",
	"YM2czvWnxRAr2YrhSxK+PHzYX/jDh27PuSZzduMjcmzDPjoePgQ9zhupTedwHUAfao/bWeT6AIOPvfjc",
	"K6TPU3a7nriRx+zkm97gjZXInimtHeHa5d+ZAfRO5nrM2kMaGed2A+OOsuV0TPbDdcO+n/NVXVJzCKsV",
	"u6ZlJq+ZUrxgOzm5m5hL8dU1LX9oukG0EcstjeYsyyFGZuRY7ML2wbAaOw4X3B5gdKkdCxA7w17n2GnH",
	"E7P1WuSrFSs4NazckEqxnGE0iZUcdbPUI4J+pvmSigU8GJSsF87REccBhl9rVM2oWgyGiApVZi0yUHLH",
	"LgDn3O4Diqw4xah90vU15PiAuaHNfC6GbMzNHOxB32IQNZJNJ8kXr0XqdfviReR0o6JGXAYdeS/ATzvx",
	"SFMKoM7KPkN8hdtiD5Pd3N9HZd8OHYNyOHHgetl+THlf2ud2uTmA0IMDEcUqxTRcUaGaSuNXOQ8jIN0d",
	"pjfasNVQk49df04cv7fJ96IUJRcsW0nBNtGgfy7Yd/Axepzgmkx0BoEl1bf/BunA3wOrO88YarwrfmG3",
	"+ye0b7HSX0t1KJMoDjhavB9hgdxpbndT3tZOSssyYlp08VF9BqCnTT4GrgjVWuYcZLazQk/xoDlrpAum",
	"6qL/TeP1fYCz1x+3Z0MLQ29BR8zKilCSlxw0yFJoo+rcXAoKOqpgqRHnJ/8YT2stX/omcTVpRIvphroU",
	"FBzfGs1V1GFjziJqmq8Z88pLXS8WTJveW2fO2KVwrbggteAG5lrZ45LheamYAg+kI2y5ohsytzRhJPmN",
	"KUlmtelK/xD+pw0vS2fQs9MQOb8U1JCSUW3Id1xcrGE4b/T3R1YwcyPVVYOF+O2+YIJprrO4k9Y3+BUc",
	"rN3yl87ZGpyL8bN31mzjkSd2mZ0UBP/3/r+/eHea/SfNfjvJnv+P4/cfnn588HDw4+OPf//7/+v+9OTj",
	"3x/8+7/FdsrDHgtOc5CfvXIv47NX8PxpbUAD2D+Z/n/FRRYlstCbo0db5D4EYjsCetBVjpkluxRmLSwh",
	"XdOSF5a33IYc+jfM4Czi6ehRTWcjesowv9Y9HxV34DIkwmR6rPHWUtTQrzEeBgpGSRfZCedlXgvcSi99",
	"Y5ST9y+T82kT6otZgF4QiANdUu8c6f58/OyLybSN32y+T6YT9/V9hJJ5sY5F6RZsHXsrugMCB+OeJhXd",
	"aGbi3ANgj7rSoW9HOOyKrWZM6SWvPj2n0IbP4hzOx444ndNanAl0jLfnB0ycG2c5kfNPD7dRjBWsMstY",
	"dpCOoAat2t1krOd2Uil5zcSU8CN21Nf5FPa96Jz6SkbnkKUCXp9yzGuoOQdIaJ4qAqyHCxmlWInRTy8s",
	"wF3++uDPITdwDK7+nI090/9tJLn3zVcX5NgxTH0PA8Zx6CDEN/KUdlFsHYcky82CCJ6jS3EpXrE5aB+k",
	"eHEpCmro8YxqnuvjWjP1JS2pyNnRQpIXPjDuFTX0UgwkrWTasiAkkVT1rOQ5uQofJC15Yiqa4QiXl+9o",
	"uZCXl+8HvhnD54ObKspfcILMCsKyNplLpJEpdkNVzPalm0QKMDJmytk2KwrZskYFqU/U4caP8zxaVbof",
	"UD1cflWVdvkBGWoXLmy3jGgjlZdFrICC0MD+fi/dxaDojder1Jpp8suKVu+4MO9JdlmfnDxhpBNh/Iu7",
	"8i1Nbio2WruSDPjuK1Vg4fisZGujaFbRRczEdnn5zjBawe6DvLwCHUdZEujWiWz2jvkwVLsAj4/0BiAc",
	"e0dpwuLOsZdPmhZfAnyCLYQ2VtxoDf+33a8g1vnW29WLlx7sUm2WmT3b0VVpS+J+Z5pcSgsrZHlvDM0X",
	"8Fp1aadmjORLll+5fEBsVZnNtNPdO/w4QdOzDq4xUxRG5kGuEjBQzBipq4I6UZyKTT9phGbGeLfit+yK",
	"bS5km+pknywR3aQFOnVQgVID6dISa3hs3Rj9zXdeZfCwryof+w9Bj54sXjR04fukDzKKvAc4xDGi6ATV",
	"pxBBVQQRSPwJFNxioXa8O5F+bHn2lTHDmy+SNcrzfuKatI8n5wAWrga07vh9xSDtnLzRZEat3C5dxjQM",
	"zA+4WK3pgiUk5NBGNDL8vWNXgkF23XvRm07O+xfa4L6JgoyNM7vmKKUw+8WSCjxmem5/fiY0QzrLBCRC",
	"dQiblSAmNf6RyHSo6tjqMLNjCrQ4ATMlWoHDg9HFSCjZLKn2ydwg550/y6NkgN8x0cS29EJngcdakNiu",
	"SR7keW7/nA5ely7JkM8s5NMJhU/LEamBrIQPTvKx7ZACBKCClWyBC8fGnlDapBftBlk4fpjPSy4YyWLO",
	"b4EaNLhm3BzMyscPCUENPBk9QoyMA7DBvA4Dk+9leDbFYh8ghUvaQf3YYJgP/mbx8DF0B7cij6wsC+cJ",
	"q1buOQB1HpPN/dXz24VhCBdTYtncNS0tm3MvvnaQQZYbEFt7OW2cg8eDlDi7xQCCF8tea8Kr6DarCWUm",
	"D3RcoNsC8UyuM4wfjUq8s/XM0nvUQx6iWWMHE/MJ3dNkJtfgNARXC3pk74AlDYcHI3jhr7kGeoV+qdsc",
	"gdk27XZpKkaFGkjGqfMackmJE2OmTkgwKXK5H6QIuhUAPWVHm2/bPX53PlK74snwMm9vtWmb+s4HH8WO",
	"f+oIRXcpgb+hFqZJ6vOmL7FE9RRd35duPqNAhIwRvWUTQyPN0BSkWcngUZB1hKjsKmY5tW8bBjfOue8W",
	"KC8gaxIVmweBQ5ViC64Na5Xo3k/ic6gnKSRrlHKeXp2p1Nyu762UzTWFZkTo2FnmJ18BeCTPudImAwtE",
	"dAm20dcaHtVf26ZxWanrsoWpjXkR5w0w7RXbZAUv6zi9unm/fWWn/b5hibqeAb/lAh1WZpCKO+rIuWVq",
	"9PXduuDXuODX9GDrHXcabFM7sbLk0p3jT3Iuepx3GzuIEGCMOIa7lkTpFgYZBOAOuWMgNwU2/qNt2tfB",
	"YSr82Du9dnwYcOqOwpGiawkUBltXwcFMBBmmTJDJehgZmzgDtKp4se7pQnHU5IuZ7qXw8Pn/eliA3XWD",
	"7cBA1y8v6ubcyZ3ovP+czucYBORjK8KhO6DzdWMKXjkYE1rUCpRqHWe7YaLORrAbufZvfzo3UtEFc4rR",
	"DEG60xCwnH3QEKTB1MRwtHAWfD5noUJQ30aZ1QGur/aJFrsYQWRxrWHNhfniaYyMdlBPC+NulMUpJkIL",
	"KTPRxVDx6sWq4N3ZVHIJtuYW2tNoBOm3bJP9ZF8opKJc6dZjzGlCu/xvj12/Xn3LNjDyTkcsC9iOXYFn",
	"6lsGNBhTCzafMHCieQKFOV0h6UNnC/fYqdP4Lh1oa1wW3jTxt27ZnSy13aXc5WC0djsLy5jdOI+by+zp",
	"YV3E90l51ybwhDIuJMdA5Aqn4trXLBpeRU149C7avWC09MQLy5l8nE7uZpyK3WZuxB24ftNcoFE8g/MT",
	"Gis6tuY9UU6rSslrWmbOhJe6/JW8dpc/NPcWv08sTMYp++Kr09dvHPgfp5O8ZFRlzWMsuSpoV/1pVoV5",
	"e7dfJSCxeK0IPtaDzW+Sa4Zmv5slc8Ulgvf+IAt2a9INjqIzA87jPpg7eZ+zPuMSt1ihWdUYoVsDCdqg",
	"u3Znek156S0THtqEvyQsblwq9ShXCAe4s/06cEPIDspuBqc7fjpa6trBk2CuHyBbWvzFIVwuNWBFzh5N",
	"Dy49fS1Vh/m7YJmoPfv3E6uskI14TLgP+oJFfWHqiKDg9cviF3saHz4Mj9rDh1PyS+k+BADC7zP3O7wv",
	"Hj6MmhqimgTLJEBRIOiKPWgcf5Mb8WnVToLdjLugT69XjWQp02TYUCgapj26bxz2bhR3+CzcLwUrmf1p",
	"d2xdb9MR3SEwY07QeSo4pvF7WmGNJE2k6Lv5QVyWJS1g9isKWeDRcjM8QqJegbUj0yXP43ZgMdOWvQr0",
	"77GNCTROKMzsiDVPuIuJmgdj2WZj0vj1gAzmiCJTRzMJtribSXe8a8F/rRnhhX3VzLnLsN276vzjAEYd",
	"CKT26Tmcyw2MXgTt8HfRg4QVEPoyIwCxXQkSehMNwH3VqPX9QhurWftm2tcpMZxxwLi3OBQ6+nDUjAEW",
	"y65X0Lh3zJhamZ7RuVIMiTmitS+5zuZK/sbiumhQ4Udis33NBw6euL+x8HkWVnzrsJTGAtWW8Gxn37Xd",
	"49/GqY2/81vYL7opM3GbyzR+qvfbyNs8enU8g6hDcuoRFpoju96qCdYCxyvwz4KM9t5VgQo8TxiY3Al6",
	"iJ/KMLzoGMdvT6WDeRCSVdKbGY2l+7dvIQtTsL0dpwojie/sN0A3Ybc4OwmcCpu2HJMbVUy1uSmGiRJv",
	"+a7BaUe/aNoHDFBU+HSZoiNYqWVkmFrcUIFlI20/5Feut2ZoBbW9bqSC1GQ67v9RsJyvourYy8t3RT60",
	"9Rd8wbEiYq1ZUHLPDYTVZpGKXNnCJpjcoeZsTk6mQd1PtxsFv+aaz0oGLR5hixnVcF02Fsmmi10eE2ap",
	"ofnjEc2XtSgUK8xSI2K1JM3bE4S8xotpxswNY4KcQLtHz8l98N/S/Jo9sFh0QtDkxaPnYH3HP05it6yr",
	"aLmNZRfAs//peHacjsGBDcewTNKNehTN4oQlrdO3w5bThF3HnCVo6S6U3WdpRQVdsLjL8GoHTNgXdhMs",
	"qj28CLQGMG2U3BBu4vMzQy1/SoQhWvaHYJBcrlbcrJyXj5YrS09tPT2c1A+HxV1d6Q8Pl/8IznKV9xXq",
	"6bo+8TOGrhJhBODS+D1dsS5ap4RiPrqSt26svkATOfPpLqEWSlMCBXFj57JLB1kSvFrnpFJcGNB/1Gae",
	"/c0+ixXNLfs7SoGbzb54Gqkp0k27L/YD/JPjXTHN1HUc9SpB9l5mcX3JfSFFtrIcpXjQhv0GpzLp1Rf3",
	"30o5kW0feqzka0fJkuRWd8iNBpz6ToQntgx4R1Js1rMXPe69sk9OmbWKkwet7Q79+Pa1kzJWUsVyWLfH",
	"3UkcihnF2TUEccQ3yY55x71Q5ahduAv0n9cFxYucgVjmz3L0IRBYNLfFb1op/qfv2mS8YFjF4JieDlCq",
	"iLbT6e0+scPXflq3vv0WfXbgWwJzo9GGle8HWEm46qIvbtPnE4fzRtW9uOcdheOjX4iyb3CQ4x8+BKAf",
	"Ppw6MfiXx93PyN4fPoznxIyq3OyvLRbu8iKGvrE9bCrgbU0biKXswA8eA127dU9BfsQid90yYTF7pO+X",
	"JbRvfYswhDy3KYgBFPDaWTCBdV3i+ZtdHcDtiwrdHj4HlQWZEtcp87iJpnFzNQVdJUF8QpeMFk5U1syv",
	"b6fCu7chDnUOoijNyMi2+aJljROaC/OOKK1Tgo39YC/OmRtqSroFoj695HmYAKK4k2icc15evoMvHg/w",
	"Rx8Rn/mChQ1s3eDTF0S3QF6UZIrme+CeTsmXcj2WcHpyiyeePwCKEigZqdKFlQwKAEZdPHb6GAU0aked",
	"sVKKhe7UNgltQH8ePNvFT7dgu+Zl8VOboqonfCgq8mXUuXdmO/6M77rO3YDXa7RcwpIKwcrocKgP+dnr",
	"TSKanX/JsfOsuBjZtl+AEpfbW1wLeBdMD5Sf0KKXm9JOEGK1m/2niS4vF7IgME+bm79ljsNKrkF5uV9r",
	"pk3saMAHjHADA6llvljdjDBRgMb0iHwD4omFpZN4GTSVPqVlN71bXZWSFlNItXnx1elrgrNiHyy/jdXV",
	"FqCo664ialkZn+6uqaQdz+MwfpztgeV21dpkTTG0WKYs26It18Z77jagwguxc0ReofZUe90cTkIgYata",
	"sSKovYbvd6AJ+x9jaL4EtWTnIkuT/PiygJ4qW6NNUHO9qcUB587C7SoDYmHAKZFmydQN1wwid9k16ybn",
	"ajLVORHMJ+vqLk/VQiClHO0hUzSVN/ZFuwcOBRLvTxCFrIf4PZVSWFVz3yqJ59ArLvD2Si72DP4+1VNT",
	"O/o7Z1fIqZCC55CYOyYQQSKhcRbKETnM46ZFPXEnNHK4ooUem5hBh8Vk6UfPCB3ihtb+4KvdVKQO/NOw",
	"tSsAtGBGO87GiqmvV+psYVxo5mqrWCIK+aRUEX+maAxE83rbk4wgR0hCufm1/fa9U31D8PwVF6Dkcmhz",
	"YjZaq0rNwSgtCDdkIZl26+k+mfQ72+cIcoYVbP3+6LVc8PycL2AM9KCzy0Z30eFQp9551Dlr2rYvbVuX",
	"ybn5ueMJhpOeVpWbNF3NNl7Cey2SCI65LPmXW4DcZvxwtC3kttXrG+5TS2jsGhzWWAX38IAwmsquvTLq",
	"9omAFAUtCMazRdM5chEB4zUX3noavyDy6JUAGwPnNdFP54oaFAFH8bQLRstE7APEh6L5/a5D9fNYW5TA",
	"Gv0c6W1si9ImGEfToBXcqNgQfygsdQfCxEtaNl7TkRKzIFU5IaqAuKJe0dkY47CM25e17l4AO3UkTXfI",
	"Db/vTZTKmDWriwUzGS2KWKmbL+Erga8+PoytWV43JVEaFUw3Y+6Q2txEuRS6Xm2Zyze443RBFecINYSV",
	"pP0OQ0aO2Qb+jdUDSe+M85feOybSO0cX+6WJHsZ4xqReS9OZ5otsPCbgTrk7Otqpb0fobf+DUrrXif4h",
	"VJ49LhfuUYy/fWUvjjCN5ECxi1dLk+UR3MAlfPeJUZr8ZF2uBFfZoOoNODw0tf23qyHSVfqncPkl4pBD",
	"Mwner2g6SEUj58ngeWpcGh9DyVYWlEyNgm7CPcPL0HqYcg1Gz+DDGSzcWrciNG22+7ZjpEPTRcssksa5",
	"29nP2g3e14D27XUqQN1njYfv/SreV8zl9qsUu+ay9o5X3v3ZPwnx105N7CZFQHT90aCCz618TqrKL1w1",
	"RVyme5N/+xMaYAkTRm3+AIrzwaYP6oMPpV1UT7VNSFOIa1Rhrs6tOKaiQix5v5MNOxXKd9RXH5DVqzHi",
	"wLBe+nRyVux1YcYKQExwlNixi1c/T+fHbnNiwxGrpOZtPbxYWfSRcQYXUNk8yO89HMv7n16z3EARxNav",
	"TjG2T7ZvO5nX3f93nuz0c7oJx3DpsbflxB5WPtxxxw/S1gSpl7Bq3NH4DNCnjfc0Bn/dUN3axHvh0qOD",
	"Nudzlht+vSNN0D+XTAQpaKZeLwOwzIOsQbwJYYIss/trHVuAtmXx2QpPUO3hzuCkbPRXbHNPkw41RMvY",
	"NfF7t0kwChgA7pBZEpE65p2IimTnMMZ1QxmABe8NjN1Zm6o9WQE7SHp1y7k8SdqLo02EtWXKeAneUXPZ",
	"rnulh4NonFQmoWEFz/T74xUUTNXON442CUrDVzo5G5ZxuHEJTiGpU2M78alOmfa/+QxuOEvJr1hYoxss",
	"VTdUFb7F0SE8b/Bu4nGg583MvI3dGNqqI4nBIQwqL6UVI7JULFk3XKLxNbyn0Sm0zd0DcM2ZUqxoTCKl",
	"1Cwz0sd6bINjGyrQ8/VWSNDJYhwIXDJF7ts2BzAUJaKQEpc6h9dwgUSxFbXQqSBTb3rObch+id99/L0v",
	"SrNTw9TQ6+7qiD5qh+sBEkOqnxN3W+6O67+NsokLwVTmLU/9tL2i678GWQ+LOscLOjwYjUJudNqcLawk",
	"qqfJh6vsvRGC+PgrtjnGR5AvK+l3MAQaJScEPUj32Nvkg6rfdAzuxUHA+7zOepWUZZYwdpwNcw33Kf6K",
	"51cMPCYb7/ZExWByH3TsjTX7ZrnxuXWriglWPDgi5FRgPJE3bHeLXfUmF/fMtvnXMGtRY/pvp1Q7uhTx",
	"wAxIzK3uyM38MNt5mGaW1d1xKhxkRybbdSLPsaI3kfrZR2Nf5UNTc7+mcUtUCEVMJjlHi9VLOOgxxRFk",
	"PwjSdIAhkxJn6SK6lDGXzNtkaLBDxTEVTgYAGSbGJApooHCDRxEQrdIbOYWY9c7lu5NzolhrRL5t4r9h",
	"QeHYi74/czNLl9/NpWKd0sC2t1SFF3m4bmt4UzXjRlG1uU16vkFB44H2JInlne5YjSdWu5DWG2uIw7KU",
	"Nxkwq6zJhx972tp2unsZ+xJAbT97qmcs8Oui2glqG7KkBcmlUiwPe8RDPRGqlVQsKyW4ecUs0HNj5e4V",
	"xHcJUsoFkVUuC4Z1JeIUlJqrFoKC2MQCr5ooCpB2IFAY+wR0PHLKQ1XTxoROuOgMbZkJx1OmXQInhyFs",
	"PIR3SyXqvSo6nM1BI8TB16Ubr4/SZ1iPm+1ZjpuXpVcYpCpykx91De5IEKxlp3hKVlIb97LDkXQzVOvi",
	"dT+XwihZll0lEIrEC6fZ/o6uT/PcvJbyakbzqwfwjhTSNCstpj6Uue+M186kelm8RpYO78cfYDtwTXNE",
	"snd9cMc59i7rG4D5fjfH2q3jPo2VP++uq1/PXyQiSoxc8TxOw38u77akT1qMJUTTg2FlLUzoAM2AUYeX",
	"Q+PMACxpiGYmLMHG9svxNGfUBeZh/wsSb39cMmfukkhcTEM+6aSWLE/KVj0AAFKMMja1wnJcoeTTcBW5",
	"wKwEYJLuAzqSi4Pnz91gsyMcHCjD7gTUwNuwAfA+PvanmMYNPRdncu2/P2jzvN0K+I/bqbzDPFIuVect",
	"aSl0qvI5YRIcIZ5Neqv/ERSb9zfobi+kpnTiyBs1ACDtl9SBYZR30r5gzCkvWZFRk7jcQSc0DV62LqKl",
	"XxCXa8fJc4oX9pIRO3atmMtRgiJ1r4B+RS0pyab5UHMrCrZmGhKIYBVwqtHO4O0drMRSZL3Ht6yykl2z",
	"jruWS5xSg2jHr5nvq5vOpGCsAutfXycV80MK7/KeosKtPQs8WcZgN6q5QMTiTpEdaomoEmUtMjwmeuxR",
	"shBd86KmHfzpfUWOrtrNHuUIqgYyeebfbWOn+RFHeOsHOPX9Y6KMx8T7cXxobxYUR902BrTTL7HWqVMv",
	"4m6JYVagxqABsxWN4RNJvOUbuqI3Iq0AHJJ8+7wZuU9cigCxX61ZDlJN1+/u7jghMBjRvYxfSRFcNTt8",
	"e0XyZ6HhrSScHC/21NAMGOxWTY2nCyewQwMogSqs2GulZig75vi/439TMqv9QPZdjVXQwhfcK+YtdpCE",
	"vDFWOIGWNxea9y+cuhyU/Uc5DzyrV3RDpIJ/7Hvt15qWfL6BE4rg+25EL6klIWciRNu181e0E28XTKYe",
	"MK8XkH4qXDcfO2Yw3MaOEgBtr0CnnIJsUlcs3AYwyyPnyY1lObqerbjWcNn1tnOIBbd4n0dkRYvwjQzZ",
	"DLvlZ31+W9v7f7ZRW+FUPglZVdLc17xjRNNVTyGOdS09cZklW20P6xs+jz0JNLUyW6JVPpy3uIVyb0/P",
	"jZivfKpGSAfsQQ3BQXmUOy1jn6LWbWT0loDIUUs59C6M9Q8ZAA1GZp8Jbgf4mMHTZ437FPiPJhpNLWMM",
	"+H8UvCdKL4bwYpXFT4DlTsh/BFbUq87kOlNsrne5QqBi1T6EVZsswCsnucgVoxp9Q85+cE+2No8mF/YJ",
	"id6LjfWtGaVgcy5aZslFVZvICwDSaYpNgLBQPQ1oTRh7UlKCFcOuafnDNVOKF6mNs6cDS7+FdQy8St71",
	"jTz+mzt1OADX7esHIglZG6kWNLMXOFZKQsdCbagoqCrC5lyQnCl775MbutG3t31YaFVt5Ysd1g8aSDPd",
	"+PbADgKkjYCUG2e+vKNlogGQHtBEMcK0AB6sEbMCKkWMTFgShjDE0yrQdVbKBcSXJQjQJSwF2w8+VqQA",
	"hS3KQ/vNo/lvbPs0kKvdHXwjYdYxU2w/Zz8A6uDB86PgZutJQ21aP+APPTLxIHj6F4vWLRw3Z0j/sRjN",
	"Cwhi6MRpeuHOBzH4vUb3EJyPJSwZXQ1uYhfBQO4CfEN17fgaWF0bfCwSFN+wGbxt9RbHb6ZbJ2eaO8ed",
	"odJn8ChGpExdHO2eOiHUJPt7IAEeVjd2Z6s7beNMYcfZp3DY9sjZrJJVlo/xBsRyDoVTaDtIuzAm6CNQ",
	"VyfW3ThO6KbASSexSafSyb6105KVVnbZZap82yM7pdBIcNCuslzOgZfBEUY1DsR4NMqLaT/6qKuwaZgE",
	"oUSxvFag0Lyhm921qBJphM//cfrs0eOfHz/7gtgGpOALpttU1L1aTq3HGBd9Pcun9REbLM/EN8HHpSPi",
	"vKXMh9s0m+LOGnJb3eaZHFSy2kcTGrkAIscxUkPoVnsF47RO33+s7Yot8uA7FkPB779nSpZlvBRAI7pF",
	"VP2x3QqU/Vbir5jSXBvLCLu2Om5aX1m9BHUcJIS9xjwjUuQuY39DBdwknHFiC0m5WgI/g6hfZ98gbF2V",
	"jlehTWLbuty7CDVi4JwB/hszRipZOVGaz0kMIogtUUHMpVM0gntn4D3ZMFv0o4wRovNJjpNemK9yO7fv",
	"Vvg0cU5vNzEiXvhDeQvSTGnS0xHtt+EkrSr9D8M/IiH6B+MazXJ/D14RfR/crlj2KNCG4doR8gAAEnGY",
	"nQi6sJZ+m2lUoVYe9Pfe1NkXP75rTaA7AwYAEt9hB3hhYGXbrvFxd+B85pSd3zVICZbyPkUJneXvitX0",
	"rLe5SIItckoKY5hGtiSHYmEQiKtfNvGtiVfJIAwWCufbl2lZRsJnUW8CZyokHPskUNe0/PRc42uutDkF",
	"fLDibTpoJoyhDJGMqNS3y+D2mo6aO4iXPNzU4g2E7P6T2T2K3nNuKGcuHtxmoPWCMuYLfytgFDC5gTHR",
	"HejRF2TmKjBUiuVc983QN144aUIGmeJz53rJ1mZHjOKudf4kzR3IeO59Rsj3gTlJgtquhbA9op+ZqSRO",
	"bpTKY9Q3IIsI/mI8KqzYuuO6uGO2/tslBAlSe+2ZEGRYi3bs8jDphb10as2G6xx9W3dwG7mo27WNzWYz",
	"Oun/5eU7MxuThCaeoN92hyw4B8nUv1ee/t8h/w3iyI3h5o1RzE+pjKiY9TORfLe3HzUvdzqIdFIpf5xO",
	"FkwwzTUkC/7ZFRT5tHephwBj8odHFWG9SyIRRExkrZ3Jg6mCJMkj8iO7bpFsyBDvlteKmw0Uk/UKNP5z",
	"NFPPN03WB5c1pLFdubvPyCvWFPRuc0TU2t+u30hawn2EJjVhbyFZHpGv1nRVlU4dTP5+b/ZX9uRvT4uT",
	"J4/+OvvbybOTnD199vzkhD5/Sh89f/KIPf7bs6cn7NH8i+ezx8Xjp49nTx8//eLZ8/zJ00ezp188/+s9",
	"y4csyAioz939YvJ/stNyIbPTN2fZhQW2xQmt+LfM7g28lecSih1apOZwEtmK8nLywv/0v/wJO8rlqh3e",
	"/zpxRXsmS2Mq/eL4+Obm5ijscryAoPDMyDpfHvt5oARdR155c9Z4k6PfC+xoqz2GTXWkcArf3n51fkFO",
	"35wdtQQzeTE5OTo5euTqHQta8cmLyRP4CU7PEvb92BHb5MWHj9PJ8ZLREnKo2D9WzCie+0+K0WLj/q9v",
	"6GLB1BEEDOBP14+PvVhx/MEFx3/c9u04dKk4/tDJIVDs6AnuAMcffNXT7a07FS+dJ1bQYSQU25odz6Bq",
	"xdimTAeN00uBx4Y+/gDicvL3Y6fziH+EZwueh2OfaCPREkOq4x87KPxg1nYh24ezbYLxcmryZV0df4D/",
	"AGl/RF5TslhGDky1TknbfEq4IXQmFRTRNPnSshdfvY/roGVYU/ussGfE9nqJEPhiyGB8n7x4N4wrgIGI",
	"HwkYij0t7XnvzNSydFB+Ttoa/M2F1WnfXlvvTrLn7z88mj46+fgXey25P589+TgyBOdlMy45b+6ckQ3f",
	"Q+k7cDYENvD45MTzPveyCOj22B3zYHGDF1a7SNykxpdxKBI4Wkj7jbut6g1EGmTsKNHVG34o2QC7f7rn",
	"ireqoTr5I2H4fn2LgvhwV5j70aeb+0ygB6W9VvD6+zidPPuUqz8TluRpSaBlUHN1uPU/iishb4RvaWWV",
	"erWiauOPse4wBeI2G25EahnYu0ml+DUFEVFIESTFEovJe0ivEAs5TvAbbegt+M257fXf/KbTMF5zH3Uj",
	"rj5vYIXHyySszIWZAr3nLS2uqci9k3/rOwz7hdKwI4zGPa3WbF6XPpy8Kvkcyx5LWfqJdF1VluPMqW4o",
	"yzksW/EWo3OboUktcinQ0QF8w725BqJsweSjr3jV6cLnlqpcQV7BmAvAhE3/tWZq0+76ils5td3egSvO",
	"78nCEY8HYOHdgQ7Mwh/vyUb//Cv+r31pPT3526eDwCehuOArJmvzZ700z/EGu9Ol6WR4zKN+bNbiGJwf",
	"jz90nivu8+C50v297R62uF7JgvknhJzPNfhobvt8/AH/DSZi64opvmICKyu7X/HmOIa6vpvhzxuRR38c",
	"rqOTXzPx87HXf8SewN2WHzp/dl9+elmbQt5gWbGovALXJy1d6XVQ8zcqA3sPugHa1J/kh6q5qFw+C0Kh",
	"jJKsTavTQUdvFyjaWN3gRmt8LxZcwARgPoFZ6BzqRQYXuGb2bgRNRU82cpB9Lws2lI1iF6GDsXMZNkch",
	"UtH/zhfjkPF+3O+ggJkHbZRDMrIfa93/+/iGcmMlKJeDEzA67GwYLY9dwZ3er22O+8EXSNwf/BhGu0Z/",
	"Pabdc9HVoNgtS3UcqFdiX50GIdHIu5r7z62qNVRdArk0Sst37+2uQzl2R0mtJu7F8THEHi2lNscgiXa1",
	"dOHH981G+4qQzYbbb+tMKr7ggpaZ04C1VcMmj49OJh//fwAAAP//4oD449H+AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
