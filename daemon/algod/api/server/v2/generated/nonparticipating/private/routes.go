// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
