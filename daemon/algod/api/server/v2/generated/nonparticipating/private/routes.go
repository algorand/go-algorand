// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
