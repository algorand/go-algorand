// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
