// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
