// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"c5XynxMBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
