// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"y8wp0pqS25OnJ2eTD/8/AAD//8aPDhr0GgEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
