// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//3ik10lv1QAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
