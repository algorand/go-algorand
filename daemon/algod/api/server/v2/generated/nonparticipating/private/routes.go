// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"NHQFTyXxAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
