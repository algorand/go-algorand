// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
