// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9+3PcNtLgv4Ka/aoc+4Yz8iu7VlXqO8V2srp1HJelzd59ti/BkD0zWJEAA4DSTHz6",
	"36/QAEiQBDnUY50vVfuTrSEejUaj0W98nqWiKAUHrtXs+POspJIWoEHiXzRNRcV1wjLzVwYqlazUTPDZ",
	"sf9GlJaMb2bzGTO/llRvZ/MZpwU0bUz/+UzCrxWTkM2OtaxgPlPpFgpqBtb70rSuR9olG5G4IU7sEKev",
	"ZtcjH2iWSVCqD+WPPN8TxtO8yoBoSbmiqfmkyBXTW6K3TBHXmTBOBAci1kRvW43JmkGeqYVf5K8VyH2w",
	"Sjf58JKuGxATKXLow/lSFCvGwUMFNVD1hhAtSAZrbLSlmpgZDKy+oRZEAZXplqyFPACqBSKEF3hVzI4/",
	"zBTwDCTuVgrsEv+7lgC/QaKp3ICefZrHFrfWIBPNisjSTh32Jagq14pgW1zjhl0CJ6bXgvxQKU1WQCgn",
	"7797SZ4+ffrCLKSgWkPmiGxwVc3s4Zps99nxLKMa/Oc+rdF8IyTlWVK3f//dS5z/zC1waiuqFMQPy4n5",
	"Qk5fDS3Ad4yQEOMaNrgPLeo3PSKHovl5BWshYeKe2Mb3uinh/L/rrqRUp9tSMK4j+0LwK7Gfozws6D7G",
	"w2oAWu1LgylpBv1wlLz49Pnx/PHR9Z8+nCT/5f58/vR64vJf1uMewEC0YVpJCTzdJxsJFE/LlvI+Pt47",
	"elBbUeUZ2dJL3HxaIKt3fYnpa1nnJc0rQycsleIk3whFqCOjDNa0yjXxE5OK54ZNmdEctROmSCnFJcsg",
	"mxvue7Vl6ZakVNkhsB25YnluaLBSkA3RWnx1I4fpOkSJgetW+MAF/fdFRrOuA5iAHXKDJM2FgkSLA9eT",
	"v3Eoz0h4oTR3lbrZZUXOt0BwcvPBXraIO25oOs/3ROO+ZoQqQom/muaErcleVOQKNydnF9jfrcZgrSAG",
	"abg5rXvUHN4h9PWQEUHeSogcKEfk+XPXRxlfs00lQZGrLeitu/MkqFJwBUSs/gmpNtv+v85+fEuEJD+A",
	"UnQD72h6QYCnIhveYzdp7Ab/pxJmwwu1KWl6Eb+uc1awCMg/0B0rqoLwqliBNPvl7wctiARdST4EkB3x",
	"AJ0VdNef9FxWPMXNbaZtCWqGlJgqc7pfkNM1Kejum6O5A0cRmuekBJ4xviF6xweFNDP3YfASKSqeTZBh",
	"tNmw4NZUJaRszSAj9SgjkLhpDsHD+M3gaSSrABw/yCA49SwHwOGwi9CMObrmCynpBgKSWZC/O86FX7W4",
	"AF4zOLLa46dSwiUTlao7DcCIU4+L11xoSEoJaxahsTOHDsM9bBvHXgsn4KSCa8o4ZIbzItBCg+VEgzAF",
	"E44rM/0rekUVfP1s6AJvvk7c/bXo7vrojk/abWyU2CMZuRfNV3dg42JTq/8E5S+cW7FNYn/ubSTbnJur",
	"ZM1yvGb+afbPo6FSyARaiPAXj2IbTnUl4fgjf2T+Igk505RnVGbml8L+9EOVa3bGNuan3P70RmxYesY2",
	"A8isYY1qU9itsP+Y8eLsWO+iSsMbIS6qMlxQ2tJKV3ty+mpok+2YNyXMk1qVDbWK853XNG7aQ+/qjRwA",
	"chB3JTUNL2AvwUBL0zX+s1sjPdG1/M38U5a56a3LdQy1ho7dfYu2AWczOCnLnKXUIPG9+2y+GiYAVkug",
	"TYslXqjHnwMQSylKkJrZQWlZJrlIaZ4oTTWO9B8S1rPj2Z+WjXFlaburZTD5G9PrDDsZedTKOAktyxuM",
	"8c7INWqEWRgGjZ+QTVi2hxIR43YTDSkxw4JzuKRcLxp9pMUP6gP8wc3U4NuKMhbfHf1qEOHENlyBsuKt",
	"bfhAkQD1BNFKEK0obW5ysap/+OqkLBsM4veTsrT4QNEQGEpdsGNKq4e4fNqcpHCe01cL8n04NsrZgud7",
	"czlYUcPcDWt3a7lbrDYcuTU0Iz5QBLdTyIXZGo8GI8PfB8WhzrAVuZF6DtKKafxX1zYkM/P7pM5/DBIL",
	"cTtMXKhFOcxZBQZ/CTSXrzqU0yccZ8tZkJNu39uRjRklTjC3opXR/bTjjuCxRuGVpKUF0H2xdynjqIHZ",
	"RhbWO3LTiYwuCnNwhgNaQ6hufdYOnocoJEgKHRi+zUV68Veqtvdw5ld+rP7xw2nIFmgGkmyp2i5mMSkj",
	"PF7NaFOOmGmI2jtZBVMt6iXe1/IOLC2jmgZLc/DGxRKLeuyHTA9kRHf5Ef9Dc2I+m7NtWL8ddkHOkYEp",
	"e5ydByEzqrxVEOxMpgGaGAQprPZOjNZ9IyhfNpPH92nSHr22BgO3Q24RuENid+/H4Fuxi8Hwrdj1joDY",
	"gboP+jDjoBipoVAT4HvlIBO4/w59VEq67yMZx56CZLNAI7oqPA08vPHNLI3l9WQl5O24T4etcNLYkwk1",
	"owbMd95BEjatysSRYsQmZRt0BmpceONMozt8DGMtLJxp+i/AgjKj3gcW2gPdNxZEUbIc7oH0t1Gmv6IK",
	"nj4hZ389ef74yc9Pnn9tSLKUYiNpQVZ7DYp85XQzovQ+h4f9laF2VOU6PvrXz7wVsj1ubBwlKplCQcv+",
	"UNa6aUUg24yYdn2stdGMq64BnHI4z8Fwcot2Yg33BrRXTBkJq1jdy2YMISxrZsmIgySDg8R00+U10+zD",
	"Jcq9rO5DlQUphYzY1/CIaZGKPLkEqZiIuEreuRbEtfDibdn93UJLrqgiZm40/VYcBYoIZekdn8737dDn",
	"O97gZpTz2/VGVufmnbIvbeR7S6IiJchE7zjJYFVtWprQWoqCUJJhR7yj37DNVgciyzspxPreb+3oLLEl",
	"4Qcr8OWmT1/seysyMGp3pe6BvTeDNdgzlBPijK5EpQklXGSAOnql4ox/wNGLHiZ0jOnwLtFbK8OtwOiD",
	"Ka3MaquSoNunR4tNx4SmlooSRI0asIvXDg3byk5nnYi5BJoZPRE4EStnfHZmcVwkRZ+V9qzTXTsRzbkF",
	"VylFCkoZ/d5qbQdB8+0sWeoRPCHgCHA9C1GCrKm8JbBaaJofABTbxMCtRXJnse9DPW36sQ3sTh5uI5VG",
	"xbdUYOR/c+By0DCEwok4uQSJlut/6f75SW67fVU5EFfiRKtzVqClgFMuFKSCZyo6WE6VTg4dW9OoJf+Z",
	"FQQnJXZSceABa9UbqrT1XzCeodpl2Q3OY81YZophgAevQDPyT/7264+dGj7JVaXqq1BVZSmkhiy2Bg67",
	"kbnewq6eS6yDsev7VgtSKTg08hCWgvEdsuxKLIKors18zsHXXxwaw8w9sI+isgVEg4gxQM58qwC7oW99",
	"ABCjo9c9kXCY6lBO7dCfz5QWZWnOn04qXvcbQtOZbX2i/9607RMX1Q1fzwSY2bWHyUF+ZTFroyq21Ajt",
	"ODIp6IW5m1AEt46WPszmMCaK8RSSMco3x/LMtAqPwMFDWpUbSTNIaFlKcRk59H+3DYhvEIPQD5JBTvfD",
	"Q9jPY1BwMdybC3IpWhpKZAAjMwg1sgzfIHJw/Bh6K0FtRZ4Nj9I0OWjrbrHUFu/qMJwOT4ge5MGDdYCy",
	"h4hoQL19R6VmKStROvsb7O9dWO1OEDW6kgw0ZUblCj5YwbUM+xPrjeyOeTvhdZIm0ge/p4pElpMzhZdw",
	"G/gL2KP35Z0NczkPgmPuQfqOjGo4JuUEAfXOcyPkhE1gR1Od743ooLewJ1cggahqVTCtbdxSWzjXokzC",
	"AaJWnpEZnUnThoj4HZhiYz3DoYLl9bdiPrOi4Dh85x1hsIUOJ4SWQuQTvFs9ZEQhmOT9IqUwu85cmJyP",
	"pfKU1ALSCYZoz64vpAeqhWZcAfk/oiIp5SjUVhrqW1ZIvLpQpDEzGKGgntP5uRoMQQ4FWFkdvzx61F34",
	"o0duz5kia7jysaWmYRcdjx6h5vlOKN06XPdg9jDH7TTCy9H8ZS5fJxd3ecphP4sbecpOvusMXtvMzJlS",
	"yhGuWf6dGUDnZO6mrD2kkWk+Jhx3kmUrGDq2btx3dPL/a+wizdAx6PoTB67R5uOQd9TIrPn+Hvi0HYhI",
	"KCUoPFWhrqfsV7EOw4/dsVN7paHom0ts158HhMX3XizoSVKC54xDUggO+2jGDePwA36M9bYne6Az8tih",
	"vl2xqQV/B6z2PFOo8K74xd0OSPldHRZwD5vfHbdjKQsDr1HTh7wklKQ5QzuA4ErLKtUfOUVNIzjLEfeJ",
	"15+Gdc+Xvklc2Y3oom6oj5yi66zWP6Im3zVEpPPvALwKqqrNBpTuyAdrgI/ctWKcVJxpnKsw+5XYDStB",
	"og9jYVsWdE/WNEdV+TeQgqwq3b4xMT5UaaPJWrOdmYaI9UdONcnBaPU/MH6+w+F8GKanGQ76SsiLGguL",
	"6HnYAAfFVBJ383xvv6IH3i1/67zxmKxjP1vDlBm/CSLda2gloPzfr/7z+MNJ8l80+e0oefE/lp8+P7t+",
	"+Kj345Prb775f+2fnl5/8/A//yO2Ux72WPSig/z0lZMmT1+hyNAY7HqwfzErTsF4EiWy8y2QgnEMgu/Q",
	"FvnKCD6egB42pj+36x+53nFDSJc0ZxnVtyOHLovrnUV7OjpU09qIjgLp1/opFpGwEUlJ0wv0ks42TG+r",
	"1SIVxdJL0cuNqCXqZUahEBy/ZUtasqUqIV1ePj5wpd+BX5EIu+ow2VsLBH0fazziGM3ALogYT9664pYo",
	"KuUMvxhQ531dYj2vo8ptNukxwZDjLfWOWvfnk+dfz+ZNqHD93Wjq9uunyJlg2S4WEJ7BLiapuaOGR+yB",
	"IiXdK9BxPoSwR9161hcUDluAEfHVlpVfnucozVZxXunDlJzGt+On3MYPmZOIJu+9s6SJ9ZeHW0uADEq9",
	"jWWZtWQObNXsJkDHTYVWNj4nbAGLrsaVbUB5B2MOdI3ZTmi2FVPCLutzYAnNU0WA9XAhk9SaGP2gmOz4",
	"/vV85sQIde+SvRs4Bld3ztq+7f/Wgjz4/vU5WTrWqx7Y3AQ7dBBNHrFkuIDJlgPTcDObW2uTMz7yj/wV",
	"rBln5vvxR55RTZcrqliqlpUC+S3NKU9hsRHk2MdgvqKafuQ9mW0w/T2IfiVltcpZSi5C2bohT5vS2B/h",
	"48cPhuN//Pip5w3rS8Juqih/sRMkV0xvRaUTl7OVSLiiMouAruqcHRzZZlyOzTonbmzLil1OmBs/zvNo",
	"Wapu7H5/+WWZm+UHZKhcZLrZMqK0kF6qMaKOhQb3961wF4OkVz7hr1KgyC8FLT8wrj+R5GN1dPQUSCuY",
	"/RcnPBia3JfQsnndKrega+/ChVsNCXZa0qSkG1DR5WugJe4+St4FWlfznGC3VhC9DxLCoZoFeHwMb4CF",
	"48YBwbi4M9vLJ9/Hl4CfcAuxjRE3GkfQbfcrCKu/9XZ1QvN7u1TpbWLOdnRVypC435k6J3djhCzvnVNs",
	"w80hcOnLKyDpFtILyDCTEopS7+et7t4B7ERWzzqYshnHNigW0+LQPLgCUpUZdUI95ftufpICrX1S1nu4",
	"gP25aLLqbpKQ1M6PUUMHFSk1kC4NsYbH1o3R3XwXTIA5AWXp00ww3tiTxXFNF77P8EG2Iu89HOIYUbTy",
	"N4YQQWUEEZb4B1Bwi4Wa8e5E+rHlGX1lZW++SIKy5/3ENWnUMBcQEK4G01Ls9wKwfIG4UmRFjdwuXOa9",
	"zQEJuFil6AYGJOTQQjsx06Jl1cVBDt170ZtOrLsXWu++iYJsGydmzVFKAfPFkAoqM50wED+TdQLgChYE",
	"C+o4hK1yFJPqCBTLdKhsWcpthZAh0OIEDJI3AocHo42RULLZUuWLAmDtBH+WJ8kA/8KcprFM1tMggiEo",
	"kFDnqXqe2z2nPe3S5bP6JFafuRqqlhOyUI2Ej0F1se0QHAWgDHLY2IXbxp5QmvyqZoMMHD+u1znjQJJY",
	"MARVSqTMVnVorhk3Bxj5+BEh1phMJo8QI+MAbHRu4cDkrQjPJt/cBEju8sOoHxvdYsHfEA9lteFuRuQR",
	"pWHhjA8EKnoOQF0ETX1/deK4cBjC+JwYNndJc8PmnMbXDNJLqESxtZM+6dyrD4fE2RFbvr1YbrQmexXd",
	"ZjWhzOSBjgt0IxCvxC6xsexRiXe1Wxl6j0YAYmR97GDa1NUHiqzEDl32eLVgTRh1AJZhODwYgYa/Ywrp",
	"FfsN3eYWmLFpx6WpGBUqJBlnzqvJZUicmDL1gAQzRC5fBdmotwKgY+xo6rY55fegktoWT/qXeXOrzZsq",
	"Cz5YOXb8h45QdJcG8Ne3wtT5o++6EkvUTtH2PLdTZwMRMkb0hk303T19p5KCHFApSFpCVHIRcwIa3Qbw",
	"xjnz3QLjBSboUr5/GIQzSNgwpaExx5uL2fuXvrR5kmJdECHWw6vTpVyb9b0Xor6mbOI5dmwt84uv4FJo",
	"SNZMKp2gLyO6BNPoO4VK9XemaVxWagdM2BJZLIvzBpz2AvZJxvIqTq9u3r+9MtO+rVmiqlbIbxknQNMt",
	"WWFJt2gY1cjUNtJudMFv7ILf0Htb77TTYJqaiaUhl/Ycf5Bz0eG8Y+wgQoAx4ujv2iBKRxgkyj6vINex",
	"rMNAbrKHMzMNF2PW195hyvzYBwNQLBTDd5QdKbqWwGAwugqGbiIjljAdVETrZ9IMnAFalizbdWyhdtRB",
	"jZneyODhS010sIC76wY7gIHA7hkL1pag2lVFGgHf1rZrJfUuJmHmvF37I2QI4VRM+cqsfUQZ0kZR8RCu",
	"zoHmf4P9T6YtLmd2PZ/dzXQaw7Ub8QCu39XbG8UzOvmtKa3lCbkhym1YOc0TZ2AeIk0pLh1pYnNvj/7C",
	"rC5uxjx/ffLmnQP/ej5Lc6AyqUWFwVVhu/IPsypbwGTggPjKj0bn8zK7FSWDza+rLoRG6astuCp7gTTa",
	"KwfUOByCo+iM1Ot4rNFBk7PzjdgljvhIoKxdJI35znpI2l4ReklZ7u1mHtqBuCBc3LSaUlGuEA5wZ+9K",
	"4CRL7pXd9E53/HQ01HWAJ4VzjdQBLGypS0UE77rQjQiJ5jgk1YJiMR9rFekzJ14VaElIVM7SuI2Vr5Qh",
	"Dm59Z6YxwcYDwqgZsWIDrlhesWAs00xNUHQ7QAZzRJHpC0MN4W4lXI3yirNfKyAsA67NJ4mnsnNQsXqS",
	"s7b3r1MjO/TncgNbC30z/F1kjLCQVffGQyDGBYzQU9cD91WtMvuF1hYp80PgkriBwz+csXcljjjrHX04",
	"arZhkNu2xy0sKd7nf4YwbPnJw/XMvfLqKmoNzBGtT85UspbiN4jreageR7IOfOkuhlEuvwFfRNLNuiym",
	"tu40Zdab2Qe3e0i6Ca1Q7SCFAarHnQ/cclhDyFuoKbdbbcsFt2Ld4gQTxqcu7fgNwTiYezG9Ob1a0ViB",
	"JSNkGJhOGgdwy5auBfGdPe6d2Z+5amoLEviS67bM5jiWIJuEoH4+/S0FBjvtZFGhkQyQakOZYG79f7kS",
	"kWEqfkW5rTpt+tmj5HorsMYv0+tKSMxQVnGzfwYpK2gelxyytG/izdiG2ZrLlYKgqK8byBart1TkCiNb",
	"F3uDmtM1OZoHZcPdbmTskim2ygFbPLYtVlQhJ68NUXUXszzgequw+ZMJzbcVzyRkeqssYpUgtVCH6k3t",
	"vFqBvgLg5AjbPX5BvkK3nWKX8NBg0d3Ps+PHL9Doav84il0Arrj6GDfJkJ38w7GTOB2j39KOYRi3G3UR",
	"zWa1L2IMM66R02S7TjlL2NLxusNnqaCcbiAeKVIcgMn2xd1EQ1oHLzyz5dyVlmJPmI7PD5oa/jQQx27Y",
	"nwWDpKIomC6cc0eJwtBTU7HXTuqHs7XhXbE1D5f/iD7S0ruIOkrklzWa2vsttmr0ZL+lBbTROifUpqXn",
	"rIle8CUgyakvboHV5+qicxY3Zi6zdBRzMJhhTUrJuEbFotLr5C8k3VJJU8P+FkPgJquvn0Uq7rUrP/Gb",
	"Af7F8S5BgbyMo14OkL2XIVxf8hUXPCkMR8keNnkjwakcdObG3XZDvsPxoacKZWaUZJDcqha50YBT34nw",
	"+MiAdyTFej03oscbr+yLU2Yl4+RBK7NDf3//xkkZhZCxUkfNcXcShwQtGVxi7F58k8yYd9wLmU/ahbtA",
	"//t6HrzIGYhl/izHFIFvRUQ79VUga0u6i1WPWAeGjqn5YMhg5Yaak3bFvS/v9PPG577zyXzxsOIfXWB/",
	"5y1FJPsVDGxiUA00up1Z/T3wf1PyrdhN3dTOCfEb+98ANVGUVCzPfmryOzvFViXl6Tbqz1qZjj83z0LU",
	"i7P3U7Ri1JZyDnl0OCsL/uxlxohU+08xdZ6C8Yltu/Vf7XI7i2sAb4PpgfITGvQynZsJQqy2E97qgOp8",
	"IzKC8zTliRru2a8bHFR3/LUCpWPJQ/jBBnWh3dLou7a4IAGeoba4IN/bZ922QFqVPlBLY0WV26oRkG1A",
	"OoN6VeaCZnNixjl/ffKG2FltH1vc3BY33KCS0l5Fx14V1DKbFh7s65THUxemjzMeS21WrTQW3lGaFmUs",
	"zdS0OPcNMJc1tOGj+hJiZ0FeWc1Reb3ETmLoYc1kYTSuejQruyBNmP9oTdMtqmQtljpM8tOrcnqqVMFL",
	"OHVF+7ocGZ47A7crzGnrcs6JMHrzFVP2NS+4hHZma53m7UwCPtO1vTxZcW4pJSp7jJUhuA3aPXA2UMOb",
	"+aOQdRB/Q4HcFrW9aZHSM+wVrUXTrXjaewLHZjfWlcr9K40p5YKzFCvBxK5m9zLYFB/YhKI5XSOrP+Lu",
	"hEYOV7TOah0m57A4WHnVM0KHuL4RPvhqNtVSh/1T4xNUW6rJBrRynA2yuS8X7OyAjCtw5eXwkbiATwrZ",
	"8isih4y6qpPapXFDMsK0mAHF7jvz7a1T+zFe/IJxFPAd2lxourXU4cNF2mgFTJONAOXW084NVh9MnwWm",
	"yWaw+7TwDx3hGNYtZ5ZtfdD9oU68R9p5gE3bl6atLYrS/NyKQLaTnpSlm3S4mHRUHtA7PojgiGcx8a6d",
	"ALn1+OFoI+Q2GkqC96khNLhERzSUeA/3CKMurNwp2m+EVktR2ILYEK5oLQTGI2C8YRyaZ7giF0QavRJw",
	"Y/C8DvRTqaTaioCTeNo50By9zzGGprRzPdx1qM4GI0pwjX6O4W1sakIPMI66QSO4Ub6vX/8y1B0IEy/x",
	"2UGHyH6FZ5SqnBCVYUZBp+ZzjHEYxu2ryrcvgP4x6MtEtruW1J6cm9xEQ0miqyrbgE5olsXqcn6LXwl+",
	"JVmFkgPsIK3qGnxlSVKsrtIuN9OnNjdRKriqipG5fIM7TpeKmBz9FidQPmWiGXxBkP0a1vvq9bv3r1+e",
	"nL9+Ze8LRVRls0SNzC2hMAxxQU650mBE50oB+SVE4y/Y75fOguNgBrXeI0Qb1pv3hIi5Mqs9/hurkzdM",
	"QC5W5MbRij4wBDveWLxvj9QTzs3RSxTbJNMxgVff3dHRTH2789j0v9cDmYtNG5AvXMFijBmHexRjw6/N",
	"/RYWeOgVf7Q3YF1/AWMDhX+hB7XbOnO4zTzxxu1Vg0SfVP0CyLidZPgtjzne0QMRwkHdDmrFAOvkHIoT",
	"TgfD2ql2CXaaklFOOZi0ZIOMbHqSfYg6auAdCiyycUXmc6/3NAG2pw7g2KMI9RFrfYD+5sNhSUmZ8+A3",
	"zKKPWRc4P2zVHDt0zQZ3F+HC0QcNi/EHFYZL6DRlc/AaKIViTcHa2EsLE8OlzvGxhKAEUH8sH6twCak2",
	"Qn3gg5UANykIZCYL3oX5dymdAfWjjipzFXTGyub0SxMfYDa9zJYgO8uWdV1MLxJzUkfaoP8fX2bZAHdP",
	"s7Rj1idHzq7XkGp2eSCT6B9GS22yVOZej7VPrAWJRayOxPRP399QvW4AGkv0GYUnKC13Z3CG8gguYP9A",
	"kRY1ROvMzj3Pu00NAsQAcgdXDT3mybaGN+dcZKqmDMSCjxxxtdKbak6DjyYEeXG3nMuTJKFhrtzIlJci",
	"prlPmst0vVEGKQYVDiUb9UtsDwtCr7CiuaofvKnftg+0GnLar/R25WogYN5XbWv21RBA+d98kqedJWcX",
	"ED7rgJb9Kyoz3yKqqnotOBm5j3oZQr48dBfodT0za+L8+jkhkdpBGM2Z5kIxvkmGQmLboXXhe6sYQIDX",
	"AdYuR7jWIN1zLmhCzoWCRAsfFzgGxxgq3Nugt0GCGqzXZ4EbrKLxvikTghVQKVbNoC44Ilyg0VupgU4G",
	"xTyG5xxD9kv73SdB+AqYEzRyR6/JwWocPsKTqR4SQ6pfE3dbHk6uuI3Wyzi3z3upWGUPblAZWo9LKbIq",
	"tRd0eDAaG8PUujkjrCSqMKb9VfZk/xyrSL0JUtUuYL+08ne6pbwp59U+1laEsmsIUsM7u32vBoG47pNv",
	"7AI29wLn76lUz2elEHkyYC4+7Rco6Z6BC5ZeQEbM3eFjowaK/JOv0EpZ+wOvtntfkKMsgUP2cEGIUcuL",
	"Uu+9a7Bda7czOX+gx+bf4axZZWsGOX1/8ZHHw/qwmo+8I3/zw4xzNQWG+d1xKjvIgfIXu4HiKJJeRZ68",
	"mPqKcMRZ132GoCEqC0VMSrllLvSk893X+SOkH9ThH9d+wlIJTQyWtKYjlJa8QacrvPzQWISmvQjgOxwA",
	"L1SKgzcBPDdy4PzOgVI/1EgJljJICa3lH9Kz/ePXNV8KtkhhZL1Zpi1cY53s7X0JjCjqZW2biOO5b8LA",
	"ugiCY62YvulDoSkRS86GhGPOpbyk+Zc3X2DBjBPEh3ssLL7QUP8NkWxRqW4XrfCGTpo70HXvb2r+Ds0t",
	"/wCzR1EbsBvK2VHrtxh8CUksjUZzkovmTRYcklzhmNZo/PhrsnKR1qWElCnWSUK58tUwa3UPi0M3b8iN",
	"65eH1vmT0HcgY6cgiJK8bSrraYH3QwNhc0R/Z6YycHKjVB6jvh5ZRPAX41FhyvOB6+KiZU22lUo70RxC",
	"wj1blQM39g2tyv1k7qnLw3XgpVMp6K9z8m3dwm3kom7WNtUl0kfuWPm1KZ6MeFVF0x1dKRYhWJKUIKjk",
	"l8e/EAlrfHNAkEePcIJHj+au6S9P2p/NcX70KP6S4JdyorSeW3fzxijmp6HoPxvhNhBo2tmPitnnDMcI",
	"oxU23Lz/gYGxP7vEgd/lBZKfrT21f1Rd7fabuG+7m4CIiay1NXkwVRAQPCEW2HVbRB/EV5BWkuk91jPw",
	"5jf2c7RO1Pe1xd55fOoMWHf3aXEBdUWMxr5fKX+7fi/sA/qFkanRea7xMbjXO1qUObiD8s2D1Z/h6V+e",
	"ZUdPH/959Zej50cpPHv+4uiIvnhGH794+hie/OX5syN4vP76xepJ9uTZk9WzJ8++fv4iffrs8erZ1y/+",
	"/MDwIQOyBXTms+dm/xuf6UlO3p0m5wbYBie0ZPUbkIaM/QsBNMWTCAVl+ezY//Q//QlbpKJohve/zlxy",
	"zmyrdamOl8urq6tF2GW5QYNeokWVbpd+nv7be+9O6wBrm/CNO2pjZw0p4KY6UjjBb+9fn52Tk3eni4Zg",
	"Zsezo8XR4jG+rFUCpyWbHc+e4k94era470tHbLPjz9fz2XILNEf/l/mjAC1Z6j+pK7rZgFy4pxLMT5dP",
	"ll6UWH52xszrsW/LsOro8nPL5psd6IlVCZeffbL9eOtWNruzdQcdJkIx1my5whyeqU1BBY2Hl2JfAl9+",
	"RhF58PelS2yIf0RVxZ6BpXeMxFu2sPRZ7wysnR7uEdnl5+al7GvLJHKIuUFsPgANHtaeE6YJXQmJWe46",
	"3Rq+4NNrmWo/rF4T+WlmiNv0elm/Gh5UFjv+0JPy7UDEj4ScwJB5c1BbMzW8WMsKwmJX9U3Tat/cNx+O",
	"khefPj+ePz66/pO5T9yfz59eT/RnvmweHT+rL4uJDT9hbipaZvH8Pjk6usP7byc8fAEdNyl4ZrBX7sE9",
	"KFwMae9uqzoDkRoZB3LoOsMPPBH87IYrHrUftaKHIs+5fEsz4lNkcO7HX27uU47eZMPXib23ruez519y",
	"9afckDzNCbYMiiJE3qfmF1xccd/SCBlVUVC598dYtZgCcZuNVxndKLQmSnZJUbbjgrcqvc8+oQU7Fl45",
	"wG+UprfgN2em17/5zZfiN7hJ98Fv2gPdM795csMz/8df8b857B+Nw55ZdncnDusEPpurubQP0zZyYPeR",
	"ktjPy8/tIrktyVZtK52JK5sWHGXlWAmO5q5sDJouazVIC+IHaELRyI8ujDffo72WZUAopkGKSjd6quns",
	"HYyNJ8GM0DxgtGEcJ0CTMM5i6yPRIMhDQSq4fe6jc204yN6KDPrXBl4Mv1Yg983N4GCczVt8w218pBrR",
	"ndlw/5hf34ws0HRt/S597aR+46P19/KKMm0uFxcThhjtd9ZA86VLmOv82gR/975gRHvwY/uJ/civy7qg",
	"X/RjV0WMfXUqkm/U2IBCmwrueW1N+fDJbB3Wg3Hk0JgIjpdLDKTYCqWXs+v55475IPz4qd4tXyig3rXr",
	"T9f/PwAA//+sp7Hhbq8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
