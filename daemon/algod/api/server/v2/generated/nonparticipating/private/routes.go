// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9abefrz9fwEAAP//O3QSLr3mAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
