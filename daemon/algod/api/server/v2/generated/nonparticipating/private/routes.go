// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"N9pXVKo3/PbD7f8NAAD//275zXD47AAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
