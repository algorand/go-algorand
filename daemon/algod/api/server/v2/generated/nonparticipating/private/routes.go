// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"b43ZywAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
