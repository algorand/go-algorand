// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
