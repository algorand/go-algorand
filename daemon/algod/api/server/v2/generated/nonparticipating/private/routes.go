// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "initialize" -------------

	err = runtime.BindQueryParameter("form", true, false, "initialize", ctx.QueryParams(), &params.Initialize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter initialize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
