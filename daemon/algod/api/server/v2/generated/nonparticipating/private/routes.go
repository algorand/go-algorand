// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /debug/extra/pprof)
	GetDebugExtraProf(ctx echo.Context) error

	// (PUT /debug/extra/pprof)
	PutDebugExtraProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDebugExtraProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugExtraProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugExtraProf(ctx)
	return err
}

// PutDebugExtraProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugExtraProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugExtraProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/extra/pprof", wrapper.GetDebugExtraProf, m...)
	router.PUT(baseURL+"/debug/extra/pprof", wrapper.PutDebugExtraProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//3C4ffarCwEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
