// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
