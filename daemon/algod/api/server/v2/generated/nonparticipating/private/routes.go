// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
