// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bwAAAP///DnbH7fsAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
