// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+PFTtZm+tlK1qbefbv9/AAAA//+uC1LfHccAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
