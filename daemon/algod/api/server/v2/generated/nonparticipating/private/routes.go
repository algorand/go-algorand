// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
