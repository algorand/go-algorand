// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AgAA//9mOTBBexABAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
