// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
