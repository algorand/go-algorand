// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
