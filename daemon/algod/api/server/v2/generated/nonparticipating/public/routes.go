// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//DVhy3cKLAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
