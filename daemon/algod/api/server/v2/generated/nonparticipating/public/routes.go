// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "header-only" -------------

	err = runtime.BindQueryParameter("form", true, false, "header-only", ctx.QueryParams(), &params.HeaderOnly)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter header-only: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/5929Y4ZwQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
