// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "header-only" -------------

	err = runtime.BindQueryParameter("form", true, false, "header-only", ctx.QueryParams(), &params.HeaderOnly)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter header-only: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"mGpMiEdPpo+O3v1/AQAA///gtVz5SMMBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
