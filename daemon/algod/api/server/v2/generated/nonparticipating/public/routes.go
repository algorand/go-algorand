// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate/extended)
	SimulateTransactionExtended(ctx echo.Context, params SimulateTransactionExtendedParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// SimulateTransactionExtended converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransactionExtended(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionExtendedParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransactionExtended(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)
	router.POST(baseURL+"/v2/transactions/simulate/extended", wrapper.SimulateTransactionExtended, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"WwEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
