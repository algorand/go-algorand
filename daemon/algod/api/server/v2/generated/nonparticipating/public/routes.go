// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Get the block header for the block on the given round.
	// (GET /v2/blocks/{round}/header)
	GetBlockHeader(ctx echo.Context, round uint64, params GetBlockHeaderParams) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetBlockHeader converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHeader(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockHeaderParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHeader(ctx, round, params)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/header", wrapper.GetBlockHeader, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
