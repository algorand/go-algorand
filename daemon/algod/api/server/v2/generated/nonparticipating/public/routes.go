// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

<<<<<<< HEAD
	"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",
	"Pv//AAAA//8eREHf9ScBAA==",
=======
	"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",
	"6f8HAAD//9OxGydsPgEA",
>>>>>>> master
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
