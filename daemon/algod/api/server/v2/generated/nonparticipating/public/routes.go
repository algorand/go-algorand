// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
