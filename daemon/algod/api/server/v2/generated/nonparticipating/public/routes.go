// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"VUi2wnJ6Hz79/wAAAP//VlRZNeFZAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
