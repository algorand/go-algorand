// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"D0Yf/28AAAD//zfUR8QPsQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
