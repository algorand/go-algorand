// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address basics.Address, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address basics.Address, applicationId basics.AppIndex, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address basics.Address, assetId basics.AssetIndex, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId basics.AppIndex) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId basics.AppIndex, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId basics.AppIndex, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId basics.AssetIndex) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round basics.Round, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round basics.Round) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round basics.Round) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round basics.Round) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round basics.Round, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round basics.Round) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round basics.Round, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round basics.Round, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round basics.Round) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round basics.Round) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId basics.AppIndex

	err = runtime.BindStyledParameterWithOptions("simple", "application-id", ctx.Param("application-id"), &applicationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId basics.AssetIndex

	err = runtime.BindStyledParameterWithOptions("simple", "asset-id", ctx.Param("asset-id"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId basics.AppIndex

	err = runtime.BindStyledParameterWithOptions("simple", "application-id", ctx.Param("application-id"), &applicationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId basics.AppIndex

	err = runtime.BindStyledParameterWithOptions("simple", "application-id", ctx.Param("application-id"), &applicationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId basics.AppIndex

	err = runtime.BindStyledParameterWithOptions("simple", "application-id", ctx.Param("application-id"), &applicationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId basics.AssetIndex

	err = runtime.BindStyledParameterWithOptions("simple", "asset-id", ctx.Param("asset-id"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "header-only" -------------

	err = runtime.BindQueryParameter("form", true, false, "header-only", ctx.QueryParams(), &params.HeaderOnly)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter header-only: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithOptions("simple", "txid", ctx.Param("txid"), &txid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithOptions("simple", "offset", ctx.Param("offset"), &offset, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9e5PbtpIo/lVQulvlx0oa23GyJ/5Van8TO4/ZOLbLM8m5u7FvApEtCWcogAcAZ6Tj",
	"6+9+C40HQRKUqBmNH8n8ZY9IAo1Go7vRz3ejTKxKwYFrNXryblRSSVegQeJfNM8lKPxvDiqTrNRM8NGT",
	"0TEnNMtExTUpq1nBMnIOm+loPGLmaUn1cjQecbqC0ZMwyHgk4Z8Vk5CPnmhZwXiksiWsqJ1Wa5Dm29+O",
	"J//zYPL123df/u39aDzSm9KMobRkfDEaj9aThZi4H2dUsUxNj93473c9pWVZsIyaJUxYnl5U/QphOXDN",
	"5gxk38Ka421b34pxtqpWoycPwpIY17AA2bOmsjzhOaz7FhU9pkqB7l2PeThgJX6Mg67BDLp1FY0XMqqz",
	"ZSkY14mVEHxK7OPkEqLPty1iLuSK6vb7Efkh7T0cP3zw/n8FUnw4/vKLNDHSYiEk5fkkjPs0jEtO7Xvv",
	"93jRP20j4Kngc7aoJChyuQS9BEn0EogEVQqugIjZPyDThCnyX6cvXxAhyc+gFF3AK5qdE+CZyCGfkpM5",
	"4UKTUooLlkM+JjnMaVVoRbTALwN9/LMCuamx6+CKMQnc0MJvo38owUfj0UotSpqdj9620fT+/XhUsBVL",
	"rOpnujYURXi1moEkYm4W5MGRoCvJ+wCyI8bwbCXJinH91eM2Hda/rui6C96ZrHhGNeQRgFpSrmhm3kAo",
	"c6bKgm4QtSu6/ubB2AGuCC0KUgLPGV8Qveaqbylm7oMthMM6geizJRDzhJR0ARGep+QXBUhJ+FSLc+CB",
	"Oshsg49KCRdMVCp81LMOnDqxkIgOpKh4ilERfODQ3MOj7LeHZFCvccT3258ptnCP2lCfssXZpgQyZ4WR",
	"l+QfldKBgCuF274EokrIDO/NiRnGIF+xBae6kvDkDb9v/iITcqopz6nMzS8r+9PPVaHZKVuYnwr703Ox",
	"YNkpW/TsQIA1dU4Vfray/5jx0kdVr5Oy5LkQ51UZLyiLz4KhlZNnfZRhx+wnjTSDPA56A+6PG+tsffKs",
	"j6Vu/0Kvw0b2ANmLu5KaF89hI8FAS7M5/rOeI2nRufzXyKoX5mtdzlOoNeTv2DUqVMdWfzqulYjX7rF5",
	"mgmuwYrCSM04Qmb75F2sOUlRgtTMDkrLclKIjBYTpanGkf5Nwnz0ZPS/jmpF78h+ro6iyZ+br07xIyOM",
	"JRjGN6FluccYr4zyiKpWz0E3fMge9bmQ5HLJsiXRS6YI43YTUe8ynKaAC8r1dLTXSX4fc4ffHBD1Vlgh",
	"abeixYB694LYF2egkPad0ntHNTRFxDhBjBPKc7IoxCz8cPe4LGvk4vPjsrSoGhM2J8BQnsOaKa3uIWZo",
	"fcjieU6eTckP8diXrCiI4MWGzMDJHcjNmJZvOz7uFHCDWFxDPeIdRXCnhZyaXfNoMHrZIYgRtcqlKIwI",
	"3ElG5uUf3bsxBZrfB3382VNfjPZ+ukON3iEVqcn+Ul/cyN0WUXVpCr8w1HTc/vZqFGVG2UJL6qRG8KHp",
	"Cn9hGlZqJ5FEEEWE5raHSkk3XoOaoCbUpaBfFFjiKemCcYR2bBRyTlb03O6HQLwbQgAVNG1LZla9umR6",
	"WatcAfXTzv3i8ybk1J4Ts+GUGd2YFExpowzhZiqyhAIVThoMCzEVXYloBtDClkUEmC8lLS2ZuydWj2Oc",
	"0HD/srBeU5IPFLJJmGOzRY13hOrKzHwnw01CYg0OTRi+LUR2/iNVywMc/pkfq3sscBqyBJqDJEuqlokz",
	"1aLterQh9G1eRJols2iqaVjic7FQB1hiIfbhamX5lBaFmbrLzVqrxYEHHeSiIOZlAiumzQWYcTwBC3YB",
	"3LKeKfmOZkujTJCMFsW4tkuIclLABRRESMI4Bzkmekl1ffhxZH9RwnOkwPBBDSRajbNpTMnZEiTMhcSL",
	"qgSyoiicVuZ6VBbNbwJzVXQFLd0JhaWotIExurmcPPOrgwvgyJPC0Ah+WCNe+OPBp2Zu9whn5sIujkpA",
	"QwvjWVHlNf4Cv2gAbd6uRS2vpxAyR0MP1eY3JkkmpB3CCn83ufkPUFl/bKnzbilh4oaQ9AKkooVZXWtR",
	"9wL5Hup07jiZOdU0OpmOCtM3Oss58DtUCkEmrBsv8T+0IOaxUXAMJdXUw1BPQZ0m7AfKbIMqO5N5wfAt",
	"LcjK2s1ISbPzvaB8Wk+eZjODTt531lTnttAtIuzQ2Zrl6lDbhIP17VXzhFibj2dHHTVlK9OJ5hqCgDNR",
	"Ess+WiBYToGjWYSI9cHF2rdinYLpW7HuiDSxhoPshBlnMLP/VqyfOciE3I15HHsI0s0COV2BQunWcIOY",
	"WWpT9fFMyKtpEx3XRG2AJ9SMGilT4xaS8NWqnLizmTCP2xdaA5FgXtquBLSHT2GsgYVTTW8AC8qMeggs",
	"NAc6NBbEqmQFHID0l0klbkYVfPGInP54/OXDR78/+vIrQ5KlFAtJV2S20aDIXWfnI0pvCriXvDihdpEe",
	"/avH3iHSHDc1jhKVzGBFy+5Q1tFiL8b2NWLe62KtiWZcdQBwEEcEI9os2slr+9378egZzKrFKWhtLsGv",
	"pJgfnBt2ZkhBhy+9KqVRLFTTKeW0paPcvHIEay3pUYlvAs+t682sgylzB1zNDkJUfRuf17PkxGE0h52H",
	"Yt9tqqfZxFslN7I6hOUDpBQyKYJLKbTIRDExeh4TCdvFK/cGcW/47Srbv1toySVVxMyNDrCK5z0mCr3m",
	"w+WXHfpszWvcbJVgdr2J1bl5h+xLE/n1LaQEOdFrTpA6G5aTuRQrQkmOH6Ku8QNoq3+xFZxquipfzueH",
	"sZEKHChh4mErUGYmYt8w2o+CTPBc7bTmeG9gC5luqiE4a2PL+7J0P1QOTacbnqEZ6RBnud/65Vx9RG14",
	"FpnCDIwF5IsGrd6oyasPUxaKOyoBqcHUc3yMHoFnUGj6vZBntbr7gxRVeXB23p5z6HKoW4zzOeTmW29R",
	"ZnxRQENTXxjYp6k1fpQFPQ1GB7sGhB6J9TlbLHV0v3wlxQ3I0OQsKUDxgTUuFeabronphcgN89GVOoDq",
	"WQ9Wc0RDtzEfpDNRaUIJFzng5lcqrZT2RO2Yg5pVUgLXsZ6L9gymyAwMdWW0MqutSqJFSr7UH05oZk/o",
	"BFGjesIcQqiGfctOt6QXQGghgeYbMgPgRMzMousoB1wkVaQ0urNT65xKPJTfNoAtpchAKcgnzp69E17/",
	"npU/egvycDW4ijALUYLMqbyZFZxf7AT+HDaTC1pURj3/6Vd171NZhBaaFju2AN9JbUTbfNddyjVg2kbE",
	"bYhiUrbWQnsSjIptmE4BGvqQfX3s9W5/G8wOEdwQAi9AYkTNjR4tP8kNEGWA/4YP1o0soSonRg3sNT8Y",
	"zdXsN6dceN1wxwxhgoIqPdklUsxLDbuJWWrExVNSBAfu0SefU6VRDSSM52i/taIQ57G6pZlitGdQGU7Z",
	"exszk/7qL2LdaTMj3rmqVLiVqaoshdSQp5aHPuveuV7AOswl5tHY4eqnBakU7Bq5D4HR+A6PzhCAf1Ad",
	"PNTO591dHEYdGPVlsy+WG/DVONoG46l/K0J8HFTbAyNT9R5YcmOqRW8zIQqgaDJVWpSl4VB6UvHwXR8G",
	"T+3bx/qX+t0uSVo3kNVUcgEKXUzufQf5pUW6Ql/Xkiri4PDxCWjwsiFyXZjNsZ4oxjOYbDsveAk2b8UH",
	"50rHvSoXkuYwyaGgm0S0hX1M7OM9CcOPjQRS2w+EhskMvYlpGqnPhI83vdqsAqdSKcWb4BOSmXNurlE1",
	"qbmvrz5pDjhtim86Yr0TZkEwknTgx0NkWXpKjIiy/0JoQ1aO6HA1Tipdcy092Auz3ggCcdxJbQhoz/7f",
	"oNzcQQE76PwbUH0Lr6c+1LJ7zP8o2xsCsyXKWtImKSJ6+fIOxtjHg3p8Ea+o1CxjJV5Xf4LNwW/v7QmS",
	"sRIkB01ZATmJHtibfBl/T2wYcnvMq93mB5lbu+B37K2J5fjIrCbw57BBs8krm9EQWasOYY5IjGoELuUE",
	"AfVR8+bGE78Ca5rpYmMUW72EDbkECURVMxu10nWhaVFO4gHSOVP9MzqHfNIdvjVC4BSHipaXijy0t63t",
	"8J21rlwNdLhbVilEkbB/tk98BxlJCAaFC5FSmF1ntCg2RIe0GU9JDSCdgMBojKDP3FENNOMKyH+LimSU",
	"4w230hCUNCFR80Fl2cxg1M0wpwtVrTEEBazA3ubxyf377YXfv+/2nCkyh0sbcsPxxTY67t9HU9wroXTj",
	"cB3A2m2O20lC6KCv0ghZd2tr85TdQW5u5CE7+ao1eHBwmjOllCNcs/xrM4DWyVwPWXtMI8MC/HDcQe67",
	"ZkhYZ92476dsVRVUH8JRCRe0mIgLkJLlsJOTu4mZ4N9d0OJl+Oz9eARryAyNZjDJMEtw4FhwZr6xiYVm",
	"HMaZOcA2cWQoQHBivzq1H+24addxy2y1gpxRDcWGlBIysFlyRktVYalTYlMmsiXlC7wBSVEtXKizHQcZ",
	"fqWsJUxWvDPEvqqYXvMJujBUMk0N3ZY+29IoYUDNzbbt/7CXtUsaQLHCaJDQjran7Q9KukzHo96Lv8H3",
	"RX3xt3hrpoxe1ZnY0A8jpNXQDPSeIT6NrtRFYryN5vAZYrgZL009dArK7sRRUHj9sC8u/LQqy2JzACXJ",
	"DkQklBIUirTYDKjsUzEnP7NMiuNiIYLMUxulYdV13thPf+85rq+vcgMWvGAcJivBIXGlf4lPf8aHg82O",
	"Vgz3jIgK0V4Dti8+DSS0FtCcfAhJX3eTkGTaZ7/t6VTfC3koL7sdcPCdYoDnemdYh5vyqv51WhQJl7Q1",
	"P3S4iBqHoHAmCVVKZAwVxZNcjV30ufVi27D2FvpfhdSoAxzg9rgt32uUhmUN+VCUhJKsYGjmF1xpWWX6",
	"Dado6YuW2r3pzKiCyRxgu1fWvNVA2RyA3MUSASAxKu5e09Shl/CG6zU34vaCFiynGqZ7OBC8yaLfWP3U",
	"v5K2jieM126oN5xi+GqwSibDlZIo+R6AMHN9N6oICmtyooNaAesSow1xi0BODFoQUaAyOlDNqFGwAA6K",
	"qUk6+vEH+xQTTZwVfemSTjD/wj72UdB1vYiRAapRyOL/3P3PJ78dT/6HTv71YPL1vx+9fff4/b37nR8f",
	"vf/mm//b/OmL99/c+89/SyHPw55KEHeQnzxz9/aTZ3g5i3JH2rB/Ck6aFeP9p8SH7lz3gITQJH/sOOhL",
	"Ic8DCV9VCeseJ0vgLSprbFzLtOcRsOcV6RrsiyS4V4vn3oiO155gaxBOvOWtvAPHl9TBAXQDp+Bqz5kK",
	"tb3zw3dn5MgRgrqDxOKGjsoNJG41LquxEfljdilO9nrD3/BnMMc7ouBP3vCcanpkT9NRpUB+SwvKM5gu",
	"BHniEyWfUU3f8I5o6i0qFSU6R1WlUpyCrtJrefPmN1osxJs3bzuxCV19y00Vc1F3zrqmMz/lxOgSotIT",
	"V9hlIuGSypR/xJf9cBnS+PVWOKyeIirtBI3N8XLjT4dCWZaqXQCii6KyLAyKIlJVroaB2VaitAjJZIaZ",
	"u3xcQwMvhAs0kfTSX4MrBYr8saLlb4zrt2Typnrw4AtMy6vLHvzheKCh200Jgy/DvQUq2ndgXLjV1THQ",
	"fFLSRcqP8ubNbxpoiRSC9p0V3j6LguBnjZRBnx2AQ9ULCPnJe2yJhWzvXF9c7qn9ypf6Si8KH+GmNvOp",
	"r7WDUab8lTdwR7Y9rfRyYjhCclXKHAO/V77oAF0YkeOjChRb4KVALUVllgwkW0J27qpdwarUm3Hjcx/8",
	"4mSxZzhMocLnEgbnzOAvo9wMWJU5dYoM5Zt22RtlEyRw0NdwDpszYT+fDqwYFlWoi8quqL6ji7QbyVpD",
	"vvFBdmO0N9/FYvm8UVeiBHMxPVk8CXThv+k/2lYBOMCxThFFo/ZHHyKoTCDCEn8PCq6wUDPetUg/tTzG",
	"M+CaXcAECrZgsyLBpv/e9XV4WA1VSsiAXfhM3zCgImxOmFZkZsUxwZoQRFK+ACPUjSAWihYYyD9NOv9R",
	"O1wClXoGVG+14fK49ISHDhXyS0ykRkPK2CwB1ma/mUbDCIdLc7HC+7h9xwUXT68UYmXXBPkVQfWf14nT",
	"06tcIhzCEzXuvLwPexLuCy5mLaZOBNk+XxkcLqS4VHhNz4nw5Ryx6EskpypFFzBUHDXcRwPLZDS8QjjI",
	"Lu0nqe+IeVut6egYAxdhP58YvCS5A5gnhj3gHb4V9ujntm5F52l4yYuNR+qsQIU6BI1a0qGy4Xvji/2A",
	"TbMxkLxWVj1gTazFR39JlT/6+Tji6FfUFj9OeZltNfVOoog8qrsV87yYbrP2MVlVShthLbj5wlfW8+X0",
	"fA290XivenjjkUt7SO2d4KhF51DAwuLEvuzprK7ZVO+mgePlfI5Mb5IK7osMlJFm4uYAcxG7T4i1opPB",
	"I6ROQQQ2ettxYPJCxIedL/YBkruaU9SPjbIr+hvSCYQ2Qt9oyaI0Up/1eLIyz1JcyYta5WmFPeMwhPEx",
	"MZz0ghaGk7pk1HqQTv02vPu0qrW5eI97fXeigQfNrRG1k71WafWZq6wvVrz9MtK3gr3WMBPric2WTl6t",
	"ZuuZORPJHAbM3U4dXltN744iM7HGOCOUcDbofW/o+iHzgEWhIWumkMrxuz610YK3HyDbFfkUNSskPWdX",
	"C2TXp8leDZgedbqP7O5GZfUOBFLLgFmXBncWnZ12lqa21dVEanE7DhVjQ+paitX0Hc7kTvZgtGs8bda/",
	"+7EugdhfMM2f1Q9S+K9rlLtOrUb7cWnrL+5TqrFNDg0gtmD1VVuJTaK1GczUxGuEtRRLMoy+62rqok1B",
	"AWgJmDT06sl5ylX95s1vClBnOPWfRXZO3D3KN/eiCDkJC6Y01M4FH/jy4X0/aE40ly0x71+dLuXcrO+1",
	"EEHRsC5a/LCxzA++AgxnnzOp9AQ9M8klmJe+V2hJ+968mlaEmzF4TFlXz956MEJ0DptJzooqTcoOpJ+e",
	"GYheBMmlqhkKSsZtBNIMy+Mng3b38E0iPDbYeyuCnlsEPacfAj/DDpZ51cAkDeU1p/9MjliLF27jLAla",
	"ThFTd0N7UbqF10b59V1GGynRUSjGdJvPp3Mucz/2zggtn+Xfp0TYkZJriaokppMKxWIBua/+5hJFbSUs",
	"V2OvEHxR1xc0v28pKTgltrIfFubbUtPPhaxDX8B6o8UIdspIQh9fZhDyOuMO6xHiJAvgtprLaP8eJEUS",
	"cXGwPL4RWUY/LG/vhNInw4nPWiHEdZyv3cOw2bg9BdDcXasU+PVtP7Td7XKoG/cFIjfKxm4/YDggUhzT",
	"KlJgOkTTw7lpWbJ83XL82VGnVyCJgepetzp8C2fIltxgO/DTDDbe0b/njpGO+L5zdhzhNf/IXDJtjLOL",
	"0jVng2auAkFeSfQmNSKIuzX2w0Vz4Np/+vVUC0kX4DyCEwvStYbA5eyDhqhMvSKa2eimnM3nEHvC1FW8",
	"OA3gOv6OfABh95Bg110W7pZb6bNLZDtoq17BboSm6SlBKX0xF2ddf6S/eES2tSBsoo27glMxWWTgJ9hM",
	"fqVFZW5CTKo6XtU5CJtifQ+auFj9BBsceWcYqAFsx66gKe41IIWmvCvhkYoqh99RjY4MeAdubOEeO3Wc",
	"3qUDbY1rr9F/NGoJ1egx0VzKzR2bOkTGQDpkr07TUSfmbEFzW9qEvmuLWL5b94muIPFUDKM3riLkQvWN",
	"ndFlQAtP+LjY0fvx6HrxHik56UbcsROvgmhO7gJGY1r/fyPoa88NoWUpxQUtJi5Opk/pkOLCKR34ug+r",
	"+cD3q/SpOPvu+PkrB/778SgrgMpJMHX0rgrfKz+bVdm2HNvFkC3R7my71hQWbX4oox1H0lxiOfaWNa3T",
	"/6aOm4oOqousmafjtHfyTRfiZZe4JdQLyhDpVXukbaBXM7iLXlBWeMevh3aold0ud1jHpSSfiAe4dpBY",
	"FP137bF6o/TfvPntwmO29qfYQKlQJj8RS6euGOnc4TXps1rT+g4Oiet8idVN0/cu7mqfImN0AWf04Hrg",
	"90I2BJXLdEwGrN2cgmguExaPaaf8mfPCd9TCKbEq5B+LPwxvuH8/Pvj374/JH4V7EAGIv8/c73iPun8/",
	"6RhOmvoMy0JLHqcruBfyIno34sOaIThcDlMXji9WQUcW/WQYKNRGnnl0XzrsXUrm8Jm7X3IowPw0HWKq",
	"iDfdojsGZsgJOu3LVAzBzyvb4lMRwdt5+Zg5a0gLRY/r6mH97N0jxKsV+p0nqmBZOuiHz5RhSdyG9GKW",
	"Dr482Ids5qhYT1w5r1g0unlNXcnl2VpINGsS4SpZHbjG70w4FlBx9s8Kola/KIlbwtlfhXDUjoKdti+6",
	"gdudhEdXaQJ8fReht6ptMxhtdbk+C25Aj4hU76k98x3iGTvMf0uugqMoLz45czEagyhr6z1ve2No5wb2",
	"7NN5XPsvSK5Fpt3MZ0N2mqnJXIp/QVp3QCdhopyH924zNMD/C3gqRrXNyELkQN3Eup59F4EMty30kcq1",
	"bQl+0aGT3lVEeJpP7LfRexoNov3uNxuodMlxtwl9F9U48KSZSNPDzPDARmHh2N/Hh7tRbk+orXXRyDxL",
	"n/O44suRHb8+5w7mTi59QS9nNNX8yNwXDUzR9jcC87Qg/mO/QSqUa7CzkyiXIbzLbAHAEmTtPeqWT77i",
	"3c9OO/jWV1/ykOLi693YxqoUSiSGqfgl5RhHiN9ZDui+VmDjMMxXl0Ji0U+VjiHMIWOrpDH8zZvf8qwb",
	"+ZWzBbNtxisFhM61q/3oBrKN5i0VuQ7foT6JQ83JnDwY12fW70bOLphiswLwjYf2DUyzNmsLR99/YpYH",
	"XC8Vvv5owOvLiucScr1UFrFKkHA/R9UzRMLOQF8CcPIA33v4NbmLAcOKXcC9tIBxytroycOvx9u6aSPG",
	"sXH8NiafI5f3iQxpysaoajuGYatu1HRmwlwC/Av65cmW82U/HXK68E0ngnafrhXl1CAkBdNqB0z2W9xf",
	"DOVo4YVb7wwoLcWGMJ2eHzQ1HKsnm9wwRAsGycRqxfTKRYoqsTIUVrcmt5P64bDnnm+N5uHyDzEEu0zc",
	"8T/CdYuuejIcMar+BfrbY7SOCbVVXAtW51/4rrXkxFerxl5xoUWcxY2Zyywd9VVMx5iTUjKu0WpU6fnk",
	"b+b6LmlmGOK0D9zJ7KvHiZ5rzbZEfD/APzjeJSiQF2nUyx6y91qO+5bc5YJPVoaj5Pcc32+eyt5Y8XR8",
	"b1/Ycc/Q19auzbiTXgKsGgRII25+LVLkWwa8JnGG9exFoXuv7IPTaiXTBEMrs0O/vH7uNJGVkKnuFzUD",
	"cFqJBC0ZXGB+aXqTzJjX3AtZDNqF60D/caPbvFoaqW7+dCcvC5FXOXFPC6WWjKb/6891zXx0btu83Zb1",
	"UsiEndZZHD9wWOp+9sK2D92GA+KzHswNRhuOkigllE73sPkc4ZuPEe/VBsnuecNU+vAPIs09HnX9+/cR",
	"6Pv3x05V/uNR87Fl7/fvDw+ZTdsLza8J1FxN1rQrWppvU1v9rUhY73xnzxA35kqVJCysSVlmROrMjTEm",
	"zfaJH17vOEy+4t5hyOkD5FGDj9u4+cj8FTezzoDp5w/NjrJJ8snD8yiHgpJvxXooEbXElqenTwBFPSgZ",
	"aBXElXQ65iYjJXaG+URka0adQSHMTTVuijU4auUz2gWDmvGWvahYkf9ae6FbkklSni2TQeUz8+Hv9hoQ",
	"vRBZMLIl5RyK5Nf2tvy7v1Un7v3/ED3DrhhPP2o3Z7awtyCtwWoC4af04xtcMV2YCWIUNQtyhRInxULk",
	"BOepu5nUrLHb5TzVXTaR44/DrirtopKxeIJrMjJnBYbRpv3h+OZEUt3DVSWm3s7rEbEzv7JmCTs6SELZ",
	"CsW2oquyADyEFyDpAj8VHFqfY8U2HDlqVUJUiXUQzZtY/EUQXUlOxHweLQO4ZhKKzZiUVCk7yAOzLFjj",
	"3KMnDx88eDDMyYj4GrB2i1e/8Jf14h4e4Sv2iesGZpso7AX+VaB/X1PdPpvfJS7XkvWfFSidYrH4wCZk",
	"o4fYyHXbjjW0Dp6SH7A+mSH0RtsANIr6qsvNOqFVWQiaj7FQ9Nl3x8+JndV+IwFRh+1gF2gBbB6RpJNn",
	"eN1UX3+tp3bV8HG2l84xq1Z6Ehq1piopmjfq/rKsFf2EtsEYO1PyzJplQ2CPnYRguXG5gjzqC2vNAEgc",
	"5j9a02yJ9s7paKtJuadD0PC2xp4D1u6iKO81NNFCDm6W4Tob28bGYyL0EuQlU4B1J+ACmgUbQ61RZ5D3",
	"BRybq5UV55Zwpntor6Fl1r674IGzqq+Pr0hC1tqHa/v+6koe2Ph83wbQp/hVOm+n1U26Ffdg22isfSOO",
	"KfnZOTsyygVnGTagSKngWIpxmFt1QK+OtL9TjdxZThzDZA/rkKDusNjb1dqzTIe4blBD9NTstyUc+6eG",
	"tWsMuACtHA+EfOxbyjsHHeMKXFM0Q18xRxUyEfqVTIsJISQHDEkfj7CaWo+t9Xvz7IWzzWPNmHPG0ebm",
	"kOpugtbBViiGfnZOmCYLAcqttpkXpn4z30zP1hxBeDt9LhYsO2ULHMOGIhqk2Cjg7lDHPibYxeCad5+a",
	"d10/g/BzI6TOTurX/TbJQlTY/1Qf9l70p2K/fCBNhNwwfjzaFmLcGuqPctmQIVxg5B+UKM87ZBNa2jdH",
	"+c5cWS294RvEZu4mywYzngDjOePe4Zuug5UlZQluDJ7mnu9UJqm2l45BHO8MaNGTDoNJ9TZi4LpDtbsz",
	"GJTgGv0c/dtYd+PvYSvhhfp2QfmG+ENhqDtSSp7SIgTDJ3rro3bmlDEbLNzqtp9iK4atT3xqbgNdOxNB",
	"w+fYIWVfOdVXbXRW5QvQE5rnqbpz3+JTgk99QiGsIatCY7CQZ9os4d6lNjdRJriqVlvm8i9cc7qcKaoU",
	"rGZFIvT2WXgIedhhLEQ12+C/qa5Y/Tvjgt73zv72Ee75fn0LutnsKe3Z0PREscVkOCZQplwfHfXUVyP0",
	"+vuDUrpP/P4k8rpbXC7eoxR/+84IjrhMdyfG34qWUEUb4+kFPvf1wEIl1yZXQlHW6f2GERm4eYktawHv",
	"X0wCfkGLnooLsdfGylfryeiru5D1lhWh2lWv05TUPGGICaO//peNwG55hrruzb4YaxtifZPOE4ePrUjv",
	"9zT+1PAr2qi3mqH0+hOv5vKriWBfn59rxdC1l9KiENlgzuCGOTYf9ZfqFauVq3yfiMq7WIk8PgtxNBdA",
	"mrHZgOVEagVebJPP8GqVfCIv06M17COBaIZWLUM0uiWMbWKmB88DY6eOJ4pMtg6z5HtWYMOo/zp9+WLU",
	"v5HRDnS31JXOTpqw+zYmZKq1yWMhGvjYwgMEL9L2b9VjUsfaUOnT4DoWJx98bw2EQ0CydZL2efv50ME7",
	"BLAQtlNUqm9GtzrNqN4Oj/yIGurttRwlpo4UVbQ7MCXuPtboWb9CQnPSQc1KGzrSkIZPqS4+7qbgLbBW",
	"0Lh6dLbhUqdXU4eBPhuiHHbw8X48Osn3Up9S/alGdpQUg33OFkv9bSGy8x+B5iBtP5HUddJ2E1mBuYaq",
	"JSvx/lMKxeoewYUZzBXyXuJw06GpOWdLcFVhfJGAzlg+gPoCMo09o+swUAkwPM6hTC/RQOAdivjKRwgF",
	"kQA5lHq5VVmywd2lXtatRMFlnjFFZuBcFxfAx4RNYdpOVsvrolCkADr3RlgphB7QazekLSEaY6BT9NXp",
	"27xdDezUfItKGtr2utPhTViOQ06ATbS8pKquHNUqozA4XXs+hwwL3m8tv/f3JfCoHtvYm+4QlnlUjY+F",
	"dEFs2XBQi3YN67ZCeFtBjXpS3SSkfQUxzmFzR5EGDSW7BIcM26tUgEfkWD+ubyrQ59pwgZFMBXpCBPk4",
	"eFeAv+6xdJUmAFF1yiuC4WnciKe6YuXVoPEazRXAMJ9Or9XIvy6Hh4ppX3W/bsf1/pvyM2xwr1xQKQ3l",
	"5mN7Ejnptmi+dOXqsdBi8Bb6wvWg/G++QKudpWDnrkMNIsz6Zi+pzP0bBymTZ+UmSwM9DzOzOjGqG+Wz",
	"b1yOzVDMCmEUoElfYmgzUymE8N5RNta6LlqGUM9BSsiDT7AQCiZa+DSrPYp/uvTJLdizUeZXwlsron+P",
	"lGG7ot4eCq/rRhIrlklBsWcCdcHnMVaIhBU10MuouUPaDLprh57a576miG/vt928uqUnpj0Xu7tm+9Q7",
	"pjqYj0/XnDjlYG/u1ShEcgXLLOMc5MQ7cdutHXizTCbWVc6rzKoq8dkM1uvBZce2cLOkUTPrrrJ1hYqq",
	"cpzD5siafXwncr/jMdBWh7SgRwWlW0RxUFu1SsG9OAh4H7d8ZylEMenxDJ50+1G0D8M5y84BC7OGzBSj",
	"Bd9pHhszCbmLDqkQM3K53PhuC2UJHPJ7U0KOuc0O9OEjzQ6krcn5Hb1t/jXOmle2w4yzQE/f8HSaFXZ6",
	"kdfkfn6YLTyvjzcpMPzymvPbQa4wu17zvhi5S2wJY+ZI8tzt5o1ufEdLhYrIz0KRUqBOrSP4KbKExD2K",
	"YHWWqIwQxgdQ4hzIRBUiFYV/lQoyZqg0puLJECANfMB1tYbCDZ5EgAuy21GV1T32dUfFnEioYzOuWoDV",
	"1TS1TFz1mUbaM4dZmpxxLiTEM2KcqS3UHDLbsM4x/mfGtKRyc5UyqU1UpcxQvVjeGS0ZAiXrhdTBkl0c",
	"FoW4nCBbm4TuSilzgHlPNcW271Naf2eO+gyisEuqnIq4IUuak0xICVn8RTrF20K1EhImhcAozFRgx1yb",
	"S8IK8zo5KcSCiDITOdhGaGkK6pur4pyi7gVRKFsSBZZ2sGSA/Sai44FTGulr3bMT1Nd2Ntrwm39mvrHl",
	"K+ryd3bRExsi0JNfAMqVu3MYsi934UXCsRWZ2kbZtIo8Z2ukG5CpIz8nWlYwJu6Ndmd+d/CpBLJiSllQ",
	"Ai1dsqLA6hFsHQU0hHigNGp7dOcTjIO+YBjw1qwkYlXq0kjHUH4l5gGncUU2opdSVItl1B8gwOmv7rJy",
	"F/t4lF9UhTGJmCJqpnhMVkJpdy22I9VLrkNA72aCaymKomnIs3r+wjl9f6br4yzTz4U4n9Hs/B5ewrnQ",
	"YaX52JdUaMfu1jPJVg3GYTcFveYTJA+1u8y6fQ+jWh09D+adLe7XcTzssuRHYL7dzVx3+zWOuwtrr6vJ",
	"Z9N3oWNOqBYrlqWP2+cV/dobs5riXslKi7YLsa1Cg68hH4jlWAhnQu7ZRTNwmmyjekwcj3BhHciJzH9R",
	"jW+PS+bgeFCPDO3yHadgTbJeNbAFAEJqCyHoStrWxbGSFhiOWNjCKRiU0gZ0oMDB2L/rwWZGODhQGq4F",
	"VCcaOQB411owxrYipo1snom1f36vLpl5JeDfb6fyBvPoC6o8rUlL2rBKX8iqhyOkGxBsjUA8wyIYs6Fx",
	"iKEV/UDhHwHQH5nYgGFQfOK+YMwpKyCfpLoUnwQb2Di6rrscy2h038/RcvKMVr4TsBm7kuAKK1ntXzbd",
	"iSU1pCTC612LOM9hDTZH618ghe3jO47cWVDYNr8ti4IoJwVcQCNg01V7qlALZRfgv1XhY5IDlOjxbRva",
	"UpGIcZfAlvXFrX0SxbINwW7SHGMRa3eK7LC1JC1Daz6xx0QNPUoGoguWV7SBP7WvytG0JZqjnEBV5/ow",
	"8VfModP8Ykd47Qc49t+nVBmPibfD+NDeLCiNum0MaGdkcqX6Tj1PBybHpcyCowhny4Nf25J4zTdUSS95",
	"v1WzS/L1TWzgPjHBI8R+t4YMtRp3FYLcXYZ6PCeuBhJSOwfI7YXBfJKw5i+BEy6inseXVIVbTF3V1f9g",
	"J8aXGHcX7Sv46Ov44evvLMHBiGoVW0y3KA1kfT0b/0c5iVsPYu94KRpR4FJ5t5jGPHW7awe+IKoiJ9zs",
	"p9H9sUewk2KOi4/JrPIDFYW4tE2M4yvqM/D+XEt93sXk1HIWxLKPkx67gsNtKwiLMkRWdEOExH/MhfSf",
	"FS3YfIN8xoLvPyNqSQ0JOQeyjaJwcddm4u3q1dgD5g0xwk9l182GjhkNtzGjREAbQe7btgmyoucQbwMG",
	"iFj+mWnDOFU1Q6OGEdmt7exiwS3el2da0Tw2AmCh2U2DO/iC5+br/69OW42n8vUfy4JmvmW1az7X5DPY",
	"1d4Tl17Canuac5eveRIInfJropW+TEZ+BWvqnqwrlfPT1xyrAXanBXinL9i1ljHQKNzqcbQlQXzQUg69",
	"C4fJ4ewsKW71u2txcefjD7M7yQrRfcsYAv4ntCuN8IpOZlu6g3q8Htss/QPsQqMQTwJWawafifVEwlzt",
	"CqSxdvCZWNcAq2C7ZTyTQJWNOzp56a6tdQFkxs012kbtBrdqGCWHOeM1q2W8rHTiFoR1kPkmQljsTUC0",
	"9vjm+nQMo4pe0OLlBUjJ8r6NM6fHtgaOm/R4D4r7NmEACRK5OwBT9Q0Q86lr+3z8mhH/tsGgjZ1VmvKc",
	"yjx+nXGSgTRaA7mkG3V1V1XwOuxyVtFIF2pWC4ncVkjaFpBi47zN13QkBQDpAT1KAzxBGKSd8AJZw5AW",
	"PY6fLgyfhSdoRdeTQiww67fnQLg61+g6tBdIwdGIbrW7Yev28yj2L9g+DbYicYxIC5x1yBTbz/1L3Eq8",
	"hP7Cmd568q2Fs52GbSOd7cH0SOWLOj3DEkv3PKYy511hpjh73quqvkyJpz2INjEZEt2xqvfsIsZXuLIL",
	"sQl9eLPKZghHKj/f2hUmaG9QWxIwQNV5BTRzEWJdQ1zHUGGRMnbVDfa001nrvpdLPeChIUW5s96cNgTo",
	"mHH26fC5vZ7BpBTlJBsS22q7FeXOyeAgbcLYQx+RC6Fn3SHuRoX+XY2aaI1GXvs2Oe1tJLbLV1Zm20wG",
	"fUamHo7edGCIOfIyPMLWtIa5VsEUM/aXc+/sbhrRApMglEjIKolG5ku62d34saf6/OmPx18+fPT7oy+/",
	"IuYFkrMFqLqnQatxYh2ayHjbavRhgxE7y9PpTfDVQizivPfSp72FTXFnzXJbVRcj7rSN3Mc6nRAAqeTc",
	"bou8K+0VjlOnRXxa25Va5MF3LIWCm98zKYoi3VMm6FUJ90tqtyIHjLmBlCAVU9owwqb/lOk6KFst0biI",
	"VcMvbG0owTPw1mdHBUz3xHKlFtIX04v8DGsxOJ8TgXVZOF5l/UTb1uXuada+h0ojhtvMgJSidKo9m5MU",
	"RJizJSsIdnVnNkV7ehSmG5itDdhNEaILfk+T3jF3N2ExJ9u5fbMVt05zerOJCfXCH8orkGafd6O/zshV",
	"OEntGPhk+EeicMrBuEZY7k3wiuT9YEtW+HEnaiIUDRkEWrdARoI8EICefOhG0mqUZBfVJpfWx4DeCO9+",
	"bqsfP9du6Z2ZKQiJ/2AHeHEuc/1eSKZw4Hzkwt4/B6RES3nbRwmN5e9Kj/asNwiSaIuc0URrUJYtia5a",
	"GCXEq6chz7znVtJJR5dCaGJupkWRSGO3dhw8UzHhmCuBvKDFh+ca3zOp9DHiA/LX/YlbcdpyjGSLSnXw",
	"gpzP6SCwohTlDwIVf4W59X8Hs7NJ6ehmcY7/jgxEkxAtbLT3PHjAgZNLHNMGdj38isxcu59SQsZUO6Dg",
	"0qs0Id8WJJu7+FpY63bu77XbBP0q9DWOw9zHA5EXkZMtRA44mOuj/pGZUw8HSJ6WFKl2CCWBvxSvi5uq",
	"7xA712wNc7VSTlHhxj1LOXXbxQ9dHq4DhVeloLvOwVK/gduEwK/XNrRW2eAOM2/e/KZnQwqKpbvBmM+x",
	"xtlB2sJcvynMBylwZlHpxnCQJAmrVrl3Va9pxUtGdRqau2jU/Z4G8kuLfjMaXgrmFbfjhQaomCvu2bqY",
	"j0MUg+DmsyfkDb9P1JL6u4X789GXX43GI+DVyiy+fj4aj9zTt6mbWr5O5pXWhXQ6MaKum8AdRUq6GZLM",
	"vrN0ThK/daWgD6/SKM1m6Tvdj2bP8OLqEhBOOLJ6ZC9Wgrr6ObcFgLYSQ+uwhhNjSbIuDxS2YleloF/7",
	"yuLb0u893T5a3Ldixc4guUYjlvfj0cIWKcPuJL+7XnUfdts9BD31At3Sr1MGzCImsdbG5NFUUVG3AQ1Z",
	"3GeJDhmYeZ1VkunNqcG/N7uz389TxaB+COWZXM2v4IF3uq8W58B9jFldzKlSXrv+QdACtU8bGMCNzimK",
	"KfnOdghxYvGbO7P/gC/+9jh/8MXD/5j97cGXDzJ4/OXXDx7Qrx/Th19/8RAe/e3Lxw/g4fyrr2eP8keP",
	"H80eP3r81ZdfZ188fjh7/NXX/3HHULoB2QLqO/88Gf3vyXGxEJPjVyeTMwNsjRNasp/A7A1a2OZYoBCR",
	"mqGIhRVlxeiJ/+n/94JymolVPbz/deT6QY6WWpfqydHR5eXlNP7kaIE1UCZaVNnyyM+DtSwb95VXJyEv",
	"yMb+4Y7WPifc1FDfzzx7/d3pGTl+dTKtCWb0ZPRg+mD6EOsplsBpyUZPRl/gT3h6lrjvR1hF+0i5ZjxH",
	"IXX0/bjzrCxtqx7zaBHKgJq/lkALZJHmjxVoyTL/SALNN+7/6pIuFiCnmDFmf7p4dOTvHkfvXF2Z9waw",
	"ZLCB7coS9d7wwc9lNStYZjRUVy0LvU42qUfFDfGdP65SYzKjBeUZ+MQBnmNYpC27YrScgPCT3CDafn9S",
	"MztEo49GGT35LWWV7YA39URqdiCioVBXqeYRaIMfWR6JrvHA8QwXezD5+u27L//2PhmM3Y3LqgMatz5N",
	"liJTgH2d/6BF8Ye1gMMaQ+dbwXPjvqDHcV2uBz+o0TZGY3N4Gn1ev9NsTvIHFxz+CGj8ZwVyU+PRATaK",
	"8eYVOFoU5kXBIaG3dZf+tE4WvHRtxuM45SiC+b9OX74gQhJnC3tFs/OQKOmTZutE4Thn1nzZtxQn8FIr",
	"cRmXK7Uom+X3w2reYh9lBBSP+aMHDzxvc3aCCNdH7jxGMw1qNmTdmWEUD84VBuryQPvodSieLWlpz/Gx",
	"T3cwKr9zKNuXpoa6Hx9woc0S39debnu4zqK/pTmRrhIDLuXhZ7uUE25D140sszL3/Xj05We8Nyfc8F5a",
	"EHzTCm08x10h9Qs/5+KS+zeNvlWtVlRuUJvSQSi0u+TRhcIoDpQVllNFxTf5YvT2fa/EPIpjtI/eNUrW",
	"5deSp9at22gnuVvE9sgBHMsm0bof7h6XJYaon4bnx2X5yvB+hYFLwJDzwpopre5NyQ/x1w1vrIXEOmMb",
	"OUwOR76AZjM4J2odnpT3jfoqfynRf9w0XbIcuGZzZisIp9bRoLmtyxncqi0R67/98a0Qj6mmk1cZ1abb",
	"N4ckNPFwytrE9Z0dOIY90gfss3y9OqYWiGR99Z1y5Bat+6O1T8GLlhJ0vboP9IcRKr5ufJCBDWF3gyLn",
	"M1dXf6aFIaFoua1efifPbtXYv5QaG2o4L6xeWZYHUGx9EtyuV47euSLDh9B30UwxSNONLSDRt1Ge0t0W",
	"x7k3Jcftd67GVlzl5p06rE3K+8tpr7ak9E691VHNYTXWRh7krhdutdZ+9SpO5d0ns7ahU5nfB33851VT",
	"b/G4l15qFrFbI70C8+9om07U3JhQ+FNqmQ5pt/rlX1q/DI0frqVhxkkOR65aTaRvXsuw2jacMh30yGa/",
	"kIjpYVkqrNtij/C4TugyLMZmqrgcFTX2V190rttbsd2scedi3FUQf4D4Bv7t5uTZEN3wc7MK3qgzrP4y",
	"KU7Sm3zTTDnpWnr9YVxLw5jc4wePPxwE8S68EJp870PHv/yQe3BI3pgmq3154TbWdjQT613sjbf4W6iI",
	"ag5/g9mFmtjj6Ll52wb/3MUiETOq4KvH/v5yb0q+da/WZadcuORCGI7nk4upXNiPDNM0yCB3/J9PcPw7",
	"U/I9psxrNcaIZczFwxcZ108ePvrisXtF0ksbENx+b/bV4yfH33zjXisl4xrDRey1p/O60vLJEopCuA+c",
	"sOmOax48+d///T/T6fTOTv4s1t9uXhi++idk0uNUrd5ASX3b/pnvduryze0G92/Bh4z1+Fask+JErG/F",
	"2UcTZwb7fwoxNmuSkbsaB+NxoxveAcWaPSb7CLaxE2SYQBik0pS8EK4/alVQaWuTYfF3RRYVlZRrgHzq",
	"KRWzv5UtwZoVDMvWSKJAXoCcKBb6L1QSQgGtUsIFZmzV5ckbEOyWGJiw8eeXFj/TdRRQPwuKgxYOd2gO",
	"XdE1wX5ZmijQY1tEdE2++YY8GNcXs6IwA0wChlNcekXXowRT3pWukfr1sAbTQN9Dq+A9c3gUcnfMOo49",
	"xIxWa26hGHN9TfqrC4vP9tZhD4bb2AMx6719d7VvLjamuPahW80oVpfU2DpAVWVZbOqi8Uax9Fpbmqua",
	"GYZaSD4Xz9ONWkbQWZC6jbf36pYj3FpDrsWX2gS1Jw/C5Et19A4NFDED6jABTEzcyQCcY8uqIz1nX7qc",
	"9MMd/FAPYcuz3kpPoYNYXBeD3MV0CqzVhhVaN1jyUWJJVTbH0lD3fAt6100BS+7UEflp5ckOPzGTppSo",
	"qCPOrWe8X9FDWuz2T4g3MKe2BM+QzqVRfQX0+YJMHMWX+B9axCQQGob5esZITIEeXE96awKxCbEuocgX",
	"BilpozP/biif1pN3dVREyyFc5rcI3g/BHRb/nat3ZHmKW8SfIUnHX+gn5IWoi8tYfv+ndEnfpH5y0wt6",
	"ITjY2AtzGbC0eOtmD8pTLfR9LTJ7pas7d15VkTry9R62alM/2koEn6lGdQMi/cdklYyG1DGIne4smFSP",
	"NoRZ+zIctKECTj/m3eyj8NdP8ML2MTjYh2E5tl6P4ztOTeCHZUJY7s8S81EoltPHkZ6blyM97ZUrmfIX",
	"5U7bCCaNqgThhFJENFF6cfoXPM5PXVs17QtT2XKTivEMiBIrwFuFUeNd1woL4d8+HISarSAnosKamVFG",
	"+kdmOF8++OLDTX8K8oJlQM5gVQpJJSs25Bce2qddhwEqQt2exzb07uEgjKNbsFmWNItrH16DL4rFFjeo",
	"s/bXhZVdeSpRaZC2pG6rSybr8O2UFR0ZxnMz9a3Kh1/7bRjaGuIpLQrE3y5fHQ48KOK9KOwGw4ppXTea",
	"iiUw+Y5my7DZ49r2FpoJ+44k41YNaxzZdZa15ToUmI3XQKLVRBYOkDAX2CUSJHjj4qoqNCuL5jeh2zZ2",
	"H0xEollijSvgnTzzq7NudTGvh24TtO9f4gafmrndI5yZC7s4KgGZeWwAjW2S0wbQtg+nD+WPuie6HpCu",
	"PDKTrXrVddRTWQKV9ceWYdwtJUzcEJJegFQUT29rUfdu1flPQ51fuwYJn4gyn3T1Xpf5X102NSLy3+k1",
	"y9/v1t07RUf/PG6as1bR0JNncdaUCFX3vF7RsxiDyD0TNf99NKBS1k1XYE26kOrqll1XzLBSrbfepcEM",
	"pXO2tt3z+kr6fmjRU2eOxQediLZK8FFFkP5YImjSkkFNtHw8iYQtcMZR+E4phRaZKGzUXlWWQupQEFhN",
	"B13EoE/MNe5h/bWoryHK1ixXO43gZ/jW7ZWotoKfebylzODN86u2tPfeGdFYzzXkrnQmSmLvOy0QPiqj",
	"u9WxUwyuZTH/3A3mupf0Dmw/z6jOllV59A7/g1WI39fpsNjVSR3pNT/CPr5H77bGbCKPLSA3xIifNkxe",
	"na7AycjL5/h53XzqeyEjfeQH891u1tlE2ritBdiexBjcmWCqN6M232qbfa6F1oZf36GeGLFzXkO1h6iT",
	"aaDdqKWZL+Bg+xgnSPg2AOTTWlDtb5kznhMabWPrUi1kzQhu2Ody04v+GC6cDx/18uVnfM5eCE1OVmUB",
	"K+Aa8utFQJM2h/PSY6u43U8xcKK/GybdlfmxxPeZIkEX2Sng/0SWu1sZ/0nJ+KfBLRUT6K3E/nwktvSH",
	"8FY4f/rC+YvPdjU3GP0xUFhfwYvWFND1HX1PUd1RE5x1q2VS2OaAw0t5e5XqeyF9K85b+f6ny0eyezw4",
	"lmWIVWeX9dZNeYhkn08K+mG2iaJIWCf6jvA4hMswLJ8oMoYtl05yNXZxOdag4c73rUr0SatE0V7fakS3",
	"5orPzFzRo/84S0FRDFFB9lWNLlYiB++dFfO5q2Tcpxc1e2oa8lSarkpiv5z2xraesRWcmjdf2ikOKmJr",
	"sFtuyRZ4BlkKMsFzddXusW6qqwon9Fj1Q/XBXaRhWzwsrgTQ9Mp0/DqqbNghD9LeEYUNUn0tZ4eMHC6I",
	"ocrpAWj56J39F+1ypVCJ1Zx6qu5szF23LbY4tR23ASB5hZqprXLtvxJz8sDWqK44JhwvmeujjjGCWm6M",
	"9uoL4EmgBckaiYYBju5xOu09TltvDmep1fWsKX2tEPWxvfa94kpln1rp4D998KPylHJ3OLqo1IJQwmFB",
	"NbsAH2Uwva2qdGVh6GoabWGVY0Lz3J7behPgAuSGqGqmjKrEm2kjd1TzZO3BWmBdgmRGwtOi9vnbW8aR",
	"LZm0LZbp1L5xTZnX4lq2UJNsNlv3gtmVcRJz8jPLpDguFiJEI6uN0rDqdCR3n/7e05jAWyj2shgIXjAO",
	"k5XgqRbaL/Hpz/hwMMvAMlV9I56Zh3sN2BLvTSS0FtCcfIgKcN1N+kRYyLUCdFqrlVAKaW7YM1tYxx6i",
	"Pc+jP3kbnnWP44ZnkTPOPYwGintsN34+8vHijY7byTffNf509dncm2pZ6VxcRrOgHcLGZQ6ppoQXgNsU",
	"214ijvCTOnPhaaJLcv2wv1HyXzTp1rmU4pRKl7J2AVK1Lpm3mbd/qszbwfu+F5c2Q1ZqF6er1GEVoxci",
	"BztunW1pjn6qXwoXORDlgWjpQyHMM92lycu1+j2LN6bIDLC+Jq0WS02qkmjRjXscRxNMaGZZ88Tex9IT",
	"RmV87a0Np1vSCyC0kEBzc4cGTsTMLLqWsLhIqrAis09ec8Gsw9WuCNhSigyUgnzim8bsgte/Z9Pl9Bbk",
	"4WpwFWEWogSZU3kzKzi/2An8OWwmeHtX5O5Pv6p7n8oirC66fQtsTdfERrSTcrtLuQZM24i4DVFMyjYH",
	"2J4EzI4Tq7IAlx+XQPb1sde7/W0wO0RwQwi8AMnm7IaPlp/kBogywH/DB+tGllCVE6NndOF+ap+esRVq",
	"jJxy4Q22O2YIExRU6ckukWJeihetzFIjLp6SIjhwz539OVUa9XHCeI5VC60oxHnszcFMse+tHqc0yoG9",
	"SiUm/dU+TE2bGTHPVaWIG8HnrkGeWh6H9Za5XsA6zIUlQPzYITnOWlp3jdyHwGh8h8eoZQ+hOjRoBGKG",
	"SywO7cDUmX/2wnIDvhpH22A89W9FiI/DL3pgZKreA0tu2AsgprdQenY8UlqUpeFQelLx8F0fBk/t28f6",
	"l/rdLkna4g5WU8kFqDin0UF+aZGu0Ia+pIo4OMiKnru0x4XruNuF2RzrCRYSmmw7L2hVN2/FB+dKx70q",
	"F5LmMMmhoAk71S/2MbGP9yQMPzYSiCf0yYXQMJlhjZA0jdRnQl7FlBdmFTiVSineBJ+QzJzzuZARqbmv",
	"rz5pDjhtim86Yr0TZkEwknTgx0NkWXrqMSKaMQxZOaLD1TipdM219GAvzHojCMRxJ7UFqD37f4NycwcF",
	"7KDzb0D1Lbye+lDLbtt0Y9neEJgtUdaSNkkR0cuXdzDGPh6UsiJ/lm6jdhDdDeZ9Nq3o0R1+ehX7xNEl",
	"ZXoyF9LeWyZ0rkHuzOb4O2U+LsM5mbRwNYgIjuB0BDcOSq246Z/jWBYE4uSfIRFX68kIZUoekhXjlbZP",
	"RKXHtqi1BJotzR0pNq/bkbA1tCujJGFBZV5gb+B5UASEtGWZdEuZQaATKbJNo41Z9/dCfuYF/9/eWpxu",
	"LU63Fqdbi9OtxenW4nRrcbq1ON1anG4tTrcWp1uL063F6dbi9Fe1OH2symwTr6H52qdc8Ek7mPo2lvpP",
	"Veg/yF5vAEPr0yVlyAKjwij9dqk9DH0aaIE4YAX054HYoPOz746fEyUqmQHJDISMk7Kg5tIFax0ans+o",
	"gq8e+0xlqwvQFZltDFsxCoN54YtH5PTHY1+7d+k6CTXfvXtsQ02J0psC7rlmdsBzq5D7rnbADdJdUzvq",
	"xY9vjO7axLMCc2gU+Q7ffgYXUIgSpC2oii0tuxa9M6DFU4ebHQa9v5vJXaj9H2a0P8YNo6ZD24qW/lrk",
	"10oVoTZhmzyLUrj/mNNCwR99Wdx2vBUtt3fDfGu5Lyj9rcg3rRNidu0IN7B5NkJjvxnjVG4Shem6yVJt",
	"0tDCsCtHWF0j5vuDJrktk/2vumS2i8JSNxPbiCA9eh+Vp8apN6wzlM3zn7foZJRKUY9F6dK2QXMADqpF",
	"iglVdk/Ia/vdx608ihC5I1Yz808m0Lj5ZmAa+K65FTnW87nmEnnEJ08vnv2xIey8yoAwrYijuAHixWiE",
	"ZqQF8IljQJOZyDeTBvsaNaRQzhRVClaz3ZIo5p944oLwMU+2y6mPI0aeRYvbxpNjollPHAPu4c4bDYN5",
	"c8AWjujYc4Txm2bRfWw0BoE4/pSyrbV4375Mr55mc8v4bhlfdBpbGgHjrolPm4lMb5DxyY2seD/P+24N",
	"WWWAi0/yXfR7oFcV1rrhRM9hVi0W5rbQdbNiIyMcjwn+kVihXe5QLrgfBdnBX/s0mOvWuGgP1+UuUdmJ",
	"u74Y7D3cDso36BFalZRvzG5gHslEsVVVWBzaVuCHZbS2b0Gqqn1tneyz4L/yRsnIGO1EbfN3ixZySRWx",
	"+ws5qXjukhU75fTXfHiZJDv02ZrXbHprSSS73sTq3LxDRITf5WZRCkVKkBO95vZANQ4TescosSf3o5bv",
	"vxUbH05s2JIW0MNgux1BaoZwIOkhI76G4iPqelXn1DZ6YdFmJnDjGVo0+rPQ4hY+9s2DxgZ1hm+GCNXm",
	"FudvhqIklGQFQ2+04ErLKtNvOEWHVLSwaSd8yFzWJ3OA7cFD5q3G/s0ByF2ssgcS9YN7TYu8XsIbbhiE",
	"FgQPBdUw3cPP7S3r/Rz5qX8l7cRN+FjdUG84xdC24DxLcuYkSr4HICwnOZQSzFT5lJzo0JcL1iVaTHCL",
	"QE4MWhBRoDJq5doeKFgAB8XUJG3B+cE+xT7jThR5SyFaPe3juudO+2pUd1n4P3f/88lvx5P/oZN/PZh8",
	"/e9Hb989fn/vfufHR++/+eb/Nn/64v039/7z31LI87CzvBfyk2cYrIiV4gum4laZbdg/hViCFeP9p8TF",
	"Gl77gIRaPiFKFfSlkOeBhK9af6p7nCyBt6issXEtD5RHwKB75UHYF0lwr1t/zp8ofTyiA+9NxY23vUJa",
	"e7+n76YhywG7vvZJevvUdcbsecndTBrWt1aNLffGWQPkrY6Rz7/c7eEvqR6NB7umdgfssqtmQ1DEm9/w",
	"MaGF4Atb79VcWwXuE+NlpTFz4CYtg3BBi4m4AClZDmrgSpng313Q4mX47P14BGvIJlrSDCbWVDEUa2fm",
	"G0unZhzGmWa0mOB1fShAcGK/OrUf7ZDfZyFsja1WkDOqodgQo29BbmshMkVqQ8HUFmch2ZLyBYp6KarF",
	"0r5mx7kECUFHM3fz9hD76gJ6zSe2jmYX/GPXnjsuQg40Wyb6Y6Hsu6QBFMgbrfcGbk+jSnKfYWA86lWj",
	"Db4v6tBEi7cmB7qq1tHQHyKk1dAcotb07SG5PSR/tUOSqhqL+Jy3zCwWifE23rA97qYLJ39A895Hqap+",
	"27Tkz960xLMlRSiRtHHHSffRpIowTS6x5NoMiJF3FboVXHNSZyTAFNDoqLtiwsq1Ms2WlHFXrysksCAc",
	"5sq9WjGtfW/vG7HIWmaGpliDDsgqyfQGb0W0ZL+fg/n/W3OtUCAv/IWpksXoyWipdfnk6KgQGS2WQukj",
	"7B1SP1Oth28D/O/8XaeU7MLc394j2EKyBeNGRl/SxQJkbWUcPZo+GL3/fwEAAP//AtPl6GvJAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
