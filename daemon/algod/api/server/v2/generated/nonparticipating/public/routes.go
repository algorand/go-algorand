// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "header-only" -------------

	err = runtime.BindQueryParameter("form", true, false, "header-only", ctx.QueryParams(), &params.HeaderOnly)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter header-only: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"///kPNMlDsABAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
