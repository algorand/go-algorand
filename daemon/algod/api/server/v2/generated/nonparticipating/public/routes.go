// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
