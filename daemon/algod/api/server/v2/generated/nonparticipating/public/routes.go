// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
