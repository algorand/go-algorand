// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3v1/AQAA//+sgyU98sABAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
