// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get boxes for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "prefix" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefix", ctx.QueryParams(), &params.Prefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefix: %s", err))
	}

	// ------------- Optional query parameter "next" -------------

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "values" -------------

	err = runtime.BindQueryParameter("form", true, false, "values", ctx.QueryParams(), &params.Values)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter values: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "header-only" -------------

	err = runtime.BindQueryParameter("form", true, false, "header-only", ctx.QueryParams(), &params.HeaderOnly)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter header-only: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9+3fbNrMo+q9g6Zy18jiinFe7v+aub53r5tF6N68Vu91n76a3hciRhG0K4AeAstTc",
	"/O9nYQCQIAlKlC07SeufEoskMBgMZgbz/DhKxbIQHLhWo6cfRwWVdAkaJP5F01SUXCcsM39loFLJCs0E",
	"Hz31z4jSkvH5aDxi5teC6sVoPOJ0CfU75vvxSMK/SiYhGz3VsoTxSKULWFIzsN4U5u1qpHUyF4kb4tgO",
	"cfJ89GnLA5plEpTqQvmW5xvCeJqXGRAtKVc0NY8UuWB6QfSCKeI+JowTwYGIGdGLxstkxiDP1MQv8l8l",
	"yE2wSjd5/5I+1SAmUuTQhfOZWE4ZBw8VVEBVG0K0IBnM8KUF1cTMYGD1L2pBFFCZLshMyB2gWiBCeIGX",
	"y9HTX0cKeAYSdysFtsL/ziTAn5BoKuegR7+NY4ubaZCJZsvI0k4c9iWoMteK4Lu4xjlbASfmqwl5XSpN",
	"pkAoJ+9fPiOPHz/+zixkSbWGzBFZ76rq2cM12c9HT0cZ1eAfd2mN5nMhKc+S6v33L5/h/KdugUPfokpB",
	"/LAcmyfk5HnfAvyHERJiXMMc96FB/eaLyKGof57CTEgYuCf25YNuSjj/Z92VlOp0UQjGdWRfCD4l9nGU",
	"hwWfb+NhFQCN9wuDKWkG/fVB8t1vHx+OHz749D9+PU7+y/35zeNPA5f/rBp3BwaiL6allMDTTTKXQPG0",
	"LCjv4uO9owe1EGWekQVd4ebTJbJ69y0x31rWuaJ5aeiEpVIc53OhCHVklMGMlrkmfmJS8tywKTOao3bC",
	"FCmkWLEMsrHhvhcLli5ISpUdAt8jFyzPDQ2WCrI+Wouvbsth+hSixMB1KXzggr5cZNTr2oEJWCM3SNJc",
	"KEi02CGevMShPCOhQKllldpPWJGzBRCc3DywwhZxxw1N5/mGaNzXjFBFKPGiaUzYjGxESS5wc3J2jt+7",
	"1RisLYlBGm5OQ46aw9uHvg4yIsibCpED5Yg8f+66KOMzNi8lKHKxAL1wMk+CKgRXQMT0vyHVZtv//fTt",
	"GyIkeQ1K0Tm8o+k5AZ6KDLIJOZkRLnRAGo6WEIfmy751OLhiQv6/lTA0sVTzgqbncYmesyWLrOo1XbNl",
	"uSS8XE5Bmi31IkQLIkGXkvcBZEfcQYpLuu5OeiZLnuL+19M2dDlDbUwVOd0gwpZ0/c8HYweOIjTPSQE8",
	"Y3xO9Jr36nFm7t3gJVKUPBug5mizp4FgVQWkbMYgI9UoWyBx0+yCh/H94KmVrwAcP0gvONUsO8DhsI7Q",
	"jDnd5gkp6BwCkpmQnx1zw6danAOvCJ1MN/iokLBiolTVRz0w4tTbNXAuNCSFhBmL0NipQ4dhMPYdx4GX",
	"TgdKBdeUccgMc0aghQbLrHphCibcft/pSvEpVfDtkz4ZXz8duPsz0d71rTs+aLfxpcQeyYjoNE/dgY1r",
	"Vo3vB9wPw7kVmyf2585GsvmZkTYzlqMk+m+zfx4NpUIm0ECEl02KzTnVpYSnH/h98xdJyKmmPKMyM78s",
	"7U+vy1yzUzY3P+X2p1diztJTNu9BZgVr9MKFny3tP2a8ODvW6+i94pUQ52URLihtXFynG3LyvG+T7Zj7",
	"EuZxddsNLx5na38Z2fcLva42sgfIXtwV1Lx4DhsJBlqazvCf9Qzpic7kn+afosjN17qYxVBr6NiJZDQf",
	"OLPCcVHkLKUGie/dY/PUMAGwFwlav3GEAvXpxwDEQooCpGZ2UFoUSS5SmidKU40j/U8Js9HT0f84qu0v",
	"R/ZzdRRM/sp8dYofGZXVqkEJLYo9xnhnVB+1hVkYBo2PkE1YtodKE+N2Ew0pMcOCc1hRrif1laXBD6oD",
	"/Kubqca31XYsvltXsF6EE/viFJTVgO2LdxQJUE8QrQTRigrpPBfT6oe7x0VRYxCfHxeFxQdqj8BQMYM1",
	"U1rdw+XT+iSF85w8n5AfwrFRFRc83xjhYFUNIxtmTmo5KVbZltwa6hHvKILbKeTEbI1Hg1HzD0FxeK1Y",
	"iNxoPTtpxbz8o3s3JDPz+6CPvw4SC3HbT1x40XKYs3cc/CW43NxtUU6XcJy5Z0KO299ejmzMKFsIRp3U",
	"WDw08eAvTMNS7aSEAKKAmtz2UCnpZuSUxASVvS6Z/KzAUkhB54wjtGNzfeJkSc/tfgjEuyEEUNW9yNKS",
	"1SArE6rTOR3qJx07y1dArbGN9Zqo0VRzpjTeq/FlsoAcFWfKPUGHpHIpyhiw4VsWUcF8IWlhadk9sWoX",
	"43ifty9ZWK8oeAfKxCjMAbsPNhqhujRb3sk6o5Ag12jB8H0u0vMfqVoc4IRP/Vhd2sdpyAJoBpIsqFpE",
	"Dk6LtuvRhtC3eRFplkyDqSbVEl+JuTrAEnOxD+sqimc0z83UXZbVWi0OPOgg5zkxLxNYMjSYu4ujtbDb",
	"+xd5QdOFUQtISvN8XJuKRJHksILcXNoZ5yDHRC+org8/juzvNXiOFBhmp4EEq3FmJjSxycoWIYEsKUqg",
	"pbnNFHnzm4qDKrqElhaEElGUaEUILhonz/3qYAUceVI1NIJfrRGtNeHgEzO3e4Qzc2EXZy2A2rvvKvxV",
	"/KIBtHm7lqe8nkLIzNqstfmNSZIKaYewEt5Nbv4DVNYfW+q8W0hI3BCSrkAqmpvVtRZ1ryLfQ53OHScz",
	"o5oGJ9NRYfwCZjkHfofqHciIleYt/ofmxDw2WoyhpJp6GCojInCnZlYwG1TZmcwLaG8VZGlNmaSg6fle",
	"UD6rJ4+zmUEn74W1nrotdIuoduhszTJ1qG3Cwfr2qnlCrO3Ks6OOLrKV6QRzDUHAmSiIZR8tECynwNEs",
	"QsT64GLte7GOwfS9WHdEmljDQXbCjDOY2SN8t3qpIyxE3XgP/RQ3DQU4D2WDAbt2PR5PhbycwtSSoZzU",
	"DlVCzaiBvjhu0QG+WhaJYz8Rp4x9oTVQHcOyXc9pDx/DVgMLp5peAxaUGfUQWGgOdGgsiGXBcjjA6V5E",
	"9dQpVfD4ETn98fibh49+f/TNt4YkCynmki7JdKNBkbvO8kiU3uRwL3rQUIGKj/7tE++Ga44bG0eJUqaw",
	"pEV3KOvesxd8+xox73Wx1kQzrroCcBDTByO9LdqJ9Vwb0J7DtJyfgtbmMv9OitnBGX5nhhh0+NK7Qhrd",
	"STVdoU4hPMrMK0ew1pIeFfgm8MyGUph1MGWuucvpQYiqb+OzepaMOIxmsPNQ7LtN9TSbcKvkRpaHsOCA",
	"lEJGtYxCCi1SkSdGlWUiIuveuTeIe8NvV9H+3UJLLqgiZm500JY86xFpes2Hi2g79Nma17jZqh7Z9UZW",
	"5+Ydsi9N5NcXrQJkotecIHU2JO1MiiWhJMMPUZ36AbRVMdkSTjVdFm9ns8MYdAUOFFEJ2BKUmYnYN4yC",
	"pyAV3MYr7pD+btQh6GkjxjvSdD8ADiOnG56iN/AQx7ZfMVoyjqEJasPTQEsyMOaQzRtkeXUrXR867FR3",
	"VAQcg45X+BjdEc8h1/SlkGe1hv6DFGVxcPbcnnPocqhbjHN4ZOZbb+lmfJ43Y2TnBvZJbI2fZUHPKjuJ",
	"XQNCjxT5is0XOrgSv5PiGmRidJYYoPjA2sNy803XKvZGZIaZ6FIdQJWsB6s5nKHbkK/RqSg1oYSLDHDz",
	"SxVXMnuiKjGcC6PQdKi3ogmGKTIFQ10pLc1qy4JgjFVHXtQfJjS1JzRB1KieCJMqNMi+ZaezEXu5BJpt",
	"yBSAEzF1YRwuwAQXSTFATHs1zam4EX7RgKuQIgWlIEuctX0naP49Kzr0Fjwh4AhwNQtRgsyovDKw56ud",
	"cJ7DJsFwRkXu/vSLuvcZ4NVC03wHYvGdGHrbJsMu1MOm30Zw7clDsrPGSEu1Rr01DCIHDX0o3AsnvfvX",
	"hqizi1dHywokRs1cK8X7Sa5GQBWo10zvV4W2LHqC9N013Wh4ZsM45cIrVrHBcqp0sostm5catgSzgoAT",
	"xjgxDtyjeL2iSttIL8YzNNtacYLzWCXMTNEPcO81xIz8i7+BdMdOjRzkqlTVdUSVRSGkhiy2BjTu9c71",
	"BtbVXGIWjF3debQgpYJdI/dhKRjfIcvdgPEPqitTnjMOdheHYQNGzm+iqGwAUSNiGyCn/q0Au2Ggcg8g",
	"TNWItoTDVItyqujo8UhpURSGW+ik5NV3fWg6tW8f65/rd7vEZf04Vm5nAhT6iNz7DvILi1kbor6gijg4",
	"vLUWzTk2JK0LszmMiWI8hWQb5eMVz7wVHoGdh7Qs5pJmkGSQ003EzmwfE/t42wC44/V1V2hIbKxxfNNr",
	"SvahnVuGFjieiimPBJ+Q1BxBcxWoCcR9vWPkDHDsGHNydHSnGgrnim6RHw+Xbbc6MiJKw5XQZscdPSDI",
	"jqMPAbgHD9XQl0cFfpzUd8/2FP8Jyk1Q6RH7T7IB1beEevy9FtBjC3ZpXMF5abH3FgeOss1eNraDj/Qd",
	"2R7D9DsqNUtZgXedn2Bz8Ktfe4JobADJQFOWQ0aCB/YaWITfExsl2x7zclfBQba3Lvgd41tkOT4SqQn8",
	"OWzwzv3Opl8Epo5D3GUjoxr5RDlBQH1Qt1HBw1dgTVOdb4yiphewIRcggahyaqM0uv4ULYokHCDqn9ky",
	"o3NAR92/Wz3ipzhUsLyY29LeCbbDd9a6GDTQ4e4ChRD5AAtZBxlRCAaFx5BCmF1nLsPL5/h4SmoA6Zg2",
	"Rh9U4v+OaqAZV0D+U5QkpRyvXKWGSqcREhUFVCDNDEYFq+Z08Zc1hiCHJdibJD65f7+98Pv33Z4zRWZw",
	"4dMizYttdNy/j3acd0LpxuE6gD3UHLeTiPhAx5URfO4W0uYpu4O63MhDdvJda/DK22XOlFKOcM3yr8wA",
	"WidzPWTtIY0MC2jDcQf5cpohUJ11476fsmWZU30IrxWsaJ6IFUjJMtjJyd3ETPAXK5q/rT7DlE9IDY2m",
	"kKSYqDhwLDgz39jcRjMO48wcYJvXMBQgOLFfndqPdlwx66AHtlxCxqiGfEMKCSnYlD6jOapqqRNig/3T",
	"BeVzvDBIUc5dnIQdBxl+qaxpRpa8M0RUqdJrnqCROyYAXCSez+o06hRQc6VrW8jtBeaCVvO5RN4hkjnY",
	"g7bHIOokG496b7wGqav6xmuR00xNHSAMGvpegJ964oGuFESd0X26+Aq3xRwms7nXY7Kvh45B2Z04CGqu",
	"H/bFNZvrdr45gNJjByISCgkKRVRoplL2qZiFaeg+GnKjNCy7lnz76e89x+99731R8JxxSJaCwyZaeYVx",
	"eI0Po8cJxWTPx6iw9H3bvoM04G+B1ZxnCDVeFb+42+0T2vZYqZdCHsolagccrN4P8EDudLe7KS/rJ6V5",
	"HnEtuiTVNgNQ4ypyjklClRIpQ53tJFNjF/hsvZEuo7WJ/ndV6s0Bzl573JYPLax/gDZiyAtCSZoztCAL",
	"rrQsU/2BU7RRBUuNBHH5y3i/1fKZfyVuJo1YMd1QHzjFAL7KchUN2JhBxEzzEsAbL1U5n4PSrbvODOAD",
	"d28xTkrONM61NMclseelAImRVBP75pJuyMzQhBbkT5CCTEvd1P4xB1tplufOoWemIWL2gVNNcqBKk9eM",
	"n61xOO/090eWg74Q8rzCQly6z4GDYiqJB5v9YJ9i6oJb/sKlMWBEv33s42rrohAjs8xGHZj/7+7/fvrr",
	"cfJfNPnzQfLd/zr67eOTT/fud3589Omf//z/mz89/vTPe//7f8Z2ysMeyxB2kJ88dzfjk+d4/QmyEdqw",
	"35j9f8l4EiWyMJqjRVvkLlbDcAR0r2kc0wv4wPWaG0Ja0ZxlhrdchhzaEqZzFu3paFFNYyNaxjC/1j0v",
	"FVfgMiTCZFqs8dJaVDc+M56Lj05Jl16P52VWcruVXvu2qaY+vkzMxlW9BVuK7SnBZPwF9UGe7s9H33w7",
	"GtdJ9NXz0Xjknv4WoWSWrWOlEjJYx+6KYR7IHUUKulGg49wDYY+G0tnYjnDYJSynINWCFTfPKZRm0ziH",
	"81lZzua05ifc5jCY84Muzo3znIjZzcOtJUAGhV7ESjQ1FDV8q95NgFbYSSHFCviYsAlM2jafzNwXXVBf",
	"DnTmA1OlEENuQ9U5sITmqSLAeriQQYaVGP20Mjic8FcHvw65gWNwteeMRfTe+eHFGTlyDFPdsVU77NBB",
	"nYXIVdrlhzYCkgw3C9PmPvAP/DnM0Pog+NMPPKOaHk2pYqk6KhXI72lOeQqTuSBPfcrpc6rpB97RtHpr",
	"RwZ54aQopzlLyXl4IanJ09YD647w4cOvNJ+LDx9+68RmdK8Pbqoof7ETJEYRFqVOXDWjRMIFlTHfl6qq",
	"2eDItlzZtlmtki1KayD11ZLc+HGeR4tCtatadJdfFLlZfkCGytVsMFtGlBZVyp1RUFzWstnfN8IJBkkv",
	"vF2lVKDIH0ta/Mq4/o0kH8oHDx5j8mJd5uEPJ/INTW4KGGxd6a260Taq4MLttRJj1ZOCzmMutg8fftVA",
	"C9x91JeXaOPIc4KfNRIrfYIBDlUvoMri7t0AC8fe+c+4uFP7la9cGV8CPsItbOaYX2m/ghIBl96uHWUG",
	"aKkXiTnb0VUpQ+J+Z6qCdnOjZPloDMXmeFt1tf+mQNIFpOeuKBssC70ZNz73AT9O0fSsgylbrs8mUWLB",
	"KHRQTIGURUadKk75pl25R9mMChz0PZzD5kzU9ab2KdXTrByj+g4qUmqgXRpiDY+tG6O9+S6qzOfSugIs",
	"mJ/qyeJpRRf+m/6DbFXeAxziGFE0Kpv0IYLKCCIs8feg4BILNeNdifRjy2M8Ba7ZChLI2ZxNY5WG/6Pr",
	"D/OwGqp0xRVdFHI1oCJsRsxVfmoFq7veS8rnYMSzEalC0dwWjo0GbeB9aAFU6ilQvdXOz8PcRg8dXikv",
	"MLkcLXxjswRYm/1mGi12HC7MrQINRfYdF7086Y8/s4BDdkl4/Of1TWHSe9d1qIsUVfRSucJuda11oXkh",
	"nSFc9vkSsCqruDD7YqAQrqCorVsTyJdS0Tn03F1C793Akh8Njx8OsksjieogYtZWNTqaQBRk+3Ji1hw9",
	"w2CemEOM18xWQKafyTqInc8I64Q7hE1zVGCryFW791Q2vKi28HEfaHHWApLXqqAHo4mR8DguqPLHEUvC",
	"ei47SDu7xgzibdX3ToJYwqDua1Vbz0vDNgft3PtdDT5feM9X2wsv/QMq55m7F6YvxLZDcFRNM8hhbhdu",
	"X/aEUteEqjfIwPF2NkPeksTCEgMDdaAAuDnA3FzuE2J9I2TwCDEyDsDGwAccmLwR4dnk832A5K6mFfVj",
	"o4gI/oZ4Yp8N1DfKqCiMcGU9/sbUcwBXbaPWLFoR1TgMYXxMDJtb0dywOXcXrwfpFIHDC0Wr5JsLvbnX",
	"d9HY4pqyIn+vNVkl4TKrCbVZD3Rc1d4C8VSsE5uhHL2LTNdTQ+/R3AXMl44dTFtu744iU7HGcC4ULTZW",
	"fgcs/XB4MALby5oppFf8rk/PssBsm3a7nhujQoUk4wytFbn0KXpDpu7RLfvI5W5QQe9SALTMUHU7CmeW",
	"2Gk+aKonXWFeS7VxXRnWp4XFjn/fEYruUg/+uvaxZs27H+vahv310/yJupFif13L0lWKMNqPC1tYcZ8a",
	"jG1yaACxBavv2npgFK3NWK8mXgOsxViJYb5dp2QXbQpywEtw0lBNk/NYpIC5ywPK8VP/WWCsw92jfHMv",
	"CCCUMGdKQ+008nFBn8McT7FCtBCz/tXpQs7M+t4LUQl/6zbHDxvLvPEVYAT+jEmlE/S4RZdgXnqp0Ij0",
	"0rwa10CbIYq2nwLL4hwXpz2HTZKxvIzTq5v3p+dm2jeVoFHlFKUY4zZAa4r9P6KBy1umtrHtWxf8yi74",
	"FT3YeoedBvOqmVgacmnO8ZWcixYD28YOIgQYI47urvWidAuDDBLOu9wx0EaDmJbJNm9D5zBlfuydUWo+",
	"7b1P8tuRomsJKh3GMwTFfA6Zr+Dm/WE8qJOXCz4PGlUVxbaygBNiq/Nhcb0tdflcGD70BeEH6n7CeAbr",
	"OPThrQAhrzPrsKYgTjIHbsuVxM1CUdSEIf74RmCru2FfaDsBIBoEfdZyZtfRyXaXqu3EDciBZu5OosCv",
	"b/ux7G6IQ924L3y6Udx1+xHCAZGmmA56t3TLEPQwYFoULFu3HE921F4jGN3LutyjbSFrcYPtwEAzCDpK",
	"cI1q4S7U2hnYj/DOe2RuZTb22gUWG/qmqUvAz0qJHoxGZHO3NH11Vxu49p9+OdVC0jk4L1RiQbrSELic",
	"fdAQFH5XRDMbTpKx2QxC74u6jOegAVzHxp4NIN0IkcVdNCXj+tsnMTLaQT01jLtRFqeYCC30+eTPul4u",
	"r9MHpqRKJARbcwlXVTRd/yfYJL/QvDSXDCZVHZ7r3E5N4bvHrq+WP8EGR94Z9WoA27EraHl6D0iDMUt/",
	"9UgFNbrvqEYXA7xeNrZwj506ju/SgbbG9Z3oJ/5ayjT6MjSXcpWDUQdJGFiG7MZpPDbBnB5oIr5Nyrs2",
	"gWW7dZBA3w+nYsp36eyKoqoWxS7aPQOae+LF5Yw+jUdXiwSISTM34g5cv6sEaBTPGGlqPcONwJ49UU6L",
	"QooVzRMXL9En/KVYOeGPr/vwihu+ycQp++zF8at3DvxP41GaA5VJZQnoXRW+V3w1q7KdKraLElvQ3Bk6",
	"raUo2Pyq6HQYY3GBxctbxqZO35c6fiY4ii7mYhYPeN/J+1yoj13ilpAfKKqIn9rnaQN+mkE+dEVZ7p2N",
	"Htqe4HRc3LDmQVGuEA5w5WChIOYrOSi76Zzu+OmoqWsHT8K53mJpyviNg7vClciKXPAPPbj29FLIBvN3",
	"mYnR4KHrU6uMkm3x2BOr7Vt0tpWpCbGK1x/zP8xpvH8/PGr374/JH7l7EACIv0/d73i/uH8/6j2MmrEM",
	"k0ArFadLuFdlWfRuxM1ewDlcDBPQx6tlpVmKfjKsKNRGAXl0XzjsXUjm8Jm5XzLIwfw0GXJJDzfdojsE",
	"ZsgJOu3LRKyCTJe2K6gigrdjqjEJ1pAWMnvXdcI6Y7tHiJdLdGAmKmdpPLSDT5Vhr9wGU5qXCb7cY601",
	"I5asJzaXlywYy7w2pGZqC8hgjigyVbRsa427qXDHu+TsXyUQlplbzYyBRLnWEnX+coCjdhTSuF3MDWz9",
	"VPXwV7GDbPE3eVvQNiPIVv/d88qn5Bca62u0ZwR4OGOHcW+J3nb04ajZZrMtmiGYw+4xQ7rDe0bnnHU9",
	"c0S7vTOVzKT4E+KOEPQfRQpheMcnQzPvn8BjkXttllI5leum9fXsu7Z7+N24b+OvfBf2i64aq11GmMZP",
	"9X4beZlLr4qXa3ZI7ruEhREGzdSAHtaCxysIhsVWFz76iHJ7nmwViEaGWfxUhrmcR3b8+lQ6mDv5rzm9",
	"mNJYGxxzFzIwBdvbiJPSgviP/QaoqsaBnZ0EEdzVu8xWkitA1j6IblXaS95r7LSDbzT1BQYpKry6jG2Y",
	"Qq5EZJiSX1BuG6Wb7yy/cl8rsC5489WFkFgHUsVDujJI2TJqjv3w4dcs7YbvZGzObA/wUkHQZNoNRGyx",
	"SaQi16i7qtzhUHMyIw/GQad7txsZWzHFpjngGw/tG1OqUFxW7vDqE7M84Hqh8PVHA15flDyTkOmFsohV",
	"glR3T1TyqsDEKegLAE4e4HsPvyN3MSRTsRXcM1h0StDo6cPvMKDG/vEgJmVdD/dtLDtDnu2DteN0jDGp",
	"dgzDJN2o8ejrmQT4E/qlw5bTZD8dcpbwTSdQdp+lJeV0DvH8jOUOmOy3uJvozm/hhVtvACgtxYYwHZ8f",
	"NDX8qSfn27A/CwZJxXLJ9NIF7imxNPRUd5C2k/rhsNeab4nl4fIPMf618OF/LVvXDV9j6LInZwujlN+g",
	"jzZE65hQW/wzZ3Vkum9JSk58bWHsEVa1BrO4MXOZpaMuiYHqM1JIxjXaP0o9S/5hrsWSpob9TfrATabf",
	"Pon02mr2auH7AX7jeJegQK7iqJc9ZO91FvctucsFT5aGo2T36hoLwansDdSNh2T2xYVuH3qo5mtGSXrJ",
	"rWyQGw049ZUIj28Z8IqkWK1nL3rce2U3TpmljJMHLc0O/fz+ldMylkLGGgbUx91pHBK0ZLDCjLn4Jpkx",
	"r7gXMh+0C1eB/vPGP3mVM1DL/FmOXgQCj+a2ZHmjxf/yuq58jo5Vm4nYsgEKGbF2OrvdDUcb7md1a/tv",
	"bcAYPuvB3GC04ShdrPRE39vw+uqbzxEv1AbJ7nnD4PjwDyLNHRz1+Pv3Eej798dODf7jUfOxZe/378cL",
	"EEdNbubXGgtXuRHjt7E9/F5EDGDfi7Xlwj6gyNVHiBggo0LKSMapG2NMmq3hbl59OExiVzzMNE7+fv34",
	"uI2Az8wdcce2nWrscDrI6IRr7PS1jDqhd0ZBBBtgRp1CLszVKWx1E1qpo2TXkmCeAj8vvs3iHcBRbJcs",
	"z36pK5a12KOkPF1EY1+n5sPfrebZECyWAUS7Zywo55BHh7M3tt/9zS5y9/xvMXSeJeMD3233VrXLbS2u",
	"BrwJpgfKT2jQy3RuJgix2iwGVRUbyOciIzhP3aqhPvndHsyxxpCRrF0cdllqF42JGc6ujM6M5RhcGPeG",
	"4puJpLqHn2Cjct81x4yDfcOVvTzb0UESypYobhRdFjngyVyBNDd/McNM0ebnWBgMRw76MBBVmEf4JpZh",
	"EESXkhMxmwXLAK6ZhHwzJgVVyg7ywCwL1jj36OnDBw+ixhzEzoCVWiz6Zb6tl/LwCF+xT1zrIFvgfi9g",
	"d8P6qaaofTa2SziuUyK2Oo7xVNsDGe0d6PszIsl2Saw6ek7ID1jPxxBxo4A7GuF8adxmmciyyAXNxliy",
	"9+zF8StiZ7Xf2N7vtkvjHG1QTfKPOg2Gl8309Yp66sEMH2d7gQqzaqWTqqlirOKeeaNu+8hakSRonQqx",
	"MyHPrWGw6rxvJyFY+FkuIQt6ONqrKRKH+Y/WNF2gxa0h5vt55fD2op6d1f6IIKeu6umDDNvA7TqM2gaj",
	"Y4Ldti+YAswzhxU0i/xVFS+dxdcX/WsuT5acW0rZpwl31cFnX7R74Kya5l3lUchaiN/T3mK7DO/bbfUU",
	"v4pnGLRat7Z82b5knC8cTV47k3lKueAsxQL/MXURC5INc74N6IUQ95qpkTuhkcMVbRhbZbg6LPa2kPWM",
	"0CGu68gOnppNtdRh/9Swdo3E5qCV42yQjX3/ZufmYVyB69FkiCjkk0JGQnWi4f1VWMCeZIS1hnrsdi/N",
	"szfOqoulHs4ZR/uNQ5u7fFhHTK4Y+ls5YZrMBSi3nmaOivrVfDPB2oMZrH+bvBJzlp6yOY5hg8PMsm0k",
	"ZHeoYx8X6eIQzbvPzLuuInz1cyPIyU56XBRu0v7u3lFFUq95L4Jj0Tg+PCJAbjV+ONoWctsa0Izy1BAa",
	"rDAWCwqUwx3CqDpEN0d5YS5SlqLwDWLzBKNlYRmPgPGKce8YjAuINCoScGPwvPZ8p1JJtb07DOJpZ0Dz",
	"nrB+zLu1nuWrDtWuh29Qgmv0c/RvY93cuodxVC/UGj/lG+IPhaHuQJl4RvMqIDjSqhq1KqdEZZgy02pe",
	"HWMchnH7Nv9NAbAzKa36HHtM7CuJ+irvTctsDjqhWRYr2PQ9PiX41Kc+wRrSsmqtVOW8NStvd6nNTZQK",
	"rsrllrn8C1ecLugGH6GGsCO932GsHzPd4L+xvkL9O+NCgffONfVxv9l+5ea7ubMxrdfQdKLYPBmOCZQp",
	"V0dHPfXlCL3+/qCU7pNQv4gc0xaXC/coxt9eGMERlqPtRF1b0VJVi8UIZ4HPfRmfqs5hkyuhKOt0z0Jf",
	"Pm5eZMtawPsXo4CvaN6T3x16AKx8tVbxvizvtLcoAdWu6JSmZCsL6i3kYyNgWz6FrmOsL+rVBr0ezhbv",
	"1roVof0eqZ8a/icb+VQzi16/0+VcQ/UG7+sbcmX0uyZNmuciHXzq3TDH5qP+IpViuXTVmyORWaulyEI6",
	"D2N8AOJMywadRgLZ8e4ZfYYXo+gTeREfrWGzcE+dItghGUSaA3hs08w8MH5qO1E4bGAQdXgkL1mOzXb+",
	"/fTtm1H/tgX47m6gKxEbNSH3bUOVidMmhrmIrB570kR/Vz3mayz6Eqdz1z01+uCl0tFpbCGU3kevop91",
	"9mwuYkXLuyUoRjXuPKaCrav3wh72cCtjW9juVxO5clgbYf0KqboqDuqy2FBNhrTHiXVicQq6N1ha/u4q",
	"Rdn2NJ3ONh3e9nyITtbBx6fx6CTbS2uJdfMZ2VFivO8Vmy80NgP4EWgG8t2OZgd1gwO8dhRCsbq5aW4G",
	"c9VlFzjcZGgew9kCXGEIn2PcGcvHt64g1djRto7bkwD7tG4wk3nP223Tg36bRpXu4XodbGtw0G1ju0PR",
	"6tRkCuqK2Ragk+Hl/I+r6GybXHZBVV0JppWOPTgpdDaDFAsub62B9R8L4EF9pbE3jiEss6AkFqtSpLBk",
	"+P6m3xqgbSWqtsITtO65Mjh9KfLnsLmjSIMaoj1Jq/zAy9QkRgxYP6QvT91nzXcBaUxVlIFY8NHGrspz",
	"3Xejt5x0UNHtknN5kjSCo67ytmXKeD/1QXOZT/eqKImaWl+ZrG475v5L4HPsfq1c7B2tahqHphJy0u3J",
	"c+FqImPFssqB5asjg/K/+fKEdpacnbvWBIgV6y68oDLzbxyk3pSVTSwO9KyamdW5Id1Ik0iXB0yzSnNh",
	"1IikL1etmY5RxTLeUTbotK4NhHDNQErIKr9ULhQkWvhckm1wbEOFjay9FBJUb2clC1xvVe33ddlw7DBH",
	"sYo2dQG14QKJhCU10MmguHf/nNuQ/cw+9/n9vsPYTjNfRa+7W936rCCmOkgMqX5GnLTcXTfgMhY/xjnI",
	"xLv/2pW+ebPYG5b0zMrUCujwYFRW0cFlebawkqixLO2usnVHCPLvz2FzZE0Ovkew38EQaKs5WdCDWqat",
	"TT6oDVTF4J4fBLzPW6KuECJPejxOJ93y5G2KP2fpOWB5wSp6vqf9O7mLjo4qpOBisfHluIsCOGT3JoQc",
	"c5uv5KMLmp0LW5PzO3rb/GucNSttxwBn2Zx84PHED6zlL6/Izfww23mYAsPqrjiVHWRH8es174t7usC6",
	"/80GoZOht/Kuv7/doL4mKgtFTCc5tW7DZ3jQY327sbpCUAYEvcmUOHcjUbmIhQlfpgKEGSqOqXAyBEgD",
	"H1KIoILCDR5FQLTleuQU2qp6rp6emBEJtSf/soUFu93hYzf69szVLE1+NxMSGn3ezde2iGiVU4MVOvE/",
	"U6YllZvLlP/rdKfvWE96sbwzJq4Kh6sXUofEdXGY5+IiQWaVVC00Yldb855qCmPfz63+zpzqKQTBdVQ5",
	"RW1DFjQjqZAS0vCLeCqphWopJCS5wFi7WBjATBu9e4n5Y5zkYk5EkYoMbCuaOAX1zVVyTlFtgiC0KYoC",
	"SzuYiGy/Ceh44JRGplpnXoKq1nyPtvwp2KT4umCUXXRiHco9YeOgXIEohyH7chdeJBxbUaVtS4zz5hlb",
	"I92AjB35GdGyhDFxb7Tbb7uDTyWQJVPKglLR0gXLc8xJZ+vA/V1Fj8RR26P2nmBs64phAFSzPoHVhgsj",
	"86qiDSEPOA0rKhG9kKKcL4La1RWc/sorS3chDkf5WZUYo4bJaWaKJ2QplHY3TTtSveQ67u9uKriWIs+b",
	"Rimros+di/A1XR+nqX4lxPmUpuf38F7Lha5Wmo196nY7QrOeSbaqljUFcGI7pe+uAmzfw3hFR7SDGWSL",
	"xe3dMz4A87fdHHS3zf24u7D2uprMNH6NOeaEarFkafxMfV0hj72BijEWFS2HZts22gIW+Boe9lBYVREu",
	"yCK7aAZOo33njoljBM7Tj+zG/Bc18Pa4ZAaO0fQIyi5zcVpUkvbqei0AEFKbVa1LaXs9hppYxVXE3FZh",
	"wDiFNqADpQqGg10NNjPCwYHScCWgOiGoFYB3rfFhbMvW2XDWqVj75/fqunaXAv7TdipvMI++OLvTmrSk",
	"jbTzNXB6OEK8evbWoLQzzKifDg1Nq/ryDpTwAQD9wWoNGAaFrO0LxoyyHLIk1tbxpLJRjYObtsuPa3db",
	"Z8px8pSWvquiGbuU4GqyWBVfNv1fBTWkJKrXu5ZknsEabHLNnyCFbZc4DvwvkNtuii1jgCiSHFbQiOFz",
	"hWJKVDXZCvy3qvqYZAAFeiPbNrJYcFooy1uGE7f2JAhvGoLdqCXFItbuFNlhJokaddY8scdEDT1KBqIV",
	"y0rawJ/aV+VomgHNUY6gqnNHSPw9cug0P9sR3vsBjv33MVXGY+K3YXxobxYUR902BrQzWLVUfaeex2NV",
	"wypIlYMFZ8sqR6wl8ZpvqIJe8H6DZJfk6+vWwH1iggeIfbGGFLUad9+BzN14epwUrqAKUjsHyOytwHwS",
	"sbYvgBMugu6VF1RVV5W6PKP/wU6MLzHubtOXcCrXIaVX31mCgxHVqtPWe5GQFZ1e3jz/WU7i1oPYO16M",
	"RhS4HMwt9i9P3e7agS9gl3Bu9tPo/tj/0Ukxx8XHZFr6gfJcXNh2lOE99Dl4P6ilPu8Ccmo5q8SyD50d",
	"u8qhbVMHC5IGlnRDhMR/zK3zXyXN2WyDfMaC7z8jakENCTnHq40IcKG4ZuLt6tXYA+atLcJPZdfNho4Z",
	"DLcxowRAG0Hu+wYJsqTnEG4DBjtY/plqwzhVOUXLhRHZre3sYsEt3ld/WdIsvOljDcpmh3Zfldh8/f/U",
	"CYnhVL50XJHT1Dcfdd2PmnwGGwx74tILWG7PWO3yNU8CVdPimmilL3GQXcJkuifriqWB9HV2aYDdaeba",
	"aWpzpWUMtPy22ndsyfUdtJRD78LQqJsO0GELyF3ghx0xbwb/0fKwfcsYAv6XgveeHrghvLbd7Q1guVEG",
	"JQKrtVZPxTqRMFO7Akysudpc52VdQMWbWBlPJVBlI25O3rqLZ139lHFzEbYxoZVPsxolgxnjNbNkvCh1",
	"5B6DRVD5JkBYaPRHtPa40Pq0BKNMrmj+dgVSsqxv48zpsN0iw+4T3tHhvo2YMCqZ2h2AqfoOh0mytRk9",
	"fM0IcNvfyoZrKk15RmUWvs44SUEauU8u6EZd3qNUOQd2+ZRooM00SzcE3iUkbQtIvnFO4Sv6eyoA6QEd",
	"PwMcNhgXHHHWWNOOFj3+mS4MX4XDZknXSS7mmMrZcyBc2Vv08NkroOBoBrf62bB1+3kU+xO2T4MV/x0j",
	"0gJnHTLF9nP/FrcSr5E/c6a3nnxro2zn1tq4W3swPVL5vA7+t8TSPY+xdGhXASdMifbKpi8h4WkPgk2E",
	"Hv9Q0y7es4sYBuFy6UMj+PBOas1Ii1jStbUMJGgxUFvC+0HVoew0deFZXVNax9RgkTJ2Ket7Wtqsfd7L",
	"pR7wbNt7d9ab01YhM2acfdrPbU9STwpRJOmQmE/bFCRzbgIHaRPGHvoInAA9667CY1TVJqdRfKrRL2ff",
	"Dny9/Xp2ebuKdNulv89M1MPRmy4IMUNeZpvCo3ULM3kqY8rYX6+9T7ppBquYBKFEQlpKNBNf0M3ujmY9",
	"xahPfzz+5uGj3x998y0xL5CMzUHVBc1bHcHquEDG23afm40E7CxPxzfBl4CwiPP+R59UVW2KO2uW26q6",
	"WmmnH9o+9uWIAIhlZXY7UV1qr3CcOrT/y9qu2CIPvmMxFFz/nkmR5/GGEpVeFXGgxHYrcKGYG0gBUjGl",
	"DSNsekCZriOi1QLNg1hWeGVL+giegrcfOypguifkKraQvoBa5GeYYO+8RgTWRe54lfX0bFuXu6dZCx0q",
	"jRgVMwVSiMKp9mxGYhBhBpEsobKMO8MnWsSDGNmK2dpo2RghusjzOOmFvbi3c/tmn1gd5/RmEyPqhT+U",
	"lyDNPv9Ef/GIy3CS2rT/xfCPSDWMg3GNarnXwSui94PL9fsfBFq3MkKEPBCAnmzbRp5kkCgW1DiW1kuA",
	"/gTvQG6rH69rx/LOtBCExH+wA7wwfbZ+r8pkcOB85trBryukBEv5rY8SGsvflZHrWW8lSIItckYTrUFZ",
	"tiS6amGQbq2eVVnMPbeSTrKzFEITczPN80iStLXj4JkKCcdcCeSK5jfPNV4yqfQx4gOy9/2pUWGmbIhk",
	"i0p1uWKJr+iguYOs2MNNzd9hYvZ/gNmjqJxzQzknfEeaoXEHm+HPvVSwud7kAse0QVYPvyVT18ejkJAy",
	"1XbuX3jlpEoMBclmLqAV1npHJuqudf4i9BXIeOYjccibwL1V+ewdhPUR/cxMpefkRqk8Rn0dsojgL8aj",
	"wr6/O8TFFXs+XK72TlBFb8/aO92OxkOXh+tAoVMq6K5zsLRu4DYiqOu1DS0cNbh1xIcPv+rpkHpP8TYP",
	"5nMsOHWQfg97dXu4hlJTFkduDDdvjGJ+6Ss+bAvs9hRIb+1HyfKdASuNcvefxqO5LWaDBd1/d21pblaW",
	"egh6Sj65pV+lXIxFTGStjcmDqYLiPwNq2LvPIoXHMasxLSXTG2xJ7A1o7PdoE+kfqtoerjZM5Utzsk+L",
	"c6jawteVQErlpesPguYoj6yLjxspJPIJeWHLrLuD8s8703+Dx/94kj14/PDfpv948M2DFJ58892DB/S7",
	"J/Thd48fwqN/fPPkATycffvd9FH26Mmj6ZNHT7795rv08ZOH0yfffvdvdwwfMiBbQH1/haej/5Mc53OR",
	"HL87Sc4MsDVOaMF+ArM3eFeeYdUpRGqKJxGWlOWjp/6n/9efsEkqlvXw/teRa/00WmhdqKdHRxcXF5Pw",
	"k6M5pv4nWpTp4sjPg+XIGvrKu5MqRt/G4eCO1tZj3NSqDpR59v7F6Rk5fncyqQlm9HT0YPJg8tB1zea0",
	"YKOno8f4E56eBe77ERY5PVKuf8FRlav1adx5VhS2u4F5NK8quZm/FkBzLLBj/liCliz1jyTQbOP+ry7o",
	"fA5ygtkb9qfVoyOvjRx9dJUTPhnAom5DW+w+qHDuAxGLcpqz1MgsV4UF7cc2wF6FfWudZb1UYzK1rY19",
	"EC/PMETJViNQYXvvk8wg2n5/UjM7350Z/cqjp79Gyln5zA/fNDgMOgvC0f799O0bIiRx16J3ND2vsl58",
	"mlOd2hVmOZkvJ57u/1WC3NR06TjmeKSqzuPAy6VhPi59ZqnmRbO8bq2NxaxFHWT7mQ05BQeiKnRSMzw0",
	"DQaQ1OzbsOQHyXe/ffzmH59GAwDBqjsKsIfkHzTP/7DmNVhjZG0r8mbcFxM1rgtn4Af1To7RklU9DT6v",
	"32lWpf+DCw5/9G2DAyy6DzTPzYuCQ2wPfsMuh0gseFYfPXjgGZRT/wPojtyhCmYZ1IjBeheqUTxJXGKg",
	"LiOzj95XBUolLexhPPbxw5ui8u/YlyaGXz054EKbZVSvvNz2cJ1Ff08zIl3+Mi7l4Ve7lBNuY0GNQLKC",
	"89N49M1XvDcn3PAcmhN8M2gh3JU0P/NzLi64f9MoTeVySeUGVSJd8cJ2dyA6V+hURRZpz3ZQfo3PR799",
	"6hV7R2HQ49HHRu2k7EpC0XpZGr21dsvJHs6JY9msNPfD3eOiwJjP0+r5cVHYjuQYRwAMpR+smdLq3oT8",
	"EH7dcI5YSKxvpJEU4Bt0+7bfDV950OozKrQbVQlu5ffnld/HTSMJy4BrNmOosMeAaZyCrTB1opWuKkC7",
	"SUJBjaR9A6KrIuVOtUhcA7yBY7gG/4drXTigNIqdKVqtdiejvsVdD+761KQA3kpjsi9O4aZYsy+1W0mS",
	"hsi4Rsb9lSt9r2lu6CRYbquv0MnzW2Xwb6UMViU551Y7K4oDqIc+c2PXK0cfXZnJQ2iNeD0epC+GN+/g",
	"2yD4/m6L49ybkOP2O5djK65M505N0Lx3qwN+CTqgrXO6S/tzdPxZ9b4w72ufNKyGwmJ+H/TxV67o/Y2R",
	"1avZGUh363SXYJ8dfc0x62tjq39JPc0h7VZD+1traFXx7CvpaGHs65ErQxBobFcy8LUNeExXmlizgHrA",
	"2bDeCCbk2yM8ruP8DYuxAcwudFmN/eURPbX2Xmk3a9y5WnZVrB8gvMN+vzl5vku7+opMQYObUUekQHxv",
	"rpuXRj0T72/GMzGMNz158OTmIAh34Y3Q5CVK8WvmkNfK0uJktS8L28aRjqZivYsr8RZbqirUmUPb4FFV",
	"IdJx8Ny8bQNA7mLK75Qq+PaJvzndm5Dv3at1GRCX0j4XhlH5VDEq5/Yjw+sMMsgd/+dTHP/OhLzEBEit",
	"xhjHhpkV+CLj+unDR4+fuFckvbBhYu33pt8+eXr8z3+61wrJuMaQAXvP6byutHy6gDwX7gMnI7rjmgdP",
	"/89//tdkMrmzk62K9febN7bf8ZfCW8exkocVAfTt1le+SbHbuutDvRN1N+Lh/16so1JArG+l0GeTQgb7",
	"fwnpM22SkbuIVsbORjOeA0oje0z2kUdjJ39cjRjGSQ5ro+4WC2YUXFsaZrpBdlU1S3J1CSuZo2XJU6oh",
	"GxOKkfKJDXtkiqiy7vZgtpHx0nVJslQ+gKNjNO4Xy81fu5oRdZK8K7cjHGon5BTkCmxxNLZ0Pb5ycQHS",
	"lnTp45dLuh5dVrKQQsKMrf9eAsauebRNpBxUGGOsXW21tlTtTEeWCKYwZ5zcbZypfBOUJa6Ohz1fz2ie",
	"+zI8bFm4crEFnTPuOlRsiATGV+K8yjX1sbDVmPbsuW6LhYQVE6V1TdxRwensFdOw1vvhsMptNqh0RSF8",
	"JRiPkL7Z7Oux+eoqzIc1WFd8cmhJq1gyRo3GiHBQttVjsG9jW+ZzSc+t9RIL+XkW6EnI1QbF3as2E/OO",
	"6qDyaMufG7PtTh0zHm7jRfZdl3+tDQF/d73qK9ZsXLGcA+gze7tja3draN1zPQG32vUsh9dYpByZ7qYu",
	"T23YvZc7cX3EzDDUZPcFe+52OoyipqE2em8P761p7kqmuTZB7ck2MM1cHX1EKRTyjM65xTTZv1cQQyD1",
	"jQLoxL4gM9DpwmXot1AfYU/SZQn386Yl4+baM3r6YDzgYlJpiFXzo0ZD9buYBYL1q7Bq5QbL4EksM8lm",
	"WC7nnm8S7WrEYxmSOi0ijlo7fGImvVENE8muW0c9XHJGbSGPIW0Kg2xvjAMAGTl1b/E/NA+RVjUO8lVR",
	"Ef0VBl3jZnvFsq3cXeaQrzxQ0EYj6t1QPqsn72qPiJZDhFHcIng/BHe4+QtXNcWeQreIv0JukW+BmJA3",
	"oi5sYW0zf8kIhutURa57QW8EBxuqY1R1S4u3URmVnlSLSV/RyF646jZ9l9WZjnwlsK2K04/mpR3K0xB1",
	"A6uKXbvOcQ0i/MdovbSGlDFrm+ws11KPNoQ5mxdtX5VQSZp8zmvXZ+GnX+Bd7HNwrJthMXhIPZ9xagE/",
	"LNPBImGWmI8KX9GtjwO9Mi8HepmtmzaYG2lRWTwhUp2MTCEXfK6+TFa0jTrieIlQia2FZ9szddY/+Rue",
	"3Weud5J21QtcRTrFeApEiSXglcHo6K6wvYXwHzcHoWZLyIgosaxekCX/mbnLNw8e39z0pyBXLAVyBstC",
	"SCpZviE/86pH0lW4nUJ3mK8Q6c3XEebAuGIZtCoXpmGZtSswQTHf4qQHjeUU69qryupVotQgbdXNVis8",
	"1mHSMQM2MoxXZuoD6HO5mH9t6pzH+tBi8c9oniO6dtWpwoEHJTvkud1PWDKt69YzoXQlL2i6qPZ2XJsj",
	"qwahvkfBuFXVFkf2URm26CaYfdZAgtUE1gqQMBPY+Q0keNPassw1K/LmN7Wrmi4hFs1oaTNsRnLy3K8O",
	"VthIYlYP3aZf39HADT4xc7tHODMXdnFUAvLu0PwXmmknDaBtbz2fxRF0RHN93VzBVCZbFWxrr39RAJX1",
	"x5by7xYSEjeEpCuQiuJhbS3q3q2q/mWo6mtXMv0LUdS7npAD8PrLi6JGMsZHvWbZp916eVB1fE+VnPFA",
	"JQ/ZhT1rl9fFd7sfzloznjwPYyJEVZfPKwg9oBgU7Zny+b9GA302WOtJzNw9rOQWUF8q12msLhlNzMZV",
	"6J25kIrZU/KB3ydqQX0ld/fno2++7XONULVwFS67fqd6IPPYDjPE+fRVu9IOq3FU+H1607u93yaORyxb",
	"R9pV8AzWQYekZgd1Jw/vKOeri/f8KeJV26uLaTjsEoyYUgtW3HxlcKXZNN4awVviTrGZ3Nman/DvK4Os",
	"LV9ttIbic1SEHo+0BMig0IudheLxrXo3wZWMZ8o197LlvMeETWBio87qJozZHJQPJsyBzqpuikIMCRkL",
	"+IwhNE8VAdbDhQzRpKP0gzovEuXN20nrtFkr6Dzy2krxZ1XC9OdSwpKWFtZEy+fTybAtzDgIFSuk0CIV",
	"OcoeVRaFkLo63WoyyPIAfYpew/DQR7hXUubWLFM7XTpn+NYBbABNylZfjUvnzKMp5tOJLeqS5avruYaw",
	"tDNREHvBb4HwWfna7aUyxs9a7p+v3fuje0nvwM6glOp0URZHH/E/mLLwqU79x8ZG6kiv+RG2sj36uDUc",
	"GFlqbnQTaXsiNUy6nca40aDeV/h53X/ppZDB5fYH893OcN8W0sZtoW/b8mLccIQ9Xs9t8m99CdvqOmtt",
	"+NWjQSIjds5rVdkmaOZZ0W7Q1csXq7GtfCMkfBu99GUtqPYnzhjPCA22sWVrErJmBNfsU7zuRX8OF+XN",
	"h2x98xWfszdCkxOfOgjZ1SL1SZvDeemxVdzupxg40d8N5+/K/FDi+ySkShfZKeD3uPcECXPgp6MSq5MZ",
	"WX1DUfO3kvyLkuTPKm9rSIa3cvnrkcvSp07diuAvXwQ//mpXc40xTANF8iWcw00xXN/E9xTIHWXA2bBa",
	"hoNtfmW8erdXqV4K6XtX3krxr9QpandycCDWEAvNLkusm/IQWWdfFPTD7Ax5HrE09B3UcRXrxbDsq0gZ",
	"Nvk6ydTYBZVZ44Q7xbeKzxet+AR7fav33JoevjLTQ4+W4279eT5E0dhXAVotRQbesSpmM1dmvU/7aTaW",
	"NeSpNF0WxH456Y3DPmNLODVvvrVTHFTE1mC31KIWeAZZClLBMzUgisONelk5hI6mfgBu3LNZ7YCHBV3+",
	"oCeXJtn3QRXXDiWQNvIVNgT25eYdMjJYEUOAkwOQ7dFH+y+a0wqhIqs59QTc2Zi7blts/Xw7bgNA8g6V",
	"UFvKyn8lZuSBrfpVckxyrzv/U54RLTdGUfVF3STQnKSN5NYKju7JOe09OTuvAp3V9awpfhcQ9Qk9ZARD",
	"q7DATzd+AJ5R7ki+iyAtsIjjnGq2Au/yn9xWzbq0NHO1q7YwwDGhWWZPY70JsAK5IaqcKqPr8GaO0h3V",
	"PC97MAxYFyCZEdE0rx3w9ppwZEtjbYsjOrVvXFFotXiRLcglm1GLXrK6cl1iRl6zVIrjfC6qWHi1URqW",
	"nb767tPfe0rjeUNCN2ZV8JxxSJaCx7q9v8Wnr/Fh7GssL9b38Zl52PdtS9424W+B1ZxniEy+Kn6/kNN/",
	"pUCX1molFEKa2+3U1iOy9L/nUfKHZsPT7kna8DRwarmHwUBhk/fGz0c+HaHR8j365sfGn66EnntTLUqd",
	"iYtgFrQB2HDGIdWzUPneM8mjtrk1syeZul6r23V6mwI8xM5W9TTSybt+2N/M+2+ahO2cMyGRuJzGFUjV",
	"usjdZmL/pTKxB+/7XtzYDFmqXRytVIfVXd6IDOy4dTquOfqxXkpcZECUB6KlslRhkfGUIS+/6vdaSRwp",
	"LecLTcqCaBFLF6k/TGhqmWxiL0LxCYOC5va6hNMt6AoIzSXQzFxegRMxNYuuJSkukipidsnnnLjgz6jS",
	"FMBVSJGCUpAlvnfULtD8ezZUXW/BEwKOAFezECXIjMorA3u+2gnnOWwSVxn77k+/mKv1jcNrlcbtiLX1",
	"cSPobaddd6EeNv02gmtPHpKdTei2VGtbCSyLHFySXASFe+Gkd//aEHV28epowSwyds0U7ye5GgFVoF4z",
	"vV8V2rJIjPzugvjMPj1jS9TEOOXCWyBjg+VU6WQXWzYvhWtRZgUBJ4xxYhy452r6iir93uVLZ1jm0YoT",
	"nMfq2GaKfoCNFLV3i8jIv9iHsbFTIw+5KhVxI/gcKMhia8AC+L1zvYF1NRfWTvFjV0lW1ha4a+Q+LAXj",
	"O2QFDbQI1YHfHwvodxeHlkrqTBldVDaAqBGxDZBT/1aA3dDh3wOI65ESXEaZalFOVad2PFJaFIXhFjop",
	"efVdH5pO7dvH+uf63S5x2VoYVm5nAlSYAOcgv7CYVWjKXVBFHBy+owG2SLQNkbswm8OYYJmlZBvlo3HX",
	"vBUegZ2HtCzmkmaQZJDTiNHlZ/uY2MfbBsAd9+SZrISGZIo1UuKbXlOy7DUmVUMLHE/FlEeCT0hqjqC5",
	"PNcE4r7eMXIGOHaMOTk6ulMNhXNFt8iPh8u2W91jwDJjmB139IAgO44+BOAePFRDXx4V+HFSmw/aU/wn",
	"KDdBpUfsP8kGVN8S6vH3WkDb8BcKsIakaLH3FgeOss1eNraDj/Qd2Zip8at0C7SjnK4xya5pag0ugJPL",
	"XG6PLijTyUxIq0gndKZB7gyd/w/KvOPcp+8KV3WF4AhObrpxkMmHbSkdF7EgECcuDIm4SlJGhlHykCwZ",
	"L7V9Ikrtet5IoOnCKO2hDdaOhM1nXJEmCXMqsxybTs8quSmkLfqkWwIegY7kIzZv/GbdL4Uc1AWgWTqS",
	"Mk1KrlnuADQcr7q3f3nWy1uLxK1F4tYicWuRuLVI3Fokbi0StxaJW4vErUXi1iJxa5H4+1okPleZpMRr",
	"HL5iIxc8aQdT3sZS/qWqyleiyhtI0DpxQRmypaBKQb/dYg9DkAaaIw5YDv3R3Tbo9OzF8SuiRClTIKmB",
	"kHFS5NRcDWCt697vVMG3T3yqoRWddGn7e6N8NS88fkROfzz2FUcXrjJm8927xzZejSi9yeGea4tWdaj2",
	"/dGAG6S79mjUi4TU5Um6jvksx8h4RV7g289hBbkoQNpihthOsGvxOQOaP3O42WHwwebdLtT2DzPaH+OG",
	"0cuhbUkLr+b7tVJFqM24JM+DHMw/ZjRX8EdfGqYdb0mLAZ0IkZl8L7JN64SYXTvCDWyejbruKONUbiJV",
	"oropEG3S0MKwK0dYXVvWp4NXx+0SbZfMdlFYtB02lsGPj95H5dGysNWGdYayibqzFp2MYjmm7VqoowrA",
	"QYUBMU3C7gl5b7/7vGUAESJ3xGpm/sVEMTbfrJgGvmsuEY71fK25BB7x0dOLZ39sCDsrUyBMK+IL7O4W",
	"L+PROjEjzYEnjgElU5Ftkgb7GjWkUMYUVQqW092SKOSfeOIq4WOebJdTn0eMPA8Wt40nh0SzThwD7uHO",
	"Gw2DeXOFLRzRsecA49fNovvYaAgCcfwpZlRq8b59mV49zeaW8d0yvuA0tjQCxl1B8jYTmVwj45MbWfJ+",
	"nvdiDWlpgAtP8l20zqNLDta64WTNYFrO5+a20PXRYRsdHI8J/plYoV3uUC64HwXZwav2/ldNUm8P1+Uu",
	"Qd74XV+Z8R5uB+UbdGYsC8o33uULiWLLMrc4tE2lD8tobc3wWInp2vbXZ9V+501+ge3Widrm7xYt5IIq",
	"YvcXMlLyzGU8dWpbr/nwOid26LM1r9n01pomdr2R1bl5h4gIv8vNVHNFCpCJXnN7oBqHyXUwsCf3s9bS",
	"vhUbNyc2bKI69DDYbjX+miEcSHrIgK+h+Ah6LtWJeY1OTLSZTth4hhaN/hSXsDmTffOggSWd4ZvxJbW5",
	"xflPIS8IJWnO0LsquNKyTPUHTtF/Eyxs0o098Ybqft73zL8SdyFGPHxuqA+cYpBR5dWJ8sAZRFwYLwE8",
	"i1XlfA7K8NGQgGYAH7h7i3FScnMLEzOyZKkUiU2tNefL6C4T++aSbsgMK5oI8idIQaZG6ge7bm3JSrM8",
	"d8EuZhoiZh841SQHqjR5zQwHNsP5cgpVyBnoCyHPKyzEe/XMgYNiKokbZn6wT7Edjlu+NwCiMdM+rttY",
	"3GwfHA87y3ohP3mOMWpYjTlnKuy/2Ib9xnzjS8aTKJGdLYC4cLE2bZG7WAPOEdC9puNIL+ADN9JPC4Ic",
	"n+rLkUPbA9Q5i/Z0tKimsREtR5Ff66Dr30G4DIkwmVu3y18ohTSgA+/ZxI239fVbe7+ni6UhcgFbg/YJ",
	"ZPvUtU/secldIBpGslaBG/fGWQPkrf6Lr7+s5OHvkh6NB7tNdgfssqtmgzzEm9/wMaG54HNbV9HcLgXu",
	"E+NFqTEA/DoNeLCieSJWICXLQA1cKRP8xYrmb6vPPo1HsIY00ZKmkFiLwlCsnZlvLJ1io0HONKN5grfq",
	"oQDBif3q1H60Qx4H3UaXS8gY1ZBvSCEhhcwWImOK1Pf5iS3QQNIF5XMU3VKU84V9zY5zARKqxozmCt0e",
	"Il4IZs0TW5SuC+Oxa9Qc1u0Fmi4ijWNQwJk7uyeorNGTauAeNEqO9l3Sx6NeRdsgdVWHzlnkNNnMAC2i",
	"oQ8E+KknPkSN1luivyX6r53oYyUVEXWzlrXC4ivclms2a113AdEbtJJ9lurCtyX6/+ol+j0HUoQSSRt3",
	"kHhvOKoI0+QCyyJNgRj5VaJ13jXcc/d1zLQLjrqrtKlce750QRl3NXWqvAaEw1yJl0umtW9Pey2GTcvM",
	"0KJp0AFpKZne4K2FFuz3czD//82o/Qrkyl9oSpmPno4WWhdPj45ykdJ8IZQ+Gn0ah89U6+FvFfwf/V2k",
	"kGxl7lefEGwh2ZxxI3Mv6HwOsjYhjh5NHow+/d8AAAD//waIEr+PxAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
