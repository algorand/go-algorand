// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"G43m04dP/zcAAP//tAqxpheTAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
