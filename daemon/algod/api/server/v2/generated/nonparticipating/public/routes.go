// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address basics.Address, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address basics.Address, applicationId basics.AppIndex, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address basics.Address, assetId basics.AssetIndex, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId basics.AppIndex) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId basics.AppIndex, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId basics.AppIndex, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId basics.AssetIndex) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round basics.Round, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round basics.Round) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round basics.Round) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round basics.Round) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round basics.Round, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round basics.Round) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round basics.Round, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round basics.Round, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round basics.Round) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round basics.Round) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId basics.AppIndex

	err = runtime.BindStyledParameterWithOptions("simple", "application-id", ctx.Param("application-id"), &applicationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId basics.AssetIndex

	err = runtime.BindStyledParameterWithOptions("simple", "asset-id", ctx.Param("asset-id"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId basics.AppIndex

	err = runtime.BindStyledParameterWithOptions("simple", "application-id", ctx.Param("application-id"), &applicationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId basics.AppIndex

	err = runtime.BindStyledParameterWithOptions("simple", "application-id", ctx.Param("application-id"), &applicationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId basics.AppIndex

	err = runtime.BindStyledParameterWithOptions("simple", "application-id", ctx.Param("application-id"), &applicationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId basics.AssetIndex

	err = runtime.BindStyledParameterWithOptions("simple", "asset-id", ctx.Param("asset-id"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "header-only" -------------

	err = runtime.BindQueryParameter("form", true, false, "header-only", ctx.QueryParams(), &params.HeaderOnly)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter header-only: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithOptions("simple", "txid", ctx.Param("txid"), &txid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithOptions("simple", "offset", ctx.Param("offset"), &offset, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9e5PbtpIo/lVQulvlx0oa23GyJ/5Van8TO4/ZOLbLM8m5u7FvApEtCWcogAcAZ6Tj",
	"6+9+C40HQRKUqBmNH8n8ZY9IAo1Go7vRz3ejTKxKwYFrNXryblRSSVegQeJfNM8lKPxvDiqTrNRM8NGT",
	"0TEnNMtExTUpq1nBMnIOm+loPGLmaUn1cjQecbqC0ZMwyHgk4Z8Vk5CPnmhZwXiksiWsqJ1Wa5Dm29+O",
	"J//zYPL123df/u39aDzSm9KMobRkfDEaj9aThZi4H2dUsUxNj93473c9pWVZsIyaJUxYnl5U/QphOXDN",
	"5gxk38Ka421b34pxtqpWoycPwpIY17AA2bOmsjzhOaz7FhU9pkqB7l2PeThgJX6Mg67BDLp1FY0XMqqz",
	"ZSkY14mVEHxK7OPkEqLPty1iLuSK6vb7Efkh7T0cP3zw/n8FUnw4/vKLNDHSYiEk5fkkjPs0jEtO7Xvv",
	"93jRP20j4Kngc7aoJChyuQS9BEn0EogEVQqugIjZPyDThCnyX6cvXxAhyc+gFF3AK5qdE+CZyCGfkpM5",
	"4UKTUooLlkM+JjnMaVVoRbTALwN9/LMCuamx6+CKMQnc0MJvo38owUfj0UotSpqdj9620fT+/XhUsBVL",
	"rOpnujYURXi1moEkYm4W5MGRoCvJ+wCyI8bwbCXJinH91eM2Hda/rui6C96ZrHhGNeQRgFpSrmhm3kAo",
	"c6bKgm4QtSu6/ubB2AGuCC0KUgLPGV8Qveaqbylm7oMthMM6geizJRDzhJR0ARGep+QXBUhJ+FSLc+CB",
	"Oshsg49KCRdMVCp81LMOnDqxkIgOpKh4ilERfODQ3MOj7LeHZFCvccT3258ptnCP2lCfssXZpgQyZ4WR",
	"l+QfldKBgCuF274EokrIDO/NiRnGIF+xBae6kvDkDb9v/iITcqopz6nMzS8r+9PPVaHZKVuYnwr703Ox",
	"YNkpW/TsQIA1dU4Vfray/5jx0kdVr5Oy5LkQ51UZLyiLz4KhlZNnfZRhx+wnjTSDPA56A+6PG+tsffKs",
	"j6Vu/0Kvw0b2ANmLu5KaF89hI8FAS7M5/rOeI2nRufzXyKoX5mtdzlOoNeTv2DUqVMdWfzqulYjX7rF5",
	"mgmuwYrCSM04Qmb75F2sOUlRgtTMDkrLclKIjBYTpanGkf5Nwnz0ZPS/jmpF78h+ro6iyZ+br07xIyOM",
	"JRjGN6FluccYr4zyiKpWz0E3fMge9bmQ5HLJsiXRS6YI43YTUe8ynKaAC8r1dLTXSX4fc4ffHBD1Vlgh",
	"abeixYB694LYF2egkPad0ntHNTRFxDhBjBPKc7IoxCz8cPe4LGvk4vPjsrSoGhM2J8BQnsOaKa3uIWZo",
	"fcjieU6eTckP8diXrCiI4MWGzMDJHcjNmJZvOz7uFHCDWFxDPeIdRXCnhZyaXfNoMHrZIYgRtcqlKIwI",
	"3ElG5uUf3bsxBZrfB3382VNfjPZ+ukON3iEVqcn+Ul/cyN0WUXVpCr8w1HTc/vZqFGVG2UJL6qRG8KHp",
	"Cn9hGlZqJ5FEEEWE5raHSkk3XoOaoCbUpaBfFFjiKemCcYR2bBRyTlb03O6HQLwbQgAVNG1LZla9umR6",
	"WatcAfXTzv3i8ybk1J4Ts+GUGd2YFExpowzhZiqyhAIVThoMCzEVXYloBtDClkUEmC8lLS2ZuydWj2Oc",
	"0HD/srBeU5IPFLJJmGOzRY13hOrKzHwnw01CYg0OTRi+LUR2/iNVywMc/pkfq3sscBqyBJqDJEuqlokz",
	"1aLterQh9G1eRJols2iqaVjic7FQB1hiIfbhamX5lBaFmbrLzVqrxYEHHeSiIOZlAiumzQWYcTwBC3YB",
	"3LKeKfmOZkujTJCMFsW4tkuIclLABRRESMI4Bzkmekl1ffhxZH9RwnOkwPBBDSRajbNpTMnZEiTMhcSL",
	"qgSyoiicVuZ6VBbNbwJzVXQFLd0JhaWotIExurmcPPOrgwvgyJPC0Ah+WCNe+OPBp2Zu9whn5sIujkpA",
	"QwvjWVHlNf4Cv2gAbd6uRS2vpxAyR0MP1eY3JkkmpB3CCn83ufkPUFl/bKnzbilh4oaQ9AKkooVZXWtR",
	"9wL5Hup07jiZOdU0OpmOCtM3Oss58DtUCkEmrBsv8T+0IOaxUXAMJdXUw1BPQZ0m7AfKbIMqO5N5wfAt",
	"LcjK2s1ISbPzvaB8Wk+eZjODTt531lTnttAtIuzQ2Zrl6lDbhIP17VXzhFibj2dHHTVlK9OJ5hqCgDNR",
	"Ess+WiBYToGjWYSI9cHF2rdinYLpW7HuiDSxhoPshBlnMLP/VqyfOciE3I15HHsI0s0COV2BQunWcIOY",
	"WWpT9fFMyKtpEx3XRG2AJ9SMGilT4xaS8NWqnLizmTCP2xdaA5FgXtquBLSHT2GsgYVTTW8AC8qMeggs",
	"NAc6NBbEqmQFHID0l0klbkYVfPGInP54/OXDR78/+vIrQ5KlFAtJV2S20aDIXWfnI0pvCriXvDihdpEe",
	"/avH3iHSHDc1jhKVzGBFy+5Q1tFiL8b2NWLe62KtiWZcdQBwEEcEI9os2slr+9378egZzKrFKWhtLsGv",
	"pJgfnBt2ZkhBhy+9KqVRLFTTKeW0paPcvHIEay3pUYlvAs+t682sgylzB1zNDkJUfRuf17PkxGE0h52H",
	"Yt9tqqfZxFslN7I6hOUDpBQyKYJLKbTIRDExeh4TCdvFK/cGcW/47Srbv1toySVVxMyNDrCK5z0mCr3m",
	"w+WXHfpszWvcbJVgdr2J1bl5h+xLE/n1LaQEOdFrTpA6G5aTuRQrQkmOH6Ku8QNoq3+xFZxquipfzueH",
	"sZEKHChh4mErUGYmYt8w2o+CTPBc7bTmeG9gC5luqiE4a2PL+7J0P1QOTacbnqEZ6RBnud/65Vx9RG14",
	"FpnCDIwF5IsGrd6oyasPUxaKOyoBqcHUc3yMHoFnUGj6vZBntbr7gxRVeXB23p5z6HKoW4zzOeTmW29R",
	"ZnxRQENTXxjYp6k1fpQFPQ1GB7sGhB6J9TlbLHV0v3wlxQ3I0OQsKUDxgTUuFeabronphcgN89GVOoDq",
	"WQ9Wc0RDtzEfpDNRaUIJFzng5lcqrZT2RO2Yg5pVUgLXsZ6L9gymyAwMdWW0MqutSqJFSr7UH05oZk/o",
	"BFGjesIcQqiGfctOt6QXQGghgeYbMgPgRMzMousoB1wkVaQ0urNT65xKPJTfNoAtpchAKcgnzp69E17/",
	"npU/egvycDW4ijALUYLMqbyZFZxf7AT+HDaTC1pURj3/6Vd171NZhBaaFju2AN9JbUTbfNddyjVg2kbE",
	"bYhiUrbWQnsSjIptmE4BGvqQfX3s9W5/G8wOEdwQAi9AYkTNjR4tP8kNEGWA/4YP1o0soSonRg3sNT8Y",
	"zdXsN6dceN1wxwxhgoIqPdklUsxLDbuJWWrExVNSBAfu0SefU6VRDSSM52i/taIQ57G6pZlitGdQGU7Z",
	"exszk/7qL2LdaTMj3rmqVLiVqaoshdSQp5aHPuveuV7AOswl5tHY4eqnBakU7Bq5D4HR+A6PzhCAf1Ad",
	"PNTO591dHEYdGPVlsy+WG/DVONoG46l/K0J8HFTbAyNT9R5YcmOqRW8zIQqgaDJVWpSl4VB6UvHwXR8G",
	"T+3bx/qX+t0uSVo3kNVUcgEKXUzufQf5pUW6Ql/Xkiri4PDxCWjwsiFyXZjNsZ4oxjOYbDsveAk2b8UH",
	"50rHvSoXkuYwyaGgm0S0hX1M7OM9CcOPjQRS2w+EhskMvYlpGqnPhI83vdqsAqdSKcWb4BOSmXNurlE1",
	"qbmvrz5pDjhtim86Yr0TZkEwknTgx0NkWXpKjIiy/0JoQ1aO6HA1Tipdcy092Auz3ggCcdxJbQhoz/7f",
	"oNzcQQE76PwbUH0Lr6c+1LJ7zP8o2xsCsyXKWtImKSJ6+fIOxtjHg3p8Ea+o1CxjJV5Xf4LNwW/v7QmS",
	"sRIkB01ZATmJHtibfBl/T2wYcnvMq93mB5lbu+B37K2J5fjIrCbw57BBs8krm9EQWasOYY5IjGoELuUE",
	"AfVR8+bGE78Ca5rpYmMUW72EDbkECURVMxu10nWhaVFO4gHSOVP9MzqHfNIdvjVC4BSHipaXijy0t63t",
	"8J21rlwNdLhbVilEkbB/tk98BxlJCAaFC5FSmF1ntCg2RIe0GU9JDSCdgMBojKDP3FENNOMKyH+LimSU",
	"4w230hCUNCFR80Fl2cxg1M0wpwtVrTEEBazA3ubxyf377YXfv+/2nCkyh0sbcsPxxTY67t9HU9wroXTj",
	"cB3A2m2O20lC6KCv0ghZd2tr85TdQW5u5CE7+ao1eHBwmjOllCNcs/xrM4DWyVwPWXtMI8MC/HDcQe67",
	"ZkhYZ92476dsVRVUH8JRCRe0mIgLkJLlsJOTu4mZ4N9d0OJl+Oz9eARryAyNZjDJMEtw4FhwZr6xiYVm",
	"HMaZOcA2cWQoQHBivzq1H+24addxy2y1gpxRDcWGlBIysFlyRktVYalTYlMmsiXlC7wBSVEtXKizHQcZ",
	"fqWsJUxWvDPEvqqYXvMJujBUMk0N3ZY+29IoYUDNzbbt/7CXtUsaQLHCaJDQjran7Q9KukzHo96Lv8H3",
	"RX3xt3hrpoxe1ZnY0A8jpNXQDPSeIT6NrtRFYryN5vAZYrgZL009dArK7sRRUHj9sC8u/LQqy2JzACXJ",
	"DkQklBIUirTYDKjsUzEnP7NMiuNiIYLMUxulYdV13thPf+85rq+vcgMWvGAcJivBIXGlf4lPf8aHg82O",
	"Vgz3jIgK0V4Dti8+DSS0FtCcfAhJX3eTkGTaZ7/t6VTfC3koL7sdcPCdYoDnemdYh5vyqv51WhQJl7Q1",
	"P3S4iBqHoHAmCVVKZAwVxZNcjV30ufVi27D2FvpfhdSoAxzg9rgt32uUhmUN+VCUhJKsYGjmF1xpWWX6",
	"Dado6YuW2r3pzKiCyRxgu1fWvNVA2RyA3MUSASAxKu5e09SBStiaG2l7QQuW2yREF3MfHBLCiGscLxM8",
	"Z6gjTvdwM3jDRr9J+6l/JW1DT5i43VBvOMUg12C7TAY1JRH3PYC5IeTmZONdY0pOdFA+YF1iTCJuJMiJ",
	"QR6iE1RGByojNQoWwEExNUnHSP5gn2I6irO1L11qCmZp2Mc+VrquKjEyQDXKXfyfu//55Lfjyf/Qyb8e",
	"TL7+96O37x6/v3e/8+Oj999883+bP33x/pt7//lvKeR52FNp5A7yk2fudn/yDK9wUYZJG/ZPwZWzYrz/",
	"LPkAn+seI/+7P0Uc9KWQ54GCr6qpdU+Tpe8WkTX2rWX/8+vf8x51DR5HEiyuxZhvRBFsT7A1Uife8VZy",
	"gmNL6uAAuoFTcLXnTMXj3vnhuzNy5AhB3UFicUNHNQkSVx+X+tgIDzK7FGeEveFv+DOY40VS8CdveE41",
	"PbKH6ahSIL+lBeUZTBeCPPHZlM+opm94R371Vp6KsqGj0lMpRkFX6bW8efMbLRbizZu3nQCGrlLmpoqZ",
	"qDtnXfuan3JiJKKo9MRVf5lIuKQy5UTxtUFcGjV+vRUOq8yISjs5YxPB3PjToVCWpWpXieiiqCwLg6KI",
	"VJUrdGC2lSgtQsaZ4eUuadfQwAvholEkvfR35UqBIn+saPkb4/otmbypHjz4AnP36toIfzgeaOh2U8Lg",
	"G3NvFYv2RRkXbhV6jEaflHSRcra8efObBloihaARaIVX1KIg+Fkjr9CnEOBQ9QJCEvMeW2Ih2zshGJd7",
	"ar/y9cDSi8JHuKnNpOtr7WCUTn/lDdyRkk8rvZwYjpBclTLHwO+Vr0xAF0bk+NADxRZ4c1BLUZklA8mW",
	"kJ27kliwKvVm3PjcR8g4WewZDlOo77mswjkz+MsoNwNWZU6dHkP5pl0bR9ksChz0NZzD5kzYz6cDy4pF",
	"Zeyi2iyq7+gi7Uay1pBvfJDdGO3NdwFbPrnU1THBhE1PFk8CXfhv+o+2VQAOcKxTRNEoENKHCCoTiLDE",
	"34OCKyzUjHct0k8tj/EMuGYXMIGCLdisSLDpv3cdIh5WQ5USMmAXPh04DKgImxOmFZlZcUywcASRlC/A",
	"CHUjiIWiBUb7T5MRAqgdLoFKPQOqtxp6eVyfwkOH+vglZlujtWVslgBrs99Mo/WEw6W5V+Gl3b7jIpCn",
	"V4rDsmuC/Iqg+s/r7OrpVe4QDuGJQnhe3oc9CdcFF9gWUyeCbJ+vDA4XUlwqvMvnRPiaj1gZJpJTlaIL",
	"GCqOGj6mgbU0Gq4jHGSX9pPUd8S8rdZ0dIyBi7CfTwxektwBzBPDHvAK34qN9HNb36NzR7zkxcYjdVag",
	"Qh0iSy3pUNlw0PHFfsCm2RhIXiurHrAm1uKjv6TKH/18HHH0K2qLH6cGzbbCeydR2B7V3bJ6Xky3WfuY",
	"rCqljbAW3Hzhy+/5mnu+0N5ovFfRvPHI5Uak9k5w1KJzKGBhcWJf9nRWF3aqd9PA8XI+R6Y3SUUARlbM",
	"SDNxc4C5iN0nxJrayeARUqcgAhtd8jgweSHiw84X+wDJXWEq6sdG2RX9DeksQxvGb7RkURqpz3rcXZln",
	"Ka4uRq3ytGKjcRjC+JgYTnpBC8NJXcZqPUinyBvefVol3VxQyL2+O9HAg+bWiNrJXqu0+sxV1hcr3n4Z",
	"6VvBXmuYifXEplQnr1az9cyciWSiAyZ4pw6vLbl3R5GZWGMwEko4Gxm/N3T9kHnAoviRNVNI5fhdn9po",
	"wdsPkO2KfIqaFZKes6sFsuvTZK8GTI863Ud2d6PaewcCqWXArOuHO4vOTjtLU9vqaiK1uB2HsrIhvy3F",
	"avoOZ3InezDaNZ42i+T9WNdJ7K+q5s/qB6kO2DXKXaego/24tEUa96nn2CaHBhBbsPqqrcQm0dqMeGri",
	"NcJaiiUZRt/1NHXRpqAAtARMGnr15Dzlz37z5jcFqDOc+s8iOyfuHuWbe1EYnYQFUxpq34KPjvnwrh80",
	"J5rLlpj3r06Xcm7W91qIoGhYPy5+2FjmB18BxrzPmVR6gp6Z5BLMS98rtKR9b15NK8LNQD2mrKtnbz0Y",
	"ITqHzSRnRZUmZQfST88MRC+C5FLVDAUl4zZMaYY19JORvXu4JhEeGxG+FUHPLYKe0w+Bn2EHy7xqYJKG",
	"8prTfyZHrMULt3GWBC2niKm7ob0o3cJroyT8LqONlOgoXmO6zefTOZe5H3tnGJcvBdCnRNiRkmuJSimm",
	"Mw/FYgG5LxHnskltuSxXiK8QfFEHRJjft9QdnBJb/g+r920p/Ofi2qEvqr3RhwTbaSShjy8zCHmdlodF",
	"C3GSBXBb8mW0f6OSIom4OKIe34gsox+Wt3fi7ZMxx2etOOM6GNjuYdhs3J4CaO6uVQr8+rYf2u52OdSN",
	"+6KVG7Vltx8wHBApjmkVKTAdounh3LQsWb5uOf7sqNMrkMRAda9bQr6FM2RLbrAd+GlGJO9o8nPHSEd8",
	"3zk7jvCaf2QumTYQ2oXymrNBM1emIK8kepMaYcbdQvzhojlw7T/9eqqFpAtwHsGJBelaQ+By9kFDVMte",
	"Ec1scFPO5nOIPWHqKl6cBnAdf0c+gLB7SLDrLgt3y6302SWyHbRVr2A3QtP0lKCUvpiLs64/0l88Itta",
	"EDbRxl3BqZisRPATbCa/0qIyNyEmVR3U6hyETbG+B01crH6CDY68M1bUALZjV9AU9xqQQlPelfBIReXF",
	"76hG2wa8Aze2cI+dOk7v0oG2xvXg6D8atYRqNKJoLuXmjk0dImMgHbJXp+moE3O2oLktbULftUUs3637",
	"RFeQeCqG0RtXEXKhRMfO6DKghSd8XOzo/Xh0vXiPlJx0I+7YiVdBNCd3AYMxrf+/EfS154bQspTighYT",
	"FyfTp3RIceGUDnzdh9V84PtV+lScfXf8/JUD//14lBVA5SSYOnpXhe+Vn82qbO+O7WLI1nF3tl1rCos2",
	"P9TajiNpLrFme8ua1mmSU8dNRQfVRdbM02HaO/mmC/GyS9wS6gVliPSqPdI20KsZ3EUvKCu849dDO9TK",
	"bpc7rC1Tkk/EA1w7SCyK/rv2WL1B+m/e/HbhMVv7U2ygVKiln4ilU1eMdO7wmvRZrWl9B4fEdb7EEqjp",
	"exd3BVKRMbqAM3pwPfB7IRuCyqVDJgPWbk5BNJcJi8e0U/7MeeE7auGUWBXyj8Ufhjfcvx8f/Pv3x+SP",
	"wj2IAMTfZ+53vEfdv590DCdNfYZloSWP0xXcC2kRvRvxYc0QHC6HqQvHF6ugI4t+MgwUaiPPPLovHfYu",
	"JXP4zN0vORRgfpoOMVXEm27RHQMz5ASd9qUzhuDnle0Dqojg7eR9TK81pIWix7X+sH727hHi1Qr9zhNV",
	"sCwd9MNnyrAkbkN6MUkHXx7sQzZzVKwnrpxXLBrdvKau5PJsLSSaNYlwlSwhXON3JhwLqDj7ZwVRP2CU",
	"xC3h7K9COGpHwU7bF93A7XbDo6t0Cr6+i9Bb1bYZjLa6XJ8FN6BHRKpB1Z75DvGMHea/JVfBUZQXn5y5",
	"GI1BlLX1nre9e7RzA3v26Tyu/Rck10fTbuazITvN1GQuxb8grTugkzBR88N7txka4P8FPBWj2mZkIXKg",
	"7nRdz76LQIbbFvpI5dq2BL/o0G7vKiI8zSf22+g9jQbRfvebDVS6LrnbhL6Lahx40kyk6WFmeGCjsHBs",
	"AuTD3Si3J9QWxGhknqXPeVwW5siOX59zB3Mn4b6glzOa6pBk7osGpmj7G4F5WhD/sd8gFWo62NlJlMsQ",
	"3mW2SmAJsvYedWssX/HuZ6cdfOurL3lIcfH1bmxjVQolEsNU/JJyjCPE7ywHdF8rsHEY5qtLIbEyqErH",
	"EOaQsVXSGP7mzW951o38ytmC2V7klQJC59oViHQD2W70lopcG/BQxMSh5mROHozrM+t3I2cXTLFZAfjG",
	"Q/sG5mKbtYWj7z8xywOulwpffzTg9WXFcwm5XiqLWCVIuJ+j6hkiYWegLwE4eYDvPfya3MWAYcUu4F5a",
	"wDhlbfTk4dfjbS23EePYXX4bk8+Ry/tEhjRlY1S1HcOwVTdqOjNhLgH+Bf3yZMv5sp8OOV34phNBu0/X",
	"inJqEJKCabUDJvst7i+GcrTwwq13BpSWYkOYTs8PmhqO1ZNMbhiiBYNkYrVieuUiRZVYGQqr+5fbSf1w",
	"2JjP90/zcPmHGIJdJu74H+G6RVc9GY4YVf8C/e0xWseE2lKvBavzL3xrW3LiS1pjQ7nQR87ixsxllo76",
	"KqZjzEkpGddoNar0fPI3c32XNDMMcdoH7mT21eNEY7Zm7yK+H+AfHO8SFMiLNOplD9l7Lcd9S+5ywScr",
	"w1Hye47vN09lb6x4Or63L+y4Z+hra9dm3EkvAVYNAqQRN78WKfItA16TOMN69qLQvVf2wWm1kmmCoZXZ",
	"oV9eP3eayErIVIuMmgE4rUSClgwuML80vUlmzGvuhSwG7cJ1oP+40W1eLY1UN3+6k5eFyKucuKeFekxG",
	"0//157qwPjq3bd5uy3opZMJO6yyOHzgsdT97YduHbsMB8VkP5gajDUdJ1BtKp3vYfI7wzceI92qDZPe8",
	"YSp9+AeR5h6Puv79+wj0/ftjpyr/8aj52LL3+/eHh8ym7YXm1wRqriZr2mUvzbeprf5WJKx3vv1niBtz",
	"pUoSFtakLDMidebGGJNmj8UPr3ccJl9x7zDk9AHyqMHHbdx8ZP6Km1lnwPTzh2bb2ST55OF5lENBybdi",
	"PZSIWmLL09MngKIelAy0CuJKOm11k5ESO8N8IrI1o86gEOamGnfOGhy18hntgkHNeMteVKzIf6290C3J",
	"JCnPlsmg8pn58Hd7DYheiCwY2ZJyDkXya3tb/t3fqhP3/n+InmFXjKcftTs4W9hbkNZgNYHwU/rxDa6Y",
	"LswEMYqaBblCiZNiIXKC89QtT2rW2G2FnmpBm8jxx2FXlXZRyVg8wXUimbMCw2jT/nB8cyKp7uGqElNv",
	"5/WI2L5fWbOEHR0koWyFYlvRVVkAHsILkHSBnwoOrc+xYBuOHPUzIarEYonmTSz+IoiuJCdiPo+WAVwz",
	"CcVmTEqqlB3kgVkWrHHu0ZOHDx48GOZkRHwNWLvFq1/4y3pxD4/wFfvEtQyznRb2Av8q0L+vqW6fze8S",
	"l+vb+s8KlE6xWHxgE7LRQ2zkuu3ZGvoLT8kPWJ/MEHqjtwAaRX1p5mYx0aosBM3HWE367Lvj58TOar+R",
	"gKjDnrELtAA2j0jSyTO8uKqvv9ZTu2r4ONtL55hVKz0J3VxThRTNG3UTWtaKfkLbYIydKXlmzbIhsMdO",
	"QrAmuVxBHjWPtWYAJA7zH61ptkR753S01aTc00ZoeO9jzwFrd1GU9xo6bSEHN8tw7Y9t9+MxEXoJ8pIp",
	"wLoTcAHNgo2h1KgzyPsCjs3VyopzSzjTPbTX0Fdr313wwFnV18dXJCFr7cO1fX91JQ/sjr5vl+hT/Cqd",
	"t9NqOd2Ke7C9Nta+W8eU/OycHRnlgrMMu1SkVHAsxTjMrTqgoUfa36lG7iwnjmGy0XVIUHdY7G197Vmm",
	"Q1w3qCF6avbbEo79U8PadQ9cgFaOB0I+9n3nnYOOcQWuc5qhr5ijCpkI/UqmxYQQkgOGpI9HWE2tx9b6",
	"vXn2wtnmsWbMOeNoc3NIdTdB62ArFEM/OydMk4UA5VbbzAtTv5lvpmdrjiC8nT4XC5adsgWOYUMRDVJs",
	"FHB3qGMfE+xicM27T827rulB+LkRUmcn9et+m2QhKux/qll7L/pTsV8+kCZCbhg/Hm0LMW4N9Ue5bMgQ",
	"LjDyD0qU5x2yCX3vm6N8Z66slt7wDWIzd5NVgxlPgPGcce/wTdfBypKyBDcGT3PPdyqTVNtLxyCOdwa0",
	"6EmHwaR6GzFw3aHaLRwMSnCNfo7+baxb9vewlfBCfbugfEP8oTDUHSklT2kRguETDfhRO3PKmA0WbrXk",
	"T7EVw9YnPjW3ga6diaDhc2yjsq+c6qs2OqvyBegJzfNU3blv8SnBpz6hENaQVaF7WMgzbdZ571KbmygT",
	"XFWrLXP5F645Xc4UVQpWsyIRevssPIQ87DAWoppt8N9U66z+nXFB73tnf/sI93y/5gbdbPaU9mxoeqLY",
	"YjIcEyhTro+OeuqrEXr9/UEp3Sd+fxJ53S0uF+9Rir99ZwRHXKa7E+NvRUuooo3x9AKf+3pgoZJrkyuh",
	"KOs0iMOIDNy8xJa1gPcvJgG/oEVPxYXYa2Plq/Vk9NVdyHrLilDtqtdpSmqeMMSE0V//y0ZgtzxDXfdm",
	"X4y1DbG+SeeJw8dWpPd7Gn9q+BVt1FvNUHr9iVdz+dVEsK/Pz3Vi6NpLaVGIbDBncMMcm4/6S/WK1cpV",
	"vk9E5V2sRB6fhTiaCyDN2GzAciK1Ai+2yWd4tUo+kZfp0Rr2kUA0Q6uWIRrdEsY2MdOD54GxU8cTRSZb",
	"h1nyPSuwq9R/nb58MerfyGgHulvqSmcnTdh9GxMy1drksRANfGzhAYIXafu36jGpY22o9GlwbY2TD763",
	"BsIhINk6Sfu8/Xzo4B0CWAjbTirVN6NbnWZUb4dHfkQN9fZajhJTR4oq2m2aEncfa/SsXyGhg+mgjqYN",
	"HWlIV6hUEx93U/AWWCtoXD0625Wp09Cpw0CfDVEOO/h4Px6d5HupT6kmViM7SorBPmeLpf62ENn5j0Bz",
	"kLafSOo6abuJrMBcQ9WSlXj/KYVidSPhwgzmCnkvcbjp0NScsyW4qjC+SEBnLB9AfQGZxsbSdRioBBge",
	"51Cml2gg8A5FfOUjhIJIgBxKvdyqLNng7lIv636j4DLPmCIzcK6LC+BjwqYwbSer5XVRKFIAnXsjrBRC",
	"D2jIG9KWEI0x0Cn66jR33q4Gdmq+RSUNbQ/e6fAmLMchJ8AmWl5SVVeOapVRGJyuPZ9DhgXvt5bf+/sS",
	"eFSPbexNdwjLPKrGx0K6ILZsOKhFu4Z1WyG8raBGLaluEtK+ghjnsLmjSIOGkq2EQ4btVSrAI3KsH9c3",
	"FehzbbjASKYCPSGCfBy8K8Bf91i6ShOAqDrlFcHwNG7EU12x8mrQeI3mCmCYT6fX6vZfl8NDxbSvul+3",
	"LXv/TfkZdsFXLqiUhnLzsT2JnHT7OF+6cvVYaDF4C33helD+N1+g1c5SsHPXoQYRZn2zl1Tm/o2DlMmz",
	"cpOlgZ6HmVmdGNWN8tk3LsdmKGaFMArQpC8xtJmpFEJ47ygba10XLUOo5yAl5MEnWAgFEy18mtUexT9d",
	"+uQW7Nko8yvhrRXRv0fKsF1Rbw+F13UjiRXLpKDYM4G64PMYK0TCihroZdTcIW0G3bVDT+1zX1MktP3b",
	"al7d0hLTnovdrbV96h1THczHp2tOnHKwN/dqFCK5gmWWcQ5y4p247dYOvFkmE+sq51VmVZX4bAbr9eCy",
	"Y1u4WdKomXVX2bpCRVU5zmFzZM0+vl253/EYaKtDWtCjgtItojiorVql4F4cBLyPW76zFKKY9HgGT7r9",
	"KNqH4Zxl54CFWUNmitGC7zSPjZmE3EWHVIgZuVxufLeFsgQO+b0pIcfcZgf68JFmA9LW5PyO3jb/GmfN",
	"K9thxlmgp294Os0KO73Ia3I/P8wWntfHmxQYfnnN+e0gV5hdr3lfjNwltoQxcyR57nbzRje+o6VCReRn",
	"oUgpUKfWEfwUWULiHkWwOktURgjjAyhxDmSiCpGKwr9KBRkzVBpT8WQIkAY+4LpaQ+EGTyLABdntqMrq",
	"Hvu6o2JOJNSxGVctwOpqmlomrvpMI+2ZwyxNzjgXEuIZMc7UFmoOmW1Y5xj/M2NaUrm5SpnUJqpSZqhe",
	"LO+MlgyBkvVC6mDJLg6LQlxOkK1NQnellDnAvKeaYtv3Ka2/M0d9BlHYJVVORdyQJc1JJqSELP4ineJt",
	"oVoJCZNCYBRmKrBjrs0lYYV5nZwUYkFEmYkcbCO0NAX1zVVxTlH3giiULYkCSztYMsB+E9HxwCmN9LXu",
	"2QnqazsbbfjNPzPf2PIVdfk7u+iJDRHoyS8A5crdOQzZl7vwIuHYikxto2xaRZ6zNdINyNSRnxMtKxgT",
	"90a7fb87+FQCWTGlLCiBli5ZUWD1CLaOAhpCPFAatT268wnGQV8wDHhrVhKxKnVppGMovxLzgNO4IhvR",
	"SymqxTLqDxDg9Fd3WbmLfTzKL6rCmERMETVTPCYrobS7FtuR6iXXIaB3M8G1FEXRNORZPX/hnL4/0/Vx",
	"lunnQpzPaHZ+Dy/hXOiw0nzsSyq0Y3frmWSrBuOwm4Je8wmSh9pdZt2+h1Gtjp4H884W9+s4HnZZ8iMw",
	"3+5mrrv9GsfdhbXX1eSz6bvQMSdUixXL0sft84p+7Y1ZTXGvZKVF24XYVqHB15APxHIshDMh9+yiGThN",
	"tlE9Jo5HuLAO5ETmv6jGt8clc3A8qEeGdvmOU7AmWa8a2AIAIbWFEHQlbeviWEkLDEcsbOEUDEppAzpQ",
	"4GDs3/VgMyMcHCgN1wKqE40cALxrLRhjWxHTRjbPxNo/v1eXzLwS8O+3U3mDefQFVZ7WpCVtWKUvZNXD",
	"EdINCLZGIJ5hEYzZ0DjE0Ip+oPCPAOiPTGzAMCg+cV8w5pQVkE9SXYpPgg1sHF3XXY5lNLrv52g5eUYr",
	"3wnYjF1JcIWVrPYvm+7EkhpSEuH1rkWc57AGm6P1L5DC9vEdR+4sKGyb35ZFQZSTAi6gEbDpqj1VqIWy",
	"C/DfqvAxyQFK9Pi2DW2pSMS4S2DL+uLWPoli2YZgN2mOsYi1O0V22FqSlqE1n9hjooYeJQPRBcsr2sCf",
	"2lflaNoSzVFOoKpzfZj4K+bQaX6xI7z2Axz771OqjMfE22F8aG8WlEbdNga0MzK5Un2nnqcDk+NSZsFR",
	"hLPlwa9tSbzmG6qkl7zfqtkl+fomNnCfmOARYr9bQ4ZajbsKQe4uQz2eE1cDCamdA+T2wmA+SVjzl8AJ",
	"F1HP40uqwi2mrurqf7AT40uMu4v2FXz0dfzw9XeW4GBEtYotpluUBrK+no3/o5zErQexd7wUjShwqbxb",
	"TGOeut21A18QVZETbvbT6P7YI9hJMcfFx2RW+YGKQlzaJsbxFfUZeH+upT7vYnJqOQti2cdJj13B4bYV",
	"hEUZIiu6IULiP+ZC+s+KFmy+QT5jwfefEbWkhoScA9lGUbi4azPxdvVq7AHzhhjhp7LrZkPHjIbbmFEi",
	"oI0g923bBFnRc4i3AQNELP/MtGGcqpqhUcOI7NZ2drHgFu/LM61oHhsBsNDspsEdfMFz8/X/V6etxlP5",
	"+o9lQTPfsto1n2vyGexq74lLL2G1Pc25y9c8CYRO+TXRSl8mI7+CNXVP1pXK+elrjtUAu9MCvNMX7FrL",
	"GGgUbvU42pIgPmgph96Fw+RwdpYUt/rdtbi48/GH2Z1khei+ZQwB/xPalUZ4RSezLd1BPV6PbZb+AXah",
	"UYgnAas1g8/EeiJhrnYF0lg7+Eysa4BVsN0ynkmgysYdnbx019a6ADLj5hpto3aDWzWMksOc8ZrVMl5W",
	"OnELwjrIfBMhLPYmIFp7fHN9OoZRRS9o8fICpGR538aZ02NbA8dNerwHxX2bMIAEidwdgKn6Boj51LV9",
	"Pn7NiH/bYNDGzipNeU5lHr/OOMlAGq2BXNKNurqrKngddjmraKQLNauFRG4rJG0LSLFx3uZrOpICgPSA",
	"HqUBniAM0k54gaxhSIsex08Xhs/CE7Si60khFpj123MgXJ1rdB3aC6TgaES32t2wdft5FPsXbJ8GW5E4",
	"RqQFzjpkiu3n/iVuJV5Cf+FMbz351sLZTsO2kc72YHqk8kWdnmGJpXseU5nzrjBTnD3vVVVfpsTTHkSb",
	"mAyJ7ljVe3YR4ytc2YXYhD68WWUzhCOVn2/tChO0N6gtCRig6rwCmrkIsa4hrmOosEgZu+oGe9rprHXf",
	"y6Ue8NCQotxZb04bAnTMOPt0+Nxez2BSinKSDYlttd2KcudkcJA2Yeyhj8iF0LPuEHejQv+uRk20RiOv",
	"fZuc9jYS2+UrK7NtJoM+I1MPR286MMQceRkeYWtaw1yrYIoZ+8u5d3Y3jWiBSRBKJGSVRCPzJd3sbvzY",
	"U33+9MfjLx8++v3Rl18R8wLJ2QJU3dOg1TixDk1kvG01+rDBiJ3l6fQm+GohFnHee+nT3sKmuLNmua2q",
	"ixF32kbuY51OCIBUcm63Rd6V9grHqdMiPq3tSi3y4DuWQsHN75kURZHuKRP0qoT7JbVbkQPG3EBKkIop",
	"bRhh03/KdB2UrZZoXMSq4Re2NpTgGXjrs6MCpntiuVIL6YvpRX6GtRicz4nAuiwcr7J+om3rcvc0a99D",
	"pRHDbWZASlE61Z7NSQoizNmSFQS7ujOboj09CtMNzNYG7KYI0QW/p0nvmLubsJiT7dy+2Ypbpzm92cSE",
	"euEP5RVIs8+70V9n5CqcpHYMfDL8I1E45WBcIyz3JnhF8n6wJSv8uBM1EYqGDAKtWyAjQR4IQE8+dCNp",
	"NUqyi2qTS+tjQG+Edz+31Y+fa7f0zswUhMR/sAO8OJe5fi8kUzhwPnJh758DUqKlvO2jhMbyd6VHe9Yb",
	"BEm0Rc5oojUoy5ZEVy2MEuLV05Bn3nMr6aSjSyE0MTfTokiksVs7Dp6pmHDMlUBe0OLDc43vmVT6GPEB",
	"+ev+xK04bTlGskWlOnhBzud0EFhRivIHgYq/wtz6v4PZ2aR0dLM4x39HBqJJiBY22nsePODAySWOaQO7",
	"Hn5FZq7dTykhY6odUHDpVZqQbwuSzV18Lax1O/f32m2CfhX6Gsdh7uOByIvIyRYiBxzM9VH/yMyphwMk",
	"T0uKVDuEksBfitfFTdV3iJ1rtoa5WimnqHDjnqWcuu3ihy4P14HCq1LQXedgqd/AbULg12sbWqtscIeZ",
	"N29+07MhBcXS3WDM51jj7CBtYa7fFOaDFDizqHRjOEiShFWr3Luq17TiJaM6Dc1dNOp+TwP5pUW/GQ0v",
	"BfOK2/FCA1TMFfdsXczHIYpBcPPZE/KG3ydqSf3dwv356MuvRuMR8GplFl8/H41H7unb1E0tXyfzSutC",
	"Op0YUddN4I4iJd0MSWbfWTonid+6UtCHV2mUZrP0ne5Hs2d4cXUJCCccWT2yFytBXf2c2wJAW4mhdVjD",
	"ibEkWZcHCluxq1LQr31l8W3p955uHy3uW7FiZ5BcoxHL+/FoYYuUYXeS312vug+77R6CnnqBbunXKQNm",
	"EZNYa2PyaKqoqNuAhizus0SHDMy8zirJ9ObU4N+b3dnv56liUD+E8kyu5lfwwDvdV4tz4D7GrC7mVCmv",
	"Xf8gaIHapw0M4EbnFMWUfGc7hDix+M2d2X/AF397nD/44uF/zP724MsHGTz+8usHD+jXj+nDr794CI/+",
	"9uXjB/Bw/tXXs0f5o8ePZo8fPf7qy6+zLx4/nD3+6uv/uGMo3YBsAfWdf56M/vfkuFiIyfGrk8mZAbbG",
	"CS3ZT2D2Bi1scyxQiEjNUMTCirJi9MT/9P97QTnNxKoe3v86cv0gR0utS/Xk6Ojy8nIaf3K0wBooEy2q",
	"bHnk58Falo37yquTkBdkY/9wR2ufE25qqO9nnr3+7vSMHL86mdYEM3oyejB9MH2I9RRL4LRkoyejL/An",
	"PD1L3PcjrKJ9pFwznqOQOvp+3HlWlrZVj3m0CGVAzV9LoAWySPPHCrRkmX8kgeYb9391SRcLkFPMGLM/",
	"XTw68nePo3eursx7A1gy2MB2ZYl6b/jg57KaFSwzGqqrloVeJ5vUo+KG+M4fV6kxmdGC8gx84gDPMSzS",
	"ll0xWk5A+EluEG2/P6mZHaLRR6OMnvyWssp2wJt6IjU7ENFQqKtU8wi0wY8sj0TXeOB4hos9mHz99t2X",
	"f3ufDMbuxmXVAY1bnyZLkSnAvs5/0KL4w1rAYY2h863guXFf0OO4LteDH9RoG6OxOTyNPq/faTYn+YML",
	"Dn8ENP6zArmp8egAG8V48wocLQrzouCQ0Nu6S39aJwteujbjcZxyFMH8X6cvXxAhibOFvaLZeUiU9Emz",
	"daJwnDNrvuxbihN4qZW4jMuVWpTN8vthNW+xjzICisf80YMHnrc5O0GE6yN3HqOZBjUbsu7MMIoH5woD",
	"dXmgffQ6FM+WtLTn+NinOxiV3zmU7UtTQ92PD7jQZonvay+3PVxn0d/SnEhXiQGX8vCzXcoJt6HrRpZZ",
	"mft+PPryM96bE254Ly0IvmmFNp7jrpD6hZ9zccn9m0bfqlYrKjeoTekgFNpd8uhCYRQHygrLqaLim3wx",
	"evu+V2IexTHaR+8aJevya8lT69ZttJPcLWJ75ACOZZNo3Q93j8sSQ9RPw/PjsnxleL/CwCVgyHlhzZRW",
	"96bkh/jrhjfWQmKdsY0cJocjX0CzGZwTtQ5PyvtGfZW/lOg/bpouWQ5cszmzFYRT62jQ3NblDG7Vloj1",
	"3/74VojHVNPJq4xq0+2bQxKaeDhlbeL6zg4cwx7pA/ZZvl4dUwtEsr76Tjlyi9b90dqn4EVLCbpe3Qf6",
	"wwgVXzc+yMCGsLtBkfOZq6s/08KQULTcVi+/k2e3auxfSo0NNZwXVq8sywMotj4JbtcrR+9ckeFD6Lto",
	"phik6cYWkOjbKE/pbovj3JuS4/Y7V2MrrnLzTh3WJuX95bRXW1J6p97qqOawGmsjD3LXC7daa796Fafy",
	"7pNZ29CpzO+DPv7zqqm3eNxLLzWL2K2RXoH5d7RNJ2puTCj8KbVMh7Rb/fIvrV+Gxg/X0jDjJIcjV60m",
	"0jevZVhtG06ZDnpks19IxPSwLBXWbbFHeFwndBkWYzNVXI6KGvurLzrX7a3Ybta4czHuKog/QHwD/3Zz",
	"8myIbvi5WQVv1BlWf5kUJ+lNvmmmnHQtvf4wrqVhTO7xg8cfDoJ4F14ITb73oeNffsg9OCRvTJPVvrxw",
	"G2s7mon1LvbGW/wtVEQ1h7/B7EJN7HH03Lxtg3/uYpGIGVXw1WN/f7k3Jd+6V+uyUy5cciEMx/PJxVQu",
	"7EeGaRpkkDv+zyc4/p0p+R5T5rUaY8Qy5uLhi4zrJw8fffHYvSLppQ0Ibr83++rxk+NvvnGvlZJxjeEi",
	"9trTeV1p+WQJRSHcB07YdMc1D5787//+n+l0emcnfxbrbzcvDF/9EzLpcapWb6Ckvm3/zHc7dfnmdoP7",
	"t+BDxnp8K9ZJcSLWt+Lso4kzg/0/hRibNcnIXY2D8bjRDe+AYs0ek30E29gJMkwgDFJpSl4I1x+1Kqi0",
	"tcmw+Lsii4pKyjVAPvWUitnfypZgzQqGZWskUSAvQE4UC/0XKgmhgFYp4QIztury5A0IdksMTNj480uL",
	"n+k6CqifBcVBC4c7NIeu6JpgvyxNFOixLSK6Jt98Qx6M64tZUZgBJgHDKS69outRginvStdI/XpYg2mg",
	"76FV8J45PAq5O2Ydxx5iRqs1t1CMub4m/dWFxWd767AHw23sgZj13r672jcXG1Nc+9CtZhSrS2psHaCq",
	"siw2ddF4o1h6rS3NVc0MQy0kn4vn6UYtI+gsSN3G23t1yxFurSHX4kttgtqTB2HypTp6hwaKmAF1mAAm",
	"Ju5kAM6xZdWRnrMvXU764Q5+qIew5VlvpafQQSyui0HuYjoF1mrDCq0bLPkosaQqm2NpqHu+Bb3rpoAl",
	"d+qI/LTyZIefmElTSlTUEefWM96v6CEtdvsnxBuYU1uCZ0jn0qi+Avp8QSaO4kv8Dy1iEggNw3w9YySm",
	"QA+uJ701gdiEWJdQ5AuDlLTRmX83lE/rybs6KqLlEC7zWwTvh+AOi//O1TuyPMUt4s+QpOMv9BPyQtTF",
	"ZSy//1O6pG9SP7npBb0QHGzshbkMWFq8dbMH5akW+r4Wmb3S1Z07r6pIHfl6D1u1qR9tJYLPVKO6AZH+",
	"Y7JKRkPqGMROdxZMqkcbwqx9GQ7aUAGnH/Nu9lH46yd4YfsYHOzDsBxbr8fxHacm8MMyISz3Z4n5KBTL",
	"6eNIz83LkZ72ypVM+Ytyp20Ek0ZVgnBCKSKaKL04/Qse56eurZr2halsuUnFeAZEiRXgrcKo8a5rhYXw",
	"bx8OQs1WkBNRYc3MKCP9IzOcLx988eGmPwV5wTIgZ7AqhaSSFRvyCw/t067DABWhbs9jG3r3cBDG0S3Y",
	"LEuaxbUPr8EXxWKLG9RZ++vCyq48lag0SFtSt9Ulk3X4dsqKjgzjuZn6VuXDr/02DG0N8ZQWBeJvl68O",
	"Bx4U8V4UdoNhxbSuG03FEph8R7Nl2OxxbXsLzYR9R5Jxq4Y1juw6y9pyHQrMxmsg0WoiCwdImAvsEgkS",
	"vHFxVRWalUXzm9BtG7sPJiLRLLHGFfBOnvnVWbe6mNdDtwna9y9xg0/N3O4RzsyFXRyVgMw8NoDGNslp",
	"A2jbh9OH8kfdE10PSFcemclWveo66qksgcr6Y8sw7pYSJm4ISS9AKoqnt7Woe7fq/Kehzq9dg4RPRJlP",
	"unqvy/yvLpsaEfnv9Jrl73fr7p2io38eN81Zq2joybM4a0qEqnter+hZjEHknoma/z4aUCnrpiuwJl1I",
	"dXXLritmWKnWW+/SYIbSOVvb7nl9JX0/tOipM8fig05EWyX4qCJIfywRNGnJoCZaPp5EwhY44yh8p5RC",
	"i0wUNmqvKkshdSgIrKaDLmLQJ+Ya97D+WtTXEGVrlqudRvAzfOv2SlRbwc883lJm8Ob5VVvae++MaKzn",
	"GnJXOhMlsfedFggfldHd6tgpBteymH/uBnPdS3oHtp9nVGfLqjx6h//BKsTv63RY7OqkjvSaH2Ef36N3",
	"W2M2kccWkBtixE8bJq9OV+Bk5OVz/LxuPvW9kJE+8oP5bjfrbCJt3NYCbE9iDO5MMNWbUZtvtc0+10Jr",
	"w6/vUE+M2DmvodpD1Mk00G7U0swXcLB9jBMkfBsA8mktqPa3zBnPCY22sXWpFrJmBDfsc7npRX8MF86H",
	"j3r58jM+Zy+EJiersoAVcA359SKgSZvDeemxVdzupxg40d8Nk+7K/Fji+0yRoIvsFPB/IsvdrYz/pGT8",
	"0+CWign0VmJ/PhJb+kN4K5w/feH8xWe7mhuM/hgorK/gRWsK6PqOvqeo7qgJzrrVMilsc8Dhpby9SvW9",
	"kL4V5618/9PlI9k9HhzLMsSqs8t666Y8RLLPJwX9MNtEUSSsE31HeBzCZRiWTxQZw5ZLJ7kau7gca9Bw",
	"5/tWJfqkVaJor281oltzxWdmrujRf5yloCiGqCD7qkYXK5GD986K+dxVMu7Ti5o9NQ15Kk1XJbFfTntj",
	"W8/YCk7Nmy/tFAcVsTXYLbdkCzyDLAWZ4Lm6avdYN9VVhRN6rPqh+uAu0rAtHhZXAmh6ZTp+HVU27JAH",
	"ae+IwgapvpazQ0YOF8RQ5fQAtHz0zv6LdrlSqMRqTj1VdzbmrtsWW5zajtsAkLxCzdRWufZfiTl5YGtU",
	"VxwTjpfM9VHHGEEtN0Z79QXwJNCCZI1EwwBH9zid9h6nrTeHs9TqetaUvlaI+the+15xpbJPrXTwnz74",
	"UXlKuTscXVRqQSjhsKCaXYCPMpjeVlW6sjB0NY22sMoxoXluz229CXABckNUNVNGVeLNtJE7qnmy9mAt",
	"sC5BMiPhaVH7/O0t48iWTNoWy3Rq37imzGtxLVuoSTabrXvB7Mo4iTn5mWVSHBcLEaKR1UZpWHU6krtP",
	"f+9pTOAtFHtZDAQvGIfJSvBUC+2X+PRnfDiYZWCZqr4Rz8zDvQZsifcmEloLaE4+RAW47iZ9IizkWgE6",
	"rdVKKIU0N+yZLaxjD9Ge59GfvA3Pusdxw7PIGeceRgPFPbYbPx/5ePFGx+3km+8af7r6bO5Ntax0Li6j",
	"WdAOYeMyh1RTwgvAbYptLxFH+EmdufA00SW5ftjfKPkvmnTrXEpxSqVLWbsAqVqXzNvM2z9V5u3gfd+L",
	"S5shK7WL01XqsIrRC5GDHbfOtjRHP9UvhYsciPJAtPShEOaZ7tLk5Vr9nsUbU2QGWF+TVoulJlVJtOjG",
	"PY6jCSY0s6x5Yu9j6QmjMr721obTLekFEFpIoLm5QwMnYmYWXUtYXCRVWJHZJ6+5YNbhalcEbClFBkpB",
	"PvFNY3bB69+z6XJ6C/JwNbiKMAtRgsypvJkVnF/sBP4cNhO8vSty96df1b1PZRFWF92+Bbama2Ij2km5",
	"3aVcA6ZtRNyGKCZlmwNsTwJmx4lVWYDLj0sg+/rY693+NpgdIrghBF6AZHN2w0fLT3IDRBngv+GDdSNL",
	"qMqJ0TO6cD+1T8/YCjVGTrnwBtsdM4QJCqr0ZJdIMS/Fi1ZmqREXT0kRHLjnzv6cKo36OGE8x6qFVhTi",
	"PPbmYKbY91aPUxrlwF6lEpP+ah+mps2MmOeqUsSN4HPXIE8tj8N6y1wvYB3mwhIgfuyQHGctrbtG7kNg",
	"NL7DY9Syh1AdGjQCMcMlFod2YOrMP3thuQFfjaNtMJ76tyLEx+EXPTAyVe+BJTfsBRDTWyg9Ox4pLcrS",
	"cCg9qXj4rg+Dp/btY/1L/W6XJG1xB6up5AJUnNPoIL+0SFdoQ19SRRwcZEXPXdrjwnXc7cJsjvUECwlN",
	"tp0XtKqbt+KDc6XjXpULSXOY5FDQhJ3qF/uY2Md7EoYfGwnEE/rkQmiYzLBGSJpG6jMhr2LKC7MKnEql",
	"FG+CT0hmzvlcyIjU3NdXnzQHnDbFNx2x3gmzIBhJOvDjIbIsPfUYEc0Yhqwc0eFqnFS65lp6sBdmvREE",
	"4riT2gLUnv2/Qbm5gwJ20Pk3oPoWXk99qGW3bbqxbG8IzJYoa0mbpIjo5cs7GGMfD0pZkT9Lt1E7iO4G",
	"8z6bVvToDj+9in3i6JIyPZkLae8tEzrXIHdmc/ydMh+X4ZxMWrgaRARHcDqCGwelVtz0z3EsCwJx8s+Q",
	"iKv1ZIQyJQ/JivFK2yei0mNb1FoCzZbmjhSb1+1I2BralVGSsKAyL7A38DwoAkLasky6pcwg0IkU2abR",
	"xqz7eyE/84L/b28tTrcWp1uL063F6dbidGtxurU43Vqcbi1OtxanW4vTrcXp1uJ0a3H6q1qcPlZltonX",
	"0HztUy74pB1MfRtL/acq9B9krzeAofXpkjJkgVFhlH671B6GPg20QBywAvrzQGzQ+dl3x8+JEpXMgGQG",
	"QsZJWVBz6YK1Dg3PZ1TBV499prLVBeiKzDaGrRiFwbzwxSNy+uOxr927dJ2Emu/ePbahpkTpTQH3XDM7",
	"4LlVyH1XO+AG6a6pHfXixzdGd23iWYE5NIp8h28/gwsoRAnSFlTFlpZdi94Z0OKpw80Og97fzeQu1P4P",
	"M9of44ZR06FtRUt/LfJrpYpQm7BNnkUp3H/MaaHgj74sbjveipbbu2G+tdwXlP5W5JvWCTG7doQb2Dwb",
	"obHfjHEqN4nCdN1kqTZpaGHYlSOsrhHz/UGT3JbJ/lddMttFYambiW1EkB69j8pT49Qb1hnK5vnPW3Qy",
	"SqWox6J0adugOQAH1SLFhCq7J+S1/e7jVh5FiNwRq5n5JxNo3HwzMA1819yKHOv5XHOJPOKTpxfP/tgQ",
	"dl5lQJhWxFHcAPFiNEIz0gL4xDGgyUzkm0mDfY0aUihniioFq9luSRTzTzxxQfiYJ9vl1McRI8+ixW3j",
	"yTHRrCeOAfdw542Gwbw5YAtHdOw5wvhNs+g+NhqDQBx/StnWWrxvX6ZXT7O5ZXy3jC86jS2NgHHXxKfN",
	"RKY3yPjkRla8n+d9t4asMsDFJ/ku+j3Qqwpr3XCi5zCrFgtzW+i6WbGREY7HBP9IrNAudygX3I+C7OCv",
	"fRrMdWtctIfrcpeo7MRdXwz2Hm4H5Rv0CK1KyjdmNzCPZKLYqiosDm0r8MMyWtu3IFXVvrZO9lnwX3mj",
	"ZGSMdqK2+btFC7mkitj9hZxUPHfJip1y+ms+vEySHfpszWs2vbUkkl1vYnVu3iEiwu9ysyiFIiXIiV5z",
	"e6Aahwm9Y5TYk/tRy/ffio0PJzZsSQvoYbDdjiA1QziQ9JARX0PxEXW9qnNqG72waDMTuPEMLRr9WWhx",
	"Cx/75kFjgzrDN0OEanOL8zdDURJKsoKhN1pwpWWV6TecokMqWti0Ez5kLuuTOcD24CHzVmP/5gDkLlbZ",
	"A4n6wb2mRR4D09bciDs8E1RD3WIw+M0FX4DC8TLBc4aon+7hDff2936+/dS/knb1Jjyxbqg3nGIAXHCx",
	"Jfl3EnHfAwbi5VBKMFPlU3KiQ/cuWJdoV8GNBDkxyEN0gsqolX57oGABHBRTk7Sd5wf7FLuRO4Hl7Ylo",
	"G7WP68487QtU3Yvh/9z9zye/HU/+h07+9WDy9b8fvX33+P29+50fH73/5pv/2/zpi/ff3PvPf0shz8PO",
	"8l7IT55hSCPWky+YihtqtmH/FCIOVoz3nyUXkXjtY+R/D6GsoC+FPA8UfNUiVd3TZOm7RWSNfWu5qfz6",
	"B10+D8LjSILF3Tp9/kQ55hEdeJcrbrxtKNLa+z0dPA2BD9gatk8dsE9d+8yel9z1pWGiaxXicm+cNUDe",
	"6j35/GviHv4m69F4sLtsd8Auu2p2DUW8+Q0fE1oIvrAKjrnbCtwnxstKoz5zk+ZDuKDFRFyAlCwHNXCl",
	"TPDvLmjxMnz2fjyCNWQTLWkGE2vPGIq1M/ONpVMzDuNMM1pM8E4/FCA4sV+d2o92iO+zENvGVivIGdVQ",
	"bIhRtyC3BROZIrU1YWoruJBsSY3CSfRSimqxtK/ZcS5BQlDRzAW+PcS+qoBe84ktttkF/9j18I4rlQPN",
	"lokmWij7LmkABfJGf76B29MopdxnPRiPerVog++LOn7R4q3Jga6qdTT0hwhpNTSHKEh9e0huD8lf7ZCk",
	"SssiPuctW4xFYryNN2y0u+nqyh/QBvhRSq/fdjb5s3c28WxJEUokbdxx0s02qSJMk0usyzYDYuRdhb4H",
	"18HUGQkwTzQ66q7isHL9TrMlZdwV9QpZLgiHuXKvVkxr3wD8Rsy2lpmhvdagA7JKMr3BWxEt2e/nYP7/",
	"1lwrFMgLf2GqZDF6MlpqXT45OipERoulUPoIG4zUz1Tr4dsA/zt/1ykluzD3t/cItpBswbiR0Zd0sQBZ",
	"GxlHj6YPRu//XwAAAP//PYU37LXJAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
