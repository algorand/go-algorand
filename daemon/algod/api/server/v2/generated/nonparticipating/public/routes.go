// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "header-only" -------------

	err = runtime.BindQueryParameter("form", true, false, "header-only", ctx.QueryParams(), &params.HeaderOnly)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter header-only: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+z9e3fbNrMojH8VLJ+zVi5HlJM07X6a3+o6PzfpxadpmhW7fc7eTd8WIkcStimADwDa",
	"Uvvmu78LgwtBEpQoW3GSp/4rsUgCg8FgMPf56ygXq0pw4FodPfvrqKKSrkCDxL9onoua64wV5q8CVC5Z",
	"pZngR8/8M6K0ZHxxNDli5teK6uXR5IjTFTTvmO8nRxL+VTMJxdEzLWuYHKl8CStqBtabyrwdRlpnC5G5",
	"IU7sEKcvjt5teUCLQoJSfSh/4uWGMJ6XdQFES8oVzc0jRa6YXhK9ZIq4jwnjRHAgYk70svUymTMoCzX1",
	"i/xXDXITrdJNPrykdw2ImRQl9OF8LlYzxsFDBQGosCFEC1LAHF9aUk3MDAZW/6IWRAGV+ZLMhdwBqgUi",
	"hhd4vTp69uuRAl6AxN3KgV3if+cS4E/INJUL0Ee/TVKLm2uQmWarxNJOHfYlqLrUiuC7uMYFuwROzFdT",
	"8mOtNJkBoZy8+fY5+eyzz740C1lRraFwRDa4qmb2eE3286NnRwXV4B/3aY2WCyEpL7Lw/ptvn+P8Z26B",
	"Y9+iSkH6sJyYJ+T0xdAC/IcJEmJcwwL3oUX95ovEoWh+nsFcSBi5J/blg25KPP8H3ZWc6nxZCcZ1Yl8I",
	"PiX2cZKHRZ9v42EBgNb7lcGUNIP++ij78re/Hk8eP3r3P349yf7L/fn5Z+9GLv95GHcHBpIv5rWUwPNN",
	"tpBA8bQsKe/j442jB7UUdVmQJb3EzacrZPXuW2K+tazzkpa1oROWS3FSLoQi1JFRAXNal5r4iUnNS8Om",
	"zGiO2glTpJLikhVQTAz3vVqyfElyquwQ+B65YmVpaLBWUAzRWnp1Ww7TuxglBq5r4QMX9PEio1nXDkzA",
	"GrlBlpdCQabFjuvJ3ziUFyS+UJq7Su13WZHzJRCc3Dywly3ijhuaLssN0bivBaGKUOKvpglhc7IRNbnC",
	"zSnZBX7vVmOwtiIGabg5rXvUHN4h9PWQkUDeTIgSKEfk+XPXRxmfs0UtQZGrJeilu/MkqEpwBUTM/hty",
	"bbb9/5z99IoISX4EpegCXtP8ggDPRQHFlJzOCRc6Ig1HS4hD8+XQOhxcqUv+v5UwNLFSi4rmF+kbvWQr",
	"lljVj3TNVvWK8Ho1A2m21F8hWhAJupZ8CCA74g5SXNF1f9JzWfMc97+ZtiXLGWpjqirpBhG2ouuvHk0c",
	"OIrQsiQV8ILxBdFrPijHmbl3g5dJUfNihJijzZ5GF6uqIGdzBgUJo2yBxE2zCx7G94OnEb4icPwgg+CE",
	"WXaAw2GdoBlzus0TUtEFRCQzJT875oZPtbgAHgidzDb4qJJwyUStwkcDMOLU2yVwLjRklYQ5S9DYmUOH",
	"YTD2HceBV04GygXXlHEoDHNGoIUGy6wGYYom3K7v9G/xGVXwxdOhO755OnL356K761t3fNRu40uZPZKJ",
	"q9M8dQc2LVm1vh+hH8ZzK7bI7M+9jWSLc3PbzFmJN9F/m/3zaKgVMoEWIvzdpNiCU11LePaWPzR/kYyc",
	"acoLKgvzy8r+9GNdanbGFuan0v70UixYfsYWA8gMsCYVLvxsZf8x46XZsV4n9YqXQlzUVbygvKW4zjbk",
	"9MXQJtsx9yXMk6DtxorH+dorI/t+oddhIweAHMRdRc2LF7CRYKCl+Rz/Wc+Rnuhc/mn+qarSfK2reQq1",
	"ho7dlYzmA2dWOKmqkuXUIPGNe2yeGiYAVpGgzRvHeKE++ysCsZKiAqmZHZRWVVaKnJaZ0lTjSP9Twvzo",
	"2dH/OG7sL8f2c3UcTf7SfHWGHxmR1YpBGa2qPcZ4bUQftYVZGAaNj5BNWLaHQhPjdhMNKTHDgku4pFxP",
	"G5WlxQ/CAf7VzdTg20o7Ft8dFWwQ4cS+OANlJWD74j1FItQTRCtBtKJAuijFLPxw/6SqGgzi85OqsvhA",
	"6REYCmawZkqrB7h82pykeJ7TF1PyXTw2iuKClxtzOVhRw9wNc3druVss2JbcGpoR7ymC2ynk1GyNR4MR",
	"8w9BcahWLEVppJ6dtGJe/t69G5OZ+X3Ux58GicW4HSYuVLQc5qyOg79Eys39DuX0CceZe6bkpPvt9cjG",
	"jLKFYNRpg8VDEw/+wjSs1E5KiCCKqMltD5WSbo6ckJihsNcnk58VWAqp6IJxhHZi1CdOVvTC7odAvBtC",
	"ABX0IktLVoIMJlQnczrUT3t2lk+AWlMb6yVRI6mWTGnUq/FlsoQSBWfKPUHHpHItyhix4VsWEWC+krSy",
	"tOyeWLGLcdTn7UsW1htevCPvxCTMEbuPNhqhujZb3sk6k5Ag1+jA8HUp8ovvqVoe4ITP/Fh92sdpyBJo",
	"AZIsqVomDk6HtpvRxtC3eRFplsyiqaZhiS/FQh1giaXYh3VV1XNalmbqPsvqrBYHHnWQy5KYlwmsGBrM",
	"neJoLexW/yLf0HxpxAKS07KcNKYiUWUlXEJplHbGOcgJ0Uuqm8OPI3u9Bs+RAsPsNJBoNc7MhCY2GWwR",
	"EsiK4g20MtpMVba/CRxU0RV0pCC8EUWNVoRI0Th94VcHl8CRJ4WhEfywRrTWxINPzdzuEc7MhV2ctQBq",
	"774L+Av8ogW0ebu5T3kzhZCFtVlr8xuTJBfSDmFveDe5+Q9Q2XxsqfN+JSFzQ0h6CVLR0qyus6gHgXwP",
	"dTp3nMyCahqdTEeFaQXMcg78DsU7kAkrzU/4H1oS89hIMYaSGuphKIyIyJ1a2IvZoMrOZF5Ae6sgK2vK",
	"JBXNL/aC8nkzeZrNjDp531jrqdtCt4iwQ+drVqhDbRMONrRX7RNibVeeHfVkka1MJ5prDALORUUs++iA",
	"YDkFjmYRItYHv9a+FusUTF+Lde9KE2s4yE6YcUYz+6/F+oWDTMjdmMexxyDdLJDTFSi83XjMOM0sjV/u",
	"ZCbk9aSJzgXDSeNtJNSMGglTkw6S8NW6ytzZTHgs7AudgZoAj+1CQHf4FMZaWDjT9D1gQZlRD4GF9kCH",
	"xoJYVayEA5D+MinEzaiCz56Qs+9PPn/85Pcnn39hSLKSYiHpisw2GhS578xyROlNCQ+S2hFKF+nRv3jq",
	"fVTtcVPjKFHLHFa06g9lfV9W+7WvEfNeH2ttNOOqA4CjOCKYq82inVi3rgHtBczqxRlobTTd11LMD84N",
	"ezOkoMOXXlfSCBaq7Sd00tJxYV45hrWW9LjCN4EXNs7ArIMpowOuZgchqqGNL5pZCuIwWsDOQ7HvNjXT",
	"bOKtkhtZH8K8AVIKmbyCKym0yEWZGTmPiYSB4rV7g7g3/HZV3d8ttOSKKmLmRu9lzYsBO4Re8/H3lx36",
	"fM0b3Gy9wex6E6tz847ZlzbyGy2kApnpNSdInS3zyFyKFaGkwA9R1vgOtJW/2ArONF1VP83nh7F2Chwo",
	"YcdhK1BmJmLfMNKPglxwG8y3w2TjRh2Dni5ivJdJDwPgMHK24Tm6yg5xbIetWSvG0W+vNjyPTFsGxhKK",
	"RYssb27CGkKHneqeSoBj0PESH6Ot/gWUmn4r5Hkjvn4nRV0dnD135xy7HOoW47wBhfnWm4EZX5TtANKF",
	"gX2aWuMHWdDzYESwa0DokSJfssVSR/riaynew52YnCUFKD6wxqLSfNM3Gb0ShWEmulYHECWbwRoOZ+g2",
	"5mt0JmpNKOGiANz8WqWFzIGQQ4x1whAtHcutaJ9giszAUFdOa7PauiIYgNS7L5oPM5rbE5ohatRA+EWI",
	"m7Fv2elsOFspgRYbMgPgRMxcjIOLvsBFUoye0l5McyJugl+04KqkyEEpKDJnit4Jmn/PXh16C54QcAQ4",
	"zEKUIHMqbwzsxeVOOC9gk2GsnyL3f/hFPfgA8GqhabkDsfhOCr1de1of6nHTbyO47uQx2VlLnaVaI94a",
	"BlGChiEU7oWTwf3rQtTbxZuj5RIkhpS8V4r3k9yMgAKo75nebwptXQ1EsDs13Uh4ZsM45cILVqnBSqp0",
	"tostm5datgSzgogTpjgxDjwgeL2kStswKMYLtGna6wTnsUKYmWIY4EE1xIz8i9dA+mPn5h7kqlZBHVF1",
	"VQmpoUitAT2yg3O9gnWYS8yjsYPOowWpFewaeQhL0fgOWU4Dxj+oDv5X59HtLw596uae3yRR2QKiQcQ2",
	"QM78WxF24yjeAUCYahBtCYepDuWE0OHJkdKiqgy30FnNw3dDaDqzb5/on5t3+8RlnRz23i4EKHSguPcd",
	"5FcWszZ+e0kVcXB4Fzuac2y8Vh9mcxgzxXgO2TbKRxXPvBUfgZ2HtK4WkhaQFVDSTSI4wD4m9vG2AXDH",
	"G3VXaMhsIG560xtK9nGPW4YWOJ5KCY8En5DcHEGjCjQE4r7eMXIBOHaKOTk6uheGwrmSW+THw2XbrU6M",
	"iLfhpdBmxx09IMiOo48BeAAPYejrowI/zhrdszvFf4JyEwQ5Yv9JNqCGltCMv9cCBmzBLscpOi8d9t7h",
	"wEm2OcjGdvCRoSM7YJh+TaVmOatQ1/kBNgdX/boTJB3npABNWQkFiR5YNbCKvyc2hLQ75vVUwVG2tz74",
	"PeNbYjk+TKcN/AVsUOd+bXMTIlPHIXTZxKjmfqKcIKA+4tmI4PErsKa5LjdGUNNL2JArkEBUPbMhDH1/",
	"ihZVFg+Q9M9smdF5Z5O+0a3u4jMcKlpeKtbM6gTb4TvvKAYtdDhdoBKiHGEh6yEjCcGo2BFSCbPrzKU/",
	"+QQYT0ktIB3TRtd8uP7vqRaacQXkP0VNcspR5ao1BJlGSBQUUIA0MxgRLMzpghMbDEEJK7CaJD55+LC7",
	"8IcP3Z4zReZw5XMGzYtddDx8iHac10Lp1uE6gD3UHLfTxPWBjitz8TktpMtTdkc8uZHH7OTrzuDB22XO",
	"lFKOcM3yb8wAOidzPWbtMY2Mi/bCcUf5ctrxQb11476fsVVdUn0IrxVc0jITlyAlK2AnJ3cTM8G/uaTl",
	"T+EzzIeE3NBoDlmOWXwjx4Jz841N/DPjMM7MAbZB/2MBglP71Zn9aIeK2USqstUKCkY1lBtSScjB5rsZ",
	"yVGFpU6JjYTPl5QvUGGQol644FY7DjL8WlnTjKx5b4ikUKXXPEMjd+oCcGFqPuXRiFNAjUrXtZBbBeaK",
	"hvlcluuYmznag67HIOkkmxwNarwGqZeNxmuR087bHHEZtOS9CD/NxCNdKYg6I/v08RVvizlMZnPfj8m+",
	"GToFZX/iKOK3eTgU9GvU7XJzAKHHDkQkVBIUXlGxmUrZp2Ie52j7UMGN0rDqW/Ltp78PHL83g/qi4CXj",
	"kK0Eh02yLAnj8CM+TB4nvCYHPkaBZejbrg7Sgr8DVnueMdR4U/zibndPaNdjpb4V8lAuUTvgaPF+hAdy",
	"p7vdTXldPykty4Rr0WVwdhmAmoRgXSYJVUrkDGW200JNXFSw9Ua6dM82+l+HvJQDnL3uuB0fWlwcAG3E",
	"UFaEkrxkaEEWXGlZ5/otp2ijipaaCOLyyviw1fK5fyVtJk1YMd1QbznFAL5guUoGbMwhYab5FsAbL1W9",
	"WIDSHV1nDvCWu7cYJzVnGudameOS2fNSgcRIqql9c0U3ZG5oQgvyJ0hBZrVuS/+YoKw0K0vn0DPTEDF/",
	"y6kmJVClyY+Mn69xOO/090eWg74S8iJgIX27L4CDYipLB5t9Z59iXL9b/tLF+GO4u33sg06biglHZpmt",
	"Iin/z/3//ezXk+y/aPbno+zL/3X8219P3z142Pvxybuvvvp/2z999u6rB//7f6Z2ysOeSp91kJ++cJrx",
	"6QtUf6JQ/S7st2b/XzGeJYksjubo0Ba5j6UiHAE9aBvH9BLecr3mhpAuackKw1uuQw7dG6Z3Fu3p6FBN",
	"ayM6xjC/1j2VihtwGZJgMh3WeG0pqh+fmU5UR6ekyz3H8zKvud1KL33bPEwfXybmk1CMwNYpe0YwU31J",
	"fZCn+/PJ518cTZoM8/D8aHLknv6WoGRWrFN1BApYp3TFOEniniIV3SjQae6BsCdD6WxsRzzsClYzkGrJ",
	"qtvnFEqzWZrD+ZQlZ3Na81NuA/zN+UEX58Z5TsT89uHWEqCASi9T9Ytaghq+1ewmQCfspJLiEviEsClM",
	"uzafwuiLLqivBDr3galSiDHaUDgHltA8VURYjxcyyrCSop9OeoO7/NXB1SE3cAqu7pypiN57331zTo4d",
	"w1T3bEkLO3RUhCChSrvkyVZAkuFmcU7ZW/6Wv4A5Wh8Ef/aWF1TT4xlVLFfHtQL5NS0pz2G6EOSZz8d8",
	"QTV9y3uS1mBhxShpmlT1rGQ5uYgVkoY8bbGs/ghv3/5Ky4V4+/a3XmxGX31wUyX5i50gM4KwqHXmSv1k",
	"Eq6oTPm+VCj1giPbWl7bZrVCtqitgdSXEnLjp3kerSrVLfnQX35VlWb5ERkqV9DAbBlRWoR8NCOguJRe",
	"s7+vhLsYJL3ydpVagSJ/rGj1K+P6N5K9rR89+gwz+5oaCH+4K9/Q5KaC0daVwZIUXaMKLtyqlRirnlV0",
	"kXKxvX37qwZa4e6jvLxCG0dZEvyslXXoEwxwqGYBIcV5cAMsHHsnB+PizuxXvqxjegn4CLewnYB9o/2K",
	"8uevvV07cvBprZeZOdvJVSlD4n5nQrW3hRGyfDSGYgvUVl1hvBmQfAn5hatYBqtKbyatz33AjxM0Petg",
	"ytaysxmGWE0JHRQzIHVVUCeKU77plrVRNqMCB30DF7A5F00xpn3q2LTLqqihg4qUGkmXhljjY+vG6G6+",
	"iyrziaauOgkmb3qyeBbown8zfJCtyHuAQ5wiilbZjyFEUJlAhCX+ARRcY6FmvBuRfmp5jOfANbuEDEq2",
	"YLNUGd5/9v1hHlZDla7yoItCDgMqwubEqPIze7E69V5SvgBzPZsrVSha2qqqyaAN1IeWQKWeAdVb7fw8",
	"LkjhoUOV8gozr9HCNzFLgLXZb6bRYsfhymgVaCiy77jo5elw/JkFHIprwuM/bzSF6aCu61CXqDjob+WA",
	"3aDWutC8mM4QLvt8BViyVFyZfTFQCFdt0xZ1ie6XWtEFDOgusfduZD2MlscPB9klkSRlEDHviho9SSAJ",
	"sn05M2tOnmEwT8whRjWzE5DpZ7IOYuczwiLaDmGzEgXYELlq957KlhfVVgUeAi3NWkDyRhT0YLQxEh/H",
	"JVX+OGK9VM9lR0ln77Hsy7bSdKdRLGFUFDUUnvO3YZeD9vR+V6DOV6XzpehipX9EWTmje2H6Qmo7BEfR",
	"tIASFnbh9mVPKE3BpGaDDBw/zefIW7JUWGJkoI4EADcHGM3lISHWN0JGj5Ai4whsDHzAgckrEZ9NvtgH",
	"SO4KPlE/Nl4R0d+QTuyzgfpGGBWVuVzZgL8x9xzAlaJoJItORDUOQxifEMPmLmlp2JzTxZtBehXSUKHo",
	"1ENzoTcPhhSNLa4pe+XvtSYrJFxnNbE064FOi9pbIJ6JdWYzlJO6yGw9M/SezF3AfOnUwbS16O4pMhNr",
	"DOfCq8XGyu+AZRgOD0Zke1kzhfSK3w3JWRaYbdNul3NTVKiQZJyhNZDLkKA3ZuoB2XKIXO5H5eWuBUDH",
	"DNX0anBmiZ3mg7Z40r/Mm1tt0pRN9WlhqeM/dISSuzSAv759rF0Q7vum8N9wcTF/om6lEl7fsnSTCoX2",
	"48pWHdynQGGXHFpAbMHq664cmERrO9arjdcIaylWYphv3ynZR5uCElAJzlqiaXaRihQwujzgPX7mP4uM",
	"dbh7lG8eRAGEEhZMaWicRj4u6EOY4ymWTxZiPrw6Xcm5Wd8bIcLlb93m+GFrmbe+AozAnzOpdIYet+QS",
	"zEvfKjQifWteTUug7RBF22yAFWmOi9NewCYrWFmn6dXN+8MLM+2rcNGoeoa3GOM2QGuGzTGSgctbprax",
	"7VsX/NIu+CU92HrHnQbzqplYGnJpz/GJnIsOA9vGDhIEmCKO/q4NonQLg4wSzvvcMZJGo5iW6TZvQ+8w",
	"FX7snVFqPu196Oa3IyXXEpUBTGcIisUCCl/ezPvDeFRErhR8EXVxqqptNfOmxJauw8pzW4rWuTB8GArC",
	"j8T9jPEC1mnoY60AIW8y67DgHk6yAG7LlaTNQknUxCH++EZkq7tlX2g3ASAZBH3ecWY30cl2l8J24gaU",
	"QAunkyjw69t+LPsb4lA3GQqfblU+3X6EcECkKaajxib9MgQDDJhWFSvWHceTHXXQCEb3si4PSFvIWtxg",
	"OzDQDoJOElyrlLYLtXYG9mPUeY+NVmZjr11gsaFvmrsE/KKW6MFoRTb367YHXW3k2n/45UwLSRfgvFCZ",
	"BelGQ+By9kFDVBVdEc1sOEnB5nOIvS/qOp6DFnA9G3sxgnQTRJZ20dSM6y+epshoB/U0MO5GWZpiErQw",
	"5JM/73u5vEwfmZLClRBtzTVcVcl0/R9gk/1Cy9ooGUyqJjzXuZ3al+8eu365+gE2OPLOqFcD2I5dQcvT",
	"G0AaTFn6wyMVFbC+p1ol/lG9bG3hHjt1kt6lA22Na8owTPzNLdNqWtBeyk0ORhMkYWAZsxtn6dgEc3qg",
	"jfguKe/aBFbslkEieT+eiinfwrJ/FYVaFLto9xxo6YkXl3P0bnJ0s0iA1G3mRtyB69fhAk3iGSNNrWe4",
	"FdizJ8ppVUlxScvMxUsMXf5SXLrLH1/34RW3rMmkKfv8m5OXrx347yZHeQlUZsESMLgqfK/6ZFZl2zhs",
	"v0pstW9n6LSWomjzQ0XmOMbiCit7d4xNvaYoTfxMdBRdzMU8HfC+k/e5UB+7xC0hP1CFiJ/G52kDftpB",
	"PvSSstI7Gz20A8HpuLhxnXWSXCEe4MbBQlHMV3ZQdtM73enT0VDXDp6Ec/2EpSnTGgd3hSuRFbngH3pw",
	"6elbIVvM32UmJoOH3p9YZYRsi8eBWG3fv7IrTE2JFbz+WPxhTuPDh/FRe/hwQv4o3YMIQPx95n5H/eLh",
	"w6T3MGnGMkwCrVScruBByLIY3IjbVcA5XI27oE8uV0GyFMNkGCjURgF5dF857F1J5vBZuF8KKMH8NB2j",
	"pMebbtEdAzPmBJ0NZSKGINOVbZmpiODdmGpMgjWkhczetWSwztj+EeL1Ch2YmSpZng7t4DNl2Cu3wZTm",
	"ZYIvD1hrzYg1G4jN5TWLxjKvjamZ2gEymiOJTJUs29rgbibc8a45+1cNhBVGq5kzkHivda46rxzgqD2B",
	"NG0XcwNbP1Uz/E3sIFv8Td4WtM0IstV/9yL4lPxCU01/9owAj2fsMe4t0duOPhw122y2ZTsEc5weM6Z1",
	"umd0zlk3MEeyFTpT2VyKPyHtCEH/UaIQhnd8MjTz/gk8FbnXZSnBqdx0dG9m37Xd43XjoY2/sS7sFx26",
	"jl3nMk2f6v028jpKr0qXa3ZIHlLC4giDdmrAAGvB4xUFw2IbFB99RLk9T7YKRCvDLH0q41zOYzt+cyod",
	"zL3815JezWiqR4zRhQxM0fa24qS0IP5jvwEq1Diws5Mogju8y2wluQpk44PoV6W9pl5jpx2t0TQKDFJU",
	"rLpMbJhCqURimJpfUW67iJvvLL9yXyuwLnjz1ZWQWAdSpUO6CsjZKmmOffv21yLvh+8UbMFsg+xaQdSB",
	"2Q1EbLFJpCLXxTpU7nCoOZ2TR5OoDbzbjYJdMsVmJeAbj+0bM6rwugzu8PCJWR5wvVT4+pMRry9rXkgo",
	"9FJZxCpBgu6JQl4ITJyBvgLg5BG+9/hLch9DMhW7hAcGi04IOnr2+EsMqLF/PErdsq7B+TaWXSDP9sHa",
	"aTrGmFQ7hmGSbtR09PVcAvwJw7fDltNkPx1zlvBNd6HsPksryukC0vkZqx0w2W9xN9Gd38ELt94AUFqK",
	"DWE6PT9oavjTQM63YX8WDJKL1YrplQvcU2Jl6Klpr2wn9cPZXv+uX5SHyz/E+NfKh/91bF23rMbQ1UDO",
	"FkYpv0IfbYzWCaG2+GfJmsh036+TnPrawthAK/TNsrgxc5mloyyJgepzUknGNdo/aj3P/mHUYklzw/6m",
	"Q+Bmsy+eJhpRtXu18P0Av3W8S1AgL9OolwNk72UW9y25zwXPVoajFA+aGgvRqRwM1E2HZA7FhW4feqzk",
	"a0bJBsmtbpEbjTj1jQiPbxnwhqQY1rMXPe69slunzFqmyYPWZod+fvPSSRkrIVMNA5rj7iQOCVoyuMSM",
	"ufQmmTFvuBeyHLULN4H+w8Y/eZEzEsv8WU4qApFHc1uyvJHif/mxqXyOjlWbidixAQqZsHY6u90tRxvu",
	"Z3Xr+m9twBg+G8DcaLThKH2sDETf2/D68M2HiBfqgmT3vGVwfPwHkUYHRzn+4UME+uHDiROD/3jSfmzZ",
	"+8OH6QLESZOb+bXBwk00Yvw2tYdfi4QBzHctDAFFrj5CwgA5dEmZB4YJztxQE9LuEHf7UsRh8rvS0abp",
	"U/D27a/4xOMB/+gi4gMzS9zAJkth+LC3O2QmSaYIz6M4d0q+FuuxhNO5gzzxfAQoGkDJSPMcrqTXATTp",
	"rt8ZLxLRqBl1BqUwSmbcFCi25386eDaLn2zBds3K4pemtlvnIpGU58tklPDMfPi7ldFbV7Bllck+I0vK",
	"OZTJ4axu+7vXgRNa+n+LsfOsGB/5brcDrV1uZ3EN4G0wPVB+QoNepkszQYzVdtmsUJahXIiC4DxNU4uG",
	"OfZbOadaaCbym3HYVa1d3CrmgruCQ3NWYhhm2m+Mb2aS6oECWtjv3PcXMuNg+3FlzQx2dJCEshVezIqu",
	"qhLwZF6CpAv8VHDofI4l1HDkqGMFUZV5hG9iwQpBdC05EfN5tAzgmkkoNxNSUaXsII/MsmCNcx89e/zo",
	"UdLshdgZsVKLRb/Mn5qlPD7GV+wT12TJtgLYC9jdsL5rKGqfje0Tjusp+a8alE7xVHxgM1fRS2pubdtP",
	"MvQ+nZLvsPKRIeJWqXs0V/oiwu2CmnVVClpMsLjx+TcnL4md1X5jW8jbfpYLtNa1yT/pXhlfYNRXdhqo",
	"nDN+nO2lPMyqlc5C+8lUbULzRtMgk3VibtCOF2NnSl5YE2po4G8nIVgiW66giLpdWiUeicP8R2uaL9E2",
	"2ZKAhnnl+Easnp01npso+zB0P0KGbeB2vVhtK9YJEXoJ8oopwIx8uIR2OcRQG9TZxn15xPbyZM25pZTp",
	"HsJo6HW0L9o9cFaS9UEFScg6iN/TMmX7Me/bl/YMv0rnYnSa3Ha8/r64ni+xTX50zoWccsFZjq0QUpI0",
	"lm4b56Yc0TUi7V9UR+6EJg5XsrVuyAV2WBxstusZoUNc3+UfPTWbaqnD/qlh7VquLUArx9mgmPhO184h",
	"xrgC183KEFHMJ4VMBDUlEyFCAMWeZIRVmQYsnN+aZ6+c/RuLYlwwjpYuhzann1mXVakYeqY5YZosBCi3",
	"nnY2j/rVfDPFKo0FrH+bvhQLlp+xBY5hw+jMsm3MaH+oEx9B6iI2zbvPzbuudn74uRUOZic9qSo36XAf",
	"9KQgqdd8EMGpuCUfSBIhN4wfj7aF3LaGfuN9aggNLjFqDSq8h3uEEXppt0f5xuiWlqLwDWIzKpMFdBlP",
	"gPGSce9CTV8QefJKwI3B8zrwncol1VZ3GMXTzoGWAwkQmKFsffA3HarbOcCgBNfo5xjexqYN+ADjCC80",
	"Ej/lG+IPhaHuSJh4TssQOp1o6o1SlROiCkwu6rT5TjEOw7gznzLZQtfO9L3wOXbj2PcmGqpROKuLBeiM",
	"FkWqtNXX+JTgU58kBmvI69CEKmQHtmuU96nNTZQLrurVlrn8CzecLuqbn6CGuHe/32GstDPb4L+pDkzD",
	"O+OCpvfOyvUR0sV+hfn7WcYpqdfQdKbYIhuPCbxTbo6OZurrEXrz/UEp3afrfhTZuB0uF+9Rir99Yy6O",
	"uHBvLz7dXi2hri7Gggt87gsehYqQba6EV1mvzxhGPeDmJbasA7x/MQn4JS0HMuFjX4m9X63/YCgfPh8s",
	"30C1K8+lKdnKggZLHtlY4Y73pe9CHIoPtuHBh/NauLVuReiw7+6HlqfOxog1zGLQQ3c9J1qzwft60X64",
	"HCqR4Pt04PO4H4iL4pm4MvBwyUTto698DLRXCe2vrgRPq+/HwPqTmQUf2msx6GM5d/1r7TKdTv7DL9YL",
	"S4BrufkIPC69Te82lUlIu9Y81bxCQuvDUa0QW7fimB42qXYpTjb0tjLLWlq01Gs/0yOrF2PEgR4+3k2O",
	"Tou9LsxUy50jO0rq2L1ki6XGiv3fAy1Avt7RkaDpQoBHrBKKNR1ISzOYKwG7xOGmY5MNDAGzuKNCfywf",
	"hHoJuca2s01wnQTYp7+Cmcw7fe46Ewyr0yEnwzUk2NaFoN9rdscd3yucFBX/sn06p+Nr7p+EEGqbAXZF",
	"VVOupZMzPTpzcz6HHKsiby1U9c8l8KgI0sTbZRCWeVS3ioU8Jqzrvb/VsQFoWx2prfBE/XVuDM5QHvsF",
	"bO4p0qKGZOPQkMR3ncLBiAHrAvM1pIcMyS5qjKlAGYgFHxLsSjE3zTEGaz5HZdeuOZcnSXNxNKXYtkyZ",
	"bno+ai7z6V5lHzElZ6iWVb9n8rD+8QJbVCsXIEdD4eFYSyen/cY5V65wMZYVC74TX8IYlP/N1xC0s5Ts",
	"wvUPQKxYT9UVlYV/4yBFoezdxNJAz8PMrEng6Ac5JFoxYC5UXgojRmRDCWXtnIkQcHhP2cjQpoAPwjUH",
	"KaEILpFSKMi08Akf2+DYhgob/notJKjB9kcWuMHS12+a2t7YBo5iqWvqol7jBRIJK2qgk1EF7uE5tyH7",
	"uX3uk/B9G7CdFqZAr7v70frUHaZ6SIypfk7cbbk7uf86xibGOcjMe5665bh5uyIb1t0s6txe0PHBCAa5",
	"0bVztrCSpJ0m76+yoyNESfIXsDm2SpBv5Ot3MAbaSk4W9KjgaGeTD2p+Uym4FwcB78PWkauEKLMBZ8dp",
	"v4Z4l+IvWH4BWAMwhLgP9Ggn99HGHrzZV8uNr5ldVcCheDAl5ITbpCLv2G63F+xMzu/pbfOvcdaitmX9",
	"nVFt+panszOw4L68ITfzw2znYQoMq7vhVHaQHRWq13wo5OYKi/O3u3hOx2rlfVdzt4t8Q1QWipRM8gas",
	"W+/EkGISDc4XjLTqaNBG/0TdH1vNo8eFseypSOwMZ9lT8O6NFyqHH2rEUNlvFAtsBYCmDBK9nTuzvsbn",
	"yKJTJj8sXhFVWUEXNCXOR0lUKVJR2NcpsGGGStN4PBkCpIGPqfMQoHCDp0g33dE+wT9t0UJXrlDMiYTG",
	"/X/duo395vspW0x35jBL+6aaCwmtNvrma1ujNaQsYQFU/M+MaUnl5jrVFXvN/0eQmcPyzkC6EEPXLKSJ",
	"o+vjsCzFVYbXTBY6lKSMEuY91RajfLu85jvDj2cQReRR5UTsDVnSguRCSsjjL9KZuhaqlZCQlQID9FKx",
	"A3NtNKYVpudxUooFEVUuCrCdftIUNDRXzTlFgReieKgkCiztYJ63/Sai45FTGmnIegAzFJJ3Fsb3m39u",
	"vrE1B5p6XHbRmfVCD8Sag3L1txyG7Mt9eJFwbMGarhU4favO2RrpBmTqyM+JljVMiHuj2908usZWTCkL",
	"SqClK1aWmPLP1pHPPIScpFFbiQoxtW0jA1guCtR/0+ykv2WT2Ahtpnr7n4RoQIU6xRDdS4ZxXO2CFFaz",
	"qoz8FKp0xFzpLC6hRfRSinqxjIqVB8x584msnXElHuVnVWOoHWYjmimekpVQ2lkt7EjNJjThi/dzwbUU",
	"Zdk2cFp1b+G8Nj/S9Ume65dCXMxofvEAbSRc6LDSYuJz9buBps1MslOmri3MZbY1/u6yz/Y9DLt0x2g0",
	"y+4w3Z6DZZfHIgLzt908fbf/5qS/sO662uw9rRKfcEK1WLE8fco/rcjNwXjLFNNM1r+zfTptxRJ8DdlP",
	"fH2GQB1k2n00A6fJRoMnxDECF7CADMX8F7W57rhkDo71DVzdfebi5LosH5Q+OwAgpDaN3vA+ZLmxbBi4",
	"iljYshsYbtEFdOQ9h1FtN4PNjHBwoDTcCKheJG0A8L41ZE1snUIblTsTa//8QVPI8FrAv9tO5S3mMRQu",
	"eNaQlrQBg77o0QBHSJdL3xpbd44lFGZjI+xCI+aRMkcEwHDMXQuGUZF3+4JhpS9/+Wd0QHN/bQ2faAPt",
	"CifuI/RoyRo8ANKJ8ljlqCiYi3UycIXEFwmEAxT2greZvdjJIFKhglwy+r7rWCES2vScshKKLNW89DQY",
	"eSeRqcrlNrabt6MwYq+vnNa+d6gZu5bgKg9ZTUu2HcgVNedHhNf7rhhewBosfv4EKay0NokcmFDanqEd",
	"a5qoshIuoRV/6coh1YhQdgn+WxU+JgVAhe78rpE5FVgYCzAJvNYSsig0bQx2k6ZIi1i7U2SHnTFpFV3z",
	"zPIGNZZ/GIguWVHTFv7UvnJW245u+FcCVT1VLfMUP3aan+0IntrVif8+Jb95TPw2jvnuzXfTqNvGdXcG",
	"GtdqiNXxdJxxXOsreChxtiJEMlgSb5ilqugVH7bop/il13pH7hMTPELsN2vIUZRzaicUTvEc8PK5skFI",
	"7Q2nNJ8k3FVL4ISLqEfrFVVBP2uKkPof7MT4EuPOqHGNqIwmHPjmO0twMKI61QjToURe4U3dXnveD+GE",
	"3MxV9kEO9dYzPTheitwUOGP8FoumPyhObcMXsK0+N6RhdCdsmOouRHchTMis9gOVpbiy/VtjPf4F+JgE",
	"S8jeHevUGqYaqcKie+JK7XaNVyzKHVnRDRES/zFa+79qWrL5BlmWBT9YStSSGmp0QRA2OsdFZJuJt4un",
	"Ew+Yt58JP5VdNxs7ZjTcxowSAW1kAt9oS5AVvYB4GzDwyLLiXBserOoZ2qLM7d/Zzj4W3OJ9uaQVLWJL",
	"CRZt3bQYjS/jbb7+/zV5qfFUvtZiVdLcd+t17cLaLAs7cnvi0ktYbU9c7rNITwKhy3dDtNL7QIprGMFv",
	"7lIabIXUArvX/bjXBepGyxhpy+/0u9niIxu1lEPvwo0ccb5n6i7w4xayt4P/ZD3lrf7EHeB/LHgfaBod",
	"w2v7Q98Clrc7Q70GPBPrTMJc7Qr2sg6ImVg3AKtgomY8l0CVjX47/ckp7k25YMaDJtzEF4RRCpgz3jBL",
	"xqtaJ1Qi1Kf5JkJY7MZBtA44RYekBCOXXtLyp0uQkhVDG2dOh22vGrdr8a4r923CBBTu1P4ATDXqIOZK",
	"N46R+DVzgduGcDZ0WmnKCyqL+HXGSQ7S3Pvkim7U9X2Ewa+yy0tII2mmXcEj8hciaVtAyo0L0LihBy8A",
	"SA/oyhvhgsMY/YT7zZrGtBjwuPVh+CRccCu6zkqxwIzegQPh6kSjz9Zqk4KjG8HKZ+PW7edR7E/YPg22",
	"yHCMSAucdcwU28/9T7iVqJH+zJneevKtjbebYm1j4O3B9EjliyYRxxJL/zymsuJdIaQ4M94Lmz5tzNMe",
	"RJsIA/61tl9hYBcxsMWVVIidCOPtje3YmVTuvTUyZGh8UFtSbUA1aSU0d6GSfatcz2phkTJxlQv2NNpZ",
	"/4a/lwbAQ6uKcme9PW0IXzPj7NOvcXutgqwSVZaPib+2XXQK52ZxkLZhHKCPyIkysO4Q8KRCX6lWDbJW",
	"g6l9W1YONrja5S2s8m1K/5DFaYCjt104Yo68DI+wtbNhRF6wy0y6+Z5ti1pgEoQSCXkt0eJ8RTe7WwAO",
	"VG8/+/7k88dPfn/y+RfEvEAKtgDVdADotNBrYnQZ75qQbjcqt7c8nd4EXwnEIs77b32CY9gUd9Yst1VN",
	"ed9eA8F9TNWJCyBxHBOt2661VzhOk2bzcW1XapEH37EUCt7/nklRlukOLEGuSvhiUrsVeWOMBlKBVExp",
	"wwjbHmSmm+wEtUTzINbhvrSVnQTPwZuiHRUwPRBEl1rIUHA78jOss+AcUATWVel4lXUabVuX09OshQ6F",
	"RowqmkEUW8XmJAVR8H16I7szfKJxPYpXD8zWRq6nCNFlgaRJL25ev53btxsr6zSnN5uYEC/8obwGaQ65",
	"OoZriFyHkzRego+GfySKohyMa4Tlvg9ekdQPtuT/n/TiRkJBkFGg9QtkJMgDARjIfG/lLEdJm1FRcGm9",
	"BOhP8L7orvjxY+Oj3pmihZD4D3aAF6eyN++FrCIHzgeurv1jQEq0lN+GKKG1/F3Z8Z71hosk2iJnNNEa",
	"lGVLoi8WRqUP1PNQUWBAK+kVHpBCaGI007JMFCywdhw8UzHhGJVAXtLy9rnGt0wqfYL4gOLNcJpinLUe",
	"I9miUl2vZuZLOmruKEP9cFPz11gk4Z9g9ih5z7mhnD+/d5uhcYeWNmB+HhzbwMkVjmmD1B5/QWau8U0l",
	"IWeqGydw5YWTkKQNks1dQDCs9Y6s8F3r/EXoG5Dx3Af1kFeReyu4/x2EzRH9wExl4OQmqTxFfT2ySOAv",
	"xaPiRtk7rosbNkm5XgmmqJjiniWY+i3Axy7Plhkyl06toL/O0bd1C7eJi7pZ29j6YaN7rbx9+6uejSn7",
	"le6LYj7HumMHaZCyV3uU91BxzOLIjeHmTVHML0M1qG2d5YE6+Z39qFm5M2Cl1fXg3eRoARwUU1jX/3fX",
	"x+l271IPga2C0j+qFtablG6yiEmstTV5NFXUz2BEKwP3WaL+PGYY57VkeoM9vL0Bjf2erI32Xaiz4+o0",
	"BV+au/u0uADu4z2aqjy18rfrd4KWeB9ZFx83t5Aop+QbW23fHZSv7s3+Az77x9Pi0WeP/2P2j0efP8rh",
	"6edfPnpEv3xKH3/52WN48o/Pnz6Cx/Mvvpw9KZ48fTJ7+uTpF59/mX/29PHs6Rdf/sc9w4cMyBZQ32bj",
	"2dH/zU7KhchOXp9m5wbYBie0Yj+A2RvUlecCe8wapOZ4EmFFWXn0zP/0//cnbJqLVTO8//XI9Uo7Wmpd",
	"qWfHx1dXV9P4k+MFluHItKjz5bGfBzt/tuSV16chx8HG4eCONtZj3FRHCif47M03Z+fk5PXptCGYo2dH",
	"j6aPpo9dm3lOK3b07Ogz/AlPzxL3/Rhr3R4r18biOGTfvZv0nlWVbXJhHjkadX8tgZZY7Mr8sQItWe4f",
	"SaDFxv1fXdHFAuQUs1/sT5dPjr00cvyXq2LyzgCWdBvangdRoXsf01jVs5Llvl4gU9Z+bBMUVNzo2VnW",
	"azUhM9sL3McD8wJDlGxlEBX3wz8tDKLt96cNs/PtzNGvfPTs10RpOZ8547tsx0FnUTja/zn76RURkji1",
	"6DXNL0LWkE8Ta1Lj4iwx8+XU0/2/apCbhi4dx5wcqdCqH3i9MszHpR+t1KJqV1lupLGUtaiHbD+zIafo",
	"QISiQw3DQ9NgBEnDvg1LfpR9+dtfn//j3dEIQLAClgJsuvoHLcs/rHkN1hik24m8mQzFRE2aIjb4QbOT",
	"E7RkhafR58077eYEf3DB4Y+hbXCAJfeBlqV5UXBI7cFv2BYUiQXP6pNHjzyDcuJ/BN2xO1TRLKP6cVjv",
	"QhjFk8Q1BuozMvvoTahTK2llD+OJD0XeVMG/Y1+aGn719IALbVfTvfFyu8P1Fv01LXy2il3K4092Kafc",
	"xoKaC8lenO8mR59/wntzyg3PoSXBN6Oe2/2b5md+wcUV928aoalerajcoEikAy/sNomiC4VOVWSR9mxH",
	"pRD54ui3d4PX3nEc9Hj8V6uOWXGjS9F6WVot1nbfkwOcE8eyWX3uh/snVYUxn2fh+UlV2Rb+GEcADG8/",
	"WDOl1YMp+S7+uuUcsZBY30grv8B3tPd98lu+8qg3bvLSbtWZuLu/P+z9fdI2krACuGZzhgJ7CpjWKdgK",
	"Uy9a6aYXaD/fKKpXtm9AdKhV70SLzPVBHDmGPU4HbPI5otiNnem3lAq5k1Hf4W4Ad0NiUgRvkJiaDqO3",
	"w5p92etwk7SujPfIuD9xoe9HWho6iZbbaS91+uJOGPxbCYOhPO7CSmdVdQDx0Gdu7Hrl+C9X8vUQUiOq",
	"x6PkxVjzjr6Ngu/vdzjOgyk56b5zPbbiSubulATNe3cy4McgA9qaw7ukP0fHH1Tui/O+9knDagks5vdR",
	"H3/igt7fGFmDkp2BdLdMdw322ZPXHLN+b2z131JOc0i7k9D+1hJaKGR/Ixktjn09dmUIIontRga+rgGP",
	"6SCJtZsZRJwNS5dgQr49wpMmzt+wGBvA7EKX1cQrj+iptXql3axJT7Xsi1jfQazDfr05fbFLuvqETEGj",
	"e5InboH03rxvXpr0TLy5Hc/EON709NHT24Mg3oVXQpNv8RZ/zxzyvbK0NFnty8K2caTjmVjv4kq8w5ZC",
	"hT9zaFs8KhRynUTPzds2AOQ+pvy2u9g9mJKv3atNGRCX0r4QhlH5VDEqF/Yjw+sMMsg9/+czHP/elHyL",
	"CZBaTTCODTMr8EXG9bPHTz576l6R9MqGiXXfm33x9NnJV1+51yrJuMaQAavn9F5XWj5bQlkK94G7I/rj",
	"mgfP/u9//td0Or23k62K9debV7bt9cfCWyepkpGBAIZ26xPfpJS27tqR70TdrXj4vxbr5C0g1ne30Ae7",
	"hQz2/y1un1mbjJwiGoydrcZYB7yN7DHZ5z4KNc0N3wmXyZS8Eq5HYV1SaQvEYA1iRRY1lZRrgGLqKRVT",
	"8JQtipeXDGsHSKJAXoLMFAu1vmsJoYpJJeESw++bKrktCHYzegzS/WiZ/I90HeXNz8I1rYVbMpo9V3RN",
	"sOmOJgr0xJZQW5OvviKPJo32UpZmgCwgJsVcV3R9dItWv72bpLxw2BFyd+wvjj3GgtRIP6FWZaNq/N05",
	"9ycruVtydxt7IM65t+OncezEdgTXCXCrBcEKdhrLSau6qspNU1PXSHlehEqzODPDWOPAR+wj2GmaTiqh",
	"XfTeHeI7I8CNWEmXoPZkG5jQqo7/Qr085hm9c4sJeX8vd2nkO5Ji5Z1HgsxB50uXC9xBfYI9SZePOMyb",
	"VoyzlYHy0WSE3BXqbIQ2Na026vcx3hwr5WB9vA0W3JJY0I7NsTDHA98a2hW2xoIHTQB2GrV2+MxMmhLD",
	"mo4MBxbDkOz6xZ/jJRfUlgwY05wwyitFjyPIxKn7qXL9BSKkhRYvvv4ioj9g0LVrttYC28Dd5Sj4HOeK",
	"ttpP74byeTN5X4JEtBzCYXuH4P0Q3OPm37j6DPYUukX8O2QxeN03I69Ek0JvVb5/S1/p+xRF3veCXgkO",
	"NijAiOqWFu/8v0FOaq5JXzvFKlxNQ7XrykzHvubQVsHpe/PSDuFpjLiB9Yveu8zxHq7w75OVmVq3jFnb",
	"dGdhiGa0MczZvGibQcRC0vRDql0fhJ9+hLrYh+BYt8Ni8JB6PuPEAn5YpoPliCwxH1e+dtQQB3ppXo7k",
	"MluhaTQ30iLEzUGiDhKZQSn4Qn2crGgbdaTxkqASW3XL9pTprX/6Nzy7z12XFu3ypF3tK8V4DkSJFaDK",
	"YGR0V0LbQviP24NQs5Xv+8/jfNwPzF0+f/TZ7U1/BvKS5UDOYVUJSSUrN+RnHrqx3ITbKULdnsfm6wRz",
	"YBzdY+0aaXlc0OkGTFAstrgDnaG9qfKorFwlag3S1vfr9O9iPSadMmAjw3hppj6APFeKxacmznmsjy1L",
	"/ZyWJaJrl1cMBx4VVl2Wdj9hxbRumlzEtyv5hubLsLeTxhwZuhr6auiTTv1MHNm1uLO1CRSYfdZAotVE",
	"1gqQtk2+xk5TzrS2qkvNqrL9Teh1ir2LEnFTljbjtgenL/zqrDdZzJuhu/Tra6e7wadmbvcIZ+bCLg47",
	"ZQrdMv/FZtppC2jbxcvHi0e9l1wHKVeakclOrcwm2KeqgMrmY0v59ysJmRtC0kuQiuJh7SzqwZ2o/nGI",
	"6mtXnPkjEdSTTtWb8vrrX0WtsO+/9JoV73bL5VF94z1FcsYjkTxmF/asXV8W3+1+6PaSP30RZ9aIUAHM",
	"CwgDoBgU7Zlc9r+ORvpssKqMmDs9rOYWUF+U00msLu1FzCchsNQopGL+jLzlD4laUl8z2v355PMvhlwj",
	"VC1dLb2+36kZyDy2w4xxPn3SrrTDShwBv89ue7f328TJESvWicL4vIB11Iul3fbZ3Yf3lPPVDfQnTdeH",
	"DoppPOwKzDWllqy6/RrESrNZugi7t8SdYduq8zU/5V8Hg6wtlGukhupD1J6dHGkJUECllztLUuNbzW6C",
	"K07NlGsjZAsHTwibwtTW1W3avRULcBcTJSXQeejbJsSYxMOIzxhC81QRYT1eyBhJOkk/KPMiUd6+nbRJ",
	"0LMXnUdeVyj+oEKY/lBCWNaRwtpo+XAyGTagmEShYpUUWuSitHGfdVUJqcPpVtNRlgcYEvRahochwr2R",
	"MLdmhdrp0jnHtw5gA2hTtvpkXDrnHk0pn05qUdcslNvMNYalnYuKWAW/A8IH5Wt3SmWKn3XcP5+690cP",
	"kt6BnUE51fmyro7/wv9goeB3TZIxtlBRx3rNj7Fp5vFfW8OBkaWWRjaRtvtKy6Tba8GZDOp9iZ83nV6+",
	"FbLb3nxnuG8HaZPupW8bgGLccII9vh9t8m+thG11nXU2/ObRIIkRe+c11NCI2gYG2o36B/myGLZpaIKE",
	"76KXPq4FNf7EOeMFodE2dmxNQjaM4D37FN/3oj+Ei/L2Q7Y+/4TP2SuhyemqKmEFXENxs0h90uVw/vbY",
	"et3uJxi4q78fzt+/8+Mb3ychBVlk5wW/h94TlV0CPx2VWAfJ3NW3FDV/d5N/VDf58+Btjcnw7l7+dO5l",
	"6VOn7q7gj/8K/uyTXc17jGEaeSVfwzncvoYbTXzPC7knDDgbVsdwsM2vjKp3d5XqWyF9l7y7W/wTdYra",
	"nRwdiDXGQrPLEuumPETW2UcF/Tg7Q1kmLA1DB3USYr0YFpgUOcN2QqeFmrigMmuccKf4TvD5qAWfaK/v",
	"5J4708MnZnoYkHKc1l+WYwSNfQWgy5UowDtWxXzuCjoPST/tFpaGPJWmq4rYL6eDcdjnbAVn5s2f7BQH",
	"vWIbsDtiUQc8gywFueCFGhHF4Ua97j2EjqZhAG7dsxl2wMPiSj1Nr02yb6J6kT1KIF3kK2w96gtbO2QU",
	"cEkMAU4PQLbHf9l/0ZxWCZVYzZkn4N7G3HfbYit123FbAJLXKITakt/+KzEnj2zB7ppjknvTY5zygmi5",
	"MYKqr08ogZYkbyW3Bjj6J+ds8OTsVAV6qxtYU1oXEM0JPWQEQ6ewwA+3fgCeU+5Ivo8gLQglHBZUs0vw",
	"Lv/pXfWsa99mrnbVFgY4IbQo7GlsNgEuQW6IqmfKyDq8naN0T7XPyx4MA9YVSGauaFo2DnirJhzb0ljb",
	"4ojO7Bs3vLQ6vMgW5JLtqEV/s7pyXWJOfmS5FCflQoRYeLVRGla9Dt7u098HGix4Q0I/ZlXwknHIVoKn",
	"+kr/hE9/xIepr7G82NDH5+bh0Led+7YNfwes9jxj7uSb4vcjOf03CnTprFZCJaTRbme2HpGl/z2Pkj80",
	"G573T9KG55FTyz2MBorbSbd+PvbpCK3m0sk3/2r96UrouTfVstaFuIpmQRuADWccUz0Lhe89kzwam1s7",
	"e5Kp92t1e5/epggPqbMVniZ6BjcPh9sG/02TsJ1zJiYSl9N4CVJ1FLm7TOx/q0zs0fu+Fze2PfJ3cbRa",
	"HVZ2eSUKsOM26bjm6Ke6tnBRgGvl3xdZQlhkOmXI31/Ne50kjpzWi6UmdUW0SKWLNB9mNLdMNrOKUHrC",
	"qE6yVZdwuiW9BEJLCbQwyitwImZm0c1NioukCitV+5wTF/yZFJoiuCopclAKisx3qdkFmn/PhqrrLXhC",
	"wBHgMAtRgsypvDGwF5c74byATYbKsCL3f/jFqNa3Dq8VGrcj1tbHTaC3m3bdh3rc9NsIrjt5THY2odtS",
	"LabIiVVVgkuSS6BwL5wM7l8Xot4u3hwtmEXG3jPF+0luRkAB1PdM7zeFtq4yc3/3QXxun56zFUpinHLh",
	"LZCpwUqqdLaLLZuX4rUos4KIE6Y4MQ48oJq+pEq/cfnSBZZ5tNcJzmNlbDPFMMDmFrW6RWLkX+zD1Ni5",
	"uQ+5qhVxI/gcKChSa+Cw3jLXK1iHubB2ih87JFlZW+CukYewFI3vkBW16iFUR35/M1xicWippM6U0Udl",
	"C4gGEdsAOfNvRdiNHf4DgDDVINoSDrYeiCkn1KmdHCktqspwC53VPHw3hKYz+/aJ/rl5t09cthaGvbcL",
	"ASpOgHOQX1nMKjTlLqkiDg6yohcuR27hWq/2YTaHMcMyS9k2ykfjrnkrPgI7D2ldLSQtICugpAmjy8/2",
	"MbGPtw2AO+7JM7sUGrIZ1khJb3pDyXLQmBSGFjieSgmPBJ+Q3BxBozw3BOK+3jFyATh2ijk5OroXhsK5",
	"klvkx8Nl260eMGCZMcyOO3pAkB1HHwPwAB7C0NdHBX6cNeaD7hT/CcpNEOSI/SfZgBpaQjP+XgvoGv7i",
	"C6x1U3TYe4cDJ9nmIBvbwUeGjmzK1PhJugW6UU7vMcmubWqNFMDpdZTb4yvKdDYX0grSGZ1rkDtD5/9J",
	"mXec+/Rd4aquEBzB3ZtuHGTycQM8x0UsCMRdF4ZEXCUpc4dR8pisGK+1fSJqPbHlryXQfGmE9tgGa0fC",
	"FsauSJOEBZVFie1t5+HeFNIWfdKdCx6BTuQjtjV+s+5vhRzVBaBdOpIyTWquWRl1Qgp6+8dnvbyzSNxZ",
	"JO4sEncWiTuLxJ1F4s4icWeRuLNI3Fkk7iwSdxaJv69F4kOVScq8xOErNnLBs24w5V0s5b9VVflwVXkD",
	"CVonrijTrq+/r1IwbLfYwxCkgZaIA1bCcHS3DTo9/+bkJVGiljmQ3EDIOKlKalQDWOvQZXpGFXzx1Kca",
	"2quTrmyrerxfzQufPSFn35/4iqNLVxmz/e79ExuvRpTelPDAtUUDXlhJ1PdHA26Q7tqjUX8l+G7Urjc3",
	"KzEyXpFv8O0XcAmlqEDaYobYTrBv8TkHWj53uNlh8PmnmdyF2v5hRvtj0jJ6ObStaOXFfL9Wqgi1GZfk",
	"RZSD+ceclgr+GErDtOOtaDWiEyEyk69FsemcELNrx7iB7bPR1B1lnMpNokpUPwWiSxpaGHblCKtvy3p3",
	"8Oq4faLtk9kuCktJ67YMfnr0ISpPloUNG9Ybyibqzjt0cpTKMe3WQj0KAI4qDIhpEnZPyBv73YctA4gQ",
	"uSPWMPOPJoqx/WZgGviuUSIc6/lUcwk84pOnF8/+xBB2UedAmFbEF9jdfb1MjtaZGWkBPHMMKJuJYpO1",
	"2NdR6xYqmKJKwWq2+yaK+SeeuHD5mCfb76kPc428iBa3jSfHRLPOHAMe4M4bDaN5c8AWjujYc4Tx982i",
	"h9hoDAJx/CllVOrwvn2ZXjPN5o7x3TG+6DR2JALGXUHyLhOZvkfGJzey5sM875s15LUBLj7J99E6jy45",
	"WOuWk7WAWb1YGG2h76PDNjo4HhP8A7FCu9yxXHA/CrKDh/b+N01S7w7X5y5R3vh9X5nxAW4H5Rt0Zqwq",
	"yjfe5QuZYqu6tDi0TaUPy2htzfBUienG9jdk1X7tTX6R7dZdte3fLVrIFVXE7i8UpOaFy3jq1bZe8/F1",
	"TuzQ52vesOmtNU3sehOrc/OOuSL8LrdTzRWpQGZ6ze2Bah0m18HAntwPWkv77tq4vWvDJqrDAIPtV+Nv",
	"GMKBbg8Z8TW8PqKeS01iXqsTE22nE7aeoUVjOMUlbs5k3zxoYElv+HZ8SWNucf5TKCtCSV4y9K4KrrSs",
	"c/2WU/TfRAub9mNPvKF6mPc996+kXYgJD58b6i2nGGQUvDpJHjiHhAvjWwDPYlW9WIAyfDQmoDnAW+7e",
	"YpzU3GhhYk5WLJcis6m15nwZ2WVq31zRDZljRRNB/gQpyMzc+tGuW1uy0qwsXbCLmYaI+VtONSmBKk1+",
	"ZIYDm+F8OYUQcgb6SsiLgIV0r54FcFBMZWnDzHf2KbbDccv3BkA0ZtrHTRuL2+2D42FnxSDkpy8wRg2r",
	"MZdMxf0Xu7Dfmm98xXiWJLLzJRAXLtalLXIfa8A5AnrQdhzpJbzl5vbTgiDHp/p65ND1APXOoj0dHapp",
	"bUTHUeTXOkr9OwiXIQkmc+d2+TdKIY3owHs2ceNtff3O3u/pYmlduYCtQYcuZPvUtU8ceMkpEC0jWafA",
	"jXvjvAXyVv/Fp19W8vC6pEfjwbTJ/oB9dtVukId48xs+IbQUfGHrKhrtUuA+MV7VGgPA36cBDy5pmYlL",
	"kJIVoEaulAn+zSUtfwqfvZscwRryTEuaQ2YtCmOxdm6+sXSKjQY504yWGWrVYwGCU/vVmf1ox30cdRtd",
	"raBgVEO5IZWEHApbiIwp0ujzU1uggeRLyhd4dUtRL5b2NTvOFUgIjRmNCt0dIl0IZs0zW5SuD+OJa9Qc",
	"1+0Fmi8TjWPwgjM6uyeootWTauQetEqODinpk6NBQdsg9bIJnbPIabOZEVJESx6I8NNMfIgarXdEf0f0",
	"nzrRp0oqIurmHWuFxVe8Le/ZrPW+C4jeopXsg1QXvivR/+9eot9zIEUokbSlg6R7w1FFmCZXWBZpBsTc",
	"XzVa513DPaevY6ZddNRdpU3l2vPlS8q4q6kT8hoQDqMSr1ZMa9+e9r0YNi0zQ4umQQfktWR6g1oLrdjv",
	"F2D+/5sR+xXIS6/Q1LI8ena01Lp6dnxcipyWS6H08dG7SfxMdR7+FuD/y+silWSXRr96h2ALyRaMmzv3",
	"ii4WIBsT4tGT6aOjd/9fAAAA//+g+fEDR8MBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
