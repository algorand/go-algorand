// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Returns OK if healthy and fully caught up.
	// (GET /v2/ready)
	GetReady(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetReady converts echo context to params.
func (w *ServerInterfaceWrapper) GetReady(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReady(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/ready", wrapper.GetReady, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
