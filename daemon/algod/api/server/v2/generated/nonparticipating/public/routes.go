// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

<<<<<<< HEAD
	"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",
||||||| constructed merge base
	"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",
=======
	"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",
	"R29tKCQ7wzTWHz79/wAAAP//mPC/k7U8AQA=",
>>>>>>> oas2 fixups
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
