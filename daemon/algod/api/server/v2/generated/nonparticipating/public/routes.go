// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"u8A6PG/f//8BAAD//4QITzPCSwEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
