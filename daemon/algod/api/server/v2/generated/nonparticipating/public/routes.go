// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
