// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Ojxv3///AQAA//9KJ5oXyksBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
