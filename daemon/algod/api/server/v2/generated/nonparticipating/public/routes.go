// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
