// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Returns OK if healthy and fully caught up.
	// (GET /v2/ready)
	GetReady(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetReady converts echo context to params.
func (w *ServerInterfaceWrapper) GetReady(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReady(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/ready", wrapper.GetReady, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

<<<<<<< HEAD
	"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",
	"1dI+eHdCIdk5lod9//H/BwAA//9LzT4UWz4BAA==",
=======
	"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",
>>>>>>> master
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
