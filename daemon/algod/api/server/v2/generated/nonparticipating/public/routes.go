// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
