// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get boxes for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "prefix" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefix", ctx.QueryParams(), &params.Prefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefix: %s", err))
	}

	// ------------- Optional query parameter "next" -------------

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "values" -------------

	err = runtime.BindQueryParameter("form", true, false, "values", ctx.QueryParams(), &params.Values)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter values: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "header-only" -------------

	err = runtime.BindQueryParameter("form", true, false, "header-only", ctx.QueryParams(), &params.HeaderOnly)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter header-only: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
