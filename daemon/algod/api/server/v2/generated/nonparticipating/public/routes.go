// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Get the block header for the block on the given round.
	// (GET /v2/blocks/{round}/header)
	GetBlockHeader(ctx echo.Context, round uint64, params GetBlockHeaderParams) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetBlockHeader converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHeader(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockHeaderParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHeader(ctx, round, params)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/header", wrapper.GetBlockHeader, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
