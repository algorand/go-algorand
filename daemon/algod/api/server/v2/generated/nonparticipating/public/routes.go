// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
