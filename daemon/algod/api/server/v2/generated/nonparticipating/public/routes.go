// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
