// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
