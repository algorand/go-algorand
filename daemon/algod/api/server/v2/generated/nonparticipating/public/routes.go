// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"C8lWWHrt/cf/PwAA//9bOA9uBVkBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
