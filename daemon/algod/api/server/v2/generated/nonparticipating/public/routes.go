// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
