// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9P8HAAD///k/IT3mWwEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
