// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
