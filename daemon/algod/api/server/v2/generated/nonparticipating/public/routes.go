// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//BuI/ZgixAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
