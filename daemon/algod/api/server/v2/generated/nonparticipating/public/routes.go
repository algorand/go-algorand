// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ZOdGo/n04dP/DQAA//+NINn3rJEBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
