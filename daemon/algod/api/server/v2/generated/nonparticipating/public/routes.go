// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9/XfbtrIo+q9g6d618nFFOV/t2c1bXee5SdPt0yTNit3us0+T10IkJGGbArgBUJaa",
	"l//9LswAJEiCEmXLTtL6p8QiCQwGg5nBfH4YpXJZSMGE0aOnH0YFVXTJDFPwF01TWQqT8Mz+lTGdKl4Y",
	"LsXoqX9GtFFczEfjEbe/FtQsRuORoEtWv2O/H48U+3fJFctGT40q2Xik0wVbUjuw2RT27WqkdTKXiRvi",
	"GIc4eT76uOUBzTLFtO5C+ZPIN4SLNC8zRoyiQtPUPtLkgpsFMQuuifuYcEGkYETOiFk0XiYzzvJMT/wi",
	"/10ytQlW6SbvX9LHGsREyZx14Xwml1MumIeKVUBVG0KMJBmbwUsLaoidwcLqXzSSaEZVuiAzqXaAikCE",
	"8DJRLkdPfx1pJjKmYLdSxlfw35li7A+WGKrmzIzej2OLmxmmEsOXkaWdOOwrpsvcaALvwhrnfMUEsV9N",
	"yKtSGzJlhAry9sUz8vjx42/sQpbUGJY5IutdVT17uCb8fPR0lFHD/OMurdF8LhUVWVK9//bFM5j/1C1w",
	"6FtUaxY/LMf2CTl53rcA/2GEhLgwbA770KB++0XkUNQ/T9lMKjZwT/Dlg25KOP8n3ZWUmnRRSC5MZF8I",
	"PCX4OMrDgs+38bAKgMb7hcWUsoP++iD55v2Hh+OHDz7+r1+Pk/9xf371+OPA5T+rxt2BgeiLaakUE+km",
	"mStG4bQsqOji462jB72QZZ6RBV3B5tMlsHr3LbHfIutc0by0dMJTJY/zudSEOjLK2IyWuSF+YlKK3LIp",
	"O5qjdsI1KZRc8YxlY8t9LxY8XZCUahwC3iMXPM8tDZaaZX20Fl/dlsP0MUSJhetS+IAFfb7IqNe1AxNs",
	"DdwgSXOpWWLkDvHkJQ4VGQkFSi2r9H7CipwtGIHJ7QMUtoA7YWk6zzfEwL5mhGpCiRdNY8JnZCNLcgGb",
	"k/Nz+N6txmJtSSzSYHMactQe3j70dZARQd5UypxRAcjz566LMjHj81IxTS4WzCyczFNMF1JoRuT0Xyw1",
	"dtv/6/Sn10Qq8oppTefsDU3PCROpzFg2ISczIqQJSMPREuDQftm3DgdXTMj/S0tLE0s9L2h6HpfoOV/y",
	"yKpe0TVflksiyuWUKbulXoQYSRQzpRJ9AOGIO0hxSdfdSc9UKVLY/3rahi5nqY3rIqcbQNiSrr99MHbg",
	"aELznBRMZFzMiVmLXj3Ozr0bvETJUmQD1Bxj9zQQrLpgKZ9xlpFqlC2QuGl2wcPFfvDUylcAjh+kF5xq",
	"lh3gCLaO0Iw93fYJKeicBSQzIT875gZPjTxnoiJ0Mt3Ao0KxFZelrj7qgRGm3q6BC2lYUig24xEaO3Xo",
	"sAwG33EceOl0oFQKQ7lgmWXOALQ0DJlVL0zBhNvvO10pPqWaff2kT8bXTwfu/ky2d33rjg/abXgpwSMZ",
	"EZ32qTuwcc2q8f2A+2E4t+bzBH/ubCSfn1lpM+M5SKJ/2f3zaCg1MIEGIrxs0nwuqCkVe/pO3Ld/kYSc",
	"GioyqjL7yxJ/elXmhp/yuf0px59eyjlPT/m8B5kVrNELF3y2xH/seHF2bNbRe8VLKc/LIlxQ2ri4Tjfk",
	"5HnfJuOY+xLmcXXbDS8eZ2t/Gdn3C7OuNrIHyF7cFdS+eM42illoaTqDf9YzoCc6U3/Yf4oit1+bYhZD",
	"raVjJ5LBfODMCsdFkfOUWiS+dY/tU8sEGF4kaP3GEQjUpx8CEAslC6YMx0FpUSS5TGmeaEMNjPS/FZuN",
	"no7+11FtfznCz/VRMPlL+9UpfGRVVlSDEloUe4zxxqo+eguzsAwaHgGbQLYHShMXuImWlLhlwTlbUWEm",
	"9ZWlwQ+qA/yrm6nGN2o7iO/WFawX4QRfnDKNGjC+eEeTAPUE0EoAraCQznM5rX64e1wUNQbh+XFRID5A",
	"e2QcFDO25troe7B8Wp+kcJ6T5xPyQzg2qOJS5BsrHFDVsLJh5qSWk2KVbcmtoR7xjiawnVJN7NZ4NFg1",
	"/xAUB9eKhcyt1rOTVuzLf3fvhmRmfx/08ZdBYiFu+4kLLloOc3jHgV+Cy83dFuV0CceZeybkuP3t5cjG",
	"jhInmEvRytb9xHG34LFC4YWiBQLonqAs5QIuafgSwnpFbjqQ0UVhDs5wQGsA1aXP2s7zEIUESKEFw3e5",
	"TM//TvXiAGd+6sfqHj+YhiwYzZgiC6oXk1FMywiPVz3akCNmX4QLPpkGU02qJb6Uc32AJeZyDv9yw5Z6",
	"AGU8o3lupwZFA9dAlaKbzmph4EG8xB5fPK32GzJTcklkaW9VlldwIez/ioKkNM+1vyugURU5lkfJoXZ8",
	"x25n1NBgt93K4poaUiN8B3KAqch17if4D82JfWzZnZWGOOyEnAFP18jhnN8lIxcLhnjAmewLYJiRZIk2",
	"D1LQ9HwvKJ/Vk8dJd9Bufo9mFke0bhHVDp2teaYPtU0wWN9ehTr7yXO85HoSbx3THYQczDUEAWeyIDlb",
	"sbwNAnJxGA0RItcHZ5XfyXUMpu/kusMm5ZodZCfsOIMZyHdy/dxBJtVuzMPYQ5BuF2ivNxo4pgi1QjtL",
	"bcA/nkp1OQnVYlqC1G4JQu2ogYAet5AEr5ZF4s5mxLSJL7QGqj3B2wVLe/gYxhpYODX0GrCg7aiHwEJz",
	"oENjQS4LnrMDkP4iqhhMqWaPH5HTvx9/9fDRb4+++tqSZKHkXNElmW4M0+Suu78TbTY5u9ddGdygy9zE",
	"R//6iTdmN8eNjaNlqVK2pEV3KDSSo+DF14h9r4u1Jpph1RWAgzgis6IN0U7Q/2NBe8611cKX04NsRh/C",
	"snqWjDhIMraTmPZdXj3NJlyi2qjyEOYOppRUUdFVKGlkKvNkxZTmMuJxe+PeIO4NfwUq2r8jtOSCamLn",
	"BvdAKUDpjFCWWYvhfB+HPluLGjdbOT+uN7I6N++QfWki31ubNSmYSsxakIxNy3njtgyaJyUZfAgy+gdm",
	"UG/hS3Zq6LL4aTY7jDlBwkCRaz1fMm1nIviG1Ro0S6XAaJkdN3g36hD0tBHjzbimHwCHkdONSMEWfYhj",
	"22/cWHIBjjG9EWlg6YB7AsvmDbK8ukWjDx041R0dAcei4yU8BmPYc5Yb+kKqs1rt+0HJsji4kteec+hy",
	"qFuMM7dl9ltvZ+FinjcjtOYW9klsjZ9kQc/88XVrAOiBIl/y+cIE96w3SsrZ4WGMzRIDFB7gxT2333Sv",
	"769lZpmJKfUBVLB6sJrDWboN+RqdytIQSoTMGGx+qePKWU9MDwQTQAyECfU9s8CL55RZ6kppaVdbFgQ8",
	"/B15UX+Y0BRPaAKo0T3+zcoxjW/hdBgvkitGsw2ZMiaInDononNvwiIphCcYr9441TDCLxpwFUqmTGuW",
	"Jc54uRM0/x6KDrMFTwA4AFzNQrQkM6quDOz5aiec52yTQDCNJnd//EXf+wTwGmlovgOx8E4MvZXdw1l/",
	"ulAPm34bwbUnD8mOKka8XCFGgjabM8P6ULgXTnr3rw1RZxevjpYVU+CzvVaK95NcjYAqUK+Z3q8KbVn0",
	"hIi6663V8OyGCSqkV6xig+VUm2QXW7YvNe7gdgUBJ4xxYhi4R/F6SbXBOAMuMrAFojiBeVAJs1P0A9x7",
	"DbEj/+JvIN2xUysHhS51dR3RZVFIZVgWW4Ng6y1zvWbrai45C8au7jxGklKzXSP3YSkY3yELV4IIoqZy",
	"x7lAnO7iwGll5fwmisoGEDUitgFy6t8KsBuGyfUAwnWNaCQcrluUU8XmjUfayKKw3MIkpai+60PTKb59",
	"bH6u3+0SFzW13M4k0xCd5953kF8gZjFAckE1cXCQJT23ugeYQTAgoguzPYyJ5iJlyTbKhyuefSs8AjsP",
	"aVnMFc1YkrGcbrqD/oyPCT7eNgDseH3dlYYlGOkW3/Sakn1g0ZahJYynY8ojgScktUfQXgVqAnFf7xg5",
	"YzB2jDk5OrpTDQVzRbfIjwfLxq2OjAjScCWN3XFHDwCy4+hDAO7BQzX05VEBHyf13bM9xT+ZdhNUesT+",
	"k2yY7ltCPf5eC+ixobokguC8tNh7iwNH2WYvG9vBR/qObI9B9w1Vhqe8gLvOj2xz8Ktfe4KoE5NkzFCe",
	"s4wED/AaWITfE4zRao95uavgINtbF/yO8S2ynJxrUHmawJ+zDdy532Dwb2DqOMRdNjKqlU9UEADUhxRa",
	"FTx8ha1pavKNVdTMgm3IBVOM6HK65MZgUH/zqmtkkYQDRP0aW2Z0Xs2oT3Grm/UUhgqW192K8QjvBNvh",
	"O2tdDBrocHeBQsp8gIWsg4woBIP8+KSQdte5yy/wEeaekhpAOqYNLu1K/N/RDTTDCsg/ZUlSKuDKVRpW",
	"6TRSgaIACqSdwapg1Zwu+qfGEMvZkuFNEp7cv99e+P37bs+5JjN24ZNy7IttdNy/D3acN1KbxuE6gD3U",
	"HreTiPgAh48VfO4W0uYpu6NP3MhDdvJNa/DKS2TPlNaOcO3yr8wAWidzPWTtIY0Mi7yBcQf5chou++66",
	"Yd9P+bLMqTmE14qtaJ7IFVOKZ2wnJ3cTcym+X9H8p+ozSDhiqaXRlCUppMkMHIud2W8ws8aOwwW3Bxij",
	"aocCxE7wq1P8aMcVsw5c5Mslyzg1LN+QQrGUYUKJ1Rx1tdQJwVDTdEHFHC4MSpZzF+uI4wDDLzWaZlQp",
	"OkNElSqzFgkYuWMCwMW3+5wiq04xaq90bQs5XmAuaDWfSyMbIpmDPWh7DKJOsvGo98Zrkbqqb7yInGZi",
	"1ABh0ND3AvzUEw90pQDqrO7TxVe4LfYw2c29HpN9PXQMyu7EQfRl/bAvANNet/PNAZQeHIgoViimQUSF",
	"ZiqNT+UsTIJ0MkxvtGHLriUfP/2t5/i97b0vSpFzwZKlFGwTzfvngr2Ch9HjBGKy52NQWPq+bd9BGvC3",
	"wGrOM4Qar4pf2O32CW17rPQLqQ7lEsUBB6v3AzyQO93tbsrL+klpnkdciy5Fqs0A9LgqycAVoVrLlIPO",
	"dpLpMR405410+VRN9L+pAr8PcPba47Z8aGH2LdiIWV4QStKcgwVZCm1UmZp3goKNKlhqJPjJX8b7rZbP",
	"/CtxM2nEiumGeicoBL5VlqtowMaMRcw0LxjzxktdzudMm9ZdZ8bYO+He4oKUghuYa2mPS4LnpWAKIpAm",
	"+OaSbsjM0oSR5A+mJJmWpqn9QwagNjzPnUPPTkPk7J2ghuSMakNecXG2huG8098fWcHMhVTnFRbi0n3O",
	"BNNcJ/EgrR/wKcRYu+UvXLw1BBfjYx+sWackj+wyG1UI/r+7//n01+Pkf2jyx4Pkm/9z9P7Dk4/37nd+",
	"fPTx22///+ZPjz9+e+8//3dspzzssfw0B/nJc3czPnkO15/aB9SB/cbs/0sukiiRhdEcLdoidyEX2xHQ",
	"vaZxzCzYO2HWwhLSiuY8s7zlMuTQljCds4ino0U1jY1oGcP8Wve8VFyBy5AIk2mxxktrUd24xngmKDgl",
	"XXInnJdZKXArvfaNiU4+vkzOxlW2LxYCekogFXRBfXCk+/PRV1+PxnUKZ/V8NB65p+8jlMyzdSxRN2Pr",
	"2F3RHRA4GHc0KehGMxPnHgB7NJQOYzvCYZdsOWVKL3hx85xCGz6NczifPuJsTmtxIjAw3p4fcHFunOdE",
	"zm4ebqMYy1hhFrECIQ1FDd6qd5OxVthJoeSKiTHhEzZp23wye190QX05ozMoVAG3TznkNlSdAyQ0TxUB",
	"1sOFDDKsxOinlRbghL8++HXIDRyDqz1n5c/0fxtJ7vzw/Rk5cgxT38GccRw6yPKNXKVdIlsjIMlysyCD",
	"Z/JOvBPP2QysD1I8fScyaujRlGqe6qNSM/UdzalI2WQuyVOfG/ecGvpOdDSt3splQVYiKcppzlNyHl5I",
	"avLEajTdEd69+5Xmc/nu3ftObEb3+uCmivIXnCCxirAsTeJqaSSKXVAV833pqpYCjIzFcrbNikq2LNFA",
	"6mt1uPHjPI8WhW7nVHeXXxS5XX5AhtplDNstI9pI5XURq6AgNLC/r6UTDIpeeLtKqZkmvy9p8SsX5j1J",
	"3pUPHjxmpJFk/LsT+ZYmNwUbbF3pzfluG1Vg4XitZGujaFLQeczF9u7dr4bRAnYf9OUl2DjynMBnjeRm",
	"H5gPQ9UL8Pjo3wCEY+9ETVjcKX7l66bFlwCPYAvhHatu1I7/y+5XkO586e1qpUx3dqk0i8Se7eiqtCVx",
	"vzNVOaW5VbJ8NIbmc7ituspTU0bSBUvPXUkgtizMZtz43Af8OEXTsw6usVgUZuZBuRJwUEwZKYuMOlWc",
	"ik27boRmxviw4rfsnG3OZF3tZJ9CEc26BbrvoAKlBtqlJdbw2Lox2pvvosrgYl8UPv0fkh49WTyt6MJ/",
	"03+QUeU9wCGOEUUjr74PEVRFEIHE34OCSyzUjncl0o8tz94ypij5IoWjPO8n7pX68uQCwMLVgNUdny8Z",
	"VJ6TF5pMqdXbpSuahrn5ARcrNZ2zHg059BENzIBv+JVgkF1yLyrp5Kwt0DryJgoyvpzYNUcphdknllTg",
	"MtMK+/MzoRvSeSagFqpD2DQHNamKj0SmQ1XDV4fFHftAixMwU6JWODwYTYyEms2Cal/PDcre+bM8SAe4",
	"xloT2yoMnQQRa0Ftu6p+kOe57XPauV26OkO+uJCvKBReLQdUB7IaPgTJx7ZDClCAMpazOS4cX/aEUte9",
	"qDfIwvHTbJZzwUgSC34LzKCBmHFzMKsf3ycELfBk8AgxMg7ABvc6DExey/Bsivk+QApXt4P6scExH/zN",
	"4uljGA5uVR5ZWBbOe7xaqecA1EVMVvKrFbcLwxAuxsSyuRXNLZtzN756kE6hG1BbW2VtXIDHvT51dosD",
	"BAXLXmtCUXSZ1YQ6kwc6rtBtgXgq1wnmj0Y13ul6auk9GiEP2ayxg4klhe5oMpVrCBoC0YIR2Ttg6YfD",
	"gxHc8NdcA73Cd33SHIHZNu12bSpGhRpIxpnzKnLpUyeGTN2jwfSRy92gStClAGgZO+qS2+7yu/OS2lRP",
	"usK8lmrjuvqdTz6KHf++IxTdpR78da0wVV2fN22NJWqnaMa+NEsaBSpkjOgtm+g6abquIM1yBpeCpKFE",
	"Jecxz6m92zCQOKf+s8B4AYWTqNjcCwKqFJtzbVhtRPdxEp/CPEmhXqOUs/7VmULN7PreSlmJKXQjwoeN",
	"Zd74CiAiecaVNgl4IKJLsC+90HCpfmFfjetKzZAtrG7MszhvgGnP2SbJeF7G6dXN++NzO+3riiXqcgr8",
	"lgsMWJlCNe5oIOeWqTHWd+uCX+KCX9KDrXfYabCv2omVJZfmHF/IuWhx3m3sIEKAMeLo7lovSrcwyCAB",
	"t8sdA70p8PFPtllfO4cp82PvjNrxacB9MgpHiq4lKFG1Na4Xa02BooqW6GZtQlBYsApVs45Pd8X1dwkX",
	"GVvHhXg4PPgk6hwhAAWC2OZMYOGFeILVoEWFVocb9uq0Q5mj4ZxnLbdcHWfpin65Ul+oEeeMZk7v1cyv",
	"b/uB6m6IQ924LxC0UU9vO/HDgFiYzAQ10LsJ1T2skxYFz9YtEzqO2mtooXvZyXzlyBZWgCm4wXZgoBnO",
	"GSW4RtVNFzTqTIVHcK86spo/RpG6EElL3zR1qcRZqcAW24jR7JZ4re4DA9f+4y+nRio6Z86eniBIVxoC",
	"lrMPGoICqpoYjo7xjM9mLLQj68vYQBvAtY9btE3KACKLG5tLLszXT2JktIN6ahh3oyxOMRFa6PMunnXt",
	"9V4bD8wVVQ+gYGsuYXSPJh7/yDbJL/ZiSwrKla4DDZ0BvSk299j11fJHtoGRd8bvWcB27ApYN94yoMGY",
	"Nbl6hPk21c05rAYM0rKxhXvs1HF8lw60Na5+cz/x11KmUd+4uZSrHIza3WthGbIbp3Evqz09rIn4Ninv",
	"2gSe7dZBAk09nIpr3+2qK4qqrPpdtHvGaO6JF5Yz+jgeXc2nGZNmbsQduH5TCdAoniFmDn1cjRCFPVFO",
	"i0LJFc0T5/ntE/5Krpzwh9e9o/iG7yBxyj77/vjlGwf+x/EozRlVSXWH710VvFd8MavCis/bRQloLN6Y",
	"hjaeYPOrmqyht/hiwVxbksBM1KmfXkcCBEfReY9n8dDdnbzPBS3gErcEL7Ciil2o/WoYutAMV6ArynPv",
	"0PLQ9oTZwuKGFeGPcoVwgCuHPQTRK8lB2U3ndMdPR01dO3gSzPUTFNmL3ziEK8EHrMiFMdCDa08vpGow",
	"f5djFQ2DuD61yirZiMeeqFPf6qqtTE0IKl6/z3+3p/H+/fCo3b8/Jr/n7kEAIPw+db/D/eL+/aiHKmqA",
	"skwC7EuCLtm9Kl68dyNu9gIu2MUwAX28Wlaapewnw4pCMZ7Bo/vCYe9CcYfPzP2SsZzZnyZDLunhpiO6",
	"Q2CGnKDTvpyqKlxuid21NJGiHR0K6XyWtIDZLyn0D0CHX/cIiXIJTrJE5zyNhw+IqbbsVWBYmH2ZwMs9",
	"dlY7Ysl7ogxFyYOx7GtDqj+2gAzmiCJTRwtQ1ribSne8S8H/XTLCM3urmXFXmL0l6vzlAEbtKKRxu5gb",
	"GINP6uGvYgcJe2e0dUZnC9pmBAmD0DrgPq+8QX6hlbO1vjPtG8sazthh3FviUB19OGrGvJxFM5hs2D1m",
	"SJdVz+hcE4+eOaJdU7lOZkr+weIuDPD8RFL6fbcQDgHcf7Dwehb2CmywlMpxWTd/rWfftd3D78Z9G3/l",
	"u7BfdNWg5DLCNH6q99vIy1x6dbzwrENy3yUs9GI3g5x7WAscryCsDxoh+AgXKvA8YT57I1cmfirDrLQj",
	"HL8+lQ7mTiZfTi+mNNYlwt6FLEzB9jZicYwk/mO/AbrK1sbZSRCLWr3LsSZWwVRd0qRbX/OS9xqcdvCN",
	"pr7AAEWFV5cxxg/mWkaGKcUFFdhw1H6H/Mp9rRk6z+1XF1JBRTsdDxvKWMqXUXPsu3e/Zmk3RCTjc469",
	"NEvNgmaNbiDsU4xU5BpeVjUIHGpOZuTBOOgY63Yj4yuu+TRn8MZDfGNKNYjLypFdfWKXx4RZaHj90YDX",
	"F6XIFMvMQiNitSTV3ROUvCr4bcrMBWOCPID3Hn5D7kLYn+Yrds9i0SlBo6cPv4GgDfzjQUzKul6o21h2",
	"Bjz7H45nx+kY4h5xDMsk3aiTaPEvbIbeLx22nCb8dMhZgjedQNl9lpZU0DmLR5ovd8CE38JugiO+hReB",
	"3gCmjZIbwk18fmao5U892auW/SEYJJXLJTdLFxym5dLSU92JESf1w2FbYNcxxsPlH0KMZeFDzFq2rhu+",
	"xtBlT/YJRMK+pkvWROuYUCxjmPM6+tm39iInvkoqtNCpOucgbuxcdumgS0Iw9IwUigsD9o/SzJK/2Wux",
	"oqllf5M+cJPp108irWia3RrEfoDfON4V00yt4qhXPWTvdRb3LbkrpEiWlqNk9+ps8eBU9gaDxsP++mIP",
	"tw89VPO1oyS95FY2yI0GnPpKhCe2DHhFUqzWsxc97r2yG6fMUsXJg5Z2h35++9JpGUupYqXP6+PuNA7F",
	"jOJsBbk/8U2yY15xL1Q+aBeuAv2njVzyKmeglvmzHL0IBB7NbWm/Vov/5VVdwxkcq5hT1bIBShWxdjq7",
	"3Q3HCe5ndWv7bzHUC571YG4w2mCULlZ6IrwxhLv65lPEC7VBwj1vGBwf/k6UvYODHn//PgB9//7YqcG/",
	"P2o+RvZ+/368lGrU5GZ/rbFwlRsxfBvbw+9kxADm+5ZVAUUu0ztigOwTUvaBZYJTN9SYNHtE3bwWcZgc",
	"onicaPwUvHv3KzzxeIA/2oj4xMwSNrCOhO8/7M0eeVGSyarnQYQ6Jd/J9VDCackgTzyfAYp6UDLQPAcr",
	"6fQAjLrrd8aLBDRqR52yXNpLZtjeJLTnfzl4tosfb8F2yfPsl7pKVUuQKCrSRTS+d2o//A119IYIRlYZ",
	"7ZiwoEKwPDoc3m1/83fgyC39X3LoPEsuBr7b7kGJy20trga8CaYHyk9o0ctNbicIsdosAFQlmOdzmRGY",
	"py7PXzPHbjPXoMPcv0umTexowANMcgNnl2W+2OCMMJGB9WtCfoAAaAtLo/YyWJ18VctmhbeyyCXNxlBt",
	"8+z745cEZ8VvsAk3Nlibg9GluYqolXyPLsS+n3a8lMM+3Yy35ZbbVWuTVP3QYsWy7Bt1xzbeCp0Ac0yI",
	"nQl5jpYw7e0sOAmBmq1qybKg/RrexYAm7H+MoekCTEwNQdZP8sM7A3qqrA3wQef1qh0HnDsLt2sOiL0B",
	"x0SaBVMXXDNI3mUr1qzPVRWrcyZOX6+ruTxVCoGUMtlDp6iab+yLdg8cKiTeNxyFrIX4PQ0M2Fhz30aJ",
	"p/BVPKS+1XWx5bz11Z6q9tGvnI04pUIKnkJt7phCBLWEhnmbBpQxj7uJ9Mid0MjhivZ6rNIGHRZ7uz96",
	"RugQ1/XcBk/tpiJ14J+GrV0PoDkz2nE2lo19y1Ln1+BCM9dexRJRyCelisSmROPZKz/4nmQEZUJ6DFUv",
	"7LPXzowJ+fPnXIDBwqHNqdnoecg1BwejINyQuWTaraeZlKF/td9MoGxYxtbvJy/lnKenfA5jYDSUXTaG",
	"/nWHOvaBgC7wzr77zL7rijlXPzeienDS46Jwk/Y3tI138V6LXgTHwk98PECA3Gr8cLQt5LY1ghfkqSU0",
	"toLgI1aAHO4QRtXctdVJ3V4RkKLgDYIpbdGKjlxEwHjJhfeExQVEGhUJsDFwXnu+06miBlXAQTztjNG8",
	"J44dUkTRlXrVodqlrC1KYI1+jv5trPvS9jCO6oVacaNiQ/yhsNQdKBPPaF5FwEa6zIJW5ZSoDHJEWn1n",
	"Y4zDMm7f2bopAHZmYVWfQ3n4fSVRX9GsaZnNmUlolsW63XwHTwk89bk+bM3SsuqKUiV5NYvmdqnNTZRK",
	"ocvllrn8C1ecLmjkHKGGsJm032EoyjHdwL+xliD9O+NiX/dOi/SBrtl+laK7aZ4xrdfSdKL5PBmOCZAp",
	"V0dHPfXlCL3+/qCU7rMuP4ukyhaXC/coxt++t4IjrCTZCTNG0VIVeoSQXgnPfW2UqkRZkyuBKOs0vgHn",
	"ddXef7sZor9R/xiEX08qcmjyRvmKZuC+hOS0N3+eGlfJx1CylQX1VkfBkM+WEb3rCeoL88Qoz8MZn91a",
	"tyK03wXzY8PhgqE+NbPodbRczhdSb/C+zpAfV3056r5wPDxvN/I+Z668X6HYisvSB9H4UFZ/JcRfG22x",
	"qyoB0fVHA8Q/tfG511R+5hoq4jLdnfzHX9CZRpgwavMZGM47m95pEd7VdtE8Vb9Cql5cg3pzNaTikKYK",
	"sfr9TjdsNCnf0WK9Q1bPh6gD3Zbp49FJtpfAjPWAGOEosWMXb4DeXyK7LosNR6yQmtct8WKd0QfGjJ9B",
	"c/OgxHd3LB9LuGKpgT6IdYyUYmyfgt92Mm+7vy2V3X+drkLrXYXsbWWxu80Pd8j4TuWaoPoSNo6bDC8C",
	"fVxFwmIizwXVddWNVurr4AS82Yylhq92VAr6x4KJoArN2NtlAJZZUDiIV+koUGh2f6tjDdC2Qj5b4Qka",
	"PlwZnL505HO2uaNJgxqineyqXKzL1BgFDAB3SCyJSB2LNENDsgv+4bqiDMCCj+zEz1ldrb23CXZQ9+qS",
	"c3mStIKjroW1Zcp4F95Bc9lP96oQB5kVfcWEuk08++8fz6FnqnZxTrSqURre0slJt5PDhatxCnWdKt+J",
	"r3bKtP/NF3HDWXJ+zsI23eCpuqAq829MDlHbB2UTjwM9q2bmdRx+11cdqQ0OKS1pLq0akfTlBTVD36u4",
	"sTsaA/zqOiwA14wpxbLKJZJLzRIjfdz+Nji2oQKjGC+FBN3bjwOB662S+7YuAwx9iShUxaUueDFcIFFs",
	"SS10KijW2z/nNmQ/w+c+l9r3pdlpYarodXeDRJ+BwXUHiSHVz4iTlrtztC9jbOJCMJV4z1O7cq9oVsiC",
	"wodZmaKADg9GZZAbXAJlCyuJ2mnS7ipbd4Qg1/mcbY7wEuQ7S/odDIFGzQlBDyo+tjb5oOY3HYN7fhDw",
	"Pm05sELKPOlxdpx0yw23Kf6cp+cMarJVkco9TYPJXbCxV97si8XGl9ctCiZYdm9CyLHA3BDv2G72u2pN",
	"Lu6YbfOvYdasxArgzqg2eSfiQfZQm1tdkZv5YbbzMM0sq7viVDjIjmK2655Sx4peRFpoT4beyruu5nZb",
	"45qoEIqYTnKKHqtncNBjhiPIZA9KLoAjkxLn6SI6l7GQzMtk29uh4pgKJwOADBNDkr4rKNzgUQREG/VG",
	"TiFWMHO1y+SMKFY7kS9bxK3bUzh2o2/PXM3S5HczqVijO7D9WqrMqzxc1228qZpyo6jaXKbUWqenccd6",
	"0ovlneFYVSRWvZA6GquLwzyXFwkwq6QqiR+72tr3dFMY+y5A9Xf2VE9ZENdFtVPUNmRBM5JKpVgafhFP",
	"20OollKxJJcQ5hXzQM+M1buXkKsjSC7nRBapzBi2lohTUN9cpRAU1CYWRNVEUYC0A0mf+E1AxwOnPFRD",
	"bSzOg4tO0JfZE3jKtCvG4zCEL3fh3dKMeq+mDiczsAhxiHVp5l6j9hm25GZ7duTmee4NBn1NucnPuoRw",
	"JEi8sVM8IUupjbvZ4Ui6GqoO8bqbSmGUzPOmEQhV4rmzbL+i6+M0NS+lPJ/S9Pwe3COFNNVKs7FPS20H",
	"49UzqVZFpoHdw9sVTvE9CE1zRLJ3i3DHOfbu7BuA+X43x9pt4z6OdUBvrqvd0l/01M40csnTOA1/WdFt",
	"vTFpMZYQLfWEzbUwOR9eA0YdCocqmAFYUhfNTFiCje2X42nOqQvMw/4XNN72uGTGnJDoEUxdPum0liTt",
	"1a1aAACkmDFqSoUduULNp+Iqco4Z5uCSbgM6kItD5M/VYLMjHBwow64EVCfasALwLl72x1iSCyMXp3Lt",
	"n9+ra3ZdCviP26m8wTz6QqpOa9JSGFTl63v0cIR4ZeCt8UfQb95L0N1RSFX3xIESNQCgPy6pAcOg6KR9",
	"wZhRnrMsoaZHuINNaBzcbF1GS7snLteOk6cUBfaCETt2qZirN4EqdauHfkEtKcnq9a7lVmRszTQUg8BG",
	"4FSjn8H7O1iO3chal29ZJDlbsUa4liuCUYJqx1fMf6urj0nGWAHev7ZNKhaHFMrylqHCrT0JIlmGYDdq",
	"uUDE4k6RHWaJqBFlLRI8JnroUbIQrXhW0gb+9L4qR9PsZo9yBFUdnTzx97ah0/yMI7z1Axz772OqjMfE",
	"+2F8aG8WFEfdNga0My6x1H2nXsTDEsMKL5VDA2bLKscnknjNN3RBL0S/AbBL8vX1ZuA+cSkCxH6/Zilo",
	"Nc24u6vjhMBgRLeqN/Wq4Kra4csbkj8JDW8l4d7xYlcNzYDBbrXUeLpwCju8AF1QhVV7rdYMnccc/3f8",
	"b0ympR/I3quxEVp4g3vOvMcOCkpXzgqn0PJKoPn4wrGrJ9i+lPMgsnpJN0Qq+Mfe1/5d0pzPNnBCEXz/",
	"GdELaknIuQjRd+3iFe3E2xWTsQfM2wWknwrXzYeOGQy3saMEQFsR6IxTUBnonIXbAG555DypsSxHl9Ml",
	"1xqEXWs7u1hwi/c1IZY0C+/IUJmu2YHW1yq1X/8/ddZWOJUvKFXkNPVt7xjRdNkyiGNrS09cZsGW29P6",
	"utdjTwJVu8yaaJVP580uYdzbM3IjFivf1++hAXanjWCn1cWVlrFPX+s6M3pLQuSgpRx6F4bGh3SABiez",
	"r+q1A3ysxugrgN0E/qNFI/uWMQT8zwXvPd0XQ3ix0eINYLmR8h+BFe2qU7lOFJvpXaEQaFi1F2FVFwvw",
	"xkkuUsWoxtiQk5/cla2uiciFvUJi9GLlfatGydiMi5pZclGUJnIDgNKIYhMgLDRPA1p7nD19WoJVw1Y0",
	"/2nFlOJZ38bZ04Hd38Ka9N4k776NXP4rmdodgOv69gOZhKzOVAteswIcu95gYKE2VGRUZeHrXJCUKSv3",
	"yQXd6Mv7Piy0qrT6xQ7vBw20mWZ+e+AHAdJGQPKNc19e0TNRAUgP6KIY4FqACNaIWwGNIkb2eBK6MMTL",
	"KtB1kss55Jf1EKArPgm+H7ysSAEGW9SH9ptH8z/Y9mmg7rY7+EbCrEOm2H7OfgLUwYXnZ8HN1pOG1rR2",
	"wh9GZOJB8PQv5nVYOG5Ol/5jOZpnkMTQyNP0yp1PYvB7jeEhOB/r8WQ0Lbg9uwgOcpfgG5prh/czavrg",
	"Y5mgeIdN4G6rtwR+M10HOdPUBe50jT6dSzEiZezyaPe0CaEl2cuBHvCwwbE7W81pq2AKO84+TaC2Z84m",
	"hSySdEg0IJbmz5xB20HahLGHPgJzdc+6q8AJXTWraBQ2aXSt2LcPVm/XjF1+mSLddsnuM2j0cNCmsVzO",
	"gJfBEUYzDuR4VMaLcTv7qGmwqZgEoUSxtFRg0Lygm919hXpKwp7+/firh49+e/TV18S+QDI+Z7ouK9zq",
	"y1NHjHHRtrPcbIxYZ3kmvgk+Lx0R5z1lPt2m2hR31pDb6rpmYKcr0T6W0IgAiBzHSD+YS+0VjFMHfX9e",
	"2xVb5MF3LIaC698zJfM8Xta9Ut0ipv7YbgXGfqvxF0xpro1lhE1fHTd1rKxegDkOinuusM6IFKmrvl5R",
	"ATc9wTixhfSFWgI/g6xf598gbF3kjlehT2Lbuty9CC1iEJwB8RtTRgpZOFWaz0gMIsgtUUHOpTM0Qnhn",
	"ED1ZMVuMo4wRootJjpNe2BF3O7dvdms0cU5vNzGiXvhDeQnS7LOk92e0X4aT1Kb0z4Z/RFL0D8Y1quVe",
	"B6+I3g8u1y97EGjddO0IeQAAPXmYjQy6sJ1+XWlUoVUe7Pfe1dlWP17VLtCdCQMAif9gB3hhYmX9XhXj",
	"7sD5xCU7X1VICZbyvo8SGsvflavpWW8lSIItckYKY5hGtiS7amGQiKufVfmtPbeSThos9M63N9M8j6TP",
	"ot0EzlRIOPZKoFY0v3mu8YIrbY4BHyx72580E+ZQhkhGVOrLVXB7SQfNHeRLHm5q8QZSdv/B7B5F5Zwb",
	"yrmLO9IMrF7QknrupQJmAZMLGBPDgR5+Taaumn6hWMp12w194ZWTKmWQKT5zoZdsbXbkKO5a5y/SXIGM",
	"Zz5mhLwO3EkSzHY1hPUR/cRMpefkRqk8Rn0dsojgL8ajwu6bO8TFFSuvX64gSFDaa8+CIN2+okOXh0Uv",
	"rNApNeuuc7C0buA2IqjrtQ2tZjO4gPu7d7+a6ZAiNPFi6/ZzqIJzkKrre9Vcv4b6N4gjN4abN0Yxv/RV",
	"RMWqnz3Fd1v7UfJ8Z4BIo5Tyx/FozgTTXEOx4N9cc4iblaUeAszJ7x5VhPUqhUQQMZG1NiYPpgqKJA+o",
	"j+w+i1RDhny3tFTcbKAxqDeg8d+ilXp+qKo+uKohle/KyT4jz1nVnLmuEVFqL11/kDQHeYQuNWGlkMwn",
	"5Ps1XRa5MweTb+9M/4M9/tuT7MHjh/8x/duDrx6k7MlX3zx4QL95Qh9+8/ghe/S3r548YA9nX38zfZQ9",
	"evJo+uTRk6+/+iZ9/OTh9MnX3/zHHcuHLMgIqK/d/XT038lxPpfJ8ZuT5MwCW+OEFvxHZvcG7sozCY3r",
	"LFJTOIlsSXk+eup/+n/9CZukclkP738duQYso4UxhX56dHRxcTEJPzmaQ1J4YmSZLo78PNBOrKGvvDmp",
	"oskx7gV2tLYew6Y6UjiGZ2+/Pz0jx29OJjXBjJ6OHkweTB663rWCFnz0dPQYfoLTs4B9P3LENnr64eN4",
	"dLRgNIcaKvaPJTOKp/6RYjTbuP/rCzqfMzWBhAH8afXoyKsVRx9ccvxHO0PU34altIP6yb5RUlFOc576",
	"MlRcoyEYY7p12AYSLeSlHpMpNgr1YaMig9AezDfXYbPck8wiDD8/qZmW73UK/tjR018jBYt8roFvwRkG",
	"awVhXP91+tNrIhVx15s3ND2v8ix8Yk2dTBTm1dgvJ55+/10ytanpy3G+qpE/5DGUS8tEXMLGUs+LZu3O",
	"WquKWX06uPYzW7IICLsqZVEzLjDxBZDUbNiy1gfJN+8/fPW3j6MBgEBdFc2gI9vvNM9/RzMZW0MsZyti",
	"ZdwXSzSuSyPAB/VOjsEiVT0NPq/faZa8/l1IwX7v2wYHWHQfaJ7bF6VgsT14Dz3DgFjgzD168MAzGqfG",
	"B9AduTM1GtiZ3Vd5Ry9BNYoniUsM1GVI+OhtVf1Q0QLPonuCmZrOT4MvTSzfeXLAhTZrNF55ue3hOov+",
	"jmZEuQxVWMrDL3YpJwJjKK1gQQH4cTz66gvemxNheQ7NCbwZNOTsCpqfxbmQF8K/aZWfcrmkagOqjal4",
	"YbuDBJ1rcI4Ci8SzHRTYEvPR+4+9Uu8oDBY8+tCojpNdSSait6TRf2WHmLyj+zgnjIV5UO6Hu8dFAbGS",
	"p9Xz46LA/r4QD8A4SD+25troexPyQ/h1w8mBkKCPw5tTrNSr2t36JroNn3fQOC8qtBt557fy+9PK7+Om",
	"saPRlz4GTOMUbIWpE3V0VQHaTUsJquDsG0hcVUB2qkXimiQNHMN33T9YB7ABxS9wpvexq+BORn2Lux7c",
	"9alJAbyVxlS3H7sZ1uyLqVaSpCEyrpFxf+FK3yuaWzoJlttqWnLy/FYZ/Espg1XRxTlqZ0VxAPUQshmO",
	"PrgqgYdQCeHuO0gZDK/VwbdBRPrdFju5NyHH7XcuxzNclcWdap5971bB+xwUPCxTuUu1c3T8SZW6MBlq",
	"n9ykhjZifx/08Reuxf2FkdWrtllIdytsl2CfHWXMMetrY6t/SiXMIe1W/fpLq19V7eMrKWBhgOqRy80P",
	"3FhXst61rXPcVJpYs/51wNmgfAVkqeMRHtfB+JbFYJSxiy/WY38zBHcqXhpxs8ade2NXxfqBhRfU7zYn",
	"z3dpV1+QnWdwG9uIFIjvzXXz0qjb4e3NuB2G8aYnD57cHAThLryWhrwAKX7NHPJaWVqcrPZlYds40tFU",
	"rndxJdFiS1XBM3toGzyqqms5Dp7btzFK4y7kwTYbH92bkO/cq3VtDJfnPZeWUfl8Lqrm+JHldRYZ5I7/",
	"8ymMf2dCXkCWotFjCDaD9Ad4kQvz9OGjx0/cK4peYCxX+73p10+eHn/7rXutUFwYiAfAe07ndW3U0wXL",
	"c+k+cDKiO6598PS///k/k8nkzk62KtffbV5jp9TPhbeOYxX0KgLo260vfJNit3XXwXYn6m7Eff+dXEel",
	"gFzfSqFPJoUs9v8U0mfaJCN3Ea0smY1eKgeURnhM9pFHYyd/INWiEiYT8lq6tlZlThVWTYGSrJrMS6qo",
	"MIxlE0+pkCensY1PmnNI8FdEM7ViKtG8Kn1cKlaV9igUW0GMfF00tAHBbkYPkbSfLZN/RddBcvu0EtNG",
	"uiWD2XNJ1wT6NBiimRljXbE1+fZb8mBc317y3A6QVIiJMdclXY9u0OpXEdvQYjnPHXak2h2gC2MPsSDV",
	"2k9Vr7C+avzVOfcXq7kjubuNPRDn3NvxUzt2QjuCax611YKAip2B6rq6LIp8U9dVtVqeV6HiLM7OMNQ4",
	"8Bn7CHaapqOX0DZ6bw/xrRHgSqykTVB7sg3IOtVHH+BeHvKMzrmFrLm/lrs08B0pufTOI0lmzKQLl7Db",
	"Qn2EPSmXNNjPm5Zc8KWF8sH42rUa2MVuVeCwd29GMU1+SHuoIJcSHHhMRYj4J9/N3j7mMywV7htI+Bp/",
	"4Jpy1Zarhpl4+cYWui6e3+f1FrTRAHQ3lM/qybsKGaDlEP7PWwTvh+AOc/ze1STA4+UW8WeI+PdXyYS8",
	"lnXaON6g/pSux+uU7Ne9oNdSMPSxW80XafHWnVqpHZZxIFJ8vRC8v9Ttmi6rghz5Ojtb9ZC/25d26CJD",
	"pDfU7PkSRfjfo9WIGlLGrm2ysxhCPdoQ5mxfxC4BYbmSyae8xXwSfvoZXm0+Bce6GRYDh9TzGacWiMMy",
	"HSjBg8R8VDWN7+NAL+3LgV6GVYkGcyMjqzA0Fqn9Q6Ysl2KuP09WtI064niJUAlWmsJmI531T/6CZ/eZ",
	"6wTim7G7ek+ai5QRLZcMrgxWR4fuFBgs+eTB324OQsOXvvOyCHNXPzF3+erB45ub/pSpFU8ZOWPLQiqq",
	"eL4hP4uq48dVuJ0m1O15aA2OMAcuwNvUrAuWhkWMrsAEXefzuNXY2a3ryoYa9SpZGqawpl2rJRLvMOmY",
	"PRgYxks79QH0uVzOvzR1zmN9aCnmZzTPAV27nEww8KAo5Stv663691mof2tX5PYzUf6ifq+r8o/Ls7dG",
	"ZO4Hs+bZx926XlAndk81j4tAzQu7O9CiYFRdXr/b7Zlvdz8+eR4mP8iqkpIXOj2gWBTtmf/zf0YDzepQ",
	"1UPOnG5fCgTUFzd0WpDLTJCzcRX7Zy85cvaUvBP3iV5QX3vX/fnoq697HAN2HleTrOsaqAeyj3GYIf6B",
	"L9rbcVgpVuH36U3v9n6bOB7xbB0pMC4ytg56WjS7s7pb5x1NCrrxWQKdGntFvM5uddkJh10yK6b0ghc3",
	"X8tVGz6NF7P21p2qy/eJ+K4y8mHBUS7mNc+4WbiNYixjhVnsLO0Lb9W7yVyRX65dOxYswDomfMImWJ+0",
	"blOVzZkTTJTkjM6qflNSDskNC/iMJTRPFQHWw4UM0c6i9AP1kIAob972VudQoaDzyFMtmfNJlTDzqZSw",
	"pKWFNdHy6XQyKOQ/DqJ5CiWNTGWOoXllUUhlqtOtJ4Nus6xP0WtcZvsI90rK3Jpneqeb4AzeOsC9sknZ",
	"+otxE5x5NMX8BLFFXbLgaD3XEJZ2JgvS6S5uQfikfO32UhnjZy2XwpfuUTC9pHdgB0NKTbooi6MP8B8o",
	"uPqxzgOFVhT6yKzFETT7O/qwNWITWGpudROFXSwaZsJO68Bo3OVL+LzumPFCqnZb5p0RmS2kjdtCHxsX",
	"QmhnhD1ez23yL30J2+qOaW341SMMIiN2zmtV5iBov1bRbtCHxVcuwOaLERK+jYj5vBZU+6hmXGSEBtvY",
	"sjVVDdL9HeBvX+yiP4Xb6+bDgL76gs/Za2nIybLI2ZIJw7KrBVOTNofz0mOruN1PMXCivxtx3ZX5ocT3",
	"eSKVLrJTwO9x7wkq4zA/HVVQqsbK6uu57txK8s9bkj/zHSAaZHgrl78cuRw4Z29F8Ocugh9/sau5xriY",
	"gSL5Es7hphiub+J7CuSOMuBsWC3DwTa/Mly926vUL6Ty3cZupfgX6hTFnRwc3DPEQrPLEuumPEQm02cF",
	"/TA7Q55HLA19B3WMrRfNgnGoAShTDu1cTjI9xkPsjBPuFN8qPp+14hPs9a3ec2t6+MJMDz1ajrv15/kQ",
	"RWNfBWi1lBnzjlU5m7mau33aT7MVoCVPbeiyIPjlpDe294wv2al98yec4qAitga7pRa1wLPI0iyVItMD",
	"ojjcqJeVQ+Bo6gfgxj2b1Q54WFw1nsmlSfZtUNKvQwmkjXwNLRx97WGHjIytiCXAyQHI9ugD/gvmtELq",
	"yGpOPQF3Nuau2xYspozjNgAkb0AJxarM/is5Iw+wpnIpIHG67tVMRUaM2lhF1ZeQU4zmJG0kTFZwdE/O",
	"ae/J2XkV6KyuZ03xu4CsT+ghIxhayeo/3vgBeEaFI/kugowklAg2p4avmHf5T24LHF1amrnyQlsY4JjQ",
	"LMPTWG8CWzG1IbqcaqvriGbeyx3dPC97MAy2LpjiVkTTvHbA4zXhCKsXbYsjOsU3rii0WrwIayapZtSi",
	"l6yuopKckVc8VfI4n8sqFl5vtGHLTidk9+lvPTXwvSGhG7MqRc4FS5ZSxPrz/gRPX8HD2NdQAarv4zP7",
	"sO/blrxtwt8CqznPEJl8Vfx+Jqf/SoEurdUqVkhlb7fTDeZfAP3veZT8odmItHuSNiINnFruYTBQ2M23",
	"8fORT0do9PaNvvmh8aercube1IvSZPIimAVsABjOOKTAESjfeyZ51Da3ZkYe19drdbtOb1OAh9jZqp5G",
	"erbWD/vbtv5FE3udcyYkEghKT+WKKd26yN1m9/6psnsH7/te3Bh7lO/iaKU+rO7yWmYMx/U3Xjz6scYa",
	"QmbMtVLvqixVWGQ8ZcjLr/q9VhJHSsv5wpCyIEbG0kXqDxOaIpNN8CIUnzAoZYvXJZhuQVeM0Bwa1JMp",
	"Y4LIqV10LUlhkVRDMWGfc+KCP6NKUwBXoWTKtGZZ4huJ7AKtalAPoepmC54AcAC4moVoSWZUXRnY89VO",
	"OM/ZJoHLsCZ3f/zFXq1vHF5UGrcjFkuYRtBblUlzemEX6mHTbyO49uQh2VHFiFcNIEVOLoucuSS5CAr3",
	"wknv/rUh6uzi1dECWWT8mineT3I1AqpAvWZ6vyq0ZZFY+d0F8Rk+PeNL0MQEFdJbIGOD5VSbZBdbti+F",
	"a9F2BQEnjHFiGLjnavqSavPW5UtnUDoQxQnMgzq2naIfYCtF8W4RGfkXfBgbO7XyUOhSEzeCz4FiWWwN",
	"gq23zPWarau5oB6HH7tKskJb4K6R+7AUjO+QFXRTIdQEfn87XGRxYKmkzpTRRWUDiBoR2wA59W8F2A0d",
	"/j2AcF0jGgkHqsOHlDOVMmdUYK6qLArLLUxSiuq7PjSd4tvH5uf63S5xUVPL7UwyHSbAOcgvELMaTLkL",
	"qomDgyzpucuRm7vumF2Y7WFMoHRPso3ywbhr3wqPwM5DWhZzRTOWZCynEaPLz/iY4ONtA8COe/JMVtKw",
	"ZMpmUrH4pteUrHqNSdXQEsbTMeWRwBOS2iNoL881gbivd4ycMRg7xpwcHd2phoK5olvkx4Nl41b3GLDs",
	"GHbHHT0AyI6jDwG4Bw/V0JdHBXyc1OaD9hT/ZNpNUOkR+0+yYbpvCfX4ey2gbfgLBVhDUrTYe4sDR9lm",
	"LxvbwUf6jmzM1PhFugXaUU7XmGTXNLUGF8DJZS63RxeUm2QmFSrSCZ0ZpnaGzv+Dcu849+m70lVdITCC",
	"k5tuHGDyYY8yx0UQBOLEhSWRCTlbMMWsDKPkIVlyURp8IkszxpLKitF0YZX20AaLI0GXWdd3VbE5VVkO",
	"HUhnldyUCoQRNy0BD0BH8hGbN3677hdSDSrU3ixHSLkhpTA8D5rVVPf2z896eWuRuLVI3Fokbi0StxaJ",
	"W4vErUXi1iJxa5G4tUjcWiRuLRJ/XYvEpyqTlHiNw1dsFFIk7WDK21jKP1Wl8kpUeQMJWCcuKDeu9bqv",
	"UtBvt9jDEGQYzQEHPGf90d0YdHr2/fFLomWpUkZSCyEXpMipvRqwtakaATdbzKPopEvsJo7d66lmjx+R",
	"078f+4qjC1cZs/nu3WOMVyPabHJ2z7XaYiJDTdT33GLCIt213KJeJPiGwa59Ms8hMl6T7+Ht52zFclkw",
	"hcUMiVEl61p8zhjNnznc7DD4/MNO7kJtf7ej/T5uGL0c2pa08Gq+XyvVhGLGJXke5GD+PqO5Zr/3pWHi",
	"eEtaxHr2VoIPTUHATL6T2aZ1QuyuHcEGNs9GXXeUC6o2kSpR3RSINmkYadmVI6yuLevjwavjdom2S2a7",
	"KCymrSumo+d4G5VHy8JWG9YZChN1Zy06GcVyTNu1UEcVgIMKA0KaBO4JeYvffdoygACRO2I1M/9sohib",
	"b1ZMA961lwjHer7UXAKP+OjphbM/toSdlSkj3GjiC+zuFi/j0TqxI82ZSBwDSqYy2yQN9jVqSKGMa6o1",
	"W053S6KQf8KJq4SPfbJdTn0aMfI8WNw2nhwSzTpxDLiHO28MG8ybK2zBiI49Bxi/bhbdx0ZDEIjjTzGj",
	"Uov37cv06mk2t4zvlvEFp7GlEXDhCpK3mcjkGhmf2qhS9PO879csLS1w4Um+C9Z5cMmxtWk4WTM2Ledz",
	"e1vo+ujs0hiMx6X4RKwQlzuUC+5HQTh41YH9qknq7eG63CXIG7/rKzPeg+2gYgPOjGVBxca7fFmi+bLM",
	"EYfYqPiwjBZrhsdKTNe2vz6r9htv8gtst07UNn9HtJALqgnuL8tIKTKX8dSpbb0Ww+uc4NBna1Gz6a01",
	"TXC9kdW5eYeICL/LzVRzTQqmErMWeKAah8l1MMCT+0lrad+KjZsTG5ioznoYbLcaf80QDiQ9VMDXQHwE",
	"PZfqxLxGJybaTCdsPAOLRn+KS9icCd88aGBJZ/hmfEltbnH+U5YXhJI05+BdlUIbVabmnaDgvwkWNunG",
	"nnhDdT/ve+ZfibsQIx4+N9Q7QSHIqPLqRHngjEVcGC8Y8yxWl/M505aPhgQ0Y+ydcG9xQUphb2FyRpY8",
	"VTLB1Fp7vqzuMsE3l3RDZlDRRJI/mJJkaqV+sOtoS9aG57kLdrHTEDl7J6ghOaPakFfccmA7nC+nUIWc",
	"MXMh1XmFhXivnjkTTHOdxA0zP+BTaIfjlu8NgGDMxMd1G4ub7YPjYedZL+QnzyFGDaox51ybOj6iA/uN",
	"+caXXCRRIjtbMOLCxdq0Re5CDThHQPeajiOzYO+ElX5GEuD41FyOHNoeoM5ZxNPRoprGRrQcRX6tg65/",
	"B+EyJMJkbt0uf6IU0oAOvGcTNh7r67f2fk8XS0PkMpHZpz0CGZ+69ok9L7kLRMNI1ipw4944a4C81X/x",
	"5ZeVPPxd0qPxYLfJ7oBddtVskAd48xs+JjSXYo51Fe3tUsI+cVGUBgLAr9OAx1Y0T+SKKcUzpgeulEvx",
	"/YrmP1WffRyP2JqliVE0ZQlaFIZi7cx+g3QKjQYFN5zmCdyqhwLETvCrU/xohzwOuo0ulyzj1LB8QwrF",
	"UpZhITKuSX2fn2CBBpIuqJiD6FaynC/wNRzngilWNWa0V+j2EPFCMGuRYFG6LozHBG2hYd1eRtNFpHEM",
	"CDh7Z/cElTV6Ug3cg0bJ0b5L+njUq2hbpK7q0DlETpPNDNAiGvpAgJ964kPUaL0l+lui/9KJPlZSEVA3",
	"a1krEF/htlyzWeu6C4jeoJXsk1QXvi3R/2cv0e85kCaUKNq4g8R7w1FNuCEXUBZpyoiVXyVY513DPXdf",
	"h0y74Ki7SpvatedLF5QLV1OnymsAOOyVeLnkxvj2tNdi2ERmBhZNiw6WloqbDdxaaMF/O2f2/++t2q+Z",
	"WvkLTany0dPRwpji6dFRLlOaL6Q2R6OP4/CZbj18X8H/wd9FCsVX9n71EcCWis+5sDL3gs7nTNUmxNGj",
	"yYPRx/8bAAD//y8rYuEPsQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
