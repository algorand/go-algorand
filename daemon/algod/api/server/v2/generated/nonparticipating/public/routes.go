// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"RFM5/1kBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
