// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8f3H/xsAAP//UzTiFnalAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
