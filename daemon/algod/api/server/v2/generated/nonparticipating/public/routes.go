// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3///AQAA//8WqsRKx0sBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
