// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
