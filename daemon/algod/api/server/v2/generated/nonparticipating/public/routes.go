// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"DTfTaIsBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
