// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get boxes for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "prefix" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefix", ctx.QueryParams(), &params.Prefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefix: %s", err))
	}

	// ------------- Optional query parameter "next" -------------

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "values" -------------

	err = runtime.BindQueryParameter("form", true, false, "values", ctx.QueryParams(), &params.Values)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter values: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "header-only" -------------

	err = runtime.BindQueryParameter("form", true, false, "header-only", ctx.QueryParams(), &params.HeaderOnly)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter header-only: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//z2cKNBNxQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
