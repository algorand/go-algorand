// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9fXPbtrI4/FUw+v1m8nJFOa+9p57p3MdN0h7fpmkmcXvuuU2eFiJXEo4pgAcAZal5",
	"8t2fwQIgQRKUKFt2ktZ/JRZJYLFYLPZ9P4xSsSwEB67V6PjDqKCSLkGDxL9omoqS64Rl5q8MVCpZoZng",
	"o2P/jCgtGZ+PxiNmfi2oXozGI06XUL9jvh+PJPy7ZBKy0bGWJYxHKl3AkpqB9aYwb1cjrZO5SNwQJ3aI",
	"0+ejj1se0CyToFQXyp94viGMp3mZAdGSckVT80iRC6YXRC+YIu5jwjgRHIiYEb1ovExmDPJMTfwi/12C",
	"3ASrdJP3L+ljDWIiRQ5dOJ+J5ZRx8FBBBVS1IUQLksEMX1pQTcwMBlb/ohZEAZXpgsyE3AGqBSKEF3i5",
	"HB3/OlLAM5C4WymwFf53JgH+gERTOQc9ej+OLW6mQSaaLSNLO3XYl6DKXCuC7+Ia52wFnJivJuTHUmky",
	"BUI5efPdM/L48eOvzUKWVGvIHJH1rqqePVyT/Xx0PMqoBv+4S2s0nwtJeZZU77/57hnO/9YtcOhbVCmI",
	"H5YT84ScPu9bgP8wQkKMa5jjPjSo33wRORT1z1OYCQkD98S+fNBNCef/pLuSUp0uCsG4juwLwafEPo7y",
	"sODzbTysAqDxfmEwJc2gvz5Ivn7/4eH44YOP/+fXk+R/3Z9PH38cuPxn1bg7MBB9MS2lBJ5ukrkEiqdl",
	"QXkXH28cPaiFKPOMLOgKN58ukdW7b4n51rLOFc1LQycsleIknwtFqCOjDGa0zDXxE5OS54ZNmdEctROm",
	"SCHFimWQjQ33vViwdEFSquwQ+B65YHluaLBUkPXRWnx1Ww7TxxAlBq5L4QMX9Pkio17XDkzAGrlBkuZC",
	"QaLFjuvJ3ziUZyS8UOq7Su13WZGzBRCc3Dywly3ijhuazvMN0bivGaGKUOKvpjFhM7IRJbnAzcnZOX7v",
	"VmOwtiQGabg5jXvUHN4+9HWQEUHeVIgcKEfk+XPXRRmfsXkpQZGLBeiFu/MkqEJwBURM/wWpNtv+329/",
	"ekWEJD+CUnQOr2l6ToCnIoNsQk5nhAsdkIajJcSh+bJvHQ6u2CX/LyUMTSzVvKDpefxGz9mSRVb1I12z",
	"ZbkkvFxOQZot9VeIFkSCLiXvA8iOuIMUl3TdnfRMljzF/a+nbchyhtqYKnK6QYQt6fqbB2MHjiI0z0kB",
	"PGN8TvSa98pxZu7d4CVSlDwbIOZos6fBxaoKSNmMQUaqUbZA4qbZBQ/j+8FTC18BOH6QXnCqWXaAw2Ed",
	"oRlzus0TUtA5BCQzIT875oZPtTgHXhE6mW7wUSFhxUSpqo96YMSpt0vgXGhICgkzFqGxtw4dhsHYdxwH",
	"XjoZKBVcU8YhM8wZgRYaLLPqhSmYcLu+073Fp1TBV0/67vj66cDdn4n2rm/d8UG7jS8l9khGrk7z1B3Y",
	"uGTV+H6AfhjOrdg8sT93NpLNz8xtM2M53kT/Mvvn0VAqZAINRPi7SbE5p7qUcPyO3zd/kYS81ZRnVGbm",
	"l6X96ccy1+wtm5ufcvvTSzFn6Vs270FmBWtU4cLPlvYfM16cHet1VK94KcR5WYQLShuK63RDTp/3bbId",
	"c1/CPKm03VDxOFt7ZWTfL/S62sgeIHtxV1Dz4jlsJBhoaTrDf9YzpCc6k3+Yf4oiN1/rYhZDraFjdyWj",
	"+cCZFU6KImcpNUh84x6bp4YJgFUkaP3GEV6oxx8CEAspCpCa2UFpUSS5SGmeKE01jvR/JcxGx6P/c1Tb",
	"X47s5+oomPyl+eotfmREVisGJbQo9hjjtRF91BZmYRg0PkI2YdkeCk2M2000pMQMC85hRbme1CpLgx9U",
	"B/hXN1ONbyvtWHy3VLBehBP74hSUlYDti3cUCVBPEK0E0YoC6TwX0+qHuydFUWMQn58UhcUHSo/AUDCD",
	"NVNa3cPl0/okhfOcPp+Q78OxURQXPN+Yy8GKGuZumLlby91ilW3JraEe8Y4iuJ1CTszWeDQYMf8QFIdq",
	"xULkRurZSSvm5b+7d0MyM78P+vjLILEQt/3EhYqWw5zVcfCXQLm526KcLuE4c8+EnLS/vRzZmFHiBHMp",
	"Wtm6n3bcLXisUHghaWEBdE/sXco4Kmn2JQvrFbnpQEYXhTk4wwGtIVSXPms7z0MUEiSFFgzf5iI9/ztV",
	"iwOc+akfq3v8cBqyAJqBJAuqFpNRTMoIj1c92pAjZl5EBZ9Mg6km1RIPtbwdS8uopsHSHLxxscSiHr9D",
	"pgcyorv8hP+hOTGPzdk2rN8OOyFnyMCUPc7OyZAZbd8qCHYm8wJaIQRZWgWfGK17Lyif1ZPH92nQHr2w",
	"NgW3Q24RuENiffBj8K1Yx2D4Vqw7R0CsQR2CPsw4KEZqWKoB8D13kAncf4c+KiXddJGMYw9BslmgEV0V",
	"ngYe3vhmlto4ezIV8nLcp8VWOKlNzoSaUQPmO24hCV8ti8SRYsRsZV9oDVR7+bYzjfbwMYw1sPBW02vA",
	"gjKjHgILzYEOjQWxLFgOByD9RZTpT6mCx4/I27+fPH346LdHT78yJFlIMZd0SaYbDYrcdboZUXqTw73u",
	"ylA7KnMdH/2rJ95Q2Rw3No4SpUxhSYvuUNYAakUg+xox73Wx1kQzrroCcMjhPAPDyS3aibXtG9CeM2Uk",
	"rOX0IJvRh7CsniUjDpIMdhLTvsurp9mES5QbWR5ClQUphYzY1/CIaZGKPFmBVExEvCmv3RvEveHF26L9",
	"u4WWXFBFzNxo+i05ChQRytJrPpzv26HP1rzGzVbOb9cbWZ2bd8i+NJHvLYmKFCATveYkg2k5b2hCMymW",
	"hJIMP8Q7+nvQKAqcsSW81XRZ/DSbHUZVFDhQRGVjS1BmJmLfMHK9glRwGwmxQztzow5BTxsx3kSn+wFw",
	"GHm74SnaGQ9xbPsV1yXj6PRQG54GWqyBMYds3iDLq2urfeiwU91REXAMOl7iYzR0PIdc0++EPKstgd9L",
	"URYHF/Lacw5dDnWLcaaUzHzrdWjG53kz+mZuYJ/E1vhJFvTMH1+3BoQeKfIlmy90oFa8lkLMDg9jbJYY",
	"oPjAKmW5+aarmr0SmWEmulQHEMHqwWoOZ+g25Gt0KkpNKOEiA9z8UsWFs554DXQUo39bh/KeXlg9awqG",
	"ulJamtWWBUHvbee+qD9MaGpPaIKoUT2+q8rpaN+y09lYgFwCzTZkCsCJmDoHkXNd4SIpup61F2+caBjh",
	"Fw24CilSUAqyxBmmdoLm37NXh96CJwQcAa5mIUqQGZVXBvZ8tRPOc9gkGCihyN0fflH3PgG8Wmia70As",
	"vhNDb6XmOy9gF+ph028juPbkIdlRCcTfK0QLlGZz0NCHwr1w0rt/bYg6u3h1tKxAoj/uWineT3I1AqpA",
	"vWZ6vyq0ZdET/ufUWyPhmQ3jlAsvWMUGy6nSyS62bF5q6OBmBQEnjHFiHLhH8HpJlbY+ZMYzNH3Z6wTn",
	"sUKYmaIf4F41xIz8i9dAumOn5h7kqlSVOqLKohBSQxZbA4f1lrlewbqaS8yCsSudRwtSKtg1ch+WgvEd",
	"suxKLIKorlwtLsiiuzh0SJh7fhNFZQOIGhHbAHnr3wqwG4ZA9QDCVI1oSzhMtSinirsaj5QWRWG4hU5K",
	"Xn3Xh6a39u0T/XP9bpe4qK7v7UyAwsgr976D/MJi1ga/LagiDg6ypOdG9kAziHV2d2E2hzFRjKeQbKN8",
	"VPHMW+ER2HlIy2IuaQZJBjnddAf92T4m9vG2AXDHa3VXaEhsFFN802tK9kEjW4YWOJ6KCY8En5DUHEGj",
	"CtQE4r7eMXIGOHaMOTk6ulMNhXNFt8iPh8u2Wx0ZEW/DldBmxx09IMiOow8BuAcP1dCXRwV+nNS6Z3uK",
	"f4JyE1RyxP6TbED1LaEef68F9NhQXYB4cF5a7L3FgaNss5eN7eAjfUe2x6D7mkrNUlagrvMDbA6u+rUn",
	"iLoZSQaashwyEjywamARfk9s/E17zMupgoNsb13wO8a3yHJyplDkaQJ/DhvUuV/bwM7A1HEIXTYyqrmf",
	"KCcIqA8XMyJ4+AqsaarzjRHU9AI25AIkEFVOl0xrG7DdVHW1KJJwgKhfY8uMzolngyL9DgzxKr7FoYLl",
	"dbdiPLI6wXb4zlqKQQMdThcohMgHWMg6yIhCMCjegxTC7DpzseM+ethTUgNIx7TRg1td/3dUA824AvJP",
	"UZKUclS5Sg2VTCMkCgooQJoZjAhWzekiO2oMQQ5LsJokPrl/v73w+/fdnjNFZnDhEy7Mi2103L+PdpzX",
	"QunG4TqAPdQct9PI9YEOH3PxOS2kzVN2Rxa4kYfs5OvW4JWXyJwppRzhmuVfmQG0TuZ6yNpDGhkWVYHj",
	"DvLlBEPH1o37/pYty5zqQ3itYEXzRKxASpbBTk7uJmaCv1jR/KfqM0wmgdTQaApJiikQA8eCM/ONzZrY",
	"pRvW0WRsuYSMUQ35hhQSUrBR/kbkUxWME2Lj/9IF5XOU9KUo5y4AzY6DnLpU1qYiS94ZIioN6TVP0Dod",
	"49wu6Ngnehg5CKjRxdqmbat5XNBqPpfbM+RKDZDXNvVHvVvjUa+qapC6qlVVi5xmtsoALt4Q1AL81BMP",
	"9IEg6ozQ0sVXuC3mFJjNvR5bez10DMruxEFIXP2wLyrO6Mn55gDSih2ISCgkKLxbQvuSsk/FLMxMc5eP",
	"2igNy64J3n76W8/xe9Or6AmeMw7JUnDYRJOxGYcf8WH0OOH91vMxShp937aVhwb8LbCa8wyhxqviF3e7",
	"fULbrib1nZCH8mXaAQfL5QNchzv95G7Kyzo4aZ5HfIIub6XNANS4ypNnklClRMpQ2DrN1NgeNOdGdEku",
	"TfS/rqJxD3D22uO2nF9hSiQadyEvCCVpztD0K7jSskz1O07RuBQsNRK15LXofnPjM/9K3L4ZMT+6od5x",
	"ihFrlckpGmkxg4h95TsAb3VU5XwOSreUlBnAO+7eYpyUnGmca2mOS2LPSwESQ4cm9s0l3ZCZoQktyB8g",
	"BZmWuim2Y1qW0izPnSfOTEPE7B2nmuRAlSY/Mn62xuG8t94fWQ76QsjzCgvx230OHBRTSTy66nv7FANf",
	"3fIXLggW0+jtY+u7MePXuVsbtD3VqeH/793/Ov71JPlfmvzxIPn6P47ef3jy8d79zo+PPn7zzf/X/Onx",
	"x2/u/df/je2Uhz2WNOQgP33uVNrT56i31M6bDuw3ZrhfMp5EiSwMw2jRFrmLCbKOgO41rVp6Ae+4XnND",
	"SCuas8zwlsuQQ/uG6ZxFezpaVNPYiJYVy691T23gClyGRJhMizVeWorqBiTG0/PQm+gy7vC8zEput9JL",
	"3zb7xAeGidm4SsG01VmOCebnLaiPanR/Pnr61Whc59VVz0fjkXv6PkLJLFvHsiczWMeUPHdA8GDcUaSg",
	"GwU6zj0Q9mgMnA3KCIddwnIKUi1YcfOcQmk2jXM4H9PvjEVrfsptsL05P+ib3DiXh5jdPNxaAmRQ6EWs",
	"akNDUMO36t0EaMWLFFKsgI8Jm8CkbazJjL7oovFyoDOsHoDapxiiDVXnwBKap4oA6+FCBllEYvSDIo/j",
	"1h/HI3f5q4OrQ27gGFztOStHpP9bC3Ln+xdn5MgxTHXHJvLaoYPUy4gq7bKLGpFEhpvZWjVWyHvH3/Hn",
	"MGOcmefH73hGNT2aUsVSdVQqkN/SnPIUJnNBjn3C0nOq6TvekbR6y0kFqWKkKKc5S8l5qJDU5GlLhHRH",
	"ePfuV5rPxbt37ztBFV31wU0V5S92gsQIwqLUiStwkEi4oDLmtFJVgjuObCuYbJvVCtmitJZNX0DBjR/n",
	"ebQoVDvRtbv8osjN8gMyVC6N02wZUVpIL4sYAcVCg/v7SriLQdILb1cpFSjy+5IWvzKu35PkXfngwWMg",
	"jczP392Vb2hyU8Bg60pvIm7bqIILt2olrLWkSUHnMd/Yu3e/aqAF7j7Ky0u0ceQ5wc8aGac+oh6Hqhfg",
	"8dG/ARaOvbPncHFv7Ve+mFV8CfgItxDfMeJG7bG/7H4FOaiX3q5WHmtnl0q9SMzZjq5KGRL3O1PVuJkb",
	"IcuHUSg2R23VlQOaAkkXkJ67Oi2wLPRm3PjcR+o4QdOzDqZsBR+bQYY1JNCzMAVSFhl1ojjlm3YyvwKt",
	"fTzwGziHzZmoS1Dsk73fTCZXfQcVKTWQLg2xhsfWjdHefBcOhop9UficbEzO82RxXNGF/6b/IFuR9wCH",
	"OEYUjWTnPkRQGUGEJf4eFFxioWa8K5F+bHlGy5jamy9SzcfzfuJeqZUnF7kVrgat7vb5ErAcmLhQZEqN",
	"3C5cJSubMB1wsVLROfRIyKFzZ2BacsMhhIPsuveiN52YtS+0zn0TBdm+nJg1RykFzBNDKqjMtOL1/EzW",
	"f+g8E1ig0iFsmqOYVAU2WqZDZcPJZivu9YEWJ2CQvBY4PBhNjISSzYIqX2QLa5H5szxIBrjGAgDbyr6c",
	"BqFmQcGxqqiL57ntc9rRLl3xF1/xxZd5CVXLASVbjISP0e2x7RAcBaAMcpjbhduXPaHUxQjqDTJw/DSb",
	"5YwDSWJRa4EZNLhm3Bxg5OP7hFgLPBk8QoyMA7DRL44Dk1ciPJt8vg+Q3BVToH5s9KgHf0M878vGcRuR",
	"RxSGhbMer1bqOQB1oY7V/dUKuMVhCONjYtjciuaGzTmNrx6kU30ExdZWrREXmXGvT5zd4gCxF8tea7JX",
	"0WVWE8pMHui4QLcF4qlYJzbxMyrxTtdTQ+/R0HZMQ40dTFvn5Y4iU7HGaB+8Wmwo9Q5Y+uHwYAQa/pop",
	"pFf8ru82t8Bsm3a7NBWjQoUk48x5Fbn0iRNDpu6RYPrI5W5QuuVSALSMHXUdZKf87lRSm+JJ9zKvb7Vx",
	"XZLMZw3Fjn/fEYruUg/+ulaYqtjK67bEErVTNINWmnVmAhEyRvSGTXSdNF1XkIIcUClIGkJUch7znBrd",
	"BvDGees/C4wXWM2G8s29IBJKwpwpDbUR3cdJfArzJMUiekLM+lenCzkz63sjRHVNWTcifthY5o2vAEOJ",
	"Z0wqnaAHIroE89J3CpXq78yrcVmpGWtlS86yLM4bcNpz2CQZy8s4vbp5f3hupn1VsURVTpHfMm4DVqZY",
	"Ijkagbllahuku3XBL+2CX9KDrXfYaTCvmomlIZfmHF/IuWhx3m3sIEKAMeLo7lovSrcwyCBztssdA7kp",
	"8PFPtllfO4cp82PvjNrx+bt9d5QdKbqWwGCwdRUM3URGLGE6qDDcTWntOQO0KFi2btlC7ai9GjPdy+Dh",
	"67K1sIC76wbbgYHA7hnLqpGgmiX4agHf1opuVMCZDMLMWbNQXsgQwqmY8p0Ouoiqsu524eoMaP4DbH4x",
	"7+JyRh/Ho6uZTmO4diPuwPXranujeEbXvDWlNTwhe6KcFoUUK5onzsDcR5pSrBxp4uveHn3DrC5uxjx7",
	"cfLytQP/43iU5kBlUokKvavC94ovZlW22l/PAfGV1I3O52V2K0oGm1+VKAuN0hcLcCWpA2m0UzuzdjgE",
	"R9EZqWfxCKGdJmfnG7FL3OIjgaJykdTmO+shaXpF6Iqy3NvNPLQ90Ty4uGEFWKNcIRzgyt6VwEmWHJTd",
	"dE53/HTU1LWDJ4VzbSmavbR14RURvO1Cx5jnTeG87kuKlS+tVaTLnHi5REtConKWxm2sfKoMcXDrOzMv",
	"E3y5Rxg1I5asxxXLSxaMZV4bUtumBWQwRxSZKlpep8bdVLiePyVn/y6BsAy4No8knsrWQcUyKc7a3r1O",
	"jezQncsNbC309fBXkTHCqq/tGw+B2C5ghJ66DrjPK5XZL7SySJkfApfEHg7/cMbOlbjFWe/ow1GzDV5c",
	"ND1uYYueLv8zhGFrte/uD+SVV1d+tmeOaL8fppKZFH9AXM9D9TiSsOTr3DKMcvkDwkSHsMtFg8VU1p26",
	"bVE9e+9290k3oRWqGaTQQ/W484FbDgtuegs15XarbSJJI9YtTjBhVOmRHb8mGAdzJxI3pxdTGqtGaoQM",
	"A9NJ7QBu2NK1IP5jj3tVZVvY2UngS67eZTYZvQBZ5xJ2C9tcUmCw0w4WFWrJAKk2lAnG1v+XKxEZpuQX",
	"lNsuLuY7e5Tc1wqs8ct8dSEklpJQcbN/Bilb0jwuOWRp18SbsTmzDUpKBUEHDDeQbf5kqch1EalyiBxq",
	"TmfkwThow+N2I2Mrptg0B3zjoX1jShVy8soQVX1ilgdcLxS+/mjA64uSZxIyvVAWsUqQSqhD9aZyXk1B",
	"XwBw8gDfe/g1uYtuO8VWcM9g0d3Po+OHX6PR1f7xIHYBuAYz27hJhuzkH46dxOkY/ZZ2DMO43aiTaNa9",
	"7TDXz7i2nCb76ZCzhG86Xrf7LC0pp3OIR4osd8Bkv8XdRENaCy88s+2RlJZiQ5iOzw+aGv7UE31u2J8F",
	"g6RiuWR66Zw7SiwNPdXtLeykfjjba8lVJvZw+YfoIy28i6ilRN6s0dTeb7FVoyf7FV1CE61jQm39kJzV",
	"0Qu+Xjo59eWJsFRzVaHZ4sbMZZaOYg4GM8xIIRnXqFiUepb8jaQLKmlq2N+kD9xk+tWTSHnqZplUvh/g",
	"N453CQrkKo562UP2XoZw35K7XPBkaThKdq/O9ghOZa8zN+626/Mdbh96qFBmRkl6ya1skBsNOPWVCI9v",
	"GfCKpFitZy963HtlN06ZpYyTBy3NDv385qWTMpZCxmoO1sfdSRwStGSwwti9+CaZMa+4FzIftAtXgf7T",
	"eh68yBmIZf4sxxSBb0VEO/Ul0ytLuotVj1gH+o6peWDIYOqGGpNmeeqb56OHiYKKe7q8Ybvr2DJPPB7w",
	"jzYiPjG54AbWvny7kh5CCcrzR0kmq54HPnZKvhXroYTTOoWeeD4DFEVRUrI8+6XO/Gx1P5CUp4uoz2xq",
	"Pvyt7tNWLc7egdHygQvKOeTR4ay8+ZuXSyOS87/E0HmWjA98t92QwS63tbga8CaYHig/oUEv07mZIMRq",
	"M6muCtrO5yIjOE9dq64+rt1GHkG59X+XoHQsQQkf2MAxtI0admCrfRPgGWqkE/K9bcW8ANIoRISaoK8U",
	"0cyaLotc0GyMFSzOXpy8JHZW+43tNmSrjc9REWquomUTC8pwDgtB9o2D4ukRw8fZHq9tVq10UhUHjyWg",
	"mjfq8uWs5SdAFSnEzoQ8D5qq2lxVMwTBAiZyabS6ajQrHyFNmP9oTdMFqn0N1tpP8sPL5HuqVEFryqrF",
	"VFWbEs+dgdtVyreF8sdEGN38ginbgRdW0Mx5rRLAndnB58A2lydLzi2lTPa45apKlPui3QNnr0jvSohC",
	"1kL8nkK/7TKxb9eAt/hVtFRWuwVBpyelzaCsWgf5zuop5YKzFAtVxa5o16p3iJ9tQE2vtiHXH3F3QiOH",
	"K9r4oArFc1jsbYXgGaFDXNfQHzw1m2qpw/6psSfsgmoyB60cZ4Ns7Pt3OFsj4wpcrVFs7BzwSSEbvkvk",
	"kFF3eFK5TfYkI0y96VEevzPPXjnTAsaknzOOSoRDmxP8rDUQO4lqo3kwTeYClFtPM/9Y/Wq+mWAqbgbr",
	"9xPfeRTHsK4/s2zr5+4OdeK93s7LbN59Zt51BZKqnxtRznbSk6Jwk/Z3d4nKA3rNexEc8V4m3n0UILca",
	"PxxtC7ltDVfB+9QQGqzQ2Q0F3sMdwqg6nbS6aBmh1VIUvkFsmFi0SgLjETBeMg51X9zIBZFGrwTcGDyv",
	"Pd+pVFJtRcBBPO0MaI4e7hhDU9q5N646VLs8lEEJrtHP0b+NdZOWHsZRvVALbpRvqna8hroDYeIZ9gF3",
	"iOy2XEGpyglRGWYttJqwxBiHYdy+zVPzAugeg65MZD/HWmn73kR9iajTMpuDTmiWxUq/fotPCT4lWYmS",
	"A6whLasSoUVBUqy70ixE06U2N1EquCqXW+byL1xxuqCrUYQaws5Kfocx0WW6wX9j9TH7d8YFeuwdauij",
	"OrL9qi91QydjUq+h6USxeTIcE3inXB0d9dSXI/T6+4NSei7mTUBuuPzENi4X7lGMv70wF0dYnaFT9NVe",
	"LVXxBAzsE74XJaqNVdpvkyvhVdapAosOparX3XYDRH/XujFefj3hvUHRDWrvV+uh7AvyTXtj0ql22XGa",
	"kq0sqDfjyEYI2dwihCJune2LCrJBQeZx5+thkmFHztbxwocBQn24WRegH3wsKykoc+73mll0Meui3rt5",
	"CEPiYesNbi/CxZL3Wux+WPXFfftibPi83dXqHFzKfCFhxUTpHds+8smrhPbXRo+oKvI+uv6u4RWn+rTm",
	"0F7j7ZnrLmCX6XTyH36xcXIEuJabz8CU29n0Tr+srrRrzVP1K6QqTD2oUHXjVhxSqDBWE8/Jho2OXTv6",
	"jXXI6vkQcaDbP2w8Os32ujBjdRVHdpTYsYt3A+svO1WXmsIjVgjF6vrwsTZhA0MMz7DTV1A2qzuWj+9Z",
	"QaqxKUAdtyAB9imiZSYLGo/elp/qUaerSExXdWpbqaluJ4Add3wnGyzIaLRV1CfDCyudVNFpyKexGvIc",
	"uOv92czzGBxtPptBqtlqR/bdPxbAg8yusbfL2B7eQTIeq6KXsXjL/lbHGqBtyXFb4QmKKF4ZnL7cm3PY",
	"3FGkQQ3Rsu5jf9Vepm4HYgC5Q2JIRKhY9Ic1JDuHPFMVZSAWfLSV/RzqCmi9HaGCXNJLzuVJ0lwcdX7p",
	"linjLWkGzWU+3SvrGgNx+xL0uh0t+vWP59hARFXdGn3dj1BLJ6fd6ogXrm4I5kpWvhNfQQSU/80nRttZ",
	"cnYOYc8q9FRdUJn5N6KmF2/VSbbcR52sOt+NoQ30rJqZ1bGx3TyqSL0tjIBOc2HEiKQvjLwZjlrFctxR",
	"NujGln/HQFsD1wyk6+2H8m8uFCRa+FjabXBsQ4WNLLoUElRvjUsLXG/lmTd1aR2s9Uux0gx1AUXhAomE",
	"JTXQyaAATv+c25D9zD73iUO+1utOC1NFr7ubDvioaKY6SAypfkbcbbk7IekyxibGue0frWLVcDjIpjek",
	"kCIrU3tBhwejMsgNrjW1hZVE7TRpd5UtHSHI6jyHzZFVgny3Br+DIdBWcrKgB1UUWpt8UPObisE9Pwh4",
	"n9JyNR4VQuRJj7PjtFvCp03x5yw9h4yYm8JHD/Z00CF30cZeebMvFhtfsqYogEN2b0LICbfx2t6x3awh",
	"3Zqc39Hb5l/jrFlpq2o5o9rkHY8HvmK9K3lFbuaH2c7DFBhWd8Wp7CA7CsSse8oHSXoR6Sc1GaqVd13N",
	"7R4/NVFZKGIySd2+ZkecTBUiU3f+qMNkutJBnouLBKkoqep/xXQO816TSfqKp/VnBttTCOJtqHIX6IYs",
	"aEZSISWk4RfxFAcL1FJISHKB4Tcxz+BMG3loiXHNnORiTkRh1FxbRs/7UKJtaTpzlZxTvM4giHaIYYCm",
	"KapegrhPSPXJ0BkP1fTHJgjbNSfWxdRTggGUSwh2CLIvd+Hd0ndn/54+Z4uIpQgx5+lj78Y9jsT37rcR",
	"gDngaO22kp3E+hI119XukNXXr06LJUvj6P6y4mN6o1pi1BtDhSt5a1Pu8DVkKSEXq9yheHq6aAZOp3nM",
	"R0Tc8XNuIaRz81+8M9vjkhk4dtbDQSMpn9tWHes1FdnVairXCstncfZQSNTFvt2jbfsPTof6tasa1wOZ",
	"QQBAv6e7AcMgf/e+YMywn2dCI0g+rbSMcaPdMmtxPF9/0J7slForwwKIGbuU4LIKbePBVqejguqFlzrM",
	"611bgNErQWHKn23XQpW1XHkLmut62BbnRJHksIJGAIBLdSzxVmIrCDsm2o9JBlCgPbmt5cQ82yFvb4m+",
	"bu1J4Bsdgt2oLGwRa3eK7BB0o2L5mif2mKihR8lAtGJZSRv4U1foHdfXNi5y+XhY3w/jFHszifjitrGI",
	"nbEoSPPRc8njoShhpm1lxMLZssrYbYmwPtmqoBe8X+nrEmUtOw3vuhgg9sUaUryHmrEWV8cJwcGIamXR",
	"9wpNstrhyxoPeqlsG5F1elBGpTYFvodwWPDGi9ru24i0a82cTEUGYKrmDRi5CXVkYPDakm5IxmYzkNaR",
	"ozTlGZVZ+DrjJAWpKTNa7UZdXqUx0MoSxju1GsOpcVDPrGL6DdokLSD5xqmLV9Q4KgDxC3UY3WOAzoAe",
	"w4i+YEUGLfpac3ZgiKex0LXR6jCer4cAXQI+6nSWUQiO4i1Z0nPYcx7F/oDt02BZHGdz1gJnHTLFx63n",
	"7CdEHTKbnznTW0+aFTvbAZbWA2YPgqd/Pq/d8HZzuvQfi4k9sw2iwrjYdr8Fv9fWHGfng576kY5vJ8jP",
	"1RYHN6igM1TqDJRdUaRzEVhgxi5eeC9JpW1cSXcwxOj10HMmmnqCmCF14qbYSxGjJKqrYNyO32lef9W2",
	"Y6/TtJQowF3Qze4ydPUVGA99tiN7VcpHdFRQu622BKZs+4xolbd9RKMIzcc6SHTrax1+MTamv/Y6Xt9y",
	"nF8hvoCwH/12equVCE8qEVqjfBM7Ot5yfokF9klGA6JSD7ZV1Wm5jg2KsujLlV0dBFo3QjGCzaBP8vag",
	"kbAqc53uLW2gKzqZvS7W5hc/1jrasI7N/oMd4IWxREHPZu/WceB84rzpHyukBEt530cJjeXvCk9yC6yV",
	"2mCLnJyoNdga+TbXrrkvQeyZelaFdPW1F29HfmEJZiMc5HkkYsyKrrahb0A45p6UK5rffNQX1uY+QXxA",
	"9qbfTxyGDYVItqhUl0tafEkHzR2ECB1uav4ao9T+AWaPoteCG8ppyx3mj4oHza1PY+a7e66Akwsc04a4",
	"P/yKTF1Rl0JCylRbC7/wjbeqKBnsQ+kSRdd6R1jOrnX+IvQVyHjmjVrkVd3EB43oc15DWB/RT8xUek5u",
	"lMpj1Nchiwj+YjwqrK6647o4b8S+11JdcKMJCQeOgQ+y2faMge/WjR26PBvnbS6dUkF3nYNv6wZuIxd1",
	"vbahCRxd5G7r9DIk7yLewMl8jokfFiHY/YwgqOT3h78TCTNsbyzI/fs4wf37Y/fq74+aj81xvn8/quTd",
	"WMqHxZEbw80bo5hf+ooA2ET3nnoTrf0oWZ7tIoxG9ZC6QTjWx/jN1Sj6JC3Kf7NhqN2j6trEXiF23iIm",
	"stbG5MFUQV2QASVB3GeRAiAY4pGWkukNlk72Gi/7LZqc8n0V6OwC5Svzobv7tDiHqvh2HRZdKn+7fi9o",
	"jveRtWpycwuJfEJerOmyyMEdlG/uTP8THv/tSfbg8cP/nP7twdMHKTx5+vWDB/TrJ/Th148fwqO/PX3y",
	"AB7Ovvp6+ih79OTR9MmjJ189/Tp9/OTh9MlXX//nHcOHDMgW0JEv1Df6H+zjn5y8Pk3ODLA1TmjBfoCN",
	"bRlsyNg3I6YpnkRYUpaPjv1P/48/YZNULOvh/a8jVwdstNC6UMdHRxcXF5Pwk6M5xkEmWpTp4sjP0+lW",
	"fPL6tHJ/WocD7qgtoeEdSZ4UTvDZmxdvz8jJ69NJTTCj49GDyYPJQzO+KIDTgo2OR4/xJzw9C9z3I0ds",
	"o+MPH8ejowXQHNMGzB9L0JKl/pEEmm3c/9UFnc9BTlyHZvPT6tGRFyuOPrh40I9mhqjJ01aPCUqGdBsX",
	"u9hytNzY6jCNRoDK9aUbV+0hnV+LZ1jUw4ZYGjZXIe40q/sgndZMy1eDtu0xjn+N5Oh457gvUtxoHu0c",
	"6UyR/3770ysiJHHqzWuanleBAeR0Zit7SrFiWCsiCwqMmC8nnn7/XYLc1PTlOF/Y+sF3+3MRBks1L5rp",
	"6rVUFTOSxJpE48yGLALCrqK3a8aFBvKwtX7Fhg1rfZB8/f7D0799HA0ABFMJFGBh0N9pnv9OLhj2GkZX",
	"li+t7UqnjiOd7VCaHtfRwPhBvZNjNOBUT8PmxdU7zSovv3PB4fe+bXCARfeB5rl5UXCI7cF7LF2JxIJn",
	"7tGDBwfrel4VNrIBAdUoniQuMVCXIdlHVff0C0kLexZ983OMgXOGVfsS9np/csCFNtOSr7zc9nCdRX9L",
	"M2woC0rbpTz8YpdyyjGbx1wQxF6AH8ejp1/w3pxyw3NoTvDNoC5096L5mZ9zccH9m0b4KZdLKjco2gRd",
	"r1tF0+hcoTcDWaQ9240+t6P3H3tvvaOwjefRh0ZCSHalO7HTwfj0+Y5r8o7q45zdriqtLqHmedUEEl1D",
	"rhUqtqVU9ybk+/Br5N5YpNSWAC0lh8znc/hbr6q67mu517DdUWH91uilHZiLb+/vT31/nzSNHY3OHTFg",
	"GqdgK0wdx+9VL9BuVE6Q+LFHyb+g31izR/0lup5dazPqlq5pZ3ofUwV3Mupb3PXgrk9MCuCtJKZmn9Xr",
	"Z82+fkB1kzSujGtk3F+40PcjzQ2dBMtt1emz7WxuhcG/jDBY5RnPrXTmOrhdTTzEXs5HH3yLogOIhK5F",
	"0wBhMFSrg2+DoMC7LXZyb2L7DYXvXI5nuMTinWIeNo66FfA+AwGv25QtBkbdauvTCXUIw6Lu2razQZzv",
	"txZKI74b3uDucl+oFPcXRlav2GYg3S2wXYJ9doQxx6yvja3+KYUwh7Rb8esvLX5V5T6uJIA12iq6AjKB",
	"G+tK1ru2dY7pShJrlnwJOBtm7xiG4o7wuA4ONizGRte6uFo19pohulOt0mg3a9zRG7si1vcQKqjfbk6f",
	"75KuviA7z+DODZFbIL43181Lo26HNzfjdhjGm548eHJzEIS78Epo8h3e4tfMIa+VpcXJal8Wto0jHU1t",
	"36ptXIm32BIyirofVcCjqlpX4+C5edtGadzFVKRmrc97E+K7ZKmq56fLIZ4Lw6h8AgaVc/uR4XUGGeSO",
	"//MYx78zId9hwopWYww2064hJLnDuD5++OjxE/eKpBc2lqv93vSrJ8cn33zjXqt7olk9p/O60vJ4AXku",
	"3AfujuiOax4c/88//3cymdzZyVbF+tvNK9sc4HPhreNYkn5FAH279YVvUkxb922+dqHuRtz334p19BYQ",
	"69tb6JPdQgb7f4rbZ9okI6eIVpbMRvnAA95G9pjscx+Nff8vw3eqy2RCXglXybXMqSRCZiBdk+R5SSXl",
	"GiCbeErF+gbKVq5Mc4Y5lpJg21eZKJZBXeakyq4uJKwwRh6nR52+AcFuRo+RtJ8tk/+RroPqjtPqmtbC",
	"LRnNnku69o2nsbWqkPjTN9+QB+Nae8lzM0BSISbGXJd0PbpBq19FbIPiz5t9G3cG6OLYQyxItfRTlWsI",
	"m8T9tTn3Fyu5W3J3G3sgzrm346d27IR2BFcvdasFwQp2ti019kne1IVfjJTnRag4izMzDDUOfMY+gp2m",
	"6agS2kbv7SG+NQJciZW0CWpPtoFZp+roA+rlIc/onFvMmvtruUsD35EUS+88EmQGOl24hN0W6iPsyXeN",
	"7OdNS8bZ0kD5YHztUg3uYrcoUtiuIqM2TX5IRdQglxIdeCAjRPyTb+BkHrOZrWXmKx6euSr/6JpiviN9",
	"1YzezkRcJSItqrxes4t7QfmsnrwrkCFaDuH/vEXwfgjuMMcXvis5Yswt4s8Q8e9VyYS8EnXauGuI+Wd0",
	"PV7nzX7dC3olOFgfu5F8LS3eulMrscMwDosUXy/E6i9Va7JLiyBHvr/+Vjnk77a7/VZZZMjtbSb7Iq/w",
	"vzssbbllzNomO4sh1KMNYc7mRVsksdks6xNqMZ+En36Gqs2n4Fg3w2LwkHo+48QCflimgyV4LDEfVX2S",
	"+jhQvPXcYG6kRRWGFu0WN4Vc8Ln6PFnR1iaAUbxEqKRqyhfvvPfXO7vPsLqPUXltBKSr96QYT4EosQTb",
	"+pYpsmRKuWDJJw/+dnMQarb0zUZ4mLv6ibnL0wePb276tyBXLAVyBstCSCpZviE/c7qiLMda9VfgdthX",
	"sKq/5q3B0VaS6G1q1gVLwyJGl2eCjdC1D3rNso+7mWFQd3BPPsh4wAfDCrS0KIDKyzPA3a6rdj+L0+dh",
	"dHCj3V1VUSsCikHRngHy/zEaaHfCtHcxc5dfyS2gvvqXYxMudFfMxlVwjJECxOyYvOP3iVrQpw8f/fbo",
	"6Vf+z0dPv+qxnJl5XNGeru2sHsg8tsMMMaB90ebAw0rtFX6Pb3q399vE8Yhl62hDrLrFbae/ghPL7ihS",
	"0E1v17xiR4vecNi6Xe/NFztUmk0XUf3Kqz9V35ZT/m2lBduKfK6z7W1r3p7kiYDPGEKre/RWWN/erneL",
	"NNkiy6ov6k0rp3WSgb3oPPJk6875pIKu/lRKaoI6KnAv2DTR8ulkSmzaNg7c3YUUWqQit7ErZVEIqavT",
	"rSaDxD3oc9s1pL0+wt1LmEupThdlcfQB/4MVvj7WiQdY+1gd6TU/wgL/Rx+2hgggiJGu8VYujXbv6arJ",
	"A5rW7woBaJ2YcfsQ2WYFGEsQkc+uRzr7Sws1W/X/1oZf3aQdGbFzgKu8uqBAf0W7QeFvnypnGy5ESPjW",
	"BfN5Lag2iswYzwgNtrGluwlZM4JrNoxc96I/hZ3l5v1OT7/gc/ZKaHK6LGxvNsiuFr1D2hzO3x5br9v9",
	"BAN39XdDfLp3fnjj+8DEyrq+84LfwyEXpGKDn45KzI02d/X12L5vb/LP+yZ/5ksON8jw9l7+cu5l6cMp",
	"b6/gz/8KfvzFruYaHTEDr2R/E136Gq418T0v5EgbbjQZtFzh2/w0qHq3V6m+E9K3t7i9xb9QJ4PdycFJ",
	"S0MsNLtSmdyUhwid/aygH2ZnyPOIpaHvoI5trx+9AIZFZ0TKsH74aabG9hA744Q7xbeCz2ct+AR7fSv3",
	"3JoevjDTQ4+U47T+Zj/wPkFjXwFotRQZ+KgTMZu5Im990k+z94whT6XpsiD2y6iUg97YM7aEt+bNn+wU",
	"B71ia7BbYlELPIMsBangmRrgFXWjXvYeQjduPwA37gGtdsDD4tK/J5cm2TdBDZkOJZA28hX2DPLF7hwy",
	"MliRpeuyfFWyPfpg/0VzWiFUrMG/J+DOxtx122Kr99lxGwCS1yiEumbE7isxIw9sEb+SY6ZO3RyQ8oxo",
	"ucFu4q5miQSak7QRoV/B0T05b3tPzk5VoLO6njXFdQFRn9BDhrO2sqN+uPED8IxyR/JdBGlBKOEwp5qt",
	"wMetT24z6i99m7l89i0McExoltnTWG8CrEBuiCqnysg6vBloeUc1z8seDAPWBUhmrmia1w54qyYc2XT5",
	"bQGVb+0bV7y0WrzIJunLZhSQv1ldCr+YkR9ZKsVJPhfKx3WpjdKw7LTec5/+1lN01RsSujFggueMQ7IU",
	"PNYQ7id8+iM+jH2NJQf6Pj4zD/u+bd23TfhbYDXnGXInXxW/n8npv1KuRmu1EgohjXY7tU1qLf3veZT8",
	"odnwtHuSNjwNnFruYTBQ2D6u8fPRh8afrliGe1MtSp2Ji+Bb1Oxt0M+QPPmgUfUlLGmths/qem1p1+lD",
	"CvAQOzHV00jrr6AdeW/3r79ofohzuYRE4lr0r0Cqlnp2myTyp0oSGbzve/FY2+pyF0cr1WElklciAztu",
	"s9NsrD4zFxm4jpxdQaQKdowH1vtbqX6vFeqc0nK+0KQsiBaxoOr6w4SmlskmVr2JTxhURLNKEE63oCsg",
	"NMc+p2QKwImYmkXX9yMukiqsSecjs11IZ1QUCuAqpEhBKcgSX496F2hVn1OM49Zb8ISAI8DVLEQJMqPy",
	"ysCer3bCWfUJV+TuD78YhfnG4bWi4HbE2kpYEfRW1TactNeFetj02wiuPXlIdlQC8aIBJpKIZZGDSyWJ",
	"oHAvnPTuXxuizi5eHS2Ya8GumeL9JFcjoArUa6b3q0JbFom5v7sgPrNPz9gSJTFOufB2xdhgOVU62cWW",
	"zUvhWpRZQcAJY5wYB+5ROF9Spd+4rMIMK9DY6wTnsTK2maIf4FVfP3oz8i9VN/rO2Km5D7kqVdWy3mUK",
	"QBZbA4f1lrlewbqaC9M6/dhVKoK18O0auQ9LwfgOWUFRbkJ14M03w0UWh/ZH6gwUXVQ2gKgRsQ2Qt/6t",
	"ALuhG78HEKZqRFvCwSKjIeVMhciBcpvRJYrCcAudlLz6rg9Nb+3bJ/rn+t0ucVFd39uZABWmiTjILyxm",
	"FRpoF1QRBwdZ0nOXSTJ3TZa6MJvDmGAGeLKN8tFka94Kj8DOQ1oWc0kzSDLIacSU8rN9TOzjbQPgjnvy",
	"TFZCQzKFmZAQ3/SakmWviagaWuB4KiY8EnxCUnMEjfJcE4j7esfIGeDYMebk6OhONRTOFd0iPx4u2251",
	"j1nKjGF23NEDguw4+hCAe/BQDX15VODHSW0+aE/xT1BugkqO2H+SDai+JdTj77WAtjkvvMAaN0WLvbc4",
	"cJRt9rKxHXyk78jGDIhfpLG/Hbt0jdVfmgbUQAGcXEa5PbqgTCczIa0gndCZBrkzIP4flHl3uHMNaOFq",
	"ExAcwd2bbhxk8mGrC8dFLAjEXReGRLr+NzPVd0IOKrHZLCRDmSYl1ywPyoxXqvLnZzC8NQLcGgFujQC3",
	"RoBbI8CtEeDWCHBrBLg1AtwaAW6NALdGgL+uEeBTFc1NvMThS4lxwZN2VCK5jUr8UxWZrO4qb5RAM8YF",
	"Zdp1zfT5/u7J1WrsaqA54oDl0B8nbcM3z16cvCRKlDIFkhoIGSdFTo1uAGtd9XBrdgf1fYttI0jbeJQq",
	"ePyIvP37ia+Ft3A125rv3j1x/b+V3uRwz3VJAJ5ZUdS3SwBukO66JVB/J/heb67zHcsxxlyRF/j2c1hB",
	"LgqQtswW0bKMmHzOgObPHG52WHz+YSZ3Qau/m9F+HzcMTQ5tS1p4Od+vlSpCbe4ieR5kM/4+o7mC3/sS",
	"Gu14S1rE2q1VN5+1BSE3+VZkm9YJMbt2hBvYPBt1RTzGqdxE6i11kwnapKGF4VeOsLrGrI8Hr9vYJdou",
	"me2isJi4LkFFz/E2Ko8WLKw2rDOUTXmdtehkFMvWbFfpG1UADgmBPcOEA7sn5I397tNWhUeI3BGrmfln",
	"EznYfLNiGviu0SIc6/lSo/I94qOnF8/+2BB2VqZAmFbEl37cfb2MR+vEjDQHnjgGlExFtkka7GvUuIUy",
	"pqhSsJzuvolC/ukaDLvLxzzZfk99mmvkebC4bTw5JJp14hhwD3feaBjMmyts4YiOPQcYv24W3cdGQxCI",
	"408xq1KL9+3L9OppNreM75bxBaexJREw7krltpnI5BoZn9zIkvfzvBdrSEsDXHiS76J5Hn1ysNYNx2YG",
	"03I+x0bJHSedWRrgeEzwT8QK7XKHcsH9KMgOXjXPvGq6d3u4LncJMrDv+hqH93A7KN+gN2NZUL7xPl9I",
	"FFuWucWh7TF3WEZrq9l2IwHQH+uMf31m7dfe5hcYb91V2/zdooVcUEXs/kJGSp653KFOzes1H14xxA59",
	"tuY1m95aHcSuN7I6N++QK8LvcjNpW5ECZKLX3B6oZid1W1vbntzJbYPYv8a1YVO+oYfBdutE1wzhQLeH",
	"DPgaXh9BN5A6Ga7RIwStFv2pI2FrEPvmQaNHOsM3g0hqk4pzkkJeEOq796eCKy3LVL/jFJ00wcIm3QAT",
	"b43u52/P/CtxP2HEjeeGescpNnevXDdRPjeDiJ/iOwDPRlU5n4MyvDIkkhnAO+7eYpyU3GhaYkaWLJUi",
	"sYmo5gwZ+WRi31zSDZlh/Q9B/gApyNTc7MGuW4Ox0izPXUSLmYaI2TtONcmBKk1+ZIbLmuF88YEqlAv0",
	"hZDnFRbinSLmwEExlcSNL9/bp9iMwS3fG/nQYGkf10XUb7YLg4edZb2Qnz43cFOsXZwzpesgiA7sN+YA",
	"XzKeRInsbAHExYS1aYvcxYppjoDuNb1DegHvuLnhtCDI1am+HDm03Tyds2hPR4tqGhvR8gb5tQ5S8Q7C",
	"ZUiEydy6Vv5EqZkBHXj3JW68rUbf2vs93SiNKxd4Zp72XMj2qWve1fOSUxIahrBWORj3xlkD5D9v4/f3",
	"16MvejQeTGPsDthlV832TIg3v+FjQnPB57YKodEgBe4T40WpMbD6Oo10sKJ5IlYgJctADVwpE/zFiuY/",
	"VZ99HI9gDWmiJU0hsVaDoVg7M99YOt11kQZN6pZLyBjVkG9IISGFzNbbYorUyvbEViwg6YLyOd65UpTz",
	"hX3NjnMBEqp+Xka/bQ8Rr3ey5omtvdaF8YRYQ2VYnhZouoj0R8GbySjUnhJsOYkhKnOEFWBlzT4Nejzq",
	"lZANUld1YJtFTpM/DLj+Gxd5gJ964kOUIr2l1ltq/WTUGiv5h6ibtWwAFl/htlyzsei6C1zeoO3pk1S/",
	"vS0h/2cvIe85kCKUSNqQ+uO9y6giTJMLLPAzBWIunhJt3q7FudOQJ8QwpMC+bytBKtd5M11Qxl11mCpd",
	"AOHQrjuw9u0Ir8VcaJkZ2gkNOiAtJdMb1BNowX47B/P/90bQViBXXoUoZT46Hi20Lo6PjnKR0nwhlD4a",
	"fRyHz1Tr4fsK/g9e+i8kWxmN5uP7j/9/AAAA///BPxBR2X0BAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
