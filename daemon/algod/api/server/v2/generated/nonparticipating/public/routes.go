// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//2tb0t4kkQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
