// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round. Compared to '/v2/transactions/simulate', this endpoint provides additional configuration options for the simulation.
	// (POST /v2/transactions/simulate/extended)
	SimulateTransactionExtended(ctx echo.Context, params SimulateTransactionExtendedParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// SimulateTransactionExtended converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransactionExtended(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionExtendedParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransactionExtended(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)
	router.POST(baseURL+"/v2/transactions/simulate/extended", wrapper.SimulateTransactionExtended, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"SlIl2QU2SX3z7v8PAAD//w2Zu5EYXAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
