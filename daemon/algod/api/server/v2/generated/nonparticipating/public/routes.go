// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
