// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Returns OK if healthy and fully caught up.
	// (GET /v2/ready)
	GetReady(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetReady converts echo context to params.
func (w *ServerInterfaceWrapper) GetReady(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReady(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/ready", wrapper.GetReady, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//++RUohFTQBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
