// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
