// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "header-only" -------------

	err = runtime.BindQueryParameter("form", true, false, "header-only", ctx.QueryParams(), &params.HeaderOnly)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter header-only: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"6Ojd/w0AAP//rF4uf93AAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
