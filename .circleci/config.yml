version: 2.1

orbs:
  win: circleci/windows@2.3.0
  go: circleci/go@1.7.0
  slack: circleci/slack@4.4.2

executors:
  amd64_medium:
    machine:
      image: ubuntu-2004:202104-01
    resource_class: medium
  amd64_large:
    machine:
      image: ubuntu-2004:202104-01
    resource_class: large
  arm64_medium:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
  arm64_large:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.large
  mac_amd64_medium:
    macos:
      xcode: 12.0.1
    resource_class: medium
    environment:
      HOMEBREW_NO_AUTO_UPDATE: "true"
  mac_amd64_large:
    macos:
      xcode: 12.0.1
    resource_class: large
    environment:
      HOMEBREW_NO_AUTO_UPDATE: "true"

workflows:
  version: 2
  build_pr:
    jobs:
      - codegen_verification

      - build:
          name: << matrix.platform >>_build
          matrix: &matrix-default
            parameters:
              platform: ["amd64", "arm64", "mac_amd64"]

      - test:
          name: << matrix.platform >>_test
          matrix:
            <<: *matrix-default
          requires:
            - << matrix.platform >>_build
          filters: &filters-default
            branches:
              ignore:
                - /rel\/.*/
                - /hotfix\/.*/

      - test_nightly:
          name: << matrix.platform >>_test_nightly
          matrix:
            <<: *matrix-default
          requires:
            - << matrix.platform >>_build
          filters: &filters-nightly
            branches:
              only:
                - /rel\/.*/
                - /hotfix\/.*/
          context: slack-secrets

      - integration:
          name: << matrix.platform >>_integration
          matrix:
            <<: *matrix-default
          requires:
            - << matrix.platform >>_build
          filters:
            <<: *filters-default

      - integration_nightly:
          name: << matrix.platform >>_integration_nightly
          matrix:
            <<: *matrix-default
          requires:
            - << matrix.platform >>_build
          filters:
            <<: *filters-nightly
          context: slack-secrets

      - e2e_expect:
          name: << matrix.platform >>_e2e_expect
          matrix:
            <<: *matrix-default
          requires:
            - << matrix.platform >>_build
          filters:
            <<: *filters-default

      - e2e_expect_nightly:
          name: << matrix.platform >>_e2e_expect_nightly
          matrix:
            <<: *matrix-default
          requires:
            - << matrix.platform >>_build
          filters:
            <<: *filters-nightly
          context: slack-secrets

      - e2e_subs:
          name: << matrix.platform >>_e2e_subs
          matrix:
            <<: *matrix-default
          requires:
            - << matrix.platform >>_build
          filters:
            <<: *filters-default

      - e2e_subs_nightly:
          name: << matrix.platform >>_e2e_subs_nightly
          matrix:
            <<: *matrix-default
          requires:
            - << matrix.platform >>_build
          filters:
            <<: *filters-nightly
          context: slack-secrets

      - tests_verification_job:
          name: << matrix.platform >>_<< matrix.job_type >>_verification
          matrix:
            parameters:
              platform: ["amd64", "arm64", "mac_amd64"]
              job_type: ["test", "test_nightly", "integration", "integration_nightly", "e2e_expect", "e2e_expect_nightly"]
          requires:
            - << matrix.platform >>_<< matrix.job_type >>

      #- windows_x64_build

commands:
  prepare_go:
    description: Clean out existing Go so we can use our preferred version
    steps:
      - run: |
          sudo rm -rf ${HOME}/.go_workspace /usr/local/go
  prepare_build_dir:
    description: Set up build directory
    parameters:
      build_dir:
        type: string
        default: "/opt/cibuild"
    steps:
      - run:
          working_directory: /tmp
          command: |
            sudo mkdir -p << parameters.build_dir >>
            sudo chown -R $USER:$GROUP << parameters.build_dir >>
  prepare_windows:
    description: Prepare windows image
    steps:
      - run:
          name: install deps
          shell: bash.exe
          command: |
            choco install -y msys2 pacman make wget --force
            choco install -y golang --version=1.14.7 --force
            choco install -y python3 --version=3.7.3 --force
            export msys2='cmd //C RefreshEnv.cmd '
            export msys2+='& set MSYS=winsymlinks:nativestrict '
            export msys2+='& C:\\tools\\msys64\\msys2_shell.cmd -defterm -no-start'
            export mingw64="$msys2 -mingw64 -full-path -here -c "\"\$@"\" --"
            export msys2+=" -msys2 -c "\"\$@"\" --"
            $msys2 pacman --sync --noconfirm --needed mingw-w64-x86_64-toolchain mingw-w64-x86_64-libtool unzip autoconf automake

  generic_build:
    description: Run basic build and store in workspace for re-use by different architectures
    parameters:
      build_dir:
        type: string
        default: "/opt/cibuild"
    steps:
      - restore_libsodium
      - restore_cache:
          keys:
            - 'go-mod-1-14-7-v2-{{ arch }}-{{ checksum "go.mod" }}-{{ checksum "go.sum" }}'
      - restore_cache:
          keys:
            - 'go-cache-v2-{{ .Environment.CIRCLE_STAGE }}-'
      - run:
          name: scripts/travis/build.sh --make_debug
          command: |
            export PATH=$(echo "$PATH" | sed -e "s|:${HOME}/\.go_workspace/bin||g" | sed -e 's|:/usr/local/go/bin||g')
            export GOPATH="<< parameters.build_dir >>/go"
            export ALGORAND_DEADLOCK=enable
            export GIMME_INSTALL_DIR=<< parameters.build_dir >>
            export GIMME_ENV_PREFIX=<< parameters.build_dir >>/.gimme/envs
            export GIMME_VERSION_PREFIX=<< parameters.build_dir >>/.gimme/versions
            scripts/travis/build.sh --make_debug
      - cache_libsodium
      - save_cache:
          key: 'go-mod-1-14-7-v2-{{ arch }}-{{ checksum "go.mod" }}-{{ checksum "go.sum" }}'
          paths:
            - << parameters.build_dir >>/go/pkg/mod
      - save_cache:
          key: 'go-cache-v2-{{ .Environment.CIRCLE_STAGE }}-{{ .Environment.CIRCLE_BUILD_NUM }}'
          paths:
            - tmp/go-cache
      - persist_to_workspace:
          root: << parameters.build_dir >>
          paths:
            - project
            - go
            - gimme
            - .gimme

  cache_libsodium:
    description: Cache libsodium for build
    steps:
      - run:
          name: Get libsodium md5
          command: |
            mkdir -p tmp
            find crypto/libsodium-fork -type f -exec openssl md5 "{}" + > tmp/libsodium.md5
      - save_cache:
          key: 'libsodium-fork-v2-{{ .Environment.CIRCLE_STAGE }}-{{ checksum "tmp/libsodium.md5" }}'
          paths:
            - crypto/libs

  restore_libsodium:
    description: Restore libsodium for build
    steps:
      - run:
          name: Get libsodium md5
          command: |
            mkdir -p tmp
            find crypto/libsodium-fork -type f -exec openssl md5 "{}" + > tmp/libsodium.md5
      - restore_cache:
          keys:
            - 'libsodium-fork-v2-{{ .Environment.CIRCLE_STAGE }}-{{ checksum "tmp/libsodium.md5" }}'

  generic_test:
    description: Run build tests from build workspace, for re-use by diferent architectures
    parameters:
      build_dir:
        type: string
        default: "/opt/cibuild"
      result_subdir:
        type: string
      no_output_timeout:
        type: string
        default: 30m
      short_test_flag:
        type: string
        default: ""
      result_path:
        type: string
        default: "/tmp/results"
    steps:
      - attach_workspace:
          at: << parameters.build_dir >>
      - run: mkdir -p << parameters.result_path >>/<< parameters.result_subdir >>/$CIRCLE_NODE_INDEX
      - restore_cache:
          keys:
            - 'go-cache-v2-{{ .Environment.CIRCLE_STAGE }}-'
      - run:
          name: Run build tests
          no_output_timeout: << parameters.no_output_timeout >>
          command: |
            set -e
            set -x
            export PATH=$(echo "$PATH" | sed -e "s|:${HOME}/\.go_workspace/bin||g" | sed -e 's|:/usr/local/go/bin||g')
            export KMD_NOUSB=True
            export GOPATH="<< parameters.build_dir >>/go"
            export PATH="${PATH}:${GOPATH}/bin"
            export ALGORAND_DEADLOCK=enable
            export GIMME_ENV_PREFIX=<< parameters.build_dir >>/.gimme/envs
            export GIMME_VERSION_PREFIX=<< parameters.build_dir >>/.gimme/versions
            GOLANG_VERSION=$(./scripts/get_golang_version.sh)
            eval "$(<< parameters.build_dir >>/gimme "${GOLANG_VERSION}")"
            scripts/configure_dev.sh
            scripts/buildtools/install_buildtools.sh -o "gotest.tools/gotestsum"
            PACKAGES="$(go list ./... | grep -v /go-algorand/test/)"
            export PACKAGE_NAMES=$(echo $PACKAGES | tr -d '\n')
            export PARTITION_TOTAL=$CIRCLE_NODE_TOTAL
            export PARTITION_ID=$CIRCLE_NODE_INDEX
            export PARALLEL_FLAG="-p 1"
            gotestsum --format testname --junitfile << parameters.result_path >>/<< parameters.result_subdir >>/${CIRCLE_NODE_INDEX}/results.xml --jsonfile << parameters.result_path >>/<< parameters.result_subdir >>/${CIRCLE_NODE_INDEX}/testresults.json -- --tags "sqlite_unlock_notify sqlite_omit_load_extension" << parameters.short_test_flag >> -race -timeout 1h -coverprofile=coverage.txt -covermode=atomic -p 1 $PACKAGE_NAMES
      - store_artifacts:
          path: << parameters.result_path >>
          destination: test-results
      - store_test_results:
          path: << parameters.result_path >>
      - persist_to_workspace:
          root: << parameters.result_path >>
          paths:
            - << parameters.result_subdir >>
      - save_cache:
          key: 'go-cache-v2-{{ .Environment.CIRCLE_STAGE }}-{{ .Environment.CIRCLE_BUILD_NUM }}'
          paths:
            - tmp/go-cache

  upload_coverage:
    description: Collect coverage reports and upload them
    steps:
      - run:
          name: Upload Coverage Reports
          no_output_timeout: 10m
          command: |
            scripts/travis/upload_coverage.sh || true

  generic_integration:
    description: Run integration tests from build workspace, for re-use by diferent architectures
    parameters:
      build_dir:
        type: string
        default: "/opt/cibuild"
      result_subdir:
        type: string
      no_output_timeout:
        type: string
        default: 30m
      short_test_flag:
        type: string
        default: ""
      result_path:
        type: string
        default: "/tmp/results"
    steps:
      - attach_workspace:
          at: << parameters.build_dir >>
      - run: mkdir -p << parameters.result_path >>/<< parameters.result_subdir >>/$CIRCLE_NODE_INDEX
      - run:
          name: Run integration tests
          no_output_timeout: << parameters.no_output_timeout >>
          command: |
            set -x
            export PATH=$(echo "$PATH" | sed -e "s|:${HOME}/\.go_workspace/bin||g" | sed -e 's|:/usr/local/go/bin||g')
            export KMD_NOUSB=True
            export GOPATH="<< parameters.build_dir >>/go"
            export PATH="${PATH}:${GOPATH}/bin"
            export ALGORAND_DEADLOCK=enable
            export BUILD_TYPE=integration
            export GIMME_ENV_PREFIX=<< parameters.build_dir >>/.gimme/envs
            export GIMME_VERSION_PREFIX=<< parameters.build_dir >>/.gimme/versions
            GOLANG_VERSION=$(./scripts/get_golang_version.sh)
            eval "$(<< parameters.build_dir >>/gimme "${GOLANG_VERSION}")"
            scripts/configure_dev.sh
            scripts/buildtools/install_buildtools.sh -o "gotest.tools/gotestsum"
            export ALGOTEST=1
            export SHORTTEST=<< parameters.short_test_flag >>
            export TEST_RESULTS=<< parameters.result_path >>/<< parameters.result_subdir >>/$CIRCLE_NODE_INDEX
            export PARTITION_TOTAL=$CIRCLE_NODE_TOTAL
            export PARTITION_ID=$CIRCLE_NODE_INDEX
            test/scripts/run_integration_tests.sh
      - store_artifacts:
          path: << parameters.result_path >>
          destination: test-results
      - store_test_results:
          path: << parameters.result_path >>
      - persist_to_workspace:
          root: << parameters.result_path >>
          paths:
            - << parameters.result_subdir >>

  tests_verification_command:
    description: Check if all tests were run at least once and only once across all parallel runs
    parameters:
      result_path:
        type: string
        default: "/tmp/results"
      result_subdir:
        type: string
    steps:
      - attach_workspace:
          at: << parameters.result_path >>
      - run:
          name: Check if all tests were run
          command: |
            cat << parameters.result_path >>/<< parameters.result_subdir >>/**/testresults.json > << parameters.result_path >>/<< parameters.result_subdir >>/combined_testresults.json
            python3 scripts/buildtools/check_tests.py << parameters.result_path >>/<< parameters.result_subdir >>/combined_testresults.json
      - store_artifacts:
          path: << parameters.result_path >>/<< parameters.result_subdir >>
          destination: << parameters.result_subdir >>/combined-test-results

jobs:
  codegen_verification:
    executor: amd64_medium
    steps:
      - checkout
      - prepare_go
      - run: |
          export PATH=$(echo "$PATH" | sed -e 's|:/home/circleci/\.go_workspace/bin||g' | sed -e 's|:/usr/local/go/bin||g')
          export GOPATH="/home/circleci/go"
          scripts/travis/codegen_verification.sh

  build:
    parameters:
      platform:
        type: string
    executor: << parameters.platform >>_medium
    working_directory: /opt/cibuild/project
    steps:
      - prepare_build_dir
      - checkout
      - prepare_go
      - generic_build

  test:
    parameters:
      platform:
        type: string
    executor: << parameters.platform >>_large
    working_directory: /opt/cibuild/project
    parallelism: 4
    steps:
      - prepare_build_dir
      - prepare_go
      - generic_test:
          result_subdir: << parameters.platform >>_test
          short_test_flag: "-short"
      - upload_coverage

  test_nightly:
    parameters:
      platform:
        type: string
    executor: << parameters.platform >>_large
    working_directory: /opt/cibuild/project
    parallelism: 4
    steps:
      - prepare_build_dir
      - prepare_go
      - generic_test:
          result_subdir: << parameters.platform >>_test_nightly
          no_output_timeout: 45m
      - upload_coverage
      - slack/notify: &slack-fail-event
          event: fail
          template: basic_fail_1

  integration:
    parameters:
      platform:
        type: string
    executor: << parameters.platform >>_large
    working_directory: /opt/cibuild/project
    parallelism: 4
    environment:
      E2E_TEST_FILTER: "GO"
    steps:
      - prepare_build_dir
      - prepare_go
      - generic_integration:
          result_subdir: << parameters.platform >>_integration
          short_test_flag: "-short"

  integration_nightly:
    parameters:
      platform:
        type: string
    executor: << parameters.platform >>_large
    working_directory: /opt/cibuild/project
    parallelism: 4
    environment:
      E2E_TEST_FILTER: "GO"
    steps:
      - prepare_build_dir
      - prepare_go
      - generic_integration:
          result_subdir: << parameters.platform >>_integration_nightly
          no_output_timeout: 45m
      - slack/notify:
          <<: *slack-fail-event

  e2e_expect:
    parameters:
      platform:
        type: string
    executor: << parameters.platform >>_large
    working_directory: /opt/cibuild/project
    parallelism: 4
    environment:
      E2E_TEST_FILTER: "EXPECT"
    steps:
      - prepare_build_dir
      - prepare_go
      - generic_integration:
          result_subdir: << parameters.platform >>_e2e_expect
          short_test_flag: "-short"

  e2e_expect_nightly:
    parameters:
      platform:
        type: string
    executor: << parameters.platform >>_large
    working_directory: /opt/cibuild/project
    parallelism: 4
    environment:
      E2E_TEST_FILTER: "EXPECT"
    steps:
      - prepare_build_dir
      - prepare_go
      - generic_integration:
          result_subdir: << parameters.platform>>_e2e_expect_nightly
          no_output_timeout: 45m
      - slack/notify:
          <<: *slack-fail-event

  e2e_subs:
    parameters:
      platform:
        type: string
    executor: << parameters.platform >>_large
    working_directory: /opt/cibuild/project
    parallelism: 4
    environment:
      E2E_TEST_FILTER: "SCRIPTS"
    steps:
      - prepare_build_dir
      - prepare_go
      - generic_integration:
          result_subdir: << parameters.platform >>_e2e_subs
          short_test_flag: "-short"

  e2e_subs_nightly:
    parameters:
      platform:
        type: string
    executor: << parameters.platform >>_large
    working_directory: /opt/cibuild/project
    parallelism: 4
    environment:
      E2E_TEST_FILTER: "SCRIPTS"
    steps:
      - prepare_build_dir
      - prepare_go
      - generic_integration:
          result_subdir: << parameters.platform >>_e2e_subs_nightly
          no_output_timeout: 45m
      - slack/notify:
          <<: *slack-fail-event

  windows_x64_build:
    executor:
      name: win/default
      size: large
    steps:
      - checkout
      - prepare_windows
      - run:
          no_output_timeout: 45m
          command: |
            #export PATH=$(echo "$PATH" | sed -e 's|:/home/circleci/\.go_workspace/bin||g' | sed -e 's|:/usr/local/go/bin||g')
            export GOPATH="/home/circleci/go"
            export ALGORAND_DEADLOCK=enable
            export SKIP_GO_INSTALLATION=True
            export PATH=/mingw64/bin:/C/tools/msys64/mingw64/bin:/usr/bin:$PATH
            export MAKE=mingw32-make
            $msys2 scripts/travis/build_test.sh
          shell: bash.exe

  tests_verification_job:
    docker:
      - image: python:3.9.6-alpine
    resource_class: small
    parameters:
      platform: # platform: ["amd64", "arm64", "mac_amd64"]
        type: string
      job_type: # job_type: ["test", "test_nightly", "integration", "integration_nightly", "e2e_expect", "e2e_expect_nightly"]
        type: string
    steps:
      - checkout
      - tests_verification_command:
          result_subdir: << parameters.platform >>_<< parameters.job_type >>
