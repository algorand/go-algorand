package ledgercore

// Code generated by github.com/algorand/msgp DO NOT EDIT.

import (
	"sort"

	"github.com/algorand/go-algorand/data/basics"
	"github.com/algorand/msgp/msgp"
)

// The following msgp objects are implemented in this file:
// AccountTotals
//       |-----> (*) MarshalMsg
//       |-----> (*) CanMarshalMsg
//       |-----> (*) UnmarshalMsg
//       |-----> (*) CanUnmarshalMsg
//       |-----> (*) Msgsize
//       |-----> (*) MsgIsZero
//
// AlgoCount
//     |-----> (*) MarshalMsg
//     |-----> (*) CanMarshalMsg
//     |-----> (*) UnmarshalMsg
//     |-----> (*) CanUnmarshalMsg
//     |-----> (*) Msgsize
//     |-----> (*) MsgIsZero
//
// AssetGroupDesc
//        |-----> (*) MarshalMsg
//        |-----> (*) CanMarshalMsg
//        |-----> (*) UnmarshalMsg
//        |-----> (*) CanUnmarshalMsg
//        |-----> (*) Msgsize
//        |-----> (*) MsgIsZero
//
// AssetsCommonGroupData
//           |-----> (*) MarshalMsg
//           |-----> (*) CanMarshalMsg
//           |-----> (*) UnmarshalMsg
//           |-----> (*) CanUnmarshalMsg
//           |-----> (*) Msgsize
//           |-----> (*) MsgIsZero
//
// AssetsHoldingGroup
//          |-----> (*) MarshalMsg
//          |-----> (*) CanMarshalMsg
//          |-----> (*) UnmarshalMsg
//          |-----> (*) CanUnmarshalMsg
//          |-----> (*) Msgsize
//          |-----> (*) MsgIsZero
//
// AssetsHoldingGroupData
//            |-----> (*) MarshalMsg
//            |-----> (*) CanMarshalMsg
//            |-----> (*) UnmarshalMsg
//            |-----> (*) CanUnmarshalMsg
//            |-----> (*) Msgsize
//            |-----> (*) MsgIsZero
//
// AssetsParamGroup
//         |-----> (*) MarshalMsg
//         |-----> (*) CanMarshalMsg
//         |-----> (*) UnmarshalMsg
//         |-----> (*) CanUnmarshalMsg
//         |-----> (*) Msgsize
//         |-----> (*) MsgIsZero
//
// AssetsParamGroupData
//           |-----> (*) MarshalMsg
//           |-----> (*) CanMarshalMsg
//           |-----> (*) UnmarshalMsg
//           |-----> (*) CanUnmarshalMsg
//           |-----> (*) Msgsize
//           |-----> (*) MsgIsZero
//
// ExtendedAssetHolding
//           |-----> (*) MarshalMsg
//           |-----> (*) CanMarshalMsg
//           |-----> (*) UnmarshalMsg
//           |-----> (*) CanUnmarshalMsg
//           |-----> (*) Msgsize
//           |-----> (*) MsgIsZero
//
// ExtendedAssetParam
//          |-----> (*) MarshalMsg
//          |-----> (*) CanMarshalMsg
//          |-----> (*) UnmarshalMsg
//          |-----> (*) CanUnmarshalMsg
//          |-----> (*) Msgsize
//          |-----> (*) MsgIsZero
//
// PersistedAccountData
//           |-----> (*) MarshalMsg
//           |-----> (*) CanMarshalMsg
//           |-----> (*) UnmarshalMsg
//           |-----> (*) CanUnmarshalMsg
//           |-----> (*) Msgsize
//           |-----> (*) MsgIsZero
//

// MarshalMsg implements msgp.Marshaler
func (z *AccountTotals) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 5 bits */
	if ((*z).NotParticipating.Money.MsgIsZero()) && ((*z).NotParticipating.RewardUnits == 0) {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if ((*z).Offline.Money.MsgIsZero()) && ((*z).Offline.RewardUnits == 0) {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if ((*z).Online.Money.MsgIsZero()) && ((*z).Online.RewardUnits == 0) {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if (*z).RewardsLevel == 0 {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "notpart"
			o = append(o, 0xa7, 0x6e, 0x6f, 0x74, 0x70, 0x61, 0x72, 0x74)
			// omitempty: check for empty values
			zb0002Len := uint32(2)
			var zb0002Mask uint8 /* 3 bits */
			if (*z).NotParticipating.Money.MsgIsZero() {
				zb0002Len--
				zb0002Mask |= 0x2
			}
			if (*z).NotParticipating.RewardUnits == 0 {
				zb0002Len--
				zb0002Mask |= 0x4
			}
			// variable map header, size zb0002Len
			o = append(o, 0x80|uint8(zb0002Len))
			if (zb0002Mask & 0x2) == 0 { // if not empty
				// string "mon"
				o = append(o, 0xa3, 0x6d, 0x6f, 0x6e)
				o = (*z).NotParticipating.Money.MarshalMsg(o)
			}
			if (zb0002Mask & 0x4) == 0 { // if not empty
				// string "rwd"
				o = append(o, 0xa3, 0x72, 0x77, 0x64)
				o = msgp.AppendUint64(o, (*z).NotParticipating.RewardUnits)
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "offline"
			o = append(o, 0xa7, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65)
			// omitempty: check for empty values
			zb0003Len := uint32(2)
			var zb0003Mask uint8 /* 3 bits */
			if (*z).Offline.Money.MsgIsZero() {
				zb0003Len--
				zb0003Mask |= 0x2
			}
			if (*z).Offline.RewardUnits == 0 {
				zb0003Len--
				zb0003Mask |= 0x4
			}
			// variable map header, size zb0003Len
			o = append(o, 0x80|uint8(zb0003Len))
			if (zb0003Mask & 0x2) == 0 { // if not empty
				// string "mon"
				o = append(o, 0xa3, 0x6d, 0x6f, 0x6e)
				o = (*z).Offline.Money.MarshalMsg(o)
			}
			if (zb0003Mask & 0x4) == 0 { // if not empty
				// string "rwd"
				o = append(o, 0xa3, 0x72, 0x77, 0x64)
				o = msgp.AppendUint64(o, (*z).Offline.RewardUnits)
			}
		}
		if (zb0001Mask & 0x8) == 0 { // if not empty
			// string "online"
			o = append(o, 0xa6, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65)
			// omitempty: check for empty values
			zb0004Len := uint32(2)
			var zb0004Mask uint8 /* 3 bits */
			if (*z).Online.Money.MsgIsZero() {
				zb0004Len--
				zb0004Mask |= 0x2
			}
			if (*z).Online.RewardUnits == 0 {
				zb0004Len--
				zb0004Mask |= 0x4
			}
			// variable map header, size zb0004Len
			o = append(o, 0x80|uint8(zb0004Len))
			if (zb0004Mask & 0x2) == 0 { // if not empty
				// string "mon"
				o = append(o, 0xa3, 0x6d, 0x6f, 0x6e)
				o = (*z).Online.Money.MarshalMsg(o)
			}
			if (zb0004Mask & 0x4) == 0 { // if not empty
				// string "rwd"
				o = append(o, 0xa3, 0x72, 0x77, 0x64)
				o = msgp.AppendUint64(o, (*z).Online.RewardUnits)
			}
		}
		if (zb0001Mask & 0x10) == 0 { // if not empty
			// string "rwdlvl"
			o = append(o, 0xa6, 0x72, 0x77, 0x64, 0x6c, 0x76, 0x6c)
			o = msgp.AppendUint64(o, (*z).RewardsLevel)
		}
	}
	return
}

func (_ *AccountTotals) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*AccountTotals)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AccountTotals) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			var zb0003 int
			var zb0004 bool
			zb0003, zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if _, ok := err.(msgp.TypeError); ok {
				zb0003, zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Online")
					return
				}
				if zb0003 > 0 {
					zb0003--
					bts, err = (*z).Online.Money.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "Online", "struct-from-array", "Money")
						return
					}
				}
				if zb0003 > 0 {
					zb0003--
					(*z).Online.RewardUnits, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "Online", "struct-from-array", "RewardUnits")
						return
					}
				}
				if zb0003 > 0 {
					err = msgp.ErrTooManyArrayFields(zb0003)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "Online", "struct-from-array")
						return
					}
				}
			} else {
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Online")
					return
				}
				if zb0004 {
					(*z).Online = AlgoCount{}
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "Online")
						return
					}
					switch string(field) {
					case "mon":
						bts, err = (*z).Online.Money.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Online", "Money")
							return
						}
					case "rwd":
						(*z).Online.RewardUnits, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Online", "RewardUnits")
							return
						}
					default:
						err = msgp.ErrNoField(string(field))
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Online")
							return
						}
					}
				}
			}
		}
		if zb0001 > 0 {
			zb0001--
			var zb0005 int
			var zb0006 bool
			zb0005, zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
			if _, ok := err.(msgp.TypeError); ok {
				zb0005, zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Offline")
					return
				}
				if zb0005 > 0 {
					zb0005--
					bts, err = (*z).Offline.Money.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "Offline", "struct-from-array", "Money")
						return
					}
				}
				if zb0005 > 0 {
					zb0005--
					(*z).Offline.RewardUnits, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "Offline", "struct-from-array", "RewardUnits")
						return
					}
				}
				if zb0005 > 0 {
					err = msgp.ErrTooManyArrayFields(zb0005)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "Offline", "struct-from-array")
						return
					}
				}
			} else {
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Offline")
					return
				}
				if zb0006 {
					(*z).Offline = AlgoCount{}
				}
				for zb0005 > 0 {
					zb0005--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "Offline")
						return
					}
					switch string(field) {
					case "mon":
						bts, err = (*z).Offline.Money.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Offline", "Money")
							return
						}
					case "rwd":
						(*z).Offline.RewardUnits, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Offline", "RewardUnits")
							return
						}
					default:
						err = msgp.ErrNoField(string(field))
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Offline")
							return
						}
					}
				}
			}
		}
		if zb0001 > 0 {
			zb0001--
			var zb0007 int
			var zb0008 bool
			zb0007, zb0008, bts, err = msgp.ReadMapHeaderBytes(bts)
			if _, ok := err.(msgp.TypeError); ok {
				zb0007, zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "NotParticipating")
					return
				}
				if zb0007 > 0 {
					zb0007--
					bts, err = (*z).NotParticipating.Money.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "NotParticipating", "struct-from-array", "Money")
						return
					}
				}
				if zb0007 > 0 {
					zb0007--
					(*z).NotParticipating.RewardUnits, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "NotParticipating", "struct-from-array", "RewardUnits")
						return
					}
				}
				if zb0007 > 0 {
					err = msgp.ErrTooManyArrayFields(zb0007)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "NotParticipating", "struct-from-array")
						return
					}
				}
			} else {
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "NotParticipating")
					return
				}
				if zb0008 {
					(*z).NotParticipating = AlgoCount{}
				}
				for zb0007 > 0 {
					zb0007--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "NotParticipating")
						return
					}
					switch string(field) {
					case "mon":
						bts, err = (*z).NotParticipating.Money.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "NotParticipating", "Money")
							return
						}
					case "rwd":
						(*z).NotParticipating.RewardUnits, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "NotParticipating", "RewardUnits")
							return
						}
					default:
						err = msgp.ErrNoField(string(field))
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "NotParticipating")
							return
						}
					}
				}
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).RewardsLevel, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RewardsLevel")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = AccountTotals{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "online":
				var zb0009 int
				var zb0010 bool
				zb0009, zb0010, bts, err = msgp.ReadMapHeaderBytes(bts)
				if _, ok := err.(msgp.TypeError); ok {
					zb0009, zb0010, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Online")
						return
					}
					if zb0009 > 0 {
						zb0009--
						bts, err = (*z).Online.Money.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "Online", "struct-from-array", "Money")
							return
						}
					}
					if zb0009 > 0 {
						zb0009--
						(*z).Online.RewardUnits, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Online", "struct-from-array", "RewardUnits")
							return
						}
					}
					if zb0009 > 0 {
						err = msgp.ErrTooManyArrayFields(zb0009)
						if err != nil {
							err = msgp.WrapError(err, "Online", "struct-from-array")
							return
						}
					}
				} else {
					if err != nil {
						err = msgp.WrapError(err, "Online")
						return
					}
					if zb0010 {
						(*z).Online = AlgoCount{}
					}
					for zb0009 > 0 {
						zb0009--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "Online")
							return
						}
						switch string(field) {
						case "mon":
							bts, err = (*z).Online.Money.UnmarshalMsg(bts)
							if err != nil {
								err = msgp.WrapError(err, "Online", "Money")
								return
							}
						case "rwd":
							(*z).Online.RewardUnits, bts, err = msgp.ReadUint64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Online", "RewardUnits")
								return
							}
						default:
							err = msgp.ErrNoField(string(field))
							if err != nil {
								err = msgp.WrapError(err, "Online")
								return
							}
						}
					}
				}
			case "offline":
				var zb0011 int
				var zb0012 bool
				zb0011, zb0012, bts, err = msgp.ReadMapHeaderBytes(bts)
				if _, ok := err.(msgp.TypeError); ok {
					zb0011, zb0012, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Offline")
						return
					}
					if zb0011 > 0 {
						zb0011--
						bts, err = (*z).Offline.Money.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "Offline", "struct-from-array", "Money")
							return
						}
					}
					if zb0011 > 0 {
						zb0011--
						(*z).Offline.RewardUnits, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Offline", "struct-from-array", "RewardUnits")
							return
						}
					}
					if zb0011 > 0 {
						err = msgp.ErrTooManyArrayFields(zb0011)
						if err != nil {
							err = msgp.WrapError(err, "Offline", "struct-from-array")
							return
						}
					}
				} else {
					if err != nil {
						err = msgp.WrapError(err, "Offline")
						return
					}
					if zb0012 {
						(*z).Offline = AlgoCount{}
					}
					for zb0011 > 0 {
						zb0011--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "Offline")
							return
						}
						switch string(field) {
						case "mon":
							bts, err = (*z).Offline.Money.UnmarshalMsg(bts)
							if err != nil {
								err = msgp.WrapError(err, "Offline", "Money")
								return
							}
						case "rwd":
							(*z).Offline.RewardUnits, bts, err = msgp.ReadUint64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Offline", "RewardUnits")
								return
							}
						default:
							err = msgp.ErrNoField(string(field))
							if err != nil {
								err = msgp.WrapError(err, "Offline")
								return
							}
						}
					}
				}
			case "notpart":
				var zb0013 int
				var zb0014 bool
				zb0013, zb0014, bts, err = msgp.ReadMapHeaderBytes(bts)
				if _, ok := err.(msgp.TypeError); ok {
					zb0013, zb0014, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "NotParticipating")
						return
					}
					if zb0013 > 0 {
						zb0013--
						bts, err = (*z).NotParticipating.Money.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "NotParticipating", "struct-from-array", "Money")
							return
						}
					}
					if zb0013 > 0 {
						zb0013--
						(*z).NotParticipating.RewardUnits, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "NotParticipating", "struct-from-array", "RewardUnits")
							return
						}
					}
					if zb0013 > 0 {
						err = msgp.ErrTooManyArrayFields(zb0013)
						if err != nil {
							err = msgp.WrapError(err, "NotParticipating", "struct-from-array")
							return
						}
					}
				} else {
					if err != nil {
						err = msgp.WrapError(err, "NotParticipating")
						return
					}
					if zb0014 {
						(*z).NotParticipating = AlgoCount{}
					}
					for zb0013 > 0 {
						zb0013--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "NotParticipating")
							return
						}
						switch string(field) {
						case "mon":
							bts, err = (*z).NotParticipating.Money.UnmarshalMsg(bts)
							if err != nil {
								err = msgp.WrapError(err, "NotParticipating", "Money")
								return
							}
						case "rwd":
							(*z).NotParticipating.RewardUnits, bts, err = msgp.ReadUint64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "NotParticipating", "RewardUnits")
								return
							}
						default:
							err = msgp.ErrNoField(string(field))
							if err != nil {
								err = msgp.WrapError(err, "NotParticipating")
								return
							}
						}
					}
				}
			case "rwdlvl":
				(*z).RewardsLevel, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RewardsLevel")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *AccountTotals) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*AccountTotals)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AccountTotals) Msgsize() (s int) {
	s = 1 + 7 + 1 + 4 + (*z).Online.Money.Msgsize() + 4 + msgp.Uint64Size + 8 + 1 + 4 + (*z).Offline.Money.Msgsize() + 4 + msgp.Uint64Size + 8 + 1 + 4 + (*z).NotParticipating.Money.Msgsize() + 4 + msgp.Uint64Size + 7 + msgp.Uint64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z *AccountTotals) MsgIsZero() bool {
	return (((*z).Online.Money.MsgIsZero()) && ((*z).Online.RewardUnits == 0)) && (((*z).Offline.Money.MsgIsZero()) && ((*z).Offline.RewardUnits == 0)) && (((*z).NotParticipating.Money.MsgIsZero()) && ((*z).NotParticipating.RewardUnits == 0)) && ((*z).RewardsLevel == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *AlgoCount) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 3 bits */
	if (*z).Money.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).RewardUnits == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "mon"
			o = append(o, 0xa3, 0x6d, 0x6f, 0x6e)
			o = (*z).Money.MarshalMsg(o)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "rwd"
			o = append(o, 0xa3, 0x72, 0x77, 0x64)
			o = msgp.AppendUint64(o, (*z).RewardUnits)
		}
	}
	return
}

func (_ *AlgoCount) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*AlgoCount)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AlgoCount) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Money.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Money")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).RewardUnits, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RewardUnits")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = AlgoCount{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "mon":
				bts, err = (*z).Money.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Money")
					return
				}
			case "rwd":
				(*z).RewardUnits, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RewardUnits")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *AlgoCount) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*AlgoCount)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AlgoCount) Msgsize() (s int) {
	s = 1 + 4 + (*z).Money.Msgsize() + 4 + msgp.Uint64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z *AlgoCount) MsgIsZero() bool {
	return ((*z).Money.MsgIsZero()) && ((*z).RewardUnits == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *AssetGroupDesc) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 5 bits */
	if (*z).Count == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).DeltaMaxAssetIndex == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if (*z).AssetGroupKey == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if (*z).MinAssetIndex.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "c"
			o = append(o, 0xa1, 0x63)
			o = msgp.AppendUint32(o, (*z).Count)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "d"
			o = append(o, 0xa1, 0x64)
			o = msgp.AppendUint64(o, (*z).DeltaMaxAssetIndex)
		}
		if (zb0001Mask & 0x8) == 0 { // if not empty
			// string "k"
			o = append(o, 0xa1, 0x6b)
			o = msgp.AppendInt64(o, (*z).AssetGroupKey)
		}
		if (zb0001Mask & 0x10) == 0 { // if not empty
			// string "m"
			o = append(o, 0xa1, 0x6d)
			o = (*z).MinAssetIndex.MarshalMsg(o)
		}
	}
	return
}

func (_ *AssetGroupDesc) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetGroupDesc)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AssetGroupDesc) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			(*z).Count, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Count")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).MinAssetIndex.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MinAssetIndex")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).DeltaMaxAssetIndex, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "DeltaMaxAssetIndex")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).AssetGroupKey, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetGroupKey")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = AssetGroupDesc{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "c":
				(*z).Count, bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Count")
					return
				}
			case "m":
				bts, err = (*z).MinAssetIndex.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "MinAssetIndex")
					return
				}
			case "d":
				(*z).DeltaMaxAssetIndex, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DeltaMaxAssetIndex")
					return
				}
			case "k":
				(*z).AssetGroupKey, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetGroupKey")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *AssetGroupDesc) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetGroupDesc)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AssetGroupDesc) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint32Size + 2 + (*z).MinAssetIndex.Msgsize() + 2 + msgp.Uint64Size + 2 + msgp.Int64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z *AssetGroupDesc) MsgIsZero() bool {
	return ((*z).Count == 0) && ((*z).MinAssetIndex.MsgIsZero()) && ((*z).DeltaMaxAssetIndex == 0) && ((*z).AssetGroupKey == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *AssetsCommonGroupData) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0002Len := uint32(1)
	var zb0002Mask uint8 /* 2 bits */
	if len((*z).AssetOffsets) == 0 {
		zb0002Len--
		zb0002Mask |= 0x2
	}
	// variable map header, size zb0002Len
	o = append(o, 0x80|uint8(zb0002Len))
	if zb0002Len != 0 {
		if (zb0002Mask & 0x2) == 0 { // if not empty
			// string "ao"
			o = append(o, 0xa2, 0x61, 0x6f)
			if (*z).AssetOffsets == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).AssetOffsets)))
			}
			for zb0001 := range (*z).AssetOffsets {
				o = (*z).AssetOffsets[zb0001].MarshalMsg(o)
			}
		}
	}
	return
}

func (_ *AssetsCommonGroupData) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetsCommonGroupData)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AssetsCommonGroupData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0002 int
	var zb0003 bool
	zb0002, zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0002, zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 > 0 {
			zb0002--
			var zb0004 int
			var zb0005 bool
			zb0004, zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetOffsets")
				return
			}
			if zb0004 > MaxHoldingGroupSize {
				err = msgp.ErrOverflow(uint64(zb0004), uint64(MaxHoldingGroupSize))
				err = msgp.WrapError(err, "struct-from-array", "AssetOffsets")
				return
			}
			if zb0005 {
				(*z).AssetOffsets = nil
			} else if (*z).AssetOffsets != nil && cap((*z).AssetOffsets) >= zb0004 {
				(*z).AssetOffsets = ((*z).AssetOffsets)[:zb0004]
			} else {
				(*z).AssetOffsets = make([]basics.AssetIndex, zb0004)
			}
			for zb0001 := range (*z).AssetOffsets {
				bts, err = (*z).AssetOffsets[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AssetOffsets", zb0001)
					return
				}
			}
		}
		if zb0002 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0002)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0003 {
			(*z) = AssetsCommonGroupData{}
		}
		for zb0002 > 0 {
			zb0002--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "ao":
				var zb0006 int
				var zb0007 bool
				zb0006, zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetOffsets")
					return
				}
				if zb0006 > MaxHoldingGroupSize {
					err = msgp.ErrOverflow(uint64(zb0006), uint64(MaxHoldingGroupSize))
					err = msgp.WrapError(err, "AssetOffsets")
					return
				}
				if zb0007 {
					(*z).AssetOffsets = nil
				} else if (*z).AssetOffsets != nil && cap((*z).AssetOffsets) >= zb0006 {
					(*z).AssetOffsets = ((*z).AssetOffsets)[:zb0006]
				} else {
					(*z).AssetOffsets = make([]basics.AssetIndex, zb0006)
				}
				for zb0001 := range (*z).AssetOffsets {
					bts, err = (*z).AssetOffsets[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "AssetOffsets", zb0001)
						return
					}
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *AssetsCommonGroupData) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetsCommonGroupData)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AssetsCommonGroupData) Msgsize() (s int) {
	s = 1 + 3 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).AssetOffsets {
		s += (*z).AssetOffsets[zb0001].Msgsize()
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z *AssetsCommonGroupData) MsgIsZero() bool {
	return (len((*z).AssetOffsets) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *AssetsHoldingGroup) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 7 bits */
	if (*z).AssetGroupDesc.Count == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).AssetGroupDesc.DeltaMaxAssetIndex == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if (*z).AssetGroupDesc.AssetGroupKey == 0 {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if (*z).AssetGroupDesc.MinAssetIndex.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "c"
			o = append(o, 0xa1, 0x63)
			o = msgp.AppendUint32(o, (*z).AssetGroupDesc.Count)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "d"
			o = append(o, 0xa1, 0x64)
			o = msgp.AppendUint64(o, (*z).AssetGroupDesc.DeltaMaxAssetIndex)
		}
		if (zb0001Mask & 0x10) == 0 { // if not empty
			// string "k"
			o = append(o, 0xa1, 0x6b)
			o = msgp.AppendInt64(o, (*z).AssetGroupDesc.AssetGroupKey)
		}
		if (zb0001Mask & 0x40) == 0 { // if not empty
			// string "m"
			o = append(o, 0xa1, 0x6d)
			o = (*z).AssetGroupDesc.MinAssetIndex.MarshalMsg(o)
		}
	}
	return
}

func (_ *AssetsHoldingGroup) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetsHoldingGroup)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AssetsHoldingGroup) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			(*z).AssetGroupDesc.Count, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Count")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).AssetGroupDesc.MinAssetIndex.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MinAssetIndex")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).AssetGroupDesc.DeltaMaxAssetIndex, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "DeltaMaxAssetIndex")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).AssetGroupDesc.AssetGroupKey, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetGroupKey")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = AssetsHoldingGroup{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "c":
				(*z).AssetGroupDesc.Count, bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Count")
					return
				}
			case "m":
				bts, err = (*z).AssetGroupDesc.MinAssetIndex.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "MinAssetIndex")
					return
				}
			case "d":
				(*z).AssetGroupDesc.DeltaMaxAssetIndex, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DeltaMaxAssetIndex")
					return
				}
			case "k":
				(*z).AssetGroupDesc.AssetGroupKey, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetGroupKey")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *AssetsHoldingGroup) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetsHoldingGroup)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AssetsHoldingGroup) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint32Size + 2 + (*z).AssetGroupDesc.MinAssetIndex.Msgsize() + 2 + msgp.Uint64Size + 2 + msgp.Int64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z *AssetsHoldingGroup) MsgIsZero() bool {
	return ((*z).AssetGroupDesc.Count == 0) && ((*z).AssetGroupDesc.MinAssetIndex.MsgIsZero()) && ((*z).AssetGroupDesc.DeltaMaxAssetIndex == 0) && ((*z).AssetGroupDesc.AssetGroupKey == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *AssetsHoldingGroupData) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0004Len := uint32(3)
	var zb0004Mask uint8 /* 4 bits */
	if len((*z).Amounts) == 0 {
		zb0004Len--
		zb0004Mask |= 0x2
	}
	if len((*z).AssetsCommonGroupData.AssetOffsets) == 0 {
		zb0004Len--
		zb0004Mask |= 0x4
	}
	if len((*z).Frozens) == 0 {
		zb0004Len--
		zb0004Mask |= 0x8
	}
	// variable map header, size zb0004Len
	o = append(o, 0x80|uint8(zb0004Len))
	if zb0004Len != 0 {
		if (zb0004Mask & 0x2) == 0 { // if not empty
			// string "a"
			o = append(o, 0xa1, 0x61)
			if (*z).Amounts == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Amounts)))
			}
			for zb0002 := range (*z).Amounts {
				o = msgp.AppendUint64(o, (*z).Amounts[zb0002])
			}
		}
		if (zb0004Mask & 0x4) == 0 { // if not empty
			// string "ao"
			o = append(o, 0xa2, 0x61, 0x6f)
			if (*z).AssetsCommonGroupData.AssetOffsets == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).AssetsCommonGroupData.AssetOffsets)))
			}
			for zb0001 := range (*z).AssetsCommonGroupData.AssetOffsets {
				o = (*z).AssetsCommonGroupData.AssetOffsets[zb0001].MarshalMsg(o)
			}
		}
		if (zb0004Mask & 0x8) == 0 { // if not empty
			// string "f"
			o = append(o, 0xa1, 0x66)
			if (*z).Frozens == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Frozens)))
			}
			for zb0003 := range (*z).Frozens {
				o = msgp.AppendBool(o, (*z).Frozens[zb0003])
			}
		}
	}
	return
}

func (_ *AssetsHoldingGroupData) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetsHoldingGroupData)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AssetsHoldingGroupData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0004 int
	var zb0005 bool
	zb0004, zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0004, zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0004 > 0 {
			zb0004--
			var zb0006 int
			var zb0007 bool
			zb0006, zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetOffsets")
				return
			}
			if zb0006 > MaxHoldingGroupSize {
				err = msgp.ErrOverflow(uint64(zb0006), uint64(MaxHoldingGroupSize))
				err = msgp.WrapError(err, "struct-from-array", "AssetOffsets")
				return
			}
			if zb0007 {
				(*z).AssetsCommonGroupData.AssetOffsets = nil
			} else if (*z).AssetsCommonGroupData.AssetOffsets != nil && cap((*z).AssetsCommonGroupData.AssetOffsets) >= zb0006 {
				(*z).AssetsCommonGroupData.AssetOffsets = ((*z).AssetsCommonGroupData.AssetOffsets)[:zb0006]
			} else {
				(*z).AssetsCommonGroupData.AssetOffsets = make([]basics.AssetIndex, zb0006)
			}
			for zb0001 := range (*z).AssetsCommonGroupData.AssetOffsets {
				bts, err = (*z).AssetsCommonGroupData.AssetOffsets[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AssetOffsets", zb0001)
					return
				}
			}
		}
		if zb0004 > 0 {
			zb0004--
			var zb0008 int
			var zb0009 bool
			zb0008, zb0009, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Amounts")
				return
			}
			if zb0008 > MaxHoldingGroupSize {
				err = msgp.ErrOverflow(uint64(zb0008), uint64(MaxHoldingGroupSize))
				err = msgp.WrapError(err, "struct-from-array", "Amounts")
				return
			}
			if zb0009 {
				(*z).Amounts = nil
			} else if (*z).Amounts != nil && cap((*z).Amounts) >= zb0008 {
				(*z).Amounts = ((*z).Amounts)[:zb0008]
			} else {
				(*z).Amounts = make([]uint64, zb0008)
			}
			for zb0002 := range (*z).Amounts {
				(*z).Amounts[zb0002], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Amounts", zb0002)
					return
				}
			}
		}
		if zb0004 > 0 {
			zb0004--
			var zb0010 int
			var zb0011 bool
			zb0010, zb0011, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Frozens")
				return
			}
			if zb0010 > MaxHoldingGroupSize {
				err = msgp.ErrOverflow(uint64(zb0010), uint64(MaxHoldingGroupSize))
				err = msgp.WrapError(err, "struct-from-array", "Frozens")
				return
			}
			if zb0011 {
				(*z).Frozens = nil
			} else if (*z).Frozens != nil && cap((*z).Frozens) >= zb0010 {
				(*z).Frozens = ((*z).Frozens)[:zb0010]
			} else {
				(*z).Frozens = make([]bool, zb0010)
			}
			for zb0003 := range (*z).Frozens {
				(*z).Frozens[zb0003], bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Frozens", zb0003)
					return
				}
			}
		}
		if zb0004 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0004)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0005 {
			(*z) = AssetsHoldingGroupData{}
		}
		for zb0004 > 0 {
			zb0004--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "ao":
				var zb0012 int
				var zb0013 bool
				zb0012, zb0013, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetOffsets")
					return
				}
				if zb0012 > MaxHoldingGroupSize {
					err = msgp.ErrOverflow(uint64(zb0012), uint64(MaxHoldingGroupSize))
					err = msgp.WrapError(err, "AssetOffsets")
					return
				}
				if zb0013 {
					(*z).AssetsCommonGroupData.AssetOffsets = nil
				} else if (*z).AssetsCommonGroupData.AssetOffsets != nil && cap((*z).AssetsCommonGroupData.AssetOffsets) >= zb0012 {
					(*z).AssetsCommonGroupData.AssetOffsets = ((*z).AssetsCommonGroupData.AssetOffsets)[:zb0012]
				} else {
					(*z).AssetsCommonGroupData.AssetOffsets = make([]basics.AssetIndex, zb0012)
				}
				for zb0001 := range (*z).AssetsCommonGroupData.AssetOffsets {
					bts, err = (*z).AssetsCommonGroupData.AssetOffsets[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "AssetOffsets", zb0001)
						return
					}
				}
			case "a":
				var zb0014 int
				var zb0015 bool
				zb0014, zb0015, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Amounts")
					return
				}
				if zb0014 > MaxHoldingGroupSize {
					err = msgp.ErrOverflow(uint64(zb0014), uint64(MaxHoldingGroupSize))
					err = msgp.WrapError(err, "Amounts")
					return
				}
				if zb0015 {
					(*z).Amounts = nil
				} else if (*z).Amounts != nil && cap((*z).Amounts) >= zb0014 {
					(*z).Amounts = ((*z).Amounts)[:zb0014]
				} else {
					(*z).Amounts = make([]uint64, zb0014)
				}
				for zb0002 := range (*z).Amounts {
					(*z).Amounts[zb0002], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Amounts", zb0002)
						return
					}
				}
			case "f":
				var zb0016 int
				var zb0017 bool
				zb0016, zb0017, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Frozens")
					return
				}
				if zb0016 > MaxHoldingGroupSize {
					err = msgp.ErrOverflow(uint64(zb0016), uint64(MaxHoldingGroupSize))
					err = msgp.WrapError(err, "Frozens")
					return
				}
				if zb0017 {
					(*z).Frozens = nil
				} else if (*z).Frozens != nil && cap((*z).Frozens) >= zb0016 {
					(*z).Frozens = ((*z).Frozens)[:zb0016]
				} else {
					(*z).Frozens = make([]bool, zb0016)
				}
				for zb0003 := range (*z).Frozens {
					(*z).Frozens[zb0003], bts, err = msgp.ReadBoolBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Frozens", zb0003)
						return
					}
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *AssetsHoldingGroupData) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetsHoldingGroupData)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AssetsHoldingGroupData) Msgsize() (s int) {
	s = 1 + 3 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).AssetsCommonGroupData.AssetOffsets {
		s += (*z).AssetsCommonGroupData.AssetOffsets[zb0001].Msgsize()
	}
	s += 2 + msgp.ArrayHeaderSize + (len((*z).Amounts) * (msgp.Uint64Size)) + 2 + msgp.ArrayHeaderSize + (len((*z).Frozens) * (msgp.BoolSize))
	return
}

// MsgIsZero returns whether this is a zero value
func (z *AssetsHoldingGroupData) MsgIsZero() bool {
	return (len((*z).AssetsCommonGroupData.AssetOffsets) == 0) && (len((*z).Amounts) == 0) && (len((*z).Frozens) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *AssetsParamGroup) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 7 bits */
	if (*z).AssetGroupDesc.Count == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).AssetGroupDesc.DeltaMaxAssetIndex == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if (*z).AssetGroupDesc.AssetGroupKey == 0 {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if (*z).AssetGroupDesc.MinAssetIndex.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "c"
			o = append(o, 0xa1, 0x63)
			o = msgp.AppendUint32(o, (*z).AssetGroupDesc.Count)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "d"
			o = append(o, 0xa1, 0x64)
			o = msgp.AppendUint64(o, (*z).AssetGroupDesc.DeltaMaxAssetIndex)
		}
		if (zb0001Mask & 0x10) == 0 { // if not empty
			// string "k"
			o = append(o, 0xa1, 0x6b)
			o = msgp.AppendInt64(o, (*z).AssetGroupDesc.AssetGroupKey)
		}
		if (zb0001Mask & 0x40) == 0 { // if not empty
			// string "m"
			o = append(o, 0xa1, 0x6d)
			o = (*z).AssetGroupDesc.MinAssetIndex.MarshalMsg(o)
		}
	}
	return
}

func (_ *AssetsParamGroup) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetsParamGroup)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AssetsParamGroup) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			(*z).AssetGroupDesc.Count, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Count")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).AssetGroupDesc.MinAssetIndex.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MinAssetIndex")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).AssetGroupDesc.DeltaMaxAssetIndex, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "DeltaMaxAssetIndex")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).AssetGroupDesc.AssetGroupKey, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetGroupKey")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = AssetsParamGroup{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "c":
				(*z).AssetGroupDesc.Count, bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Count")
					return
				}
			case "m":
				bts, err = (*z).AssetGroupDesc.MinAssetIndex.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "MinAssetIndex")
					return
				}
			case "d":
				(*z).AssetGroupDesc.DeltaMaxAssetIndex, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DeltaMaxAssetIndex")
					return
				}
			case "k":
				(*z).AssetGroupDesc.AssetGroupKey, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetGroupKey")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *AssetsParamGroup) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetsParamGroup)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AssetsParamGroup) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint32Size + 2 + (*z).AssetGroupDesc.MinAssetIndex.Msgsize() + 2 + msgp.Uint64Size + 2 + msgp.Int64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z *AssetsParamGroup) MsgIsZero() bool {
	return ((*z).AssetGroupDesc.Count == 0) && ((*z).AssetGroupDesc.MinAssetIndex.MsgIsZero()) && ((*z).AssetGroupDesc.DeltaMaxAssetIndex == 0) && ((*z).AssetGroupDesc.AssetGroupKey == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *AssetsParamGroupData) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0013Len := uint32(11)
	var zb0013Mask uint16 /* 12 bits */
	if len((*z).AssetsCommonGroupData.AssetOffsets) == 0 {
		zb0013Len--
		zb0013Mask |= 0x2
	}
	if len((*z).Clawbacks) == 0 {
		zb0013Len--
		zb0013Mask |= 0x4
	}
	if len((*z).DefaultFrozens) == 0 {
		zb0013Len--
		zb0013Mask |= 0x8
	}
	if len((*z).MetadataHash) == 0 {
		zb0013Len--
		zb0013Mask |= 0x10
	}
	if len((*z).URLs) == 0 {
		zb0013Len--
		zb0013Mask |= 0x20
	}
	if len((*z).Managers) == 0 {
		zb0013Len--
		zb0013Mask |= 0x40
	}
	if len((*z).AssetNames) == 0 {
		zb0013Len--
		zb0013Mask |= 0x80
	}
	if len((*z).Reserves) == 0 {
		zb0013Len--
		zb0013Mask |= 0x100
	}
	if len((*z).Totals) == 0 {
		zb0013Len--
		zb0013Mask |= 0x200
	}
	if len((*z).UnitNames) == 0 {
		zb0013Len--
		zb0013Mask |= 0x400
	}
	if len((*z).Freezes) == 0 {
		zb0013Len--
		zb0013Mask |= 0x800
	}
	// variable map header, size zb0013Len
	o = append(o, 0x80|uint8(zb0013Len))
	if zb0013Len != 0 {
		if (zb0013Mask & 0x2) == 0 { // if not empty
			// string "ao"
			o = append(o, 0xa2, 0x61, 0x6f)
			if (*z).AssetsCommonGroupData.AssetOffsets == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).AssetsCommonGroupData.AssetOffsets)))
			}
			for zb0001 := range (*z).AssetsCommonGroupData.AssetOffsets {
				o = (*z).AssetsCommonGroupData.AssetOffsets[zb0001].MarshalMsg(o)
			}
		}
		if (zb0013Mask & 0x4) == 0 { // if not empty
			// string "c"
			o = append(o, 0xa1, 0x63)
			if (*z).Clawbacks == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Clawbacks)))
			}
			for zb0012 := range (*z).Clawbacks {
				o = (*z).Clawbacks[zb0012].MarshalMsg(o)
			}
		}
		if (zb0013Mask & 0x8) == 0 { // if not empty
			// string "f"
			o = append(o, 0xa1, 0x66)
			if (*z).DefaultFrozens == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).DefaultFrozens)))
			}
			for zb0003 := range (*z).DefaultFrozens {
				o = msgp.AppendBool(o, (*z).DefaultFrozens[zb0003])
			}
		}
		if (zb0013Mask & 0x10) == 0 { // if not empty
			// string "h"
			o = append(o, 0xa1, 0x68)
			if (*z).MetadataHash == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).MetadataHash)))
			}
			for zb0007 := range (*z).MetadataHash {
				o = msgp.AppendBytes(o, ((*z).MetadataHash[zb0007])[:])
			}
		}
		if (zb0013Mask & 0x20) == 0 { // if not empty
			// string "l"
			o = append(o, 0xa1, 0x6c)
			if (*z).URLs == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).URLs)))
			}
			for zb0006 := range (*z).URLs {
				o = msgp.AppendString(o, (*z).URLs[zb0006])
			}
		}
		if (zb0013Mask & 0x40) == 0 { // if not empty
			// string "m"
			o = append(o, 0xa1, 0x6d)
			if (*z).Managers == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Managers)))
			}
			for zb0009 := range (*z).Managers {
				o = (*z).Managers[zb0009].MarshalMsg(o)
			}
		}
		if (zb0013Mask & 0x80) == 0 { // if not empty
			// string "n"
			o = append(o, 0xa1, 0x6e)
			if (*z).AssetNames == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).AssetNames)))
			}
			for zb0005 := range (*z).AssetNames {
				o = msgp.AppendString(o, (*z).AssetNames[zb0005])
			}
		}
		if (zb0013Mask & 0x100) == 0 { // if not empty
			// string "r"
			o = append(o, 0xa1, 0x72)
			if (*z).Reserves == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Reserves)))
			}
			for zb0010 := range (*z).Reserves {
				o = (*z).Reserves[zb0010].MarshalMsg(o)
			}
		}
		if (zb0013Mask & 0x200) == 0 { // if not empty
			// string "t"
			o = append(o, 0xa1, 0x74)
			if (*z).Totals == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Totals)))
			}
			for zb0002 := range (*z).Totals {
				o = msgp.AppendUint64(o, (*z).Totals[zb0002])
			}
		}
		if (zb0013Mask & 0x400) == 0 { // if not empty
			// string "u"
			o = append(o, 0xa1, 0x75)
			if (*z).UnitNames == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).UnitNames)))
			}
			for zb0004 := range (*z).UnitNames {
				o = msgp.AppendString(o, (*z).UnitNames[zb0004])
			}
		}
		if (zb0013Mask & 0x800) == 0 { // if not empty
			// string "z"
			o = append(o, 0xa1, 0x7a)
			if (*z).Freezes == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Freezes)))
			}
			for zb0011 := range (*z).Freezes {
				o = (*z).Freezes[zb0011].MarshalMsg(o)
			}
		}
	}
	return
}

func (_ *AssetsParamGroupData) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetsParamGroupData)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AssetsParamGroupData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0013 int
	var zb0014 bool
	zb0013, zb0014, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0013, zb0014, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0013 > 0 {
			zb0013--
			var zb0015 int
			var zb0016 bool
			zb0015, zb0016, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetOffsets")
				return
			}
			if zb0015 > MaxHoldingGroupSize {
				err = msgp.ErrOverflow(uint64(zb0015), uint64(MaxHoldingGroupSize))
				err = msgp.WrapError(err, "struct-from-array", "AssetOffsets")
				return
			}
			if zb0016 {
				(*z).AssetsCommonGroupData.AssetOffsets = nil
			} else if (*z).AssetsCommonGroupData.AssetOffsets != nil && cap((*z).AssetsCommonGroupData.AssetOffsets) >= zb0015 {
				(*z).AssetsCommonGroupData.AssetOffsets = ((*z).AssetsCommonGroupData.AssetOffsets)[:zb0015]
			} else {
				(*z).AssetsCommonGroupData.AssetOffsets = make([]basics.AssetIndex, zb0015)
			}
			for zb0001 := range (*z).AssetsCommonGroupData.AssetOffsets {
				bts, err = (*z).AssetsCommonGroupData.AssetOffsets[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AssetOffsets", zb0001)
					return
				}
			}
		}
		if zb0013 > 0 {
			zb0013--
			var zb0017 int
			var zb0018 bool
			zb0017, zb0018, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Totals")
				return
			}
			if zb0017 > MaxHoldingGroupSize {
				err = msgp.ErrOverflow(uint64(zb0017), uint64(MaxHoldingGroupSize))
				err = msgp.WrapError(err, "struct-from-array", "Totals")
				return
			}
			if zb0018 {
				(*z).Totals = nil
			} else if (*z).Totals != nil && cap((*z).Totals) >= zb0017 {
				(*z).Totals = ((*z).Totals)[:zb0017]
			} else {
				(*z).Totals = make([]uint64, zb0017)
			}
			for zb0002 := range (*z).Totals {
				(*z).Totals[zb0002], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Totals", zb0002)
					return
				}
			}
		}
		if zb0013 > 0 {
			zb0013--
			var zb0019 int
			var zb0020 bool
			zb0019, zb0020, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "DefaultFrozens")
				return
			}
			if zb0019 > MaxHoldingGroupSize {
				err = msgp.ErrOverflow(uint64(zb0019), uint64(MaxHoldingGroupSize))
				err = msgp.WrapError(err, "struct-from-array", "DefaultFrozens")
				return
			}
			if zb0020 {
				(*z).DefaultFrozens = nil
			} else if (*z).DefaultFrozens != nil && cap((*z).DefaultFrozens) >= zb0019 {
				(*z).DefaultFrozens = ((*z).DefaultFrozens)[:zb0019]
			} else {
				(*z).DefaultFrozens = make([]bool, zb0019)
			}
			for zb0003 := range (*z).DefaultFrozens {
				(*z).DefaultFrozens[zb0003], bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "DefaultFrozens", zb0003)
					return
				}
			}
		}
		if zb0013 > 0 {
			zb0013--
			var zb0021 int
			var zb0022 bool
			zb0021, zb0022, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "UnitNames")
				return
			}
			if zb0021 > MaxHoldingGroupSize {
				err = msgp.ErrOverflow(uint64(zb0021), uint64(MaxHoldingGroupSize))
				err = msgp.WrapError(err, "struct-from-array", "UnitNames")
				return
			}
			if zb0022 {
				(*z).UnitNames = nil
			} else if (*z).UnitNames != nil && cap((*z).UnitNames) >= zb0021 {
				(*z).UnitNames = ((*z).UnitNames)[:zb0021]
			} else {
				(*z).UnitNames = make([]string, zb0021)
			}
			for zb0004 := range (*z).UnitNames {
				(*z).UnitNames[zb0004], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "UnitNames", zb0004)
					return
				}
			}
		}
		if zb0013 > 0 {
			zb0013--
			var zb0023 int
			var zb0024 bool
			zb0023, zb0024, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetNames")
				return
			}
			if zb0023 > MaxHoldingGroupSize {
				err = msgp.ErrOverflow(uint64(zb0023), uint64(MaxHoldingGroupSize))
				err = msgp.WrapError(err, "struct-from-array", "AssetNames")
				return
			}
			if zb0024 {
				(*z).AssetNames = nil
			} else if (*z).AssetNames != nil && cap((*z).AssetNames) >= zb0023 {
				(*z).AssetNames = ((*z).AssetNames)[:zb0023]
			} else {
				(*z).AssetNames = make([]string, zb0023)
			}
			for zb0005 := range (*z).AssetNames {
				(*z).AssetNames[zb0005], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AssetNames", zb0005)
					return
				}
			}
		}
		if zb0013 > 0 {
			zb0013--
			var zb0025 int
			var zb0026 bool
			zb0025, zb0026, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "URLs")
				return
			}
			if zb0025 > MaxHoldingGroupSize {
				err = msgp.ErrOverflow(uint64(zb0025), uint64(MaxHoldingGroupSize))
				err = msgp.WrapError(err, "struct-from-array", "URLs")
				return
			}
			if zb0026 {
				(*z).URLs = nil
			} else if (*z).URLs != nil && cap((*z).URLs) >= zb0025 {
				(*z).URLs = ((*z).URLs)[:zb0025]
			} else {
				(*z).URLs = make([]string, zb0025)
			}
			for zb0006 := range (*z).URLs {
				(*z).URLs[zb0006], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "URLs", zb0006)
					return
				}
			}
		}
		if zb0013 > 0 {
			zb0013--
			var zb0027 int
			var zb0028 bool
			zb0027, zb0028, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MetadataHash")
				return
			}
			if zb0027 > MaxHoldingGroupSize {
				err = msgp.ErrOverflow(uint64(zb0027), uint64(MaxHoldingGroupSize))
				err = msgp.WrapError(err, "struct-from-array", "MetadataHash")
				return
			}
			if zb0028 {
				(*z).MetadataHash = nil
			} else if (*z).MetadataHash != nil && cap((*z).MetadataHash) >= zb0027 {
				(*z).MetadataHash = ((*z).MetadataHash)[:zb0027]
			} else {
				(*z).MetadataHash = make([][32]byte, zb0027)
			}
			for zb0007 := range (*z).MetadataHash {
				bts, err = msgp.ReadExactBytes(bts, ((*z).MetadataHash[zb0007])[:])
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "MetadataHash", zb0007)
					return
				}
			}
		}
		if zb0013 > 0 {
			zb0013--
			var zb0029 int
			var zb0030 bool
			zb0029, zb0030, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Managers")
				return
			}
			if zb0029 > MaxHoldingGroupSize {
				err = msgp.ErrOverflow(uint64(zb0029), uint64(MaxHoldingGroupSize))
				err = msgp.WrapError(err, "struct-from-array", "Managers")
				return
			}
			if zb0030 {
				(*z).Managers = nil
			} else if (*z).Managers != nil && cap((*z).Managers) >= zb0029 {
				(*z).Managers = ((*z).Managers)[:zb0029]
			} else {
				(*z).Managers = make([]basics.Address, zb0029)
			}
			for zb0009 := range (*z).Managers {
				bts, err = (*z).Managers[zb0009].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Managers", zb0009)
					return
				}
			}
		}
		if zb0013 > 0 {
			zb0013--
			var zb0031 int
			var zb0032 bool
			zb0031, zb0032, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Reserves")
				return
			}
			if zb0031 > MaxHoldingGroupSize {
				err = msgp.ErrOverflow(uint64(zb0031), uint64(MaxHoldingGroupSize))
				err = msgp.WrapError(err, "struct-from-array", "Reserves")
				return
			}
			if zb0032 {
				(*z).Reserves = nil
			} else if (*z).Reserves != nil && cap((*z).Reserves) >= zb0031 {
				(*z).Reserves = ((*z).Reserves)[:zb0031]
			} else {
				(*z).Reserves = make([]basics.Address, zb0031)
			}
			for zb0010 := range (*z).Reserves {
				bts, err = (*z).Reserves[zb0010].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Reserves", zb0010)
					return
				}
			}
		}
		if zb0013 > 0 {
			zb0013--
			var zb0033 int
			var zb0034 bool
			zb0033, zb0034, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Freezes")
				return
			}
			if zb0033 > MaxHoldingGroupSize {
				err = msgp.ErrOverflow(uint64(zb0033), uint64(MaxHoldingGroupSize))
				err = msgp.WrapError(err, "struct-from-array", "Freezes")
				return
			}
			if zb0034 {
				(*z).Freezes = nil
			} else if (*z).Freezes != nil && cap((*z).Freezes) >= zb0033 {
				(*z).Freezes = ((*z).Freezes)[:zb0033]
			} else {
				(*z).Freezes = make([]basics.Address, zb0033)
			}
			for zb0011 := range (*z).Freezes {
				bts, err = (*z).Freezes[zb0011].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Freezes", zb0011)
					return
				}
			}
		}
		if zb0013 > 0 {
			zb0013--
			var zb0035 int
			var zb0036 bool
			zb0035, zb0036, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Clawbacks")
				return
			}
			if zb0035 > MaxHoldingGroupSize {
				err = msgp.ErrOverflow(uint64(zb0035), uint64(MaxHoldingGroupSize))
				err = msgp.WrapError(err, "struct-from-array", "Clawbacks")
				return
			}
			if zb0036 {
				(*z).Clawbacks = nil
			} else if (*z).Clawbacks != nil && cap((*z).Clawbacks) >= zb0035 {
				(*z).Clawbacks = ((*z).Clawbacks)[:zb0035]
			} else {
				(*z).Clawbacks = make([]basics.Address, zb0035)
			}
			for zb0012 := range (*z).Clawbacks {
				bts, err = (*z).Clawbacks[zb0012].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Clawbacks", zb0012)
					return
				}
			}
		}
		if zb0013 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0013)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0014 {
			(*z) = AssetsParamGroupData{}
		}
		for zb0013 > 0 {
			zb0013--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "ao":
				var zb0037 int
				var zb0038 bool
				zb0037, zb0038, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetOffsets")
					return
				}
				if zb0037 > MaxHoldingGroupSize {
					err = msgp.ErrOverflow(uint64(zb0037), uint64(MaxHoldingGroupSize))
					err = msgp.WrapError(err, "AssetOffsets")
					return
				}
				if zb0038 {
					(*z).AssetsCommonGroupData.AssetOffsets = nil
				} else if (*z).AssetsCommonGroupData.AssetOffsets != nil && cap((*z).AssetsCommonGroupData.AssetOffsets) >= zb0037 {
					(*z).AssetsCommonGroupData.AssetOffsets = ((*z).AssetsCommonGroupData.AssetOffsets)[:zb0037]
				} else {
					(*z).AssetsCommonGroupData.AssetOffsets = make([]basics.AssetIndex, zb0037)
				}
				for zb0001 := range (*z).AssetsCommonGroupData.AssetOffsets {
					bts, err = (*z).AssetsCommonGroupData.AssetOffsets[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "AssetOffsets", zb0001)
						return
					}
				}
			case "t":
				var zb0039 int
				var zb0040 bool
				zb0039, zb0040, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Totals")
					return
				}
				if zb0039 > MaxHoldingGroupSize {
					err = msgp.ErrOverflow(uint64(zb0039), uint64(MaxHoldingGroupSize))
					err = msgp.WrapError(err, "Totals")
					return
				}
				if zb0040 {
					(*z).Totals = nil
				} else if (*z).Totals != nil && cap((*z).Totals) >= zb0039 {
					(*z).Totals = ((*z).Totals)[:zb0039]
				} else {
					(*z).Totals = make([]uint64, zb0039)
				}
				for zb0002 := range (*z).Totals {
					(*z).Totals[zb0002], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Totals", zb0002)
						return
					}
				}
			case "f":
				var zb0041 int
				var zb0042 bool
				zb0041, zb0042, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DefaultFrozens")
					return
				}
				if zb0041 > MaxHoldingGroupSize {
					err = msgp.ErrOverflow(uint64(zb0041), uint64(MaxHoldingGroupSize))
					err = msgp.WrapError(err, "DefaultFrozens")
					return
				}
				if zb0042 {
					(*z).DefaultFrozens = nil
				} else if (*z).DefaultFrozens != nil && cap((*z).DefaultFrozens) >= zb0041 {
					(*z).DefaultFrozens = ((*z).DefaultFrozens)[:zb0041]
				} else {
					(*z).DefaultFrozens = make([]bool, zb0041)
				}
				for zb0003 := range (*z).DefaultFrozens {
					(*z).DefaultFrozens[zb0003], bts, err = msgp.ReadBoolBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "DefaultFrozens", zb0003)
						return
					}
				}
			case "u":
				var zb0043 int
				var zb0044 bool
				zb0043, zb0044, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "UnitNames")
					return
				}
				if zb0043 > MaxHoldingGroupSize {
					err = msgp.ErrOverflow(uint64(zb0043), uint64(MaxHoldingGroupSize))
					err = msgp.WrapError(err, "UnitNames")
					return
				}
				if zb0044 {
					(*z).UnitNames = nil
				} else if (*z).UnitNames != nil && cap((*z).UnitNames) >= zb0043 {
					(*z).UnitNames = ((*z).UnitNames)[:zb0043]
				} else {
					(*z).UnitNames = make([]string, zb0043)
				}
				for zb0004 := range (*z).UnitNames {
					(*z).UnitNames[zb0004], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "UnitNames", zb0004)
						return
					}
				}
			case "n":
				var zb0045 int
				var zb0046 bool
				zb0045, zb0046, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetNames")
					return
				}
				if zb0045 > MaxHoldingGroupSize {
					err = msgp.ErrOverflow(uint64(zb0045), uint64(MaxHoldingGroupSize))
					err = msgp.WrapError(err, "AssetNames")
					return
				}
				if zb0046 {
					(*z).AssetNames = nil
				} else if (*z).AssetNames != nil && cap((*z).AssetNames) >= zb0045 {
					(*z).AssetNames = ((*z).AssetNames)[:zb0045]
				} else {
					(*z).AssetNames = make([]string, zb0045)
				}
				for zb0005 := range (*z).AssetNames {
					(*z).AssetNames[zb0005], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "AssetNames", zb0005)
						return
					}
				}
			case "l":
				var zb0047 int
				var zb0048 bool
				zb0047, zb0048, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "URLs")
					return
				}
				if zb0047 > MaxHoldingGroupSize {
					err = msgp.ErrOverflow(uint64(zb0047), uint64(MaxHoldingGroupSize))
					err = msgp.WrapError(err, "URLs")
					return
				}
				if zb0048 {
					(*z).URLs = nil
				} else if (*z).URLs != nil && cap((*z).URLs) >= zb0047 {
					(*z).URLs = ((*z).URLs)[:zb0047]
				} else {
					(*z).URLs = make([]string, zb0047)
				}
				for zb0006 := range (*z).URLs {
					(*z).URLs[zb0006], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "URLs", zb0006)
						return
					}
				}
			case "h":
				var zb0049 int
				var zb0050 bool
				zb0049, zb0050, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MetadataHash")
					return
				}
				if zb0049 > MaxHoldingGroupSize {
					err = msgp.ErrOverflow(uint64(zb0049), uint64(MaxHoldingGroupSize))
					err = msgp.WrapError(err, "MetadataHash")
					return
				}
				if zb0050 {
					(*z).MetadataHash = nil
				} else if (*z).MetadataHash != nil && cap((*z).MetadataHash) >= zb0049 {
					(*z).MetadataHash = ((*z).MetadataHash)[:zb0049]
				} else {
					(*z).MetadataHash = make([][32]byte, zb0049)
				}
				for zb0007 := range (*z).MetadataHash {
					bts, err = msgp.ReadExactBytes(bts, ((*z).MetadataHash[zb0007])[:])
					if err != nil {
						err = msgp.WrapError(err, "MetadataHash", zb0007)
						return
					}
				}
			case "m":
				var zb0051 int
				var zb0052 bool
				zb0051, zb0052, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Managers")
					return
				}
				if zb0051 > MaxHoldingGroupSize {
					err = msgp.ErrOverflow(uint64(zb0051), uint64(MaxHoldingGroupSize))
					err = msgp.WrapError(err, "Managers")
					return
				}
				if zb0052 {
					(*z).Managers = nil
				} else if (*z).Managers != nil && cap((*z).Managers) >= zb0051 {
					(*z).Managers = ((*z).Managers)[:zb0051]
				} else {
					(*z).Managers = make([]basics.Address, zb0051)
				}
				for zb0009 := range (*z).Managers {
					bts, err = (*z).Managers[zb0009].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Managers", zb0009)
						return
					}
				}
			case "r":
				var zb0053 int
				var zb0054 bool
				zb0053, zb0054, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Reserves")
					return
				}
				if zb0053 > MaxHoldingGroupSize {
					err = msgp.ErrOverflow(uint64(zb0053), uint64(MaxHoldingGroupSize))
					err = msgp.WrapError(err, "Reserves")
					return
				}
				if zb0054 {
					(*z).Reserves = nil
				} else if (*z).Reserves != nil && cap((*z).Reserves) >= zb0053 {
					(*z).Reserves = ((*z).Reserves)[:zb0053]
				} else {
					(*z).Reserves = make([]basics.Address, zb0053)
				}
				for zb0010 := range (*z).Reserves {
					bts, err = (*z).Reserves[zb0010].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Reserves", zb0010)
						return
					}
				}
			case "z":
				var zb0055 int
				var zb0056 bool
				zb0055, zb0056, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Freezes")
					return
				}
				if zb0055 > MaxHoldingGroupSize {
					err = msgp.ErrOverflow(uint64(zb0055), uint64(MaxHoldingGroupSize))
					err = msgp.WrapError(err, "Freezes")
					return
				}
				if zb0056 {
					(*z).Freezes = nil
				} else if (*z).Freezes != nil && cap((*z).Freezes) >= zb0055 {
					(*z).Freezes = ((*z).Freezes)[:zb0055]
				} else {
					(*z).Freezes = make([]basics.Address, zb0055)
				}
				for zb0011 := range (*z).Freezes {
					bts, err = (*z).Freezes[zb0011].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Freezes", zb0011)
						return
					}
				}
			case "c":
				var zb0057 int
				var zb0058 bool
				zb0057, zb0058, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Clawbacks")
					return
				}
				if zb0057 > MaxHoldingGroupSize {
					err = msgp.ErrOverflow(uint64(zb0057), uint64(MaxHoldingGroupSize))
					err = msgp.WrapError(err, "Clawbacks")
					return
				}
				if zb0058 {
					(*z).Clawbacks = nil
				} else if (*z).Clawbacks != nil && cap((*z).Clawbacks) >= zb0057 {
					(*z).Clawbacks = ((*z).Clawbacks)[:zb0057]
				} else {
					(*z).Clawbacks = make([]basics.Address, zb0057)
				}
				for zb0012 := range (*z).Clawbacks {
					bts, err = (*z).Clawbacks[zb0012].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Clawbacks", zb0012)
						return
					}
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *AssetsParamGroupData) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetsParamGroupData)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AssetsParamGroupData) Msgsize() (s int) {
	s = 1 + 3 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).AssetsCommonGroupData.AssetOffsets {
		s += (*z).AssetsCommonGroupData.AssetOffsets[zb0001].Msgsize()
	}
	s += 2 + msgp.ArrayHeaderSize + (len((*z).Totals) * (msgp.Uint64Size)) + 2 + msgp.ArrayHeaderSize + (len((*z).DefaultFrozens) * (msgp.BoolSize)) + 2 + msgp.ArrayHeaderSize
	for zb0004 := range (*z).UnitNames {
		s += msgp.StringPrefixSize + len((*z).UnitNames[zb0004])
	}
	s += 2 + msgp.ArrayHeaderSize
	for zb0005 := range (*z).AssetNames {
		s += msgp.StringPrefixSize + len((*z).AssetNames[zb0005])
	}
	s += 2 + msgp.ArrayHeaderSize
	for zb0006 := range (*z).URLs {
		s += msgp.StringPrefixSize + len((*z).URLs[zb0006])
	}
	s += 2 + msgp.ArrayHeaderSize + (len((*z).MetadataHash) * (32 * (msgp.ByteSize))) + 2 + msgp.ArrayHeaderSize
	for zb0009 := range (*z).Managers {
		s += (*z).Managers[zb0009].Msgsize()
	}
	s += 2 + msgp.ArrayHeaderSize
	for zb0010 := range (*z).Reserves {
		s += (*z).Reserves[zb0010].Msgsize()
	}
	s += 2 + msgp.ArrayHeaderSize
	for zb0011 := range (*z).Freezes {
		s += (*z).Freezes[zb0011].Msgsize()
	}
	s += 2 + msgp.ArrayHeaderSize
	for zb0012 := range (*z).Clawbacks {
		s += (*z).Clawbacks[zb0012].Msgsize()
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z *AssetsParamGroupData) MsgIsZero() bool {
	return (len((*z).AssetsCommonGroupData.AssetOffsets) == 0) && (len((*z).Totals) == 0) && (len((*z).DefaultFrozens) == 0) && (len((*z).UnitNames) == 0) && (len((*z).AssetNames) == 0) && (len((*z).URLs) == 0) && (len((*z).MetadataHash) == 0) && (len((*z).Managers) == 0) && (len((*z).Reserves) == 0) && (len((*z).Freezes) == 0) && (len((*z).Clawbacks) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *ExtendedAssetHolding) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0002Len := uint32(2)
	var zb0002Mask uint8 /* 3 bits */
	if (*z).Count == 0 {
		zb0002Len--
		zb0002Mask |= 0x2
	}
	if len((*z).Groups) == 0 {
		zb0002Len--
		zb0002Mask |= 0x4
	}
	// variable map header, size zb0002Len
	o = append(o, 0x80|uint8(zb0002Len))
	if zb0002Len != 0 {
		if (zb0002Mask & 0x2) == 0 { // if not empty
			// string "c"
			o = append(o, 0xa1, 0x63)
			o = msgp.AppendUint32(o, (*z).Count)
		}
		if (zb0002Mask & 0x4) == 0 { // if not empty
			// string "gs"
			o = append(o, 0xa2, 0x67, 0x73)
			if (*z).Groups == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Groups)))
			}
			for zb0001 := range (*z).Groups {
				o = (*z).Groups[zb0001].MarshalMsg(o)
			}
		}
	}
	return
}

func (_ *ExtendedAssetHolding) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*ExtendedAssetHolding)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ExtendedAssetHolding) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0002 int
	var zb0003 bool
	zb0002, zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0002, zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 > 0 {
			zb0002--
			(*z).Count, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Count")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			var zb0004 int
			var zb0005 bool
			zb0004, zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Groups")
				return
			}
			if zb0004 > maxEncodedGroupsSize {
				err = msgp.ErrOverflow(uint64(zb0004), uint64(maxEncodedGroupsSize))
				err = msgp.WrapError(err, "struct-from-array", "Groups")
				return
			}
			if zb0005 {
				(*z).Groups = nil
			} else if (*z).Groups != nil && cap((*z).Groups) >= zb0004 {
				(*z).Groups = ((*z).Groups)[:zb0004]
			} else {
				(*z).Groups = make([]AssetsHoldingGroup, zb0004)
			}
			for zb0001 := range (*z).Groups {
				bts, err = (*z).Groups[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Groups", zb0001)
					return
				}
			}
		}
		if zb0002 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0002)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0003 {
			(*z) = ExtendedAssetHolding{}
		}
		for zb0002 > 0 {
			zb0002--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "c":
				(*z).Count, bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Count")
					return
				}
			case "gs":
				var zb0006 int
				var zb0007 bool
				zb0006, zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Groups")
					return
				}
				if zb0006 > maxEncodedGroupsSize {
					err = msgp.ErrOverflow(uint64(zb0006), uint64(maxEncodedGroupsSize))
					err = msgp.WrapError(err, "Groups")
					return
				}
				if zb0007 {
					(*z).Groups = nil
				} else if (*z).Groups != nil && cap((*z).Groups) >= zb0006 {
					(*z).Groups = ((*z).Groups)[:zb0006]
				} else {
					(*z).Groups = make([]AssetsHoldingGroup, zb0006)
				}
				for zb0001 := range (*z).Groups {
					bts, err = (*z).Groups[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Groups", zb0001)
						return
					}
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *ExtendedAssetHolding) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*ExtendedAssetHolding)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ExtendedAssetHolding) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint32Size + 3 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).Groups {
		s += (*z).Groups[zb0001].Msgsize()
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z *ExtendedAssetHolding) MsgIsZero() bool {
	return ((*z).Count == 0) && (len((*z).Groups) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *ExtendedAssetParam) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0002Len := uint32(2)
	var zb0002Mask uint8 /* 3 bits */
	if (*z).Count == 0 {
		zb0002Len--
		zb0002Mask |= 0x2
	}
	if len((*z).Groups) == 0 {
		zb0002Len--
		zb0002Mask |= 0x4
	}
	// variable map header, size zb0002Len
	o = append(o, 0x80|uint8(zb0002Len))
	if zb0002Len != 0 {
		if (zb0002Mask & 0x2) == 0 { // if not empty
			// string "c"
			o = append(o, 0xa1, 0x63)
			o = msgp.AppendUint32(o, (*z).Count)
		}
		if (zb0002Mask & 0x4) == 0 { // if not empty
			// string "gs"
			o = append(o, 0xa2, 0x67, 0x73)
			if (*z).Groups == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Groups)))
			}
			for zb0001 := range (*z).Groups {
				o = (*z).Groups[zb0001].MarshalMsg(o)
			}
		}
	}
	return
}

func (_ *ExtendedAssetParam) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*ExtendedAssetParam)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ExtendedAssetParam) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0002 int
	var zb0003 bool
	zb0002, zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0002, zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 > 0 {
			zb0002--
			(*z).Count, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Count")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			var zb0004 int
			var zb0005 bool
			zb0004, zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Groups")
				return
			}
			if zb0004 > 4096 {
				err = msgp.ErrOverflow(uint64(zb0004), uint64(4096))
				err = msgp.WrapError(err, "struct-from-array", "Groups")
				return
			}
			if zb0005 {
				(*z).Groups = nil
			} else if (*z).Groups != nil && cap((*z).Groups) >= zb0004 {
				(*z).Groups = ((*z).Groups)[:zb0004]
			} else {
				(*z).Groups = make([]AssetsParamGroup, zb0004)
			}
			for zb0001 := range (*z).Groups {
				bts, err = (*z).Groups[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Groups", zb0001)
					return
				}
			}
		}
		if zb0002 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0002)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0003 {
			(*z) = ExtendedAssetParam{}
		}
		for zb0002 > 0 {
			zb0002--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "c":
				(*z).Count, bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Count")
					return
				}
			case "gs":
				var zb0006 int
				var zb0007 bool
				zb0006, zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Groups")
					return
				}
				if zb0006 > 4096 {
					err = msgp.ErrOverflow(uint64(zb0006), uint64(4096))
					err = msgp.WrapError(err, "Groups")
					return
				}
				if zb0007 {
					(*z).Groups = nil
				} else if (*z).Groups != nil && cap((*z).Groups) >= zb0006 {
					(*z).Groups = ((*z).Groups)[:zb0006]
				} else {
					(*z).Groups = make([]AssetsParamGroup, zb0006)
				}
				for zb0001 := range (*z).Groups {
					bts, err = (*z).Groups[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Groups", zb0001)
						return
					}
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *ExtendedAssetParam) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*ExtendedAssetParam)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ExtendedAssetParam) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint32Size + 3 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).Groups {
		s += (*z).Groups[zb0001].Msgsize()
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z *ExtendedAssetParam) MsgIsZero() bool {
	return ((*z).Count == 0) && (len((*z).Groups) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *PersistedAccountData) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0009Len := uint32(17)
	var zb0009Mask uint32 /* 19 bits */
	if (*z).AccountData.MicroAlgos.MsgIsZero() {
		zb0009Len--
		zb0009Mask |= 0x4
	}
	if len((*z).AccountData.AssetParams) == 0 {
		zb0009Len--
		zb0009Mask |= 0x8
	}
	if len((*z).AccountData.AppLocalStates) == 0 {
		zb0009Len--
		zb0009Mask |= 0x10
	}
	if len((*z).AccountData.AppParams) == 0 {
		zb0009Len--
		zb0009Mask |= 0x20
	}
	if len((*z).AccountData.Assets) == 0 {
		zb0009Len--
		zb0009Mask |= 0x40
	}
	if (*z).ExtendedAssetHolding.MsgIsZero() {
		zb0009Len--
		zb0009Mask |= 0x80
	}
	if (*z).ExtendedAssetParam.MsgIsZero() {
		zb0009Len--
		zb0009Mask |= 0x100
	}
	if (*z).AccountData.RewardsBase == 0 {
		zb0009Len--
		zb0009Mask |= 0x200
	}
	if (*z).AccountData.RewardedMicroAlgos.MsgIsZero() {
		zb0009Len--
		zb0009Mask |= 0x400
	}
	if (*z).AccountData.Status.MsgIsZero() {
		zb0009Len--
		zb0009Mask |= 0x800
	}
	if (*z).AccountData.SelectionID.MsgIsZero() {
		zb0009Len--
		zb0009Mask |= 0x1000
	}
	if (*z).AccountData.AuthAddr.MsgIsZero() {
		zb0009Len--
		zb0009Mask |= 0x2000
	}
	if (*z).AccountData.TotalAppSchema.MsgIsZero() {
		zb0009Len--
		zb0009Mask |= 0x4000
	}
	if (*z).AccountData.VoteID.MsgIsZero() {
		zb0009Len--
		zb0009Mask |= 0x8000
	}
	if (*z).AccountData.VoteFirstValid.MsgIsZero() {
		zb0009Len--
		zb0009Mask |= 0x10000
	}
	if (*z).AccountData.VoteKeyDilution == 0 {
		zb0009Len--
		zb0009Mask |= 0x20000
	}
	if (*z).AccountData.VoteLastValid.MsgIsZero() {
		zb0009Len--
		zb0009Mask |= 0x40000
	}
	// variable map header, size zb0009Len
	o = msgp.AppendMapHeader(o, zb0009Len)
	if zb0009Len != 0 {
		if (zb0009Mask & 0x4) == 0 { // if not empty
			// string "algo"
			o = append(o, 0xa4, 0x61, 0x6c, 0x67, 0x6f)
			o = (*z).AccountData.MicroAlgos.MarshalMsg(o)
		}
		if (zb0009Mask & 0x8) == 0 { // if not empty
			// string "apar"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x72)
			if (*z).AccountData.AssetParams == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendMapHeader(o, uint32(len((*z).AccountData.AssetParams)))
			}
			zb0001_keys := make([]basics.AssetIndex, 0, len((*z).AccountData.AssetParams))
			for zb0001 := range (*z).AccountData.AssetParams {
				zb0001_keys = append(zb0001_keys, zb0001)
			}
			sort.Sort(SortAssetIndex(zb0001_keys))
			for _, zb0001 := range zb0001_keys {
				zb0002 := (*z).AccountData.AssetParams[zb0001]
				_ = zb0002
				o = zb0001.MarshalMsg(o)
				o = zb0002.MarshalMsg(o)
			}
		}
		if (zb0009Mask & 0x10) == 0 { // if not empty
			// string "appl"
			o = append(o, 0xa4, 0x61, 0x70, 0x70, 0x6c)
			if (*z).AccountData.AppLocalStates == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendMapHeader(o, uint32(len((*z).AccountData.AppLocalStates)))
			}
			zb0005_keys := make([]basics.AppIndex, 0, len((*z).AccountData.AppLocalStates))
			for zb0005 := range (*z).AccountData.AppLocalStates {
				zb0005_keys = append(zb0005_keys, zb0005)
			}
			sort.Sort(SortAppIndex(zb0005_keys))
			for _, zb0005 := range zb0005_keys {
				zb0006 := (*z).AccountData.AppLocalStates[zb0005]
				_ = zb0006
				o = zb0005.MarshalMsg(o)
				o = zb0006.MarshalMsg(o)
			}
		}
		if (zb0009Mask & 0x20) == 0 { // if not empty
			// string "appp"
			o = append(o, 0xa4, 0x61, 0x70, 0x70, 0x70)
			if (*z).AccountData.AppParams == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendMapHeader(o, uint32(len((*z).AccountData.AppParams)))
			}
			zb0007_keys := make([]basics.AppIndex, 0, len((*z).AccountData.AppParams))
			for zb0007 := range (*z).AccountData.AppParams {
				zb0007_keys = append(zb0007_keys, zb0007)
			}
			sort.Sort(SortAppIndex(zb0007_keys))
			for _, zb0007 := range zb0007_keys {
				zb0008 := (*z).AccountData.AppParams[zb0007]
				_ = zb0008
				o = zb0007.MarshalMsg(o)
				o = zb0008.MarshalMsg(o)
			}
		}
		if (zb0009Mask & 0x40) == 0 { // if not empty
			// string "asset"
			o = append(o, 0xa5, 0x61, 0x73, 0x73, 0x65, 0x74)
			if (*z).AccountData.Assets == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendMapHeader(o, uint32(len((*z).AccountData.Assets)))
			}
			zb0003_keys := make([]basics.AssetIndex, 0, len((*z).AccountData.Assets))
			for zb0003 := range (*z).AccountData.Assets {
				zb0003_keys = append(zb0003_keys, zb0003)
			}
			sort.Sort(SortAssetIndex(zb0003_keys))
			for _, zb0003 := range zb0003_keys {
				zb0004 := (*z).AccountData.Assets[zb0003]
				_ = zb0004
				o = zb0003.MarshalMsg(o)
				o = zb0004.MarshalMsg(o)
			}
		}
		if (zb0009Mask & 0x80) == 0 { // if not empty
			// string "eah"
			o = append(o, 0xa3, 0x65, 0x61, 0x68)
			o = (*z).ExtendedAssetHolding.MarshalMsg(o)
		}
		if (zb0009Mask & 0x100) == 0 { // if not empty
			// string "eap"
			o = append(o, 0xa3, 0x65, 0x61, 0x70)
			o = (*z).ExtendedAssetParam.MarshalMsg(o)
		}
		if (zb0009Mask & 0x200) == 0 { // if not empty
			// string "ebase"
			o = append(o, 0xa5, 0x65, 0x62, 0x61, 0x73, 0x65)
			o = msgp.AppendUint64(o, (*z).AccountData.RewardsBase)
		}
		if (zb0009Mask & 0x400) == 0 { // if not empty
			// string "ern"
			o = append(o, 0xa3, 0x65, 0x72, 0x6e)
			o = (*z).AccountData.RewardedMicroAlgos.MarshalMsg(o)
		}
		if (zb0009Mask & 0x800) == 0 { // if not empty
			// string "onl"
			o = append(o, 0xa3, 0x6f, 0x6e, 0x6c)
			o = (*z).AccountData.Status.MarshalMsg(o)
		}
		if (zb0009Mask & 0x1000) == 0 { // if not empty
			// string "sel"
			o = append(o, 0xa3, 0x73, 0x65, 0x6c)
			o = (*z).AccountData.SelectionID.MarshalMsg(o)
		}
		if (zb0009Mask & 0x2000) == 0 { // if not empty
			// string "spend"
			o = append(o, 0xa5, 0x73, 0x70, 0x65, 0x6e, 0x64)
			o = (*z).AccountData.AuthAddr.MarshalMsg(o)
		}
		if (zb0009Mask & 0x4000) == 0 { // if not empty
			// string "tsch"
			o = append(o, 0xa4, 0x74, 0x73, 0x63, 0x68)
			o = (*z).AccountData.TotalAppSchema.MarshalMsg(o)
		}
		if (zb0009Mask & 0x8000) == 0 { // if not empty
			// string "vote"
			o = append(o, 0xa4, 0x76, 0x6f, 0x74, 0x65)
			o = (*z).AccountData.VoteID.MarshalMsg(o)
		}
		if (zb0009Mask & 0x10000) == 0 { // if not empty
			// string "voteFst"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x46, 0x73, 0x74)
			o = (*z).AccountData.VoteFirstValid.MarshalMsg(o)
		}
		if (zb0009Mask & 0x20000) == 0 { // if not empty
			// string "voteKD"
			o = append(o, 0xa6, 0x76, 0x6f, 0x74, 0x65, 0x4b, 0x44)
			o = msgp.AppendUint64(o, (*z).AccountData.VoteKeyDilution)
		}
		if (zb0009Mask & 0x40000) == 0 { // if not empty
			// string "voteLst"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x4c, 0x73, 0x74)
			o = (*z).AccountData.VoteLastValid.MarshalMsg(o)
		}
	}
	return
}

func (_ *PersistedAccountData) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*PersistedAccountData)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PersistedAccountData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0009 int
	var zb0010 bool
	zb0009, zb0010, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0009, zb0010, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0009 > 0 {
			zb0009--
			bts, err = (*z).AccountData.Status.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Status")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			bts, err = (*z).AccountData.MicroAlgos.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MicroAlgos")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			(*z).AccountData.RewardsBase, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RewardsBase")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			bts, err = (*z).AccountData.RewardedMicroAlgos.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RewardedMicroAlgos")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			bts, err = (*z).AccountData.VoteID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteID")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			bts, err = (*z).AccountData.SelectionID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SelectionID")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			bts, err = (*z).AccountData.VoteFirstValid.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteFirstValid")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			bts, err = (*z).AccountData.VoteLastValid.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteLastValid")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			(*z).AccountData.VoteKeyDilution, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteKeyDilution")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			var zb0011 int
			var zb0012 bool
			zb0011, zb0012, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetParams")
				return
			}
			if zb0011 > EncodedMaxAssetsPerAccount {
				err = msgp.ErrOverflow(uint64(zb0011), uint64(EncodedMaxAssetsPerAccount))
				err = msgp.WrapError(err, "struct-from-array", "AssetParams")
				return
			}
			if zb0012 {
				(*z).AccountData.AssetParams = nil
			} else if (*z).AccountData.AssetParams == nil {
				(*z).AccountData.AssetParams = make(map[basics.AssetIndex]basics.AssetParams, zb0011)
			}
			for zb0011 > 0 {
				var zb0001 basics.AssetIndex
				var zb0002 basics.AssetParams
				zb0011--
				bts, err = zb0001.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AssetParams")
					return
				}
				bts, err = zb0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AssetParams", zb0001)
					return
				}
				(*z).AccountData.AssetParams[zb0001] = zb0002
			}
		}
		if zb0009 > 0 {
			zb0009--
			var zb0013 int
			var zb0014 bool
			zb0013, zb0014, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Assets")
				return
			}
			if zb0013 > EncodedMaxAssetsPerAccount {
				err = msgp.ErrOverflow(uint64(zb0013), uint64(EncodedMaxAssetsPerAccount))
				err = msgp.WrapError(err, "struct-from-array", "Assets")
				return
			}
			if zb0014 {
				(*z).AccountData.Assets = nil
			} else if (*z).AccountData.Assets == nil {
				(*z).AccountData.Assets = make(map[basics.AssetIndex]basics.AssetHolding, zb0013)
			}
			for zb0013 > 0 {
				var zb0003 basics.AssetIndex
				var zb0004 basics.AssetHolding
				zb0013--
				bts, err = zb0003.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Assets")
					return
				}
				bts, err = zb0004.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Assets", zb0003)
					return
				}
				(*z).AccountData.Assets[zb0003] = zb0004
			}
		}
		if zb0009 > 0 {
			zb0009--
			bts, err = (*z).AccountData.AuthAddr.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AuthAddr")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			var zb0015 int
			var zb0016 bool
			zb0015, zb0016, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AppLocalStates")
				return
			}
			if zb0015 > EncodedMaxAppLocalStates {
				err = msgp.ErrOverflow(uint64(zb0015), uint64(EncodedMaxAppLocalStates))
				err = msgp.WrapError(err, "struct-from-array", "AppLocalStates")
				return
			}
			if zb0016 {
				(*z).AccountData.AppLocalStates = nil
			} else if (*z).AccountData.AppLocalStates == nil {
				(*z).AccountData.AppLocalStates = make(map[basics.AppIndex]basics.AppLocalState, zb0015)
			}
			for zb0015 > 0 {
				var zb0005 basics.AppIndex
				var zb0006 basics.AppLocalState
				zb0015--
				bts, err = zb0005.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AppLocalStates")
					return
				}
				bts, err = zb0006.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AppLocalStates", zb0005)
					return
				}
				(*z).AccountData.AppLocalStates[zb0005] = zb0006
			}
		}
		if zb0009 > 0 {
			zb0009--
			var zb0017 int
			var zb0018 bool
			zb0017, zb0018, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AppParams")
				return
			}
			if zb0017 > EncodedMaxAppParams {
				err = msgp.ErrOverflow(uint64(zb0017), uint64(EncodedMaxAppParams))
				err = msgp.WrapError(err, "struct-from-array", "AppParams")
				return
			}
			if zb0018 {
				(*z).AccountData.AppParams = nil
			} else if (*z).AccountData.AppParams == nil {
				(*z).AccountData.AppParams = make(map[basics.AppIndex]basics.AppParams, zb0017)
			}
			for zb0017 > 0 {
				var zb0007 basics.AppIndex
				var zb0008 basics.AppParams
				zb0017--
				bts, err = zb0007.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AppParams")
					return
				}
				bts, err = zb0008.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AppParams", zb0007)
					return
				}
				(*z).AccountData.AppParams[zb0007] = zb0008
			}
		}
		if zb0009 > 0 {
			zb0009--
			bts, err = (*z).AccountData.TotalAppSchema.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TotalAppSchema")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			bts, err = (*z).ExtendedAssetHolding.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ExtendedAssetHolding")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			bts, err = (*z).ExtendedAssetParam.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ExtendedAssetParam")
				return
			}
		}
		if zb0009 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0009)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0010 {
			(*z) = PersistedAccountData{}
		}
		for zb0009 > 0 {
			zb0009--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "onl":
				bts, err = (*z).AccountData.Status.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
			case "algo":
				bts, err = (*z).AccountData.MicroAlgos.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "MicroAlgos")
					return
				}
			case "ebase":
				(*z).AccountData.RewardsBase, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RewardsBase")
					return
				}
			case "ern":
				bts, err = (*z).AccountData.RewardedMicroAlgos.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "RewardedMicroAlgos")
					return
				}
			case "vote":
				bts, err = (*z).AccountData.VoteID.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteID")
					return
				}
			case "sel":
				bts, err = (*z).AccountData.SelectionID.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "SelectionID")
					return
				}
			case "voteFst":
				bts, err = (*z).AccountData.VoteFirstValid.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteFirstValid")
					return
				}
			case "voteLst":
				bts, err = (*z).AccountData.VoteLastValid.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteLastValid")
					return
				}
			case "voteKD":
				(*z).AccountData.VoteKeyDilution, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteKeyDilution")
					return
				}
			case "apar":
				var zb0019 int
				var zb0020 bool
				zb0019, zb0020, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetParams")
					return
				}
				if zb0019 > EncodedMaxAssetsPerAccount {
					err = msgp.ErrOverflow(uint64(zb0019), uint64(EncodedMaxAssetsPerAccount))
					err = msgp.WrapError(err, "AssetParams")
					return
				}
				if zb0020 {
					(*z).AccountData.AssetParams = nil
				} else if (*z).AccountData.AssetParams == nil {
					(*z).AccountData.AssetParams = make(map[basics.AssetIndex]basics.AssetParams, zb0019)
				}
				for zb0019 > 0 {
					var zb0001 basics.AssetIndex
					var zb0002 basics.AssetParams
					zb0019--
					bts, err = zb0001.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "AssetParams")
						return
					}
					bts, err = zb0002.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "AssetParams", zb0001)
						return
					}
					(*z).AccountData.AssetParams[zb0001] = zb0002
				}
			case "asset":
				var zb0021 int
				var zb0022 bool
				zb0021, zb0022, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Assets")
					return
				}
				if zb0021 > EncodedMaxAssetsPerAccount {
					err = msgp.ErrOverflow(uint64(zb0021), uint64(EncodedMaxAssetsPerAccount))
					err = msgp.WrapError(err, "Assets")
					return
				}
				if zb0022 {
					(*z).AccountData.Assets = nil
				} else if (*z).AccountData.Assets == nil {
					(*z).AccountData.Assets = make(map[basics.AssetIndex]basics.AssetHolding, zb0021)
				}
				for zb0021 > 0 {
					var zb0003 basics.AssetIndex
					var zb0004 basics.AssetHolding
					zb0021--
					bts, err = zb0003.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Assets")
						return
					}
					bts, err = zb0004.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Assets", zb0003)
						return
					}
					(*z).AccountData.Assets[zb0003] = zb0004
				}
			case "spend":
				bts, err = (*z).AccountData.AuthAddr.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "AuthAddr")
					return
				}
			case "appl":
				var zb0023 int
				var zb0024 bool
				zb0023, zb0024, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppLocalStates")
					return
				}
				if zb0023 > EncodedMaxAppLocalStates {
					err = msgp.ErrOverflow(uint64(zb0023), uint64(EncodedMaxAppLocalStates))
					err = msgp.WrapError(err, "AppLocalStates")
					return
				}
				if zb0024 {
					(*z).AccountData.AppLocalStates = nil
				} else if (*z).AccountData.AppLocalStates == nil {
					(*z).AccountData.AppLocalStates = make(map[basics.AppIndex]basics.AppLocalState, zb0023)
				}
				for zb0023 > 0 {
					var zb0005 basics.AppIndex
					var zb0006 basics.AppLocalState
					zb0023--
					bts, err = zb0005.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "AppLocalStates")
						return
					}
					bts, err = zb0006.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "AppLocalStates", zb0005)
						return
					}
					(*z).AccountData.AppLocalStates[zb0005] = zb0006
				}
			case "appp":
				var zb0025 int
				var zb0026 bool
				zb0025, zb0026, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppParams")
					return
				}
				if zb0025 > EncodedMaxAppParams {
					err = msgp.ErrOverflow(uint64(zb0025), uint64(EncodedMaxAppParams))
					err = msgp.WrapError(err, "AppParams")
					return
				}
				if zb0026 {
					(*z).AccountData.AppParams = nil
				} else if (*z).AccountData.AppParams == nil {
					(*z).AccountData.AppParams = make(map[basics.AppIndex]basics.AppParams, zb0025)
				}
				for zb0025 > 0 {
					var zb0007 basics.AppIndex
					var zb0008 basics.AppParams
					zb0025--
					bts, err = zb0007.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "AppParams")
						return
					}
					bts, err = zb0008.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "AppParams", zb0007)
						return
					}
					(*z).AccountData.AppParams[zb0007] = zb0008
				}
			case "tsch":
				bts, err = (*z).AccountData.TotalAppSchema.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalAppSchema")
					return
				}
			case "eah":
				bts, err = (*z).ExtendedAssetHolding.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ExtendedAssetHolding")
					return
				}
			case "eap":
				bts, err = (*z).ExtendedAssetParam.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ExtendedAssetParam")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *PersistedAccountData) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*PersistedAccountData)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PersistedAccountData) Msgsize() (s int) {
	s = 3 + 4 + (*z).AccountData.Status.Msgsize() + 5 + (*z).AccountData.MicroAlgos.Msgsize() + 6 + msgp.Uint64Size + 4 + (*z).AccountData.RewardedMicroAlgos.Msgsize() + 5 + (*z).AccountData.VoteID.Msgsize() + 4 + (*z).AccountData.SelectionID.Msgsize() + 8 + (*z).AccountData.VoteFirstValid.Msgsize() + 8 + (*z).AccountData.VoteLastValid.Msgsize() + 7 + msgp.Uint64Size + 5 + msgp.MapHeaderSize
	if (*z).AccountData.AssetParams != nil {
		for zb0001, zb0002 := range (*z).AccountData.AssetParams {
			_ = zb0001
			_ = zb0002
			s += 0 + zb0001.Msgsize() + zb0002.Msgsize()
		}
	}
	s += 6 + msgp.MapHeaderSize
	if (*z).AccountData.Assets != nil {
		for zb0003, zb0004 := range (*z).AccountData.Assets {
			_ = zb0003
			_ = zb0004
			s += 0 + zb0003.Msgsize() + zb0004.Msgsize()
		}
	}
	s += 6 + (*z).AccountData.AuthAddr.Msgsize() + 5 + msgp.MapHeaderSize
	if (*z).AccountData.AppLocalStates != nil {
		for zb0005, zb0006 := range (*z).AccountData.AppLocalStates {
			_ = zb0005
			_ = zb0006
			s += 0 + zb0005.Msgsize() + zb0006.Msgsize()
		}
	}
	s += 5 + msgp.MapHeaderSize
	if (*z).AccountData.AppParams != nil {
		for zb0007, zb0008 := range (*z).AccountData.AppParams {
			_ = zb0007
			_ = zb0008
			s += 0 + zb0007.Msgsize() + zb0008.Msgsize()
		}
	}
	s += 5 + (*z).AccountData.TotalAppSchema.Msgsize() + 4 + (*z).ExtendedAssetHolding.Msgsize() + 4 + (*z).ExtendedAssetParam.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *PersistedAccountData) MsgIsZero() bool {
	return ((*z).AccountData.Status.MsgIsZero()) && ((*z).AccountData.MicroAlgos.MsgIsZero()) && ((*z).AccountData.RewardsBase == 0) && ((*z).AccountData.RewardedMicroAlgos.MsgIsZero()) && ((*z).AccountData.VoteID.MsgIsZero()) && ((*z).AccountData.SelectionID.MsgIsZero()) && ((*z).AccountData.VoteFirstValid.MsgIsZero()) && ((*z).AccountData.VoteLastValid.MsgIsZero()) && ((*z).AccountData.VoteKeyDilution == 0) && (len((*z).AccountData.AssetParams) == 0) && (len((*z).AccountData.Assets) == 0) && ((*z).AccountData.AuthAddr.MsgIsZero()) && (len((*z).AccountData.AppLocalStates) == 0) && (len((*z).AccountData.AppParams) == 0) && ((*z).AccountData.TotalAppSchema.MsgIsZero()) && ((*z).ExtendedAssetHolding.MsgIsZero()) && ((*z).ExtendedAssetParam.MsgIsZero())
}
