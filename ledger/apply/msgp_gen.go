package apply

// Code generated by github.com/algorand/msgp DO NOT EDIT.

import (
	// "sort"

	"github.com/algorand/go-algorand/data/basics"
	"github.com/algorand/msgp/msgp"
)

// The following msgp objects are implemented in this file:
// AccountData
//      |-----> (*) MarshalMsg
//      |-----> (*) CanMarshalMsg
//      |-----> (*) UnmarshalMsg
//      |-----> (*) CanUnmarshalMsg
//      |-----> (*) Msgsize
//      |-----> (*) MsgIsZero
//
// AppLocalState
//       |-----> (*) MarshalMsg
//       |-----> (*) CanMarshalMsg
//       |-----> (*) UnmarshalMsg
//       |-----> (*) CanUnmarshalMsg
//       |-----> (*) Msgsize
//       |-----> (*) MsgIsZero
//
// AppLocalStateSansKV
//          |-----> (*) MarshalMsg
//          |-----> (*) CanMarshalMsg
//          |-----> (*) UnmarshalMsg
//          |-----> (*) CanUnmarshalMsg
//          |-----> (*) Msgsize
//          |-----> (*) MsgIsZero
//
// AppParams
//     |-----> (*) MarshalMsg
//     |-----> (*) CanMarshalMsg
//     |-----> (*) UnmarshalMsg
//     |-----> (*) CanUnmarshalMsg
//     |-----> (*) Msgsize
//     |-----> (*) MsgIsZero
//
// AppParamsSansKV
//        |-----> (*) MarshalMsg
//        |-----> (*) CanMarshalMsg
//        |-----> (*) UnmarshalMsg
//        |-----> (*) CanUnmarshalMsg
//        |-----> (*) Msgsize
//        |-----> (*) MsgIsZero
//
// MiniAccountData
//        |-----> (*) MarshalMsg
//        |-----> (*) CanMarshalMsg
//        |-----> (*) UnmarshalMsg
//        |-----> (*) CanUnmarshalMsg
//        |-----> (*) Msgsize
//        |-----> (*) MsgIsZero
//

// MarshalMsg implements msgp.Marshaler
func (z *AccountData) MarshalMsg(b []byte) ([]byte, error) {
	return ((*(basics.AccountData))(z)).MarshalMsg(b)
}
func (_ *AccountData) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*AccountData)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AccountData) UnmarshalMsg(bts []byte) ([]byte, error) {
	return ((*(basics.AccountData))(z)).UnmarshalMsg(bts)
}
func (_ *AccountData) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*AccountData)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AccountData) Msgsize() int {
	return ((*(basics.AccountData))(z)).Msgsize()
}

// MsgIsZero returns whether this is a zero value
func (z *AccountData) MsgIsZero() bool {
	return ((*(basics.AccountData))(z)).MsgIsZero()
}

// MarshalMsg implements msgp.Marshaler
func (z *AppLocalState) MarshalMsg(b []byte) ([]byte, error) {
	return ((*(basics.AppLocalState))(z)).MarshalMsg(b)
}
func (_ *AppLocalState) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*AppLocalState)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AppLocalState) UnmarshalMsg(bts []byte) ([]byte, error) {
	return ((*(basics.AppLocalState))(z)).UnmarshalMsg(bts)
}
func (_ *AppLocalState) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*AppLocalState)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AppLocalState) Msgsize() int {
	return ((*(basics.AppLocalState))(z)).Msgsize()
}

// MsgIsZero returns whether this is a zero value
func (z *AppLocalState) MsgIsZero() bool {
	return ((*(basics.AppLocalState))(z)).MsgIsZero()
}

// MarshalMsg implements msgp.Marshaler
func (z *AppLocalStateSansKV) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(1)
	var zb0001Mask uint8 /* 2 bits */
	if (*z).Schema.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "hsch"
			o = append(o, 0xa4, 0x68, 0x73, 0x63, 0x68)
			o, err = (*z).Schema.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Schema")
				return
			}
		}
	}
	return
}

func (_ *AppLocalStateSansKV) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*AppLocalStateSansKV)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AppLocalStateSansKV) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Schema.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Schema")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = AppLocalStateSansKV{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "hsch":
				bts, err = (*z).Schema.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Schema")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *AppLocalStateSansKV) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*AppLocalStateSansKV)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AppLocalStateSansKV) Msgsize() (s int) {
	s = 1 + 5 + (*z).Schema.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *AppLocalStateSansKV) MsgIsZero() bool {
	return ((*z).Schema.MsgIsZero())
}

// MarshalMsg implements msgp.Marshaler
func (z *AppParams) MarshalMsg(b []byte) ([]byte, error) {
	return ((*(basics.AppParams))(z)).MarshalMsg(b)
}
func (_ *AppParams) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*AppParams)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AppParams) UnmarshalMsg(bts []byte) ([]byte, error) {
	return ((*(basics.AppParams))(z)).UnmarshalMsg(bts)
}
func (_ *AppParams) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*AppParams)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AppParams) Msgsize() int {
	return ((*(basics.AppParams))(z)).Msgsize()
}

// MsgIsZero returns whether this is a zero value
func (z *AppParams) MsgIsZero() bool {
	return ((*(basics.AppParams))(z)).MsgIsZero()
}

// MarshalMsg implements msgp.Marshaler
func (z *AppParamsSansKV) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 6 bits */
	if len((*z).ApprovalProgram) == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if len((*z).ClearStateProgram) == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if (*z).StateSchemas.GlobalStateSchema.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if (*z).StateSchemas.LocalStateSchema.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "approv"
			o = append(o, 0xa6, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76)
			o = msgp.AppendBytes(o, (*z).ApprovalProgram)
		}
		if (zb0001Mask & 0x8) == 0 { // if not empty
			// string "clearp"
			o = append(o, 0xa6, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x70)
			o = msgp.AppendBytes(o, (*z).ClearStateProgram)
		}
		if (zb0001Mask & 0x10) == 0 { // if not empty
			// string "gsch"
			o = append(o, 0xa4, 0x67, 0x73, 0x63, 0x68)
			o, err = (*z).StateSchemas.GlobalStateSchema.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "GlobalStateSchema")
				return
			}
		}
		if (zb0001Mask & 0x20) == 0 { // if not empty
			// string "lsch"
			o = append(o, 0xa4, 0x6c, 0x73, 0x63, 0x68)
			o, err = (*z).StateSchemas.LocalStateSchema.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "LocalStateSchema")
				return
			}
		}
	}
	return
}

func (_ *AppParamsSansKV) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*AppParamsSansKV)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AppParamsSansKV) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			(*z).ApprovalProgram, bts, err = msgp.ReadBytesBytes(bts, (*z).ApprovalProgram)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).ClearStateProgram, bts, err = msgp.ReadBytesBytes(bts, (*z).ClearStateProgram)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).StateSchemas.LocalStateSchema.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LocalStateSchema")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).StateSchemas.GlobalStateSchema.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GlobalStateSchema")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = AppParamsSansKV{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "approv":
				(*z).ApprovalProgram, bts, err = msgp.ReadBytesBytes(bts, (*z).ApprovalProgram)
				if err != nil {
					err = msgp.WrapError(err, "ApprovalProgram")
					return
				}
			case "clearp":
				(*z).ClearStateProgram, bts, err = msgp.ReadBytesBytes(bts, (*z).ClearStateProgram)
				if err != nil {
					err = msgp.WrapError(err, "ClearStateProgram")
					return
				}
			case "lsch":
				bts, err = (*z).StateSchemas.LocalStateSchema.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "LocalStateSchema")
					return
				}
			case "gsch":
				bts, err = (*z).StateSchemas.GlobalStateSchema.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "GlobalStateSchema")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *AppParamsSansKV) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*AppParamsSansKV)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AppParamsSansKV) Msgsize() (s int) {
	s = 1 + 7 + msgp.BytesPrefixSize + len((*z).ApprovalProgram) + 7 + msgp.BytesPrefixSize + len((*z).ClearStateProgram) + 5 + (*z).StateSchemas.LocalStateSchema.Msgsize() + 5 + (*z).StateSchemas.GlobalStateSchema.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *AppParamsSansKV) MsgIsZero() bool {
	return (len((*z).ApprovalProgram) == 0) && (len((*z).ClearStateProgram) == 0) && ((*z).StateSchemas.LocalStateSchema.MsgIsZero()) && ((*z).StateSchemas.GlobalStateSchema.MsgIsZero())
}

// MarshalMsg implements msgp.Marshaler
func (z *MiniAccountData) MarshalMsg(b []byte) (o []byte, err error) {
	// o = msgp.Require(b, z.Msgsize())
	// // omitempty: check for empty values
	// zb0009Len := uint32(15)
	// var zb0009Mask uint16 /* 16 bits */
	// if (*z).MicroAlgos.MsgIsZero() {
	// 	zb0009Len--
	// 	zb0009Mask |= 0x2
	// }
	// if len((*z).AssetParams) == 0 {
	// 	zb0009Len--
	// 	zb0009Mask |= 0x4
	// }
	// if len((*z).AppLocalStates) == 0 {
	// 	zb0009Len--
	// 	zb0009Mask |= 0x8
	// }
	// if len((*z).AppParams) == 0 {
	// 	zb0009Len--
	// 	zb0009Mask |= 0x10
	// }
	// if len((*z).Assets) == 0 {
	// 	zb0009Len--
	// 	zb0009Mask |= 0x20
	// }
	// if (*z).RewardsBase == 0 {
	// 	zb0009Len--
	// 	zb0009Mask |= 0x40
	// }
	// if (*z).RewardedMicroAlgos.MsgIsZero() {
	// 	zb0009Len--
	// 	zb0009Mask |= 0x80
	// }
	// if (*z).Status.MsgIsZero() {
	// 	zb0009Len--
	// 	zb0009Mask |= 0x100
	// }
	// if (*z).SelectionID.MsgIsZero() {
	// 	zb0009Len--
	// 	zb0009Mask |= 0x200
	// }
	// if (*z).AuthAddr.MsgIsZero() {
	// 	zb0009Len--
	// 	zb0009Mask |= 0x400
	// }
	// if (*z).TotalAppSchema.MsgIsZero() {
	// 	zb0009Len--
	// 	zb0009Mask |= 0x800
	// }
	// if (*z).VoteID.MsgIsZero() {
	// 	zb0009Len--
	// 	zb0009Mask |= 0x1000
	// }
	// if (*z).VoteFirstValid.MsgIsZero() {
	// 	zb0009Len--
	// 	zb0009Mask |= 0x2000
	// }
	// if (*z).VoteKeyDilution == 0 {
	// 	zb0009Len--
	// 	zb0009Mask |= 0x4000
	// }
	// if (*z).VoteLastValid.MsgIsZero() {
	// 	zb0009Len--
	// 	zb0009Mask |= 0x8000
	// }
	// // variable map header, size zb0009Len
	// o = append(o, 0x80|uint8(zb0009Len))
	// if zb0009Len != 0 {
	// 	if (zb0009Mask & 0x2) == 0 { // if not empty
	// 		// string "algo"
	// 		o = append(o, 0xa4, 0x61, 0x6c, 0x67, 0x6f)
	// 		o, err = (*z).MicroAlgos.MarshalMsg(o)
	// 		if err != nil {
	// 			err = msgp.WrapError(err, "MicroAlgos")
	// 			return
	// 		}
	// 	}
	// 	if (zb0009Mask & 0x4) == 0 { // if not empty
	// 		// string "apar"
	// 		o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x72)
	// 		if (*z).AssetParams == nil {
	// 			o = msgp.AppendNil(o)
	// 		} else {
	// 			o = msgp.AppendMapHeader(o, uint32(len((*z).AssetParams)))
	// 		}
	// 		zb0001_keys := make([]basics.AssetIndex, 0, len((*z).AssetParams))
	// 		for zb0001 := range (*z).AssetParams {
	// 			zb0001_keys = append(zb0001_keys, zb0001)
	// 		}
	// 		sort.Sort((zb0001_keys))
	// 		for _, zb0001 := range zb0001_keys {
	// 			zb0002 := (*z).AssetParams[zb0001]
	// 			_ = zb0002
	// 			o, err = zb0001.MarshalMsg(o)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "AssetParams", zb0001)
	// 				return
	// 			}
	// 			o, err = zb0002.MarshalMsg(o)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "AssetParams", zb0001)
	// 				return
	// 			}
	// 		}
	// 	}
	// 	if (zb0009Mask & 0x8) == 0 { // if not empty
	// 		// string "appl"
	// 		o = append(o, 0xa4, 0x61, 0x70, 0x70, 0x6c)
	// 		if (*z).AppLocalStates == nil {
	// 			o = msgp.AppendNil(o)
	// 		} else {
	// 			o = msgp.AppendMapHeader(o, uint32(len((*z).AppLocalStates)))
	// 		}
	// 		zb0005_keys := make([]basics.AppIndex, 0, len((*z).AppLocalStates))
	// 		for zb0005 := range (*z).AppLocalStates {
	// 			zb0005_keys = append(zb0005_keys, zb0005)
	// 		}
	// 		sort.Sort((zb0005_keys))
	// 		for _, zb0005 := range zb0005_keys {
	// 			zb0006 := (*z).AppLocalStates[zb0005]
	// 			_ = zb0006
	// 			o, err = zb0005.MarshalMsg(o)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "AppLocalStates", zb0005)
	// 				return
	// 			}
	// 			// omitempty: check for empty values
	// 			zb0010Len := uint32(1)
	// 			var zb0010Mask uint8 /* 2 bits */
	// 			if zb0006.Schema.MsgIsZero() {
	// 				zb0010Len--
	// 				zb0010Mask |= 0x2
	// 			}
	// 			// variable map header, size zb0010Len
	// 			o = append(o, 0x80|uint8(zb0010Len))
	// 			if zb0010Len != 0 {
	// 				if (zb0010Mask & 0x2) == 0 { // if not empty
	// 					// string "hsch"
	// 					o = append(o, 0xa4, 0x68, 0x73, 0x63, 0x68)
	// 					o, err = zb0006.Schema.MarshalMsg(o)
	// 					if err != nil {
	// 						err = msgp.WrapError(err, "AppLocalStates", zb0005, "Schema")
	// 						return
	// 					}
	// 				}
	// 			}
	// 		}
	// 	}
	// 	if (zb0009Mask & 0x10) == 0 { // if not empty
	// 		// string "appp"
	// 		o = append(o, 0xa4, 0x61, 0x70, 0x70, 0x70)
	// 		if (*z).AppParams == nil {
	// 			o = msgp.AppendNil(o)
	// 		} else {
	// 			o = msgp.AppendMapHeader(o, uint32(len((*z).AppParams)))
	// 		}
	// 		zb0007_keys := make([]basics.AppIndex, 0, len((*z).AppParams))
	// 		for zb0007 := range (*z).AppParams {
	// 			zb0007_keys = append(zb0007_keys, zb0007)
	// 		}
	// 		sort.Sort((zb0007_keys))
	// 		for _, zb0007 := range zb0007_keys {
	// 			zb0008 := (*z).AppParams[zb0007]
	// 			_ = zb0008
	// 			o, err = zb0007.MarshalMsg(o)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "AppParams", zb0007)
	// 				return
	// 			}
	// 			o, err = zb0008.MarshalMsg(o)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "AppParams", zb0007)
	// 				return
	// 			}
	// 		}
	// 	}
	// 	if (zb0009Mask & 0x20) == 0 { // if not empty
	// 		// string "asset"
	// 		o = append(o, 0xa5, 0x61, 0x73, 0x73, 0x65, 0x74)
	// 		if (*z).Assets == nil {
	// 			o = msgp.AppendNil(o)
	// 		} else {
	// 			o = msgp.AppendMapHeader(o, uint32(len((*z).Assets)))
	// 		}
	// 		zb0003_keys := make([]basics.AssetIndex, 0, len((*z).Assets))
	// 		for zb0003 := range (*z).Assets {
	// 			zb0003_keys = append(zb0003_keys, zb0003)
	// 		}
	// 		sort.Sort((zb0003_keys))
	// 		for _, zb0003 := range zb0003_keys {
	// 			zb0004 := (*z).Assets[zb0003]
	// 			_ = zb0004
	// 			o, err = zb0003.MarshalMsg(o)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "Assets", zb0003)
	// 				return
	// 			}
	// 			o, err = zb0004.MarshalMsg(o)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "Assets", zb0003)
	// 				return
	// 			}
	// 		}
	// 	}
	// 	if (zb0009Mask & 0x40) == 0 { // if not empty
	// 		// string "ebase"
	// 		o = append(o, 0xa5, 0x65, 0x62, 0x61, 0x73, 0x65)
	// 		o = msgp.AppendUint64(o, (*z).RewardsBase)
	// 	}
	// 	if (zb0009Mask & 0x80) == 0 { // if not empty
	// 		// string "ern"
	// 		o = append(o, 0xa3, 0x65, 0x72, 0x6e)
	// 		o, err = (*z).RewardedMicroAlgos.MarshalMsg(o)
	// 		if err != nil {
	// 			err = msgp.WrapError(err, "RewardedMicroAlgos")
	// 			return
	// 		}
	// 	}
	// 	if (zb0009Mask & 0x100) == 0 { // if not empty
	// 		// string "onl"
	// 		o = append(o, 0xa3, 0x6f, 0x6e, 0x6c)
	// 		o, err = (*z).Status.MarshalMsg(o)
	// 		if err != nil {
	// 			err = msgp.WrapError(err, "Status")
	// 			return
	// 		}
	// 	}
	// 	if (zb0009Mask & 0x200) == 0 { // if not empty
	// 		// string "sel"
	// 		o = append(o, 0xa3, 0x73, 0x65, 0x6c)
	// 		o, err = (*z).SelectionID.MarshalMsg(o)
	// 		if err != nil {
	// 			err = msgp.WrapError(err, "SelectionID")
	// 			return
	// 		}
	// 	}
	// 	if (zb0009Mask & 0x400) == 0 { // if not empty
	// 		// string "spend"
	// 		o = append(o, 0xa5, 0x73, 0x70, 0x65, 0x6e, 0x64)
	// 		o, err = (*z).AuthAddr.MarshalMsg(o)
	// 		if err != nil {
	// 			err = msgp.WrapError(err, "AuthAddr")
	// 			return
	// 		}
	// 	}
	// 	if (zb0009Mask & 0x800) == 0 { // if not empty
	// 		// string "tsch"
	// 		o = append(o, 0xa4, 0x74, 0x73, 0x63, 0x68)
	// 		o, err = (*z).TotalAppSchema.MarshalMsg(o)
	// 		if err != nil {
	// 			err = msgp.WrapError(err, "TotalAppSchema")
	// 			return
	// 		}
	// 	}
	// 	if (zb0009Mask & 0x1000) == 0 { // if not empty
	// 		// string "vote"
	// 		o = append(o, 0xa4, 0x76, 0x6f, 0x74, 0x65)
	// 		o, err = (*z).VoteID.MarshalMsg(o)
	// 		if err != nil {
	// 			err = msgp.WrapError(err, "VoteID")
	// 			return
	// 		}
	// 	}
	// 	if (zb0009Mask & 0x2000) == 0 { // if not empty
	// 		// string "voteFst"
	// 		o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x46, 0x73, 0x74)
	// 		o, err = (*z).VoteFirstValid.MarshalMsg(o)
	// 		if err != nil {
	// 			err = msgp.WrapError(err, "VoteFirstValid")
	// 			return
	// 		}
	// 	}
	// 	if (zb0009Mask & 0x4000) == 0 { // if not empty
	// 		// string "voteKD"
	// 		o = append(o, 0xa6, 0x76, 0x6f, 0x74, 0x65, 0x4b, 0x44)
	// 		o = msgp.AppendUint64(o, (*z).VoteKeyDilution)
	// 	}
	// 	if (zb0009Mask & 0x8000) == 0 { // if not empty
	// 		// string "voteLst"
	// 		o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x4c, 0x73, 0x74)
	// 		o, err = (*z).VoteLastValid.MarshalMsg(o)
	// 		if err != nil {
	// 			err = msgp.WrapError(err, "VoteLastValid")
	// 			return
	// 		}
	// 	}
	// }
	return
}

func (_ *MiniAccountData) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*MiniAccountData)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MiniAccountData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	// 	var field []byte
	// 	_ = field
	// 	var zb0009 int
	// 	var zb0010 bool
	// 	zb0009, zb0010, bts, err = msgp.ReadMapHeaderBytes(bts)
	// 	if _, ok := err.(msgp.TypeError); ok {
	// 		zb0009, zb0010, bts, err = msgp.ReadArrayHeaderBytes(bts)
	// 		if err != nil {
	// 			err = msgp.WrapError(err)
	// 			return
	// 		}
	// 		if zb0009 > 0 {
	// 			zb0009--
	// 			bts, err = (*z).Status.UnmarshalMsg(bts)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "struct-from-array", "Status")
	// 				return
	// 			}
	// 		}
	// 		if zb0009 > 0 {
	// 			zb0009--
	// 			bts, err = (*z).MicroAlgos.UnmarshalMsg(bts)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "struct-from-array", "MicroAlgos")
	// 				return
	// 			}
	// 		}
	// 		if zb0009 > 0 {
	// 			zb0009--
	// 			(*z).RewardsBase, bts, err = msgp.ReadUint64Bytes(bts)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "struct-from-array", "RewardsBase")
	// 				return
	// 			}
	// 		}
	// 		if zb0009 > 0 {
	// 			zb0009--
	// 			bts, err = (*z).RewardedMicroAlgos.UnmarshalMsg(bts)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "struct-from-array", "RewardedMicroAlgos")
	// 				return
	// 			}
	// 		}
	// 		if zb0009 > 0 {
	// 			zb0009--
	// 			bts, err = (*z).VoteID.UnmarshalMsg(bts)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "struct-from-array", "VoteID")
	// 				return
	// 			}
	// 		}
	// 		if zb0009 > 0 {
	// 			zb0009--
	// 			bts, err = (*z).SelectionID.UnmarshalMsg(bts)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "struct-from-array", "SelectionID")
	// 				return
	// 			}
	// 		}
	// 		if zb0009 > 0 {
	// 			zb0009--
	// 			bts, err = (*z).VoteFirstValid.UnmarshalMsg(bts)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "struct-from-array", "VoteFirstValid")
	// 				return
	// 			}
	// 		}
	// 		if zb0009 > 0 {
	// 			zb0009--
	// 			bts, err = (*z).VoteLastValid.UnmarshalMsg(bts)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "struct-from-array", "VoteLastValid")
	// 				return
	// 			}
	// 		}
	// 		if zb0009 > 0 {
	// 			zb0009--
	// 			(*z).VoteKeyDilution, bts, err = msgp.ReadUint64Bytes(bts)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "struct-from-array", "VoteKeyDilution")
	// 				return
	// 			}
	// 		}
	// 		if zb0009 > 0 {
	// 			zb0009--
	// 			var zb0011 int
	// 			var zb0012 bool
	// 			zb0011, zb0012, bts, err = msgp.ReadMapHeaderBytes(bts)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "struct-from-array", "AssetParams")
	// 				return
	// 			}
	// 			if zb0011 > encodedMaxAssetsPerAccount {
	// 				err = msgp.ErrOverflow(uint64(zb0011), uint64(encodedMaxAssetsPerAccount))
	// 				err = msgp.WrapError(err, "struct-from-array", "AssetParams")
	// 				return
	// 			}
	// 			if zb0012 {
	// 				(*z).AssetParams = nil
	// 			} else if (*z).AssetParams == nil {
	// 				(*z).AssetParams = make(map[basics.AssetIndex]basics.AssetParams, zb0011)
	// 			}
	// 			for zb0011 > 0 {
	// 				var zb0001 basics.AssetIndex
	// 				var zb0002 basics.AssetParams
	// 				zb0011--
	// 				bts, err = zb0001.UnmarshalMsg(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "struct-from-array", "AssetParams")
	// 					return
	// 				}
	// 				bts, err = zb0002.UnmarshalMsg(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "struct-from-array", "AssetParams", zb0001)
	// 					return
	// 				}
	// 				(*z).AssetParams[zb0001] = zb0002
	// 			}
	// 		}
	// 		if zb0009 > 0 {
	// 			zb0009--
	// 			var zb0013 int
	// 			var zb0014 bool
	// 			zb0013, zb0014, bts, err = msgp.ReadMapHeaderBytes(bts)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "struct-from-array", "Assets")
	// 				return
	// 			}
	// 			if zb0013 > encodedMaxAssetsPerAccount {
	// 				err = msgp.ErrOverflow(uint64(zb0013), uint64(encodedMaxAssetsPerAccount))
	// 				err = msgp.WrapError(err, "struct-from-array", "Assets")
	// 				return
	// 			}
	// 			if zb0014 {
	// 				(*z).Assets = nil
	// 			} else if (*z).Assets == nil {
	// 				(*z).Assets = make(map[basics.AssetIndex]basics.AssetHolding, zb0013)
	// 			}
	// 			for zb0013 > 0 {
	// 				var zb0003 basics.AssetIndex
	// 				var zb0004 basics.AssetHolding
	// 				zb0013--
	// 				bts, err = zb0003.UnmarshalMsg(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "struct-from-array", "Assets")
	// 					return
	// 				}
	// 				bts, err = zb0004.UnmarshalMsg(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "struct-from-array", "Assets", zb0003)
	// 					return
	// 				}
	// 				(*z).Assets[zb0003] = zb0004
	// 			}
	// 		}
	// 		if zb0009 > 0 {
	// 			zb0009--
	// 			bts, err = (*z).AuthAddr.UnmarshalMsg(bts)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "struct-from-array", "AuthAddr")
	// 				return
	// 			}
	// 		}
	// 		if zb0009 > 0 {
	// 			zb0009--
	// 			bts, err = (*z).TotalAppSchema.UnmarshalMsg(bts)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "struct-from-array", "TotalAppSchema")
	// 				return
	// 			}
	// 		}
	// 		if zb0009 > 0 {
	// 			zb0009--
	// 			var zb0015 int
	// 			var zb0016 bool
	// 			zb0015, zb0016, bts, err = msgp.ReadMapHeaderBytes(bts)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "struct-from-array", "AppLocalStates")
	// 				return
	// 			}
	// 			if zb0015 > encodedMaxAppLocalStates {
	// 				err = msgp.ErrOverflow(uint64(zb0015), uint64(encodedMaxAppLocalStates))
	// 				err = msgp.WrapError(err, "struct-from-array", "AppLocalStates")
	// 				return
	// 			}
	// 			if zb0016 {
	// 				(*z).AppLocalStates = nil
	// 			} else if (*z).AppLocalStates == nil {
	// 				(*z).AppLocalStates = make(map[basics.AppIndex]AppLocalStateSansKV, zb0015)
	// 			}
	// 			for zb0015 > 0 {
	// 				var zb0005 basics.AppIndex
	// 				var zb0006 AppLocalStateSansKV
	// 				zb0015--
	// 				bts, err = zb0005.UnmarshalMsg(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "struct-from-array", "AppLocalStates")
	// 					return
	// 				}
	// 				var zb0017 int
	// 				var zb0018 bool
	// 				zb0017, zb0018, bts, err = msgp.ReadMapHeaderBytes(bts)
	// 				if _, ok := err.(msgp.TypeError); ok {
	// 					zb0017, zb0018, bts, err = msgp.ReadArrayHeaderBytes(bts)
	// 					if err != nil {
	// 						err = msgp.WrapError(err, "struct-from-array", "AppLocalStates", zb0005)
	// 						return
	// 					}
	// 					if zb0017 > 0 {
	// 						zb0017--
	// 						bts, err = zb0006.Schema.UnmarshalMsg(bts)
	// 						if err != nil {
	// 							err = msgp.WrapError(err, "struct-from-array", "AppLocalStates", zb0005, "struct-from-array", "Schema")
	// 							return
	// 						}
	// 					}
	// 					if zb0017 > 0 {
	// 						err = msgp.ErrTooManyArrayFields(zb0017)
	// 						if err != nil {
	// 							err = msgp.WrapError(err, "struct-from-array", "AppLocalStates", zb0005, "struct-from-array")
	// 							return
	// 						}
	// 					}
	// 				} else {
	// 					if err != nil {
	// 						err = msgp.WrapError(err, "struct-from-array", "AppLocalStates", zb0005)
	// 						return
	// 					}
	// 					if zb0018 {
	// 						zb0006 = AppLocalStateSansKV{}
	// 					}
	// 					for zb0017 > 0 {
	// 						zb0017--
	// 						field, bts, err = msgp.ReadMapKeyZC(bts)
	// 						if err != nil {
	// 							err = msgp.WrapError(err, "struct-from-array", "AppLocalStates", zb0005)
	// 							return
	// 						}
	// 						switch string(field) {
	// 						case "hsch":
	// 							bts, err = zb0006.Schema.UnmarshalMsg(bts)
	// 							if err != nil {
	// 								err = msgp.WrapError(err, "struct-from-array", "AppLocalStates", zb0005, "Schema")
	// 								return
	// 							}
	// 						default:
	// 							err = msgp.ErrNoField(string(field))
	// 							if err != nil {
	// 								err = msgp.WrapError(err, "struct-from-array", "AppLocalStates", zb0005)
	// 								return
	// 							}
	// 						}
	// 					}
	// 				}
	// 				(*z).AppLocalStates[zb0005] = zb0006
	// 			}
	// 		}
	// 		if zb0009 > 0 {
	// 			zb0009--
	// 			var zb0019 int
	// 			var zb0020 bool
	// 			zb0019, zb0020, bts, err = msgp.ReadMapHeaderBytes(bts)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "struct-from-array", "AppParams")
	// 				return
	// 			}
	// 			if zb0019 > encodedMaxAppParams {
	// 				err = msgp.ErrOverflow(uint64(zb0019), uint64(encodedMaxAppParams))
	// 				err = msgp.WrapError(err, "struct-from-array", "AppParams")
	// 				return
	// 			}
	// 			if zb0020 {
	// 				(*z).AppParams = nil
	// 			} else if (*z).AppParams == nil {
	// 				(*z).AppParams = make(map[basics.AppIndex]AppParamsSansKV, zb0019)
	// 			}
	// 			for zb0019 > 0 {
	// 				var zb0007 basics.AppIndex
	// 				var zb0008 AppParamsSansKV
	// 				zb0019--
	// 				bts, err = zb0007.UnmarshalMsg(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "struct-from-array", "AppParams")
	// 					return
	// 				}
	// 				bts, err = zb0008.UnmarshalMsg(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "struct-from-array", "AppParams", zb0007)
	// 					return
	// 				}
	// 				(*z).AppParams[zb0007] = zb0008
	// 			}
	// 		}
	// 		if zb0009 > 0 {
	// 			err = msgp.ErrTooManyArrayFields(zb0009)
	// 			if err != nil {
	// 				err = msgp.WrapError(err, "struct-from-array")
	// 				return
	// 			}
	// 		}
	// 	} else {
	// 		if err != nil {
	// 			err = msgp.WrapError(err)
	// 			return
	// 		}
	// 		if zb0010 {
	// 			(*z) = MiniAccountData{}
	// 		}
	// 		for zb0009 > 0 {
	// 			zb0009--
	// 			field, bts, err = msgp.ReadMapKeyZC(bts)
	// 			if err != nil {
	// 				err = msgp.WrapError(err)
	// 				return
	// 			}
	// 			switch string(field) {
	// 			case "onl":
	// 				bts, err = (*z).Status.UnmarshalMsg(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "Status")
	// 					return
	// 				}
	// 			case "algo":
	// 				bts, err = (*z).MicroAlgos.UnmarshalMsg(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "MicroAlgos")
	// 					return
	// 				}
	// 			case "ebase":
	// 				(*z).RewardsBase, bts, err = msgp.ReadUint64Bytes(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "RewardsBase")
	// 					return
	// 				}
	// 			case "ern":
	// 				bts, err = (*z).RewardedMicroAlgos.UnmarshalMsg(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "RewardedMicroAlgos")
	// 					return
	// 				}
	// 			case "vote":
	// 				bts, err = (*z).VoteID.UnmarshalMsg(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "VoteID")
	// 					return
	// 				}
	// 			case "sel":
	// 				bts, err = (*z).SelectionID.UnmarshalMsg(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "SelectionID")
	// 					return
	// 				}
	// 			case "voteFst":
	// 				bts, err = (*z).VoteFirstValid.UnmarshalMsg(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "VoteFirstValid")
	// 					return
	// 				}
	// 			case "voteLst":
	// 				bts, err = (*z).VoteLastValid.UnmarshalMsg(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "VoteLastValid")
	// 					return
	// 				}
	// 			case "voteKD":
	// 				(*z).VoteKeyDilution, bts, err = msgp.ReadUint64Bytes(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "VoteKeyDilution")
	// 					return
	// 				}
	// 			case "apar":
	// 				var zb0021 int
	// 				var zb0022 bool
	// 				zb0021, zb0022, bts, err = msgp.ReadMapHeaderBytes(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "AssetParams")
	// 					return
	// 				}
	// 				if zb0021 > encodedMaxAssetsPerAccount {
	// 					err = msgp.ErrOverflow(uint64(zb0021), uint64(encodedMaxAssetsPerAccount))
	// 					err = msgp.WrapError(err, "AssetParams")
	// 					return
	// 				}
	// 				if zb0022 {
	// 					(*z).AssetParams = nil
	// 				} else if (*z).AssetParams == nil {
	// 					(*z).AssetParams = make(map[basics.AssetIndex]basics.AssetParams, zb0021)
	// 				}
	// 				for zb0021 > 0 {
	// 					var zb0001 basics.AssetIndex
	// 					var zb0002 basics.AssetParams
	// 					zb0021--
	// 					bts, err = zb0001.UnmarshalMsg(bts)
	// 					if err != nil {
	// 						err = msgp.WrapError(err, "AssetParams")
	// 						return
	// 					}
	// 					bts, err = zb0002.UnmarshalMsg(bts)
	// 					if err != nil {
	// 						err = msgp.WrapError(err, "AssetParams", zb0001)
	// 						return
	// 					}
	// 					(*z).AssetParams[zb0001] = zb0002
	// 				}
	// 			case "asset":
	// 				var zb0023 int
	// 				var zb0024 bool
	// 				zb0023, zb0024, bts, err = msgp.ReadMapHeaderBytes(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "Assets")
	// 					return
	// 				}
	// 				if zb0023 > encodedMaxAssetsPerAccount {
	// 					err = msgp.ErrOverflow(uint64(zb0023), uint64(encodedMaxAssetsPerAccount))
	// 					err = msgp.WrapError(err, "Assets")
	// 					return
	// 				}
	// 				if zb0024 {
	// 					(*z).Assets = nil
	// 				} else if (*z).Assets == nil {
	// 					(*z).Assets = make(map[basics.AssetIndex]basics.AssetHolding, zb0023)
	// 				}
	// 				for zb0023 > 0 {
	// 					var zb0003 basics.AssetIndex
	// 					var zb0004 basics.AssetHolding
	// 					zb0023--
	// 					bts, err = zb0003.UnmarshalMsg(bts)
	// 					if err != nil {
	// 						err = msgp.WrapError(err, "Assets")
	// 						return
	// 					}
	// 					bts, err = zb0004.UnmarshalMsg(bts)
	// 					if err != nil {
	// 						err = msgp.WrapError(err, "Assets", zb0003)
	// 						return
	// 					}
	// 					(*z).Assets[zb0003] = zb0004
	// 				}
	// 			case "spend":
	// 				bts, err = (*z).AuthAddr.UnmarshalMsg(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "AuthAddr")
	// 					return
	// 				}
	// 			case "tsch":
	// 				bts, err = (*z).TotalAppSchema.UnmarshalMsg(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "TotalAppSchema")
	// 					return
	// 				}
	// 			case "appl":
	// 				var zb0025 int
	// 				var zb0026 bool
	// 				zb0025, zb0026, bts, err = msgp.ReadMapHeaderBytes(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "AppLocalStates")
	// 					return
	// 				}
	// 				if zb0025 > encodedMaxAppLocalStates {
	// 					err = msgp.ErrOverflow(uint64(zb0025), uint64(encodedMaxAppLocalStates))
	// 					err = msgp.WrapError(err, "AppLocalStates")
	// 					return
	// 				}
	// 				if zb0026 {
	// 					(*z).AppLocalStates = nil
	// 				} else if (*z).AppLocalStates == nil {
	// 					(*z).AppLocalStates = make(map[basics.AppIndex]AppLocalStateSansKV, zb0025)
	// 				}
	// 				for zb0025 > 0 {
	// 					var zb0005 basics.AppIndex
	// 					var zb0006 AppLocalStateSansKV
	// 					zb0025--
	// 					bts, err = zb0005.UnmarshalMsg(bts)
	// 					if err != nil {
	// 						err = msgp.WrapError(err, "AppLocalStates")
	// 						return
	// 					}
	// 					var zb0027 int
	// 					var zb0028 bool
	// 					zb0027, zb0028, bts, err = msgp.ReadMapHeaderBytes(bts)
	// 					if _, ok := err.(msgp.TypeError); ok {
	// 						zb0027, zb0028, bts, err = msgp.ReadArrayHeaderBytes(bts)
	// 						if err != nil {
	// 							err = msgp.WrapError(err, "AppLocalStates", zb0005)
	// 							return
	// 						}
	// 						if zb0027 > 0 {
	// 							zb0027--
	// 							bts, err = zb0006.Schema.UnmarshalMsg(bts)
	// 							if err != nil {
	// 								err = msgp.WrapError(err, "AppLocalStates", zb0005, "struct-from-array", "Schema")
	// 								return
	// 							}
	// 						}
	// 						if zb0027 > 0 {
	// 							err = msgp.ErrTooManyArrayFields(zb0027)
	// 							if err != nil {
	// 								err = msgp.WrapError(err, "AppLocalStates", zb0005, "struct-from-array")
	// 								return
	// 							}
	// 						}
	// 					} else {
	// 						if err != nil {
	// 							err = msgp.WrapError(err, "AppLocalStates", zb0005)
	// 							return
	// 						}
	// 						if zb0028 {
	// 							zb0006 = AppLocalStateSansKV{}
	// 						}
	// 						for zb0027 > 0 {
	// 							zb0027--
	// 							field, bts, err = msgp.ReadMapKeyZC(bts)
	// 							if err != nil {
	// 								err = msgp.WrapError(err, "AppLocalStates", zb0005)
	// 								return
	// 							}
	// 							switch string(field) {
	// 							case "hsch":
	// 								bts, err = zb0006.Schema.UnmarshalMsg(bts)
	// 								if err != nil {
	// 									err = msgp.WrapError(err, "AppLocalStates", zb0005, "Schema")
	// 									return
	// 								}
	// 							default:
	// 								err = msgp.ErrNoField(string(field))
	// 								if err != nil {
	// 									err = msgp.WrapError(err, "AppLocalStates", zb0005)
	// 									return
	// 								}
	// 							}
	// 						}
	// 					}
	// 					(*z).AppLocalStates[zb0005] = zb0006
	// 				}
	// 			case "appp":
	// 				var zb0029 int
	// 				var zb0030 bool
	// 				zb0029, zb0030, bts, err = msgp.ReadMapHeaderBytes(bts)
	// 				if err != nil {
	// 					err = msgp.WrapError(err, "AppParams")
	// 					return
	// 				}
	// 				if zb0029 > encodedMaxAppParams {
	// 					err = msgp.ErrOverflow(uint64(zb0029), uint64(encodedMaxAppParams))
	// 					err = msgp.WrapError(err, "AppParams")
	// 					return
	// 				}
	// 				if zb0030 {
	// 					(*z).AppParams = nil
	// 				} else if (*z).AppParams == nil {
	// 					(*z).AppParams = make(map[basics.AppIndex]AppParamsSansKV, zb0029)
	// 				}
	// 				for zb0029 > 0 {
	// 					var zb0007 basics.AppIndex
	// 					var zb0008 AppParamsSansKV
	// 					zb0029--
	// 					bts, err = zb0007.UnmarshalMsg(bts)
	// 					if err != nil {
	// 						err = msgp.WrapError(err, "AppParams")
	// 						return
	// 					}
	// 					bts, err = zb0008.UnmarshalMsg(bts)
	// 					if err != nil {
	// 						err = msgp.WrapError(err, "AppParams", zb0007)
	// 						return
	// 					}
	// 					(*z).AppParams[zb0007] = zb0008
	// 				}
	// 			default:
	// 				err = msgp.ErrNoField(string(field))
	// 				if err != nil {
	// 					err = msgp.WrapError(err)
	// 					return
	// 				}
	// 			}
	// 		}
	// 	}
	// 	o = bts
	return
}

func (_ *MiniAccountData) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*MiniAccountData)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MiniAccountData) Msgsize() (s int) {
	// 	s = 1 + 4 + (*z).Status.Msgsize() + 5 + (*z).MicroAlgos.Msgsize() + 6 + msgp.Uint64Size + 4 + (*z).RewardedMicroAlgos.Msgsize() + 5 + (*z).VoteID.Msgsize() + 4 + (*z).SelectionID.Msgsize() + 8 + (*z).VoteFirstValid.Msgsize() + 8 + (*z).VoteLastValid.Msgsize() + 7 + msgp.Uint64Size + 5 + msgp.MapHeaderSize
	// 	if (*z).AssetParams != nil {
	// 		for zb0001, zb0002 := range (*z).AssetParams {
	// 			_ = zb0001
	// 			_ = zb0002
	// 			s += 0 + zb0001.Msgsize() + zb0002.Msgsize()
	// 		}
	// 	}
	// 	s += 6 + msgp.MapHeaderSize
	// 	if (*z).Assets != nil {
	// 		for zb0003, zb0004 := range (*z).Assets {
	// 			_ = zb0003
	// 			_ = zb0004
	// 			s += 0 + zb0003.Msgsize() + zb0004.Msgsize()
	// 		}
	// 	}
	// 	s += 6 + (*z).AuthAddr.Msgsize() + 5 + (*z).TotalAppSchema.Msgsize() + 5 + msgp.MapHeaderSize
	// 	if (*z).AppLocalStates != nil {
	// 		for zb0005, zb0006 := range (*z).AppLocalStates {
	// 			_ = zb0005
	// 			_ = zb0006
	// 			s += 0 + zb0005.Msgsize() + 1 + 5 + zb0006.Schema.Msgsize()
	// 		}
	// 	}
	// 	s += 5 + msgp.MapHeaderSize
	// 	if (*z).AppParams != nil {
	// 		for zb0007, zb0008 := range (*z).AppParams {
	// 			_ = zb0007
	// 			_ = zb0008
	// 			s += 0 + zb0007.Msgsize() + zb0008.Msgsize()
	// 		}
	// 	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z *MiniAccountData) MsgIsZero() bool {
	return ((*z).Status.MsgIsZero()) && ((*z).MicroAlgos.MsgIsZero()) && ((*z).RewardsBase == 0) && ((*z).RewardedMicroAlgos.MsgIsZero()) && ((*z).VoteID.MsgIsZero()) && ((*z).SelectionID.MsgIsZero()) && ((*z).VoteFirstValid.MsgIsZero()) && ((*z).VoteLastValid.MsgIsZero()) && ((*z).VoteKeyDilution == 0) && (len((*z).AssetParams) == 0) && (len((*z).Assets) == 0) && ((*z).AuthAddr.MsgIsZero()) && ((*z).TotalAppSchema.MsgIsZero()) && (len((*z).AppLocalStates) == 0) && (len((*z).AppParams) == 0)
}
