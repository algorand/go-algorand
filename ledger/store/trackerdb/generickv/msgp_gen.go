package generickv

// Code generated by github.com/algorand/msgp DO NOT EDIT.

import (
	"github.com/algorand/msgp/msgp"

	"github.com/algorand/go-algorand/data/basics"
)

// The following msgp objects are implemented in this file:
// creatableEntry
//        |-----> (*) MarshalMsg
//        |-----> (*) CanMarshalMsg
//        |-----> (*) UnmarshalMsg
//        |-----> (*) UnmarshalMsgWithState
//        |-----> (*) CanUnmarshalMsg
//        |-----> (*) Msgsize
//        |-----> (*) MsgIsZero
//        |-----> CreatableEntryMaxSize()
//

// MarshalMsg implements msgp.Marshaler
func (z *creatableEntry) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 3 bits */
	if len((*z).CreatorAddr) == 0 {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if (*z).Ctype.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not empty
			// string "CreatorAddr"
			o = append(o, 0xab, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72)
			o = msgp.AppendBytes(o, (*z).CreatorAddr)
		}
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "Ctype"
			o = append(o, 0xa5, 0x43, 0x74, 0x79, 0x70, 0x65)
			o = (*z).Ctype.MarshalMsg(o)
		}
	}
	return
}

func (_ *creatableEntry) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*creatableEntry)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *creatableEntry) UnmarshalMsgWithState(bts []byte, st msgp.UnmarshalState) (o []byte, err error) {
	if st.AllowableDepth == 0 {
		err = msgp.ErrMaxDepthExceeded{}
		return
	}
	st.AllowableDepth--
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Ctype.UnmarshalMsgWithState(bts, st)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Ctype")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).CreatorAddr, bts, err = msgp.ReadBytesBytes(bts, (*z).CreatorAddr)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CreatorAddr")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = creatableEntry{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "Ctype":
				bts, err = (*z).Ctype.UnmarshalMsgWithState(bts, st)
				if err != nil {
					err = msgp.WrapError(err, "Ctype")
					return
				}
			case "CreatorAddr":
				(*z).CreatorAddr, bts, err = msgp.ReadBytesBytes(bts, (*z).CreatorAddr)
				if err != nil {
					err = msgp.WrapError(err, "CreatorAddr")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (z *creatableEntry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithState(bts, msgp.DefaultUnmarshalState)
}
func (_ *creatableEntry) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*creatableEntry)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *creatableEntry) Msgsize() (s int) {
	s = 1 + 6 + (*z).Ctype.Msgsize() + 12 + msgp.BytesPrefixSize + len((*z).CreatorAddr)
	return
}

// MsgIsZero returns whether this is a zero value
func (z *creatableEntry) MsgIsZero() bool {
	return ((*z).Ctype.MsgIsZero()) && (len((*z).CreatorAddr) == 0)
}

// MaxSize returns a maximum valid message size for this message type
func CreatableEntryMaxSize() (s int) {
	s = 1 + 6 + basics.CreatableTypeMaxSize() + 12
	panic("Unable to determine max size: Byteslice type z.CreatorAddr is unbounded")
	return
}
