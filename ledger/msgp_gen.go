package ledger

// Code generated by github.com/algorand/msgp DO NOT EDIT.

import (
	"sort"

	"github.com/algorand/go-algorand/data/basics"
	"github.com/algorand/msgp/msgp"
)

// The following msgp objects are implemented in this file:
// AssetsHoldingGroup
//          |-----> (*) MarshalMsg
//          |-----> (*) CanMarshalMsg
//          |-----> (*) UnmarshalMsg
//          |-----> (*) CanUnmarshalMsg
//          |-----> (*) Msgsize
//          |-----> (*) MsgIsZero
//
// AssetsHoldingGroupData
//            |-----> (*) MarshalMsg
//            |-----> (*) CanMarshalMsg
//            |-----> (*) UnmarshalMsg
//            |-----> (*) CanUnmarshalMsg
//            |-----> (*) Msgsize
//            |-----> (*) MsgIsZero
//
// CatchpointCatchupState
//            |-----> MarshalMsg
//            |-----> CanMarshalMsg
//            |-----> (*) UnmarshalMsg
//            |-----> (*) CanUnmarshalMsg
//            |-----> Msgsize
//            |-----> MsgIsZero
//
// CatchpointFileHeader
//           |-----> (*) MarshalMsg
//           |-----> (*) CanMarshalMsg
//           |-----> (*) UnmarshalMsg
//           |-----> (*) CanUnmarshalMsg
//           |-----> (*) Msgsize
//           |-----> (*) MsgIsZero
//
// ExtendedAssetHolding
//           |-----> (*) MarshalMsg
//           |-----> (*) CanMarshalMsg
//           |-----> (*) UnmarshalMsg
//           |-----> (*) CanUnmarshalMsg
//           |-----> (*) Msgsize
//           |-----> (*) MsgIsZero
//
// PersistedAccountData
//           |-----> (*) MarshalMsg
//           |-----> (*) CanMarshalMsg
//           |-----> (*) UnmarshalMsg
//           |-----> (*) CanUnmarshalMsg
//           |-----> (*) Msgsize
//           |-----> (*) MsgIsZero
//
// catchpointFileBalancesChunk
//              |-----> (*) MarshalMsg
//              |-----> (*) CanMarshalMsg
//              |-----> (*) UnmarshalMsg
//              |-----> (*) CanUnmarshalMsg
//              |-----> (*) Msgsize
//              |-----> (*) MsgIsZero
//
// catchpointState
//        |-----> MarshalMsg
//        |-----> CanMarshalMsg
//        |-----> (*) UnmarshalMsg
//        |-----> (*) CanUnmarshalMsg
//        |-----> Msgsize
//        |-----> MsgIsZero
//
// encodedBalanceRecord
//           |-----> (*) MarshalMsg
//           |-----> (*) CanMarshalMsg
//           |-----> (*) UnmarshalMsg
//           |-----> (*) CanUnmarshalMsg
//           |-----> (*) Msgsize
//           |-----> (*) MsgIsZero
//
// storageAction
//       |-----> MarshalMsg
//       |-----> CanMarshalMsg
//       |-----> (*) UnmarshalMsg
//       |-----> (*) CanUnmarshalMsg
//       |-----> Msgsize
//       |-----> MsgIsZero
//

// MarshalMsg implements msgp.Marshaler
func (z *AssetsHoldingGroup) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 7 bits */
	if (*z).Count == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).DeltaMaxAssetIndex == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if (*z).AssetGroupKey == 0 {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if (*z).MinAssetIndex.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "c"
			o = append(o, 0xa1, 0x63)
			o = msgp.AppendUint32(o, (*z).Count)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "d"
			o = append(o, 0xa1, 0x64)
			o = msgp.AppendUint64(o, (*z).DeltaMaxAssetIndex)
		}
		if (zb0001Mask & 0x10) == 0 { // if not empty
			// string "k"
			o = append(o, 0xa1, 0x6b)
			o = msgp.AppendInt64(o, (*z).AssetGroupKey)
		}
		if (zb0001Mask & 0x40) == 0 { // if not empty
			// string "m"
			o = append(o, 0xa1, 0x6d)
			o, err = (*z).MinAssetIndex.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "MinAssetIndex")
				return
			}
		}
	}
	return
}

func (_ *AssetsHoldingGroup) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetsHoldingGroup)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AssetsHoldingGroup) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			(*z).Count, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Count")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).MinAssetIndex.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MinAssetIndex")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).DeltaMaxAssetIndex, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "DeltaMaxAssetIndex")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).AssetGroupKey, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetGroupKey")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = AssetsHoldingGroup{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "c":
				(*z).Count, bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Count")
					return
				}
			case "m":
				bts, err = (*z).MinAssetIndex.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "MinAssetIndex")
					return
				}
			case "d":
				(*z).DeltaMaxAssetIndex, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DeltaMaxAssetIndex")
					return
				}
			case "k":
				(*z).AssetGroupKey, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetGroupKey")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *AssetsHoldingGroup) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetsHoldingGroup)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AssetsHoldingGroup) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint32Size + 2 + (*z).MinAssetIndex.Msgsize() + 2 + msgp.Uint64Size + 2 + msgp.Int64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z *AssetsHoldingGroup) MsgIsZero() bool {
	return ((*z).Count == 0) && ((*z).MinAssetIndex.MsgIsZero()) && ((*z).DeltaMaxAssetIndex == 0) && ((*z).AssetGroupKey == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *AssetsHoldingGroupData) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0004Len := uint32(3)
	var zb0004Mask uint8 /* 4 bits */
	if len((*z).Amounts) == 0 {
		zb0004Len--
		zb0004Mask |= 0x2
	}
	if len((*z).AssetOffsets) == 0 {
		zb0004Len--
		zb0004Mask |= 0x4
	}
	if len((*z).Frozens) == 0 {
		zb0004Len--
		zb0004Mask |= 0x8
	}
	// variable map header, size zb0004Len
	o = append(o, 0x80|uint8(zb0004Len))
	if zb0004Len != 0 {
		if (zb0004Mask & 0x2) == 0 { // if not empty
			// string "a"
			o = append(o, 0xa1, 0x61)
			if (*z).Amounts == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Amounts)))
			}
			for zb0002 := range (*z).Amounts {
				o = msgp.AppendUint64(o, (*z).Amounts[zb0002])
			}
		}
		if (zb0004Mask & 0x4) == 0 { // if not empty
			// string "ao"
			o = append(o, 0xa2, 0x61, 0x6f)
			if (*z).AssetOffsets == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).AssetOffsets)))
			}
			for zb0001 := range (*z).AssetOffsets {
				o, err = (*z).AssetOffsets[zb0001].MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "AssetOffsets", zb0001)
					return
				}
			}
		}
		if (zb0004Mask & 0x8) == 0 { // if not empty
			// string "f"
			o = append(o, 0xa1, 0x66)
			if (*z).Frozens == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Frozens)))
			}
			for zb0003 := range (*z).Frozens {
				o = msgp.AppendBool(o, (*z).Frozens[zb0003])
			}
		}
	}
	return
}

func (_ *AssetsHoldingGroupData) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetsHoldingGroupData)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AssetsHoldingGroupData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0004 int
	var zb0005 bool
	zb0004, zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0004, zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0004 > 0 {
			zb0004--
			var zb0006 int
			var zb0007 bool
			zb0006, zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetOffsets")
				return
			}
			if zb0006 > 1048576 {
				err = msgp.ErrOverflow(uint64(zb0006), uint64(1048576))
				err = msgp.WrapError(err, "struct-from-array", "AssetOffsets")
				return
			}
			if zb0007 {
				(*z).AssetOffsets = nil
			} else if (*z).AssetOffsets != nil && cap((*z).AssetOffsets) >= zb0006 {
				(*z).AssetOffsets = ((*z).AssetOffsets)[:zb0006]
			} else {
				(*z).AssetOffsets = make([]basics.AssetIndex, zb0006)
			}
			for zb0001 := range (*z).AssetOffsets {
				bts, err = (*z).AssetOffsets[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AssetOffsets", zb0001)
					return
				}
			}
		}
		if zb0004 > 0 {
			zb0004--
			var zb0008 int
			var zb0009 bool
			zb0008, zb0009, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Amounts")
				return
			}
			if zb0008 > 1048576 {
				err = msgp.ErrOverflow(uint64(zb0008), uint64(1048576))
				err = msgp.WrapError(err, "struct-from-array", "Amounts")
				return
			}
			if zb0009 {
				(*z).Amounts = nil
			} else if (*z).Amounts != nil && cap((*z).Amounts) >= zb0008 {
				(*z).Amounts = ((*z).Amounts)[:zb0008]
			} else {
				(*z).Amounts = make([]uint64, zb0008)
			}
			for zb0002 := range (*z).Amounts {
				(*z).Amounts[zb0002], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Amounts", zb0002)
					return
				}
			}
		}
		if zb0004 > 0 {
			zb0004--
			var zb0010 int
			var zb0011 bool
			zb0010, zb0011, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Frozens")
				return
			}
			if zb0010 > 1048576 {
				err = msgp.ErrOverflow(uint64(zb0010), uint64(1048576))
				err = msgp.WrapError(err, "struct-from-array", "Frozens")
				return
			}
			if zb0011 {
				(*z).Frozens = nil
			} else if (*z).Frozens != nil && cap((*z).Frozens) >= zb0010 {
				(*z).Frozens = ((*z).Frozens)[:zb0010]
			} else {
				(*z).Frozens = make([]bool, zb0010)
			}
			for zb0003 := range (*z).Frozens {
				(*z).Frozens[zb0003], bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Frozens", zb0003)
					return
				}
			}
		}
		if zb0004 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0004)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0005 {
			(*z) = AssetsHoldingGroupData{}
		}
		for zb0004 > 0 {
			zb0004--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "ao":
				var zb0012 int
				var zb0013 bool
				zb0012, zb0013, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetOffsets")
					return
				}
				if zb0012 > 1048576 {
					err = msgp.ErrOverflow(uint64(zb0012), uint64(1048576))
					err = msgp.WrapError(err, "AssetOffsets")
					return
				}
				if zb0013 {
					(*z).AssetOffsets = nil
				} else if (*z).AssetOffsets != nil && cap((*z).AssetOffsets) >= zb0012 {
					(*z).AssetOffsets = ((*z).AssetOffsets)[:zb0012]
				} else {
					(*z).AssetOffsets = make([]basics.AssetIndex, zb0012)
				}
				for zb0001 := range (*z).AssetOffsets {
					bts, err = (*z).AssetOffsets[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "AssetOffsets", zb0001)
						return
					}
				}
			case "a":
				var zb0014 int
				var zb0015 bool
				zb0014, zb0015, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Amounts")
					return
				}
				if zb0014 > 1048576 {
					err = msgp.ErrOverflow(uint64(zb0014), uint64(1048576))
					err = msgp.WrapError(err, "Amounts")
					return
				}
				if zb0015 {
					(*z).Amounts = nil
				} else if (*z).Amounts != nil && cap((*z).Amounts) >= zb0014 {
					(*z).Amounts = ((*z).Amounts)[:zb0014]
				} else {
					(*z).Amounts = make([]uint64, zb0014)
				}
				for zb0002 := range (*z).Amounts {
					(*z).Amounts[zb0002], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Amounts", zb0002)
						return
					}
				}
			case "f":
				var zb0016 int
				var zb0017 bool
				zb0016, zb0017, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Frozens")
					return
				}
				if zb0016 > 1048576 {
					err = msgp.ErrOverflow(uint64(zb0016), uint64(1048576))
					err = msgp.WrapError(err, "Frozens")
					return
				}
				if zb0017 {
					(*z).Frozens = nil
				} else if (*z).Frozens != nil && cap((*z).Frozens) >= zb0016 {
					(*z).Frozens = ((*z).Frozens)[:zb0016]
				} else {
					(*z).Frozens = make([]bool, zb0016)
				}
				for zb0003 := range (*z).Frozens {
					(*z).Frozens[zb0003], bts, err = msgp.ReadBoolBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Frozens", zb0003)
						return
					}
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *AssetsHoldingGroupData) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetsHoldingGroupData)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AssetsHoldingGroupData) Msgsize() (s int) {
	s = 1 + 3 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).AssetOffsets {
		s += (*z).AssetOffsets[zb0001].Msgsize()
	}
	s += 2 + msgp.ArrayHeaderSize + (len((*z).Amounts) * (msgp.Uint64Size)) + 2 + msgp.ArrayHeaderSize + (len((*z).Frozens) * (msgp.BoolSize))
	return
}

// MsgIsZero returns whether this is a zero value
func (z *AssetsHoldingGroupData) MsgIsZero() bool {
	return (len((*z).AssetOffsets) == 0) && (len((*z).Amounts) == 0) && (len((*z).Frozens) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z CatchpointCatchupState) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt32(o, int32(z))
	return
}

func (_ CatchpointCatchupState) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(CatchpointCatchupState)
	if !ok {
		_, ok = (z).(*CatchpointCatchupState)
	}
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CatchpointCatchupState) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int32
		zb0001, bts, err = msgp.ReadInt32Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = CatchpointCatchupState(zb0001)
	}
	o = bts
	return
}

func (_ *CatchpointCatchupState) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*CatchpointCatchupState)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z CatchpointCatchupState) Msgsize() (s int) {
	s = msgp.Int32Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z CatchpointCatchupState) MsgIsZero() bool {
	return z == 0
}

// MarshalMsg implements msgp.Marshaler
func (z *CatchpointFileHeader) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(8)
	var zb0001Mask uint16 /* 9 bits */
	if (*z).Totals.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).TotalAccounts == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if (*z).BalancesRound.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if (*z).BlockHeaderDigest.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if (*z).BlocksRound.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if (*z).Catchpoint == "" {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if (*z).TotalChunks == 0 {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	if (*z).Version == 0 {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "accountTotals"
			o = append(o, 0xad, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x73)
			o, err = (*z).Totals.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Totals")
				return
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "accountsCount"
			o = append(o, 0xad, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74)
			o = msgp.AppendUint64(o, (*z).TotalAccounts)
		}
		if (zb0001Mask & 0x8) == 0 { // if not empty
			// string "balancesRound"
			o = append(o, 0xad, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64)
			o, err = (*z).BalancesRound.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "BalancesRound")
				return
			}
		}
		if (zb0001Mask & 0x10) == 0 { // if not empty
			// string "blockHeaderDigest"
			o = append(o, 0xb1, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74)
			o, err = (*z).BlockHeaderDigest.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "BlockHeaderDigest")
				return
			}
		}
		if (zb0001Mask & 0x20) == 0 { // if not empty
			// string "blocksRound"
			o = append(o, 0xab, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64)
			o, err = (*z).BlocksRound.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "BlocksRound")
				return
			}
		}
		if (zb0001Mask & 0x40) == 0 { // if not empty
			// string "catchpoint"
			o = append(o, 0xaa, 0x63, 0x61, 0x74, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74)
			o = msgp.AppendString(o, (*z).Catchpoint)
		}
		if (zb0001Mask & 0x80) == 0 { // if not empty
			// string "chunksCount"
			o = append(o, 0xab, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74)
			o = msgp.AppendUint64(o, (*z).TotalChunks)
		}
		if (zb0001Mask & 0x100) == 0 { // if not empty
			// string "version"
			o = append(o, 0xa7, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
			o = msgp.AppendUint64(o, (*z).Version)
		}
	}
	return
}

func (_ *CatchpointFileHeader) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*CatchpointFileHeader)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CatchpointFileHeader) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			(*z).Version, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Version")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).BalancesRound.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "BalancesRound")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).BlocksRound.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "BlocksRound")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Totals.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Totals")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).TotalAccounts, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TotalAccounts")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).TotalChunks, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TotalChunks")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).Catchpoint, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Catchpoint")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).BlockHeaderDigest.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "BlockHeaderDigest")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = CatchpointFileHeader{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "version":
				(*z).Version, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Version")
					return
				}
			case "balancesRound":
				bts, err = (*z).BalancesRound.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "BalancesRound")
					return
				}
			case "blocksRound":
				bts, err = (*z).BlocksRound.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "BlocksRound")
					return
				}
			case "accountTotals":
				bts, err = (*z).Totals.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Totals")
					return
				}
			case "accountsCount":
				(*z).TotalAccounts, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalAccounts")
					return
				}
			case "chunksCount":
				(*z).TotalChunks, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalChunks")
					return
				}
			case "catchpoint":
				(*z).Catchpoint, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Catchpoint")
					return
				}
			case "blockHeaderDigest":
				bts, err = (*z).BlockHeaderDigest.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "BlockHeaderDigest")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *CatchpointFileHeader) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*CatchpointFileHeader)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CatchpointFileHeader) Msgsize() (s int) {
	s = 1 + 8 + msgp.Uint64Size + 14 + (*z).BalancesRound.Msgsize() + 12 + (*z).BlocksRound.Msgsize() + 14 + (*z).Totals.Msgsize() + 14 + msgp.Uint64Size + 12 + msgp.Uint64Size + 11 + msgp.StringPrefixSize + len((*z).Catchpoint) + 18 + (*z).BlockHeaderDigest.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *CatchpointFileHeader) MsgIsZero() bool {
	return ((*z).Version == 0) && ((*z).BalancesRound.MsgIsZero()) && ((*z).BlocksRound.MsgIsZero()) && ((*z).Totals.MsgIsZero()) && ((*z).TotalAccounts == 0) && ((*z).TotalChunks == 0) && ((*z).Catchpoint == "") && ((*z).BlockHeaderDigest.MsgIsZero())
}

// MarshalMsg implements msgp.Marshaler
func (z *ExtendedAssetHolding) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0002Len := uint32(2)
	var zb0002Mask uint8 /* 4 bits */
	if (*z).Count == 0 {
		zb0002Len--
		zb0002Mask |= 0x2
	}
	if len((*z).Groups) == 0 {
		zb0002Len--
		zb0002Mask |= 0x4
	}
	// variable map header, size zb0002Len
	o = append(o, 0x80|uint8(zb0002Len))
	if zb0002Len != 0 {
		if (zb0002Mask & 0x2) == 0 { // if not empty
			// string "c"
			o = append(o, 0xa1, 0x63)
			o = msgp.AppendUint32(o, (*z).Count)
		}
		if (zb0002Mask & 0x4) == 0 { // if not empty
			// string "gs"
			o = append(o, 0xa2, 0x67, 0x73)
			if (*z).Groups == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Groups)))
			}
			for zb0001 := range (*z).Groups {
				o, err = (*z).Groups[zb0001].MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "Groups", zb0001)
					return
				}
			}
		}
	}
	return
}

func (_ *ExtendedAssetHolding) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*ExtendedAssetHolding)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ExtendedAssetHolding) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0002 int
	var zb0003 bool
	zb0002, zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0002, zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 > 0 {
			zb0002--
			(*z).Count, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Count")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			var zb0004 int
			var zb0005 bool
			zb0004, zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Groups")
				return
			}
			if zb0004 > 100 {
				err = msgp.ErrOverflow(uint64(zb0004), uint64(100))
				err = msgp.WrapError(err, "struct-from-array", "Groups")
				return
			}
			if zb0005 {
				(*z).Groups = nil
			} else if (*z).Groups != nil && cap((*z).Groups) >= zb0004 {
				(*z).Groups = ((*z).Groups)[:zb0004]
			} else {
				(*z).Groups = make([]AssetsHoldingGroup, zb0004)
			}
			for zb0001 := range (*z).Groups {
				bts, err = (*z).Groups[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Groups", zb0001)
					return
				}
			}
		}
		if zb0002 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0002)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0003 {
			(*z) = ExtendedAssetHolding{}
		}
		for zb0002 > 0 {
			zb0002--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "c":
				(*z).Count, bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Count")
					return
				}
			case "gs":
				var zb0006 int
				var zb0007 bool
				zb0006, zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Groups")
					return
				}
				if zb0006 > 100 {
					err = msgp.ErrOverflow(uint64(zb0006), uint64(100))
					err = msgp.WrapError(err, "Groups")
					return
				}
				if zb0007 {
					(*z).Groups = nil
				} else if (*z).Groups != nil && cap((*z).Groups) >= zb0006 {
					(*z).Groups = ((*z).Groups)[:zb0006]
				} else {
					(*z).Groups = make([]AssetsHoldingGroup, zb0006)
				}
				for zb0001 := range (*z).Groups {
					bts, err = (*z).Groups[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Groups", zb0001)
						return
					}
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *ExtendedAssetHolding) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*ExtendedAssetHolding)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ExtendedAssetHolding) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint32Size + 3 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).Groups {
		s += (*z).Groups[zb0001].Msgsize()
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z *ExtendedAssetHolding) MsgIsZero() bool {
	return ((*z).Count == 0) && (len((*z).Groups) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *PersistedAccountData) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0009Len := uint32(16)
	var zb0009Mask uint32 /* 18 bits */
	if (*z).AccountData.MicroAlgos.MsgIsZero() {
		zb0009Len--
		zb0009Mask |= 0x4
	}
	if len((*z).AccountData.AssetParams) == 0 {
		zb0009Len--
		zb0009Mask |= 0x8
	}
	if len((*z).AccountData.AppLocalStates) == 0 {
		zb0009Len--
		zb0009Mask |= 0x10
	}
	if len((*z).AccountData.AppParams) == 0 {
		zb0009Len--
		zb0009Mask |= 0x20
	}
	if len((*z).AccountData.Assets) == 0 {
		zb0009Len--
		zb0009Mask |= 0x40
	}
	if (*z).ExtendedAssetHolding.MsgIsZero() {
		zb0009Len--
		zb0009Mask |= 0x80
	}
	if (*z).AccountData.RewardsBase == 0 {
		zb0009Len--
		zb0009Mask |= 0x100
	}
	if (*z).AccountData.RewardedMicroAlgos.MsgIsZero() {
		zb0009Len--
		zb0009Mask |= 0x200
	}
	if (*z).AccountData.Status.MsgIsZero() {
		zb0009Len--
		zb0009Mask |= 0x400
	}
	if (*z).AccountData.SelectionID.MsgIsZero() {
		zb0009Len--
		zb0009Mask |= 0x800
	}
	if (*z).AccountData.AuthAddr.MsgIsZero() {
		zb0009Len--
		zb0009Mask |= 0x1000
	}
	if (*z).AccountData.TotalAppSchema.MsgIsZero() {
		zb0009Len--
		zb0009Mask |= 0x2000
	}
	if (*z).AccountData.VoteID.MsgIsZero() {
		zb0009Len--
		zb0009Mask |= 0x4000
	}
	if (*z).AccountData.VoteFirstValid.MsgIsZero() {
		zb0009Len--
		zb0009Mask |= 0x8000
	}
	if (*z).AccountData.VoteKeyDilution == 0 {
		zb0009Len--
		zb0009Mask |= 0x10000
	}
	if (*z).AccountData.VoteLastValid.MsgIsZero() {
		zb0009Len--
		zb0009Mask |= 0x20000
	}
	// variable map header, size zb0009Len
	o = msgp.AppendMapHeader(o, zb0009Len)
	if zb0009Len != 0 {
		if (zb0009Mask & 0x4) == 0 { // if not empty
			// string "algo"
			o = append(o, 0xa4, 0x61, 0x6c, 0x67, 0x6f)
			o, err = (*z).AccountData.MicroAlgos.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "MicroAlgos")
				return
			}
		}
		if (zb0009Mask & 0x8) == 0 { // if not empty
			// string "apar"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x72)
			if (*z).AccountData.AssetParams == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendMapHeader(o, uint32(len((*z).AccountData.AssetParams)))
			}
			zb0001_keys := make([]basics.AssetIndex, 0, len((*z).AccountData.AssetParams))
			for zb0001 := range (*z).AccountData.AssetParams {
				zb0001_keys = append(zb0001_keys, zb0001)
			}
			sort.Sort(SortAssetIndex(zb0001_keys))
			for _, zb0001 := range zb0001_keys {
				zb0002 := (*z).AccountData.AssetParams[zb0001]
				_ = zb0002
				o, err = zb0001.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "AssetParams", zb0001)
					return
				}
				o, err = zb0002.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "AssetParams", zb0001)
					return
				}
			}
		}
		if (zb0009Mask & 0x10) == 0 { // if not empty
			// string "appl"
			o = append(o, 0xa4, 0x61, 0x70, 0x70, 0x6c)
			if (*z).AccountData.AppLocalStates == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendMapHeader(o, uint32(len((*z).AccountData.AppLocalStates)))
			}
			zb0005_keys := make([]basics.AppIndex, 0, len((*z).AccountData.AppLocalStates))
			for zb0005 := range (*z).AccountData.AppLocalStates {
				zb0005_keys = append(zb0005_keys, zb0005)
			}
			sort.Sort(SortAppIndex(zb0005_keys))
			for _, zb0005 := range zb0005_keys {
				zb0006 := (*z).AccountData.AppLocalStates[zb0005]
				_ = zb0006
				o, err = zb0005.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "AppLocalStates", zb0005)
					return
				}
				o, err = zb0006.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "AppLocalStates", zb0005)
					return
				}
			}
		}
		if (zb0009Mask & 0x20) == 0 { // if not empty
			// string "appp"
			o = append(o, 0xa4, 0x61, 0x70, 0x70, 0x70)
			if (*z).AccountData.AppParams == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendMapHeader(o, uint32(len((*z).AccountData.AppParams)))
			}
			zb0007_keys := make([]basics.AppIndex, 0, len((*z).AccountData.AppParams))
			for zb0007 := range (*z).AccountData.AppParams {
				zb0007_keys = append(zb0007_keys, zb0007)
			}
			sort.Sort(SortAppIndex(zb0007_keys))
			for _, zb0007 := range zb0007_keys {
				zb0008 := (*z).AccountData.AppParams[zb0007]
				_ = zb0008
				o, err = zb0007.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "AppParams", zb0007)
					return
				}
				o, err = zb0008.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "AppParams", zb0007)
					return
				}
			}
		}
		if (zb0009Mask & 0x40) == 0 { // if not empty
			// string "asset"
			o = append(o, 0xa5, 0x61, 0x73, 0x73, 0x65, 0x74)
			if (*z).AccountData.Assets == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendMapHeader(o, uint32(len((*z).AccountData.Assets)))
			}
			zb0003_keys := make([]basics.AssetIndex, 0, len((*z).AccountData.Assets))
			for zb0003 := range (*z).AccountData.Assets {
				zb0003_keys = append(zb0003_keys, zb0003)
			}
			sort.Sort(SortAssetIndex(zb0003_keys))
			for _, zb0003 := range zb0003_keys {
				zb0004 := (*z).AccountData.Assets[zb0003]
				_ = zb0004
				o, err = zb0003.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "Assets", zb0003)
					return
				}
				o, err = zb0004.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "Assets", zb0003)
					return
				}
			}
		}
		if (zb0009Mask & 0x80) == 0 { // if not empty
			// string "eash"
			o = append(o, 0xa4, 0x65, 0x61, 0x73, 0x68)
			o, err = (*z).ExtendedAssetHolding.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "ExtendedAssetHolding")
				return
			}
		}
		if (zb0009Mask & 0x100) == 0 { // if not empty
			// string "ebase"
			o = append(o, 0xa5, 0x65, 0x62, 0x61, 0x73, 0x65)
			o = msgp.AppendUint64(o, (*z).AccountData.RewardsBase)
		}
		if (zb0009Mask & 0x200) == 0 { // if not empty
			// string "ern"
			o = append(o, 0xa3, 0x65, 0x72, 0x6e)
			o, err = (*z).AccountData.RewardedMicroAlgos.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "RewardedMicroAlgos")
				return
			}
		}
		if (zb0009Mask & 0x400) == 0 { // if not empty
			// string "onl"
			o = append(o, 0xa3, 0x6f, 0x6e, 0x6c)
			o, err = (*z).AccountData.Status.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		}
		if (zb0009Mask & 0x800) == 0 { // if not empty
			// string "sel"
			o = append(o, 0xa3, 0x73, 0x65, 0x6c)
			o, err = (*z).AccountData.SelectionID.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "SelectionID")
				return
			}
		}
		if (zb0009Mask & 0x1000) == 0 { // if not empty
			// string "spend"
			o = append(o, 0xa5, 0x73, 0x70, 0x65, 0x6e, 0x64)
			o, err = (*z).AccountData.AuthAddr.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "AuthAddr")
				return
			}
		}
		if (zb0009Mask & 0x2000) == 0 { // if not empty
			// string "tsch"
			o = append(o, 0xa4, 0x74, 0x73, 0x63, 0x68)
			o, err = (*z).AccountData.TotalAppSchema.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "TotalAppSchema")
				return
			}
		}
		if (zb0009Mask & 0x4000) == 0 { // if not empty
			// string "vote"
			o = append(o, 0xa4, 0x76, 0x6f, 0x74, 0x65)
			o, err = (*z).AccountData.VoteID.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "VoteID")
				return
			}
		}
		if (zb0009Mask & 0x8000) == 0 { // if not empty
			// string "voteFst"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x46, 0x73, 0x74)
			o, err = (*z).AccountData.VoteFirstValid.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "VoteFirstValid")
				return
			}
		}
		if (zb0009Mask & 0x10000) == 0 { // if not empty
			// string "voteKD"
			o = append(o, 0xa6, 0x76, 0x6f, 0x74, 0x65, 0x4b, 0x44)
			o = msgp.AppendUint64(o, (*z).AccountData.VoteKeyDilution)
		}
		if (zb0009Mask & 0x20000) == 0 { // if not empty
			// string "voteLst"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x4c, 0x73, 0x74)
			o, err = (*z).AccountData.VoteLastValid.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "VoteLastValid")
				return
			}
		}
	}
	return
}

func (_ *PersistedAccountData) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*PersistedAccountData)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PersistedAccountData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0009 int
	var zb0010 bool
	zb0009, zb0010, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0009, zb0010, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0009 > 0 {
			zb0009--
			bts, err = (*z).AccountData.Status.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Status")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			bts, err = (*z).AccountData.MicroAlgos.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MicroAlgos")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			(*z).AccountData.RewardsBase, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RewardsBase")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			bts, err = (*z).AccountData.RewardedMicroAlgos.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RewardedMicroAlgos")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			bts, err = (*z).AccountData.VoteID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteID")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			bts, err = (*z).AccountData.SelectionID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SelectionID")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			bts, err = (*z).AccountData.VoteFirstValid.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteFirstValid")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			bts, err = (*z).AccountData.VoteLastValid.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteLastValid")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			(*z).AccountData.VoteKeyDilution, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteKeyDilution")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			var zb0011 int
			var zb0012 bool
			zb0011, zb0012, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetParams")
				return
			}
			if zb0011 > EncodedMaxAssetsPerAccount {
				err = msgp.ErrOverflow(uint64(zb0011), uint64(EncodedMaxAssetsPerAccount))
				err = msgp.WrapError(err, "struct-from-array", "AssetParams")
				return
			}
			if zb0012 {
				(*z).AccountData.AssetParams = nil
			} else if (*z).AccountData.AssetParams == nil {
				(*z).AccountData.AssetParams = make(map[basics.AssetIndex]basics.AssetParams, zb0011)
			}
			for zb0011 > 0 {
				var zb0001 basics.AssetIndex
				var zb0002 basics.AssetParams
				zb0011--
				bts, err = zb0001.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AssetParams")
					return
				}
				bts, err = zb0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AssetParams", zb0001)
					return
				}
				(*z).AccountData.AssetParams[zb0001] = zb0002
			}
		}
		if zb0009 > 0 {
			zb0009--
			var zb0013 int
			var zb0014 bool
			zb0013, zb0014, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Assets")
				return
			}
			if zb0013 > EncodedMaxAssetsPerAccount {
				err = msgp.ErrOverflow(uint64(zb0013), uint64(EncodedMaxAssetsPerAccount))
				err = msgp.WrapError(err, "struct-from-array", "Assets")
				return
			}
			if zb0014 {
				(*z).AccountData.Assets = nil
			} else if (*z).AccountData.Assets == nil {
				(*z).AccountData.Assets = make(map[basics.AssetIndex]basics.AssetHolding, zb0013)
			}
			for zb0013 > 0 {
				var zb0003 basics.AssetIndex
				var zb0004 basics.AssetHolding
				zb0013--
				bts, err = zb0003.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Assets")
					return
				}
				bts, err = zb0004.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Assets", zb0003)
					return
				}
				(*z).AccountData.Assets[zb0003] = zb0004
			}
		}
		if zb0009 > 0 {
			zb0009--
			bts, err = (*z).AccountData.AuthAddr.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AuthAddr")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			var zb0015 int
			var zb0016 bool
			zb0015, zb0016, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AppLocalStates")
				return
			}
			if zb0015 > EncodedMaxAppLocalStates {
				err = msgp.ErrOverflow(uint64(zb0015), uint64(EncodedMaxAppLocalStates))
				err = msgp.WrapError(err, "struct-from-array", "AppLocalStates")
				return
			}
			if zb0016 {
				(*z).AccountData.AppLocalStates = nil
			} else if (*z).AccountData.AppLocalStates == nil {
				(*z).AccountData.AppLocalStates = make(map[basics.AppIndex]basics.AppLocalState, zb0015)
			}
			for zb0015 > 0 {
				var zb0005 basics.AppIndex
				var zb0006 basics.AppLocalState
				zb0015--
				bts, err = zb0005.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AppLocalStates")
					return
				}
				bts, err = zb0006.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AppLocalStates", zb0005)
					return
				}
				(*z).AccountData.AppLocalStates[zb0005] = zb0006
			}
		}
		if zb0009 > 0 {
			zb0009--
			var zb0017 int
			var zb0018 bool
			zb0017, zb0018, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AppParams")
				return
			}
			if zb0017 > EncodedMaxAppParams {
				err = msgp.ErrOverflow(uint64(zb0017), uint64(EncodedMaxAppParams))
				err = msgp.WrapError(err, "struct-from-array", "AppParams")
				return
			}
			if zb0018 {
				(*z).AccountData.AppParams = nil
			} else if (*z).AccountData.AppParams == nil {
				(*z).AccountData.AppParams = make(map[basics.AppIndex]basics.AppParams, zb0017)
			}
			for zb0017 > 0 {
				var zb0007 basics.AppIndex
				var zb0008 basics.AppParams
				zb0017--
				bts, err = zb0007.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AppParams")
					return
				}
				bts, err = zb0008.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AppParams", zb0007)
					return
				}
				(*z).AccountData.AppParams[zb0007] = zb0008
			}
		}
		if zb0009 > 0 {
			zb0009--
			bts, err = (*z).AccountData.TotalAppSchema.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TotalAppSchema")
				return
			}
		}
		if zb0009 > 0 {
			zb0009--
			bts, err = (*z).ExtendedAssetHolding.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ExtendedAssetHolding")
				return
			}
		}
		if zb0009 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0009)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0010 {
			(*z) = PersistedAccountData{}
		}
		for zb0009 > 0 {
			zb0009--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "onl":
				bts, err = (*z).AccountData.Status.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
			case "algo":
				bts, err = (*z).AccountData.MicroAlgos.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "MicroAlgos")
					return
				}
			case "ebase":
				(*z).AccountData.RewardsBase, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RewardsBase")
					return
				}
			case "ern":
				bts, err = (*z).AccountData.RewardedMicroAlgos.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "RewardedMicroAlgos")
					return
				}
			case "vote":
				bts, err = (*z).AccountData.VoteID.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteID")
					return
				}
			case "sel":
				bts, err = (*z).AccountData.SelectionID.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "SelectionID")
					return
				}
			case "voteFst":
				bts, err = (*z).AccountData.VoteFirstValid.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteFirstValid")
					return
				}
			case "voteLst":
				bts, err = (*z).AccountData.VoteLastValid.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteLastValid")
					return
				}
			case "voteKD":
				(*z).AccountData.VoteKeyDilution, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteKeyDilution")
					return
				}
			case "apar":
				var zb0019 int
				var zb0020 bool
				zb0019, zb0020, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetParams")
					return
				}
				if zb0019 > EncodedMaxAssetsPerAccount {
					err = msgp.ErrOverflow(uint64(zb0019), uint64(EncodedMaxAssetsPerAccount))
					err = msgp.WrapError(err, "AssetParams")
					return
				}
				if zb0020 {
					(*z).AccountData.AssetParams = nil
				} else if (*z).AccountData.AssetParams == nil {
					(*z).AccountData.AssetParams = make(map[basics.AssetIndex]basics.AssetParams, zb0019)
				}
				for zb0019 > 0 {
					var zb0001 basics.AssetIndex
					var zb0002 basics.AssetParams
					zb0019--
					bts, err = zb0001.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "AssetParams")
						return
					}
					bts, err = zb0002.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "AssetParams", zb0001)
						return
					}
					(*z).AccountData.AssetParams[zb0001] = zb0002
				}
			case "asset":
				var zb0021 int
				var zb0022 bool
				zb0021, zb0022, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Assets")
					return
				}
				if zb0021 > EncodedMaxAssetsPerAccount {
					err = msgp.ErrOverflow(uint64(zb0021), uint64(EncodedMaxAssetsPerAccount))
					err = msgp.WrapError(err, "Assets")
					return
				}
				if zb0022 {
					(*z).AccountData.Assets = nil
				} else if (*z).AccountData.Assets == nil {
					(*z).AccountData.Assets = make(map[basics.AssetIndex]basics.AssetHolding, zb0021)
				}
				for zb0021 > 0 {
					var zb0003 basics.AssetIndex
					var zb0004 basics.AssetHolding
					zb0021--
					bts, err = zb0003.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Assets")
						return
					}
					bts, err = zb0004.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Assets", zb0003)
						return
					}
					(*z).AccountData.Assets[zb0003] = zb0004
				}
			case "spend":
				bts, err = (*z).AccountData.AuthAddr.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "AuthAddr")
					return
				}
			case "appl":
				var zb0023 int
				var zb0024 bool
				zb0023, zb0024, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppLocalStates")
					return
				}
				if zb0023 > EncodedMaxAppLocalStates {
					err = msgp.ErrOverflow(uint64(zb0023), uint64(EncodedMaxAppLocalStates))
					err = msgp.WrapError(err, "AppLocalStates")
					return
				}
				if zb0024 {
					(*z).AccountData.AppLocalStates = nil
				} else if (*z).AccountData.AppLocalStates == nil {
					(*z).AccountData.AppLocalStates = make(map[basics.AppIndex]basics.AppLocalState, zb0023)
				}
				for zb0023 > 0 {
					var zb0005 basics.AppIndex
					var zb0006 basics.AppLocalState
					zb0023--
					bts, err = zb0005.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "AppLocalStates")
						return
					}
					bts, err = zb0006.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "AppLocalStates", zb0005)
						return
					}
					(*z).AccountData.AppLocalStates[zb0005] = zb0006
				}
			case "appp":
				var zb0025 int
				var zb0026 bool
				zb0025, zb0026, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppParams")
					return
				}
				if zb0025 > EncodedMaxAppParams {
					err = msgp.ErrOverflow(uint64(zb0025), uint64(EncodedMaxAppParams))
					err = msgp.WrapError(err, "AppParams")
					return
				}
				if zb0026 {
					(*z).AccountData.AppParams = nil
				} else if (*z).AccountData.AppParams == nil {
					(*z).AccountData.AppParams = make(map[basics.AppIndex]basics.AppParams, zb0025)
				}
				for zb0025 > 0 {
					var zb0007 basics.AppIndex
					var zb0008 basics.AppParams
					zb0025--
					bts, err = zb0007.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "AppParams")
						return
					}
					bts, err = zb0008.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "AppParams", zb0007)
						return
					}
					(*z).AccountData.AppParams[zb0007] = zb0008
				}
			case "tsch":
				bts, err = (*z).AccountData.TotalAppSchema.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalAppSchema")
					return
				}
			case "eash":
				bts, err = (*z).ExtendedAssetHolding.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ExtendedAssetHolding")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *PersistedAccountData) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*PersistedAccountData)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PersistedAccountData) Msgsize() (s int) {
	s = 3 + 4 + (*z).AccountData.Status.Msgsize() + 5 + (*z).AccountData.MicroAlgos.Msgsize() + 6 + msgp.Uint64Size + 4 + (*z).AccountData.RewardedMicroAlgos.Msgsize() + 5 + (*z).AccountData.VoteID.Msgsize() + 4 + (*z).AccountData.SelectionID.Msgsize() + 8 + (*z).AccountData.VoteFirstValid.Msgsize() + 8 + (*z).AccountData.VoteLastValid.Msgsize() + 7 + msgp.Uint64Size + 5 + msgp.MapHeaderSize
	if (*z).AccountData.AssetParams != nil {
		for zb0001, zb0002 := range (*z).AccountData.AssetParams {
			_ = zb0001
			_ = zb0002
			s += 0 + zb0001.Msgsize() + zb0002.Msgsize()
		}
	}
	s += 6 + msgp.MapHeaderSize
	if (*z).AccountData.Assets != nil {
		for zb0003, zb0004 := range (*z).AccountData.Assets {
			_ = zb0003
			_ = zb0004
			s += 0 + zb0003.Msgsize() + zb0004.Msgsize()
		}
	}
	s += 6 + (*z).AccountData.AuthAddr.Msgsize() + 5 + msgp.MapHeaderSize
	if (*z).AccountData.AppLocalStates != nil {
		for zb0005, zb0006 := range (*z).AccountData.AppLocalStates {
			_ = zb0005
			_ = zb0006
			s += 0 + zb0005.Msgsize() + zb0006.Msgsize()
		}
	}
	s += 5 + msgp.MapHeaderSize
	if (*z).AccountData.AppParams != nil {
		for zb0007, zb0008 := range (*z).AccountData.AppParams {
			_ = zb0007
			_ = zb0008
			s += 0 + zb0007.Msgsize() + zb0008.Msgsize()
		}
	}
	s += 5 + (*z).AccountData.TotalAppSchema.Msgsize() + 5 + (*z).ExtendedAssetHolding.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *PersistedAccountData) MsgIsZero() bool {
	return ((*z).AccountData.Status.MsgIsZero()) && ((*z).AccountData.MicroAlgos.MsgIsZero()) && ((*z).AccountData.RewardsBase == 0) && ((*z).AccountData.RewardedMicroAlgos.MsgIsZero()) && ((*z).AccountData.VoteID.MsgIsZero()) && ((*z).AccountData.SelectionID.MsgIsZero()) && ((*z).AccountData.VoteFirstValid.MsgIsZero()) && ((*z).AccountData.VoteLastValid.MsgIsZero()) && ((*z).AccountData.VoteKeyDilution == 0) && (len((*z).AccountData.AssetParams) == 0) && (len((*z).AccountData.Assets) == 0) && ((*z).AccountData.AuthAddr.MsgIsZero()) && (len((*z).AccountData.AppLocalStates) == 0) && (len((*z).AccountData.AppParams) == 0) && ((*z).AccountData.TotalAppSchema.MsgIsZero()) && ((*z).ExtendedAssetHolding.MsgIsZero())
}

// MarshalMsg implements msgp.Marshaler
func (z *catchpointFileBalancesChunk) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0002Len := uint32(1)
	var zb0002Mask uint8 /* 2 bits */
	if len((*z).Balances) == 0 {
		zb0002Len--
		zb0002Mask |= 0x2
	}
	// variable map header, size zb0002Len
	o = append(o, 0x80|uint8(zb0002Len))
	if zb0002Len != 0 {
		if (zb0002Mask & 0x2) == 0 { // if not empty
			// string "bl"
			o = append(o, 0xa2, 0x62, 0x6c)
			if (*z).Balances == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Balances)))
			}
			for zb0001 := range (*z).Balances {
				// omitempty: check for empty values
				zb0003Len := uint32(2)
				var zb0003Mask uint8 /* 3 bits */
				if (*z).Balances[zb0001].AccountData.MsgIsZero() {
					zb0003Len--
					zb0003Mask |= 0x2
				}
				if (*z).Balances[zb0001].Address.MsgIsZero() {
					zb0003Len--
					zb0003Mask |= 0x4
				}
				// variable map header, size zb0003Len
				o = append(o, 0x80|uint8(zb0003Len))
				if (zb0003Mask & 0x2) == 0 { // if not empty
					// string "ad"
					o = append(o, 0xa2, 0x61, 0x64)
					o, err = (*z).Balances[zb0001].AccountData.MarshalMsg(o)
					if err != nil {
						err = msgp.WrapError(err, "Balances", zb0001, "AccountData")
						return
					}
				}
				if (zb0003Mask & 0x4) == 0 { // if not empty
					// string "pk"
					o = append(o, 0xa2, 0x70, 0x6b)
					o, err = (*z).Balances[zb0001].Address.MarshalMsg(o)
					if err != nil {
						err = msgp.WrapError(err, "Balances", zb0001, "Address")
						return
					}
				}
			}
		}
	}
	return
}

func (_ *catchpointFileBalancesChunk) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*catchpointFileBalancesChunk)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *catchpointFileBalancesChunk) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0002 int
	var zb0003 bool
	zb0002, zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0002, zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 > 0 {
			zb0002--
			var zb0004 int
			var zb0005 bool
			zb0004, zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Balances")
				return
			}
			if zb0004 > BalancesPerCatchpointFileChunk {
				err = msgp.ErrOverflow(uint64(zb0004), uint64(BalancesPerCatchpointFileChunk))
				err = msgp.WrapError(err, "struct-from-array", "Balances")
				return
			}
			if zb0005 {
				(*z).Balances = nil
			} else if (*z).Balances != nil && cap((*z).Balances) >= zb0004 {
				(*z).Balances = ((*z).Balances)[:zb0004]
			} else {
				(*z).Balances = make([]encodedBalanceRecord, zb0004)
			}
			for zb0001 := range (*z).Balances {
				var zb0006 int
				var zb0007 bool
				zb0006, zb0007, bts, err = msgp.ReadMapHeaderBytes(bts)
				if _, ok := err.(msgp.TypeError); ok {
					zb0006, zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "Balances", zb0001)
						return
					}
					if zb0006 > 0 {
						zb0006--
						bts, err = (*z).Balances[zb0001].Address.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Balances", zb0001, "struct-from-array", "Address")
							return
						}
					}
					if zb0006 > 0 {
						zb0006--
						bts, err = (*z).Balances[zb0001].AccountData.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Balances", zb0001, "struct-from-array", "AccountData")
							return
						}
					}
					if zb0006 > 0 {
						err = msgp.ErrTooManyArrayFields(zb0006)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Balances", zb0001, "struct-from-array")
							return
						}
					}
				} else {
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "Balances", zb0001)
						return
					}
					if zb0007 {
						(*z).Balances[zb0001] = encodedBalanceRecord{}
					}
					for zb0006 > 0 {
						zb0006--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Balances", zb0001)
							return
						}
						switch string(field) {
						case "pk":
							bts, err = (*z).Balances[zb0001].Address.UnmarshalMsg(bts)
							if err != nil {
								err = msgp.WrapError(err, "struct-from-array", "Balances", zb0001, "Address")
								return
							}
						case "ad":
							bts, err = (*z).Balances[zb0001].AccountData.UnmarshalMsg(bts)
							if err != nil {
								err = msgp.WrapError(err, "struct-from-array", "Balances", zb0001, "AccountData")
								return
							}
						default:
							err = msgp.ErrNoField(string(field))
							if err != nil {
								err = msgp.WrapError(err, "struct-from-array", "Balances", zb0001)
								return
							}
						}
					}
				}
			}
		}
		if zb0002 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0002)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0003 {
			(*z) = catchpointFileBalancesChunk{}
		}
		for zb0002 > 0 {
			zb0002--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "bl":
				var zb0008 int
				var zb0009 bool
				zb0008, zb0009, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Balances")
					return
				}
				if zb0008 > BalancesPerCatchpointFileChunk {
					err = msgp.ErrOverflow(uint64(zb0008), uint64(BalancesPerCatchpointFileChunk))
					err = msgp.WrapError(err, "Balances")
					return
				}
				if zb0009 {
					(*z).Balances = nil
				} else if (*z).Balances != nil && cap((*z).Balances) >= zb0008 {
					(*z).Balances = ((*z).Balances)[:zb0008]
				} else {
					(*z).Balances = make([]encodedBalanceRecord, zb0008)
				}
				for zb0001 := range (*z).Balances {
					var zb0010 int
					var zb0011 bool
					zb0010, zb0011, bts, err = msgp.ReadMapHeaderBytes(bts)
					if _, ok := err.(msgp.TypeError); ok {
						zb0010, zb0011, bts, err = msgp.ReadArrayHeaderBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Balances", zb0001)
							return
						}
						if zb0010 > 0 {
							zb0010--
							bts, err = (*z).Balances[zb0001].Address.UnmarshalMsg(bts)
							if err != nil {
								err = msgp.WrapError(err, "Balances", zb0001, "struct-from-array", "Address")
								return
							}
						}
						if zb0010 > 0 {
							zb0010--
							bts, err = (*z).Balances[zb0001].AccountData.UnmarshalMsg(bts)
							if err != nil {
								err = msgp.WrapError(err, "Balances", zb0001, "struct-from-array", "AccountData")
								return
							}
						}
						if zb0010 > 0 {
							err = msgp.ErrTooManyArrayFields(zb0010)
							if err != nil {
								err = msgp.WrapError(err, "Balances", zb0001, "struct-from-array")
								return
							}
						}
					} else {
						if err != nil {
							err = msgp.WrapError(err, "Balances", zb0001)
							return
						}
						if zb0011 {
							(*z).Balances[zb0001] = encodedBalanceRecord{}
						}
						for zb0010 > 0 {
							zb0010--
							field, bts, err = msgp.ReadMapKeyZC(bts)
							if err != nil {
								err = msgp.WrapError(err, "Balances", zb0001)
								return
							}
							switch string(field) {
							case "pk":
								bts, err = (*z).Balances[zb0001].Address.UnmarshalMsg(bts)
								if err != nil {
									err = msgp.WrapError(err, "Balances", zb0001, "Address")
									return
								}
							case "ad":
								bts, err = (*z).Balances[zb0001].AccountData.UnmarshalMsg(bts)
								if err != nil {
									err = msgp.WrapError(err, "Balances", zb0001, "AccountData")
									return
								}
							default:
								err = msgp.ErrNoField(string(field))
								if err != nil {
									err = msgp.WrapError(err, "Balances", zb0001)
									return
								}
							}
						}
					}
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *catchpointFileBalancesChunk) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*catchpointFileBalancesChunk)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *catchpointFileBalancesChunk) Msgsize() (s int) {
	s = 1 + 3 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).Balances {
		s += 1 + 3 + (*z).Balances[zb0001].Address.Msgsize() + 3 + (*z).Balances[zb0001].AccountData.Msgsize()
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z *catchpointFileBalancesChunk) MsgIsZero() bool {
	return (len((*z).Balances) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z catchpointState) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendString(o, string(z))
	return
}

func (_ catchpointState) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(catchpointState)
	if !ok {
		_, ok = (z).(*catchpointState)
	}
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *catchpointState) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 string
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = catchpointState(zb0001)
	}
	o = bts
	return
}

func (_ *catchpointState) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*catchpointState)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z catchpointState) Msgsize() (s int) {
	s = msgp.StringPrefixSize + len(string(z))
	return
}

// MsgIsZero returns whether this is a zero value
func (z catchpointState) MsgIsZero() bool {
	return z == ""
}

// MarshalMsg implements msgp.Marshaler
func (z *encodedBalanceRecord) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 3 bits */
	if (*z).AccountData.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).Address.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "ad"
			o = append(o, 0xa2, 0x61, 0x64)
			o, err = (*z).AccountData.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "AccountData")
				return
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "pk"
			o = append(o, 0xa2, 0x70, 0x6b)
			o, err = (*z).Address.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		}
	}
	return
}

func (_ *encodedBalanceRecord) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedBalanceRecord)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *encodedBalanceRecord) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Address.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Address")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).AccountData.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AccountData")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = encodedBalanceRecord{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "pk":
				bts, err = (*z).Address.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Address")
					return
				}
			case "ad":
				bts, err = (*z).AccountData.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "AccountData")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *encodedBalanceRecord) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedBalanceRecord)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *encodedBalanceRecord) Msgsize() (s int) {
	s = 1 + 3 + (*z).Address.Msgsize() + 3 + (*z).AccountData.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *encodedBalanceRecord) MsgIsZero() bool {
	return ((*z).Address.MsgIsZero()) && ((*z).AccountData.MsgIsZero())
}

// MarshalMsg implements msgp.Marshaler
func (z storageAction) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint64(o, uint64(z))
	return
}

func (_ storageAction) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(storageAction)
	if !ok {
		_, ok = (z).(*storageAction)
	}
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *storageAction) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint64
		zb0001, bts, err = msgp.ReadUint64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = storageAction(zb0001)
	}
	o = bts
	return
}

func (_ *storageAction) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*storageAction)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z storageAction) Msgsize() (s int) {
	s = msgp.Uint64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z storageAction) MsgIsZero() bool {
	return z == 0
}
