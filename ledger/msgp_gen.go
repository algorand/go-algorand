package ledger

// Code generated by github.com/algorand/msgp DO NOT EDIT.

import (
	"sort"

	"github.com/algorand/go-algorand/config"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/algorand/go-algorand/data/bookkeeping"
	"github.com/algorand/go-algorand/data/transactions"
	"github.com/algorand/go-algorand/protocol"
	"github.com/algorand/msgp/msgp"
)

// The following msgp objects are implemented in this file:
// CatchpointCatchupState
//            |-----> MarshalMsg
//            |-----> CanMarshalMsg
//            |-----> (*) UnmarshalMsg
//            |-----> (*) CanUnmarshalMsg
//            |-----> Msgsize
//            |-----> MsgIsZero
//
// CatchpointFileHeader
//           |-----> (*) MarshalMsg
//           |-----> (*) CanMarshalMsg
//           |-----> (*) UnmarshalMsg
//           |-----> (*) CanUnmarshalMsg
//           |-----> (*) Msgsize
//           |-----> (*) MsgIsZero
//
// baseAccountData
//        |-----> (*) MarshalMsg
//        |-----> (*) CanMarshalMsg
//        |-----> (*) UnmarshalMsg
//        |-----> (*) CanUnmarshalMsg
//        |-----> (*) Msgsize
//        |-----> (*) MsgIsZero
//
// baseAccountDataMigrate
//            |-----> (*) MarshalMsg
//            |-----> (*) CanMarshalMsg
//            |-----> (*) UnmarshalMsg
//            |-----> (*) CanUnmarshalMsg
//            |-----> (*) Msgsize
//            |-----> (*) MsgIsZero
//
// baseOnlineAccountData
//           |-----> (*) MarshalMsg
//           |-----> (*) CanMarshalMsg
//           |-----> (*) UnmarshalMsg
//           |-----> (*) CanUnmarshalMsg
//           |-----> (*) Msgsize
//           |-----> (*) MsgIsZero
//
// catchpointFileBalancesChunkV5
//               |-----> (*) MarshalMsg
//               |-----> (*) CanMarshalMsg
//               |-----> (*) UnmarshalMsg
//               |-----> (*) CanUnmarshalMsg
//               |-----> (*) Msgsize
//               |-----> (*) MsgIsZero
//
// catchpointFileBalancesChunkV6
//               |-----> (*) MarshalMsg
//               |-----> (*) CanMarshalMsg
//               |-----> (*) UnmarshalMsg
//               |-----> (*) CanUnmarshalMsg
//               |-----> (*) Msgsize
//               |-----> (*) MsgIsZero
//
// catchpointState
//        |-----> MarshalMsg
//        |-----> CanMarshalMsg
//        |-----> (*) UnmarshalMsg
//        |-----> (*) CanUnmarshalMsg
//        |-----> Msgsize
//        |-----> MsgIsZero
//
// encodedBalanceRecordV5
//            |-----> (*) MarshalMsg
//            |-----> (*) CanMarshalMsg
//            |-----> (*) UnmarshalMsg
//            |-----> (*) CanUnmarshalMsg
//            |-----> (*) Msgsize
//            |-----> (*) MsgIsZero
//
// encodedBalanceRecordV6
//            |-----> (*) MarshalMsg
//            |-----> (*) CanMarshalMsg
//            |-----> (*) UnmarshalMsg
//            |-----> (*) CanUnmarshalMsg
//            |-----> (*) Msgsize
//            |-----> (*) MsgIsZero
//
// resourceFlags
//       |-----> MarshalMsg
//       |-----> CanMarshalMsg
//       |-----> (*) UnmarshalMsg
//       |-----> (*) CanUnmarshalMsg
//       |-----> Msgsize
//       |-----> MsgIsZero
//
// resourcesData
//       |-----> (*) MarshalMsg
//       |-----> (*) CanMarshalMsg
//       |-----> (*) UnmarshalMsg
//       |-----> (*) CanUnmarshalMsg
//       |-----> (*) Msgsize
//       |-----> (*) MsgIsZero
//
// txTailRound
//      |-----> (*) MarshalMsg
//      |-----> (*) CanMarshalMsg
//      |-----> (*) UnmarshalMsg
//      |-----> (*) CanUnmarshalMsg
//      |-----> (*) Msgsize
//      |-----> (*) MsgIsZero
//
// txTailRoundLease
//         |-----> (*) MarshalMsg
//         |-----> (*) CanMarshalMsg
//         |-----> (*) UnmarshalMsg
//         |-----> (*) CanUnmarshalMsg
//         |-----> (*) Msgsize
//         |-----> (*) MsgIsZero
//

// MarshalMsg implements msgp.Marshaler
func (z CatchpointCatchupState) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt32(o, int32(z))
	return
}

func (_ CatchpointCatchupState) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(CatchpointCatchupState)
	if !ok {
		_, ok = (z).(*CatchpointCatchupState)
	}
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CatchpointCatchupState) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int32
		zb0001, bts, err = msgp.ReadInt32Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = CatchpointCatchupState(zb0001)
	}
	o = bts
	return
}

func (_ *CatchpointCatchupState) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*CatchpointCatchupState)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z CatchpointCatchupState) Msgsize() (s int) {
	s = msgp.Int32Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z CatchpointCatchupState) MsgIsZero() bool {
	return z == 0
}

// MarshalMsg implements msgp.Marshaler
func (z *CatchpointFileHeader) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(8)
	var zb0001Mask uint16 /* 9 bits */
	if (*z).Totals.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).TotalAccounts == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if (*z).BalancesRound.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if (*z).BlockHeaderDigest.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if (*z).BlocksRound.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if (*z).Catchpoint == "" {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if (*z).TotalChunks == 0 {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	if (*z).Version == 0 {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "accountTotals"
			o = append(o, 0xad, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x73)
			o = (*z).Totals.MarshalMsg(o)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "accountsCount"
			o = append(o, 0xad, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74)
			o = msgp.AppendUint64(o, (*z).TotalAccounts)
		}
		if (zb0001Mask & 0x8) == 0 { // if not empty
			// string "balancesRound"
			o = append(o, 0xad, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64)
			o = (*z).BalancesRound.MarshalMsg(o)
		}
		if (zb0001Mask & 0x10) == 0 { // if not empty
			// string "blockHeaderDigest"
			o = append(o, 0xb1, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74)
			o = (*z).BlockHeaderDigest.MarshalMsg(o)
		}
		if (zb0001Mask & 0x20) == 0 { // if not empty
			// string "blocksRound"
			o = append(o, 0xab, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64)
			o = (*z).BlocksRound.MarshalMsg(o)
		}
		if (zb0001Mask & 0x40) == 0 { // if not empty
			// string "catchpoint"
			o = append(o, 0xaa, 0x63, 0x61, 0x74, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74)
			o = msgp.AppendString(o, (*z).Catchpoint)
		}
		if (zb0001Mask & 0x80) == 0 { // if not empty
			// string "chunksCount"
			o = append(o, 0xab, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74)
			o = msgp.AppendUint64(o, (*z).TotalChunks)
		}
		if (zb0001Mask & 0x100) == 0 { // if not empty
			// string "version"
			o = append(o, 0xa7, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
			o = msgp.AppendUint64(o, (*z).Version)
		}
	}
	return
}

func (_ *CatchpointFileHeader) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*CatchpointFileHeader)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CatchpointFileHeader) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			(*z).Version, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Version")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).BalancesRound.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "BalancesRound")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).BlocksRound.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "BlocksRound")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Totals.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Totals")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).TotalAccounts, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TotalAccounts")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).TotalChunks, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TotalChunks")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).Catchpoint, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Catchpoint")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).BlockHeaderDigest.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "BlockHeaderDigest")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = CatchpointFileHeader{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "version":
				(*z).Version, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Version")
					return
				}
			case "balancesRound":
				bts, err = (*z).BalancesRound.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "BalancesRound")
					return
				}
			case "blocksRound":
				bts, err = (*z).BlocksRound.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "BlocksRound")
					return
				}
			case "accountTotals":
				bts, err = (*z).Totals.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Totals")
					return
				}
			case "accountsCount":
				(*z).TotalAccounts, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalAccounts")
					return
				}
			case "chunksCount":
				(*z).TotalChunks, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalChunks")
					return
				}
			case "catchpoint":
				(*z).Catchpoint, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Catchpoint")
					return
				}
			case "blockHeaderDigest":
				bts, err = (*z).BlockHeaderDigest.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "BlockHeaderDigest")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *CatchpointFileHeader) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*CatchpointFileHeader)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CatchpointFileHeader) Msgsize() (s int) {
	s = 1 + 8 + msgp.Uint64Size + 14 + (*z).BalancesRound.Msgsize() + 12 + (*z).BlocksRound.Msgsize() + 14 + (*z).Totals.Msgsize() + 14 + msgp.Uint64Size + 12 + msgp.Uint64Size + 11 + msgp.StringPrefixSize + len((*z).Catchpoint) + 18 + (*z).BlockHeaderDigest.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *CatchpointFileHeader) MsgIsZero() bool {
	return ((*z).Version == 0) && ((*z).BalancesRound.MsgIsZero()) && ((*z).BlocksRound.MsgIsZero()) && ((*z).Totals.MsgIsZero()) && ((*z).TotalAccounts == 0) && ((*z).TotalChunks == 0) && ((*z).Catchpoint == "") && ((*z).BlockHeaderDigest.MsgIsZero())
}

// MarshalMsg implements msgp.Marshaler
func (z *baseAccountData) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(13)
	var zb0001Mask uint16 /* 14 bits */
	if (*z).Status.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).MicroAlgos.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if (*z).RewardsBase == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if (*z).RewardedMicroAlgos.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if (*z).AuthAddr.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if (*z).TotalAppSchemaNumUint == 0 {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if (*z).TotalAppSchemaNumByteSlice == 0 {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	if (*z).TotalExtraAppPages == 0 {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	if (*z).TotalAssetParams == 0 {
		zb0001Len--
		zb0001Mask |= 0x200
	}
	if (*z).TotalAssets == 0 {
		zb0001Len--
		zb0001Mask |= 0x400
	}
	if (*z).TotalAppParams == 0 {
		zb0001Len--
		zb0001Mask |= 0x800
	}
	if (*z).TotalAppLocalStates == 0 {
		zb0001Len--
		zb0001Mask |= 0x1000
	}
	if (*z).UpdateRound == 0 {
		zb0001Len--
		zb0001Mask |= 0x2000
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "a"
			o = append(o, 0xa1, 0x61)
			o = (*z).Status.MarshalMsg(o)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "b"
			o = append(o, 0xa1, 0x62)
			o = (*z).MicroAlgos.MarshalMsg(o)
		}
		if (zb0001Mask & 0x8) == 0 { // if not empty
			// string "c"
			o = append(o, 0xa1, 0x63)
			o = msgp.AppendUint64(o, (*z).RewardsBase)
		}
		if (zb0001Mask & 0x10) == 0 { // if not empty
			// string "d"
			o = append(o, 0xa1, 0x64)
			o = (*z).RewardedMicroAlgos.MarshalMsg(o)
		}
		if (zb0001Mask & 0x20) == 0 { // if not empty
			// string "e"
			o = append(o, 0xa1, 0x65)
			o = (*z).AuthAddr.MarshalMsg(o)
		}
		if (zb0001Mask & 0x40) == 0 { // if not empty
			// string "f"
			o = append(o, 0xa1, 0x66)
			o = msgp.AppendUint64(o, (*z).TotalAppSchemaNumUint)
		}
		if (zb0001Mask & 0x80) == 0 { // if not empty
			// string "g"
			o = append(o, 0xa1, 0x67)
			o = msgp.AppendUint64(o, (*z).TotalAppSchemaNumByteSlice)
		}
		if (zb0001Mask & 0x100) == 0 { // if not empty
			// string "h"
			o = append(o, 0xa1, 0x68)
			o = msgp.AppendUint32(o, (*z).TotalExtraAppPages)
		}
		if (zb0001Mask & 0x200) == 0 { // if not empty
			// string "i"
			o = append(o, 0xa1, 0x69)
			o = msgp.AppendUint64(o, (*z).TotalAssetParams)
		}
		if (zb0001Mask & 0x400) == 0 { // if not empty
			// string "j"
			o = append(o, 0xa1, 0x6a)
			o = msgp.AppendUint64(o, (*z).TotalAssets)
		}
		if (zb0001Mask & 0x800) == 0 { // if not empty
			// string "k"
			o = append(o, 0xa1, 0x6b)
			o = msgp.AppendUint64(o, (*z).TotalAppParams)
		}
		if (zb0001Mask & 0x1000) == 0 { // if not empty
			// string "l"
			o = append(o, 0xa1, 0x6c)
			o = msgp.AppendUint64(o, (*z).TotalAppLocalStates)
		}
		if (zb0001Mask & 0x2000) == 0 { // if not empty
			// string "z"
			o = append(o, 0xa1, 0x7a)
			o = msgp.AppendUint64(o, (*z).UpdateRound)
		}
	}
	return
}

func (_ *baseAccountData) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*baseAccountData)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *baseAccountData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Status.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Status")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).MicroAlgos.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MicroAlgos")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).RewardsBase, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RewardsBase")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).RewardedMicroAlgos.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RewardedMicroAlgos")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).AuthAddr.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AuthAddr")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).TotalAppSchemaNumUint, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TotalAppSchemaNumUint")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).TotalAppSchemaNumByteSlice, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TotalAppSchemaNumByteSlice")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).TotalExtraAppPages, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TotalExtraAppPages")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).TotalAssetParams, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TotalAssetParams")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).TotalAssets, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TotalAssets")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).TotalAppParams, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TotalAppParams")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).TotalAppLocalStates, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TotalAppLocalStates")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).UpdateRound, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "UpdateRound")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = baseAccountData{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "a":
				bts, err = (*z).Status.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
			case "b":
				bts, err = (*z).MicroAlgos.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "MicroAlgos")
					return
				}
			case "c":
				(*z).RewardsBase, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RewardsBase")
					return
				}
			case "d":
				bts, err = (*z).RewardedMicroAlgos.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "RewardedMicroAlgos")
					return
				}
			case "e":
				bts, err = (*z).AuthAddr.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "AuthAddr")
					return
				}
			case "f":
				(*z).TotalAppSchemaNumUint, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalAppSchemaNumUint")
					return
				}
			case "g":
				(*z).TotalAppSchemaNumByteSlice, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalAppSchemaNumByteSlice")
					return
				}
			case "h":
				(*z).TotalExtraAppPages, bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalExtraAppPages")
					return
				}
			case "i":
				(*z).TotalAssetParams, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalAssetParams")
					return
				}
			case "j":
				(*z).TotalAssets, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalAssets")
					return
				}
			case "k":
				(*z).TotalAppParams, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalAppParams")
					return
				}
			case "l":
				(*z).TotalAppLocalStates, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalAppLocalStates")
					return
				}
			case "z":
				(*z).UpdateRound, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "UpdateRound")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *baseAccountData) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*baseAccountData)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *baseAccountData) Msgsize() (s int) {
	s = 1 + 2 + (*z).Status.Msgsize() + 2 + (*z).MicroAlgos.Msgsize() + 2 + msgp.Uint64Size + 2 + (*z).RewardedMicroAlgos.Msgsize() + 2 + (*z).AuthAddr.Msgsize() + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.Uint32Size + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z *baseAccountData) MsgIsZero() bool {
	return ((*z).Status.MsgIsZero()) && ((*z).MicroAlgos.MsgIsZero()) && ((*z).RewardsBase == 0) && ((*z).RewardedMicroAlgos.MsgIsZero()) && ((*z).AuthAddr.MsgIsZero()) && ((*z).TotalAppSchemaNumUint == 0) && ((*z).TotalAppSchemaNumByteSlice == 0) && ((*z).TotalExtraAppPages == 0) && ((*z).TotalAssetParams == 0) && ((*z).TotalAssets == 0) && ((*z).TotalAppParams == 0) && ((*z).TotalAppLocalStates == 0) && ((*z).UpdateRound == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *baseAccountDataMigrate) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(21)
	var zb0001Mask uint32 /* 24 bits */
	if (*z).baseOnlineAccountData.VoteID.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if (*z).baseOnlineAccountData.SelectionID.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).baseOnlineAccountData.VoteFirstValid.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if (*z).baseOnlineAccountData.VoteLastValid.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if (*z).baseOnlineAccountData.VoteKeyDilution == 0 {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if (*z).baseOnlineAccountData.StateProofID.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if (*z).baseOnlineAccountData.MicroAlgos.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if (*z).baseOnlineAccountData.RewardsBase == 0 {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	if (*z).baseAccountData.Status.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x800
	}
	if (*z).baseAccountData.MicroAlgos.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x1000
	}
	if (*z).baseAccountData.RewardsBase == 0 {
		zb0001Len--
		zb0001Mask |= 0x2000
	}
	if (*z).baseAccountData.RewardedMicroAlgos.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x4000
	}
	if (*z).baseAccountData.AuthAddr.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x8000
	}
	if (*z).baseAccountData.TotalAppSchemaNumUint == 0 {
		zb0001Len--
		zb0001Mask |= 0x10000
	}
	if (*z).baseAccountData.TotalAppSchemaNumByteSlice == 0 {
		zb0001Len--
		zb0001Mask |= 0x20000
	}
	if (*z).baseAccountData.TotalExtraAppPages == 0 {
		zb0001Len--
		zb0001Mask |= 0x40000
	}
	if (*z).baseAccountData.TotalAssetParams == 0 {
		zb0001Len--
		zb0001Mask |= 0x80000
	}
	if (*z).baseAccountData.TotalAssets == 0 {
		zb0001Len--
		zb0001Mask |= 0x100000
	}
	if (*z).baseAccountData.TotalAppParams == 0 {
		zb0001Len--
		zb0001Mask |= 0x200000
	}
	if (*z).baseAccountData.TotalAppLocalStates == 0 {
		zb0001Len--
		zb0001Mask |= 0x400000
	}
	if (*z).baseAccountData.UpdateRound == 0 {
		zb0001Len--
		zb0001Mask |= 0x800000
	}
	// variable map header, size zb0001Len
	o = msgp.AppendMapHeader(o, zb0001Len)
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not empty
			// string "A"
			o = append(o, 0xa1, 0x41)
			o = (*z).baseOnlineAccountData.VoteID.MarshalMsg(o)
		}
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "B"
			o = append(o, 0xa1, 0x42)
			o = (*z).baseOnlineAccountData.SelectionID.MarshalMsg(o)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "C"
			o = append(o, 0xa1, 0x43)
			o = (*z).baseOnlineAccountData.VoteFirstValid.MarshalMsg(o)
		}
		if (zb0001Mask & 0x8) == 0 { // if not empty
			// string "D"
			o = append(o, 0xa1, 0x44)
			o = (*z).baseOnlineAccountData.VoteLastValid.MarshalMsg(o)
		}
		if (zb0001Mask & 0x10) == 0 { // if not empty
			// string "E"
			o = append(o, 0xa1, 0x45)
			o = msgp.AppendUint64(o, (*z).baseOnlineAccountData.VoteKeyDilution)
		}
		if (zb0001Mask & 0x20) == 0 { // if not empty
			// string "F"
			o = append(o, 0xa1, 0x46)
			o = (*z).baseOnlineAccountData.StateProofID.MarshalMsg(o)
		}
		if (zb0001Mask & 0x40) == 0 { // if not empty
			// string "G"
			o = append(o, 0xa1, 0x47)
			o = (*z).baseOnlineAccountData.MicroAlgos.MarshalMsg(o)
		}
		if (zb0001Mask & 0x80) == 0 { // if not empty
			// string "H"
			o = append(o, 0xa1, 0x48)
			o = msgp.AppendUint64(o, (*z).baseOnlineAccountData.RewardsBase)
		}
		if (zb0001Mask & 0x800) == 0 { // if not empty
			// string "a"
			o = append(o, 0xa1, 0x61)
			o = (*z).baseAccountData.Status.MarshalMsg(o)
		}
		if (zb0001Mask & 0x1000) == 0 { // if not empty
			// string "b"
			o = append(o, 0xa1, 0x62)
			o = (*z).baseAccountData.MicroAlgos.MarshalMsg(o)
		}
		if (zb0001Mask & 0x2000) == 0 { // if not empty
			// string "c"
			o = append(o, 0xa1, 0x63)
			o = msgp.AppendUint64(o, (*z).baseAccountData.RewardsBase)
		}
		if (zb0001Mask & 0x4000) == 0 { // if not empty
			// string "d"
			o = append(o, 0xa1, 0x64)
			o = (*z).baseAccountData.RewardedMicroAlgos.MarshalMsg(o)
		}
		if (zb0001Mask & 0x8000) == 0 { // if not empty
			// string "e"
			o = append(o, 0xa1, 0x65)
			o = (*z).baseAccountData.AuthAddr.MarshalMsg(o)
		}
		if (zb0001Mask & 0x10000) == 0 { // if not empty
			// string "f"
			o = append(o, 0xa1, 0x66)
			o = msgp.AppendUint64(o, (*z).baseAccountData.TotalAppSchemaNumUint)
		}
		if (zb0001Mask & 0x20000) == 0 { // if not empty
			// string "g"
			o = append(o, 0xa1, 0x67)
			o = msgp.AppendUint64(o, (*z).baseAccountData.TotalAppSchemaNumByteSlice)
		}
		if (zb0001Mask & 0x40000) == 0 { // if not empty
			// string "h"
			o = append(o, 0xa1, 0x68)
			o = msgp.AppendUint32(o, (*z).baseAccountData.TotalExtraAppPages)
		}
		if (zb0001Mask & 0x80000) == 0 { // if not empty
			// string "i"
			o = append(o, 0xa1, 0x69)
			o = msgp.AppendUint64(o, (*z).baseAccountData.TotalAssetParams)
		}
		if (zb0001Mask & 0x100000) == 0 { // if not empty
			// string "j"
			o = append(o, 0xa1, 0x6a)
			o = msgp.AppendUint64(o, (*z).baseAccountData.TotalAssets)
		}
		if (zb0001Mask & 0x200000) == 0 { // if not empty
			// string "k"
			o = append(o, 0xa1, 0x6b)
			o = msgp.AppendUint64(o, (*z).baseAccountData.TotalAppParams)
		}
		if (zb0001Mask & 0x400000) == 0 { // if not empty
			// string "l"
			o = append(o, 0xa1, 0x6c)
			o = msgp.AppendUint64(o, (*z).baseAccountData.TotalAppLocalStates)
		}
		if (zb0001Mask & 0x800000) == 0 { // if not empty
			// string "z"
			o = append(o, 0xa1, 0x7a)
			o = msgp.AppendUint64(o, (*z).baseAccountData.UpdateRound)
		}
	}
	return
}

func (_ *baseAccountDataMigrate) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*baseAccountDataMigrate)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *baseAccountDataMigrate) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).baseAccountData.Status.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Status")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).baseAccountData.MicroAlgos.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MicroAlgos")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).baseAccountData.RewardsBase, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RewardsBase")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).baseAccountData.RewardedMicroAlgos.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RewardedMicroAlgos")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).baseAccountData.AuthAddr.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AuthAddr")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).baseAccountData.TotalAppSchemaNumUint, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TotalAppSchemaNumUint")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).baseAccountData.TotalAppSchemaNumByteSlice, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TotalAppSchemaNumByteSlice")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).baseAccountData.TotalExtraAppPages, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TotalExtraAppPages")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).baseAccountData.TotalAssetParams, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TotalAssetParams")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).baseAccountData.TotalAssets, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TotalAssets")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).baseAccountData.TotalAppParams, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TotalAppParams")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).baseAccountData.TotalAppLocalStates, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TotalAppLocalStates")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).baseAccountData.UpdateRound, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "UpdateRound")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).baseOnlineAccountData.VoteID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteID")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).baseOnlineAccountData.SelectionID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SelectionID")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).baseOnlineAccountData.VoteFirstValid.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteFirstValid")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).baseOnlineAccountData.VoteLastValid.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteLastValid")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).baseOnlineAccountData.VoteKeyDilution, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteKeyDilution")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).baseOnlineAccountData.StateProofID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "StateProofID")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).baseOnlineAccountData.MicroAlgos.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MicroAlgos")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).baseOnlineAccountData.RewardsBase, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RewardsBase")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = baseAccountDataMigrate{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "a":
				bts, err = (*z).baseAccountData.Status.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
			case "b":
				bts, err = (*z).baseAccountData.MicroAlgos.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "MicroAlgos")
					return
				}
			case "c":
				(*z).baseAccountData.RewardsBase, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RewardsBase")
					return
				}
			case "d":
				bts, err = (*z).baseAccountData.RewardedMicroAlgos.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "RewardedMicroAlgos")
					return
				}
			case "e":
				bts, err = (*z).baseAccountData.AuthAddr.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "AuthAddr")
					return
				}
			case "f":
				(*z).baseAccountData.TotalAppSchemaNumUint, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalAppSchemaNumUint")
					return
				}
			case "g":
				(*z).baseAccountData.TotalAppSchemaNumByteSlice, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalAppSchemaNumByteSlice")
					return
				}
			case "h":
				(*z).baseAccountData.TotalExtraAppPages, bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalExtraAppPages")
					return
				}
			case "i":
				(*z).baseAccountData.TotalAssetParams, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalAssetParams")
					return
				}
			case "j":
				(*z).baseAccountData.TotalAssets, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalAssets")
					return
				}
			case "k":
				(*z).baseAccountData.TotalAppParams, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalAppParams")
					return
				}
			case "l":
				(*z).baseAccountData.TotalAppLocalStates, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalAppLocalStates")
					return
				}
			case "z":
				(*z).baseAccountData.UpdateRound, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "UpdateRound")
					return
				}
			case "A":
				bts, err = (*z).baseOnlineAccountData.VoteID.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteID")
					return
				}
			case "B":
				bts, err = (*z).baseOnlineAccountData.SelectionID.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "SelectionID")
					return
				}
			case "C":
				bts, err = (*z).baseOnlineAccountData.VoteFirstValid.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteFirstValid")
					return
				}
			case "D":
				bts, err = (*z).baseOnlineAccountData.VoteLastValid.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteLastValid")
					return
				}
			case "E":
				(*z).baseOnlineAccountData.VoteKeyDilution, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteKeyDilution")
					return
				}
			case "F":
				bts, err = (*z).baseOnlineAccountData.StateProofID.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "StateProofID")
					return
				}
			case "G":
				bts, err = (*z).baseOnlineAccountData.MicroAlgos.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "MicroAlgos")
					return
				}
			case "H":
				(*z).baseOnlineAccountData.RewardsBase, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RewardsBase")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *baseAccountDataMigrate) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*baseAccountDataMigrate)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *baseAccountDataMigrate) Msgsize() (s int) {
	s = 3 + 2 + (*z).baseAccountData.Status.Msgsize() + 2 + (*z).baseAccountData.MicroAlgos.Msgsize() + 2 + msgp.Uint64Size + 2 + (*z).baseAccountData.RewardedMicroAlgos.Msgsize() + 2 + (*z).baseAccountData.AuthAddr.Msgsize() + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.Uint32Size + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + (*z).baseOnlineAccountData.VoteID.Msgsize() + 2 + (*z).baseOnlineAccountData.SelectionID.Msgsize() + 2 + (*z).baseOnlineAccountData.VoteFirstValid.Msgsize() + 2 + (*z).baseOnlineAccountData.VoteLastValid.Msgsize() + 2 + msgp.Uint64Size + 2 + (*z).baseOnlineAccountData.StateProofID.Msgsize() + 2 + (*z).baseOnlineAccountData.MicroAlgos.Msgsize() + 2 + msgp.Uint64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z *baseAccountDataMigrate) MsgIsZero() bool {
	return ((*z).baseAccountData.Status.MsgIsZero()) && ((*z).baseAccountData.MicroAlgos.MsgIsZero()) && ((*z).baseAccountData.RewardsBase == 0) && ((*z).baseAccountData.RewardedMicroAlgos.MsgIsZero()) && ((*z).baseAccountData.AuthAddr.MsgIsZero()) && ((*z).baseAccountData.TotalAppSchemaNumUint == 0) && ((*z).baseAccountData.TotalAppSchemaNumByteSlice == 0) && ((*z).baseAccountData.TotalExtraAppPages == 0) && ((*z).baseAccountData.TotalAssetParams == 0) && ((*z).baseAccountData.TotalAssets == 0) && ((*z).baseAccountData.TotalAppParams == 0) && ((*z).baseAccountData.TotalAppLocalStates == 0) && ((*z).baseAccountData.UpdateRound == 0) && ((*z).baseOnlineAccountData.VoteID.MsgIsZero()) && ((*z).baseOnlineAccountData.SelectionID.MsgIsZero()) && ((*z).baseOnlineAccountData.VoteFirstValid.MsgIsZero()) && ((*z).baseOnlineAccountData.VoteLastValid.MsgIsZero()) && ((*z).baseOnlineAccountData.VoteKeyDilution == 0) && ((*z).baseOnlineAccountData.StateProofID.MsgIsZero()) && ((*z).baseOnlineAccountData.MicroAlgos.MsgIsZero()) && ((*z).baseOnlineAccountData.RewardsBase == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *baseOnlineAccountData) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(8)
	var zb0001Mask uint16 /* 9 bits */
	if (*z).VoteID.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if (*z).SelectionID.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).VoteFirstValid.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if (*z).VoteLastValid.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if (*z).VoteKeyDilution == 0 {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if (*z).StateProofID.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if (*z).MicroAlgos.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if (*z).RewardsBase == 0 {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not empty
			// string "A"
			o = append(o, 0xa1, 0x41)
			o = (*z).VoteID.MarshalMsg(o)
		}
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "B"
			o = append(o, 0xa1, 0x42)
			o = (*z).SelectionID.MarshalMsg(o)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "C"
			o = append(o, 0xa1, 0x43)
			o = (*z).VoteFirstValid.MarshalMsg(o)
		}
		if (zb0001Mask & 0x8) == 0 { // if not empty
			// string "D"
			o = append(o, 0xa1, 0x44)
			o = (*z).VoteLastValid.MarshalMsg(o)
		}
		if (zb0001Mask & 0x10) == 0 { // if not empty
			// string "E"
			o = append(o, 0xa1, 0x45)
			o = msgp.AppendUint64(o, (*z).VoteKeyDilution)
		}
		if (zb0001Mask & 0x20) == 0 { // if not empty
			// string "F"
			o = append(o, 0xa1, 0x46)
			o = (*z).StateProofID.MarshalMsg(o)
		}
		if (zb0001Mask & 0x40) == 0 { // if not empty
			// string "G"
			o = append(o, 0xa1, 0x47)
			o = (*z).MicroAlgos.MarshalMsg(o)
		}
		if (zb0001Mask & 0x80) == 0 { // if not empty
			// string "H"
			o = append(o, 0xa1, 0x48)
			o = msgp.AppendUint64(o, (*z).RewardsBase)
		}
	}
	return
}

func (_ *baseOnlineAccountData) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*baseOnlineAccountData)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *baseOnlineAccountData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).VoteID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteID")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).SelectionID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SelectionID")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).VoteFirstValid.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteFirstValid")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).VoteLastValid.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteLastValid")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).VoteKeyDilution, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteKeyDilution")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).StateProofID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "StateProofID")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).MicroAlgos.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MicroAlgos")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).RewardsBase, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RewardsBase")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = baseOnlineAccountData{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "A":
				bts, err = (*z).VoteID.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteID")
					return
				}
			case "B":
				bts, err = (*z).SelectionID.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "SelectionID")
					return
				}
			case "C":
				bts, err = (*z).VoteFirstValid.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteFirstValid")
					return
				}
			case "D":
				bts, err = (*z).VoteLastValid.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteLastValid")
					return
				}
			case "E":
				(*z).VoteKeyDilution, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteKeyDilution")
					return
				}
			case "F":
				bts, err = (*z).StateProofID.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "StateProofID")
					return
				}
			case "G":
				bts, err = (*z).MicroAlgos.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "MicroAlgos")
					return
				}
			case "H":
				(*z).RewardsBase, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RewardsBase")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *baseOnlineAccountData) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*baseOnlineAccountData)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *baseOnlineAccountData) Msgsize() (s int) {
	s = 1 + 2 + (*z).VoteID.Msgsize() + 2 + (*z).SelectionID.Msgsize() + 2 + (*z).VoteFirstValid.Msgsize() + 2 + (*z).VoteLastValid.Msgsize() + 2 + msgp.Uint64Size + 2 + (*z).StateProofID.Msgsize() + 2 + (*z).MicroAlgos.Msgsize() + 2 + msgp.Uint64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z *baseOnlineAccountData) MsgIsZero() bool {
	return ((*z).VoteID.MsgIsZero()) && ((*z).SelectionID.MsgIsZero()) && ((*z).VoteFirstValid.MsgIsZero()) && ((*z).VoteLastValid.MsgIsZero()) && ((*z).VoteKeyDilution == 0) && ((*z).StateProofID.MsgIsZero()) && ((*z).MicroAlgos.MsgIsZero()) && ((*z).RewardsBase == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *catchpointFileBalancesChunkV5) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0002Len := uint32(1)
	var zb0002Mask uint8 /* 2 bits */
	if len((*z).Balances) == 0 {
		zb0002Len--
		zb0002Mask |= 0x2
	}
	// variable map header, size zb0002Len
	o = append(o, 0x80|uint8(zb0002Len))
	if zb0002Len != 0 {
		if (zb0002Mask & 0x2) == 0 { // if not empty
			// string "bl"
			o = append(o, 0xa2, 0x62, 0x6c)
			if (*z).Balances == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Balances)))
			}
			for zb0001 := range (*z).Balances {
				// omitempty: check for empty values
				zb0003Len := uint32(2)
				var zb0003Mask uint8 /* 3 bits */
				if (*z).Balances[zb0001].AccountData.MsgIsZero() {
					zb0003Len--
					zb0003Mask |= 0x2
				}
				if (*z).Balances[zb0001].Address.MsgIsZero() {
					zb0003Len--
					zb0003Mask |= 0x4
				}
				// variable map header, size zb0003Len
				o = append(o, 0x80|uint8(zb0003Len))
				if (zb0003Mask & 0x2) == 0 { // if not empty
					// string "ad"
					o = append(o, 0xa2, 0x61, 0x64)
					o = (*z).Balances[zb0001].AccountData.MarshalMsg(o)
				}
				if (zb0003Mask & 0x4) == 0 { // if not empty
					// string "pk"
					o = append(o, 0xa2, 0x70, 0x6b)
					o = (*z).Balances[zb0001].Address.MarshalMsg(o)
				}
			}
		}
	}
	return
}

func (_ *catchpointFileBalancesChunkV5) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*catchpointFileBalancesChunkV5)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *catchpointFileBalancesChunkV5) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0002 int
	var zb0003 bool
	zb0002, zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0002, zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 > 0 {
			zb0002--
			var zb0004 int
			var zb0005 bool
			zb0004, zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Balances")
				return
			}
			if zb0004 > BalancesPerCatchpointFileChunk {
				err = msgp.ErrOverflow(uint64(zb0004), uint64(BalancesPerCatchpointFileChunk))
				err = msgp.WrapError(err, "struct-from-array", "Balances")
				return
			}
			if zb0005 {
				(*z).Balances = nil
			} else if (*z).Balances != nil && cap((*z).Balances) >= zb0004 {
				(*z).Balances = ((*z).Balances)[:zb0004]
			} else {
				(*z).Balances = make([]encodedBalanceRecordV5, zb0004)
			}
			for zb0001 := range (*z).Balances {
				var zb0006 int
				var zb0007 bool
				zb0006, zb0007, bts, err = msgp.ReadMapHeaderBytes(bts)
				if _, ok := err.(msgp.TypeError); ok {
					zb0006, zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "Balances", zb0001)
						return
					}
					if zb0006 > 0 {
						zb0006--
						bts, err = (*z).Balances[zb0001].Address.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Balances", zb0001, "struct-from-array", "Address")
							return
						}
					}
					if zb0006 > 0 {
						zb0006--
						bts, err = (*z).Balances[zb0001].AccountData.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Balances", zb0001, "struct-from-array", "AccountData")
							return
						}
					}
					if zb0006 > 0 {
						err = msgp.ErrTooManyArrayFields(zb0006)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Balances", zb0001, "struct-from-array")
							return
						}
					}
				} else {
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "Balances", zb0001)
						return
					}
					if zb0007 {
						(*z).Balances[zb0001] = encodedBalanceRecordV5{}
					}
					for zb0006 > 0 {
						zb0006--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Balances", zb0001)
							return
						}
						switch string(field) {
						case "pk":
							bts, err = (*z).Balances[zb0001].Address.UnmarshalMsg(bts)
							if err != nil {
								err = msgp.WrapError(err, "struct-from-array", "Balances", zb0001, "Address")
								return
							}
						case "ad":
							bts, err = (*z).Balances[zb0001].AccountData.UnmarshalMsg(bts)
							if err != nil {
								err = msgp.WrapError(err, "struct-from-array", "Balances", zb0001, "AccountData")
								return
							}
						default:
							err = msgp.ErrNoField(string(field))
							if err != nil {
								err = msgp.WrapError(err, "struct-from-array", "Balances", zb0001)
								return
							}
						}
					}
				}
			}
		}
		if zb0002 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0002)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0003 {
			(*z) = catchpointFileBalancesChunkV5{}
		}
		for zb0002 > 0 {
			zb0002--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "bl":
				var zb0008 int
				var zb0009 bool
				zb0008, zb0009, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Balances")
					return
				}
				if zb0008 > BalancesPerCatchpointFileChunk {
					err = msgp.ErrOverflow(uint64(zb0008), uint64(BalancesPerCatchpointFileChunk))
					err = msgp.WrapError(err, "Balances")
					return
				}
				if zb0009 {
					(*z).Balances = nil
				} else if (*z).Balances != nil && cap((*z).Balances) >= zb0008 {
					(*z).Balances = ((*z).Balances)[:zb0008]
				} else {
					(*z).Balances = make([]encodedBalanceRecordV5, zb0008)
				}
				for zb0001 := range (*z).Balances {
					var zb0010 int
					var zb0011 bool
					zb0010, zb0011, bts, err = msgp.ReadMapHeaderBytes(bts)
					if _, ok := err.(msgp.TypeError); ok {
						zb0010, zb0011, bts, err = msgp.ReadArrayHeaderBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Balances", zb0001)
							return
						}
						if zb0010 > 0 {
							zb0010--
							bts, err = (*z).Balances[zb0001].Address.UnmarshalMsg(bts)
							if err != nil {
								err = msgp.WrapError(err, "Balances", zb0001, "struct-from-array", "Address")
								return
							}
						}
						if zb0010 > 0 {
							zb0010--
							bts, err = (*z).Balances[zb0001].AccountData.UnmarshalMsg(bts)
							if err != nil {
								err = msgp.WrapError(err, "Balances", zb0001, "struct-from-array", "AccountData")
								return
							}
						}
						if zb0010 > 0 {
							err = msgp.ErrTooManyArrayFields(zb0010)
							if err != nil {
								err = msgp.WrapError(err, "Balances", zb0001, "struct-from-array")
								return
							}
						}
					} else {
						if err != nil {
							err = msgp.WrapError(err, "Balances", zb0001)
							return
						}
						if zb0011 {
							(*z).Balances[zb0001] = encodedBalanceRecordV5{}
						}
						for zb0010 > 0 {
							zb0010--
							field, bts, err = msgp.ReadMapKeyZC(bts)
							if err != nil {
								err = msgp.WrapError(err, "Balances", zb0001)
								return
							}
							switch string(field) {
							case "pk":
								bts, err = (*z).Balances[zb0001].Address.UnmarshalMsg(bts)
								if err != nil {
									err = msgp.WrapError(err, "Balances", zb0001, "Address")
									return
								}
							case "ad":
								bts, err = (*z).Balances[zb0001].AccountData.UnmarshalMsg(bts)
								if err != nil {
									err = msgp.WrapError(err, "Balances", zb0001, "AccountData")
									return
								}
							default:
								err = msgp.ErrNoField(string(field))
								if err != nil {
									err = msgp.WrapError(err, "Balances", zb0001)
									return
								}
							}
						}
					}
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *catchpointFileBalancesChunkV5) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*catchpointFileBalancesChunkV5)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *catchpointFileBalancesChunkV5) Msgsize() (s int) {
	s = 1 + 3 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).Balances {
		s += 1 + 3 + (*z).Balances[zb0001].Address.Msgsize() + 3 + (*z).Balances[zb0001].AccountData.Msgsize()
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z *catchpointFileBalancesChunkV5) MsgIsZero() bool {
	return (len((*z).Balances) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *catchpointFileBalancesChunkV6) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0002Len := uint32(1)
	var zb0002Mask uint8 /* 2 bits */
	if len((*z).Balances) == 0 {
		zb0002Len--
		zb0002Mask |= 0x2
	}
	// variable map header, size zb0002Len
	o = append(o, 0x80|uint8(zb0002Len))
	if zb0002Len != 0 {
		if (zb0002Mask & 0x2) == 0 { // if not empty
			// string "bl"
			o = append(o, 0xa2, 0x62, 0x6c)
			if (*z).Balances == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Balances)))
			}
			for zb0001 := range (*z).Balances {
				o = (*z).Balances[zb0001].MarshalMsg(o)
			}
		}
	}
	return
}

func (_ *catchpointFileBalancesChunkV6) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*catchpointFileBalancesChunkV6)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *catchpointFileBalancesChunkV6) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0002 int
	var zb0003 bool
	zb0002, zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0002, zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 > 0 {
			zb0002--
			var zb0004 int
			var zb0005 bool
			zb0004, zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Balances")
				return
			}
			if zb0004 > BalancesPerCatchpointFileChunk {
				err = msgp.ErrOverflow(uint64(zb0004), uint64(BalancesPerCatchpointFileChunk))
				err = msgp.WrapError(err, "struct-from-array", "Balances")
				return
			}
			if zb0005 {
				(*z).Balances = nil
			} else if (*z).Balances != nil && cap((*z).Balances) >= zb0004 {
				(*z).Balances = ((*z).Balances)[:zb0004]
			} else {
				(*z).Balances = make([]encodedBalanceRecordV6, zb0004)
			}
			for zb0001 := range (*z).Balances {
				bts, err = (*z).Balances[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Balances", zb0001)
					return
				}
			}
		}
		if zb0002 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0002)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0003 {
			(*z) = catchpointFileBalancesChunkV6{}
		}
		for zb0002 > 0 {
			zb0002--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "bl":
				var zb0006 int
				var zb0007 bool
				zb0006, zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Balances")
					return
				}
				if zb0006 > BalancesPerCatchpointFileChunk {
					err = msgp.ErrOverflow(uint64(zb0006), uint64(BalancesPerCatchpointFileChunk))
					err = msgp.WrapError(err, "Balances")
					return
				}
				if zb0007 {
					(*z).Balances = nil
				} else if (*z).Balances != nil && cap((*z).Balances) >= zb0006 {
					(*z).Balances = ((*z).Balances)[:zb0006]
				} else {
					(*z).Balances = make([]encodedBalanceRecordV6, zb0006)
				}
				for zb0001 := range (*z).Balances {
					bts, err = (*z).Balances[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Balances", zb0001)
						return
					}
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *catchpointFileBalancesChunkV6) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*catchpointFileBalancesChunkV6)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *catchpointFileBalancesChunkV6) Msgsize() (s int) {
	s = 1 + 3 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).Balances {
		s += (*z).Balances[zb0001].Msgsize()
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z *catchpointFileBalancesChunkV6) MsgIsZero() bool {
	return (len((*z).Balances) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z catchpointState) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendString(o, string(z))
	return
}

func (_ catchpointState) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(catchpointState)
	if !ok {
		_, ok = (z).(*catchpointState)
	}
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *catchpointState) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 string
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = catchpointState(zb0001)
	}
	o = bts
	return
}

func (_ *catchpointState) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*catchpointState)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z catchpointState) Msgsize() (s int) {
	s = msgp.StringPrefixSize + len(string(z))
	return
}

// MsgIsZero returns whether this is a zero value
func (z catchpointState) MsgIsZero() bool {
	return z == ""
}

// MarshalMsg implements msgp.Marshaler
func (z *encodedBalanceRecordV5) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 3 bits */
	if (*z).AccountData.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).Address.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "ad"
			o = append(o, 0xa2, 0x61, 0x64)
			o = (*z).AccountData.MarshalMsg(o)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "pk"
			o = append(o, 0xa2, 0x70, 0x6b)
			o = (*z).Address.MarshalMsg(o)
		}
	}
	return
}

func (_ *encodedBalanceRecordV5) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedBalanceRecordV5)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *encodedBalanceRecordV5) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Address.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Address")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).AccountData.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AccountData")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = encodedBalanceRecordV5{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "pk":
				bts, err = (*z).Address.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Address")
					return
				}
			case "ad":
				bts, err = (*z).AccountData.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "AccountData")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *encodedBalanceRecordV5) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedBalanceRecordV5)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *encodedBalanceRecordV5) Msgsize() (s int) {
	s = 1 + 3 + (*z).Address.Msgsize() + 3 + (*z).AccountData.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *encodedBalanceRecordV5) MsgIsZero() bool {
	return ((*z).Address.MsgIsZero()) && ((*z).AccountData.MsgIsZero())
}

// MarshalMsg implements msgp.Marshaler
func (z *encodedBalanceRecordV6) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0003Len := uint32(3)
	var zb0003Mask uint8 /* 4 bits */
	if (*z).Address.MsgIsZero() {
		zb0003Len--
		zb0003Mask |= 0x2
	}
	if (*z).AccountData.MsgIsZero() {
		zb0003Len--
		zb0003Mask |= 0x4
	}
	if len((*z).Resources) == 0 {
		zb0003Len--
		zb0003Mask |= 0x8
	}
	// variable map header, size zb0003Len
	o = append(o, 0x80|uint8(zb0003Len))
	if zb0003Len != 0 {
		if (zb0003Mask & 0x2) == 0 { // if not empty
			// string "a"
			o = append(o, 0xa1, 0x61)
			o = (*z).Address.MarshalMsg(o)
		}
		if (zb0003Mask & 0x4) == 0 { // if not empty
			// string "b"
			o = append(o, 0xa1, 0x62)
			o = (*z).AccountData.MarshalMsg(o)
		}
		if (zb0003Mask & 0x8) == 0 { // if not empty
			// string "c"
			o = append(o, 0xa1, 0x63)
			if (*z).Resources == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendMapHeader(o, uint32(len((*z).Resources)))
			}
			zb0001_keys := make([]uint64, 0, len((*z).Resources))
			for zb0001 := range (*z).Resources {
				zb0001_keys = append(zb0001_keys, zb0001)
			}
			sort.Sort(SortUint64(zb0001_keys))
			for _, zb0001 := range zb0001_keys {
				zb0002 := (*z).Resources[zb0001]
				_ = zb0002
				o = msgp.AppendUint64(o, zb0001)
				o = zb0002.MarshalMsg(o)
			}
		}
	}
	return
}

func (_ *encodedBalanceRecordV6) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedBalanceRecordV6)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *encodedBalanceRecordV6) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0003 int
	var zb0004 bool
	zb0003, zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0003, zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0003 > 0 {
			zb0003--
			bts, err = (*z).Address.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Address")
				return
			}
		}
		if zb0003 > 0 {
			zb0003--
			bts, err = (*z).AccountData.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AccountData")
				return
			}
		}
		if zb0003 > 0 {
			zb0003--
			var zb0005 int
			var zb0006 bool
			zb0005, zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Resources")
				return
			}
			if zb0005 > basics.MaxEncodedAccountDataSize {
				err = msgp.ErrOverflow(uint64(zb0005), uint64(basics.MaxEncodedAccountDataSize))
				err = msgp.WrapError(err, "struct-from-array", "Resources")
				return
			}
			if zb0006 {
				(*z).Resources = nil
			} else if (*z).Resources == nil {
				(*z).Resources = make(map[uint64]msgp.Raw, zb0005)
			}
			for zb0005 > 0 {
				var zb0001 uint64
				var zb0002 msgp.Raw
				zb0005--
				zb0001, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Resources")
					return
				}
				bts, err = zb0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Resources", zb0001)
					return
				}
				(*z).Resources[zb0001] = zb0002
			}
		}
		if zb0003 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0003)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0004 {
			(*z) = encodedBalanceRecordV6{}
		}
		for zb0003 > 0 {
			zb0003--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "a":
				bts, err = (*z).Address.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Address")
					return
				}
			case "b":
				bts, err = (*z).AccountData.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "AccountData")
					return
				}
			case "c":
				var zb0007 int
				var zb0008 bool
				zb0007, zb0008, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Resources")
					return
				}
				if zb0007 > basics.MaxEncodedAccountDataSize {
					err = msgp.ErrOverflow(uint64(zb0007), uint64(basics.MaxEncodedAccountDataSize))
					err = msgp.WrapError(err, "Resources")
					return
				}
				if zb0008 {
					(*z).Resources = nil
				} else if (*z).Resources == nil {
					(*z).Resources = make(map[uint64]msgp.Raw, zb0007)
				}
				for zb0007 > 0 {
					var zb0001 uint64
					var zb0002 msgp.Raw
					zb0007--
					zb0001, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Resources")
						return
					}
					bts, err = zb0002.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Resources", zb0001)
						return
					}
					(*z).Resources[zb0001] = zb0002
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *encodedBalanceRecordV6) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedBalanceRecordV6)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *encodedBalanceRecordV6) Msgsize() (s int) {
	s = 1 + 2 + (*z).Address.Msgsize() + 2 + (*z).AccountData.Msgsize() + 2 + msgp.MapHeaderSize
	if (*z).Resources != nil {
		for zb0001, zb0002 := range (*z).Resources {
			_ = zb0001
			_ = zb0002
			s += 0 + msgp.Uint64Size + zb0002.Msgsize()
		}
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z *encodedBalanceRecordV6) MsgIsZero() bool {
	return ((*z).Address.MsgIsZero()) && ((*z).AccountData.MsgIsZero()) && (len((*z).Resources) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z resourceFlags) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint8(o, uint8(z))
	return
}

func (_ resourceFlags) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(resourceFlags)
	if !ok {
		_, ok = (z).(*resourceFlags)
	}
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *resourceFlags) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint8
		zb0001, bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = resourceFlags(zb0001)
	}
	o = bts
	return
}

func (_ *resourceFlags) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*resourceFlags)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z resourceFlags) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z resourceFlags) MsgIsZero() bool {
	return z == 0
}

// MarshalMsg implements msgp.Marshaler
func (z *resourcesData) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0002Len := uint32(26)
	var zb0002Mask uint32 /* 27 bits */
	if (*z).Total == 0 {
		zb0002Len--
		zb0002Mask |= 0x2
	}
	if (*z).Decimals == 0 {
		zb0002Len--
		zb0002Mask |= 0x4
	}
	if (*z).DefaultFrozen == false {
		zb0002Len--
		zb0002Mask |= 0x8
	}
	if (*z).UnitName == "" {
		zb0002Len--
		zb0002Mask |= 0x10
	}
	if (*z).AssetName == "" {
		zb0002Len--
		zb0002Mask |= 0x20
	}
	if (*z).URL == "" {
		zb0002Len--
		zb0002Mask |= 0x40
	}
	if (*z).MetadataHash == ([32]byte{}) {
		zb0002Len--
		zb0002Mask |= 0x80
	}
	if (*z).Manager.MsgIsZero() {
		zb0002Len--
		zb0002Mask |= 0x100
	}
	if (*z).Reserve.MsgIsZero() {
		zb0002Len--
		zb0002Mask |= 0x200
	}
	if (*z).Freeze.MsgIsZero() {
		zb0002Len--
		zb0002Mask |= 0x400
	}
	if (*z).Clawback.MsgIsZero() {
		zb0002Len--
		zb0002Mask |= 0x800
	}
	if (*z).Amount == 0 {
		zb0002Len--
		zb0002Mask |= 0x1000
	}
	if (*z).Frozen == false {
		zb0002Len--
		zb0002Mask |= 0x2000
	}
	if (*z).SchemaNumUint == 0 {
		zb0002Len--
		zb0002Mask |= 0x4000
	}
	if (*z).SchemaNumByteSlice == 0 {
		zb0002Len--
		zb0002Mask |= 0x8000
	}
	if (*z).KeyValue.MsgIsZero() {
		zb0002Len--
		zb0002Mask |= 0x10000
	}
	if len((*z).ApprovalProgram) == 0 {
		zb0002Len--
		zb0002Mask |= 0x20000
	}
	if len((*z).ClearStateProgram) == 0 {
		zb0002Len--
		zb0002Mask |= 0x40000
	}
	if (*z).GlobalState.MsgIsZero() {
		zb0002Len--
		zb0002Mask |= 0x80000
	}
	if (*z).LocalStateSchemaNumUint == 0 {
		zb0002Len--
		zb0002Mask |= 0x100000
	}
	if (*z).LocalStateSchemaNumByteSlice == 0 {
		zb0002Len--
		zb0002Mask |= 0x200000
	}
	if (*z).GlobalStateSchemaNumUint == 0 {
		zb0002Len--
		zb0002Mask |= 0x400000
	}
	if (*z).GlobalStateSchemaNumByteSlice == 0 {
		zb0002Len--
		zb0002Mask |= 0x800000
	}
	if (*z).ExtraProgramPages == 0 {
		zb0002Len--
		zb0002Mask |= 0x1000000
	}
	if (*z).ResourceFlags == 0 {
		zb0002Len--
		zb0002Mask |= 0x2000000
	}
	if (*z).UpdateRound == 0 {
		zb0002Len--
		zb0002Mask |= 0x4000000
	}
	// variable map header, size zb0002Len
	o = msgp.AppendMapHeader(o, zb0002Len)
	if zb0002Len != 0 {
		if (zb0002Mask & 0x2) == 0 { // if not empty
			// string "a"
			o = append(o, 0xa1, 0x61)
			o = msgp.AppendUint64(o, (*z).Total)
		}
		if (zb0002Mask & 0x4) == 0 { // if not empty
			// string "b"
			o = append(o, 0xa1, 0x62)
			o = msgp.AppendUint32(o, (*z).Decimals)
		}
		if (zb0002Mask & 0x8) == 0 { // if not empty
			// string "c"
			o = append(o, 0xa1, 0x63)
			o = msgp.AppendBool(o, (*z).DefaultFrozen)
		}
		if (zb0002Mask & 0x10) == 0 { // if not empty
			// string "d"
			o = append(o, 0xa1, 0x64)
			o = msgp.AppendString(o, (*z).UnitName)
		}
		if (zb0002Mask & 0x20) == 0 { // if not empty
			// string "e"
			o = append(o, 0xa1, 0x65)
			o = msgp.AppendString(o, (*z).AssetName)
		}
		if (zb0002Mask & 0x40) == 0 { // if not empty
			// string "f"
			o = append(o, 0xa1, 0x66)
			o = msgp.AppendString(o, (*z).URL)
		}
		if (zb0002Mask & 0x80) == 0 { // if not empty
			// string "g"
			o = append(o, 0xa1, 0x67)
			o = msgp.AppendBytes(o, ((*z).MetadataHash)[:])
		}
		if (zb0002Mask & 0x100) == 0 { // if not empty
			// string "h"
			o = append(o, 0xa1, 0x68)
			o = (*z).Manager.MarshalMsg(o)
		}
		if (zb0002Mask & 0x200) == 0 { // if not empty
			// string "i"
			o = append(o, 0xa1, 0x69)
			o = (*z).Reserve.MarshalMsg(o)
		}
		if (zb0002Mask & 0x400) == 0 { // if not empty
			// string "j"
			o = append(o, 0xa1, 0x6a)
			o = (*z).Freeze.MarshalMsg(o)
		}
		if (zb0002Mask & 0x800) == 0 { // if not empty
			// string "k"
			o = append(o, 0xa1, 0x6b)
			o = (*z).Clawback.MarshalMsg(o)
		}
		if (zb0002Mask & 0x1000) == 0 { // if not empty
			// string "l"
			o = append(o, 0xa1, 0x6c)
			o = msgp.AppendUint64(o, (*z).Amount)
		}
		if (zb0002Mask & 0x2000) == 0 { // if not empty
			// string "m"
			o = append(o, 0xa1, 0x6d)
			o = msgp.AppendBool(o, (*z).Frozen)
		}
		if (zb0002Mask & 0x4000) == 0 { // if not empty
			// string "n"
			o = append(o, 0xa1, 0x6e)
			o = msgp.AppendUint64(o, (*z).SchemaNumUint)
		}
		if (zb0002Mask & 0x8000) == 0 { // if not empty
			// string "o"
			o = append(o, 0xa1, 0x6f)
			o = msgp.AppendUint64(o, (*z).SchemaNumByteSlice)
		}
		if (zb0002Mask & 0x10000) == 0 { // if not empty
			// string "p"
			o = append(o, 0xa1, 0x70)
			o = (*z).KeyValue.MarshalMsg(o)
		}
		if (zb0002Mask & 0x20000) == 0 { // if not empty
			// string "q"
			o = append(o, 0xa1, 0x71)
			o = msgp.AppendBytes(o, (*z).ApprovalProgram)
		}
		if (zb0002Mask & 0x40000) == 0 { // if not empty
			// string "r"
			o = append(o, 0xa1, 0x72)
			o = msgp.AppendBytes(o, (*z).ClearStateProgram)
		}
		if (zb0002Mask & 0x80000) == 0 { // if not empty
			// string "s"
			o = append(o, 0xa1, 0x73)
			o = (*z).GlobalState.MarshalMsg(o)
		}
		if (zb0002Mask & 0x100000) == 0 { // if not empty
			// string "t"
			o = append(o, 0xa1, 0x74)
			o = msgp.AppendUint64(o, (*z).LocalStateSchemaNumUint)
		}
		if (zb0002Mask & 0x200000) == 0 { // if not empty
			// string "u"
			o = append(o, 0xa1, 0x75)
			o = msgp.AppendUint64(o, (*z).LocalStateSchemaNumByteSlice)
		}
		if (zb0002Mask & 0x400000) == 0 { // if not empty
			// string "v"
			o = append(o, 0xa1, 0x76)
			o = msgp.AppendUint64(o, (*z).GlobalStateSchemaNumUint)
		}
		if (zb0002Mask & 0x800000) == 0 { // if not empty
			// string "w"
			o = append(o, 0xa1, 0x77)
			o = msgp.AppendUint64(o, (*z).GlobalStateSchemaNumByteSlice)
		}
		if (zb0002Mask & 0x1000000) == 0 { // if not empty
			// string "x"
			o = append(o, 0xa1, 0x78)
			o = msgp.AppendUint32(o, (*z).ExtraProgramPages)
		}
		if (zb0002Mask & 0x2000000) == 0 { // if not empty
			// string "y"
			o = append(o, 0xa1, 0x79)
			o = msgp.AppendUint8(o, uint8((*z).ResourceFlags))
		}
		if (zb0002Mask & 0x4000000) == 0 { // if not empty
			// string "z"
			o = append(o, 0xa1, 0x7a)
			o = msgp.AppendUint64(o, (*z).UpdateRound)
		}
	}
	return
}

func (_ *resourcesData) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*resourcesData)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *resourcesData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0002 int
	var zb0003 bool
	zb0002, zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0002, zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 > 0 {
			zb0002--
			(*z).Total, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Total")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			(*z).Decimals, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Decimals")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			(*z).DefaultFrozen, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "DefaultFrozen")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			(*z).UnitName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "UnitName")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			(*z).AssetName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetName")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			(*z).URL, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "URL")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			bts, err = msgp.ReadExactBytes(bts, ((*z).MetadataHash)[:])
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MetadataHash")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			bts, err = (*z).Manager.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Manager")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			bts, err = (*z).Reserve.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Reserve")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			bts, err = (*z).Freeze.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Freeze")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			bts, err = (*z).Clawback.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Clawback")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			(*z).Amount, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Amount")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			(*z).Frozen, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Frozen")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			(*z).SchemaNumUint, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SchemaNumUint")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			(*z).SchemaNumByteSlice, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SchemaNumByteSlice")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			bts, err = (*z).KeyValue.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "KeyValue")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			var zb0004 int
			zb0004, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram")
				return
			}
			if zb0004 > config.MaxAvailableAppProgramLen {
				err = msgp.ErrOverflow(uint64(zb0004), uint64(config.MaxAvailableAppProgramLen))
				return
			}
			(*z).ApprovalProgram, bts, err = msgp.ReadBytesBytes(bts, (*z).ApprovalProgram)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			var zb0005 int
			zb0005, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram")
				return
			}
			if zb0005 > config.MaxAvailableAppProgramLen {
				err = msgp.ErrOverflow(uint64(zb0005), uint64(config.MaxAvailableAppProgramLen))
				return
			}
			(*z).ClearStateProgram, bts, err = msgp.ReadBytesBytes(bts, (*z).ClearStateProgram)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			bts, err = (*z).GlobalState.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GlobalState")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			(*z).LocalStateSchemaNumUint, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LocalStateSchemaNumUint")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			(*z).LocalStateSchemaNumByteSlice, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LocalStateSchemaNumByteSlice")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			(*z).GlobalStateSchemaNumUint, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GlobalStateSchemaNumUint")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			(*z).GlobalStateSchemaNumByteSlice, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GlobalStateSchemaNumByteSlice")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			(*z).ExtraProgramPages, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ExtraProgramPages")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			{
				var zb0006 uint8
				zb0006, bts, err = msgp.ReadUint8Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ResourceFlags")
					return
				}
				(*z).ResourceFlags = resourceFlags(zb0006)
			}
		}
		if zb0002 > 0 {
			zb0002--
			(*z).UpdateRound, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "UpdateRound")
				return
			}
		}
		if zb0002 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0002)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0003 {
			(*z) = resourcesData{}
		}
		for zb0002 > 0 {
			zb0002--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "a":
				(*z).Total, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Total")
					return
				}
			case "b":
				(*z).Decimals, bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Decimals")
					return
				}
			case "c":
				(*z).DefaultFrozen, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DefaultFrozen")
					return
				}
			case "d":
				(*z).UnitName, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "UnitName")
					return
				}
			case "e":
				(*z).AssetName, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetName")
					return
				}
			case "f":
				(*z).URL, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "URL")
					return
				}
			case "g":
				bts, err = msgp.ReadExactBytes(bts, ((*z).MetadataHash)[:])
				if err != nil {
					err = msgp.WrapError(err, "MetadataHash")
					return
				}
			case "h":
				bts, err = (*z).Manager.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Manager")
					return
				}
			case "i":
				bts, err = (*z).Reserve.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Reserve")
					return
				}
			case "j":
				bts, err = (*z).Freeze.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Freeze")
					return
				}
			case "k":
				bts, err = (*z).Clawback.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Clawback")
					return
				}
			case "l":
				(*z).Amount, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Amount")
					return
				}
			case "m":
				(*z).Frozen, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Frozen")
					return
				}
			case "n":
				(*z).SchemaNumUint, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SchemaNumUint")
					return
				}
			case "o":
				(*z).SchemaNumByteSlice, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SchemaNumByteSlice")
					return
				}
			case "p":
				bts, err = (*z).KeyValue.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "KeyValue")
					return
				}
			case "q":
				var zb0007 int
				zb0007, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApprovalProgram")
					return
				}
				if zb0007 > config.MaxAvailableAppProgramLen {
					err = msgp.ErrOverflow(uint64(zb0007), uint64(config.MaxAvailableAppProgramLen))
					return
				}
				(*z).ApprovalProgram, bts, err = msgp.ReadBytesBytes(bts, (*z).ApprovalProgram)
				if err != nil {
					err = msgp.WrapError(err, "ApprovalProgram")
					return
				}
			case "r":
				var zb0008 int
				zb0008, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "ClearStateProgram")
					return
				}
				if zb0008 > config.MaxAvailableAppProgramLen {
					err = msgp.ErrOverflow(uint64(zb0008), uint64(config.MaxAvailableAppProgramLen))
					return
				}
				(*z).ClearStateProgram, bts, err = msgp.ReadBytesBytes(bts, (*z).ClearStateProgram)
				if err != nil {
					err = msgp.WrapError(err, "ClearStateProgram")
					return
				}
			case "s":
				bts, err = (*z).GlobalState.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "GlobalState")
					return
				}
			case "t":
				(*z).LocalStateSchemaNumUint, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LocalStateSchemaNumUint")
					return
				}
			case "u":
				(*z).LocalStateSchemaNumByteSlice, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LocalStateSchemaNumByteSlice")
					return
				}
			case "v":
				(*z).GlobalStateSchemaNumUint, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "GlobalStateSchemaNumUint")
					return
				}
			case "w":
				(*z).GlobalStateSchemaNumByteSlice, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "GlobalStateSchemaNumByteSlice")
					return
				}
			case "x":
				(*z).ExtraProgramPages, bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ExtraProgramPages")
					return
				}
			case "y":
				{
					var zb0009 uint8
					zb0009, bts, err = msgp.ReadUint8Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ResourceFlags")
						return
					}
					(*z).ResourceFlags = resourceFlags(zb0009)
				}
			case "z":
				(*z).UpdateRound, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "UpdateRound")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *resourcesData) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*resourcesData)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *resourcesData) Msgsize() (s int) {
	s = 3 + 2 + msgp.Uint64Size + 2 + msgp.Uint32Size + 2 + msgp.BoolSize + 2 + msgp.StringPrefixSize + len((*z).UnitName) + 2 + msgp.StringPrefixSize + len((*z).AssetName) + 2 + msgp.StringPrefixSize + len((*z).URL) + 2 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 2 + (*z).Manager.Msgsize() + 2 + (*z).Reserve.Msgsize() + 2 + (*z).Freeze.Msgsize() + 2 + (*z).Clawback.Msgsize() + 2 + msgp.Uint64Size + 2 + msgp.BoolSize + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + (*z).KeyValue.Msgsize() + 2 + msgp.BytesPrefixSize + len((*z).ApprovalProgram) + 2 + msgp.BytesPrefixSize + len((*z).ClearStateProgram) + 2 + (*z).GlobalState.Msgsize() + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.Uint32Size + 2 + msgp.Uint8Size + 2 + msgp.Uint64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z *resourcesData) MsgIsZero() bool {
	return ((*z).Total == 0) && ((*z).Decimals == 0) && ((*z).DefaultFrozen == false) && ((*z).UnitName == "") && ((*z).AssetName == "") && ((*z).URL == "") && ((*z).MetadataHash == ([32]byte{})) && ((*z).Manager.MsgIsZero()) && ((*z).Reserve.MsgIsZero()) && ((*z).Freeze.MsgIsZero()) && ((*z).Clawback.MsgIsZero()) && ((*z).Amount == 0) && ((*z).Frozen == false) && ((*z).SchemaNumUint == 0) && ((*z).SchemaNumByteSlice == 0) && ((*z).KeyValue.MsgIsZero()) && (len((*z).ApprovalProgram) == 0) && (len((*z).ClearStateProgram) == 0) && ((*z).GlobalState.MsgIsZero()) && ((*z).LocalStateSchemaNumUint == 0) && ((*z).LocalStateSchemaNumByteSlice == 0) && ((*z).GlobalStateSchemaNumUint == 0) && ((*z).GlobalStateSchemaNumByteSlice == 0) && ((*z).ExtraProgramPages == 0) && ((*z).ResourceFlags == 0) && ((*z).UpdateRound == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *txTailRound) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0007Len := uint32(27)
	var zb0007Mask uint32 /* 32 bits */
	if len((*z).BlockHeader.CompactCert) == 0 {
		zb0007Len--
		zb0007Mask |= 0x20
	}
	if (*z).BlockHeader.RewardsState.RewardsLevel == 0 {
		zb0007Len--
		zb0007Mask |= 0x40
	}
	if (*z).BlockHeader.RewardsState.FeeSink.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x80
	}
	if (*z).BlockHeader.RewardsState.RewardsResidue == 0 {
		zb0007Len--
		zb0007Mask |= 0x100
	}
	if (*z).BlockHeader.GenesisID == "" {
		zb0007Len--
		zb0007Mask |= 0x200
	}
	if (*z).BlockHeader.GenesisHash.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x400
	}
	if (*z).BlockHeader.UpgradeState.NextProtocolVoteBefore.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x800
	}
	if (*z).BlockHeader.UpgradeState.NextProtocol.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x1000
	}
	if (*z).BlockHeader.UpgradeState.NextProtocolSwitchOn.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x2000
	}
	if (*z).BlockHeader.UpgradeState.NextProtocolApprovals == 0 {
		zb0007Len--
		zb0007Mask |= 0x4000
	}
	if len((*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts) == 0 {
		zb0007Len--
		zb0007Mask |= 0x8000
	}
	if (*z).BlockHeader.Branch.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x10000
	}
	if (*z).BlockHeader.UpgradeState.CurrentProtocol.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x20000
	}
	if (*z).BlockHeader.RewardsState.RewardsRate == 0 {
		zb0007Len--
		zb0007Mask |= 0x40000
	}
	if (*z).BlockHeader.Round.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x80000
	}
	if (*z).BlockHeader.RewardsState.RewardsRecalculationRound.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x100000
	}
	if (*z).BlockHeader.RewardsState.RewardsPool.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x200000
	}
	if (*z).BlockHeader.Seed.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x400000
	}
	if (*z).BlockHeader.TxnCounter == 0 {
		zb0007Len--
		zb0007Mask |= 0x800000
	}
	if (*z).BlockHeader.TimeStamp == 0 {
		zb0007Len--
		zb0007Mask |= 0x1000000
	}
	if len((*z).Leases) == 0 {
		zb0007Len--
		zb0007Mask |= 0x2000000
	}
	if len((*z).TxnIDs) == 0 {
		zb0007Len--
		zb0007Mask |= 0x4000000
	}
	if len((*z).LastValid) == 0 {
		zb0007Len--
		zb0007Mask |= 0x8000000
	}
	if (*z).BlockHeader.TxnRoot.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x10000000
	}
	if (*z).BlockHeader.UpgradeVote.UpgradeDelay.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x20000000
	}
	if (*z).BlockHeader.UpgradeVote.UpgradePropose.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x40000000
	}
	if (*z).BlockHeader.UpgradeVote.UpgradeApprove == false {
		zb0007Len--
		zb0007Mask |= 0x80000000
	}
	// variable map header, size zb0007Len
	o = msgp.AppendMapHeader(o, zb0007Len)
	if zb0007Len != 0 {
		if (zb0007Mask & 0x20) == 0 { // if not empty
			// string "cc"
			o = append(o, 0xa2, 0x63, 0x63)
			if (*z).BlockHeader.CompactCert == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendMapHeader(o, uint32(len((*z).BlockHeader.CompactCert)))
			}
			zb0004_keys := make([]protocol.CompactCertType, 0, len((*z).BlockHeader.CompactCert))
			for zb0004 := range (*z).BlockHeader.CompactCert {
				zb0004_keys = append(zb0004_keys, zb0004)
			}
			sort.Sort(protocol.SortCompactCertType(zb0004_keys))
			for _, zb0004 := range zb0004_keys {
				zb0005 := (*z).BlockHeader.CompactCert[zb0004]
				_ = zb0005
				o = zb0004.MarshalMsg(o)
				o = zb0005.MarshalMsg(o)
			}
		}
		if (zb0007Mask & 0x40) == 0 { // if not empty
			// string "earn"
			o = append(o, 0xa4, 0x65, 0x61, 0x72, 0x6e)
			o = msgp.AppendUint64(o, (*z).BlockHeader.RewardsState.RewardsLevel)
		}
		if (zb0007Mask & 0x80) == 0 { // if not empty
			// string "fees"
			o = append(o, 0xa4, 0x66, 0x65, 0x65, 0x73)
			o = (*z).BlockHeader.RewardsState.FeeSink.MarshalMsg(o)
		}
		if (zb0007Mask & 0x100) == 0 { // if not empty
			// string "frac"
			o = append(o, 0xa4, 0x66, 0x72, 0x61, 0x63)
			o = msgp.AppendUint64(o, (*z).BlockHeader.RewardsState.RewardsResidue)
		}
		if (zb0007Mask & 0x200) == 0 { // if not empty
			// string "gen"
			o = append(o, 0xa3, 0x67, 0x65, 0x6e)
			o = msgp.AppendString(o, (*z).BlockHeader.GenesisID)
		}
		if (zb0007Mask & 0x400) == 0 { // if not empty
			// string "gh"
			o = append(o, 0xa2, 0x67, 0x68)
			o = (*z).BlockHeader.GenesisHash.MarshalMsg(o)
		}
		if (zb0007Mask & 0x800) == 0 { // if not empty
			// string "nextbefore"
			o = append(o, 0xaa, 0x6e, 0x65, 0x78, 0x74, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65)
			o = (*z).BlockHeader.UpgradeState.NextProtocolVoteBefore.MarshalMsg(o)
		}
		if (zb0007Mask & 0x1000) == 0 { // if not empty
			// string "nextproto"
			o = append(o, 0xa9, 0x6e, 0x65, 0x78, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f)
			o = (*z).BlockHeader.UpgradeState.NextProtocol.MarshalMsg(o)
		}
		if (zb0007Mask & 0x2000) == 0 { // if not empty
			// string "nextswitch"
			o = append(o, 0xaa, 0x6e, 0x65, 0x78, 0x74, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68)
			o = (*z).BlockHeader.UpgradeState.NextProtocolSwitchOn.MarshalMsg(o)
		}
		if (zb0007Mask & 0x4000) == 0 { // if not empty
			// string "nextyes"
			o = append(o, 0xa7, 0x6e, 0x65, 0x78, 0x74, 0x79, 0x65, 0x73)
			o = msgp.AppendUint64(o, (*z).BlockHeader.UpgradeState.NextProtocolApprovals)
		}
		if (zb0007Mask & 0x8000) == 0 { // if not empty
			// string "partupdrmv"
			o = append(o, 0xaa, 0x70, 0x61, 0x72, 0x74, 0x75, 0x70, 0x64, 0x72, 0x6d, 0x76)
			if (*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts)))
			}
			for zb0006 := range (*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts {
				o = (*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts[zb0006].MarshalMsg(o)
			}
		}
		if (zb0007Mask & 0x10000) == 0 { // if not empty
			// string "prev"
			o = append(o, 0xa4, 0x70, 0x72, 0x65, 0x76)
			o = (*z).BlockHeader.Branch.MarshalMsg(o)
		}
		if (zb0007Mask & 0x20000) == 0 { // if not empty
			// string "proto"
			o = append(o, 0xa5, 0x70, 0x72, 0x6f, 0x74, 0x6f)
			o = (*z).BlockHeader.UpgradeState.CurrentProtocol.MarshalMsg(o)
		}
		if (zb0007Mask & 0x40000) == 0 { // if not empty
			// string "rate"
			o = append(o, 0xa4, 0x72, 0x61, 0x74, 0x65)
			o = msgp.AppendUint64(o, (*z).BlockHeader.RewardsState.RewardsRate)
		}
		if (zb0007Mask & 0x80000) == 0 { // if not empty
			// string "rnd"
			o = append(o, 0xa3, 0x72, 0x6e, 0x64)
			o = (*z).BlockHeader.Round.MarshalMsg(o)
		}
		if (zb0007Mask & 0x100000) == 0 { // if not empty
			// string "rwcalr"
			o = append(o, 0xa6, 0x72, 0x77, 0x63, 0x61, 0x6c, 0x72)
			o = (*z).BlockHeader.RewardsState.RewardsRecalculationRound.MarshalMsg(o)
		}
		if (zb0007Mask & 0x200000) == 0 { // if not empty
			// string "rwd"
			o = append(o, 0xa3, 0x72, 0x77, 0x64)
			o = (*z).BlockHeader.RewardsState.RewardsPool.MarshalMsg(o)
		}
		if (zb0007Mask & 0x400000) == 0 { // if not empty
			// string "seed"
			o = append(o, 0xa4, 0x73, 0x65, 0x65, 0x64)
			o = (*z).BlockHeader.Seed.MarshalMsg(o)
		}
		if (zb0007Mask & 0x800000) == 0 { // if not empty
			// string "tc"
			o = append(o, 0xa2, 0x74, 0x63)
			o = msgp.AppendUint64(o, (*z).BlockHeader.TxnCounter)
		}
		if (zb0007Mask & 0x1000000) == 0 { // if not empty
			// string "ts"
			o = append(o, 0xa2, 0x74, 0x73)
			o = msgp.AppendInt64(o, (*z).BlockHeader.TimeStamp)
		}
		if (zb0007Mask & 0x2000000) == 0 { // if not empty
			// string "tte"
			o = append(o, 0xa3, 0x74, 0x74, 0x65)
			if (*z).Leases == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Leases)))
			}
			for zb0003 := range (*z).Leases {
				o = (*z).Leases[zb0003].MarshalMsg(o)
			}
		}
		if (zb0007Mask & 0x4000000) == 0 { // if not empty
			// string "tti"
			o = append(o, 0xa3, 0x74, 0x74, 0x69)
			if (*z).TxnIDs == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).TxnIDs)))
			}
			for zb0001 := range (*z).TxnIDs {
				o = (*z).TxnIDs[zb0001].MarshalMsg(o)
			}
		}
		if (zb0007Mask & 0x8000000) == 0 { // if not empty
			// string "ttv"
			o = append(o, 0xa3, 0x74, 0x74, 0x76)
			if (*z).LastValid == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).LastValid)))
			}
			for zb0002 := range (*z).LastValid {
				o = (*z).LastValid[zb0002].MarshalMsg(o)
			}
		}
		if (zb0007Mask & 0x10000000) == 0 { // if not empty
			// string "txn"
			o = append(o, 0xa3, 0x74, 0x78, 0x6e)
			o = (*z).BlockHeader.TxnRoot.MarshalMsg(o)
		}
		if (zb0007Mask & 0x20000000) == 0 { // if not empty
			// string "upgradedelay"
			o = append(o, 0xac, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x65, 0x6c, 0x61, 0x79)
			o = (*z).BlockHeader.UpgradeVote.UpgradeDelay.MarshalMsg(o)
		}
		if (zb0007Mask & 0x40000000) == 0 { // if not empty
			// string "upgradeprop"
			o = append(o, 0xab, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x70)
			o = (*z).BlockHeader.UpgradeVote.UpgradePropose.MarshalMsg(o)
		}
		if (zb0007Mask & 0x80000000) == 0 { // if not empty
			// string "upgradeyes"
			o = append(o, 0xaa, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x79, 0x65, 0x73)
			o = msgp.AppendBool(o, (*z).BlockHeader.UpgradeVote.UpgradeApprove)
		}
	}
	return
}

func (_ *txTailRound) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*txTailRound)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *txTailRound) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0007 int
	var zb0008 bool
	zb0007, zb0008, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0007, zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0007 > 0 {
			zb0007--
			var zb0009 int
			var zb0010 bool
			zb0009, zb0010, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TxnIDs")
				return
			}
			if zb0010 {
				(*z).TxnIDs = nil
			} else if (*z).TxnIDs != nil && cap((*z).TxnIDs) >= zb0009 {
				(*z).TxnIDs = ((*z).TxnIDs)[:zb0009]
			} else {
				(*z).TxnIDs = make([]transactions.Txid, zb0009)
			}
			for zb0001 := range (*z).TxnIDs {
				bts, err = (*z).TxnIDs[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "TxnIDs", zb0001)
					return
				}
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0011 int
			var zb0012 bool
			zb0011, zb0012, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LastValid")
				return
			}
			if zb0012 {
				(*z).LastValid = nil
			} else if (*z).LastValid != nil && cap((*z).LastValid) >= zb0011 {
				(*z).LastValid = ((*z).LastValid)[:zb0011]
			} else {
				(*z).LastValid = make([]basics.Round, zb0011)
			}
			for zb0002 := range (*z).LastValid {
				bts, err = (*z).LastValid[zb0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "LastValid", zb0002)
					return
				}
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0013 int
			var zb0014 bool
			zb0013, zb0014, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Leases")
				return
			}
			if zb0014 {
				(*z).Leases = nil
			} else if (*z).Leases != nil && cap((*z).Leases) >= zb0013 {
				(*z).Leases = ((*z).Leases)[:zb0013]
			} else {
				(*z).Leases = make([]txTailRoundLease, zb0013)
			}
			for zb0003 := range (*z).Leases {
				bts, err = (*z).Leases[zb0003].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Leases", zb0003)
					return
				}
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).BlockHeader.Round.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Round")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).BlockHeader.Branch.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Branch")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).BlockHeader.Seed.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Seed")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).BlockHeader.TxnRoot.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TxnRoot")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			(*z).BlockHeader.TimeStamp, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TimeStamp")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			(*z).BlockHeader.GenesisID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GenesisID")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).BlockHeader.GenesisHash.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GenesisHash")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).BlockHeader.RewardsState.FeeSink.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FeeSink")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).BlockHeader.RewardsState.RewardsPool.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RewardsPool")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			(*z).BlockHeader.RewardsState.RewardsLevel, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RewardsLevel")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			(*z).BlockHeader.RewardsState.RewardsRate, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RewardsRate")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			(*z).BlockHeader.RewardsState.RewardsResidue, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RewardsResidue")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).BlockHeader.RewardsState.RewardsRecalculationRound.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RewardsRecalculationRound")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).BlockHeader.UpgradeState.CurrentProtocol.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CurrentProtocol")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).BlockHeader.UpgradeState.NextProtocol.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "NextProtocol")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			(*z).BlockHeader.UpgradeState.NextProtocolApprovals, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "NextProtocolApprovals")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).BlockHeader.UpgradeState.NextProtocolVoteBefore.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "NextProtocolVoteBefore")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).BlockHeader.UpgradeState.NextProtocolSwitchOn.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "NextProtocolSwitchOn")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).BlockHeader.UpgradeVote.UpgradePropose.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "UpgradePropose")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).BlockHeader.UpgradeVote.UpgradeDelay.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "UpgradeDelay")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			(*z).BlockHeader.UpgradeVote.UpgradeApprove, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "UpgradeApprove")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			(*z).BlockHeader.TxnCounter, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TxnCounter")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0015 int
			var zb0016 bool
			zb0015, zb0016, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CompactCert")
				return
			}
			if zb0015 > protocol.NumCompactCertTypes {
				err = msgp.ErrOverflow(uint64(zb0015), uint64(protocol.NumCompactCertTypes))
				err = msgp.WrapError(err, "struct-from-array", "CompactCert")
				return
			}
			if zb0016 {
				(*z).BlockHeader.CompactCert = nil
			} else if (*z).BlockHeader.CompactCert == nil {
				(*z).BlockHeader.CompactCert = make(map[protocol.CompactCertType]bookkeeping.CompactCertState, zb0015)
			}
			for zb0015 > 0 {
				var zb0004 protocol.CompactCertType
				var zb0005 bookkeeping.CompactCertState
				zb0015--
				bts, err = zb0004.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "CompactCert")
					return
				}
				bts, err = zb0005.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "CompactCert", zb0004)
					return
				}
				(*z).BlockHeader.CompactCert[zb0004] = zb0005
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0017 int
			var zb0018 bool
			zb0017, zb0018, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ExpiredParticipationAccounts")
				return
			}
			if zb0017 > config.MaxProposedExpiredOnlineAccounts {
				err = msgp.ErrOverflow(uint64(zb0017), uint64(config.MaxProposedExpiredOnlineAccounts))
				err = msgp.WrapError(err, "struct-from-array", "ExpiredParticipationAccounts")
				return
			}
			if zb0018 {
				(*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts = nil
			} else if (*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts != nil && cap((*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts) >= zb0017 {
				(*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts = ((*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts)[:zb0017]
			} else {
				(*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts = make([]basics.Address, zb0017)
			}
			for zb0006 := range (*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts {
				bts, err = (*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts[zb0006].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ExpiredParticipationAccounts", zb0006)
					return
				}
			}
		}
		if zb0007 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0007)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0008 {
			(*z) = txTailRound{}
		}
		for zb0007 > 0 {
			zb0007--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "tti":
				var zb0019 int
				var zb0020 bool
				zb0019, zb0020, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TxnIDs")
					return
				}
				if zb0020 {
					(*z).TxnIDs = nil
				} else if (*z).TxnIDs != nil && cap((*z).TxnIDs) >= zb0019 {
					(*z).TxnIDs = ((*z).TxnIDs)[:zb0019]
				} else {
					(*z).TxnIDs = make([]transactions.Txid, zb0019)
				}
				for zb0001 := range (*z).TxnIDs {
					bts, err = (*z).TxnIDs[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "TxnIDs", zb0001)
						return
					}
				}
			case "ttv":
				var zb0021 int
				var zb0022 bool
				zb0021, zb0022, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LastValid")
					return
				}
				if zb0022 {
					(*z).LastValid = nil
				} else if (*z).LastValid != nil && cap((*z).LastValid) >= zb0021 {
					(*z).LastValid = ((*z).LastValid)[:zb0021]
				} else {
					(*z).LastValid = make([]basics.Round, zb0021)
				}
				for zb0002 := range (*z).LastValid {
					bts, err = (*z).LastValid[zb0002].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "LastValid", zb0002)
						return
					}
				}
			case "tte":
				var zb0023 int
				var zb0024 bool
				zb0023, zb0024, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Leases")
					return
				}
				if zb0024 {
					(*z).Leases = nil
				} else if (*z).Leases != nil && cap((*z).Leases) >= zb0023 {
					(*z).Leases = ((*z).Leases)[:zb0023]
				} else {
					(*z).Leases = make([]txTailRoundLease, zb0023)
				}
				for zb0003 := range (*z).Leases {
					bts, err = (*z).Leases[zb0003].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Leases", zb0003)
						return
					}
				}
			case "rnd":
				bts, err = (*z).BlockHeader.Round.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Round")
					return
				}
			case "prev":
				bts, err = (*z).BlockHeader.Branch.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Branch")
					return
				}
			case "seed":
				bts, err = (*z).BlockHeader.Seed.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Seed")
					return
				}
			case "txn":
				bts, err = (*z).BlockHeader.TxnRoot.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "TxnRoot")
					return
				}
			case "ts":
				(*z).BlockHeader.TimeStamp, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TimeStamp")
					return
				}
			case "gen":
				(*z).BlockHeader.GenesisID, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "GenesisID")
					return
				}
			case "gh":
				bts, err = (*z).BlockHeader.GenesisHash.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "GenesisHash")
					return
				}
			case "fees":
				bts, err = (*z).BlockHeader.RewardsState.FeeSink.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "FeeSink")
					return
				}
			case "rwd":
				bts, err = (*z).BlockHeader.RewardsState.RewardsPool.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "RewardsPool")
					return
				}
			case "earn":
				(*z).BlockHeader.RewardsState.RewardsLevel, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RewardsLevel")
					return
				}
			case "rate":
				(*z).BlockHeader.RewardsState.RewardsRate, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RewardsRate")
					return
				}
			case "frac":
				(*z).BlockHeader.RewardsState.RewardsResidue, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RewardsResidue")
					return
				}
			case "rwcalr":
				bts, err = (*z).BlockHeader.RewardsState.RewardsRecalculationRound.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "RewardsRecalculationRound")
					return
				}
			case "proto":
				bts, err = (*z).BlockHeader.UpgradeState.CurrentProtocol.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "CurrentProtocol")
					return
				}
			case "nextproto":
				bts, err = (*z).BlockHeader.UpgradeState.NextProtocol.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "NextProtocol")
					return
				}
			case "nextyes":
				(*z).BlockHeader.UpgradeState.NextProtocolApprovals, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NextProtocolApprovals")
					return
				}
			case "nextbefore":
				bts, err = (*z).BlockHeader.UpgradeState.NextProtocolVoteBefore.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "NextProtocolVoteBefore")
					return
				}
			case "nextswitch":
				bts, err = (*z).BlockHeader.UpgradeState.NextProtocolSwitchOn.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "NextProtocolSwitchOn")
					return
				}
			case "upgradeprop":
				bts, err = (*z).BlockHeader.UpgradeVote.UpgradePropose.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "UpgradePropose")
					return
				}
			case "upgradedelay":
				bts, err = (*z).BlockHeader.UpgradeVote.UpgradeDelay.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "UpgradeDelay")
					return
				}
			case "upgradeyes":
				(*z).BlockHeader.UpgradeVote.UpgradeApprove, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "UpgradeApprove")
					return
				}
			case "tc":
				(*z).BlockHeader.TxnCounter, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TxnCounter")
					return
				}
			case "cc":
				var zb0025 int
				var zb0026 bool
				zb0025, zb0026, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "CompactCert")
					return
				}
				if zb0025 > protocol.NumCompactCertTypes {
					err = msgp.ErrOverflow(uint64(zb0025), uint64(protocol.NumCompactCertTypes))
					err = msgp.WrapError(err, "CompactCert")
					return
				}
				if zb0026 {
					(*z).BlockHeader.CompactCert = nil
				} else if (*z).BlockHeader.CompactCert == nil {
					(*z).BlockHeader.CompactCert = make(map[protocol.CompactCertType]bookkeeping.CompactCertState, zb0025)
				}
				for zb0025 > 0 {
					var zb0004 protocol.CompactCertType
					var zb0005 bookkeeping.CompactCertState
					zb0025--
					bts, err = zb0004.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "CompactCert")
						return
					}
					bts, err = zb0005.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "CompactCert", zb0004)
						return
					}
					(*z).BlockHeader.CompactCert[zb0004] = zb0005
				}
			case "partupdrmv":
				var zb0027 int
				var zb0028 bool
				zb0027, zb0028, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ExpiredParticipationAccounts")
					return
				}
				if zb0027 > config.MaxProposedExpiredOnlineAccounts {
					err = msgp.ErrOverflow(uint64(zb0027), uint64(config.MaxProposedExpiredOnlineAccounts))
					err = msgp.WrapError(err, "ExpiredParticipationAccounts")
					return
				}
				if zb0028 {
					(*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts = nil
				} else if (*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts != nil && cap((*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts) >= zb0027 {
					(*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts = ((*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts)[:zb0027]
				} else {
					(*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts = make([]basics.Address, zb0027)
				}
				for zb0006 := range (*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts {
					bts, err = (*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts[zb0006].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "ExpiredParticipationAccounts", zb0006)
						return
					}
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *txTailRound) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*txTailRound)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *txTailRound) Msgsize() (s int) {
	s = 3 + 4 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).TxnIDs {
		s += (*z).TxnIDs[zb0001].Msgsize()
	}
	s += 4 + msgp.ArrayHeaderSize
	for zb0002 := range (*z).LastValid {
		s += (*z).LastValid[zb0002].Msgsize()
	}
	s += 4 + msgp.ArrayHeaderSize
	for zb0003 := range (*z).Leases {
		s += (*z).Leases[zb0003].Msgsize()
	}
	s += 4 + (*z).BlockHeader.Round.Msgsize() + 5 + (*z).BlockHeader.Branch.Msgsize() + 5 + (*z).BlockHeader.Seed.Msgsize() + 4 + (*z).BlockHeader.TxnRoot.Msgsize() + 3 + msgp.Int64Size + 4 + msgp.StringPrefixSize + len((*z).BlockHeader.GenesisID) + 3 + (*z).BlockHeader.GenesisHash.Msgsize() + 5 + (*z).BlockHeader.RewardsState.FeeSink.Msgsize() + 4 + (*z).BlockHeader.RewardsState.RewardsPool.Msgsize() + 5 + msgp.Uint64Size + 5 + msgp.Uint64Size + 5 + msgp.Uint64Size + 7 + (*z).BlockHeader.RewardsState.RewardsRecalculationRound.Msgsize() + 6 + (*z).BlockHeader.UpgradeState.CurrentProtocol.Msgsize() + 10 + (*z).BlockHeader.UpgradeState.NextProtocol.Msgsize() + 8 + msgp.Uint64Size + 11 + (*z).BlockHeader.UpgradeState.NextProtocolVoteBefore.Msgsize() + 11 + (*z).BlockHeader.UpgradeState.NextProtocolSwitchOn.Msgsize() + 12 + (*z).BlockHeader.UpgradeVote.UpgradePropose.Msgsize() + 13 + (*z).BlockHeader.UpgradeVote.UpgradeDelay.Msgsize() + 11 + msgp.BoolSize + 3 + msgp.Uint64Size + 3 + msgp.MapHeaderSize
	if (*z).BlockHeader.CompactCert != nil {
		for zb0004, zb0005 := range (*z).BlockHeader.CompactCert {
			_ = zb0004
			_ = zb0005
			s += 0 + zb0004.Msgsize() + zb0005.Msgsize()
		}
	}
	s += 11 + msgp.ArrayHeaderSize
	for zb0006 := range (*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts {
		s += (*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts[zb0006].Msgsize()
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z *txTailRound) MsgIsZero() bool {
	return (len((*z).TxnIDs) == 0) && (len((*z).LastValid) == 0) && (len((*z).Leases) == 0) && ((*z).BlockHeader.Round.MsgIsZero()) && ((*z).BlockHeader.Branch.MsgIsZero()) && ((*z).BlockHeader.Seed.MsgIsZero()) && ((*z).BlockHeader.TxnRoot.MsgIsZero()) && ((*z).BlockHeader.TimeStamp == 0) && ((*z).BlockHeader.GenesisID == "") && ((*z).BlockHeader.GenesisHash.MsgIsZero()) && ((*z).BlockHeader.RewardsState.FeeSink.MsgIsZero()) && ((*z).BlockHeader.RewardsState.RewardsPool.MsgIsZero()) && ((*z).BlockHeader.RewardsState.RewardsLevel == 0) && ((*z).BlockHeader.RewardsState.RewardsRate == 0) && ((*z).BlockHeader.RewardsState.RewardsResidue == 0) && ((*z).BlockHeader.RewardsState.RewardsRecalculationRound.MsgIsZero()) && ((*z).BlockHeader.UpgradeState.CurrentProtocol.MsgIsZero()) && ((*z).BlockHeader.UpgradeState.NextProtocol.MsgIsZero()) && ((*z).BlockHeader.UpgradeState.NextProtocolApprovals == 0) && ((*z).BlockHeader.UpgradeState.NextProtocolVoteBefore.MsgIsZero()) && ((*z).BlockHeader.UpgradeState.NextProtocolSwitchOn.MsgIsZero()) && ((*z).BlockHeader.UpgradeVote.UpgradePropose.MsgIsZero()) && ((*z).BlockHeader.UpgradeVote.UpgradeDelay.MsgIsZero()) && ((*z).BlockHeader.UpgradeVote.UpgradeApprove == false) && ((*z).BlockHeader.TxnCounter == 0) && (len((*z).BlockHeader.CompactCert) == 0) && (len((*z).BlockHeader.ParticipationUpdates.ExpiredParticipationAccounts) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *txTailRoundLease) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0002Len := uint32(3)
	var zb0002Mask uint8 /* 4 bits */
	if (*z).TxnIdx == 0 {
		zb0002Len--
		zb0002Mask |= 0x1
	}
	if (*z).Lease == ([32]byte{}) {
		zb0002Len--
		zb0002Mask |= 0x4
	}
	if (*z).Sender.MsgIsZero() {
		zb0002Len--
		zb0002Mask |= 0x8
	}
	// variable map header, size zb0002Len
	o = append(o, 0x80|uint8(zb0002Len))
	if zb0002Len != 0 {
		if (zb0002Mask & 0x1) == 0 { // if not empty
			// string "TxnIdx"
			o = append(o, 0xa6, 0x54, 0x78, 0x6e, 0x49, 0x64, 0x78)
			o = msgp.AppendUint64(o, (*z).TxnIdx)
		}
		if (zb0002Mask & 0x4) == 0 { // if not empty
			// string "l"
			o = append(o, 0xa1, 0x6c)
			o = msgp.AppendBytes(o, ((*z).Lease)[:])
		}
		if (zb0002Mask & 0x8) == 0 { // if not empty
			// string "s"
			o = append(o, 0xa1, 0x73)
			o = (*z).Sender.MarshalMsg(o)
		}
	}
	return
}

func (_ *txTailRoundLease) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*txTailRoundLease)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *txTailRoundLease) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0002 int
	var zb0003 bool
	zb0002, zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0002, zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 > 0 {
			zb0002--
			bts, err = (*z).Sender.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Sender")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			bts, err = msgp.ReadExactBytes(bts, ((*z).Lease)[:])
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Lease")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			(*z).TxnIdx, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TxnIdx")
				return
			}
		}
		if zb0002 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0002)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0003 {
			(*z) = txTailRoundLease{}
		}
		for zb0002 > 0 {
			zb0002--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "s":
				bts, err = (*z).Sender.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sender")
					return
				}
			case "l":
				bts, err = msgp.ReadExactBytes(bts, ((*z).Lease)[:])
				if err != nil {
					err = msgp.WrapError(err, "Lease")
					return
				}
			case "TxnIdx":
				(*z).TxnIdx, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TxnIdx")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *txTailRoundLease) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*txTailRoundLease)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *txTailRoundLease) Msgsize() (s int) {
	s = 1 + 2 + (*z).Sender.Msgsize() + 2 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 7 + msgp.Uint64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z *txTailRoundLease) MsgIsZero() bool {
	return ((*z).Sender.MsgIsZero()) && ((*z).Lease == ([32]byte{})) && ((*z).TxnIdx == 0)
}
