// Implements a limit order for an asset, given Algos.
// This is a contract account.
//
// This allows either a two-transaction group, for executing the
// trade, or single transaction, for closing the position.
//
// Let ratio = TMPL_SWAPN / TMPL_SWAPD.
//
// Filling the order requires a group transaction of size two.
// More than TMPL_MINTRD can be sent to any address, and more
// than ratio * TMPL_MINTRD can be sent to TMPL_OWN. All remaining
// funds are refunded to TMPL_OWN.
//
// After TMPL_TIMEOUT passes, all funds can be refunded to TMPL_OWN.
//
// Parameters:
//  - TMPL_ASSET: ID of the transferred asset
//  - TMPL_SWAPN: exchange rate (for N algos, want rate * N coin) (numerator)
//  - TMPL_SWAPD: exchange rate (for N algos, want rate * N coin) (denominator)
//  - TMPL_TIMEOUT: the round at which the account expires
//  - TMPL_OWN: the address to refund funds to on timeout
//  - TMPL_FEE: maximum fee used by the limit order transaction
//  - TMPL_MINTRD: the minimum amount (of Algos) to be traded away
txn GroupIndex
int 0
==
txn TypeEnum
int 1
==
&&
txn Fee
int TMPL_FEE
<
&&
txn CloseRemainderTo
addr TMPL_OWN
==
&&
global GroupSize
int 3
<
&&
global GroupSize
int 1
==
bnz label2
txn Amount
int TMPL_MINTRD
>
gtxn 1 TypeEnum
int 4
==
&&
gtxn 1 XferAsset
int TMPL_ASSET
==
&&
gtxn 1 AssetReceiver
addr TMPL_OWN
==
&&
gtxn 1 AssetSender
global ZeroAddress
==
&&
int TMPL_SWAPN
txn Amount
*
int TMPL_SWAPD
gtxn 1 AssetAmount
*
<
&&
int 1
bnz label3
label2:
txn FirstValid
int TMPL_TIMEOUT
>
txn Receiver
global ZeroAddress
==
&&
txn Amount
int 0
==
&&
label3:
&&