pipeline {
    parameters {
        string defaultValue: '', description: 'Branch name, commit hash or tag name.', name: 'hash', trim: true
        string defaultValue: 'stable', description: 'Staged channel which should be released.', name: 'channel', trim: true
        string defaultValue: 's3://algorand-dev-deb-repo/releases', description: 's3://bucket/prefix', name: 'bucket_location', trim: true

        // AWS
        string defaultValue: 'us-west-1', description: 'AWS Region', name: 'region', trim: true
        string defaultValue: 'ami-0dd655843c87b6930', description: 'Amazon Machine Image (default: Ubuntu Server 18.04 LTS, 8 vCPUs, 32 GB RAM', name: 'ami', trim: true
        string defaultValue: 't2.2xlarge', description: 'Instance Type', name: 'type', trim: true
    }

    environment {
        AWS_ACCESS_KEY_ID = credentials("aws-access-key-id")
        AWS_SECRET_ACCESS_KEY = credentials("aws-secret-access-key")
    }

    agent any

    stages {
        stage("create ec2 instance") {
            steps {
                sh script: "scripts/release/start_ec2_instance.sh ${params.region} ${params.ami} ${params.type}"
                //sh script: 'scripts/release/start_ec2_instance.sh us-east-1 ami-04b9e92b5572fa0d1 t2.2xlarge'
            }
        }

        stage("setup ec2 instance") {
            steps {
                script {
                    if (params.channel == null || params.channel == "") {
                        error("Missing required parameter [channel].")
                    }
                }

                sh 'aws s3 cp s3://algorand-devops-misc/tools/gnupg2.2.9_centos7_amd64.tar.bz2 .'
                sh 'ssh -i ReleaseBuildInstanceKey.pem -A ubuntu@$(cat scripts/release/tmp/instance) mkdir docker_test_resources'
                sh 'scp -i ReleaseBuildInstanceKey.pem -o StrictHostKeyChecking=no -r gnupg2.2.9_centos7_amd64.tar.bz2 ubuntu@$(cat scripts/release/tmp/instance):~/docker_test_resources/'
                sh 'scp -i ReleaseBuildInstanceKey.pem -o StrictHostKeyChecking=no -r scripts/release/controller/setup.sh ubuntu@$(cat scripts/release/tmp/instance):~/setup.sh'
                sh "ssh -i ReleaseBuildInstanceKey.pem -A ubuntu@\$(cat scripts/release/tmp/instance) bash setup.sh ${params.hash} ${params.channel}"
            }
        }

        stage("build") {
            steps {
                sh "ssh -i ReleaseBuildInstanceKey.pem -A ubuntu@\$(cat scripts/release/tmp/instance) bash go/src/github.com/algorand/go-algorand/scripts/release/controller/build.sh ${params.channel}"
            }
        }

        stage("package") {
            steps {
                input "GPG remote socket"
                sh "rm -rf *.deb *.rpm ; python3 scripts/get_current_installers.py ${params.bucket_location}/${params.channel}"
                // Copy previous installers into ~/docker_test_resources.
                sh 'scp -i ReleaseBuildInstanceKey.pem -o StrictHostKeyChecking=no *.deb ubuntu@$(cat scripts/release/tmp/instance):~/docker_test_resources/'
                sh 'ssh -i ReleaseBuildInstanceKey.pem -A ubuntu@$(cat scripts/release/tmp/instance) bash go/src/github.com/algorand/go-algorand/scripts/release/controller/package.sh'
            }
        }

        stage("sign") {
            steps {
                sh 'ssh -i ReleaseBuildInstanceKey.pem -A ubuntu@$(cat scripts/release/tmp/instance) bash go/src/github.com/algorand/go-algorand/scripts/release/controller/sign.sh'
            }
        }

        stage("upload") {
            steps {
                script {
                    def rstamp = sh(
                        script: 'scripts/reverse_hex_timestamp',
                        returnStdout: true
                    ).trim()

                    def fullversion = sh(
                        script: 'bash scripts/compute_build_number.sh -f',
                        returnStdout: true
                    ).trim()

                    sh "rm -rf node_pkg/* && mkdir -p node_pkg/${rstamp}"
                    sh "scp -i ReleaseBuildInstanceKey.pem -o StrictHostKeyChecking=no -r ubuntu@\$(cat scripts/release/tmp/instance):~/node_pkg/* node_pkg/${rstamp}/"
                    sh "aws s3 sync --exclude dev* --exclude master* --exclude nightly* --exclude stable* --acl public-read node_pkg/${rstamp} ${params.bucket_location}/${params.channel}/${rstamp}_${fullversion}/"
                    // Create the buildlog file.
                    sh 'ssh -i ReleaseBuildInstanceKey.pem -A ubuntu@$(cat scripts/release/tmp/instance) bash go/src/github.com/algorand/go-algorand/scripts/release/controller/upload.sh'
                    // sh "aws s3 cp --quiet ubuntu@\$(cat scripts/release/tmp/instance)/build_status_${params.channel}_${fullversion}.asc.gz s3://algorand-devops-misc/buildlog/${rstamp}/"
                    sh "scp -i ReleaseBuildInstanceKey.pem -o StrictHostKeyChecking=no ubuntu@\$(cat scripts/release/tmp/instance):~/build_status_${params.channel}_*.asc.gz node_pkg/"
                    sh "aws s3 cp --quiet node_pkg/build_status_${params.channel}_*.asc.gz s3://algorand-devops-misc/buildlog/${rstamp}/"
                }
            }
        }

        stage("delete ec2 instance") {
            steps {
                input "Halt"
                sh script: "scripts/release/shutdown_ec2_instance.sh ${params.region}"
            }
        }
    }
}

