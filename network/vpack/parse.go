// go generate gen.go
// Code generated by gen.go; DO NOT EDIT.

package vpack

import (
	"fmt"
)

func parseVote(data []byte, c compressWriter) error {
	p := newParser(data)

	cnt, err := p.expectWriteMapMarker(3, c)
	if err != nil {
		return fmt.Errorf("map for unauthenticatedVote: %w", err)
	}

	for range cnt {
		key, err := p.readString()
		if err != nil {
			return fmt.Errorf("reading key for unauthenticatedVote: %w", err)
		}

		switch string(key) {
		case "cred":
			c.writeStatic(StaticIdxCredField)

			cnt, err := p.expectWriteMapMarker(1, c)
			if err != nil {
				return fmt.Errorf("map for UnauthenticatedCredential: %w", err)
			}

			for range cnt {
				key, err := p.readString()
				if err != nil {
					return fmt.Errorf("reading key for UnauthenticatedCredential: %w", err)
				}

				switch string(key) {
				case "pf":
					val, err := p.readBin80()
					if err != nil {
						return fmt.Errorf("reading pf: %w", err)
					}
					c.writeStatic(StaticIdxPfField)
					c.writeLiteralBin80(val)
				default:
					return fmt.Errorf("unexpected field in UnauthenticatedCredential: %q", key)
				}
			}

		case "r":
			c.writeStatic(StaticIdxRField)

			cnt, err := p.expectWriteMapMarker(5, c)
			if err != nil {
				return fmt.Errorf("map for rawVote: %w", err)
			}

			for range cnt {
				key, err := p.readString()
				if err != nil {
					return fmt.Errorf("reading key for rawVote: %w", err)
				}

				switch string(key) {
				case "per":
					valBytes, err := p.readUintBytes()
					if err != nil {
						return fmt.Errorf("reading per: %w", err)
					}
					c.writeStatic(StaticIdxPerField)
					c.writeDynamicVaruint(valBytes)
				case "prop":
					c.writeStatic(StaticIdxPropField)

					cnt, err := p.expectWriteMapMarker(4, c)
					if err != nil {
						return fmt.Errorf("map for proposalValue: %w", err)
					}

					for range cnt {
						key, err := p.readString()
						if err != nil {
							return fmt.Errorf("reading key for proposalValue: %w", err)
						}

						switch string(key) {
						case "dig":
							val, err := p.readBin32()
							if err != nil {
								return fmt.Errorf("reading dig: %w", err)
							}
							c.writeStatic(StaticIdxDigField)
							c.writeDynamicBin32(val)
						case "encdig":
							val, err := p.readBin32()
							if err != nil {
								return fmt.Errorf("reading encdig: %w", err)
							}
							c.writeStatic(StaticIdxEncdigField)
							c.writeDynamicBin32(val)
						case "oper":
							valBytes, err := p.readUintBytes()
							if err != nil {
								return fmt.Errorf("reading oper: %w", err)
							}
							c.writeStatic(StaticIdxOperField)
							c.writeDynamicVaruint(valBytes)
						case "oprop":
							val, err := p.readBin32()
							if err != nil {
								return fmt.Errorf("reading oprop: %w", err)
							}
							c.writeStatic(StaticIdxOpropField)
							c.writeDynamicBin32(val)
						default:
							return fmt.Errorf("unexpected field in proposalValue: %q", key)
						}
					}

				case "rnd":
					valBytes, err := p.readUintBytes()
					if err != nil {
						return fmt.Errorf("reading rnd: %w", err)
					}
					c.writeStatic(StaticIdxRndField)
					c.writeDynamicVaruint(valBytes)
				case "snd":
					val, err := p.readBin32()
					if err != nil {
						return fmt.Errorf("reading snd: %w", err)
					}
					c.writeStatic(StaticIdxSndField)
					c.writeDynamicBin32(val)
				case "step":
					valBytes, err := p.readUintBytes()
					if err != nil {
						return fmt.Errorf("reading step: %w", err)
					}
					// If we have special single-byte numeric values
					if len(valBytes) == 1 {
						switch valBytes[0] {
						case 1:
							c.writeStatic(StaticIdxStepVal1Field)
							continue
						case 2:
							c.writeStatic(StaticIdxStepVal2Field)
							continue
						case 3:
							c.writeStatic(StaticIdxStepVal3Field)
							continue
						}
					}

					c.writeStatic(StaticIdxStepField)
					c.writeDynamicVaruint(valBytes)
				default:
					return fmt.Errorf("unexpected field in rawVote: %q", key)
				}
			}

		case "sig":
			c.writeStatic(StaticIdxSigField)

			cnt, err := p.expectWriteMapMarker(6, c)
			if err != nil {
				return fmt.Errorf("map for OneTimeSignature: %w", err)
			}

			for range cnt {
				key, err := p.readString()
				if err != nil {
					return fmt.Errorf("reading key for OneTimeSignature: %w", err)
				}

				switch string(key) {
				case "p":
					val, err := p.readBin32()
					if err != nil {
						return fmt.Errorf("reading p: %w", err)
					}
					c.writeStatic(StaticIdxPField)
					c.writeDynamicBin32(val)
				case "p1s":
					val, err := p.readBin64()
					if err != nil {
						return fmt.Errorf("reading p1s: %w", err)
					}
					c.writeStatic(StaticIdxP1sField)
					c.writeLiteralBin64(val)
				case "p2":
					val, err := p.readBin32()
					if err != nil {
						return fmt.Errorf("reading p2: %w", err)
					}
					c.writeStatic(StaticIdxP2Field)
					c.writeDynamicBin32(val)
				case "p2s":
					val, err := p.readBin64()
					if err != nil {
						return fmt.Errorf("reading p2s: %w", err)
					}
					c.writeStatic(StaticIdxP2sField)
					c.writeLiteralBin64(val)
				case "ps":
					val, err := p.readBin64()
					if err != nil {
						return fmt.Errorf("reading ps: %w", err)
					}
					if val == [64]byte{} {
						c.writeStatic(StaticIdxAllZeroPsField)
					} else {
						c.writeStatic(StaticIdxPsField)
						c.writeLiteralBin64(val)
					}
				case "s":
					val, err := p.readBin64()
					if err != nil {
						return fmt.Errorf("reading s: %w", err)
					}
					c.writeStatic(StaticIdxSField)
					c.writeLiteralBin64(val)
				default:
					return fmt.Errorf("unexpected field in OneTimeSignature: %q", key)
				}
			}

		default:
			return fmt.Errorf("unexpected field in unauthenticatedVote: %q", key)
		}
	}

	return nil
}
