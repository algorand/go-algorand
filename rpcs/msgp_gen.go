package rpcs

// Code generated by github.com/algorand/msgp DO NOT EDIT.

import (
	"github.com/algorand/msgp/msgp"

	"github.com/algorand/go-algorand/agreement"
	"github.com/algorand/go-algorand/data/bookkeeping"
)

// The following msgp objects are implemented in this file:
// EncodedBlockCert
//         |-----> (*) MarshalMsg
//         |-----> (*) CanMarshalMsg
//         |-----> (*) UnmarshalMsg
//         |-----> (*) UnmarshalValidateMsg
//         |-----> (*) CanUnmarshalMsg
//         |-----> (*) Msgsize
//         |-----> (*) MsgIsZero
//         |-----> EncodedBlockCertMaxSize()
//

// MarshalMsg implements msgp.Marshaler
func (z *EncodedBlockCert) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "block"
	o = append(o, 0x82, 0xa5, 0x62, 0x6c, 0x6f, 0x63, 0x6b)
	o = (*z).Block.MarshalMsg(o)
	// string "cert"
	o = append(o, 0xa4, 0x63, 0x65, 0x72, 0x74)
	o = (*z).Certificate.MarshalMsg(o)
	return
}

func (_ *EncodedBlockCert) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*EncodedBlockCert)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EncodedBlockCert) unmarshalMsg(bts []byte, validate bool) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0003 string
	var zb0004 bool
	var zb0002 bool
	_ = zb0003
	_ = zb0004
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if validate {
			err = &msgp.ErrNonCanonical{}
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Block.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Block")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Certificate.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Certificate")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = EncodedBlockCert{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "block":
				if validate && zb0004 && "block" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Block.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Block")
					return
				}
				zb0003 = "block"
			case "cert":
				if validate && zb0004 && "cert" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Certificate.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Certificate")
					return
				}
				zb0003 = "cert"
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
			zb0004 = true
		}
	}
	o = bts
	return
}

func (z *EncodedBlockCert) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, false)
}
func (z *EncodedBlockCert) UnmarshalValidateMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, true)
}
func (_ *EncodedBlockCert) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*EncodedBlockCert)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EncodedBlockCert) Msgsize() (s int) {
	s = 1 + 6 + (*z).Block.Msgsize() + 5 + (*z).Certificate.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *EncodedBlockCert) MsgIsZero() bool {
	return ((*z).Block.MsgIsZero()) && ((*z).Certificate.MsgIsZero())
}

// MaxSize returns a maximum valid message size for this message type
func EncodedBlockCertMaxSize() (s int) {
	s = 1 + 6 + bookkeeping.BlockMaxSize() + 5 + agreement.CertificateMaxSize()
	return
}
