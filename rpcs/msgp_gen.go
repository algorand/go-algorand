package rpcs

// Code generated by github.com/algorand/msgp DO NOT EDIT.

import (
	"github.com/algorand/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *EncodedBlockCert) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "block"
	o = append(o, 0x82, 0xa5, 0x62, 0x6c, 0x6f, 0x63, 0x6b)
	o, err = (*z).Block.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Block")
		return
	}
	// string "cert"
	o = append(o, 0xa4, 0x63, 0x65, 0x72, 0x74)
	o, err = (*z).Certificate.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Certificate")
		return
	}
	return
}

func (_ *EncodedBlockCert) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*EncodedBlockCert)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EncodedBlockCert) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Block.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Block")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Certificate.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Certificate")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = EncodedBlockCert{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "block":
				bts, err = (*z).Block.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Block")
					return
				}
			case "cert":
				bts, err = (*z).Certificate.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Certificate")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *EncodedBlockCert) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*EncodedBlockCert)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EncodedBlockCert) Msgsize() (s int) {
	s = 1 + 6 + (*z).Block.Msgsize() + 5 + (*z).Certificate.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *EncodedBlockCert) MsgIsZero() bool {
	return ((*z).Block.MsgIsZero()) && ((*z).Certificate.MsgIsZero())
}

// MarshalMsg implements msgp.Marshaler
func (z *WsGetBlockOut) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "BlockBytes"
	o = append(o, 0x83, 0xaa, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73)
	o = msgp.AppendBytes(o, (*z).BlockBytes)
	// string "Error"
	o = append(o, 0xa5, 0x45, 0x72, 0x72, 0x6f, 0x72)
	o = msgp.AppendString(o, (*z).Error)
	// string "Round"
	o = append(o, 0xa5, 0x52, 0x6f, 0x75, 0x6e, 0x64)
	o = msgp.AppendUint64(o, (*z).Round)
	return
}

func (_ *WsGetBlockOut) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*WsGetBlockOut)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *WsGetBlockOut) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			(*z).Round, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Round")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).Error, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Error")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).BlockBytes, bts, err = msgp.ReadBytesBytes(bts, (*z).BlockBytes)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "BlockBytes")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = WsGetBlockOut{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "Round":
				(*z).Round, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Round")
					return
				}
			case "Error":
				(*z).Error, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Error")
					return
				}
			case "BlockBytes":
				(*z).BlockBytes, bts, err = msgp.ReadBytesBytes(bts, (*z).BlockBytes)
				if err != nil {
					err = msgp.WrapError(err, "BlockBytes")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *WsGetBlockOut) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*WsGetBlockOut)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *WsGetBlockOut) Msgsize() (s int) {
	s = 1 + 6 + msgp.Uint64Size + 6 + msgp.StringPrefixSize + len((*z).Error) + 11 + msgp.BytesPrefixSize + len((*z).BlockBytes)
	return
}

// MsgIsZero returns whether this is a zero value
func (z *WsGetBlockOut) MsgIsZero() bool {
	return ((*z).Round == 0) && ((*z).Error == "") && (len((*z).BlockBytes) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *WsGetBlockRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Round"
	o = append(o, 0x81, 0xa5, 0x52, 0x6f, 0x75, 0x6e, 0x64)
	o = msgp.AppendUint64(o, (*z).Round)
	return
}

func (_ *WsGetBlockRequest) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*WsGetBlockRequest)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *WsGetBlockRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			(*z).Round, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Round")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = WsGetBlockRequest{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "Round":
				(*z).Round, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Round")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *WsGetBlockRequest) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*WsGetBlockRequest)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *WsGetBlockRequest) Msgsize() (s int) {
	s = 1 + 6 + msgp.Uint64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z *WsGetBlockRequest) MsgIsZero() bool {
	return ((*z).Round == 0)
}
