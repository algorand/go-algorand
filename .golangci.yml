version: "2"
run:
  tests: true

linters:
  default: none
  enable:
    - copyloopvar
    - dupword
    - errcheck
    - govet
    - ineffassign
    - misspell
    - nilerr
    - nolintlint
    - paralleltest
    - revive
    - staticcheck
    - unused
  
  settings:
    dupword:
      comments-only: true
      ignore:
        - long # "long long" is OK
    errcheck:
      exclude-functions:
        # We do this 121 times and never check the error.
        - (*github.com/spf13/cobra.Command).MarkFlagRequired
        - (*github.com/spf13/pflag.FlagSet).MarkDeprecated
        - (*github.com/spf13/pflag.FlagSet).MarkShorthandDeprecated
    govet:
      # Enables these linters in addition to the default ones.
      enable:
        - shadow
      disable:
        - buildtag
      settings:
        printf:
          # Comma-separated list of print function names to check (in addition to default, see `go tool vet help printf`).
          # Default: []
          funcs:
            - (github.com/algorand/go-algorand/logging.Logger).Debugf
            - (github.com/algorand/go-algorand/logging.Logger).Infof
            - (github.com/algorand/go-algorand/logging.Logger).Warnf
            - (github.com/algorand/go-algorand/logging.Logger).Errorf
            - (github.com/algorand/go-algorand/logging.Logger).Fatalf
            - (github.com/algorand/go-algorand/logging.Logger).Panicf
            - (github.com/algorand/go-algorand/logging.Logger).Debugln
            - (github.com/algorand/go-algorand/logging.Logger).Infoln
            - (github.com/algorand/go-algorand/logging.Logger).Warnln
            - (github.com/algorand/go-algorand/logging.Logger).Errorln
            - (github.com/algorand/go-algorand/logging.Logger).Fatalln
            - (github.com/algorand/go-algorand/logging.Logger).Panicln
            - (github.com/algorand/go-algorand/logging.Logger).Debug
            - (github.com/algorand/go-algorand/logging.Logger).Info
            - (github.com/algorand/go-algorand/logging.Logger).Warn
            - (github.com/algorand/go-algorand/logging.Logger).Error
            - (github.com/algorand/go-algorand/logging.Logger).Fatal
            - (github.com/algorand/go-algorand/logging.Logger).Panic
            - (github.com/algorand/go-algorand/cmd/goal/main).reportInfof
            - (github.com/algorand/go-algorand/cmd/goal/main).reportInfoln
            - (github.com/algorand/go-algorand/cmd/goal/main).reportWarnf
            - (github.com/algorand/go-algorand/cmd/goal/main).reportWarnln
            - (github.com/algorand/go-algorand/cmd/goal/main).reportWarnRawf
            - (github.com/algorand/go-algorand/cmd/goal/main).reportWarnRawln
            - (github.com/algorand/go-algorand/cmd/goal/main).reportErrorf
            - (github.com/algorand/go-algorand/cmd/goal/main).reportErrorln
        shadow:
          # explanation of strict vs non-strict:
          # https://github.com/golang/tools/blob/v0.7.0/go/analysis/passes/shadow/shadow.go#L104-L122
          strict: false
    nolintlint:
      # require naming a specific linter X using //nolint:X
      require-specific: true
      # require comments like "//nolint:errcheck // Explanation of why we are ignoring linter here..."
      require-explanation: true
    staticcheck:
      checks:
        - all
        - '-ST1000' # don't require package comments
        - '-ST1003' # don't require currentDBRound vs currentDbRound
        - '-ST1016' # OK to have mismatched receiver names
        - '-SA3001' # we assign to b.N in several benchmarks
        - '-SA1019' # TODO should fix, in Go 1.24 rand.Seed() is a no-op
        - '-QF1008' # ignore suggestions to remove embedded fields (e.g., txn.SignedTxn.Txn -> txn.Txn)
        - '-ST1005' # ignore "error strings should not be capitalized"
        - '-QF1001' # ignore De Morgan's law suggestions
        - '-QF1003' # ignore suggestions to replace if/else chain with switch

  exclusions:
    generated: lax
    rules:
      # exclude all issues from several linters from test code (TODO should fix these issues)
      - path: _test\.go
        linters:
          - errcheck
          - ineffassign
          - nolintlint
          - staticcheck
          - unused
      - linters: govet
        path: _test\.go
        text: shadows declaration at line # allow shadowing in test code
      - linters: paralleltest # Ignore missing t.Parallel calls in the following packages
        path: ^(agreement|catchup|config|crypto|daemon|data|gen|ledger|logging|network|node|protocol|rpcs|stateproof|test|tools|util).*_test\.go

        # Enable default golangci-lint exclusion: "Almost all programs ignore errors on these functions and in most cases it's ok"
      - linters: errcheck
        text: Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print(f|ln)?|os\.(Un)?Setenv). is not checked
      - linters: revive
        path: _test\.go
        text: 'dot-imports: should not use dot imports' # dot imports OK for tests
      - linters: revive
        path: util/
        text: 'var-naming: avoid meaningless package names' # util package is OK
      - linters: unused
        text: 'field _struct is unused' # we use _struct field tags for msgp/json encoding settings
      - linters: revive
        text: '^unused-parameter: parameter'
      - linters: revive
        text: '^package-comments: should have a package comment'
      - linters: revive
        text: '^unexported-return: exported func .* returns unexported type .*, which can be annoying'
      - linters: revive
        text: '^redefines-builtin-id: redefinition of the built-in (func|type)'
      - linters: revive
        text: '^var-declaration: should omit type .* from declaration of var .*; it will be inferred from the right-hand side'
      - linters: revive
        text: '^var-declaration: should drop .* from declaration of var .*; it is the zero value'
      - linters: revive
        text: '^empty-block: this block is empty, you can remove it'
      - linters: revive
        text: '^superfluous-else: if block ends with .* so drop this else and outdent its block'
      # Comment this block out for testing linters
      - linters:
          - errcheck
          - govet
          - ineffassign
          - misspell
          - revive
          - unused
        path: test/linttest/lintissues\.go

issues:
  # Work our way back over time to be clean against all these
  # checkers.  If you'd like to contribute, raise the number after ~,
  # run the linter and dig in.
  new-from-rev: eb019291beed556ec6ac1ceb4a15114ce4df0c57~25

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0
severity:
  default: error

formatters:
  enable:
    - gofmt
  exclusions:
    generated: lax
    paths:
      - test/linttest/lintissues\.go
