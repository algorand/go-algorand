package crypto

// Code generated by github.com/zeldovich/msgp DO NOT EDIT.

import (
	_ "runtime/cgo"
	_ "unsafe"

	"github.com/zeldovich/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *VRFSecrets) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "PK"
	o = append(o, 0x82, 0xa2, 0x50, 0x4b)
	o = msgp.AppendArrayHeader(o, uint32(32))
	for za0001 := range z.PK {
		o = msgp.AppendUint8(o, z.PK[za0001])
	}
	// string "SK"
	o = append(o, 0xa2, 0x53, 0x4b)
	o = msgp.AppendArrayHeader(o, uint32(64))
	for za0002 := range z.SK {
		o = msgp.AppendUint8(o, z.SK[za0002])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *VRFSecrets) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "PK":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PK")
				return
			}
			if zb0002 != uint32(32) {
				err = msgp.ArrayError{Wanted: uint32(32), Got: zb0002}
				return
			}
			for za0001 := range z.PK {
				z.PK[za0001], bts, err = msgp.ReadUint8Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PK", za0001)
					return
				}
			}
		case "SK":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SK")
				return
			}
			if zb0003 != uint32(64) {
				err = msgp.ArrayError{Wanted: uint32(64), Got: zb0003}
				return
			}
			for za0002 := range z.SK {
				z.SK[za0002], bts, err = msgp.ReadUint8Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SK", za0002)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *VRFSecrets) Msgsize() (s int) {
	s = 1 + 3 + msgp.ArrayHeaderSize + (32 * (msgp.Uint8Size)) + 3 + msgp.ArrayHeaderSize + (64 * (msgp.Uint8Size))
	return
}

// MsgIsZero returns whether this is a zero value
func (z *VRFSecrets) MsgIsZero() bool {
	return ((z.PK[0] == 0) && (z.PK[1] == 0) && (z.PK[2] == 0) && (z.PK[3] == 0) && (z.PK[4] == 0) && (z.PK[5] == 0) && (z.PK[6] == 0) && (z.PK[7] == 0) && (z.PK[8] == 0) && (z.PK[9] == 0) && (z.PK[10] == 0) && (z.PK[11] == 0) && (z.PK[12] == 0) && (z.PK[13] == 0) && (z.PK[14] == 0) && (z.PK[15] == 0) && (z.PK[16] == 0) && (z.PK[17] == 0) && (z.PK[18] == 0) && (z.PK[19] == 0) && (z.PK[20] == 0) && (z.PK[21] == 0) && (z.PK[22] == 0) && (z.PK[23] == 0) && (z.PK[24] == 0) && (z.PK[25] == 0) && (z.PK[26] == 0) && (z.PK[27] == 0) && (z.PK[28] == 0) && (z.PK[29] == 0) && (z.PK[30] == 0) && (z.PK[31] == 0)) && ((z.SK[0] == 0) && (z.SK[1] == 0) && (z.SK[2] == 0) && (z.SK[3] == 0) && (z.SK[4] == 0) && (z.SK[5] == 0) && (z.SK[6] == 0) && (z.SK[7] == 0) && (z.SK[8] == 0) && (z.SK[9] == 0) && (z.SK[10] == 0) && (z.SK[11] == 0) && (z.SK[12] == 0) && (z.SK[13] == 0) && (z.SK[14] == 0) && (z.SK[15] == 0) && (z.SK[16] == 0) && (z.SK[17] == 0) && (z.SK[18] == 0) && (z.SK[19] == 0) && (z.SK[20] == 0) && (z.SK[21] == 0) && (z.SK[22] == 0) && (z.SK[23] == 0) && (z.SK[24] == 0) && (z.SK[25] == 0) && (z.SK[26] == 0) && (z.SK[27] == 0) && (z.SK[28] == 0) && (z.SK[29] == 0) && (z.SK[30] == 0) && (z.SK[31] == 0) && (z.SK[32] == 0) && (z.SK[33] == 0) && (z.SK[34] == 0) && (z.SK[35] == 0) && (z.SK[36] == 0) && (z.SK[37] == 0) && (z.SK[38] == 0) && (z.SK[39] == 0) && (z.SK[40] == 0) && (z.SK[41] == 0) && (z.SK[42] == 0) && (z.SK[43] == 0) && (z.SK[44] == 0) && (z.SK[45] == 0) && (z.SK[46] == 0) && (z.SK[47] == 0) && (z.SK[48] == 0) && (z.SK[49] == 0) && (z.SK[50] == 0) && (z.SK[51] == 0) && (z.SK[52] == 0) && (z.SK[53] == 0) && (z.SK[54] == 0) && (z.SK[55] == 0) && (z.SK[56] == 0) && (z.SK[57] == 0) && (z.SK[58] == 0) && (z.SK[59] == 0) && (z.SK[60] == 0) && (z.SK[61] == 0) && (z.SK[62] == 0) && (z.SK[63] == 0))
}

// MarshalMsg implements msgp.Marshaler
func (z *VrfOutput) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(64))
	for za0001 := range z {
		o = msgp.AppendUint8(o, z[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *VrfOutput) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != uint32(64) {
		err = msgp.ArrayError{Wanted: uint32(64), Got: zb0001}
		return
	}
	for za0001 := range z {
		z[za0001], bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, za0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *VrfOutput) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize + (64 * (msgp.Uint8Size))
	return
}

// MsgIsZero returns whether this is a zero value
func (z *VrfOutput) MsgIsZero() bool {
	return (z[0] == 0) && (z[1] == 0) && (z[2] == 0) && (z[3] == 0) && (z[4] == 0) && (z[5] == 0) && (z[6] == 0) && (z[7] == 0) && (z[8] == 0) && (z[9] == 0) && (z[10] == 0) && (z[11] == 0) && (z[12] == 0) && (z[13] == 0) && (z[14] == 0) && (z[15] == 0) && (z[16] == 0) && (z[17] == 0) && (z[18] == 0) && (z[19] == 0) && (z[20] == 0) && (z[21] == 0) && (z[22] == 0) && (z[23] == 0) && (z[24] == 0) && (z[25] == 0) && (z[26] == 0) && (z[27] == 0) && (z[28] == 0) && (z[29] == 0) && (z[30] == 0) && (z[31] == 0) && (z[32] == 0) && (z[33] == 0) && (z[34] == 0) && (z[35] == 0) && (z[36] == 0) && (z[37] == 0) && (z[38] == 0) && (z[39] == 0) && (z[40] == 0) && (z[41] == 0) && (z[42] == 0) && (z[43] == 0) && (z[44] == 0) && (z[45] == 0) && (z[46] == 0) && (z[47] == 0) && (z[48] == 0) && (z[49] == 0) && (z[50] == 0) && (z[51] == 0) && (z[52] == 0) && (z[53] == 0) && (z[54] == 0) && (z[55] == 0) && (z[56] == 0) && (z[57] == 0) && (z[58] == 0) && (z[59] == 0) && (z[60] == 0) && (z[61] == 0) && (z[62] == 0) && (z[63] == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *VrfPrivkey) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(64))
	for za0001 := range z {
		o = msgp.AppendUint8(o, z[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *VrfPrivkey) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != uint32(64) {
		err = msgp.ArrayError{Wanted: uint32(64), Got: zb0001}
		return
	}
	for za0001 := range z {
		z[za0001], bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, za0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *VrfPrivkey) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize + (64 * (msgp.Uint8Size))
	return
}

// MsgIsZero returns whether this is a zero value
func (z *VrfPrivkey) MsgIsZero() bool {
	return (z[0] == 0) && (z[1] == 0) && (z[2] == 0) && (z[3] == 0) && (z[4] == 0) && (z[5] == 0) && (z[6] == 0) && (z[7] == 0) && (z[8] == 0) && (z[9] == 0) && (z[10] == 0) && (z[11] == 0) && (z[12] == 0) && (z[13] == 0) && (z[14] == 0) && (z[15] == 0) && (z[16] == 0) && (z[17] == 0) && (z[18] == 0) && (z[19] == 0) && (z[20] == 0) && (z[21] == 0) && (z[22] == 0) && (z[23] == 0) && (z[24] == 0) && (z[25] == 0) && (z[26] == 0) && (z[27] == 0) && (z[28] == 0) && (z[29] == 0) && (z[30] == 0) && (z[31] == 0) && (z[32] == 0) && (z[33] == 0) && (z[34] == 0) && (z[35] == 0) && (z[36] == 0) && (z[37] == 0) && (z[38] == 0) && (z[39] == 0) && (z[40] == 0) && (z[41] == 0) && (z[42] == 0) && (z[43] == 0) && (z[44] == 0) && (z[45] == 0) && (z[46] == 0) && (z[47] == 0) && (z[48] == 0) && (z[49] == 0) && (z[50] == 0) && (z[51] == 0) && (z[52] == 0) && (z[53] == 0) && (z[54] == 0) && (z[55] == 0) && (z[56] == 0) && (z[57] == 0) && (z[58] == 0) && (z[59] == 0) && (z[60] == 0) && (z[61] == 0) && (z[62] == 0) && (z[63] == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *VrfProof) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(80))
	for za0001 := range z {
		o = msgp.AppendUint8(o, z[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *VrfProof) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != uint32(80) {
		err = msgp.ArrayError{Wanted: uint32(80), Got: zb0001}
		return
	}
	for za0001 := range z {
		z[za0001], bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, za0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *VrfProof) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize + (80 * (msgp.Uint8Size))
	return
}

// MsgIsZero returns whether this is a zero value
func (z *VrfProof) MsgIsZero() bool {
	return (z[0] == 0) && (z[1] == 0) && (z[2] == 0) && (z[3] == 0) && (z[4] == 0) && (z[5] == 0) && (z[6] == 0) && (z[7] == 0) && (z[8] == 0) && (z[9] == 0) && (z[10] == 0) && (z[11] == 0) && (z[12] == 0) && (z[13] == 0) && (z[14] == 0) && (z[15] == 0) && (z[16] == 0) && (z[17] == 0) && (z[18] == 0) && (z[19] == 0) && (z[20] == 0) && (z[21] == 0) && (z[22] == 0) && (z[23] == 0) && (z[24] == 0) && (z[25] == 0) && (z[26] == 0) && (z[27] == 0) && (z[28] == 0) && (z[29] == 0) && (z[30] == 0) && (z[31] == 0) && (z[32] == 0) && (z[33] == 0) && (z[34] == 0) && (z[35] == 0) && (z[36] == 0) && (z[37] == 0) && (z[38] == 0) && (z[39] == 0) && (z[40] == 0) && (z[41] == 0) && (z[42] == 0) && (z[43] == 0) && (z[44] == 0) && (z[45] == 0) && (z[46] == 0) && (z[47] == 0) && (z[48] == 0) && (z[49] == 0) && (z[50] == 0) && (z[51] == 0) && (z[52] == 0) && (z[53] == 0) && (z[54] == 0) && (z[55] == 0) && (z[56] == 0) && (z[57] == 0) && (z[58] == 0) && (z[59] == 0) && (z[60] == 0) && (z[61] == 0) && (z[62] == 0) && (z[63] == 0) && (z[64] == 0) && (z[65] == 0) && (z[66] == 0) && (z[67] == 0) && (z[68] == 0) && (z[69] == 0) && (z[70] == 0) && (z[71] == 0) && (z[72] == 0) && (z[73] == 0) && (z[74] == 0) && (z[75] == 0) && (z[76] == 0) && (z[77] == 0) && (z[78] == 0) && (z[79] == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *VrfPubkey) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(32))
	for za0001 := range z {
		o = msgp.AppendUint8(o, z[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *VrfPubkey) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != uint32(32) {
		err = msgp.ArrayError{Wanted: uint32(32), Got: zb0001}
		return
	}
	for za0001 := range z {
		z[za0001], bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, za0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *VrfPubkey) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize + (32 * (msgp.Uint8Size))
	return
}

// MsgIsZero returns whether this is a zero value
func (z *VrfPubkey) MsgIsZero() bool {
	return (z[0] == 0) && (z[1] == 0) && (z[2] == 0) && (z[3] == 0) && (z[4] == 0) && (z[5] == 0) && (z[6] == 0) && (z[7] == 0) && (z[8] == 0) && (z[9] == 0) && (z[10] == 0) && (z[11] == 0) && (z[12] == 0) && (z[13] == 0) && (z[14] == 0) && (z[15] == 0) && (z[16] == 0) && (z[17] == 0) && (z[18] == 0) && (z[19] == 0) && (z[20] == 0) && (z[21] == 0) && (z[22] == 0) && (z[23] == 0) && (z[24] == 0) && (z[25] == 0) && (z[26] == 0) && (z[27] == 0) && (z[28] == 0) && (z[29] == 0) && (z[30] == 0) && (z[31] == 0)
}
