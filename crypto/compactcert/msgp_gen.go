package compactcert

// Code generated by github.com/algorand/msgp DO NOT EDIT.

import (
<<<<<<< HEAD
=======
	"sort"

>>>>>>> origin/master
	"github.com/algorand/go-algorand/crypto"
	"github.com/algorand/msgp/msgp"
)

// The following msgp objects are implemented in this file:
// Cert
//   |-----> (*) MarshalMsg
//   |-----> (*) CanMarshalMsg
//   |-----> (*) UnmarshalMsg
//   |-----> (*) CanUnmarshalMsg
//   |-----> (*) Msgsize
//   |-----> (*) MsgIsZero
//
// CompactOneTimeSignature
//            |-----> (*) MarshalMsg
//            |-----> (*) CanMarshalMsg
//            |-----> (*) UnmarshalMsg
//            |-----> (*) CanUnmarshalMsg
//            |-----> (*) Msgsize
//            |-----> (*) MsgIsZero
//
// Participant
//      |-----> (*) MarshalMsg
//      |-----> (*) CanMarshalMsg
//      |-----> (*) UnmarshalMsg
//      |-----> (*) CanUnmarshalMsg
//      |-----> (*) Msgsize
//      |-----> (*) MsgIsZero
//
// Reveal
//    |-----> (*) MarshalMsg
//    |-----> (*) CanMarshalMsg
//    |-----> (*) UnmarshalMsg
//    |-----> (*) CanUnmarshalMsg
//    |-----> (*) Msgsize
//    |-----> (*) MsgIsZero
//
// sigslotCommit
//       |-----> (*) MarshalMsg
//       |-----> (*) CanMarshalMsg
//       |-----> (*) UnmarshalMsg
//       |-----> (*) CanUnmarshalMsg
//       |-----> (*) Msgsize
//       |-----> (*) MsgIsZero
//

// MarshalMsg implements msgp.Marshaler
func (z *Cert) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
<<<<<<< HEAD
	zb0004Len := uint32(5)
	var zb0004Mask uint8 /* 6 bits */
	if len((*z).PartProofs) == 0 {
		zb0004Len--
		zb0004Mask |= 0x1
	}
	if len((*z).SigProofs) == 0 {
		zb0004Len--
		zb0004Mask |= 0x2
	}
	if (*z).SigCommit.MsgIsZero() {
		zb0004Len--
		zb0004Mask |= 0x8
	}
	if len((*z).Reveals) == 0 {
		zb0004Len--
		zb0004Mask |= 0x10
	}
	if (*z).SignedWeight == 0 {
		zb0004Len--
		zb0004Mask |= 0x20
	}
	// variable map header, size zb0004Len
	o = append(o, 0x80|uint8(zb0004Len))
	if zb0004Len != 0 {
		if (zb0004Mask & 0x1) == 0 { // if not empty
=======
	zb0005Len := uint32(5)
	var zb0005Mask uint8 /* 6 bits */
	if len((*z).PartProofs) == 0 {
		zb0005Len--
		zb0005Mask |= 0x1
	}
	if len((*z).SigProofs) == 0 {
		zb0005Len--
		zb0005Mask |= 0x2
	}
	if (*z).SigCommit.MsgIsZero() {
		zb0005Len--
		zb0005Mask |= 0x8
	}
	if len((*z).Reveals) == 0 {
		zb0005Len--
		zb0005Mask |= 0x10
	}
	if (*z).SignedWeight == 0 {
		zb0005Len--
		zb0005Mask |= 0x20
	}
	// variable map header, size zb0005Len
	o = append(o, 0x80|uint8(zb0005Len))
	if zb0005Len != 0 {
		if (zb0005Mask & 0x1) == 0 { // if not empty
>>>>>>> origin/master
			// string "P"
			o = append(o, 0xa1, 0x50)
			if (*z).PartProofs == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).PartProofs)))
			}
			for zb0002 := range (*z).PartProofs {
				o, err = (*z).PartProofs[zb0002].MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "PartProofs", zb0002)
					return
				}
			}
		}
<<<<<<< HEAD
		if (zb0004Mask & 0x2) == 0 { // if not empty
=======
		if (zb0005Mask & 0x2) == 0 { // if not empty
>>>>>>> origin/master
			// string "S"
			o = append(o, 0xa1, 0x53)
			if (*z).SigProofs == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).SigProofs)))
			}
			for zb0001 := range (*z).SigProofs {
				o, err = (*z).SigProofs[zb0001].MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "SigProofs", zb0001)
					return
				}
			}
		}
<<<<<<< HEAD
		if (zb0004Mask & 0x8) == 0 { // if not empty
=======
		if (zb0005Mask & 0x8) == 0 { // if not empty
>>>>>>> origin/master
			// string "c"
			o = append(o, 0xa1, 0x63)
			o, err = (*z).SigCommit.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "SigCommit")
				return
			}
		}
<<<<<<< HEAD
		if (zb0004Mask & 0x10) == 0 { // if not empty
=======
		if (zb0005Mask & 0x10) == 0 { // if not empty
>>>>>>> origin/master
			// string "r"
			o = append(o, 0xa1, 0x72)
			if (*z).Reveals == nil {
				o = msgp.AppendNil(o)
			} else {
<<<<<<< HEAD
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Reveals)))
			}
			for zb0003 := range (*z).Reveals {
				o, err = (*z).Reveals[zb0003].MarshalMsg(o)
=======
				o = msgp.AppendMapHeader(o, uint32(len((*z).Reveals)))
			}
			zb0003_keys := make([]uint64, 0, len((*z).Reveals))
			for zb0003 := range (*z).Reveals {
				zb0003_keys = append(zb0003_keys, zb0003)
			}
			sort.Sort(SortUint64(zb0003_keys))
			for _, zb0003 := range zb0003_keys {
				zb0004 := (*z).Reveals[zb0003]
				_ = zb0004
				o = msgp.AppendUint64(o, zb0003)
				o, err = zb0004.MarshalMsg(o)
>>>>>>> origin/master
				if err != nil {
					err = msgp.WrapError(err, "Reveals", zb0003)
					return
				}
			}
		}
<<<<<<< HEAD
		if (zb0004Mask & 0x20) == 0 { // if not empty
=======
		if (zb0005Mask & 0x20) == 0 { // if not empty
>>>>>>> origin/master
			// string "w"
			o = append(o, 0xa1, 0x77)
			o = msgp.AppendUint64(o, (*z).SignedWeight)
		}
	}
	return
}

func (_ *Cert) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*Cert)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Cert) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
<<<<<<< HEAD
	var zb0004 int
	var zb0005 bool
	zb0004, zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0004, zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
=======
	var zb0005 int
	var zb0006 bool
	zb0005, zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0005, zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
>>>>>>> origin/master
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
<<<<<<< HEAD
		if zb0004 > 0 {
			zb0004--
=======
		if zb0005 > 0 {
			zb0005--
>>>>>>> origin/master
			bts, err = (*z).SigCommit.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SigCommit")
				return
			}
		}
<<<<<<< HEAD
		if zb0004 > 0 {
			zb0004--
=======
		if zb0005 > 0 {
			zb0005--
>>>>>>> origin/master
			(*z).SignedWeight, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SignedWeight")
				return
			}
		}
<<<<<<< HEAD
		if zb0004 > 0 {
			zb0004--
			var zb0006 int
			var zb0007 bool
			zb0006, zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
=======
		if zb0005 > 0 {
			zb0005--
			var zb0007 int
			var zb0008 bool
			zb0007, zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
>>>>>>> origin/master
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SigProofs")
				return
			}
<<<<<<< HEAD
			if zb0006 > maxProofDigests {
				err = msgp.ErrOverflow(uint64(zb0006), uint64(maxProofDigests))
				err = msgp.WrapError(err, "struct-from-array", "SigProofs")
				return
			}
			if zb0007 {
				(*z).SigProofs = nil
			} else if (*z).SigProofs != nil && cap((*z).SigProofs) >= zb0006 {
				(*z).SigProofs = ((*z).SigProofs)[:zb0006]
			} else {
				(*z).SigProofs = make([]crypto.Digest, zb0006)
=======
			if zb0007 > maxProofDigests {
				err = msgp.ErrOverflow(uint64(zb0007), uint64(maxProofDigests))
				err = msgp.WrapError(err, "struct-from-array", "SigProofs")
				return
			}
			if zb0008 {
				(*z).SigProofs = nil
			} else if (*z).SigProofs != nil && cap((*z).SigProofs) >= zb0007 {
				(*z).SigProofs = ((*z).SigProofs)[:zb0007]
			} else {
				(*z).SigProofs = make([]crypto.Digest, zb0007)
>>>>>>> origin/master
			}
			for zb0001 := range (*z).SigProofs {
				bts, err = (*z).SigProofs[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "SigProofs", zb0001)
					return
				}
			}
		}
<<<<<<< HEAD
		if zb0004 > 0 {
			zb0004--
			var zb0008 int
			var zb0009 bool
			zb0008, zb0009, bts, err = msgp.ReadArrayHeaderBytes(bts)
=======
		if zb0005 > 0 {
			zb0005--
			var zb0009 int
			var zb0010 bool
			zb0009, zb0010, bts, err = msgp.ReadArrayHeaderBytes(bts)
>>>>>>> origin/master
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "PartProofs")
				return
			}
<<<<<<< HEAD
			if zb0008 > maxProofDigests {
				err = msgp.ErrOverflow(uint64(zb0008), uint64(maxProofDigests))
				err = msgp.WrapError(err, "struct-from-array", "PartProofs")
				return
			}
			if zb0009 {
				(*z).PartProofs = nil
			} else if (*z).PartProofs != nil && cap((*z).PartProofs) >= zb0008 {
				(*z).PartProofs = ((*z).PartProofs)[:zb0008]
			} else {
				(*z).PartProofs = make([]crypto.Digest, zb0008)
=======
			if zb0009 > maxProofDigests {
				err = msgp.ErrOverflow(uint64(zb0009), uint64(maxProofDigests))
				err = msgp.WrapError(err, "struct-from-array", "PartProofs")
				return
			}
			if zb0010 {
				(*z).PartProofs = nil
			} else if (*z).PartProofs != nil && cap((*z).PartProofs) >= zb0009 {
				(*z).PartProofs = ((*z).PartProofs)[:zb0009]
			} else {
				(*z).PartProofs = make([]crypto.Digest, zb0009)
>>>>>>> origin/master
			}
			for zb0002 := range (*z).PartProofs {
				bts, err = (*z).PartProofs[zb0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "PartProofs", zb0002)
					return
				}
			}
		}
<<<<<<< HEAD
		if zb0004 > 0 {
			zb0004--
			var zb0010 int
			var zb0011 bool
			zb0010, zb0011, bts, err = msgp.ReadArrayHeaderBytes(bts)
=======
		if zb0005 > 0 {
			zb0005--
			var zb0011 int
			var zb0012 bool
			zb0011, zb0012, bts, err = msgp.ReadMapHeaderBytes(bts)
>>>>>>> origin/master
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Reveals")
				return
			}
<<<<<<< HEAD
			if zb0010 > maxReveals {
				err = msgp.ErrOverflow(uint64(zb0010), uint64(maxReveals))
				err = msgp.WrapError(err, "struct-from-array", "Reveals")
				return
			}
			if zb0011 {
				(*z).Reveals = nil
			} else if (*z).Reveals != nil && cap((*z).Reveals) >= zb0010 {
				(*z).Reveals = ((*z).Reveals)[:zb0010]
			} else {
				(*z).Reveals = make([]Reveal, zb0010)
			}
			for zb0003 := range (*z).Reveals {
				bts, err = (*z).Reveals[zb0003].UnmarshalMsg(bts)
=======
			if zb0011 > maxReveals {
				err = msgp.ErrOverflow(uint64(zb0011), uint64(maxReveals))
				err = msgp.WrapError(err, "struct-from-array", "Reveals")
				return
			}
			if zb0012 {
				(*z).Reveals = nil
			} else if (*z).Reveals == nil {
				(*z).Reveals = make(map[uint64]Reveal, zb0011)
			}
			for zb0011 > 0 {
				var zb0003 uint64
				var zb0004 Reveal
				zb0011--
				zb0003, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Reveals")
					return
				}
				bts, err = zb0004.UnmarshalMsg(bts)
>>>>>>> origin/master
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Reveals", zb0003)
					return
				}
<<<<<<< HEAD
			}
		}
		if zb0004 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0004)
=======
				(*z).Reveals[zb0003] = zb0004
			}
		}
		if zb0005 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0005)
>>>>>>> origin/master
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
<<<<<<< HEAD
		if zb0005 {
			(*z) = Cert{}
		}
		for zb0004 > 0 {
			zb0004--
=======
		if zb0006 {
			(*z) = Cert{}
		}
		for zb0005 > 0 {
			zb0005--
>>>>>>> origin/master
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "c":
				bts, err = (*z).SigCommit.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "SigCommit")
					return
				}
			case "w":
				(*z).SignedWeight, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SignedWeight")
					return
				}
			case "S":
<<<<<<< HEAD
				var zb0012 int
				var zb0013 bool
				zb0012, zb0013, bts, err = msgp.ReadArrayHeaderBytes(bts)
=======
				var zb0013 int
				var zb0014 bool
				zb0013, zb0014, bts, err = msgp.ReadArrayHeaderBytes(bts)
>>>>>>> origin/master
				if err != nil {
					err = msgp.WrapError(err, "SigProofs")
					return
				}
<<<<<<< HEAD
				if zb0012 > maxProofDigests {
					err = msgp.ErrOverflow(uint64(zb0012), uint64(maxProofDigests))
					err = msgp.WrapError(err, "SigProofs")
					return
				}
				if zb0013 {
					(*z).SigProofs = nil
				} else if (*z).SigProofs != nil && cap((*z).SigProofs) >= zb0012 {
					(*z).SigProofs = ((*z).SigProofs)[:zb0012]
				} else {
					(*z).SigProofs = make([]crypto.Digest, zb0012)
=======
				if zb0013 > maxProofDigests {
					err = msgp.ErrOverflow(uint64(zb0013), uint64(maxProofDigests))
					err = msgp.WrapError(err, "SigProofs")
					return
				}
				if zb0014 {
					(*z).SigProofs = nil
				} else if (*z).SigProofs != nil && cap((*z).SigProofs) >= zb0013 {
					(*z).SigProofs = ((*z).SigProofs)[:zb0013]
				} else {
					(*z).SigProofs = make([]crypto.Digest, zb0013)
>>>>>>> origin/master
				}
				for zb0001 := range (*z).SigProofs {
					bts, err = (*z).SigProofs[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "SigProofs", zb0001)
						return
					}
				}
			case "P":
<<<<<<< HEAD
				var zb0014 int
				var zb0015 bool
				zb0014, zb0015, bts, err = msgp.ReadArrayHeaderBytes(bts)
=======
				var zb0015 int
				var zb0016 bool
				zb0015, zb0016, bts, err = msgp.ReadArrayHeaderBytes(bts)
>>>>>>> origin/master
				if err != nil {
					err = msgp.WrapError(err, "PartProofs")
					return
				}
<<<<<<< HEAD
				if zb0014 > maxProofDigests {
					err = msgp.ErrOverflow(uint64(zb0014), uint64(maxProofDigests))
					err = msgp.WrapError(err, "PartProofs")
					return
				}
				if zb0015 {
					(*z).PartProofs = nil
				} else if (*z).PartProofs != nil && cap((*z).PartProofs) >= zb0014 {
					(*z).PartProofs = ((*z).PartProofs)[:zb0014]
				} else {
					(*z).PartProofs = make([]crypto.Digest, zb0014)
=======
				if zb0015 > maxProofDigests {
					err = msgp.ErrOverflow(uint64(zb0015), uint64(maxProofDigests))
					err = msgp.WrapError(err, "PartProofs")
					return
				}
				if zb0016 {
					(*z).PartProofs = nil
				} else if (*z).PartProofs != nil && cap((*z).PartProofs) >= zb0015 {
					(*z).PartProofs = ((*z).PartProofs)[:zb0015]
				} else {
					(*z).PartProofs = make([]crypto.Digest, zb0015)
>>>>>>> origin/master
				}
				for zb0002 := range (*z).PartProofs {
					bts, err = (*z).PartProofs[zb0002].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "PartProofs", zb0002)
						return
					}
				}
			case "r":
<<<<<<< HEAD
				var zb0016 int
				var zb0017 bool
				zb0016, zb0017, bts, err = msgp.ReadArrayHeaderBytes(bts)
=======
				var zb0017 int
				var zb0018 bool
				zb0017, zb0018, bts, err = msgp.ReadMapHeaderBytes(bts)
>>>>>>> origin/master
				if err != nil {
					err = msgp.WrapError(err, "Reveals")
					return
				}
<<<<<<< HEAD
				if zb0016 > maxReveals {
					err = msgp.ErrOverflow(uint64(zb0016), uint64(maxReveals))
					err = msgp.WrapError(err, "Reveals")
					return
				}
				if zb0017 {
					(*z).Reveals = nil
				} else if (*z).Reveals != nil && cap((*z).Reveals) >= zb0016 {
					(*z).Reveals = ((*z).Reveals)[:zb0016]
				} else {
					(*z).Reveals = make([]Reveal, zb0016)
				}
				for zb0003 := range (*z).Reveals {
					bts, err = (*z).Reveals[zb0003].UnmarshalMsg(bts)
=======
				if zb0017 > maxReveals {
					err = msgp.ErrOverflow(uint64(zb0017), uint64(maxReveals))
					err = msgp.WrapError(err, "Reveals")
					return
				}
				if zb0018 {
					(*z).Reveals = nil
				} else if (*z).Reveals == nil {
					(*z).Reveals = make(map[uint64]Reveal, zb0017)
				}
				for zb0017 > 0 {
					var zb0003 uint64
					var zb0004 Reveal
					zb0017--
					zb0003, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Reveals")
						return
					}
					bts, err = zb0004.UnmarshalMsg(bts)
>>>>>>> origin/master
					if err != nil {
						err = msgp.WrapError(err, "Reveals", zb0003)
						return
					}
<<<<<<< HEAD
=======
					(*z).Reveals[zb0003] = zb0004
>>>>>>> origin/master
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *Cert) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*Cert)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Cert) Msgsize() (s int) {
	s = 1 + 2 + (*z).SigCommit.Msgsize() + 2 + msgp.Uint64Size + 2 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).SigProofs {
		s += (*z).SigProofs[zb0001].Msgsize()
	}
	s += 2 + msgp.ArrayHeaderSize
	for zb0002 := range (*z).PartProofs {
		s += (*z).PartProofs[zb0002].Msgsize()
	}
<<<<<<< HEAD
	s += 2 + msgp.ArrayHeaderSize
	for zb0003 := range (*z).Reveals {
		s += (*z).Reveals[zb0003].Msgsize()
=======
	s += 2 + msgp.MapHeaderSize
	if (*z).Reveals != nil {
		for zb0003, zb0004 := range (*z).Reveals {
			_ = zb0003
			_ = zb0004
			s += 0 + msgp.Uint64Size + zb0004.Msgsize()
		}
>>>>>>> origin/master
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z *Cert) MsgIsZero() bool {
	return ((*z).SigCommit.MsgIsZero()) && ((*z).SignedWeight == 0) && (len((*z).SigProofs) == 0) && (len((*z).PartProofs) == 0) && (len((*z).Reveals) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *CompactOneTimeSignature) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(6)
	var zb0001Mask uint8 /* 8 bits */
	if (*z).OneTimeSignature.PK.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if (*z).OneTimeSignature.PK1Sig.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if (*z).OneTimeSignature.PK2.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if (*z).OneTimeSignature.PK2Sig.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if (*z).OneTimeSignature.PKSigOld.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if (*z).OneTimeSignature.Sig.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "p"
			o = append(o, 0xa1, 0x70)
			o, err = (*z).OneTimeSignature.PK.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "PK")
				return
			}
		}
		if (zb0001Mask & 0x8) == 0 { // if not empty
			// string "p1s"
			o = append(o, 0xa3, 0x70, 0x31, 0x73)
			o, err = (*z).OneTimeSignature.PK1Sig.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "PK1Sig")
				return
			}
		}
		if (zb0001Mask & 0x10) == 0 { // if not empty
			// string "p2"
			o = append(o, 0xa2, 0x70, 0x32)
			o, err = (*z).OneTimeSignature.PK2.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "PK2")
				return
			}
		}
		if (zb0001Mask & 0x20) == 0 { // if not empty
			// string "p2s"
			o = append(o, 0xa3, 0x70, 0x32, 0x73)
			o, err = (*z).OneTimeSignature.PK2Sig.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "PK2Sig")
				return
			}
		}
		if (zb0001Mask & 0x40) == 0 { // if not empty
			// string "ps"
			o = append(o, 0xa2, 0x70, 0x73)
			o, err = (*z).OneTimeSignature.PKSigOld.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "PKSigOld")
				return
			}
		}
		if (zb0001Mask & 0x80) == 0 { // if not empty
			// string "s"
			o = append(o, 0xa1, 0x73)
			o, err = (*z).OneTimeSignature.Sig.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Sig")
				return
			}
		}
	}
	return
}

func (_ *CompactOneTimeSignature) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*CompactOneTimeSignature)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CompactOneTimeSignature) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).OneTimeSignature.Sig.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Sig")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).OneTimeSignature.PK.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "PK")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).OneTimeSignature.PKSigOld.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "PKSigOld")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).OneTimeSignature.PK2.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "PK2")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).OneTimeSignature.PK1Sig.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "PK1Sig")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).OneTimeSignature.PK2Sig.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "PK2Sig")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = CompactOneTimeSignature{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "s":
				bts, err = (*z).OneTimeSignature.Sig.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sig")
					return
				}
			case "p":
				bts, err = (*z).OneTimeSignature.PK.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "PK")
					return
				}
			case "ps":
				bts, err = (*z).OneTimeSignature.PKSigOld.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "PKSigOld")
					return
				}
			case "p2":
				bts, err = (*z).OneTimeSignature.PK2.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "PK2")
					return
				}
			case "p1s":
				bts, err = (*z).OneTimeSignature.PK1Sig.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "PK1Sig")
					return
				}
			case "p2s":
				bts, err = (*z).OneTimeSignature.PK2Sig.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "PK2Sig")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *CompactOneTimeSignature) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*CompactOneTimeSignature)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CompactOneTimeSignature) Msgsize() (s int) {
	s = 1 + 2 + (*z).OneTimeSignature.Sig.Msgsize() + 2 + (*z).OneTimeSignature.PK.Msgsize() + 3 + (*z).OneTimeSignature.PKSigOld.Msgsize() + 3 + (*z).OneTimeSignature.PK2.Msgsize() + 4 + (*z).OneTimeSignature.PK1Sig.Msgsize() + 4 + (*z).OneTimeSignature.PK2Sig.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *CompactOneTimeSignature) MsgIsZero() bool {
	return ((*z).OneTimeSignature.Sig.MsgIsZero()) && ((*z).OneTimeSignature.PK.MsgIsZero()) && ((*z).OneTimeSignature.PKSigOld.MsgIsZero()) && ((*z).OneTimeSignature.PK2.MsgIsZero()) && ((*z).OneTimeSignature.PK1Sig.MsgIsZero()) && ((*z).OneTimeSignature.PK2Sig.MsgIsZero())
}

// MarshalMsg implements msgp.Marshaler
func (z *Participant) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(3)
	var zb0001Mask uint8 /* 4 bits */
	if (*z).KeyDilution == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).PK.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if (*z).Weight == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "d"
			o = append(o, 0xa1, 0x64)
			o = msgp.AppendUint64(o, (*z).KeyDilution)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "p"
			o = append(o, 0xa1, 0x70)
			o, err = (*z).PK.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "PK")
				return
			}
		}
		if (zb0001Mask & 0x8) == 0 { // if not empty
			// string "w"
			o = append(o, 0xa1, 0x77)
			o = msgp.AppendUint64(o, (*z).Weight)
		}
	}
	return
}

func (_ *Participant) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*Participant)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Participant) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).PK.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "PK")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).Weight, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Weight")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).KeyDilution, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "KeyDilution")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = Participant{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "p":
				bts, err = (*z).PK.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "PK")
					return
				}
			case "w":
				(*z).Weight, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Weight")
					return
				}
			case "d":
				(*z).KeyDilution, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "KeyDilution")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *Participant) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*Participant)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Participant) Msgsize() (s int) {
	s = 1 + 2 + (*z).PK.Msgsize() + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z *Participant) MsgIsZero() bool {
	return ((*z).PK.MsgIsZero()) && ((*z).Weight == 0) && ((*z).KeyDilution == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *Reveal) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
<<<<<<< HEAD
	zb0001Len := uint32(3)
	var zb0001Mask uint8 /* 4 bits */
	if (*z).Pos == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).Part.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if ((*z).SigSlot.Sig.MsgIsZero()) && ((*z).SigSlot.L == 0) {
		zb0001Len--
		zb0001Mask |= 0x8
=======
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 3 bits */
	if (*z).Part.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if ((*z).SigSlot.Sig.MsgIsZero()) && ((*z).SigSlot.L == 0) {
		zb0001Len--
		zb0001Mask |= 0x4
>>>>>>> origin/master
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
<<<<<<< HEAD
			// string "i"
			o = append(o, 0xa1, 0x69)
			o = msgp.AppendUint64(o, (*z).Pos)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
=======
>>>>>>> origin/master
			// string "p"
			o = append(o, 0xa1, 0x70)
			o, err = (*z).Part.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Part")
				return
			}
		}
<<<<<<< HEAD
		if (zb0001Mask & 0x8) == 0 { // if not empty
=======
		if (zb0001Mask & 0x4) == 0 { // if not empty
>>>>>>> origin/master
			// string "s"
			o = append(o, 0xa1, 0x73)
			// omitempty: check for empty values
			zb0002Len := uint32(2)
			var zb0002Mask uint8 /* 3 bits */
			if (*z).SigSlot.L == 0 {
				zb0002Len--
				zb0002Mask |= 0x2
			}
			if (*z).SigSlot.Sig.MsgIsZero() {
				zb0002Len--
				zb0002Mask |= 0x4
			}
			// variable map header, size zb0002Len
			o = append(o, 0x80|uint8(zb0002Len))
			if (zb0002Mask & 0x2) == 0 { // if not empty
				// string "l"
				o = append(o, 0xa1, 0x6c)
				o = msgp.AppendUint64(o, (*z).SigSlot.L)
			}
			if (zb0002Mask & 0x4) == 0 { // if not empty
				// string "s"
				o = append(o, 0xa1, 0x73)
				o, err = (*z).SigSlot.Sig.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "SigSlot", "Sig")
					return
				}
			}
		}
	}
	return
}

func (_ *Reveal) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*Reveal)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Reveal) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
<<<<<<< HEAD
			(*z).Pos, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Pos")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
=======
>>>>>>> origin/master
			var zb0003 int
			var zb0004 bool
			zb0003, zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if _, ok := err.(msgp.TypeError); ok {
				zb0003, zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "SigSlot")
					return
				}
				if zb0003 > 0 {
					zb0003--
					bts, err = (*z).SigSlot.Sig.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "SigSlot", "struct-from-array", "Sig")
						return
					}
				}
				if zb0003 > 0 {
					zb0003--
					(*z).SigSlot.L, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "SigSlot", "struct-from-array", "L")
						return
					}
				}
				if zb0003 > 0 {
					err = msgp.ErrTooManyArrayFields(zb0003)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "SigSlot", "struct-from-array")
						return
					}
				}
			} else {
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "SigSlot")
					return
				}
				if zb0004 {
					(*z).SigSlot = sigslotCommit{}
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "SigSlot")
						return
					}
					switch string(field) {
					case "s":
						bts, err = (*z).SigSlot.Sig.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "SigSlot", "Sig")
							return
						}
					case "l":
						(*z).SigSlot.L, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "SigSlot", "L")
							return
						}
					default:
						err = msgp.ErrNoField(string(field))
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "SigSlot")
							return
						}
					}
				}
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Part.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Part")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = Reveal{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
<<<<<<< HEAD
			case "i":
				(*z).Pos, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Pos")
					return
				}
=======
>>>>>>> origin/master
			case "s":
				var zb0005 int
				var zb0006 bool
				zb0005, zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
				if _, ok := err.(msgp.TypeError); ok {
					zb0005, zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "SigSlot")
						return
					}
					if zb0005 > 0 {
						zb0005--
						bts, err = (*z).SigSlot.Sig.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "SigSlot", "struct-from-array", "Sig")
							return
						}
					}
					if zb0005 > 0 {
						zb0005--
						(*z).SigSlot.L, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "SigSlot", "struct-from-array", "L")
							return
						}
					}
					if zb0005 > 0 {
						err = msgp.ErrTooManyArrayFields(zb0005)
						if err != nil {
							err = msgp.WrapError(err, "SigSlot", "struct-from-array")
							return
						}
					}
				} else {
					if err != nil {
						err = msgp.WrapError(err, "SigSlot")
						return
					}
					if zb0006 {
						(*z).SigSlot = sigslotCommit{}
					}
					for zb0005 > 0 {
						zb0005--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "SigSlot")
							return
						}
						switch string(field) {
						case "s":
							bts, err = (*z).SigSlot.Sig.UnmarshalMsg(bts)
							if err != nil {
								err = msgp.WrapError(err, "SigSlot", "Sig")
								return
							}
						case "l":
							(*z).SigSlot.L, bts, err = msgp.ReadUint64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "SigSlot", "L")
								return
							}
						default:
							err = msgp.ErrNoField(string(field))
							if err != nil {
								err = msgp.WrapError(err, "SigSlot")
								return
							}
						}
					}
				}
			case "p":
				bts, err = (*z).Part.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Part")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *Reveal) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*Reveal)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Reveal) Msgsize() (s int) {
<<<<<<< HEAD
	s = 1 + 2 + msgp.Uint64Size + 2 + 1 + 2 + (*z).SigSlot.Sig.Msgsize() + 2 + msgp.Uint64Size + 2 + (*z).Part.Msgsize()
=======
	s = 1 + 2 + 1 + 2 + (*z).SigSlot.Sig.Msgsize() + 2 + msgp.Uint64Size + 2 + (*z).Part.Msgsize()
>>>>>>> origin/master
	return
}

// MsgIsZero returns whether this is a zero value
func (z *Reveal) MsgIsZero() bool {
<<<<<<< HEAD
	return ((*z).Pos == 0) && (((*z).SigSlot.Sig.MsgIsZero()) && ((*z).SigSlot.L == 0)) && ((*z).Part.MsgIsZero())
=======
	return (((*z).SigSlot.Sig.MsgIsZero()) && ((*z).SigSlot.L == 0)) && ((*z).Part.MsgIsZero())
>>>>>>> origin/master
}

// MarshalMsg implements msgp.Marshaler
func (z *sigslotCommit) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 3 bits */
	if (*z).L == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).Sig.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "l"
			o = append(o, 0xa1, 0x6c)
			o = msgp.AppendUint64(o, (*z).L)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "s"
			o = append(o, 0xa1, 0x73)
			o, err = (*z).Sig.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Sig")
				return
			}
		}
	}
	return
}

func (_ *sigslotCommit) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*sigslotCommit)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *sigslotCommit) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Sig.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Sig")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).L, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "L")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = sigslotCommit{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "s":
				bts, err = (*z).Sig.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sig")
					return
				}
			case "l":
				(*z).L, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "L")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *sigslotCommit) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*sigslotCommit)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *sigslotCommit) Msgsize() (s int) {
	s = 1 + 2 + (*z).Sig.Msgsize() + 2 + msgp.Uint64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z *sigslotCommit) MsgIsZero() bool {
	return ((*z).Sig.MsgIsZero()) && ((*z).L == 0)
}
