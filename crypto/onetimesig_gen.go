package crypto

// Code generated by github.com/zeldovich/msgp DO NOT EDIT.

import (
	"github.com/zeldovich/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *OneTimeSignature) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "p"
	o = append(o, 0x86, 0xa1, 0x70)
	o, err = z.PK.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "PK")
		return
	}
	// string "p1s"
	o = append(o, 0xa3, 0x70, 0x31, 0x73)
	o, err = z.PK1Sig.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "PK1Sig")
		return
	}
	// string "p2"
	o = append(o, 0xa2, 0x70, 0x32)
	o, err = z.PK2.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "PK2")
		return
	}
	// string "p2s"
	o = append(o, 0xa3, 0x70, 0x32, 0x73)
	o, err = z.PK2Sig.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "PK2Sig")
		return
	}
	// string "ps"
	o = append(o, 0xa2, 0x70, 0x73)
	o, err = z.PKSigOld.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "PKSigOld")
		return
	}
	// string "s"
	o = append(o, 0xa1, 0x73)
	o, err = z.Sig.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Sig")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OneTimeSignature) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "s":
			bts, err = z.Sig.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sig")
				return
			}
		case "p":
			bts, err = z.PK.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "PK")
				return
			}
		case "ps":
			bts, err = z.PKSigOld.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "PKSigOld")
				return
			}
		case "p2":
			bts, err = z.PK2.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "PK2")
				return
			}
		case "p1s":
			bts, err = z.PK1Sig.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "PK1Sig")
				return
			}
		case "p2s":
			bts, err = z.PK2Sig.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "PK2Sig")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *OneTimeSignature) Msgsize() (s int) {
	s = 1 + 2 + z.Sig.Msgsize() + 2 + z.PK.Msgsize() + 3 + z.PKSigOld.Msgsize() + 3 + z.PK2.Msgsize() + 4 + z.PK1Sig.Msgsize() + 4 + z.PK2Sig.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *OneTimeSignature) MsgIsZero() bool {
	return (z.Sig.MsgIsZero()) && (z.PK.MsgIsZero()) && (z.PKSigOld.MsgIsZero()) && (z.PK2.MsgIsZero()) && (z.PK1Sig.MsgIsZero()) && (z.PK2Sig.MsgIsZero())
}

// MarshalMsg implements msgp.Marshaler
func (z OneTimeSignatureIdentifier) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Batch"
	o = append(o, 0x82, 0xa5, 0x42, 0x61, 0x74, 0x63, 0x68)
	o = msgp.AppendUint64(o, z.Batch)
	// string "Offset"
	o = append(o, 0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	o = msgp.AppendUint64(o, z.Offset)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OneTimeSignatureIdentifier) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Batch":
			z.Batch, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Batch")
				return
			}
		case "Offset":
			z.Offset, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Offset")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z OneTimeSignatureIdentifier) Msgsize() (s int) {
	s = 1 + 6 + msgp.Uint64Size + 7 + msgp.Uint64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z OneTimeSignatureIdentifier) MsgIsZero() bool { return (z.Batch == 0) && (z.Offset == 0) }

// MarshalMsg implements msgp.Marshaler
func (z *OneTimeSignatureSecrets) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "First"
	o = append(o, 0x87, 0xa5, 0x46, 0x69, 0x72, 0x73, 0x74)
	o = msgp.AppendUint64(o, z.FirstBatch)
	// string "OneTimeSignatureVerifier"
	o = append(o, 0xb8, 0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72)
	o, err = z.OneTimeSignatureVerifier.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "OneTimeSignatureVerifier")
		return
	}
	// string "Sub"
	o = append(o, 0xa3, 0x53, 0x75, 0x62)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Batches)))
	for za0001 := range z.Batches {
		o, err = z.Batches[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Batches", za0001)
			return
		}
	}
	// string "firstoff"
	o = append(o, 0xa8, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6f, 0x66, 0x66)
	o = msgp.AppendUint64(o, z.FirstOffset)
	// string "offkeys"
	o = append(o, 0xa7, 0x6f, 0x66, 0x66, 0x6b, 0x65, 0x79, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Offsets)))
	for za0002 := range z.Offsets {
		o, err = z.Offsets[za0002].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Offsets", za0002)
			return
		}
	}
	// string "offpk2"
	o = append(o, 0xa6, 0x6f, 0x66, 0x66, 0x70, 0x6b, 0x32)
	o, err = z.OffsetsPK2.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "OffsetsPK2")
		return
	}
	// string "offpk2sig"
	o = append(o, 0xa9, 0x6f, 0x66, 0x66, 0x70, 0x6b, 0x32, 0x73, 0x69, 0x67)
	o, err = z.OffsetsPK2Sig.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "OffsetsPK2Sig")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OneTimeSignatureSecrets) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OneTimeSignatureVerifier":
			bts, err = z.OneTimeSignatureVerifier.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "OneTimeSignatureVerifier")
				return
			}
		case "First":
			z.FirstBatch, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FirstBatch")
				return
			}
		case "Sub":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Batches")
				return
			}
			if cap(z.Batches) >= int(zb0002) {
				z.Batches = (z.Batches)[:zb0002]
			} else {
				z.Batches = make([]ephemeralSubkey, zb0002)
			}
			for za0001 := range z.Batches {
				bts, err = z.Batches[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Batches", za0001)
					return
				}
			}
		case "firstoff":
			z.FirstOffset, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FirstOffset")
				return
			}
		case "offkeys":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Offsets")
				return
			}
			if cap(z.Offsets) >= int(zb0003) {
				z.Offsets = (z.Offsets)[:zb0003]
			} else {
				z.Offsets = make([]ephemeralSubkey, zb0003)
			}
			for za0002 := range z.Offsets {
				bts, err = z.Offsets[za0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Offsets", za0002)
					return
				}
			}
		case "offpk2":
			bts, err = z.OffsetsPK2.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "OffsetsPK2")
				return
			}
		case "offpk2sig":
			bts, err = z.OffsetsPK2Sig.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "OffsetsPK2Sig")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *OneTimeSignatureSecrets) Msgsize() (s int) {
	s = 1 + 25 + z.OneTimeSignatureVerifier.Msgsize() + 6 + msgp.Uint64Size + 4 + msgp.ArrayHeaderSize
	for za0001 := range z.Batches {
		s += z.Batches[za0001].Msgsize()
	}
	s += 9 + msgp.Uint64Size + 8 + msgp.ArrayHeaderSize
	for za0002 := range z.Offsets {
		s += z.Offsets[za0002].Msgsize()
	}
	s += 7 + z.OffsetsPK2.Msgsize() + 10 + z.OffsetsPK2Sig.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *OneTimeSignatureSecrets) MsgIsZero() bool {
	return (z.OneTimeSignatureVerifier.MsgIsZero()) && (z.FirstBatch == 0) && (len(z.Batches) == 0) && (z.FirstOffset == 0) && (len(z.Offsets) == 0) && (z.OffsetsPK2.MsgIsZero()) && (z.OffsetsPK2Sig.MsgIsZero())
}

// MarshalMsg implements msgp.Marshaler
func (z *OneTimeSignatureSecretsPersistent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "First"
	o = append(o, 0x87, 0xa5, 0x46, 0x69, 0x72, 0x73, 0x74)
	o = msgp.AppendUint64(o, z.FirstBatch)
	// string "OneTimeSignatureVerifier"
	o = append(o, 0xb8, 0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72)
	o, err = z.OneTimeSignatureVerifier.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "OneTimeSignatureVerifier")
		return
	}
	// string "Sub"
	o = append(o, 0xa3, 0x53, 0x75, 0x62)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Batches)))
	for za0001 := range z.Batches {
		o, err = z.Batches[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Batches", za0001)
			return
		}
	}
	// string "firstoff"
	o = append(o, 0xa8, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6f, 0x66, 0x66)
	o = msgp.AppendUint64(o, z.FirstOffset)
	// string "offkeys"
	o = append(o, 0xa7, 0x6f, 0x66, 0x66, 0x6b, 0x65, 0x79, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Offsets)))
	for za0002 := range z.Offsets {
		o, err = z.Offsets[za0002].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Offsets", za0002)
			return
		}
	}
	// string "offpk2"
	o = append(o, 0xa6, 0x6f, 0x66, 0x66, 0x70, 0x6b, 0x32)
	o, err = z.OffsetsPK2.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "OffsetsPK2")
		return
	}
	// string "offpk2sig"
	o = append(o, 0xa9, 0x6f, 0x66, 0x66, 0x70, 0x6b, 0x32, 0x73, 0x69, 0x67)
	o, err = z.OffsetsPK2Sig.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "OffsetsPK2Sig")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OneTimeSignatureSecretsPersistent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OneTimeSignatureVerifier":
			bts, err = z.OneTimeSignatureVerifier.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "OneTimeSignatureVerifier")
				return
			}
		case "First":
			z.FirstBatch, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FirstBatch")
				return
			}
		case "Sub":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Batches")
				return
			}
			if cap(z.Batches) >= int(zb0002) {
				z.Batches = (z.Batches)[:zb0002]
			} else {
				z.Batches = make([]ephemeralSubkey, zb0002)
			}
			for za0001 := range z.Batches {
				bts, err = z.Batches[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Batches", za0001)
					return
				}
			}
		case "firstoff":
			z.FirstOffset, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FirstOffset")
				return
			}
		case "offkeys":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Offsets")
				return
			}
			if cap(z.Offsets) >= int(zb0003) {
				z.Offsets = (z.Offsets)[:zb0003]
			} else {
				z.Offsets = make([]ephemeralSubkey, zb0003)
			}
			for za0002 := range z.Offsets {
				bts, err = z.Offsets[za0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Offsets", za0002)
					return
				}
			}
		case "offpk2":
			bts, err = z.OffsetsPK2.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "OffsetsPK2")
				return
			}
		case "offpk2sig":
			bts, err = z.OffsetsPK2Sig.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "OffsetsPK2Sig")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *OneTimeSignatureSecretsPersistent) Msgsize() (s int) {
	s = 1 + 25 + z.OneTimeSignatureVerifier.Msgsize() + 6 + msgp.Uint64Size + 4 + msgp.ArrayHeaderSize
	for za0001 := range z.Batches {
		s += z.Batches[za0001].Msgsize()
	}
	s += 9 + msgp.Uint64Size + 8 + msgp.ArrayHeaderSize
	for za0002 := range z.Offsets {
		s += z.Offsets[za0002].Msgsize()
	}
	s += 7 + z.OffsetsPK2.Msgsize() + 10 + z.OffsetsPK2Sig.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *OneTimeSignatureSecretsPersistent) MsgIsZero() bool {
	return (z.OneTimeSignatureVerifier.MsgIsZero()) && (z.FirstBatch == 0) && (len(z.Batches) == 0) && (z.FirstOffset == 0) && (len(z.Offsets) == 0) && (z.OffsetsPK2.MsgIsZero()) && (z.OffsetsPK2Sig.MsgIsZero())
}

// MarshalMsg implements msgp.Marshaler
func (z *OneTimeSignatureSubkeyBatchID) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "batch"
	o = append(o, 0x82, 0xa5, 0x62, 0x61, 0x74, 0x63, 0x68)
	o = msgp.AppendUint64(o, z.Batch)
	// string "pk"
	o = append(o, 0xa2, 0x70, 0x6b)
	o, err = z.SubKeyPK.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "SubKeyPK")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OneTimeSignatureSubkeyBatchID) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "pk":
			bts, err = z.SubKeyPK.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "SubKeyPK")
				return
			}
		case "batch":
			z.Batch, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Batch")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *OneTimeSignatureSubkeyBatchID) Msgsize() (s int) {
	s = 1 + 3 + z.SubKeyPK.Msgsize() + 6 + msgp.Uint64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z *OneTimeSignatureSubkeyBatchID) MsgIsZero() bool {
	return (z.SubKeyPK.MsgIsZero()) && (z.Batch == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *OneTimeSignatureSubkeyOffsetID) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "batch"
	o = append(o, 0x83, 0xa5, 0x62, 0x61, 0x74, 0x63, 0x68)
	o = msgp.AppendUint64(o, z.Batch)
	// string "off"
	o = append(o, 0xa3, 0x6f, 0x66, 0x66)
	o = msgp.AppendUint64(o, z.Offset)
	// string "pk"
	o = append(o, 0xa2, 0x70, 0x6b)
	o, err = z.SubKeyPK.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "SubKeyPK")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OneTimeSignatureSubkeyOffsetID) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "pk":
			bts, err = z.SubKeyPK.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "SubKeyPK")
				return
			}
		case "batch":
			z.Batch, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Batch")
				return
			}
		case "off":
			z.Offset, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Offset")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *OneTimeSignatureSubkeyOffsetID) Msgsize() (s int) {
	s = 1 + 3 + z.SubKeyPK.Msgsize() + 6 + msgp.Uint64Size + 4 + msgp.Uint64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z *OneTimeSignatureSubkeyOffsetID) MsgIsZero() bool {
	return (z.SubKeyPK.MsgIsZero()) && (z.Batch == 0) && (z.Offset == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z OneTimeSignatureVerifier) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o, err = z.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OneTimeSignatureVerifier) UnmarshalMsg(bts []byte) (o []byte, err error) {
	bts, err = (*z).UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z OneTimeSignatureVerifier) Msgsize() (s int) {
	s = z.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z OneTimeSignatureVerifier) MsgIsZero() bool { return z.MsgIsZero() }

// MarshalMsg implements msgp.Marshaler
func (z *OneTimeSigner) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "OneTimeSignatureSecrets"
	o = append(o, 0x82, 0xb7, 0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73)
	if z.OneTimeSignatureSecrets == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.OneTimeSignatureSecrets.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "OneTimeSignatureSecrets")
			return
		}
	}
	// string "OptionalKeyDilution"
	o = append(o, 0xb3, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendUint64(o, z.OptionalKeyDilution)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OneTimeSigner) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OneTimeSignatureSecrets":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.OneTimeSignatureSecrets = nil
			} else {
				if z.OneTimeSignatureSecrets == nil {
					z.OneTimeSignatureSecrets = new(OneTimeSignatureSecrets)
				}
				bts, err = z.OneTimeSignatureSecrets.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "OneTimeSignatureSecrets")
					return
				}
			}
		case "OptionalKeyDilution":
			z.OptionalKeyDilution, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OptionalKeyDilution")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *OneTimeSigner) Msgsize() (s int) {
	s = 1 + 24
	if z.OneTimeSignatureSecrets == nil {
		s += msgp.NilSize
	} else {
		s += z.OneTimeSignatureSecrets.Msgsize()
	}
	s += 20 + msgp.Uint64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z *OneTimeSigner) MsgIsZero() bool {
	return (z.OneTimeSignatureSecrets == nil) && (z.OptionalKeyDilution == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *ephemeralSubkey) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "PK"
	o = append(o, 0x84, 0xa2, 0x50, 0x4b)
	o, err = z.PK.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "PK")
		return
	}
	// string "PKSig"
	o = append(o, 0xa5, 0x50, 0x4b, 0x53, 0x69, 0x67)
	o, err = z.PKSigOld.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "PKSigOld")
		return
	}
	// string "SK"
	o = append(o, 0xa2, 0x53, 0x4b)
	o, err = z.SK.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "SK")
		return
	}
	// string "sig2"
	o = append(o, 0xa4, 0x73, 0x69, 0x67, 0x32)
	o, err = z.PKSigNew.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "PKSigNew")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ephemeralSubkey) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "PK":
			bts, err = z.PK.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "PK")
				return
			}
		case "SK":
			bts, err = z.SK.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "SK")
				return
			}
		case "PKSig":
			bts, err = z.PKSigOld.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "PKSigOld")
				return
			}
		case "sig2":
			bts, err = z.PKSigNew.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "PKSigNew")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ephemeralSubkey) Msgsize() (s int) {
	s = 1 + 3 + z.PK.Msgsize() + 3 + z.SK.Msgsize() + 6 + z.PKSigOld.Msgsize() + 5 + z.PKSigNew.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *ephemeralSubkey) MsgIsZero() bool {
	return (z.PK.MsgIsZero()) && (z.SK.MsgIsZero()) && (z.PKSigOld.MsgIsZero()) && (z.PKSigNew.MsgIsZero())
}
