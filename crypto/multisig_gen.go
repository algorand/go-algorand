package crypto

// Code generated by github.com/zeldovich/msgp DO NOT EDIT.

import (
	"github.com/zeldovich/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *MultisigSig) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(3)
	var zb0001Mask uint8 /* 4 bits */
	if len(z.Subsigs) == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Threshold == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Version == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "subsig"
		o = append(o, 0xa6, 0x73, 0x75, 0x62, 0x73, 0x69, 0x67)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Subsigs)))
		for za0001 := range z.Subsigs {
			// omitempty: check for empty values
			zb0002Len := uint32(2)
			var zb0002Mask uint8 /* 3 bits */
			if z.Subsigs[za0001].Key.MsgIsZero() {
				zb0002Len--
				zb0002Mask |= 0x2
			}
			if z.Subsigs[za0001].Sig.MsgIsZero() {
				zb0002Len--
				zb0002Mask |= 0x4
			}
			// variable map header, size zb0002Len
			o = append(o, 0x80|uint8(zb0002Len))
			if (zb0002Mask & 0x2) == 0 { // if not empty
				// string "pk"
				o = append(o, 0xa2, 0x70, 0x6b)
				o, err = z.Subsigs[za0001].Key.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "Subsigs", za0001, "Key")
					return
				}
			}
			if (zb0002Mask & 0x4) == 0 { // if not empty
				// string "s"
				o = append(o, 0xa1, 0x73)
				o, err = z.Subsigs[za0001].Sig.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "Subsigs", za0001, "Sig")
					return
				}
			}
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "thr"
		o = append(o, 0xa3, 0x74, 0x68, 0x72)
		o = msgp.AppendUint8(o, z.Threshold)
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "v"
		o = append(o, 0xa1, 0x76)
		o = msgp.AppendUint8(o, z.Version)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MultisigSig) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "v":
			z.Version, bts, err = msgp.ReadUint8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "thr":
			z.Threshold, bts, err = msgp.ReadUint8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Threshold")
				return
			}
		case "subsig":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Subsigs")
				return
			}
			if cap(z.Subsigs) >= int(zb0002) {
				z.Subsigs = (z.Subsigs)[:zb0002]
			} else {
				z.Subsigs = make([]MultisigSubsig, zb0002)
			}
			for za0001 := range z.Subsigs {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Subsigs", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Subsigs", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "pk":
						bts, err = z.Subsigs[za0001].Key.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "Subsigs", za0001, "Key")
							return
						}
					case "s":
						bts, err = z.Subsigs[za0001].Sig.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "Subsigs", za0001, "Sig")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Subsigs", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MultisigSig) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint8Size + 4 + msgp.Uint8Size + 7 + msgp.ArrayHeaderSize
	for za0001 := range z.Subsigs {
		s += 1 + 3 + z.Subsigs[za0001].Key.Msgsize() + 2 + z.Subsigs[za0001].Sig.Msgsize()
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z *MultisigSig) MsgIsZero() bool {
	return (z.Version == 0) && (z.Threshold == 0) && (len(z.Subsigs) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *MultisigSubsig) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 3 bits */
	if z.Key.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Sig.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "pk"
		o = append(o, 0xa2, 0x70, 0x6b)
		o, err = z.Key.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Key")
			return
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "s"
		o = append(o, 0xa1, 0x73)
		o, err = z.Sig.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Sig")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MultisigSubsig) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "pk":
			bts, err = z.Key.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "s":
			bts, err = z.Sig.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sig")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MultisigSubsig) Msgsize() (s int) {
	s = 1 + 3 + z.Key.Msgsize() + 2 + z.Sig.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *MultisigSubsig) MsgIsZero() bool { return (z.Key.MsgIsZero()) && (z.Sig.MsgIsZero()) }
