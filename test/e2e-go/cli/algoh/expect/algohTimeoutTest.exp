#!/usr/bin/expect -f
set err 0
log_user 1

if { [catch {
    source algohExpectCommon.exp

    set TEST_ALGO_DIR [lindex $argv 0]
    set TEST_DATA_DIR [lindex $argv 1]

    exec mkdir -p $TEST_ALGO_DIR

    set TIME_STAMP [clock seconds]

    set archType [exec $TEST_DATA_DIR/../../scripts/archtype.sh]
    puts "arch type: $archType"
    if {[regexp "arm64" $archType]} {
       set timeout 60
    } else {
       set timeout 5
    }
    puts "set timeout to $timeout"

    set TEST_ROOT_DIR $TEST_ALGO_DIR/root
    set TEST_PRIMARY_NODE_DIR $TEST_ROOT_DIR/Primary
    set TEST_NODE_DIR $TEST_ROOT_DIR/Node
    set NETWORK_NAME test_net_expect_$TIME_STAMP
    set NETWORK_TEMPLATE "$TEST_DATA_DIR/nettemplates/TwoNodes50Each.json"
    puts "TEST_ALGO_DIR: $TEST_ALGO_DIR"

    ::Algoh::CreateNetwork $NETWORK_NAME $NETWORK_TEMPLATE $TEST_ROOT_DIR

    ::Algoh::StartNode $TEST_PRIMARY_NODE_DIR

    puts "Successfully started node"

    exec cat ./disabled_profiler_config.json > $TEST_NODE_DIR/config.json
    exec cat ./host-config.json > $TEST_NODE_DIR/host-config.json

    set PRIMARY_ADDR ""
    spawn cat $TEST_PRIMARY_NODE_DIR/algod-listen.net
    expect {
        -re {http:\/\/([0-9\.]+:[0-9]+)} { set PRIMARY_ADDR $expect_out(1,string); exp_continue;}
        timeout {::Algoh::Abort "timed out listing $TEST_PRIMARY_NODE_DIR/algod-listen.net"}
    }

    if { $PRIMARY_ADDR == "" } {
        ::Algoh::Abort "Primary node listening address could not be retrieved."
    }

    puts "regex match: $PRIMARY_ADDR"

    # start hosted node in the background
    spawn algoh -d $TEST_NODE_DIR -p $PRIMARY_ADDR
    expect {
        "^Logging to: *" {puts "algoh startup successful"}
        timeout {::Algoh::Abort "algoh failed to start";}
        eof { ::Algoh::CheckEOF "algoh failed to start" }
    }

    # allow algoh time to put files in Node dir
    ::Algoh::WaitForFile $TEST_NODE_DIR/algod.pid

    # wait until Node approves blocks to the network
    set timeout 60
    spawn goal node wait -d $TEST_NODE_DIR -w 61
    expect {
        eof {puts "successfully communicating with relay node"}
        "Timed out waiting for node to make progress" {::Algoh::Abort "timed out waiting for connection to relay node";}
        timeout {::Algoh::Abort "should not reached this case";}
    }

    ::Algoh::StopNode $TEST_PRIMARY_NODE_DIR

    set timeout 201
    spawn goal node wait -d $TEST_NODE_DIR -w 200
    expect {
        "^Cannot contact Algorand node: open $TEST_NODE_DIR/algod.net: no such file or directory" {::Algoh::Abort "ERROR: node shutdown";}
        "^Timed out waiting for node to make progress" {puts "node correctly continued running despite relay shutdown"; close}
        timeout {::Algoh::Abort "should not reached this case";}
    }

    ::Algoh::StopNetwork $NETWORK_NAME $TEST_ROOT_DIR

    exec rm -d -r -f $TEST_ALGO_DIR
    puts "Basic Algoh Test Successful"
} EXCEPTION ] } {
    ::Algoh::Abort "ERROR in algoh test: $EXCEPTION"
    exit 1
}
