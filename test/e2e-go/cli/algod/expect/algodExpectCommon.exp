# Algod Expect Utility Package
namespace eval ::Algod {

  # Export Procedures
  namespace export Info
  namespace export ReadTelemetry
  namespace export StartNetwork
  namespace export StopNetwork

  # My Variables
   set version 1.0
   set description "Algod Expect Package"

  # Variable for the path of the script
   variable home [file join [pwd] [file dirname [info script]]]
}

# Definition of the procedure MyProcedure
proc ::Algod::Info {} {
   puts Algod::description
}

package provide Algod $Algod::version
package require Tcl 8.0


# Start a node, and confirm it pulls telemetry config from the correct location
proc ::Algod::ReadTelemetry { TEST_ALGO_DIR } {
    set timeout 5

    if { [catch {
        puts "algod start with $TEST_ALGO_DIR"
        spawn ~/go/bin/algod -d $TEST_ALGO_DIR -g ../../../../../gen/testnet/genesis.json
        expect {
            "^Telemetry configured from '$::env(HOME)/.algorand/logging.config'*" {puts "Telemetry config correctly pulled from global location"; send '\003'; close}
            "^Telemetry configured from *" {puts "Telemetry config pulled from unexpected location"; send '\003'; close; exit 1}
            timeout {puts "timeout occurred waiting for telemetry log"; send '\003'; close; exit 1}
        }

        exec cp $::env(HOME)/.algorand/logging.config $TEST_ALGO_DIR
        spawn ~/go/bin/algod -d $TEST_ALGO_DIR -g ../../../../../gen/testnet/genesis.json
        expect {
            timeout {send '\003'; close; puts "timeout occurred waiting for telemetry log"; exit 1}
            "^Telemetry configured from '$TEST_ALGO_DIR/logging.config'*" {puts "Telemetry config correctly pulled from local location"; send '\003'; close}
            "^Telemetry configured from *" {puts "Telemetry config pulled from unexpected location, not $TEST_ALGO_DIR/logging.config"; send '\003'; close; exit 1}
        }
    } EXCEPTION] } {
        puts "ERROR in ReadTelemetry: $EXCEPTION"
    }
}

# Start the network
proc ::Algod::StartNetwork { NETWORK_NAME NETWORK_TEMPLATE TEST_ALGO_DIR TEST_ROOT_DIR } {
    set ::GLOBAL_TEST_ALGO_DIR $TEST_ALGO_DIR
    set ::GLOBAL_TEST_ROOT_DIR $TEST_ROOT_DIR
    set ::GLOBAL_NETWORK_NAME $NETWORK_NAME

    # Running on ARM64, it seems that network creation is pretty slow.
    # 30 second won't be enough here, so I'm changing this to 90 seconds.
    set timeout 90

    if { [catch {
        # Create network
        puts "network create $NETWORK_NAME"
        spawn goal network create --network $NETWORK_NAME --template $NETWORK_TEMPLATE --datadir $TEST_ALGO_DIR --rootdir $TEST_ROOT_DIR
        expect {
            timeout { close; ::AlgorandGoal::Abort "Timed out creating network" }
            "^Network $NETWORK_NAME created under.*" { puts "Network $NETWORK_NAME created" ; close  }
            close
        }

        # Start network
        puts "network start $NETWORK_NAME"
        spawn goal network start -d $TEST_ALGO_DIR -r $TEST_ROOT_DIR
        expect {
            timeout { close; ::AlgorandGoal::Abort "Timed out starting network"  }
            ".*Network started under.* { puts "Network $NETWORK_NAME started"  ;close  }
            close
        }
    } EXCEPTION ] } {
       puts "ERROR in StartNetwork: $EXCEPTION"
       exit 1
    }

    if { [catch {
        # Check network status
        puts "network status $NETWORK_NAME"
        spawn goal network status -d $TEST_ALGO_DIR -r $TEST_ROOT_DIR
        expect {
            timeout { close; ::AlgorandGoal::Abort "Timed out retrieving network status"  }
            ".*Error getting status.*" { close; ::AlgorandGoal::Abort "error getting network status: $expect_out(buffer)""}
            "^Network Started under.*"   { puts "Network $NETWORK_NAME status ok"; close }
            close
        }
        puts "StartNetwork complete"
    } EXCEPTION ] } {
       ::AlgorandGoal::Abort "ERROR in StartNetwork: $EXCEPTION"
    }
}

# Stop the network
proc ::Algod::StopNetwork { NETWORK_NAME TEST_ALGO_DIR TEST_ROOT_DIR } {
    set timeout 60
    set NETWORK_STOP_MESSAGE ""
    puts "Stopping network: $NETWORK_NAME"
    spawn goal network stop -d $TEST_ALGO_DIR -r $TEST_ROOT_DIR
    expect {
        timeout {
	      close
	      puts "Timed out shutting down network"
	      puts "GLOBAL_TEST_ALGO_DIR $::GLOBAL_TEST_ALGO_DIR"
	      puts "GLOBAL_TEST_ROOT_DIR $::GLOBAL_TEST_ROOT_DIR"
	      puts "GLOBAL_NETWORK_NAME $::GLOBAL_NETWORK_NAME"
	      exit 1
	    }
        "Network Stopped under.*" {set NETWORK_STOP_MESSAGE $expect_out(buffer); close}
    }
    puts $NETWORK_STOP_MESSAGE
}
