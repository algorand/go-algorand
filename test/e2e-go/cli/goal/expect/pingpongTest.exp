#!/usr/bin/expect -f
#exp_internal 1
set err 0
log_user 1

source  goalExpectCommon.exp

set TEST_ALGO_DIR [lindex $argv 0]
set TEST_DATA_DIR [lindex $argv 1]

proc pingpongTest { TEST_ALGO_DIR TEST_DATA_DIR} {

    set timeout 60
    set TIME_STAMP [clock seconds]

    set TEST_ROOT_DIR $TEST_ALGO_DIR/root_$TIME_STAMP
    set TEST_PRIMARY_NODE_DIR $TEST_ROOT_DIR/Primary/
    set NETWORK_NAME test_net_expect_$TIME_STAMP
    set NETWORK_TEMPLATE "$TEST_DATA_DIR/nettemplates/TwoNodes50EachFuture.json"

    exec cp $TEST_DATA_DIR/../../gen/devnet/genesis.json $TEST_ALGO_DIR

    # Create network
    ::AlgorandGoal::CreateNetwork $NETWORK_NAME $NETWORK_TEMPLATE $TEST_ALGO_DIR $TEST_ROOT_DIR

    # Start network
    ::AlgorandGoal::StartNetwork $NETWORK_NAME $NETWORK_TEMPLATE $TEST_ALGO_DIR $TEST_ROOT_DIR

    set PRIMARY_NODE_ADDRESS [ ::AlgorandGoal::GetAlgodNetworkAddress $TEST_PRIMARY_NODE_DIR ]
    puts "Primary Node Address: $PRIMARY_NODE_ADDRESS"

    set PRIMARY_WALLET_NAME unencrypted-default-wallet

    # Determine primary account
    set PRIMARY_ACCOUNT_ADDRESS [::AlgorandGoal::GetHighestFundedAccountForWallet $PRIMARY_WALLET_NAME  $TEST_PRIMARY_NODE_DIR]

    # Check the balance of the primary account
    set PRIMARY_ACCOUNT_BALANCE [::AlgorandGoal::GetAccountBalance $PRIMARY_WALLET_NAME $PRIMARY_ACCOUNT_ADDRESS $TEST_PRIMARY_NODE_DIR]
    puts "Primary Account Balance: $PRIMARY_ACCOUNT_BALANCE"

    ::AlgorandGoal::WaitForRound 1 $TEST_PRIMARY_NODE_DIR

    set TEAL_PROGS_DIR "$TEST_DATA_DIR/../scripts/e2e_subs/tealprogs"

    # Network Setup complete
    #----------------------

    # Run pingpong tests
    #----------------------


    set pingpong_duration 5

    set pingpongArray(1_smallops_smallhash)   "--appprogops 2  --appproghashes 2  --appproghashsize sha512_256 --numapp 10 --tps 200 --rest 0  --refresh 10 --numaccounts 5 --minaccount 100000000"
    set pingpongArray(2_smallops_mediumhash)  "--appprogops 2  --appproghashes 5 --appproghashsize sha512_256 --numapp 10 --tps 200 --rest 0  --refresh 10 --numaccounts 50 --minaccount 100000000"
    set pingpongArray(3_smallops_bighash)     "--appprogops 2  --appproghashes 10 --appproghashsize sha512_256 --numapp 10 --tps 200 --rest 0  --refresh 10 --numaccounts 50 --minaccount 100000000"
    set pingpongArray(4_mediumops_smallhash)  "--appprogops 200 --appproghashes 2  --appproghashsize sha512_256 --numapp 10 --tps 200 --rest 0  --refresh 10 --numaccounts 50 --minaccount 100000000"
    set pingpongArray(5_mediumops_mediumhash) "--appprogops 200 --appproghashes 5 --appproghashsize sha512_256 --numapp 10 --tps 200 --rest 0  --refresh 10 --numaccounts 50 --minaccount 100000000"
    set pingpongArray(6_mediumops_bighash)    "--appprogops 200 --appproghashes 10 --appproghashsize sha512_256 --numapp 10 --tps 200 --rest 0  --refresh 10 --numaccounts 50 --minaccount 100000000"
    set pingpongArray(7_bigops_smallhash)     "--appprogops 500 --appproghashes 2 --appproghashsize sha512_256 --numapp 10 --tps 200 --rest 0  --refresh 10 --numaccounts 50 --minaccount 100000000"
    set pingpongArray(8_bigops_mediumhash)    "--appprogops 300 --appproghashes 5 --appproghashsize sha512_256 --numapp 10 --tps 200 --rest 0  --refresh 10 --numaccounts 50 --minaccount 100000000"
    set pingpongArray(9_bigops_bighash)       "--appprogops 220 --appproghashes 10 --appproghashsize sha512_256 --numapp 10 --tps 200 --rest 0  --refresh 10 --numaccounts 50 --minaccount 100000000"

    set pingpongArray(10_payment_transaction)                "--tps 200 --rest 0  --refresh 10 --numaccounts 50"
    set pingpongArray(11_teal_light_transaction)             "--teal=light --tps 200 --rest 0  --refresh 10 --numaccounts 50"
    set pingpongArray(10_teal_normal_transaction)            "--teal=normal --tps 200 --rest 0  --refresh 10 --numaccounts 50"
    set pingpongArray(12_teal_heavy_transaction)             "--teal=heavy --tps 200 --rest 0  --refresh 10 --numaccounts 50"
    set pingpongArray(13_atomic_transfer_small_transaction)  "--groupsize=5 --tps 200 --rest 0  --refresh 10 --numaccounts 50"
    set pingpongArray(14_atomic_transfer_large_transaction)  "--groupsize=12 --tps 200 --rest 0  --refresh 10 --numaccounts 50"
    set pingpongArray(15_asset_transfer_small_transaction)   "--tps 200 --numasset=5 --mf 0 --rest 0 --numaccounts 10 --refresh 10 --mf=1000"
    set pingpongArray(16_asset_transfer_large_transaction)   "--tps 200 --numasset=10  --mf 0 --rest 0 --numaccounts 10 --refresh 10 --mf=1000"
    set pingpongArray(17_stateful_teal_small_transaction)    "--numapp 10 --appprogops 10 --tps 200 --rest 0  --refresh 10 --numaccounts 50 --minaccount 100000000"
    set pingpongArray(18_stateful_teal_medium_transaction)   "--numapp 10 --appprogops 200 --tps 200 --rest 0  --refresh 10 --numaccounts 50 --minaccount 100000000"
    set pingpongArray(19_stateful_teal_large_transaction)    "--numapp 10  --appprogops 600 --tps 200 --rest 0  --refresh 10 --numaccounts 50 --minaccount 100000000"
    set pingpongArray(20_rekey_payment_transaction)          "--rekey=true --groupsize=2 --randomnote=true --tps 200 --rest 0 --refresh 10 --numaccounts 50"


    foreach index [array names pingpongArray] {
       puts "pingpongArray($index): $pingpongArray($index)"
       ::AlgorandGoal::RunPingpong $pingpong_duration $pingpongArray($index) $TEST_PRIMARY_NODE_DIR
    }

    # Shutdown the network
    #----------------------
    ::AlgorandGoal::StopNetwork $NETWORK_NAME $TEST_ALGO_DIR $TEST_ROOT_DIR

    puts "Pinpong Test Successful"

}


if { [catch {
    source  goalExpectCommon.exp

    puts "starting pinpongTest"

    puts "TEST_ALGO_DIR: $TEST_ALGO_DIR"
    puts "TEST_DATA_DIR: $TEST_DATA_DIR"

    pingpongTest  $TEST_ALGO_DIR  $TEST_DATA_DIR

    exit 0

} EXCEPTION ] } {
   ::AlgorandGoal::Abort "ERROR in pinpongTest: $EXCEPTION"
}
