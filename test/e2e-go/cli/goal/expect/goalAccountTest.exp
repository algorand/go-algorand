#!/usr/bin/expect -f
set err 0
log_user 1

if { [catch {
    source  goalExpectCommon.exp
    set TEST_ALGO_DIR [lindex $argv 0]
    set TEST_DATA_DIR [lindex $argv 1]

    puts "TEST_ALGO_DIR: $TEST_ALGO_DIR"
    puts "TEST_DATA_DIR: $TEST_DATA_DIR"

    set TIME_STAMP [clock seconds]

    set TEST_ROOT_DIR $TEST_ALGO_DIR/root
    set TEST_PRIMARY_NODE_DIR $TEST_ROOT_DIR/Primary/
    set NETWORK_NAME test_net_expect_$TIME_STAMP
    set NETWORK_TEMPLATE "$TEST_DATA_DIR/nettemplates/TwoNodes50EachFuture.json"

    exec cp $TEST_DATA_DIR/../../installer/genesis/devnet/genesis.json $TEST_ALGO_DIR

    # Create network
    ::AlgorandGoal::CreateNetwork $NETWORK_NAME $NETWORK_TEMPLATE $TEST_ALGO_DIR $TEST_ROOT_DIR

    ::AlgorandGoal::StartNetwork $NETWORK_NAME $NETWORK_TEMPLATE $TEST_ROOT_DIR

    set PRIMARY_NODE_ADDRESS [ ::AlgorandGoal::GetAlgodNetworkAddress $TEST_PRIMARY_NODE_DIR ]
    puts "Primary Node Address: $PRIMARY_NODE_ADDRESS"

    set PRIMARY_WALLET_NAME unencrypted-default-wallet

    # Determine primary account
    set PRIMARY_ACCOUNT_ADDRESS [::AlgorandGoal::GetHighestFundedAccountForWallet $PRIMARY_WALLET_NAME  $TEST_PRIMARY_NODE_DIR]

    set timeout 30

    # try to generate an expired transaction for 5 times before giving up.
    set TEST_TRANSACTION_EXPIRATION 5
    while {$TEST_TRANSACTION_EXPIRATION > 0} {
        # Get the lastest block
        set LAST_COMMITTED_BLOCK [::AlgorandGoal::GetNodeLastCommittedBlock $TEST_PRIMARY_NODE_DIR]

        # test that sending a transaction where the last round is equal to the current round end up resulting in "Transaction %s expired before it could be included in a block" error.
        spawn goal clerk send -a 10 --firstvalid [expr {$LAST_COMMITTED_BLOCK + 1}] --lastvalid [expr {$LAST_COMMITTED_BLOCK + 1}] -f $PRIMARY_ACCOUNT_ADDRESS -t $PRIMARY_ACCOUNT_ADDRESS -d $TEST_PRIMARY_NODE_DIR
        expect {
            timeout { close; ::AlgorandGoal::Abort "goal clerk send timeout" }
            -re {Transaction ([A-Z0-9]+) expired before it could be included in a block} {
                break;
                close;
            }
            -re {Transaction ([A-Z0-9]+) kicked out of local node pool} {
                # this is a legit possible case, so just keep iterating if we hit this one.
                close;
            }
            -re {Couldn't broadcast tx with algod: HTTP 400 Bad Request: TransactionPool.Remember: txn dead: round ([0-9]+) outside of ([0-9]+)--([0-9]+)} {
                # this is a legit possible case, so just keep iterating if we hit this one.
                close;
            }
            eof { ::AlgorandGoal::CheckEOF "Failed to send a dummy transaction" }
        }
        set TEST_TRANSACTION_EXPIRATION [expr {$TEST_TRANSACTION_EXPIRATION - 1}]
    }

    set MN "advice pudding treat near rule blouse same whisper inner electric quit surface sunny dismiss leader blood seat clown cost exist hospital century reform able sponsor"
    spawn goal account import -m $MN --datadir $TEST_PRIMARY_NODE_DIR
    expect {
        timeout { close; ::AlgorandGoal::Abort "goal account import timeout" }
        -re {Imported ([A-Z0-9]+)} {set NEW_ACCOUNT_ADDRESS $expect_out(1,string); close }
        eof { ::AlgorandGoal::CheckEOF "Failed to import account" }
    }

    puts "Imported account $NEW_ACCOUNT_ADDRESS"

    set MIN_BALANCE 100000
    set TRANSFER_AMOUNT  [expr {3 * $MIN_BALANCE}]
    # Get suggested fee via REST API
    set FEE_AMOUNT [::AlgorandGoal::GetSuggestedFee $PRIMARY_WALLET_NAME $PRIMARY_ACCOUNT_ADDRESS $TEST_PRIMARY_NODE_DIR]
    puts "Network suggested fee: $FEE_AMOUNT"

    set TRANSACTION_ID [::AlgorandGoal::AccountTransfer $PRIMARY_WALLET_NAME "" $PRIMARY_ACCOUNT_ADDRESS $TRANSFER_AMOUNT $NEW_ACCOUNT_ADDRESS $FEE_AMOUNT $TEST_PRIMARY_NODE_DIR ""]

    set GLOBAL_BYTE_SLICES 1
    set LOCAL_BYTE_SLICES 0
    set TEAL_PROGS_DIR "$TEST_DATA_DIR/../scripts/e2e_subs/tealprogs"
    set APP_ID [::AlgorandGoal::AppCreate0 $PRIMARY_WALLET_NAME "" $NEW_ACCOUNT_ADDRESS ${TEAL_PROGS_DIR}/clear_program_state.teal $GLOBAL_BYTE_SLICES $LOCAL_BYTE_SLICES ${TEAL_PROGS_DIR}/clear_program_state.teal $TEST_PRIMARY_NODE_DIR]

    # expect app idx = 1002 (txnCounter starts at 1000, AccountTransfer increments to 1001, AppCreate gets 1002)
    if { $APP_ID != 1002 } {
        ::AlgorandGoal::Abort "Expected app id to be 1002 but got $APP_ID. This is the first app created after the transfer transaction."
    }

    # check JSON output to stdout - verify structure, app data, and exact balance
    set JSON_ACTUAL [exec goal account dump -a $NEW_ACCOUNT_ADDRESS --datadir $TEST_PRIMARY_NODE_DIR]

    # Verify critical fields are present (address, app params, schemas)
    if { ! [string match {*"addr": "47YPQTIGQEO7T4Y4RWDYWEKV6RTR2UNBQXBABEEGM72ESWDQNCQ52OPASU"*} $JSON_ACTUAL] } {
        ::AlgorandGoal::Abort "JSON missing correct address"
    }
    if { ! [string match {*"appp"*} $JSON_ACTUAL] } {
        ::AlgorandGoal::Abort "JSON missing app params"
    }
    if { ! [string match {*"1002"*} $JSON_ACTUAL] } {
        ::AlgorandGoal::Abort "JSON missing app ID 1002"
    }
    if { ! [string match {*"approv": "AiABASI="*} $JSON_ACTUAL] } {
        ::AlgorandGoal::Abort "JSON missing or incorrect approval program"
    }
    if { ! [string match {*"clearp": "AiABASI="*} $JSON_ACTUAL] } {
        ::AlgorandGoal::Abort "JSON missing or incorrect clear program"
    }

    # Verify exact balance: transfer amount minus app creation fee
    if { ! [regexp {"algo": ([0-9]+)} $JSON_ACTUAL match balance] } {
        ::AlgorandGoal::Abort "Failed to extract balance from JSON"
    }
    set EXPECTED_BALANCE [expr {$TRANSFER_AMOUNT - $FEE_AMOUNT}]
    if { $balance != $EXPECTED_BALANCE } {
        ::AlgorandGoal::Abort "Balance $balance does not match expected $EXPECTED_BALANCE (transfer $TRANSFER_AMOUNT - app creation fee $FEE_AMOUNT)"
    }
    puts "Account balance: $balance (exact match)"

    # check msgpack output to a file with zero exit code
    set BALREC_FILE "$TEST_ROOT_DIR/brec.msgp"
    spawn goal account dump -a $NEW_ACCOUNT_ADDRESS -o $BALREC_FILE --datadir $TEST_PRIMARY_NODE_DIR
    expect {
        timeout { close; ::AlgorandGoal::Abort "goal account dump timeout" }
        eof { ::AlgorandGoal::CheckEOF "Failed to dump account" }
    }

    # Verify msgpack file balance matches expected balance
    set BALREC_CONTENT [exec cat $BALREC_FILE | msgpacktool -d]
    if { ! [regexp {\"algo\": ([0-9]+)} $BALREC_CONTENT match msgp_balance] } {
        ::AlgorandGoal::Abort "Failed to extract balance from msgpack file"
    }
    if { $msgp_balance != $EXPECTED_BALANCE } {
        ::AlgorandGoal::Abort "Msgpack balance $msgp_balance does not match expected $EXPECTED_BALANCE"
    }
    # Verify app ID is 1002 in msgpack (appears as integer key in JSON output)
    if { ! [string match {*1002:*} $BALREC_CONTENT] } {
        ::AlgorandGoal::Abort "Msgpack missing app ID 1002"
    }
    puts "Msgpack dump verified (balance: $msgp_balance)"

    # check some empty response on non-existing address with zero exit code
    set PASSED 0
    set NONEXISTING_ADDR "42NJMHTPFVPXVSDGA6JGKUV6TARV5UZTMPFIREMLXHETRKIVW34QFSDFRE"
    spawn goal account dump -a $NONEXISTING_ADDR --datadir $TEST_PRIMARY_NODE_DIR
    expect {
        timeout { close; ::AlgorandGoal::Abort "goal account dump timeout" }
        "\"addr\": \"$NONEXISTING_ADDR\"" { set PASSED 1; close;}
        eof { ::AlgorandGoal::CheckEOF "Failed to dump account" }
    }
    if { $PASSED == 0 } {
        ::AlgorandGoal::Abort "Non-existing addr... Failed"
    }

    # check failure if no address provided, non-zero exit code
    set PASSED 0
    spawn goal account dump --datadir $TEST_PRIMARY_NODE_DIR
    expect {
        timeout { close; ::AlgorandGoal::Abort "goal account dump timeout" }
        "^Failed to parse addr: decoded bad addr:" { set PASSED 1; close;}
        eof { catch wait result; if { [lindex $result 3] == 0 } { puts "Expected non-zero exit code"; AlgorandGoal::Abort } }
    }
    if { $PASSED == 0 } {
        ::AlgorandGoal::Abort "No addr... Failed"
    }

    # check failure if invalid address provided, non-zero exit code
    set PASSED 0
    set INVALID_ADDR "NOTANADDR"
    spawn goal account dump -a $INVALID_ADDR --datadir $TEST_PRIMARY_NODE_DIR
    expect {
        timeout { close; ::AlgorandGoal::Abort "goal account dump timeout" }
        "^Failed to parse addr: decoded bad addr:" { set PASSED 1; close;}
        eof { catch wait result; if { [lindex $result 3] == 0 } { puts "Expected non-zero exit code"; AlgorandGoal::Abort } }
    }
    if { $PASSED == 0 } {
        ::AlgorandGoal::Abort "Invalid addr... Failed"
    }

    # Shutdown the network
    ::AlgorandGoal::StopNetwork $NETWORK_NAME $TEST_ROOT_DIR
    exit 0

} EXCEPTION ] } {
   ::AlgorandGoal::Abort "ERROR in goalAccountTest: $EXCEPTION"
}
