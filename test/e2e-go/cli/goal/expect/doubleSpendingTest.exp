#!/usr/bin/expect -f

set err 0
log_user 1

if { [catch {

    source  goalExpectCommon.exp

    set TEST_ALGO_DIR [lindex $argv 0]
    set TEST_DATA_DIR [lindex $argv 1]

    puts "TEST_ALGO_DIR: $TEST_ALGO_DIR"
    puts "TEST_DATA_DIR: $TEST_DATA_DIR"

    set TIME_STAMP [clock seconds]

    set TEST_ROOT_DIR $TEST_ALGO_DIR/root
    set TEST_PRIMARY_NODE_DIR $TEST_ROOT_DIR/Primary/
    set TEST_NODE_1_DIR $TEST_ROOT_DIR/Node/
    set NETWORK_NAME test_net_expect_$TIME_STAMP
    set NETWORK_TEMPLATE "$TEST_DATA_DIR/nettemplates/TwoNodes50Each.json"

    exec cp $TEST_DATA_DIR/../../gen/devnet/genesis.json $TEST_ALGO_DIR

    # Create Network
    ::AlgorandGoal::CreateNetwork $NETWORK_NAME $NETWORK_TEMPLATE $TEST_ALGO_DIR $TEST_ROOT_DIR

    # Start network
    ::AlgorandGoal::StartNetwork $NETWORK_NAME $NETWORK_TEMPLATE $TEST_ALGO_DIR $TEST_ROOT_DIR

    # Create a new wallet
    set WALLET_1_NAME Wallet_1_$TIME_STAMP
    set WALLET_1_PASSWORD 1234
    set WALLET_2_NAME Wallet_2_$TIME_STAMP
    set WALLET_2_PASSWORD 5678
    set WALLET_3_NAME Wallet_3_$TIME_STAMP
    set WALLET_3_PASSWORD 1234567

    set PRIMARY_WALLET_NAME unencrypted-default-wallet

    set WALLET_1_PASSPHRASE [::AlgorandGoal::CreateWallet $WALLET_1_NAME $WALLET_1_PASSWORD $TEST_PRIMARY_NODE_DIR]
    # Verify that the wallet exists
    ::AlgorandGoal::VerifyWallet $WALLET_1_NAME  $TEST_PRIMARY_NODE_DIR
    # Associate a new account with the wallet
    set ACCOUNT_1_ADDRESS [::AlgorandGoal::CreateAccountForWallet $WALLET_1_NAME $WALLET_1_PASSWORD $TEST_PRIMARY_NODE_DIR]
    # Verify that the account exists
    ::AlgorandGoal::VerifyAccount $WALLET_1_NAME $WALLET_1_PASSWORD $ACCOUNT_1_ADDRESS $TEST_PRIMARY_NODE_DIR
    puts "WALLET_1_PASSPHRASE: $WALLET_1_PASSPHRASE"

    set WALLET_2_PASSPHRASE [::AlgorandGoal::CreateWallet $WALLET_2_NAME $WALLET_2_PASSWORD $TEST_PRIMARY_NODE_DIR]
    # Verify that the wallet exists
    ::AlgorandGoal::VerifyWallet $WALLET_2_NAME  $TEST_PRIMARY_NODE_DIR
    # Associate a new account with the wallet
    set ACCOUNT_2_ADDRESS [::AlgorandGoal::CreateAccountForWallet $WALLET_2_NAME $WALLET_2_PASSWORD $TEST_PRIMARY_NODE_DIR]
    # Verify that the account exists
    ::AlgorandGoal::VerifyAccount $WALLET_2_NAME $WALLET_2_PASSWORD $ACCOUNT_2_ADDRESS $TEST_PRIMARY_NODE_DIR
    puts "WALLET_2_PASSPHRASE: $WALLET_2_PASSPHRASE"

    set WALLET_3_PASSPHRASE [::AlgorandGoal::CreateWallet $WALLET_3_NAME $WALLET_3_PASSWORD $TEST_PRIMARY_NODE_DIR]
    # Verify that the wallet exists
    ::AlgorandGoal::VerifyWallet $WALLET_3_NAME  $TEST_PRIMARY_NODE_DIR
    # Associate a new account with the wallet
    set ACCOUNT_3_ADDRESS [::AlgorandGoal::CreateAccountForWallet $WALLET_3_NAME $WALLET_3_PASSWORD $TEST_PRIMARY_NODE_DIR]
    # Verify that the account exists
    ::AlgorandGoal::VerifyAccount $WALLET_3_NAME $WALLET_3_PASSWORD $ACCOUNT_3_ADDRESS $TEST_PRIMARY_NODE_DIR
    puts "WALLET_3_PASSPHRASE: $WALLET_3_PASSPHRASE"

    # Check the balance of the primary account
    set PRIMARY_ACCOUNT_ADDRESS [::AlgorandGoal::GetAccountAddress $PRIMARY_WALLET_NAME $TEST_PRIMARY_NODE_DIR]

    set PRIMARY_ACCOUNT_BALANCE [::AlgorandGoal::GetAccountBalance $PRIMARY_WALLET_NAME $PRIMARY_ACCOUNT_ADDRESS $TEST_PRIMARY_NODE_DIR]

    puts "Primary Account Address: $PRIMARY_ACCOUNT_ADDRESS   Balance: $PRIMARY_ACCOUNT_BALANCE"

    # Transfer Algos from primary account to account

    set MINIMUM_BALANCE 100000
    set TRANSFER_AMOUNT [expr {10 * $MINIMUM_BALANCE}]
    set FEE_AMOUNT 1000
    set TRANSACTION_ID [::AlgorandGoal::AccountTransfer $PRIMARY_WALLET_NAME "" $PRIMARY_ACCOUNT_ADDRESS $TRANSFER_AMOUNT $ACCOUNT_1_ADDRESS $FEE_AMOUNT $TEST_PRIMARY_NODE_DIR ""]

    # Print the transaction id
    puts "TRANSACTION_ID: $TRANSACTION_ID"

    set PRIMARY_NODE_ADDRESS [ ::AlgorandGoal::GetAlgodNetworkAddress $TEST_PRIMARY_NODE_DIR ]
    puts "Primary Node Address: $PRIMARY_NODE_ADDRESS"

    # Check to make sure that the transfer is reflected in the to account
    ::AlgorandGoal::WaitForAccountBalance $WALLET_1_NAME $ACCOUNT_1_ADDRESS $TRANSFER_AMOUNT $TEST_PRIMARY_NODE_DIR

    # Check the balance of the primary account
    set PRIMARY_ACCOUNT_BALANCE [::AlgorandGoal::GetAccountBalance $PRIMARY_WALLET_NAME $PRIMARY_ACCOUNT_ADDRESS $TEST_PRIMARY_NODE_DIR]
    puts "Primary Account Balance: $PRIMARY_ACCOUNT_BALANCE"

    # Attempt double spend by sending algos from account 1 to both account 2 and 3
    # AMOUNT-MINIMUM alone (below) would not leave any overhead to pay fees. So, transfer AMOUNT-2*MINIMUM instead.
    set TRANSFER_1_AMOUNT [expr $TRANSFER_AMOUNT - $MINIMUM_BALANCE - $MINIMUM_BALANCE]

    set TRANSACTION_ID_2 [::AlgorandGoal::AccountTransfer $WALLET_1_NAME $WALLET_1_PASSWORD $ACCOUNT_1_ADDRESS $TRANSFER_1_AMOUNT $ACCOUNT_2_ADDRESS $FEE_AMOUNT $TEST_PRIMARY_NODE_DIR ""]
 
    # perform the following operation :
    # set TRANSACTION_ID_3 [::AlgorandGoal::AccountTransfer $WALLET_1_NAME $WALLET_1_PASSWORD $ACCOUNT_1_ADDRESS $TRANSFER_1_AMOUNT $ACCOUNT_3_ADDRESS $FEE_AMOUNT $TEST_PRIMARY_NODE_DIR ""]
    # but expect to see that it's failing due to double spending.
    set timeout 60
    spawn goal clerk send --fee $FEE_AMOUNT --wallet $WALLET_1_NAME --amount $TRANSFER_1_AMOUNT --from $ACCOUNT_1_ADDRESS --to $ACCOUNT_3_ADDRESS -d $TEST_PRIMARY_NODE_DIR
    expect {
        timeout { close; ::AlgorandGoal::Abort "Timed out transferring funds"  }
        "Please enter the password for wallet '$WALLET_1_NAME':" { send "$WALLET_1_PASSWORD\r"; exp_continue }
        -re {transaction ID: ([A-Z0-9]{52})} { exp_continue }
        eof { catch wait result; if { [lindex $result 3] != 1 } { ::AlgorandGoal::Abort "account transfer did not fail: error code [lindex $result 3]"} }
    }

    # Wait for Wallet1 balance to go to minimum on both primary and node1
    set EXPECTED_BALANCE [expr $TRANSFER_AMOUNT - $TRANSFER_1_AMOUNT - $FEE_AMOUNT]
    ::AlgorandGoal::WaitForAccountBalance $WALLET_1_NAME $ACCOUNT_1_ADDRESS $EXPECTED_BALANCE $TEST_PRIMARY_NODE_DIR
    ::AlgorandGoal::WaitForAccountBalance $WALLET_1_NAME $ACCOUNT_1_ADDRESS $EXPECTED_BALANCE $TEST_NODE_1_DIR
    # Check Wallet 1 account balance on primary node
    set WALLET_1_ACCOUNT_BALANCE_NODE_PRIMARY [::AlgorandGoal::GetAccountBalance $WALLET_1_NAME $ACCOUNT_1_ADDRESS $TEST_PRIMARY_NODE_DIR]
    puts "WALLET_1_ACCOUNT_BALANCE_NODE_PRIMARY: $WALLET_1_ACCOUNT_BALANCE_NODE_PRIMARY"
    # Check Wallet 3 account balance
    set WALLET_2_ACCOUNT_BALANCE_NODE_PRIMARY [::AlgorandGoal::GetAccountBalance $WALLET_2_NAME $ACCOUNT_2_ADDRESS $TEST_PRIMARY_NODE_DIR]
    puts "WALLET_2_ACCOUNT_BALANCE_NODE_PRIMARY: $WALLET_2_ACCOUNT_BALANCE_NODE_PRIMARY"
    # Check Wallet 3 account balance
    set WALLET_3_ACCOUNT_BALANCE_NODE_PRIMARY [::AlgorandGoal::GetAccountBalance $WALLET_3_NAME $ACCOUNT_3_ADDRESS $TEST_PRIMARY_NODE_DIR]
    puts "WALLET_3_ACCOUNT_BALANCE_NODE_PRIMARY: $WALLET_3_ACCOUNT_BALANCE_NODE_PRIMARY"

    # Check Wallet 1 account balance on node 1
    set WALLET_1_ACCOUNT_BALANCE_NODE_1 [::AlgorandGoal::GetAccountBalance $WALLET_1_NAME $ACCOUNT_1_ADDRESS $TEST_NODE_1_DIR]
    puts "WALLET_1_ACCOUNT_BALANCE_NODE_1: $WALLET_1_ACCOUNT_BALANCE_NODE_1"
    # Check Wallet 2 account balance
    set WALLET_2_ACCOUNT_BALANCE_NODE_1 [::AlgorandGoal::GetAccountBalance $WALLET_2_NAME $ACCOUNT_2_ADDRESS $TEST_NODE_1_DIR]
    puts "WALLET_2_ACCOUNT_BALANCE_NODE_1: $WALLET_2_ACCOUNT_BALANCE_NODE_1"
    # Check Wallet 3 account balance
    set WALLET_3_ACCOUNT_BALANCE_NODE_1 [::AlgorandGoal::GetAccountBalance $WALLET_3_NAME $ACCOUNT_3_ADDRESS $TEST_NODE_1_DIR]
    puts "WALLET_3_ACCOUNT_BALANCE_NODE_1: $WALLET_3_ACCOUNT_BALANCE_NODE_1"

    # Verify that Wallet 1 balance is EXPECTED_BALANCE and and Wallet 2 + Wallet 3 balance totals to transfer amount on Primary node
    if {   $WALLET_1_ACCOUNT_BALANCE_NODE_PRIMARY  !=  $EXPECTED_BALANCE } then { ::AlgorandGoal::Abort "Double Spending Test Failed!"}
    if { ( $WALLET_2_ACCOUNT_BALANCE_NODE_PRIMARY + $WALLET_3_ACCOUNT_BALANCE_NODE_PRIMARY ) !=  $TRANSFER_1_AMOUNT } then { ::AlgorandGoal::Abort "Double Spending Test Failed!"}

    # Verify that Wallet 1 balance is EXPECTED_BALANCE and and Wallet 2 + Wallet 3 balance totals to transfer amount on Node 1
    if {   $WALLET_1_ACCOUNT_BALANCE_NODE_1  !=  $EXPECTED_BALANCE  } then { ::AlgorandGoal::Abort "Double Spending Test Failed!"}
    if { ( $WALLET_2_ACCOUNT_BALANCE_NODE_1 + $WALLET_3_ACCOUNT_BALANCE_NODE_1 ) !=  $TRANSFER_1_AMOUNT } then { ::AlgorandGoal::Abort "Double Spending Test Failed!"}

    puts "SUCCESS: Double spending test successful"

    # Shutdown the network
    ::AlgorandGoal::StopNetwork $NETWORK_NAME $TEST_ALGO_DIR $TEST_ROOT_DIR

    exit 0

} EXCEPTION ] } {
   ::AlgorandGoal::Abort "ERROR in createWalletTest: $EXCEPTION"
}