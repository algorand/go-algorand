# Algorand Goal Expect Utility Package
namespace eval ::AlgorandGoal {

  # Export Procedures
  namespace export Info
  namespace export Abort
  namespace export StartNetwork
  namespace export StopNetwork
  namespace export CreateWallet
  namespace export VerifyWallet
  namespace export RecoverWallet
  namespace export CreateAccountForWallet
  namespace export GetAccountAddress
  namespace export GetAccountBalance
  namespace export GetAccountRewards
  namespace export AccountTransfer
  namespace export WaitForAccountBalance
  namespace export GetHighestFundedAccountForWallet
  namespace export GetAlgodNetworkAddress
  namespace export GetKMDNetworkAddress
  namespace export GetLedgerSupply
  namespace export WaitForRound
  namespace export Report

  # My Variables
   set version 1.0
   set description "Algorand Goal Expect Package"

  # Variable for the path of the script
   variable home [file join [pwd] [file dirname [info script]]]
}

# Definition of the procedure MyProcedure
proc ::AlgorandGoal::Info {} {
   puts AlgorandGoal::description
}

package provide AlgorandGoal $AlgorandGoal::version
package require Tcl 8.0


# Utility method to abort out of this script
proc ::AlgorandGoal::Abort { ERROR } {
    puts "Aborting with Error: $ERROR"

    if { $::GLOBAL_TEST_ALGO_DIR != "" && $::GLOBAL_TEST_ROOT_DIR != "" } {
        # terminate child algod processes, if there are active child processes the test will hang on a test failure
        puts "GLOBAL_TEST_ALGO_DIR $::GLOBAL_TEST_ALGO_DIR"
        puts "GLOBAL_TEST_ROOT_DIR $::GLOBAL_TEST_ROOT_DIR"
        puts "GLOBAL_NETWORK_NAME $::GLOBAL_NETWORK_NAME"
        ::AlgorandGoal::StopNetwork $::GLOBAL_NETWORK_NAME $::GLOBAL_TEST_ALGO_DIR $::GLOBAL_TEST_ROOT_DIR
    }
    exit 1
}

# Start the network
proc ::AlgorandGoal::StartNetwork { NETWORK_NAME NETWORK_TEMPLATE TEST_ALGO_DIR TEST_ROOT_DIR } {
    if { [catch {
        set ::GLOBAL_TEST_ALGO_DIR $TEST_ALGO_DIR
        set ::GLOBAL_TEST_ROOT_DIR $TEST_ROOT_DIR
        set ::GLOBAL_NETWORK_NAME $NETWORK_NAME

        set timeout 30
        # Create network
        puts "network create $NETWORK_NAME"
        spawn goal network create --network $NETWORK_NAME --template $NETWORK_TEMPLATE --datadir $TEST_ALGO_DIR --rootdir $TEST_ROOT_DIR
        expect {
            timeout { close; ::AlgorandGoal::Abort "Failed to create network" }
            "^Network $NETWORK_NAME created under*" { puts "Network $NETWORK_NAME created" ; close  }
            close
        }

        # Start network
        puts "network start $NETWORK_NAME"
        spawn goal network start -d $TEST_ALGO_DIR -r $TEST_ROOT_DIR
        expect {
            timeout { close; ::AlgorandGoal::Abort "Failed to start network"  }
            "*Network started under* { puts "Network $NETWORK_NAME started"  ;close  }
            close
        }

        # Check network status
        puts "network status $NETWORK_NAME"
        spawn goal network status -d $TEST_ALGO_DIR -r $TEST_ROOT_DIR
        expect {
            timeout { close; ::AlgorandGoal::Abort "Failed to get network status"  }
            "*Error getting status*" { close; ::AlgorandGoal::Abort "error getting network status: $expect_out(buffer)""}
            "^Network Started under*"   { puts "Network $NETWORK_NAME status ok"; close }
            close
        }
        puts "StartNetwork complete"
    } EXCEPTION ] } {
       ::AlgorandGoal::Abort "ERROR in StartNetwork: $EXCEPTION"
    }
}

# Stop the network
proc ::AlgorandGoal::StopNetwork { NETWORK_NAME TEST_ALGO_DIR TEST_ROOT_DIR } {
    set timeout 60
    puts "Stopping network: $NETWORK_NAME"
    spawn goal network stop -d $TEST_ALGO_DIR -r $TEST_ROOT_DIR
    expect {
        timeout { close; ::AlgorandGoal::Abort "Failed to shutdown network" }
        "Network Stopped under*" {set NETWORK_STOP_MESSAGE $expect_out(buffer); close}
    }
    puts $NETWORK_STOP_MESSAGE
}

# Create a new wallet
proc ::AlgorandGoal::CreateWallet { WALLET_NAME WALLET_PASSWORD TEST_PRIMARY_NODE_DIR } {
    if { [catch {
        set WALLET_PASS_PHRASE "NOT SET"
        spawn goal wallet new $WALLET_NAME -d $TEST_PRIMARY_NODE_DIR

        expect {
            timeout {::AlgorandGoal::Abort "CreateWallet failed"  }
            "Please choose a password for wallet*" { send "$WALLET_PASSWORD\r" }
        }
        expect {
            timeout {::AlgorandGoal::Abort "CreateWallet failed"  }
            "Please confirm*" { send "$WALLET_PASSWORD\r"}
        }
        expect {
             timeout {::AlgorandGoal::Abort "CreateWallet failed"  }
             "Would you like to see it now? (Y/n):" { send "y\r" }
        }
        expect {
              timeout {::AlgorandGoal::Abort "CreateWallet failed"  }
              "Keep this information safe -- never share it with anyone!" {}
        }
        expect {
             timeout {::AlgorandGoal::Abort "CreateWallet failed"  }
             -re {32m([a-z ]+)} {set WALLET_PASS_PHRASE $expect_out(1,string); close;}
        }
    } EXCEPTION ] } {
       ::AlgorandGoal::Abort "ERROR in CreateWallet: $EXCEPTION"
    }
    return $WALLET_PASS_PHRASE
}

# Verify that the wallet exists
proc ::AlgorandGoal::VerifyWallet { WALLET_NAME TEST_PRIMARY_NODE_DIR } {
    if { [catch {
        spawn goal wallet list -d $TEST_PRIMARY_NODE_DIR
        expect {
             timeout { ::AlgorandGoal::Abort "Failed to see expected input for spawn goal wallet list" }
             "*$WALLET_NAME*" {close}
        }
    } EXCEPTION ] } {
       ::AlgorandGoal::Abort "ERROR in VerifyWallet: $EXCEPTION"
    }
}

proc ::AlgorandGoal::RecoverWallet { NEW_WALLET_NAME WALLET_PASSPHRASE NEW_WALLET_PASSWORD TEST_PRIMARY_NODE_DIR } {
    if { [catch {
        spawn goal wallet new -r $NEW_WALLET_NAME -d $TEST_PRIMARY_NODE_DIR
           expect {
               timeout { puts "TIMEOUT"    }
               {Please type your recovery mnemonic below, and hit return when you are done:*} { send "$WALLET_PASSPHRASE\r" }
            }
        for { set index 1}  {$index <= 5} {incr index} {
            expect {
               timeout { puts "TIMEOUT"  }
               {Please choose a password for wallet* } { send "$NEW_WALLET_PASSWORD\r"}
               {Please confirm the password:*} { send "$NEW_WALLET_PASSWORD\r"}
               {Creating wallet...*} {puts $expect_out(buffer) }
               -re {Created wallet '([-a-zA-Z0-9_]+)'} {set RECOVERED_WALLET_NAME $expect_out(1,string) }
            }
        }
        puts "Recovered wallet: $RECOVERED_WALLET_NAME"
    } EXCEPTION ] } {
       ::AlgorandGoal::Abort "ERROR in RecoverWallet: $EXCEPTION"
    }
    return $RECOVERED_WALLET_NAME
}

# Associate a new account with a specific wallet
proc ::AlgorandGoal::CreateAccountForWallet { WALLET_NAME WALLET_PASSWORD TEST_PRIMARY_NODE_DIR } {
    if { [catch {
        spawn goal account new -w $WALLET_NAME -d $TEST_PRIMARY_NODE_DIR
        while 1 {
            expect {
                timeout { break; ::AlgorandGoal::Abort "Failed to see new account created for wallet $WALLET_NAME" }
                "Please enter the password for wallet*" { send "$WALLET_PASSWORD\r" }
                 -re {Created new account with address ([a-zA-Z0-9]+)} {set ACCOUNT_ADDRESS $expect_out(1,string) ;close; break }
            }
        }
        puts "Account Address: $ACCOUNT_ADDRESS"
    } EXCEPTION ] } {
       ::AlgorandGoal::Abort "ERROR in VerifyAccount: $EXCEPTION"
    }
    return $ACCOUNT_ADDRESS
}

# Verify that account exists
proc ::AlgorandGoal::VerifyAccount { WALLET_NAME WALLET_PASSWORD ACCOUNT_ADDRESS TEST_PRIMARY_NODE_DIR } {
    if { [catch {
        spawn goal account list -w $WALLET_NAME -d $TEST_PRIMARY_NODE_DIR
        while 1 {
            expect {
                timeout {break; ::AlgorandGoal::Abort "Failed to see expected account: $ACCOUNT_ADDRESS"}
                "Please enter the password for wallet*" { send "$WALLET_PASSWORD\r" }
                -re {\t([A-Z0-9]+)\t([A-Z0-9]+)} {set RETURN_ACCOUNT_ADDRESS $expect_out(1,string); break  }
            }
        }
        puts "Account Address: $RETURN_ACCOUNT_ADDRESS "
    } EXCEPTION ] } {
       ::AlgorandGoal::Abort "ERROR in VerifyAccount: $EXCEPTION"
    }
}

# Delete an account
proc ::AlgorandGoal::DeleteAccount { WALLET_NAME ACCOUNT_ADDRESS } {
    spawn goal account delete --wallet $WALLET_NAME --address $ACCOUNT_ADDRESS
    expect {*}
}

#Select an account from the Wallet
proc ::AlgorandGoal::GetAccountAddress { WALLET_NAME TEST_PRIMARY_NODE_DIR } {
    if { [catch {
        spawn goal account list -w $WALLET_NAME -d $TEST_PRIMARY_NODE_DIR
        expect {
            timeout { ::AlgorandGoal::Abort "Failed to find primary wallet: $WALLET_NAME"  }
            -re {\[online\]\t([a-zA-Z0-9]+)\t([a-zA-Z0-9]+)\t([0-9]+)} {set ACCOUNT_ADDRESS $expect_out(2,string); set ACCOUNT_BALANCE $expect_out(3,string);close }
        }
        puts "Primary Account Address: $ACCOUNT_ADDRESS   Balance: $ACCOUNT_BALANCE"
    } EXCEPTION ] } {
       ::AlgorandGoal::Abort "ERROR in GetAccountAddress: $EXCEPTION"
    }
    return $ACCOUNT_ADDRESS
}

# Return the Account Balance
proc ::AlgorandGoal::GetAccountBalance { WALLET_NAME ACCOUNT_ADDRESS TEST_PRIMARY_NODE_DIR } {
    if { [ catch {
        spawn goal account balance -w $WALLET_NAME -a $ACCOUNT_ADDRESS -d $TEST_PRIMARY_NODE_DIR
        expect {
            timeout { ::AlgorandGoal::Abort "Failed to get account balance for wallet $WALLET_NAME and account $ACCOUNT_ADDRESS"  }
            -re {\d+} {set ACCOUNT_BALANCE  $expect_out(0,string)}
        }
        puts "Wallet: $WALLET_NAME, Account: $ACCOUNT_ADDRESS, Balance: $ACCOUNT_BALANCE"
    } EXCEPTION ] } {
       ::AlgorandGoal::Abort "ERROR in GetAccountBalance: $EXCEPTION"
    }
    return $ACCOUNT_BALANCE
}

# Return the Account Rewards
proc ::AlgorandGoal::GetAccountRewards { WALLET_NAME ACCOUNT_ADDRESS TEST_PRIMARY_NODE_DIR } {
    spawn goal account rewards -w $WALLET_NAME -a $ACCOUNT_ADDRESS -d $TEST_PRIMARY_NODE_DIR
    expect {
        timeout { ::AlgorandGoal::Abort "Failed to get account rewards for wallet $WALLET_NAME and account $ACCOUNT_ADDRESS"  }
        -re {\d+} {set ACCOUNT_EARNINGS  $expect_out(0,string)}
    }
    puts "Wallet: $WALLET_NAME, Account: $ACCOUNT_ADDRESS, Rewards: $ACCOUNT_EARNINGS"
    return $ACCOUNT_EARNINGS
}

# Account Transfer
proc ::AlgorandGoal::AccountTransfer { FROM_WALLET_NAME FROM_WALLET_PASSWORD FROM_ACCOUNT_ADDRESS TRANSFER_AMOUNT TO_ACCOUNT_ADDRESS FEE_AMOUNT TEST_PRIMARY_NODE_DIR } {
    if { [ catch {
        set TRANSACTION_ID "NOT SET"
        spawn goal clerk send --fee $FEE_AMOUNT --wallet $FROM_WALLET_NAME --amount $TRANSFER_AMOUNT --from $FROM_ACCOUNT_ADDRESS --to $TO_ACCOUNT_ADDRESS -d $TEST_PRIMARY_NODE_DIR -N
        expect {
            timeout { ::AlgorandGoal::Abort "Failed to transfer funds"  }
            "Please enter the password for wallet '$FROM_WALLET_NAME':" { send "$FROM_WALLET_PASSWORD\r" }
            -re {[A-Z0-9]{52}} {set TRANSACTION_ID $expect_out(0,string); close }
        }
    } EXCEPTION ] } {
       ::AlgorandGoal::Abort "ERROR in AccountTransfer: $EXCEPTION"
    }
    return $TRANSACTION_ID
}

# Wait for Account to achieve given balance
proc ::AlgorandGoal::WaitForAccountBalance { WALLET_NAME ACCOUNT_ADDRESS EXPECTED_BALANCE TEST_PRIMARY_NODE_DIR } {
    if { [catch {
    set i 0
        while 1 {
            incr i
            exec sleep 2

            # Retrieve the target account balance
            spawn goal account balance -a $ACCOUNT_ADDRESS -w $WALLET_NAME -d $TEST_PRIMARY_NODE_DIR
            expect {
                timeout { ::AlgorandGoal::Abort "Failed to get account balance"  }
                -re {(\d+)} {set ACCOUNT_BALANCE $expect_out(0,string); close }
            }
            puts "Account Balance: $ACCOUNT_BALANCE"

            # Validate the new account balance
            if { $ACCOUNT_BALANCE == $EXPECTED_BALANCE } {
                puts "Account balance OK: $ACCOUNT_BALANCE"; break
            } else {
               puts "Account balance: ''$ACCOUNT_BALANCE' does not match expected balance: '$EXPECTED_BALANCE'"
               if { $i >= 10 } then { ::AlgorandGoal::Abort "Account balance $ACCOUNT_BALANCE does not match expected amount: $EXPECTED_BALANCE"; break;}
            }
        }
    } EXCEPTION ] } {
       ::AlgorandGoal::Abort "ERROR in WaitForAccountBalance: $EXCEPTION"
    }
    return $ACCOUNT_BALANCE
}

# Return the highest funded account for the given Wallet
proc ::AlgorandGoal::GetHighestFundedAccountForWallet { WALLET_NAME NODE_DIR } {
    if { [catch {
        spawn goal account list -w $WALLET_NAME -d $NODE_DIR
        set ACCOUNT_BALANCE 0
        set ACCOUNT_ADDRESS "NONE"
        expect {
            timeout { ::AlgorandGoal::Abort "Failed to find primary wallet: $WALLET_NAME"  }
            -re {\[online\]\t([a-zA-Z0-9]+)\t([a-zA-Z0-9]+)\t([0-9]+)} {
                    set CURRENT_ACCOUNT_ADDRESS $expect_out(2,string);
                    set  CURRENT_ACCOUNT_BALANCE $expect_out(3,string);
                    if { $CURRENT_ACCOUNT_BALANCE > $ACCOUNT_BALANCE } then { set ACCOUNT_BALANCE $CURRENT_ACCOUNT_BALANCE; set ACCOUNT_ADDRESS $CURRENT_ACCOUNT_ADDRESS };
                    close;
                }
        }
        puts "Account Address: $ACCOUNT_ADDRESS   Balance: $ACCOUNT_BALANCE"
    } EXCEPTION ] } {
       ::AlgorandGoal::Abort "ERROR in GetHighestFundedAccountForWallet: $EXCEPTION"
    }
    return $ACCOUNT_ADDRESS
}

# Return the Algod Network Address for the node directory
proc ::AlgorandGoal::GetAlgodNetworkAddress { TEST_PRIMARY_NODE_DIR } {
    if { [ catch {
        set NET_FILE [open $TEST_PRIMARY_NODE_DIR/algod.net]
        set PRIMARY_NODE_ADDRESS [string trim [read $NET_FILE ]]
        puts "Primary node address is: $PRIMARY_NODE_ADDRESS"
    } EXCEPTION ] } {
       ::AlgorandGoal::Abort "ERROR in GetAlgodNetworkAddress: $EXCEPTION"
    }
    return $PRIMARY_NODE_ADDRESS
}

# Return the KMD Network Address
proc ::AlgorandGoal::GetKMDNetworkAddress { TEST_PRIMARY_NODE_DIR } {
    if { [ catch {
        set KMD_DIR [glob -type d -directory $TEST_PRIMARY_NODE_DIR kmd-v*]
        set NET_FILE [open $KMD_DIR/kmd.net]
        set KMD_NET_ADDRESS [string trim [read $NET_FILE ]]
        puts "KMD network address is: $KMD_NET_ADDRESS"
    } EXCEPTION ] } {
       ::AlgorandGoal::Abort "ERROR in GetKMDNetworkAddress: $EXCEPTION"
    }
    return $KMD_NET_ADDRESS
}

# Use curl to check if a network address supports CORS
proc ::AlgorandGoal::CheckNetworkAddressForCors { NET_ADDRESS } {
    if { [ catch {
        spawn curl -X OPTIONS -H "Origin: http://algorand.com" --head $NET_ADDRESS
        expect {
            timeout { close; ::AlgorandGoal::Abort "Timeout failure in CheckNetworkAddressForCors" }
            "Access-Control-Allow-Origin" { puts "success" ; close  }
            close
        }
    } EXCEPTION ] } {
       ::AlgorandGoal::Abort "ERROR in CheckNetworkAddressForCors: $EXCEPTION"
    }
}

# Show the Ledger Supply
proc ::AlgorandGoal::GetLedgerSupply { TEST_PRIMARY_NODE_DIR } {
    if { [ catch {
        spawn goal ledger supply -d $TEST_PRIMARY_NODE_DIR
        expect {
            timeout { ::AlgorandGoal::Abort "Get Ledger Supply timed out"  }
            -re {Round: (\d+)} {set ROUND $expect_out(1,string); exp_continue }
            -re {Total Money: (\d+)} {set TOTAL_MONEY $expect_out(1,string); exp_continue }
            -re {Online Money: (\d+)} {set ONLINE_MONEY $expect_out(1,string) }
        }
        puts "Round: $ROUND"
        puts "Total Money: $TOTAL_MONEY"
        puts "Online Money: $ONLINE_MONEY"
    } EXCEPTION ] } {
       ::AlgorandGoal::Abort "ERROR in GetLedgerSupply: $EXCEPTION"
    }
}

# Create a multisig address from two accounts
proc ::AlgorandGoal::CreateOneOfTwoMultisigForWallet { ADDRESS_1 ADDRESS_2 WALLET_NAME WALLET_PASSWORD TEST_PRIMARY_NODE_DIR } {
    if { [ catch {
        spawn goal account multisig new $ADDRESS_1 $ADDRESS_2 -T 1 -d $TEST_PRIMARY_NODE_DIR -w $WALLET_NAME
        expect {
            timeout { ::AlgorandGoal::Abort "Timed out creating a multisig account from $ADDRESS_1 and $ADDRESS_2"  }
            "Please enter the password for wallet*" { send "$WALLET_PASSWORD\r" }
            -re {Created new account with address ([a-zA-Z0-9]+)} {
                    set MULTISIG_ADDRESS $expect_out(1,string);
                    close;
            }
        }
    } EXCEPTION ] } {
       ::AlgorandGoal::Abort "ERROR in CreateOneOfTwoMultisigForWallet: $EXCEPTION"
    }
    return $MULTISIG_ADDRESS
}

# Query info for a 1-of-2 multisig account, and verify
proc ::AlgorandGoal::VerifyMultisigInfoForOneOfTwoMultisig { MULTISIG_ADDRESS ADDRESS_1 ADDRESS_2 WALLET_NAME TEST_PRIMARY_NODE_DIR } {
    if { [ catch {
        spawn goal account multisig info --address $MULTISIG_ADDRESS -d $TEST_PRIMARY_NODE_DIR -w $WALLET_NAME
        expect {
            timeout { ::AlgorandGoal::Abort "Timed out querying info about multisig account $MULTISIG_ADDRESS"  }
            -re {Version: (\d+)\r\nThreshold: (\d+)\r\nPublic keys:\r\n  ([a-zA-Z0-9]+)\r\n  ([a-zA-Z0-9]+)\r\n} {
                set VERSION $expect_out(1,string);
                set THRESHOLD $expect_out(2,string);
                set ADDRESS_RESPONSE_1 $expect_out(3,string);
                set ADDRESS_RESPONSE_2 $expect_out(4,string);
                close;
            }
        }
        if { $THRESHOLD != "1" } then { ::AlgorandGoal::Abort "Key threshold $THRESHOLD is not the expected threshold of 1"  }
        if { $ADDRESS_RESPONSE_1 != $ADDRESS_1 } then { ::AlgorandGoal::Abort "Responded address $ADDRESS_RESPONSE_1 is not the expected address $ADDRESS_1"  }
        if { $ADDRESS_RESPONSE_2 != $ADDRESS_2 } then { ::AlgorandGoal::Abort "Responded address $ADDRESS_RESPONSE_2 is not the expected address $ADDRESS_2"  }
    } EXCEPTION ] } {
       ::AlgorandGoal::Abort "ERROR in VerifyMultisigInfoForOneOfTwoMultisig: $EXCEPTION"
    }
}

# Delete a multisig address
proc ::AlgorandGoal::DeleteMultisigAccount { MULTISIG_ADDRESS TEST_PRIMARY_NODE_DIR } {
    if { [ catch {
        spawn goal account multisig delete --address $MULTISIG_ADDRESS -d $TEST_PRIMARY_NODE_DIR
        expect {*}
    } EXCEPTION ] } {
       ::AlgorandGoal::Abort "ERROR in DeleteMultisigAccount: $EXCEPTION"
    }
}

# Wait for node to reach a specific round
proc ::AlgorandGoal::WaitForRound { WAIT_FOR_ROUND_NUMBER TEST_PRIMARY_NODE_DIR } {

   puts "node status waiting for Round $WAIT_FOR_ROUND_NUMBER "

    if { [catch {
    set i 0
        while 1 {
            incr i
            exec sleep 5

            # Check node status
            puts "spawn node status  "
            spawn goal node status -d $TEST_PRIMARY_NODE_DIR
            expect {
                timeout { ::AlgorandGoal::Abort "goal node status timed out"  }
                -re {Last committed block: (\d+)} {set BLOCK $expect_out(1,string); exp_continue }
                -re {Time since last block: ([0-9]*\.?[0-9]*)s} {set TIME_SINCE_LAST_BLOCK $expect_out(1,string); exp_continue }
                -re {Sync Time: ([0-9]*\.?[0-9]*)s} {set SYNC_TIME $expect_out(1,string); exp_continue }
                -re {Last consensus protocol: ([-+=.:/_a-zA-Z0-9]+)} {set LAST_CONSENSUS_PROTOCOL $expect_out(1,string); exp_continue }
                -re {Next consensus protocol: ([-+=.:/_a-zA-Z0-9]+)} {set NEXT_CONSENSUS_PROTOCOL $expect_out(1,string); exp_continue }
                -re {Round for next consensus protocol: (\d+)} {set ROUND_FOR_NEXT_CONSENSUS_PROTOCOL $expect_out(1,string); exp_continue }
                -re {Next consensus protocol supported: (\w+)} {set NEXT_CONSENSUS_PROTOCOL_SUPPORTED $expect_out(1,string); exp_continue }
                -re {Has Synced Since Startup: (\w+)} {set HAS_SYNCHED_SINCE_STARTUP $expect_out(1,string); exp_continue }
                -re {Genesis ID: (\w+)} {set GENESIS_ID $expect_out(1,string); exp_continue }
                -re {Genesis hash: (\w+)} {set GENESIS_HASH $expect_out(1,string); close }
            }
            puts "node status check complete"
            puts "block: $BLOCK"
            puts "time since last block: $TIME_SINCE_LAST_BLOCK"
            puts "sync time: $SYNC_TIME"
            puts "last consensus protocol: $LAST_CONSENSUS_PROTOCOL"
            puts "next consensus protocol: $NEXT_CONSENSUS_PROTOCOL"
            puts "round for next consensus protocol: $ROUND_FOR_NEXT_CONSENSUS_PROTOCOL"
            puts "next consensus protocol supported: $NEXT_CONSENSUS_PROTOCOL_SUPPORTED"
            puts "has synced since startup: $HAS_SYNCHED_SINCE_STARTUP"
            puts "genesis id: $GENESIS_ID"
            puts "genesis hash: $GENESIS_HASH"

            # Check if the round number is reached
            if { $BLOCK >= $WAIT_FOR_ROUND_NUMBER } {
                puts "Reached Round number: $WAIT_FOR_ROUND_NUMBER"; break
            } else {
               puts "Curren Round: '$BLOCK' is less than wait for round: '$WAIT_FOR_ROUND_NUMBER'"
               if { $i >= 10 } then { ::AlgorandGoal::Abort " Current Round $BLOCK did not reach $WAIT_FOR_ROUND_NUMBER   "; break;}
            }
        }
    } EXCEPTION ] } {
       ::AlgorandGoal::Abort "ERROR in WaitForRound: $EXCEPTION"
    }
    return $BLOCK
}

# Generate report
proc ::AlgorandGoal::Report { TEST_PRIMARY_NODE_DIR } {
    if { [ catch {
        spawn goal report -d $TEST_PRIMARY_NODE_DIR
        expect {
            timeout { ::AlgorandGoal::Abort "goal report timed out"  }
            "source code available at https://github.com/algorand/go-algorand" {puts "goal -v ok"}
            -re {Genesis ID from genesis.json: *} {puts "genesis ID from genesis.json ok"}
            -re {Last commited block: (\d+)} {puts "status check ok"}
        }
    } EXCEPTION ] } {
    ::AlgorandGoal::Abort "ERROR in GetLedgerSupply: $EXCEPTION"
    }
}