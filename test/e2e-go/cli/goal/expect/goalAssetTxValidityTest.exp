#!/usr/bin/expect -f
set err 0
log_user 1

source  goalExpectCommon.exp

set TEST_ALGO_DIR [lindex $argv 0]
set TEST_DATA_DIR [lindex $argv 1]

puts "TEST_ALGO_DIR: $TEST_ALGO_DIR"
puts "TEST_DATA_DIR: $TEST_DATA_DIR"

set TIME_STAMP [clock seconds]

set TEST_ROOT_DIR $TEST_ALGO_DIR/root
set TEST_PRIMARY_NODE_DIR $TEST_ROOT_DIR/Primary/
set NETWORK_NAME test_net_expect_$TIME_STAMP
set NETWORK_TEMPLATE "$TEST_DATA_DIR/nettemplates/TwoNodes50Each.json"

if { [catch {
    puts "Part 1: Check --validrounds and --lastvalid options combination for 'goal asset create'"

    set PASSED 0
    spawn goal asset create --validrounds 0 --creator ABC --total 100
    expect {
        timeout { puts "goal asset create timed out"; exit 1 }
        -re {\[-validrounds\] can not be zero} {set PASSED 1; close }
    }
    if { $PASSED == 0 } {
        puts "'goal asset create --validrounds 0' should not pass"
        exit 1
    }

    set PASSED 0
    spawn goal asset create --validrounds 1 --lastvalid 1 --creator ABC --total 100
    expect {
        timeout { puts "goal asset create timed out"; exit 1 }
        -re {Only one of \[-validrounds\] or \[-lastvalid\] can be specified} {set PASSED 1; close }
    }
    if { $PASSED == 0 } {
        puts "'goal asset create --validrounds 1 --lastvalid 1' should not pass"
        exit 1
    }
} EXCEPTION ] } {
    puts "ERROR in Goal Asset Tx Validity test: $EXCEPTION"
    exit 1
}

if { [catch {
    puts "Part 2: Check actual firstvalid and lastvalid values after TX creation"

    # Create network
    ::AlgorandGoal::StartNetwork $NETWORK_NAME $NETWORK_TEMPLATE $TEST_ALGO_DIR $TEST_ROOT_DIR

    # use goal node status command to wait for round 0
    ::AlgorandGoal::WaitForRound 0 $TEST_PRIMARY_NODE_DIR

    set PRIMARY_WALLET_NAME unencrypted-default-wallet
    set PRIMARY_ACCOUNT_ADDRESS [::AlgorandGoal::GetHighestFundedAccountForWallet $PRIMARY_WALLET_NAME  $TEST_PRIMARY_NODE_DIR]

    puts "Verify validrounds=1"
    set PASSED 0
    set LAST_VALID 0
    set TX_FILE $TEST_ROOT_DIR/tx-create-1.tx
    spawn goal asset create --validrounds 1 --firstvalid 2 --creator $PRIMARY_ACCOUNT_ADDRESS --total 100 -d $TEST_PRIMARY_NODE_DIR -o $TX_FILE
    expect
    puts "'goal asset create' output"
    puts $expect_out(buffer)

    spawn goal clerk inspect $TX_FILE
    expect {
        timeout { ::AlgorandGoal::Abort "goal asset create timed out" }
        -re {"lv": (\d+)} {set PASSED 1; set LAST_VALID $expect_out(1,string); close }
    }

    if { $PASSED == 0 } {
        ::AlgorandGoal::Abort "Failed to find 'lv' in serialized tx"
    }

    if { $LAST_VALID != 2 } {
        ::AlgorandGoal::Abort "Last valid is $LAST_VALID but expected 2"
    }

    puts "Verify lastvalid=2 firstvalid=2"
    set PASSED 0
    set LAST_VALID 0
    set TX_FILE $TEST_ROOT_DIR/tx-create-2.tx
    spawn goal asset create --lastvalid 2 --firstvalid 2 --creator $PRIMARY_ACCOUNT_ADDRESS --total 100 -d $TEST_PRIMARY_NODE_DIR -o $TX_FILE
    expect
    puts "'goal asset create' output"
    puts $expect_out(buffer)

    spawn goal clerk inspect $TX_FILE
    expect {
        timeout { ::AlgorandGoal::Abort "goal asset create timed out" }
        -re {"lv": (\d+)} {set PASSED 1; set LAST_VALID $expect_out(1,string); close }
    }

    if { $PASSED == 0 } {
        ::AlgorandGoal::Abort "Failed to find 'lv' in serialized tx"
    }

    if { $LAST_VALID != 2 } {
        ::AlgorandGoal::Abort "Last valid is $LAST_VALID but expected 2"
    }

    puts "Verify validrounds=1000"
    set PASSED 0
    set LAST_VALID 0
    set TX_FILE $TEST_ROOT_DIR/tx-create-3.tx
    spawn goal asset create --validrounds 1000 --firstvalid 2 --creator $PRIMARY_ACCOUNT_ADDRESS --total 100 -d $TEST_PRIMARY_NODE_DIR -o $TX_FILE
    expect
    puts "'goal asset create' output"
    puts $expect_out(buffer)

    spawn goal clerk inspect $TX_FILE
    expect {
        timeout { ::AlgorandGoal::Abort "goal asset create timed out" }
        -re {"lv": (\d+)} {set PASSED 1; set LAST_VALID $expect_out(1,string); close }
    }

    if { $PASSED == 0 } {
        ::AlgorandGoal::Abort "Failed to find 'lv' in serialized tx"
    }

    if { $LAST_VALID != 1001 } {
        ::AlgorandGoal::Abort "Last valid is $LAST_VALID but expected 2"
    }

    # Shutdown the network
    ::AlgorandGoal::StopNetwork $NETWORK_NAME $TEST_ALGO_DIR $TEST_ROOT_DIR
    exit 0

} EXCEPTION ] } {
    ::AlgorandGoal::Abort "ERROR in AssetTxValidityTest: $EXCEPTION"
}
