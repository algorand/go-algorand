import algorandci.util.MuleCli
import algorandci.agents.*

def call(String muleYamlPath = 'mule.yaml', muleVersion = '0.0.5') {
  def kubernetesMuleAgents = new KubernetesMuleAgent(
    muleVersion: muleVersion,
    name: "mule-agent-${currentBuild.startTimeInMillis}",
    docker: true,
  )
  def osxMuleAgent = new OSXMuleAgent()

  pipeline {

    agent none
    stages {
      stage('Build Jobs') {
        parallel {
          stage('Build Jobs (linux-arm64)') {
            agent {
              kubernetes kubernetesMuleAgents.getAgent('arm64v8')
            }
            steps {
              muleJobs(muleYamlPath, 'build.*linux-arm64.*')
            }
          }
          stage('Build Jobs (linux-arm32)') {
            agent {
              kubernetes kubernetesMuleAgents.getAgent('arm32v6')
            }
            steps {
              muleJobs(muleYamlPath, 'build.*linux-arm32.*')
            }
          }
          stage('Build Jobs (linux-amd64)') {
            agent {
              kubernetes kubernetesMuleAgents.getAgent('amd64')
            }
            steps {
              muleJobs(muleYamlPath, 'build.*linux-amd64.*')
            }
          }
          /* stage('Build Jobs (darwin-amd64)') {
            agent {
              node osxMuleAgent.getAgent()
            }
            steps {
              muleJobs(muleYamlPath, 'darwin-arm64', 'build')
            }
          }*/
        }
      }

      stage('Package Jobs') {
        parallel {
          stage('Package Jobs (linux-arm64)') {
            agent {
              kubernetes kubernetesMuleAgents.getAgent('arm64v8')
            }
            steps {
              muleJobs(muleYamlPath, 'package.*linux-arm64.*')
            }
          }
          stage('Package Jobs (linux-arm32)') {
            agent {
              kubernetes kubernetesMuleAgents.getAgent('arm32v6')
            }
            steps {
              muleJobs(muleYamlPath, 'package.*linux-arm32.*')
            }
          }
          stage('Package Jobs (linux-amd64)') {
            agent {
              kubernetes kubernetesMuleAgents.getAgent('amd64')
            }
            steps {
              muleJobs(muleYamlPath, 'package.*linux-amd64.*')
            }
          }
          /* stage('Package Jobs (darwin-amd64)') {
            agent {
              node osxMuleAgent.getAgent()
            }
            steps {
              muleJobs(muleYamlPath, 'darwin-arm64', 'package')
            }
          }*/
        }
      }

      stage('Test Jobs') {
        parallel {
          stage('Test Jobs (linux-arm64)') {
            agent {
              kubernetes kubernetesMuleAgents.getAgent('arm64v8')
            }
            steps {
              muleJobs(muleYamlPath, 'test.*linux-arm64.*')
            }
          }
          stage('Test Jobs (linux-arm32)') {
            agent {
              kubernetes kubernetesMuleAgents.getAgent('arm32v6')
            }
            steps {
              muleJobs(muleYamlPath, 'test.*linux-arm32.*')
            }
          }
          stage('Test Jobs (linux-amd64)') {
            agent {
              kubernetes kubernetesMuleAgents.getAgent('amd64')
            }
            steps {
              muleJobs(muleYamlPath, 'test.*linux-amd64.*')
            }
          }
          /* stage('Test Jobs (darwin-amd64)') {
            agent {
              node osxMuleAgent.getAgent()
            }
            steps {
              muleJobs(muleYamlPath, 'darwin-arm64', 'test')
            }
          }*/
        }
      }

      stage('Archive Jobs') {
        parallel {
          stage('Archive Jobs (linux-arm64)') {
            agent {
              kubernetes kubernetesMuleAgents.getAgent('arm64v8')
            }
            steps {
              muleJobs(muleYamlPath, 'archive.*linux-arm64.*')
            }
          }
          stage('Archive Jobs (linux-arm32)') {
            agent {
              kubernetes kubernetesMuleAgents.getAgent('arm32v6')
            }
            steps {
              muleJobs(muleYamlPath, 'archive.*linux-arm32.*')
            }
          }
          stage('Archive Jobs (linux-amd64)') {
            agent {
              kubernetes kubernetesMuleAgents.getAgent('amd64')
            }
            steps {
              muleJobs(muleYamlPath, 'archive.*linux-amd64.*')
            }
          }
          /* stage('Archive Jobs (darwin-amd64)') {
            agent {
              node osxMuleAgent.getAgent()
            }
            steps {
              muleJobs(muleYamlPath, 'darwin-arm64', 'archive')
            }
          }*/
        }
      }
    }
  }
}
