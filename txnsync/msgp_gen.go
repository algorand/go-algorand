package txnsync

// Code generated by github.com/algorand/msgp DO NOT EDIT.

import (
	"github.com/algorand/go-algorand/config"
	"github.com/algorand/go-algorand/crypto"
	"github.com/algorand/go-algorand/crypto/compactcert"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/algorand/go-algorand/data/transactions"
	"github.com/algorand/go-algorand/protocol"
	"github.com/algorand/msgp/msgp"
)

// The following msgp objects are implemented in this file:
// addresses
//     |-----> MarshalMsg
//     |-----> CanMarshalMsg
//     |-----> (*) UnmarshalMsg
//     |-----> (*) CanUnmarshalMsg
//     |-----> Msgsize
//     |-----> MsgIsZero
//
// appIndices
//      |-----> MarshalMsg
//      |-----> CanMarshalMsg
//      |-----> (*) UnmarshalMsg
//      |-----> (*) CanUnmarshalMsg
//      |-----> Msgsize
//      |-----> MsgIsZero
//
// applicationArgs
//        |-----> MarshalMsg
//        |-----> CanMarshalMsg
//        |-----> (*) UnmarshalMsg
//        |-----> (*) CanUnmarshalMsg
//        |-----> Msgsize
//        |-----> MsgIsZero
//
// assetIndices
//       |-----> MarshalMsg
//       |-----> CanMarshalMsg
//       |-----> (*) UnmarshalMsg
//       |-----> (*) CanUnmarshalMsg
//       |-----> Msgsize
//       |-----> MsgIsZero
//
// bitmask
//    |-----> MarshalMsg
//    |-----> CanMarshalMsg
//    |-----> (*) UnmarshalMsg
//    |-----> (*) CanUnmarshalMsg
//    |-----> Msgsize
//    |-----> MsgIsZero
//
// encodedApplicationCallTxnFields
//                |-----> (*) MarshalMsg
//                |-----> (*) CanMarshalMsg
//                |-----> (*) UnmarshalMsg
//                |-----> (*) CanUnmarshalMsg
//                |-----> (*) Msgsize
//                |-----> (*) MsgIsZero
//
// encodedAssetConfigTxnFields
//              |-----> (*) MarshalMsg
//              |-----> (*) CanMarshalMsg
//              |-----> (*) UnmarshalMsg
//              |-----> (*) CanUnmarshalMsg
//              |-----> (*) Msgsize
//              |-----> (*) MsgIsZero
//
// encodedAssetFreezeTxnFields
//              |-----> (*) MarshalMsg
//              |-----> (*) CanMarshalMsg
//              |-----> (*) UnmarshalMsg
//              |-----> (*) CanUnmarshalMsg
//              |-----> (*) Msgsize
//              |-----> (*) MsgIsZero
//
// encodedAssetParams
//          |-----> (*) MarshalMsg
//          |-----> (*) CanMarshalMsg
//          |-----> (*) UnmarshalMsg
//          |-----> (*) CanUnmarshalMsg
//          |-----> (*) Msgsize
//          |-----> (*) MsgIsZero
//
// encodedAssetTransferTxnFields
//               |-----> (*) MarshalMsg
//               |-----> (*) CanMarshalMsg
//               |-----> (*) UnmarshalMsg
//               |-----> (*) CanUnmarshalMsg
//               |-----> (*) Msgsize
//               |-----> (*) MsgIsZero
//
// encodedBloomFilter
//          |-----> (*) MarshalMsg
//          |-----> (*) CanMarshalMsg
//          |-----> (*) UnmarshalMsg
//          |-----> (*) CanUnmarshalMsg
//          |-----> (*) Msgsize
//          |-----> (*) MsgIsZero
//
// encodedCompactCertTxnFields
//              |-----> (*) MarshalMsg
//              |-----> (*) CanMarshalMsg
//              |-----> (*) UnmarshalMsg
//              |-----> (*) CanUnmarshalMsg
//              |-----> (*) Msgsize
//              |-----> (*) MsgIsZero
//
// encodedKeyregTxnFields
//            |-----> (*) MarshalMsg
//            |-----> (*) CanMarshalMsg
//            |-----> (*) UnmarshalMsg
//            |-----> (*) CanUnmarshalMsg
//            |-----> (*) Msgsize
//            |-----> (*) MsgIsZero
//
// encodedPaymentTxnFields
//            |-----> (*) MarshalMsg
//            |-----> (*) CanMarshalMsg
//            |-----> (*) UnmarshalMsg
//            |-----> (*) CanUnmarshalMsg
//            |-----> (*) Msgsize
//            |-----> (*) MsgIsZero
//
// encodedSignedTxns
//         |-----> (*) MarshalMsg
//         |-----> (*) CanMarshalMsg
//         |-----> (*) UnmarshalMsg
//         |-----> (*) CanUnmarshalMsg
//         |-----> (*) Msgsize
//         |-----> (*) MsgIsZero
//
// encodedTxnHeaders
//         |-----> (*) MarshalMsg
//         |-----> (*) CanMarshalMsg
//         |-----> (*) UnmarshalMsg
//         |-----> (*) CanUnmarshalMsg
//         |-----> (*) Msgsize
//         |-----> (*) MsgIsZero
//
// encodedTxns
//      |-----> (*) MarshalMsg
//      |-----> (*) CanMarshalMsg
//      |-----> (*) UnmarshalMsg
//      |-----> (*) CanUnmarshalMsg
//      |-----> (*) Msgsize
//      |-----> (*) MsgIsZero
//
// packedTransactionGroups
//            |-----> (*) MarshalMsg
//            |-----> (*) CanMarshalMsg
//            |-----> (*) UnmarshalMsg
//            |-----> (*) CanUnmarshalMsg
//            |-----> (*) Msgsize
//            |-----> (*) MsgIsZero
//
// program
//    |-----> MarshalMsg
//    |-----> CanMarshalMsg
//    |-----> (*) UnmarshalMsg
//    |-----> (*) CanUnmarshalMsg
//    |-----> Msgsize
//    |-----> MsgIsZero
//
// requestParams
//       |-----> (*) MarshalMsg
//       |-----> (*) CanMarshalMsg
//       |-----> (*) UnmarshalMsg
//       |-----> (*) CanUnmarshalMsg
//       |-----> (*) Msgsize
//       |-----> (*) MsgIsZero
//
// timingParams
//       |-----> (*) MarshalMsg
//       |-----> (*) CanMarshalMsg
//       |-----> (*) UnmarshalMsg
//       |-----> (*) CanUnmarshalMsg
//       |-----> (*) Msgsize
//       |-----> (*) MsgIsZero
//
// transactionBlockMessage
//            |-----> (*) MarshalMsg
//            |-----> (*) CanMarshalMsg
//            |-----> (*) UnmarshalMsg
//            |-----> (*) CanUnmarshalMsg
//            |-----> (*) Msgsize
//            |-----> (*) MsgIsZero
//
// txGroupsEncodingStub
//           |-----> (*) MarshalMsg
//           |-----> (*) CanMarshalMsg
//           |-----> (*) UnmarshalMsg
//           |-----> (*) CanUnmarshalMsg
//           |-----> (*) Msgsize
//           |-----> (*) MsgIsZero
//
// txnGroups
//     |-----> MarshalMsg
//     |-----> CanMarshalMsg
//     |-----> (*) UnmarshalMsg
//     |-----> (*) CanUnmarshalMsg
//     |-----> Msgsize
//     |-----> MsgIsZero
//

// MarshalMsg implements msgp.Marshaler
func (z addresses) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	if z == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendArrayHeader(o, uint32(len(z)))
	}
	for za0003 := range z {
		o = z[za0003].MarshalMsg(o)
	}
	return
}

func (_ addresses) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(addresses)
	if !ok {
		_, ok = (z).(*addresses)
	}
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *addresses) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 int
	var zb0003 bool
	zb0002, zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0002 > transactions.EncodedMaxAccounts {
		err = msgp.ErrOverflow(uint64(zb0002), uint64(transactions.EncodedMaxAccounts))
		err = msgp.WrapError(err)
		return
	}
	if zb0003 {
		(*z) = nil
	} else if (*z) != nil && cap((*z)) >= zb0002 {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(addresses, zb0002)
	}
	for zb0001 := range *z {
		bts, err = (*z)[zb0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	o = bts
	return
}

func (_ *addresses) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*addresses)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z addresses) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for za0003 := range z {
		s += z[za0003].Msgsize()
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z addresses) MsgIsZero() bool {
	return len(z) == 0
}

// MarshalMsg implements msgp.Marshaler
func (z appIndices) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	if z == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendArrayHeader(o, uint32(len(z)))
	}
	for za0001 := range z {
		o = z[za0001].MarshalMsg(o)
	}
	return
}

func (_ appIndices) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(appIndices)
	if !ok {
		_, ok = (z).(*appIndices)
	}
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *appIndices) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 int
	var zb0003 bool
	zb0002, zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0002 > transactions.EncodedMaxForeignApps {
		err = msgp.ErrOverflow(uint64(zb0002), uint64(transactions.EncodedMaxForeignApps))
		err = msgp.WrapError(err)
		return
	}
	if zb0003 {
		(*z) = nil
	} else if (*z) != nil && cap((*z)) >= zb0002 {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(appIndices, zb0002)
	}
	for zb0001 := range *z {
		bts, err = (*z)[zb0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	o = bts
	return
}

func (_ *appIndices) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*appIndices)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z appIndices) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for za0001 := range z {
		s += z[za0001].Msgsize()
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z appIndices) MsgIsZero() bool {
	return len(z) == 0
}

// MarshalMsg implements msgp.Marshaler
func (z applicationArgs) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	if z == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendArrayHeader(o, uint32(len(z)))
	}
	for za0001 := range z {
		o = msgp.AppendBytes(o, z[za0001])
	}
	return
}

func (_ applicationArgs) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(applicationArgs)
	if !ok {
		_, ok = (z).(*applicationArgs)
	}
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *applicationArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 int
	var zb0003 bool
	zb0002, zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0002 > transactions.EncodedMaxApplicationArgs {
		err = msgp.ErrOverflow(uint64(zb0002), uint64(transactions.EncodedMaxApplicationArgs))
		err = msgp.WrapError(err)
		return
	}
	if zb0003 {
		(*z) = nil
	} else if (*z) != nil && cap((*z)) >= zb0002 {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(applicationArgs, zb0002)
	}
	for zb0001 := range *z {
		(*z)[zb0001], bts, err = msgp.ReadBytesBytes(bts, (*z)[zb0001])
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	o = bts
	return
}

func (_ *applicationArgs) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*applicationArgs)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z applicationArgs) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for za0001 := range z {
		s += msgp.BytesPrefixSize + len(z[za0001])
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z applicationArgs) MsgIsZero() bool {
	return len(z) == 0
}

// MarshalMsg implements msgp.Marshaler
func (z assetIndices) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	if z == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendArrayHeader(o, uint32(len(z)))
	}
	for za0001 := range z {
		o = z[za0001].MarshalMsg(o)
	}
	return
}

func (_ assetIndices) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(assetIndices)
	if !ok {
		_, ok = (z).(*assetIndices)
	}
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *assetIndices) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 int
	var zb0003 bool
	zb0002, zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0002 > transactions.EncodedMaxForeignAssets {
		err = msgp.ErrOverflow(uint64(zb0002), uint64(transactions.EncodedMaxForeignAssets))
		err = msgp.WrapError(err)
		return
	}
	if zb0003 {
		(*z) = nil
	} else if (*z) != nil && cap((*z)) >= zb0002 {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(assetIndices, zb0002)
	}
	for zb0001 := range *z {
		bts, err = (*z)[zb0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	o = bts
	return
}

func (_ *assetIndices) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*assetIndices)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z assetIndices) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for za0001 := range z {
		s += z[za0001].Msgsize()
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z assetIndices) MsgIsZero() bool {
	return len(z) == 0
}

// MarshalMsg implements msgp.Marshaler
func (z bitmask) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, []byte(z))
	return
}

func (_ bitmask) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(bitmask)
	if !ok {
		_, ok = (z).(*bitmask)
	}
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *bitmask) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 []byte
		var zb0002 int
		zb0002, err = msgp.ReadBytesBytesHeader(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 > maxBitmaskSize {
			err = msgp.ErrOverflow(uint64(zb0002), uint64(maxBitmaskSize))
			return
		}
		zb0001, bts, err = msgp.ReadBytesBytes(bts, []byte((*z)))
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = bitmask(zb0001)
	}
	o = bts
	return
}

func (_ *bitmask) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*bitmask)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z bitmask) Msgsize() (s int) {
	s = msgp.BytesPrefixSize + len([]byte(z))
	return
}

// MsgIsZero returns whether this is a zero value
func (z bitmask) MsgIsZero() bool {
	return len(z) == 0
}

// MarshalMsg implements msgp.Marshaler
func (z *encodedApplicationCallTxnFields) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0016Len := uint32(24)
	var zb0016Mask uint32 /* 25 bits */
	if len((*z).ApplicationArgs) == 0 {
		zb0016Len--
		zb0016Mask |= 0x2
	}
	if len((*z).BitmaskApplicationArgs) == 0 {
		zb0016Len--
		zb0016Mask |= 0x4
	}
	if len((*z).OnCompletion) == 0 {
		zb0016Len--
		zb0016Mask |= 0x8
	}
	if len((*z).BitmaskOnCompletion) == 0 {
		zb0016Len--
		zb0016Mask |= 0x10
	}
	if len((*z).ApprovalProgram) == 0 {
		zb0016Len--
		zb0016Mask |= 0x20
	}
	if len((*z).BitmaskApprovalProgram) == 0 {
		zb0016Len--
		zb0016Mask |= 0x40
	}
	if len((*z).ForeignAssets) == 0 {
		zb0016Len--
		zb0016Mask |= 0x80
	}
	if len((*z).BitmaskForeignAssets) == 0 {
		zb0016Len--
		zb0016Mask |= 0x100
	}
	if len((*z).Accounts) == 0 {
		zb0016Len--
		zb0016Mask |= 0x200
	}
	if len((*z).BitmaskAccounts) == 0 {
		zb0016Len--
		zb0016Mask |= 0x400
	}
	if len((*z).ForeignApps) == 0 {
		zb0016Len--
		zb0016Mask |= 0x800
	}
	if len((*z).BitmaskForeignApps) == 0 {
		zb0016Len--
		zb0016Mask |= 0x1000
	}
	if len((*z).ApplicationID) == 0 {
		zb0016Len--
		zb0016Mask |= 0x2000
	}
	if len((*z).BitmaskApplicationID) == 0 {
		zb0016Len--
		zb0016Mask |= 0x4000
	}
	if len((*z).ClearStateProgram) == 0 {
		zb0016Len--
		zb0016Mask |= 0x8000
	}
	if len((*z).BitmaskClearStateProgram) == 0 {
		zb0016Len--
		zb0016Mask |= 0x10000
	}
	if len((*z).GlobalNumByteSlice) == 0 {
		zb0016Len--
		zb0016Mask |= 0x20000
	}
	if len((*z).BitmaskGlobalNumByteSlice) == 0 {
		zb0016Len--
		zb0016Mask |= 0x40000
	}
	if len((*z).GlobalNumUint) == 0 {
		zb0016Len--
		zb0016Mask |= 0x80000
	}
	if len((*z).BitmaskGlobalNumUint) == 0 {
		zb0016Len--
		zb0016Mask |= 0x100000
	}
	if len((*z).LocalNumByteSlice) == 0 {
		zb0016Len--
		zb0016Mask |= 0x200000
	}
	if len((*z).BitmaskLocalNumByteSlice) == 0 {
		zb0016Len--
		zb0016Mask |= 0x400000
	}
	if len((*z).LocalNumUint) == 0 {
		zb0016Len--
		zb0016Mask |= 0x800000
	}
	if len((*z).BitmaskLocalNumUint) == 0 {
		zb0016Len--
		zb0016Mask |= 0x1000000
	}
	// variable map header, size zb0016Len
	o = msgp.AppendMapHeader(o, zb0016Len)
	if zb0016Len != 0 {
		if (zb0016Mask & 0x2) == 0 { // if not empty
			// string "apaa"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x61)
			if (*z).ApplicationArgs == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).ApplicationArgs)))
			}
			for zb0002 := range (*z).ApplicationArgs {
				if (*z).ApplicationArgs[zb0002] == nil {
					o = msgp.AppendNil(o)
				} else {
					o = msgp.AppendArrayHeader(o, uint32(len((*z).ApplicationArgs[zb0002])))
				}
				for zb0003 := range (*z).ApplicationArgs[zb0002] {
					o = msgp.AppendBytes(o, (*z).ApplicationArgs[zb0002][zb0003])
				}
			}
		}
		if (zb0016Mask & 0x4) == 0 { // if not empty
			// string "apaabm"
			o = append(o, 0xa6, 0x61, 0x70, 0x61, 0x61, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskApplicationArgs))
		}
		if (zb0016Mask & 0x8) == 0 { // if not empty
			// string "apan"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x6e)
			o = msgp.AppendBytes(o, (*z).OnCompletion)
		}
		if (zb0016Mask & 0x10) == 0 { // if not empty
			// string "apanbm"
			o = append(o, 0xa6, 0x61, 0x70, 0x61, 0x6e, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskOnCompletion))
		}
		if (zb0016Mask & 0x20) == 0 { // if not empty
			// string "apap"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x70)
			if (*z).ApprovalProgram == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).ApprovalProgram)))
			}
			for zb0014 := range (*z).ApprovalProgram {
				o = msgp.AppendBytes(o, []byte((*z).ApprovalProgram[zb0014]))
			}
		}
		if (zb0016Mask & 0x40) == 0 { // if not empty
			// string "apapbm"
			o = append(o, 0xa6, 0x61, 0x70, 0x61, 0x70, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskApprovalProgram))
		}
		if (zb0016Mask & 0x80) == 0 { // if not empty
			// string "apas"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x73)
			if (*z).ForeignAssets == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).ForeignAssets)))
			}
			for zb0008 := range (*z).ForeignAssets {
				if (*z).ForeignAssets[zb0008] == nil {
					o = msgp.AppendNil(o)
				} else {
					o = msgp.AppendArrayHeader(o, uint32(len((*z).ForeignAssets[zb0008])))
				}
				for zb0009 := range (*z).ForeignAssets[zb0008] {
					o = (*z).ForeignAssets[zb0008][zb0009].MarshalMsg(o)
				}
			}
		}
		if (zb0016Mask & 0x100) == 0 { // if not empty
			// string "apasbm"
			o = append(o, 0xa6, 0x61, 0x70, 0x61, 0x73, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskForeignAssets))
		}
		if (zb0016Mask & 0x200) == 0 { // if not empty
			// string "apat"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x74)
			if (*z).Accounts == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Accounts)))
			}
			for zb0004 := range (*z).Accounts {
				if (*z).Accounts[zb0004] == nil {
					o = msgp.AppendNil(o)
				} else {
					o = msgp.AppendArrayHeader(o, uint32(len((*z).Accounts[zb0004])))
				}
				for zb0005 := range (*z).Accounts[zb0004] {
					o = (*z).Accounts[zb0004][zb0005].MarshalMsg(o)
				}
			}
		}
		if (zb0016Mask & 0x400) == 0 { // if not empty
			// string "apatbm"
			o = append(o, 0xa6, 0x61, 0x70, 0x61, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskAccounts))
		}
		if (zb0016Mask & 0x800) == 0 { // if not empty
			// string "apfa"
			o = append(o, 0xa4, 0x61, 0x70, 0x66, 0x61)
			if (*z).ForeignApps == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).ForeignApps)))
			}
			for zb0006 := range (*z).ForeignApps {
				if (*z).ForeignApps[zb0006] == nil {
					o = msgp.AppendNil(o)
				} else {
					o = msgp.AppendArrayHeader(o, uint32(len((*z).ForeignApps[zb0006])))
				}
				for zb0007 := range (*z).ForeignApps[zb0006] {
					o = (*z).ForeignApps[zb0006][zb0007].MarshalMsg(o)
				}
			}
		}
		if (zb0016Mask & 0x1000) == 0 { // if not empty
			// string "apfabm"
			o = append(o, 0xa6, 0x61, 0x70, 0x66, 0x61, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskForeignApps))
		}
		if (zb0016Mask & 0x2000) == 0 { // if not empty
			// string "apid"
			o = append(o, 0xa4, 0x61, 0x70, 0x69, 0x64)
			if (*z).ApplicationID == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).ApplicationID)))
			}
			for zb0001 := range (*z).ApplicationID {
				o = (*z).ApplicationID[zb0001].MarshalMsg(o)
			}
		}
		if (zb0016Mask & 0x4000) == 0 { // if not empty
			// string "apidbm"
			o = append(o, 0xa6, 0x61, 0x70, 0x69, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskApplicationID))
		}
		if (zb0016Mask & 0x8000) == 0 { // if not empty
			// string "apsu"
			o = append(o, 0xa4, 0x61, 0x70, 0x73, 0x75)
			if (*z).ClearStateProgram == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).ClearStateProgram)))
			}
			for zb0015 := range (*z).ClearStateProgram {
				o = msgp.AppendBytes(o, []byte((*z).ClearStateProgram[zb0015]))
			}
		}
		if (zb0016Mask & 0x10000) == 0 { // if not empty
			// string "apsubm"
			o = append(o, 0xa6, 0x61, 0x70, 0x73, 0x75, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskClearStateProgram))
		}
		if (zb0016Mask & 0x20000) == 0 { // if not empty
			// string "gnbs"
			o = append(o, 0xa4, 0x67, 0x6e, 0x62, 0x73)
			if (*z).GlobalNumByteSlice == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).GlobalNumByteSlice)))
			}
			for zb0013 := range (*z).GlobalNumByteSlice {
				o = msgp.AppendUint64(o, (*z).GlobalNumByteSlice[zb0013])
			}
		}
		if (zb0016Mask & 0x40000) == 0 { // if not empty
			// string "gnbsbm"
			o = append(o, 0xa6, 0x67, 0x6e, 0x62, 0x73, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskGlobalNumByteSlice))
		}
		if (zb0016Mask & 0x80000) == 0 { // if not empty
			// string "gnui"
			o = append(o, 0xa4, 0x67, 0x6e, 0x75, 0x69)
			if (*z).GlobalNumUint == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).GlobalNumUint)))
			}
			for zb0012 := range (*z).GlobalNumUint {
				o = msgp.AppendUint64(o, (*z).GlobalNumUint[zb0012])
			}
		}
		if (zb0016Mask & 0x100000) == 0 { // if not empty
			// string "gnuibm"
			o = append(o, 0xa6, 0x67, 0x6e, 0x75, 0x69, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskGlobalNumUint))
		}
		if (zb0016Mask & 0x200000) == 0 { // if not empty
			// string "lnbs"
			o = append(o, 0xa4, 0x6c, 0x6e, 0x62, 0x73)
			if (*z).LocalNumByteSlice == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).LocalNumByteSlice)))
			}
			for zb0011 := range (*z).LocalNumByteSlice {
				o = msgp.AppendUint64(o, (*z).LocalNumByteSlice[zb0011])
			}
		}
		if (zb0016Mask & 0x400000) == 0 { // if not empty
			// string "lnbsbm"
			o = append(o, 0xa6, 0x6c, 0x6e, 0x62, 0x73, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskLocalNumByteSlice))
		}
		if (zb0016Mask & 0x800000) == 0 { // if not empty
			// string "lnui"
			o = append(o, 0xa4, 0x6c, 0x6e, 0x75, 0x69)
			if (*z).LocalNumUint == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).LocalNumUint)))
			}
			for zb0010 := range (*z).LocalNumUint {
				o = msgp.AppendUint64(o, (*z).LocalNumUint[zb0010])
			}
		}
		if (zb0016Mask & 0x1000000) == 0 { // if not empty
			// string "lnuibm"
			o = append(o, 0xa6, 0x6c, 0x6e, 0x75, 0x69, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskLocalNumUint))
		}
	}
	return
}

func (_ *encodedApplicationCallTxnFields) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedApplicationCallTxnFields)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *encodedApplicationCallTxnFields) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0016 int
	var zb0017 bool
	zb0016, zb0017, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0016, zb0017, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0016 > 0 {
			zb0016--
			var zb0018 int
			var zb0019 bool
			zb0018, zb0019, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApplicationID")
				return
			}
			if zb0018 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0018), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ApplicationID")
				return
			}
			if zb0019 {
				(*z).ApplicationID = nil
			} else if (*z).ApplicationID != nil && cap((*z).ApplicationID) >= zb0018 {
				(*z).ApplicationID = ((*z).ApplicationID)[:zb0018]
			} else {
				(*z).ApplicationID = make([]basics.AppIndex, zb0018)
			}
			for zb0001 := range (*z).ApplicationID {
				bts, err = (*z).ApplicationID[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ApplicationID", zb0001)
					return
				}
			}
		}
		if zb0016 > 0 {
			zb0016--
			{
				var zb0020 []byte
				var zb0021 int
				zb0021, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApplicationID")
					return
				}
				if zb0021 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0021), uint64(maxBitmaskSize))
					return
				}
				zb0020, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskApplicationID))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApplicationID")
					return
				}
				(*z).BitmaskApplicationID = bitmask(zb0020)
			}
		}
		if zb0016 > 0 {
			zb0016--
			var zb0022 int
			zb0022, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "OnCompletion")
				return
			}
			if zb0022 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0022), uint64(maxEncodedTransactionGroup))
				return
			}
			(*z).OnCompletion, bts, err = msgp.ReadBytesBytes(bts, (*z).OnCompletion)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "OnCompletion")
				return
			}
		}
		if zb0016 > 0 {
			zb0016--
			{
				var zb0023 []byte
				var zb0024 int
				zb0024, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskOnCompletion")
					return
				}
				if zb0024 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0024), uint64(maxBitmaskSize))
					return
				}
				zb0023, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskOnCompletion))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskOnCompletion")
					return
				}
				(*z).BitmaskOnCompletion = bitmask(zb0023)
			}
		}
		if zb0016 > 0 {
			zb0016--
			var zb0025 int
			var zb0026 bool
			zb0025, zb0026, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs")
				return
			}
			if zb0025 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0025), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs")
				return
			}
			if zb0026 {
				(*z).ApplicationArgs = nil
			} else if (*z).ApplicationArgs != nil && cap((*z).ApplicationArgs) >= zb0025 {
				(*z).ApplicationArgs = ((*z).ApplicationArgs)[:zb0025]
			} else {
				(*z).ApplicationArgs = make([]applicationArgs, zb0025)
			}
			for zb0002 := range (*z).ApplicationArgs {
				var zb0027 int
				var zb0028 bool
				zb0027, zb0028, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs", zb0002)
					return
				}
				if zb0027 > transactions.EncodedMaxApplicationArgs {
					err = msgp.ErrOverflow(uint64(zb0027), uint64(transactions.EncodedMaxApplicationArgs))
					err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs", zb0002)
					return
				}
				if zb0028 {
					(*z).ApplicationArgs[zb0002] = nil
				} else if (*z).ApplicationArgs[zb0002] != nil && cap((*z).ApplicationArgs[zb0002]) >= zb0027 {
					(*z).ApplicationArgs[zb0002] = ((*z).ApplicationArgs[zb0002])[:zb0027]
				} else {
					(*z).ApplicationArgs[zb0002] = make(applicationArgs, zb0027)
				}
				for zb0003 := range (*z).ApplicationArgs[zb0002] {
					(*z).ApplicationArgs[zb0002][zb0003], bts, err = msgp.ReadBytesBytes(bts, (*z).ApplicationArgs[zb0002][zb0003])
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs", zb0002, zb0003)
						return
					}
				}
			}
		}
		if zb0016 > 0 {
			zb0016--
			{
				var zb0029 []byte
				var zb0030 int
				zb0030, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApplicationArgs")
					return
				}
				if zb0030 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0030), uint64(maxBitmaskSize))
					return
				}
				zb0029, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskApplicationArgs))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApplicationArgs")
					return
				}
				(*z).BitmaskApplicationArgs = bitmask(zb0029)
			}
		}
		if zb0016 > 0 {
			zb0016--
			var zb0031 int
			var zb0032 bool
			zb0031, zb0032, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Accounts")
				return
			}
			if zb0031 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0031), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Accounts")
				return
			}
			if zb0032 {
				(*z).Accounts = nil
			} else if (*z).Accounts != nil && cap((*z).Accounts) >= zb0031 {
				(*z).Accounts = ((*z).Accounts)[:zb0031]
			} else {
				(*z).Accounts = make([]addresses, zb0031)
			}
			for zb0004 := range (*z).Accounts {
				var zb0033 int
				var zb0034 bool
				zb0033, zb0034, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Accounts", zb0004)
					return
				}
				if zb0033 > transactions.EncodedMaxAccounts {
					err = msgp.ErrOverflow(uint64(zb0033), uint64(transactions.EncodedMaxAccounts))
					err = msgp.WrapError(err, "struct-from-array", "Accounts", zb0004)
					return
				}
				if zb0034 {
					(*z).Accounts[zb0004] = nil
				} else if (*z).Accounts[zb0004] != nil && cap((*z).Accounts[zb0004]) >= zb0033 {
					(*z).Accounts[zb0004] = ((*z).Accounts[zb0004])[:zb0033]
				} else {
					(*z).Accounts[zb0004] = make(addresses, zb0033)
				}
				for zb0005 := range (*z).Accounts[zb0004] {
					bts, err = (*z).Accounts[zb0004][zb0005].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "Accounts", zb0004, zb0005)
						return
					}
				}
			}
		}
		if zb0016 > 0 {
			zb0016--
			{
				var zb0035 []byte
				var zb0036 int
				zb0036, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAccounts")
					return
				}
				if zb0036 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0036), uint64(maxBitmaskSize))
					return
				}
				zb0035, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskAccounts))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAccounts")
					return
				}
				(*z).BitmaskAccounts = bitmask(zb0035)
			}
		}
		if zb0016 > 0 {
			zb0016--
			var zb0037 int
			var zb0038 bool
			zb0037, zb0038, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ForeignApps")
				return
			}
			if zb0037 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0037), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ForeignApps")
				return
			}
			if zb0038 {
				(*z).ForeignApps = nil
			} else if (*z).ForeignApps != nil && cap((*z).ForeignApps) >= zb0037 {
				(*z).ForeignApps = ((*z).ForeignApps)[:zb0037]
			} else {
				(*z).ForeignApps = make([]appIndices, zb0037)
			}
			for zb0006 := range (*z).ForeignApps {
				var zb0039 int
				var zb0040 bool
				zb0039, zb0040, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ForeignApps", zb0006)
					return
				}
				if zb0039 > transactions.EncodedMaxForeignApps {
					err = msgp.ErrOverflow(uint64(zb0039), uint64(transactions.EncodedMaxForeignApps))
					err = msgp.WrapError(err, "struct-from-array", "ForeignApps", zb0006)
					return
				}
				if zb0040 {
					(*z).ForeignApps[zb0006] = nil
				} else if (*z).ForeignApps[zb0006] != nil && cap((*z).ForeignApps[zb0006]) >= zb0039 {
					(*z).ForeignApps[zb0006] = ((*z).ForeignApps[zb0006])[:zb0039]
				} else {
					(*z).ForeignApps[zb0006] = make(appIndices, zb0039)
				}
				for zb0007 := range (*z).ForeignApps[zb0006] {
					bts, err = (*z).ForeignApps[zb0006][zb0007].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ForeignApps", zb0006, zb0007)
						return
					}
				}
			}
		}
		if zb0016 > 0 {
			zb0016--
			{
				var zb0041 []byte
				var zb0042 int
				zb0042, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskForeignApps")
					return
				}
				if zb0042 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0042), uint64(maxBitmaskSize))
					return
				}
				zb0041, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskForeignApps))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskForeignApps")
					return
				}
				(*z).BitmaskForeignApps = bitmask(zb0041)
			}
		}
		if zb0016 > 0 {
			zb0016--
			var zb0043 int
			var zb0044 bool
			zb0043, zb0044, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ForeignAssets")
				return
			}
			if zb0043 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0043), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ForeignAssets")
				return
			}
			if zb0044 {
				(*z).ForeignAssets = nil
			} else if (*z).ForeignAssets != nil && cap((*z).ForeignAssets) >= zb0043 {
				(*z).ForeignAssets = ((*z).ForeignAssets)[:zb0043]
			} else {
				(*z).ForeignAssets = make([]assetIndices, zb0043)
			}
			for zb0008 := range (*z).ForeignAssets {
				var zb0045 int
				var zb0046 bool
				zb0045, zb0046, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ForeignAssets", zb0008)
					return
				}
				if zb0045 > transactions.EncodedMaxForeignAssets {
					err = msgp.ErrOverflow(uint64(zb0045), uint64(transactions.EncodedMaxForeignAssets))
					err = msgp.WrapError(err, "struct-from-array", "ForeignAssets", zb0008)
					return
				}
				if zb0046 {
					(*z).ForeignAssets[zb0008] = nil
				} else if (*z).ForeignAssets[zb0008] != nil && cap((*z).ForeignAssets[zb0008]) >= zb0045 {
					(*z).ForeignAssets[zb0008] = ((*z).ForeignAssets[zb0008])[:zb0045]
				} else {
					(*z).ForeignAssets[zb0008] = make(assetIndices, zb0045)
				}
				for zb0009 := range (*z).ForeignAssets[zb0008] {
					bts, err = (*z).ForeignAssets[zb0008][zb0009].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ForeignAssets", zb0008, zb0009)
						return
					}
				}
			}
		}
		if zb0016 > 0 {
			zb0016--
			{
				var zb0047 []byte
				var zb0048 int
				zb0048, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskForeignAssets")
					return
				}
				if zb0048 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0048), uint64(maxBitmaskSize))
					return
				}
				zb0047, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskForeignAssets))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskForeignAssets")
					return
				}
				(*z).BitmaskForeignAssets = bitmask(zb0047)
			}
		}
		if zb0016 > 0 {
			zb0016--
			var zb0049 int
			var zb0050 bool
			zb0049, zb0050, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LocalNumUint")
				return
			}
			if zb0049 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0049), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "LocalNumUint")
				return
			}
			if zb0050 {
				(*z).LocalNumUint = nil
			} else if (*z).LocalNumUint != nil && cap((*z).LocalNumUint) >= zb0049 {
				(*z).LocalNumUint = ((*z).LocalNumUint)[:zb0049]
			} else {
				(*z).LocalNumUint = make([]uint64, zb0049)
			}
			for zb0010 := range (*z).LocalNumUint {
				(*z).LocalNumUint[zb0010], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "LocalNumUint", zb0010)
					return
				}
			}
		}
		if zb0016 > 0 {
			zb0016--
			{
				var zb0051 []byte
				var zb0052 int
				zb0052, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLocalNumUint")
					return
				}
				if zb0052 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0052), uint64(maxBitmaskSize))
					return
				}
				zb0051, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskLocalNumUint))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLocalNumUint")
					return
				}
				(*z).BitmaskLocalNumUint = bitmask(zb0051)
			}
		}
		if zb0016 > 0 {
			zb0016--
			var zb0053 int
			var zb0054 bool
			zb0053, zb0054, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LocalNumByteSlice")
				return
			}
			if zb0053 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0053), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "LocalNumByteSlice")
				return
			}
			if zb0054 {
				(*z).LocalNumByteSlice = nil
			} else if (*z).LocalNumByteSlice != nil && cap((*z).LocalNumByteSlice) >= zb0053 {
				(*z).LocalNumByteSlice = ((*z).LocalNumByteSlice)[:zb0053]
			} else {
				(*z).LocalNumByteSlice = make([]uint64, zb0053)
			}
			for zb0011 := range (*z).LocalNumByteSlice {
				(*z).LocalNumByteSlice[zb0011], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "LocalNumByteSlice", zb0011)
					return
				}
			}
		}
		if zb0016 > 0 {
			zb0016--
			{
				var zb0055 []byte
				var zb0056 int
				zb0056, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLocalNumByteSlice")
					return
				}
				if zb0056 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0056), uint64(maxBitmaskSize))
					return
				}
				zb0055, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskLocalNumByteSlice))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLocalNumByteSlice")
					return
				}
				(*z).BitmaskLocalNumByteSlice = bitmask(zb0055)
			}
		}
		if zb0016 > 0 {
			zb0016--
			var zb0057 int
			var zb0058 bool
			zb0057, zb0058, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GlobalNumUint")
				return
			}
			if zb0057 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0057), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "GlobalNumUint")
				return
			}
			if zb0058 {
				(*z).GlobalNumUint = nil
			} else if (*z).GlobalNumUint != nil && cap((*z).GlobalNumUint) >= zb0057 {
				(*z).GlobalNumUint = ((*z).GlobalNumUint)[:zb0057]
			} else {
				(*z).GlobalNumUint = make([]uint64, zb0057)
			}
			for zb0012 := range (*z).GlobalNumUint {
				(*z).GlobalNumUint[zb0012], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "GlobalNumUint", zb0012)
					return
				}
			}
		}
		if zb0016 > 0 {
			zb0016--
			{
				var zb0059 []byte
				var zb0060 int
				zb0060, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGlobalNumUint")
					return
				}
				if zb0060 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0060), uint64(maxBitmaskSize))
					return
				}
				zb0059, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskGlobalNumUint))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGlobalNumUint")
					return
				}
				(*z).BitmaskGlobalNumUint = bitmask(zb0059)
			}
		}
		if zb0016 > 0 {
			zb0016--
			var zb0061 int
			var zb0062 bool
			zb0061, zb0062, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GlobalNumByteSlice")
				return
			}
			if zb0061 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0061), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "GlobalNumByteSlice")
				return
			}
			if zb0062 {
				(*z).GlobalNumByteSlice = nil
			} else if (*z).GlobalNumByteSlice != nil && cap((*z).GlobalNumByteSlice) >= zb0061 {
				(*z).GlobalNumByteSlice = ((*z).GlobalNumByteSlice)[:zb0061]
			} else {
				(*z).GlobalNumByteSlice = make([]uint64, zb0061)
			}
			for zb0013 := range (*z).GlobalNumByteSlice {
				(*z).GlobalNumByteSlice[zb0013], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "GlobalNumByteSlice", zb0013)
					return
				}
			}
		}
		if zb0016 > 0 {
			zb0016--
			{
				var zb0063 []byte
				var zb0064 int
				zb0064, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGlobalNumByteSlice")
					return
				}
				if zb0064 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0064), uint64(maxBitmaskSize))
					return
				}
				zb0063, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskGlobalNumByteSlice))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGlobalNumByteSlice")
					return
				}
				(*z).BitmaskGlobalNumByteSlice = bitmask(zb0063)
			}
		}
		if zb0016 > 0 {
			zb0016--
			var zb0065 int
			var zb0066 bool
			zb0065, zb0066, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram")
				return
			}
			if zb0065 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0065), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram")
				return
			}
			if zb0066 {
				(*z).ApprovalProgram = nil
			} else if (*z).ApprovalProgram != nil && cap((*z).ApprovalProgram) >= zb0065 {
				(*z).ApprovalProgram = ((*z).ApprovalProgram)[:zb0065]
			} else {
				(*z).ApprovalProgram = make([]program, zb0065)
			}
			for zb0014 := range (*z).ApprovalProgram {
				{
					var zb0067 []byte
					var zb0068 int
					zb0068, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram", zb0014)
						return
					}
					if zb0068 > config.MaxAppProgramLen {
						err = msgp.ErrOverflow(uint64(zb0068), uint64(config.MaxAppProgramLen))
						return
					}
					zb0067, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).ApprovalProgram[zb0014]))
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram", zb0014)
						return
					}
					(*z).ApprovalProgram[zb0014] = program(zb0067)
				}
			}
		}
		if zb0016 > 0 {
			zb0016--
			{
				var zb0069 []byte
				var zb0070 int
				zb0070, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApprovalProgram")
					return
				}
				if zb0070 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0070), uint64(maxBitmaskSize))
					return
				}
				zb0069, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskApprovalProgram))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApprovalProgram")
					return
				}
				(*z).BitmaskApprovalProgram = bitmask(zb0069)
			}
		}
		if zb0016 > 0 {
			zb0016--
			var zb0071 int
			var zb0072 bool
			zb0071, zb0072, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram")
				return
			}
			if zb0071 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0071), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram")
				return
			}
			if zb0072 {
				(*z).ClearStateProgram = nil
			} else if (*z).ClearStateProgram != nil && cap((*z).ClearStateProgram) >= zb0071 {
				(*z).ClearStateProgram = ((*z).ClearStateProgram)[:zb0071]
			} else {
				(*z).ClearStateProgram = make([]program, zb0071)
			}
			for zb0015 := range (*z).ClearStateProgram {
				{
					var zb0073 []byte
					var zb0074 int
					zb0074, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram", zb0015)
						return
					}
					if zb0074 > config.MaxAppProgramLen {
						err = msgp.ErrOverflow(uint64(zb0074), uint64(config.MaxAppProgramLen))
						return
					}
					zb0073, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).ClearStateProgram[zb0015]))
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram", zb0015)
						return
					}
					(*z).ClearStateProgram[zb0015] = program(zb0073)
				}
			}
		}
		if zb0016 > 0 {
			zb0016--
			{
				var zb0075 []byte
				var zb0076 int
				zb0076, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskClearStateProgram")
					return
				}
				if zb0076 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0076), uint64(maxBitmaskSize))
					return
				}
				zb0075, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskClearStateProgram))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskClearStateProgram")
					return
				}
				(*z).BitmaskClearStateProgram = bitmask(zb0075)
			}
		}
		if zb0016 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0016)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0017 {
			(*z) = encodedApplicationCallTxnFields{}
		}
		for zb0016 > 0 {
			zb0016--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "apid":
				var zb0077 int
				var zb0078 bool
				zb0077, zb0078, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApplicationID")
					return
				}
				if zb0077 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0077), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ApplicationID")
					return
				}
				if zb0078 {
					(*z).ApplicationID = nil
				} else if (*z).ApplicationID != nil && cap((*z).ApplicationID) >= zb0077 {
					(*z).ApplicationID = ((*z).ApplicationID)[:zb0077]
				} else {
					(*z).ApplicationID = make([]basics.AppIndex, zb0077)
				}
				for zb0001 := range (*z).ApplicationID {
					bts, err = (*z).ApplicationID[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "ApplicationID", zb0001)
						return
					}
				}
			case "apidbm":
				{
					var zb0079 []byte
					var zb0080 int
					zb0080, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApplicationID")
						return
					}
					if zb0080 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0080), uint64(maxBitmaskSize))
						return
					}
					zb0079, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskApplicationID))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApplicationID")
						return
					}
					(*z).BitmaskApplicationID = bitmask(zb0079)
				}
			case "apan":
				var zb0081 int
				zb0081, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "OnCompletion")
					return
				}
				if zb0081 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0081), uint64(maxEncodedTransactionGroup))
					return
				}
				(*z).OnCompletion, bts, err = msgp.ReadBytesBytes(bts, (*z).OnCompletion)
				if err != nil {
					err = msgp.WrapError(err, "OnCompletion")
					return
				}
			case "apanbm":
				{
					var zb0082 []byte
					var zb0083 int
					zb0083, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskOnCompletion")
						return
					}
					if zb0083 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0083), uint64(maxBitmaskSize))
						return
					}
					zb0082, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskOnCompletion))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskOnCompletion")
						return
					}
					(*z).BitmaskOnCompletion = bitmask(zb0082)
				}
			case "apaa":
				var zb0084 int
				var zb0085 bool
				zb0084, zb0085, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApplicationArgs")
					return
				}
				if zb0084 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0084), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ApplicationArgs")
					return
				}
				if zb0085 {
					(*z).ApplicationArgs = nil
				} else if (*z).ApplicationArgs != nil && cap((*z).ApplicationArgs) >= zb0084 {
					(*z).ApplicationArgs = ((*z).ApplicationArgs)[:zb0084]
				} else {
					(*z).ApplicationArgs = make([]applicationArgs, zb0084)
				}
				for zb0002 := range (*z).ApplicationArgs {
					var zb0086 int
					var zb0087 bool
					zb0086, zb0087, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ApplicationArgs", zb0002)
						return
					}
					if zb0086 > transactions.EncodedMaxApplicationArgs {
						err = msgp.ErrOverflow(uint64(zb0086), uint64(transactions.EncodedMaxApplicationArgs))
						err = msgp.WrapError(err, "ApplicationArgs", zb0002)
						return
					}
					if zb0087 {
						(*z).ApplicationArgs[zb0002] = nil
					} else if (*z).ApplicationArgs[zb0002] != nil && cap((*z).ApplicationArgs[zb0002]) >= zb0086 {
						(*z).ApplicationArgs[zb0002] = ((*z).ApplicationArgs[zb0002])[:zb0086]
					} else {
						(*z).ApplicationArgs[zb0002] = make(applicationArgs, zb0086)
					}
					for zb0003 := range (*z).ApplicationArgs[zb0002] {
						(*z).ApplicationArgs[zb0002][zb0003], bts, err = msgp.ReadBytesBytes(bts, (*z).ApplicationArgs[zb0002][zb0003])
						if err != nil {
							err = msgp.WrapError(err, "ApplicationArgs", zb0002, zb0003)
							return
						}
					}
				}
			case "apaabm":
				{
					var zb0088 []byte
					var zb0089 int
					zb0089, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApplicationArgs")
						return
					}
					if zb0089 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0089), uint64(maxBitmaskSize))
						return
					}
					zb0088, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskApplicationArgs))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApplicationArgs")
						return
					}
					(*z).BitmaskApplicationArgs = bitmask(zb0088)
				}
			case "apat":
				var zb0090 int
				var zb0091 bool
				zb0090, zb0091, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Accounts")
					return
				}
				if zb0090 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0090), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Accounts")
					return
				}
				if zb0091 {
					(*z).Accounts = nil
				} else if (*z).Accounts != nil && cap((*z).Accounts) >= zb0090 {
					(*z).Accounts = ((*z).Accounts)[:zb0090]
				} else {
					(*z).Accounts = make([]addresses, zb0090)
				}
				for zb0004 := range (*z).Accounts {
					var zb0092 int
					var zb0093 bool
					zb0092, zb0093, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Accounts", zb0004)
						return
					}
					if zb0092 > transactions.EncodedMaxAccounts {
						err = msgp.ErrOverflow(uint64(zb0092), uint64(transactions.EncodedMaxAccounts))
						err = msgp.WrapError(err, "Accounts", zb0004)
						return
					}
					if zb0093 {
						(*z).Accounts[zb0004] = nil
					} else if (*z).Accounts[zb0004] != nil && cap((*z).Accounts[zb0004]) >= zb0092 {
						(*z).Accounts[zb0004] = ((*z).Accounts[zb0004])[:zb0092]
					} else {
						(*z).Accounts[zb0004] = make(addresses, zb0092)
					}
					for zb0005 := range (*z).Accounts[zb0004] {
						bts, err = (*z).Accounts[zb0004][zb0005].UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "Accounts", zb0004, zb0005)
							return
						}
					}
				}
			case "apatbm":
				{
					var zb0094 []byte
					var zb0095 int
					zb0095, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAccounts")
						return
					}
					if zb0095 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0095), uint64(maxBitmaskSize))
						return
					}
					zb0094, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskAccounts))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAccounts")
						return
					}
					(*z).BitmaskAccounts = bitmask(zb0094)
				}
			case "apfa":
				var zb0096 int
				var zb0097 bool
				zb0096, zb0097, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ForeignApps")
					return
				}
				if zb0096 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0096), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ForeignApps")
					return
				}
				if zb0097 {
					(*z).ForeignApps = nil
				} else if (*z).ForeignApps != nil && cap((*z).ForeignApps) >= zb0096 {
					(*z).ForeignApps = ((*z).ForeignApps)[:zb0096]
				} else {
					(*z).ForeignApps = make([]appIndices, zb0096)
				}
				for zb0006 := range (*z).ForeignApps {
					var zb0098 int
					var zb0099 bool
					zb0098, zb0099, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ForeignApps", zb0006)
						return
					}
					if zb0098 > transactions.EncodedMaxForeignApps {
						err = msgp.ErrOverflow(uint64(zb0098), uint64(transactions.EncodedMaxForeignApps))
						err = msgp.WrapError(err, "ForeignApps", zb0006)
						return
					}
					if zb0099 {
						(*z).ForeignApps[zb0006] = nil
					} else if (*z).ForeignApps[zb0006] != nil && cap((*z).ForeignApps[zb0006]) >= zb0098 {
						(*z).ForeignApps[zb0006] = ((*z).ForeignApps[zb0006])[:zb0098]
					} else {
						(*z).ForeignApps[zb0006] = make(appIndices, zb0098)
					}
					for zb0007 := range (*z).ForeignApps[zb0006] {
						bts, err = (*z).ForeignApps[zb0006][zb0007].UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "ForeignApps", zb0006, zb0007)
							return
						}
					}
				}
			case "apfabm":
				{
					var zb0100 []byte
					var zb0101 int
					zb0101, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskForeignApps")
						return
					}
					if zb0101 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0101), uint64(maxBitmaskSize))
						return
					}
					zb0100, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskForeignApps))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskForeignApps")
						return
					}
					(*z).BitmaskForeignApps = bitmask(zb0100)
				}
			case "apas":
				var zb0102 int
				var zb0103 bool
				zb0102, zb0103, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ForeignAssets")
					return
				}
				if zb0102 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0102), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ForeignAssets")
					return
				}
				if zb0103 {
					(*z).ForeignAssets = nil
				} else if (*z).ForeignAssets != nil && cap((*z).ForeignAssets) >= zb0102 {
					(*z).ForeignAssets = ((*z).ForeignAssets)[:zb0102]
				} else {
					(*z).ForeignAssets = make([]assetIndices, zb0102)
				}
				for zb0008 := range (*z).ForeignAssets {
					var zb0104 int
					var zb0105 bool
					zb0104, zb0105, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ForeignAssets", zb0008)
						return
					}
					if zb0104 > transactions.EncodedMaxForeignAssets {
						err = msgp.ErrOverflow(uint64(zb0104), uint64(transactions.EncodedMaxForeignAssets))
						err = msgp.WrapError(err, "ForeignAssets", zb0008)
						return
					}
					if zb0105 {
						(*z).ForeignAssets[zb0008] = nil
					} else if (*z).ForeignAssets[zb0008] != nil && cap((*z).ForeignAssets[zb0008]) >= zb0104 {
						(*z).ForeignAssets[zb0008] = ((*z).ForeignAssets[zb0008])[:zb0104]
					} else {
						(*z).ForeignAssets[zb0008] = make(assetIndices, zb0104)
					}
					for zb0009 := range (*z).ForeignAssets[zb0008] {
						bts, err = (*z).ForeignAssets[zb0008][zb0009].UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "ForeignAssets", zb0008, zb0009)
							return
						}
					}
				}
			case "apasbm":
				{
					var zb0106 []byte
					var zb0107 int
					zb0107, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskForeignAssets")
						return
					}
					if zb0107 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0107), uint64(maxBitmaskSize))
						return
					}
					zb0106, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskForeignAssets))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskForeignAssets")
						return
					}
					(*z).BitmaskForeignAssets = bitmask(zb0106)
				}
			case "lnui":
				var zb0108 int
				var zb0109 bool
				zb0108, zb0109, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LocalNumUint")
					return
				}
				if zb0108 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0108), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "LocalNumUint")
					return
				}
				if zb0109 {
					(*z).LocalNumUint = nil
				} else if (*z).LocalNumUint != nil && cap((*z).LocalNumUint) >= zb0108 {
					(*z).LocalNumUint = ((*z).LocalNumUint)[:zb0108]
				} else {
					(*z).LocalNumUint = make([]uint64, zb0108)
				}
				for zb0010 := range (*z).LocalNumUint {
					(*z).LocalNumUint[zb0010], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "LocalNumUint", zb0010)
						return
					}
				}
			case "lnuibm":
				{
					var zb0110 []byte
					var zb0111 int
					zb0111, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLocalNumUint")
						return
					}
					if zb0111 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0111), uint64(maxBitmaskSize))
						return
					}
					zb0110, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskLocalNumUint))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLocalNumUint")
						return
					}
					(*z).BitmaskLocalNumUint = bitmask(zb0110)
				}
			case "lnbs":
				var zb0112 int
				var zb0113 bool
				zb0112, zb0113, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LocalNumByteSlice")
					return
				}
				if zb0112 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0112), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "LocalNumByteSlice")
					return
				}
				if zb0113 {
					(*z).LocalNumByteSlice = nil
				} else if (*z).LocalNumByteSlice != nil && cap((*z).LocalNumByteSlice) >= zb0112 {
					(*z).LocalNumByteSlice = ((*z).LocalNumByteSlice)[:zb0112]
				} else {
					(*z).LocalNumByteSlice = make([]uint64, zb0112)
				}
				for zb0011 := range (*z).LocalNumByteSlice {
					(*z).LocalNumByteSlice[zb0011], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "LocalNumByteSlice", zb0011)
						return
					}
				}
			case "lnbsbm":
				{
					var zb0114 []byte
					var zb0115 int
					zb0115, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLocalNumByteSlice")
						return
					}
					if zb0115 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0115), uint64(maxBitmaskSize))
						return
					}
					zb0114, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskLocalNumByteSlice))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLocalNumByteSlice")
						return
					}
					(*z).BitmaskLocalNumByteSlice = bitmask(zb0114)
				}
			case "gnui":
				var zb0116 int
				var zb0117 bool
				zb0116, zb0117, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "GlobalNumUint")
					return
				}
				if zb0116 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0116), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "GlobalNumUint")
					return
				}
				if zb0117 {
					(*z).GlobalNumUint = nil
				} else if (*z).GlobalNumUint != nil && cap((*z).GlobalNumUint) >= zb0116 {
					(*z).GlobalNumUint = ((*z).GlobalNumUint)[:zb0116]
				} else {
					(*z).GlobalNumUint = make([]uint64, zb0116)
				}
				for zb0012 := range (*z).GlobalNumUint {
					(*z).GlobalNumUint[zb0012], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "GlobalNumUint", zb0012)
						return
					}
				}
			case "gnuibm":
				{
					var zb0118 []byte
					var zb0119 int
					zb0119, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGlobalNumUint")
						return
					}
					if zb0119 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0119), uint64(maxBitmaskSize))
						return
					}
					zb0118, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskGlobalNumUint))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGlobalNumUint")
						return
					}
					(*z).BitmaskGlobalNumUint = bitmask(zb0118)
				}
			case "gnbs":
				var zb0120 int
				var zb0121 bool
				zb0120, zb0121, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "GlobalNumByteSlice")
					return
				}
				if zb0120 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0120), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "GlobalNumByteSlice")
					return
				}
				if zb0121 {
					(*z).GlobalNumByteSlice = nil
				} else if (*z).GlobalNumByteSlice != nil && cap((*z).GlobalNumByteSlice) >= zb0120 {
					(*z).GlobalNumByteSlice = ((*z).GlobalNumByteSlice)[:zb0120]
				} else {
					(*z).GlobalNumByteSlice = make([]uint64, zb0120)
				}
				for zb0013 := range (*z).GlobalNumByteSlice {
					(*z).GlobalNumByteSlice[zb0013], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "GlobalNumByteSlice", zb0013)
						return
					}
				}
			case "gnbsbm":
				{
					var zb0122 []byte
					var zb0123 int
					zb0123, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGlobalNumByteSlice")
						return
					}
					if zb0123 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0123), uint64(maxBitmaskSize))
						return
					}
					zb0122, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskGlobalNumByteSlice))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGlobalNumByteSlice")
						return
					}
					(*z).BitmaskGlobalNumByteSlice = bitmask(zb0122)
				}
			case "apap":
				var zb0124 int
				var zb0125 bool
				zb0124, zb0125, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApprovalProgram")
					return
				}
				if zb0124 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0124), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ApprovalProgram")
					return
				}
				if zb0125 {
					(*z).ApprovalProgram = nil
				} else if (*z).ApprovalProgram != nil && cap((*z).ApprovalProgram) >= zb0124 {
					(*z).ApprovalProgram = ((*z).ApprovalProgram)[:zb0124]
				} else {
					(*z).ApprovalProgram = make([]program, zb0124)
				}
				for zb0014 := range (*z).ApprovalProgram {
					{
						var zb0126 []byte
						var zb0127 int
						zb0127, err = msgp.ReadBytesBytesHeader(bts)
						if err != nil {
							err = msgp.WrapError(err, "ApprovalProgram", zb0014)
							return
						}
						if zb0127 > config.MaxAppProgramLen {
							err = msgp.ErrOverflow(uint64(zb0127), uint64(config.MaxAppProgramLen))
							return
						}
						zb0126, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).ApprovalProgram[zb0014]))
						if err != nil {
							err = msgp.WrapError(err, "ApprovalProgram", zb0014)
							return
						}
						(*z).ApprovalProgram[zb0014] = program(zb0126)
					}
				}
			case "apapbm":
				{
					var zb0128 []byte
					var zb0129 int
					zb0129, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApprovalProgram")
						return
					}
					if zb0129 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0129), uint64(maxBitmaskSize))
						return
					}
					zb0128, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskApprovalProgram))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApprovalProgram")
						return
					}
					(*z).BitmaskApprovalProgram = bitmask(zb0128)
				}
			case "apsu":
				var zb0130 int
				var zb0131 bool
				zb0130, zb0131, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ClearStateProgram")
					return
				}
				if zb0130 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0130), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ClearStateProgram")
					return
				}
				if zb0131 {
					(*z).ClearStateProgram = nil
				} else if (*z).ClearStateProgram != nil && cap((*z).ClearStateProgram) >= zb0130 {
					(*z).ClearStateProgram = ((*z).ClearStateProgram)[:zb0130]
				} else {
					(*z).ClearStateProgram = make([]program, zb0130)
				}
				for zb0015 := range (*z).ClearStateProgram {
					{
						var zb0132 []byte
						var zb0133 int
						zb0133, err = msgp.ReadBytesBytesHeader(bts)
						if err != nil {
							err = msgp.WrapError(err, "ClearStateProgram", zb0015)
							return
						}
						if zb0133 > config.MaxAppProgramLen {
							err = msgp.ErrOverflow(uint64(zb0133), uint64(config.MaxAppProgramLen))
							return
						}
						zb0132, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).ClearStateProgram[zb0015]))
						if err != nil {
							err = msgp.WrapError(err, "ClearStateProgram", zb0015)
							return
						}
						(*z).ClearStateProgram[zb0015] = program(zb0132)
					}
				}
			case "apsubm":
				{
					var zb0134 []byte
					var zb0135 int
					zb0135, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskClearStateProgram")
						return
					}
					if zb0135 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0135), uint64(maxBitmaskSize))
						return
					}
					zb0134, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskClearStateProgram))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskClearStateProgram")
						return
					}
					(*z).BitmaskClearStateProgram = bitmask(zb0134)
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *encodedApplicationCallTxnFields) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedApplicationCallTxnFields)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *encodedApplicationCallTxnFields) Msgsize() (s int) {
	s = 3 + 5 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).ApplicationID {
		s += (*z).ApplicationID[zb0001].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskApplicationID)) + 5 + msgp.BytesPrefixSize + len((*z).OnCompletion) + 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskOnCompletion)) + 5 + msgp.ArrayHeaderSize
	for zb0002 := range (*z).ApplicationArgs {
		s += msgp.ArrayHeaderSize
		for zb0003 := range (*z).ApplicationArgs[zb0002] {
			s += msgp.BytesPrefixSize + len((*z).ApplicationArgs[zb0002][zb0003])
		}
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskApplicationArgs)) + 5 + msgp.ArrayHeaderSize
	for zb0004 := range (*z).Accounts {
		s += msgp.ArrayHeaderSize
		for zb0005 := range (*z).Accounts[zb0004] {
			s += (*z).Accounts[zb0004][zb0005].Msgsize()
		}
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskAccounts)) + 5 + msgp.ArrayHeaderSize
	for zb0006 := range (*z).ForeignApps {
		s += msgp.ArrayHeaderSize
		for zb0007 := range (*z).ForeignApps[zb0006] {
			s += (*z).ForeignApps[zb0006][zb0007].Msgsize()
		}
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskForeignApps)) + 5 + msgp.ArrayHeaderSize
	for zb0008 := range (*z).ForeignAssets {
		s += msgp.ArrayHeaderSize
		for zb0009 := range (*z).ForeignAssets[zb0008] {
			s += (*z).ForeignAssets[zb0008][zb0009].Msgsize()
		}
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskForeignAssets)) + 5 + msgp.ArrayHeaderSize + (len((*z).LocalNumUint) * (msgp.Uint64Size)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskLocalNumUint)) + 5 + msgp.ArrayHeaderSize + (len((*z).LocalNumByteSlice) * (msgp.Uint64Size)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskLocalNumByteSlice)) + 5 + msgp.ArrayHeaderSize + (len((*z).GlobalNumUint) * (msgp.Uint64Size)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskGlobalNumUint)) + 5 + msgp.ArrayHeaderSize + (len((*z).GlobalNumByteSlice) * (msgp.Uint64Size)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskGlobalNumByteSlice)) + 5 + msgp.ArrayHeaderSize
	for zb0014 := range (*z).ApprovalProgram {
		s += msgp.BytesPrefixSize + len([]byte((*z).ApprovalProgram[zb0014]))
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskApprovalProgram)) + 5 + msgp.ArrayHeaderSize
	for zb0015 := range (*z).ClearStateProgram {
		s += msgp.BytesPrefixSize + len([]byte((*z).ClearStateProgram[zb0015]))
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskClearStateProgram))
	return
}

// MsgIsZero returns whether this is a zero value
func (z *encodedApplicationCallTxnFields) MsgIsZero() bool {
	return (len((*z).ApplicationID) == 0) && (len((*z).BitmaskApplicationID) == 0) && (len((*z).OnCompletion) == 0) && (len((*z).BitmaskOnCompletion) == 0) && (len((*z).ApplicationArgs) == 0) && (len((*z).BitmaskApplicationArgs) == 0) && (len((*z).Accounts) == 0) && (len((*z).BitmaskAccounts) == 0) && (len((*z).ForeignApps) == 0) && (len((*z).BitmaskForeignApps) == 0) && (len((*z).ForeignAssets) == 0) && (len((*z).BitmaskForeignAssets) == 0) && (len((*z).LocalNumUint) == 0) && (len((*z).BitmaskLocalNumUint) == 0) && (len((*z).LocalNumByteSlice) == 0) && (len((*z).BitmaskLocalNumByteSlice) == 0) && (len((*z).GlobalNumUint) == 0) && (len((*z).BitmaskGlobalNumUint) == 0) && (len((*z).GlobalNumByteSlice) == 0) && (len((*z).BitmaskGlobalNumByteSlice) == 0) && (len((*z).ApprovalProgram) == 0) && (len((*z).BitmaskApprovalProgram) == 0) && (len((*z).ClearStateProgram) == 0) && (len((*z).BitmaskClearStateProgram) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *encodedAssetConfigTxnFields) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0007Len := uint32(23)
	var zb0007Mask uint32 /* 25 bits */
	if len((*z).encodedAssetParams.MetadataHash) == 0 {
		zb0007Len--
		zb0007Mask |= 0x4
	}
	if len((*z).encodedAssetParams.BitmaskMetadataHash) == 0 {
		zb0007Len--
		zb0007Mask |= 0x8
	}
	if len((*z).encodedAssetParams.AssetName) == 0 {
		zb0007Len--
		zb0007Mask |= 0x10
	}
	if len((*z).encodedAssetParams.BitmaskAssetName) == 0 {
		zb0007Len--
		zb0007Mask |= 0x20
	}
	if len((*z).encodedAssetParams.URL) == 0 {
		zb0007Len--
		zb0007Mask |= 0x40
	}
	if len((*z).encodedAssetParams.BitmaskURL) == 0 {
		zb0007Len--
		zb0007Mask |= 0x80
	}
	if len((*z).encodedAssetParams.Clawback) == 0 {
		zb0007Len--
		zb0007Mask |= 0x100
	}
	if len((*z).ConfigAsset) == 0 {
		zb0007Len--
		zb0007Mask |= 0x200
	}
	if len((*z).BitmaskConfigAsset) == 0 {
		zb0007Len--
		zb0007Mask |= 0x400
	}
	if len((*z).encodedAssetParams.BitmaskClawback) == 0 {
		zb0007Len--
		zb0007Mask |= 0x800
	}
	if len((*z).encodedAssetParams.Decimals) == 0 {
		zb0007Len--
		zb0007Mask |= 0x1000
	}
	if len((*z).encodedAssetParams.BitmaskDecimals) == 0 {
		zb0007Len--
		zb0007Mask |= 0x2000
	}
	if len((*z).encodedAssetParams.BitmaskDefaultFrozen) == 0 {
		zb0007Len--
		zb0007Mask |= 0x4000
	}
	if len((*z).encodedAssetParams.Freeze) == 0 {
		zb0007Len--
		zb0007Mask |= 0x8000
	}
	if len((*z).encodedAssetParams.BitmaskFreeze) == 0 {
		zb0007Len--
		zb0007Mask |= 0x10000
	}
	if len((*z).encodedAssetParams.Manager) == 0 {
		zb0007Len--
		zb0007Mask |= 0x20000
	}
	if len((*z).encodedAssetParams.BitmaskManager) == 0 {
		zb0007Len--
		zb0007Mask |= 0x40000
	}
	if len((*z).encodedAssetParams.Reserve) == 0 {
		zb0007Len--
		zb0007Mask |= 0x80000
	}
	if len((*z).encodedAssetParams.BitmaskReserve) == 0 {
		zb0007Len--
		zb0007Mask |= 0x100000
	}
	if len((*z).encodedAssetParams.Total) == 0 {
		zb0007Len--
		zb0007Mask |= 0x200000
	}
	if len((*z).encodedAssetParams.BitmaskTotal) == 0 {
		zb0007Len--
		zb0007Mask |= 0x400000
	}
	if len((*z).encodedAssetParams.UnitName) == 0 {
		zb0007Len--
		zb0007Mask |= 0x800000
	}
	if len((*z).encodedAssetParams.BitmaskUnitName) == 0 {
		zb0007Len--
		zb0007Mask |= 0x1000000
	}
	// variable map header, size zb0007Len
	o = msgp.AppendMapHeader(o, zb0007Len)
	if zb0007Len != 0 {
		if (zb0007Mask & 0x4) == 0 { // if not empty
			// string "am"
			o = append(o, 0xa2, 0x61, 0x6d)
			o = msgp.AppendBytes(o, (*z).encodedAssetParams.MetadataHash)
		}
		if (zb0007Mask & 0x8) == 0 { // if not empty
			// string "ambm"
			o = append(o, 0xa4, 0x61, 0x6d, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetParams.BitmaskMetadataHash))
		}
		if (zb0007Mask & 0x10) == 0 { // if not empty
			// string "an"
			o = append(o, 0xa2, 0x61, 0x6e)
			if (*z).encodedAssetParams.AssetName == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedAssetParams.AssetName)))
			}
			for zb0005 := range (*z).encodedAssetParams.AssetName {
				o = msgp.AppendString(o, (*z).encodedAssetParams.AssetName[zb0005])
			}
		}
		if (zb0007Mask & 0x20) == 0 { // if not empty
			// string "anbm"
			o = append(o, 0xa4, 0x61, 0x6e, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetParams.BitmaskAssetName))
		}
		if (zb0007Mask & 0x40) == 0 { // if not empty
			// string "au"
			o = append(o, 0xa2, 0x61, 0x75)
			if (*z).encodedAssetParams.URL == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedAssetParams.URL)))
			}
			for zb0006 := range (*z).encodedAssetParams.URL {
				o = msgp.AppendString(o, (*z).encodedAssetParams.URL[zb0006])
			}
		}
		if (zb0007Mask & 0x80) == 0 { // if not empty
			// string "aubm"
			o = append(o, 0xa4, 0x61, 0x75, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetParams.BitmaskURL))
		}
		if (zb0007Mask & 0x100) == 0 { // if not empty
			// string "c"
			o = append(o, 0xa1, 0x63)
			o = msgp.AppendBytes(o, (*z).encodedAssetParams.Clawback)
		}
		if (zb0007Mask & 0x200) == 0 { // if not empty
			// string "caid"
			o = append(o, 0xa4, 0x63, 0x61, 0x69, 0x64)
			if (*z).ConfigAsset == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).ConfigAsset)))
			}
			for zb0001 := range (*z).ConfigAsset {
				o = (*z).ConfigAsset[zb0001].MarshalMsg(o)
			}
		}
		if (zb0007Mask & 0x400) == 0 { // if not empty
			// string "caidbm"
			o = append(o, 0xa6, 0x63, 0x61, 0x69, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskConfigAsset))
		}
		if (zb0007Mask & 0x800) == 0 { // if not empty
			// string "cbm"
			o = append(o, 0xa3, 0x63, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetParams.BitmaskClawback))
		}
		if (zb0007Mask & 0x1000) == 0 { // if not empty
			// string "dc"
			o = append(o, 0xa2, 0x64, 0x63)
			if (*z).encodedAssetParams.Decimals == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedAssetParams.Decimals)))
			}
			for zb0003 := range (*z).encodedAssetParams.Decimals {
				o = msgp.AppendUint32(o, (*z).encodedAssetParams.Decimals[zb0003])
			}
		}
		if (zb0007Mask & 0x2000) == 0 { // if not empty
			// string "dcbm"
			o = append(o, 0xa4, 0x64, 0x63, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetParams.BitmaskDecimals))
		}
		if (zb0007Mask & 0x4000) == 0 { // if not empty
			// string "dfbm"
			o = append(o, 0xa4, 0x64, 0x66, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetParams.BitmaskDefaultFrozen))
		}
		if (zb0007Mask & 0x8000) == 0 { // if not empty
			// string "f"
			o = append(o, 0xa1, 0x66)
			o = msgp.AppendBytes(o, (*z).encodedAssetParams.Freeze)
		}
		if (zb0007Mask & 0x10000) == 0 { // if not empty
			// string "fbm"
			o = append(o, 0xa3, 0x66, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetParams.BitmaskFreeze))
		}
		if (zb0007Mask & 0x20000) == 0 { // if not empty
			// string "m"
			o = append(o, 0xa1, 0x6d)
			o = msgp.AppendBytes(o, (*z).encodedAssetParams.Manager)
		}
		if (zb0007Mask & 0x40000) == 0 { // if not empty
			// string "mbm"
			o = append(o, 0xa3, 0x6d, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetParams.BitmaskManager))
		}
		if (zb0007Mask & 0x80000) == 0 { // if not empty
			// string "r"
			o = append(o, 0xa1, 0x72)
			o = msgp.AppendBytes(o, (*z).encodedAssetParams.Reserve)
		}
		if (zb0007Mask & 0x100000) == 0 { // if not empty
			// string "rbm"
			o = append(o, 0xa3, 0x72, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetParams.BitmaskReserve))
		}
		if (zb0007Mask & 0x200000) == 0 { // if not empty
			// string "t"
			o = append(o, 0xa1, 0x74)
			if (*z).encodedAssetParams.Total == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedAssetParams.Total)))
			}
			for zb0002 := range (*z).encodedAssetParams.Total {
				o = msgp.AppendUint64(o, (*z).encodedAssetParams.Total[zb0002])
			}
		}
		if (zb0007Mask & 0x400000) == 0 { // if not empty
			// string "tbm"
			o = append(o, 0xa3, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetParams.BitmaskTotal))
		}
		if (zb0007Mask & 0x800000) == 0 { // if not empty
			// string "un"
			o = append(o, 0xa2, 0x75, 0x6e)
			if (*z).encodedAssetParams.UnitName == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedAssetParams.UnitName)))
			}
			for zb0004 := range (*z).encodedAssetParams.UnitName {
				o = msgp.AppendString(o, (*z).encodedAssetParams.UnitName[zb0004])
			}
		}
		if (zb0007Mask & 0x1000000) == 0 { // if not empty
			// string "unbm"
			o = append(o, 0xa4, 0x75, 0x6e, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetParams.BitmaskUnitName))
		}
	}
	return
}

func (_ *encodedAssetConfigTxnFields) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedAssetConfigTxnFields)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *encodedAssetConfigTxnFields) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0007 int
	var zb0008 bool
	zb0007, zb0008, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0007, zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0007 > 0 {
			zb0007--
			var zb0009 int
			var zb0010 bool
			zb0009, zb0010, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ConfigAsset")
				return
			}
			if zb0009 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0009), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ConfigAsset")
				return
			}
			if zb0010 {
				(*z).ConfigAsset = nil
			} else if (*z).ConfigAsset != nil && cap((*z).ConfigAsset) >= zb0009 {
				(*z).ConfigAsset = ((*z).ConfigAsset)[:zb0009]
			} else {
				(*z).ConfigAsset = make([]basics.AssetIndex, zb0009)
			}
			for zb0001 := range (*z).ConfigAsset {
				bts, err = (*z).ConfigAsset[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ConfigAsset", zb0001)
					return
				}
			}
		}
		if zb0007 > 0 {
			zb0007--
			{
				var zb0011 []byte
				var zb0012 int
				zb0012, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskConfigAsset")
					return
				}
				if zb0012 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0012), uint64(maxBitmaskSize))
					return
				}
				zb0011, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskConfigAsset))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskConfigAsset")
					return
				}
				(*z).BitmaskConfigAsset = bitmask(zb0011)
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0013 int
			var zb0014 bool
			zb0013, zb0014, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Total")
				return
			}
			if zb0013 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0013), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Total")
				return
			}
			if zb0014 {
				(*z).encodedAssetParams.Total = nil
			} else if (*z).encodedAssetParams.Total != nil && cap((*z).encodedAssetParams.Total) >= zb0013 {
				(*z).encodedAssetParams.Total = ((*z).encodedAssetParams.Total)[:zb0013]
			} else {
				(*z).encodedAssetParams.Total = make([]uint64, zb0013)
			}
			for zb0002 := range (*z).encodedAssetParams.Total {
				(*z).encodedAssetParams.Total[zb0002], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Total", zb0002)
					return
				}
			}
		}
		if zb0007 > 0 {
			zb0007--
			{
				var zb0015 []byte
				var zb0016 int
				zb0016, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskTotal")
					return
				}
				if zb0016 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0016), uint64(maxBitmaskSize))
					return
				}
				zb0015, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskTotal))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskTotal")
					return
				}
				(*z).encodedAssetParams.BitmaskTotal = bitmask(zb0015)
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0017 int
			var zb0018 bool
			zb0017, zb0018, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Decimals")
				return
			}
			if zb0017 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0017), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Decimals")
				return
			}
			if zb0018 {
				(*z).encodedAssetParams.Decimals = nil
			} else if (*z).encodedAssetParams.Decimals != nil && cap((*z).encodedAssetParams.Decimals) >= zb0017 {
				(*z).encodedAssetParams.Decimals = ((*z).encodedAssetParams.Decimals)[:zb0017]
			} else {
				(*z).encodedAssetParams.Decimals = make([]uint32, zb0017)
			}
			for zb0003 := range (*z).encodedAssetParams.Decimals {
				(*z).encodedAssetParams.Decimals[zb0003], bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Decimals", zb0003)
					return
				}
			}
		}
		if zb0007 > 0 {
			zb0007--
			{
				var zb0019 []byte
				var zb0020 int
				zb0020, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskDecimals")
					return
				}
				if zb0020 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0020), uint64(maxBitmaskSize))
					return
				}
				zb0019, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskDecimals))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskDecimals")
					return
				}
				(*z).encodedAssetParams.BitmaskDecimals = bitmask(zb0019)
			}
		}
		if zb0007 > 0 {
			zb0007--
			{
				var zb0021 []byte
				var zb0022 int
				zb0022, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskDefaultFrozen")
					return
				}
				if zb0022 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0022), uint64(maxBitmaskSize))
					return
				}
				zb0021, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskDefaultFrozen))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskDefaultFrozen")
					return
				}
				(*z).encodedAssetParams.BitmaskDefaultFrozen = bitmask(zb0021)
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0023 int
			var zb0024 bool
			zb0023, zb0024, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "UnitName")
				return
			}
			if zb0023 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0023), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "UnitName")
				return
			}
			if zb0024 {
				(*z).encodedAssetParams.UnitName = nil
			} else if (*z).encodedAssetParams.UnitName != nil && cap((*z).encodedAssetParams.UnitName) >= zb0023 {
				(*z).encodedAssetParams.UnitName = ((*z).encodedAssetParams.UnitName)[:zb0023]
			} else {
				(*z).encodedAssetParams.UnitName = make([]string, zb0023)
			}
			for zb0004 := range (*z).encodedAssetParams.UnitName {
				(*z).encodedAssetParams.UnitName[zb0004], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "UnitName", zb0004)
					return
				}
			}
		}
		if zb0007 > 0 {
			zb0007--
			{
				var zb0025 []byte
				var zb0026 int
				zb0026, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskUnitName")
					return
				}
				if zb0026 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0026), uint64(maxBitmaskSize))
					return
				}
				zb0025, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskUnitName))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskUnitName")
					return
				}
				(*z).encodedAssetParams.BitmaskUnitName = bitmask(zb0025)
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0027 int
			var zb0028 bool
			zb0027, zb0028, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetName")
				return
			}
			if zb0027 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0027), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "AssetName")
				return
			}
			if zb0028 {
				(*z).encodedAssetParams.AssetName = nil
			} else if (*z).encodedAssetParams.AssetName != nil && cap((*z).encodedAssetParams.AssetName) >= zb0027 {
				(*z).encodedAssetParams.AssetName = ((*z).encodedAssetParams.AssetName)[:zb0027]
			} else {
				(*z).encodedAssetParams.AssetName = make([]string, zb0027)
			}
			for zb0005 := range (*z).encodedAssetParams.AssetName {
				(*z).encodedAssetParams.AssetName[zb0005], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AssetName", zb0005)
					return
				}
			}
		}
		if zb0007 > 0 {
			zb0007--
			{
				var zb0029 []byte
				var zb0030 int
				zb0030, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetName")
					return
				}
				if zb0030 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0030), uint64(maxBitmaskSize))
					return
				}
				zb0029, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskAssetName))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetName")
					return
				}
				(*z).encodedAssetParams.BitmaskAssetName = bitmask(zb0029)
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0031 int
			var zb0032 bool
			zb0031, zb0032, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "URL")
				return
			}
			if zb0031 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0031), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "URL")
				return
			}
			if zb0032 {
				(*z).encodedAssetParams.URL = nil
			} else if (*z).encodedAssetParams.URL != nil && cap((*z).encodedAssetParams.URL) >= zb0031 {
				(*z).encodedAssetParams.URL = ((*z).encodedAssetParams.URL)[:zb0031]
			} else {
				(*z).encodedAssetParams.URL = make([]string, zb0031)
			}
			for zb0006 := range (*z).encodedAssetParams.URL {
				(*z).encodedAssetParams.URL[zb0006], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "URL", zb0006)
					return
				}
			}
		}
		if zb0007 > 0 {
			zb0007--
			{
				var zb0033 []byte
				var zb0034 int
				zb0034, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskURL")
					return
				}
				if zb0034 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0034), uint64(maxBitmaskSize))
					return
				}
				zb0033, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskURL))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskURL")
					return
				}
				(*z).encodedAssetParams.BitmaskURL = bitmask(zb0033)
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0035 int
			zb0035, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MetadataHash")
				return
			}
			if zb0035 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0035), uint64(maxAddressBytes))
				return
			}
			(*z).encodedAssetParams.MetadataHash, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetParams.MetadataHash)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MetadataHash")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			{
				var zb0036 []byte
				var zb0037 int
				zb0037, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskMetadataHash")
					return
				}
				if zb0037 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0037), uint64(maxBitmaskSize))
					return
				}
				zb0036, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskMetadataHash))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskMetadataHash")
					return
				}
				(*z).encodedAssetParams.BitmaskMetadataHash = bitmask(zb0036)
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0038 int
			zb0038, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Manager")
				return
			}
			if zb0038 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0038), uint64(maxAddressBytes))
				return
			}
			(*z).encodedAssetParams.Manager, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetParams.Manager)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Manager")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			{
				var zb0039 []byte
				var zb0040 int
				zb0040, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskManager")
					return
				}
				if zb0040 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0040), uint64(maxBitmaskSize))
					return
				}
				zb0039, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskManager))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskManager")
					return
				}
				(*z).encodedAssetParams.BitmaskManager = bitmask(zb0039)
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0041 int
			zb0041, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Reserve")
				return
			}
			if zb0041 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0041), uint64(maxAddressBytes))
				return
			}
			(*z).encodedAssetParams.Reserve, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetParams.Reserve)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Reserve")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			{
				var zb0042 []byte
				var zb0043 int
				zb0043, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskReserve")
					return
				}
				if zb0043 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0043), uint64(maxBitmaskSize))
					return
				}
				zb0042, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskReserve))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskReserve")
					return
				}
				(*z).encodedAssetParams.BitmaskReserve = bitmask(zb0042)
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0044 int
			zb0044, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Freeze")
				return
			}
			if zb0044 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0044), uint64(maxAddressBytes))
				return
			}
			(*z).encodedAssetParams.Freeze, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetParams.Freeze)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Freeze")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			{
				var zb0045 []byte
				var zb0046 int
				zb0046, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreeze")
					return
				}
				if zb0046 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0046), uint64(maxBitmaskSize))
					return
				}
				zb0045, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskFreeze))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreeze")
					return
				}
				(*z).encodedAssetParams.BitmaskFreeze = bitmask(zb0045)
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0047 int
			zb0047, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Clawback")
				return
			}
			if zb0047 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0047), uint64(maxAddressBytes))
				return
			}
			(*z).encodedAssetParams.Clawback, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetParams.Clawback)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Clawback")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			{
				var zb0048 []byte
				var zb0049 int
				zb0049, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskClawback")
					return
				}
				if zb0049 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0049), uint64(maxBitmaskSize))
					return
				}
				zb0048, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskClawback))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskClawback")
					return
				}
				(*z).encodedAssetParams.BitmaskClawback = bitmask(zb0048)
			}
		}
		if zb0007 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0007)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0008 {
			(*z) = encodedAssetConfigTxnFields{}
		}
		for zb0007 > 0 {
			zb0007--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "caid":
				var zb0050 int
				var zb0051 bool
				zb0050, zb0051, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ConfigAsset")
					return
				}
				if zb0050 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0050), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ConfigAsset")
					return
				}
				if zb0051 {
					(*z).ConfigAsset = nil
				} else if (*z).ConfigAsset != nil && cap((*z).ConfigAsset) >= zb0050 {
					(*z).ConfigAsset = ((*z).ConfigAsset)[:zb0050]
				} else {
					(*z).ConfigAsset = make([]basics.AssetIndex, zb0050)
				}
				for zb0001 := range (*z).ConfigAsset {
					bts, err = (*z).ConfigAsset[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "ConfigAsset", zb0001)
						return
					}
				}
			case "caidbm":
				{
					var zb0052 []byte
					var zb0053 int
					zb0053, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskConfigAsset")
						return
					}
					if zb0053 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0053), uint64(maxBitmaskSize))
						return
					}
					zb0052, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskConfigAsset))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskConfigAsset")
						return
					}
					(*z).BitmaskConfigAsset = bitmask(zb0052)
				}
			case "t":
				var zb0054 int
				var zb0055 bool
				zb0054, zb0055, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Total")
					return
				}
				if zb0054 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0054), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Total")
					return
				}
				if zb0055 {
					(*z).encodedAssetParams.Total = nil
				} else if (*z).encodedAssetParams.Total != nil && cap((*z).encodedAssetParams.Total) >= zb0054 {
					(*z).encodedAssetParams.Total = ((*z).encodedAssetParams.Total)[:zb0054]
				} else {
					(*z).encodedAssetParams.Total = make([]uint64, zb0054)
				}
				for zb0002 := range (*z).encodedAssetParams.Total {
					(*z).encodedAssetParams.Total[zb0002], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Total", zb0002)
						return
					}
				}
			case "tbm":
				{
					var zb0056 []byte
					var zb0057 int
					zb0057, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskTotal")
						return
					}
					if zb0057 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0057), uint64(maxBitmaskSize))
						return
					}
					zb0056, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskTotal))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskTotal")
						return
					}
					(*z).encodedAssetParams.BitmaskTotal = bitmask(zb0056)
				}
			case "dc":
				var zb0058 int
				var zb0059 bool
				zb0058, zb0059, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Decimals")
					return
				}
				if zb0058 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0058), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Decimals")
					return
				}
				if zb0059 {
					(*z).encodedAssetParams.Decimals = nil
				} else if (*z).encodedAssetParams.Decimals != nil && cap((*z).encodedAssetParams.Decimals) >= zb0058 {
					(*z).encodedAssetParams.Decimals = ((*z).encodedAssetParams.Decimals)[:zb0058]
				} else {
					(*z).encodedAssetParams.Decimals = make([]uint32, zb0058)
				}
				for zb0003 := range (*z).encodedAssetParams.Decimals {
					(*z).encodedAssetParams.Decimals[zb0003], bts, err = msgp.ReadUint32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Decimals", zb0003)
						return
					}
				}
			case "dcbm":
				{
					var zb0060 []byte
					var zb0061 int
					zb0061, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskDecimals")
						return
					}
					if zb0061 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0061), uint64(maxBitmaskSize))
						return
					}
					zb0060, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskDecimals))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskDecimals")
						return
					}
					(*z).encodedAssetParams.BitmaskDecimals = bitmask(zb0060)
				}
			case "dfbm":
				{
					var zb0062 []byte
					var zb0063 int
					zb0063, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskDefaultFrozen")
						return
					}
					if zb0063 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0063), uint64(maxBitmaskSize))
						return
					}
					zb0062, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskDefaultFrozen))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskDefaultFrozen")
						return
					}
					(*z).encodedAssetParams.BitmaskDefaultFrozen = bitmask(zb0062)
				}
			case "un":
				var zb0064 int
				var zb0065 bool
				zb0064, zb0065, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "UnitName")
					return
				}
				if zb0064 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0064), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "UnitName")
					return
				}
				if zb0065 {
					(*z).encodedAssetParams.UnitName = nil
				} else if (*z).encodedAssetParams.UnitName != nil && cap((*z).encodedAssetParams.UnitName) >= zb0064 {
					(*z).encodedAssetParams.UnitName = ((*z).encodedAssetParams.UnitName)[:zb0064]
				} else {
					(*z).encodedAssetParams.UnitName = make([]string, zb0064)
				}
				for zb0004 := range (*z).encodedAssetParams.UnitName {
					(*z).encodedAssetParams.UnitName[zb0004], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "UnitName", zb0004)
						return
					}
				}
			case "unbm":
				{
					var zb0066 []byte
					var zb0067 int
					zb0067, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskUnitName")
						return
					}
					if zb0067 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0067), uint64(maxBitmaskSize))
						return
					}
					zb0066, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskUnitName))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskUnitName")
						return
					}
					(*z).encodedAssetParams.BitmaskUnitName = bitmask(zb0066)
				}
			case "an":
				var zb0068 int
				var zb0069 bool
				zb0068, zb0069, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetName")
					return
				}
				if zb0068 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0068), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "AssetName")
					return
				}
				if zb0069 {
					(*z).encodedAssetParams.AssetName = nil
				} else if (*z).encodedAssetParams.AssetName != nil && cap((*z).encodedAssetParams.AssetName) >= zb0068 {
					(*z).encodedAssetParams.AssetName = ((*z).encodedAssetParams.AssetName)[:zb0068]
				} else {
					(*z).encodedAssetParams.AssetName = make([]string, zb0068)
				}
				for zb0005 := range (*z).encodedAssetParams.AssetName {
					(*z).encodedAssetParams.AssetName[zb0005], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "AssetName", zb0005)
						return
					}
				}
			case "anbm":
				{
					var zb0070 []byte
					var zb0071 int
					zb0071, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetName")
						return
					}
					if zb0071 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0071), uint64(maxBitmaskSize))
						return
					}
					zb0070, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskAssetName))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetName")
						return
					}
					(*z).encodedAssetParams.BitmaskAssetName = bitmask(zb0070)
				}
			case "au":
				var zb0072 int
				var zb0073 bool
				zb0072, zb0073, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "URL")
					return
				}
				if zb0072 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0072), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "URL")
					return
				}
				if zb0073 {
					(*z).encodedAssetParams.URL = nil
				} else if (*z).encodedAssetParams.URL != nil && cap((*z).encodedAssetParams.URL) >= zb0072 {
					(*z).encodedAssetParams.URL = ((*z).encodedAssetParams.URL)[:zb0072]
				} else {
					(*z).encodedAssetParams.URL = make([]string, zb0072)
				}
				for zb0006 := range (*z).encodedAssetParams.URL {
					(*z).encodedAssetParams.URL[zb0006], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "URL", zb0006)
						return
					}
				}
			case "aubm":
				{
					var zb0074 []byte
					var zb0075 int
					zb0075, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskURL")
						return
					}
					if zb0075 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0075), uint64(maxBitmaskSize))
						return
					}
					zb0074, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskURL))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskURL")
						return
					}
					(*z).encodedAssetParams.BitmaskURL = bitmask(zb0074)
				}
			case "am":
				var zb0076 int
				zb0076, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "MetadataHash")
					return
				}
				if zb0076 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0076), uint64(maxAddressBytes))
					return
				}
				(*z).encodedAssetParams.MetadataHash, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetParams.MetadataHash)
				if err != nil {
					err = msgp.WrapError(err, "MetadataHash")
					return
				}
			case "ambm":
				{
					var zb0077 []byte
					var zb0078 int
					zb0078, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskMetadataHash")
						return
					}
					if zb0078 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0078), uint64(maxBitmaskSize))
						return
					}
					zb0077, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskMetadataHash))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskMetadataHash")
						return
					}
					(*z).encodedAssetParams.BitmaskMetadataHash = bitmask(zb0077)
				}
			case "m":
				var zb0079 int
				zb0079, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Manager")
					return
				}
				if zb0079 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0079), uint64(maxAddressBytes))
					return
				}
				(*z).encodedAssetParams.Manager, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetParams.Manager)
				if err != nil {
					err = msgp.WrapError(err, "Manager")
					return
				}
			case "mbm":
				{
					var zb0080 []byte
					var zb0081 int
					zb0081, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskManager")
						return
					}
					if zb0081 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0081), uint64(maxBitmaskSize))
						return
					}
					zb0080, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskManager))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskManager")
						return
					}
					(*z).encodedAssetParams.BitmaskManager = bitmask(zb0080)
				}
			case "r":
				var zb0082 int
				zb0082, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Reserve")
					return
				}
				if zb0082 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0082), uint64(maxAddressBytes))
					return
				}
				(*z).encodedAssetParams.Reserve, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetParams.Reserve)
				if err != nil {
					err = msgp.WrapError(err, "Reserve")
					return
				}
			case "rbm":
				{
					var zb0083 []byte
					var zb0084 int
					zb0084, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskReserve")
						return
					}
					if zb0084 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0084), uint64(maxBitmaskSize))
						return
					}
					zb0083, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskReserve))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskReserve")
						return
					}
					(*z).encodedAssetParams.BitmaskReserve = bitmask(zb0083)
				}
			case "f":
				var zb0085 int
				zb0085, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Freeze")
					return
				}
				if zb0085 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0085), uint64(maxAddressBytes))
					return
				}
				(*z).encodedAssetParams.Freeze, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetParams.Freeze)
				if err != nil {
					err = msgp.WrapError(err, "Freeze")
					return
				}
			case "fbm":
				{
					var zb0086 []byte
					var zb0087 int
					zb0087, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreeze")
						return
					}
					if zb0087 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0087), uint64(maxBitmaskSize))
						return
					}
					zb0086, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskFreeze))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreeze")
						return
					}
					(*z).encodedAssetParams.BitmaskFreeze = bitmask(zb0086)
				}
			case "c":
				var zb0088 int
				zb0088, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Clawback")
					return
				}
				if zb0088 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0088), uint64(maxAddressBytes))
					return
				}
				(*z).encodedAssetParams.Clawback, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetParams.Clawback)
				if err != nil {
					err = msgp.WrapError(err, "Clawback")
					return
				}
			case "cbm":
				{
					var zb0089 []byte
					var zb0090 int
					zb0090, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskClawback")
						return
					}
					if zb0090 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0090), uint64(maxBitmaskSize))
						return
					}
					zb0089, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetParams.BitmaskClawback))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskClawback")
						return
					}
					(*z).encodedAssetParams.BitmaskClawback = bitmask(zb0089)
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *encodedAssetConfigTxnFields) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedAssetConfigTxnFields)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *encodedAssetConfigTxnFields) Msgsize() (s int) {
	s = 3 + 5 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).ConfigAsset {
		s += (*z).ConfigAsset[zb0001].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskConfigAsset)) + 2 + msgp.ArrayHeaderSize + (len((*z).encodedAssetParams.Total) * (msgp.Uint64Size)) + 4 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetParams.BitmaskTotal)) + 3 + msgp.ArrayHeaderSize + (len((*z).encodedAssetParams.Decimals) * (msgp.Uint32Size)) + 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetParams.BitmaskDecimals)) + 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetParams.BitmaskDefaultFrozen)) + 3 + msgp.ArrayHeaderSize
	for zb0004 := range (*z).encodedAssetParams.UnitName {
		s += msgp.StringPrefixSize + len((*z).encodedAssetParams.UnitName[zb0004])
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetParams.BitmaskUnitName)) + 3 + msgp.ArrayHeaderSize
	for zb0005 := range (*z).encodedAssetParams.AssetName {
		s += msgp.StringPrefixSize + len((*z).encodedAssetParams.AssetName[zb0005])
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetParams.BitmaskAssetName)) + 3 + msgp.ArrayHeaderSize
	for zb0006 := range (*z).encodedAssetParams.URL {
		s += msgp.StringPrefixSize + len((*z).encodedAssetParams.URL[zb0006])
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetParams.BitmaskURL)) + 3 + msgp.BytesPrefixSize + len((*z).encodedAssetParams.MetadataHash) + 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetParams.BitmaskMetadataHash)) + 2 + msgp.BytesPrefixSize + len((*z).encodedAssetParams.Manager) + 4 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetParams.BitmaskManager)) + 2 + msgp.BytesPrefixSize + len((*z).encodedAssetParams.Reserve) + 4 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetParams.BitmaskReserve)) + 2 + msgp.BytesPrefixSize + len((*z).encodedAssetParams.Freeze) + 4 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetParams.BitmaskFreeze)) + 2 + msgp.BytesPrefixSize + len((*z).encodedAssetParams.Clawback) + 4 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetParams.BitmaskClawback))
	return
}

// MsgIsZero returns whether this is a zero value
func (z *encodedAssetConfigTxnFields) MsgIsZero() bool {
	return (len((*z).ConfigAsset) == 0) && (len((*z).BitmaskConfigAsset) == 0) && (len((*z).encodedAssetParams.Total) == 0) && (len((*z).encodedAssetParams.BitmaskTotal) == 0) && (len((*z).encodedAssetParams.Decimals) == 0) && (len((*z).encodedAssetParams.BitmaskDecimals) == 0) && (len((*z).encodedAssetParams.BitmaskDefaultFrozen) == 0) && (len((*z).encodedAssetParams.UnitName) == 0) && (len((*z).encodedAssetParams.BitmaskUnitName) == 0) && (len((*z).encodedAssetParams.AssetName) == 0) && (len((*z).encodedAssetParams.BitmaskAssetName) == 0) && (len((*z).encodedAssetParams.URL) == 0) && (len((*z).encodedAssetParams.BitmaskURL) == 0) && (len((*z).encodedAssetParams.MetadataHash) == 0) && (len((*z).encodedAssetParams.BitmaskMetadataHash) == 0) && (len((*z).encodedAssetParams.Manager) == 0) && (len((*z).encodedAssetParams.BitmaskManager) == 0) && (len((*z).encodedAssetParams.Reserve) == 0) && (len((*z).encodedAssetParams.BitmaskReserve) == 0) && (len((*z).encodedAssetParams.Freeze) == 0) && (len((*z).encodedAssetParams.BitmaskFreeze) == 0) && (len((*z).encodedAssetParams.Clawback) == 0) && (len((*z).encodedAssetParams.BitmaskClawback) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *encodedAssetFreezeTxnFields) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0002Len := uint32(5)
	var zb0002Mask uint8 /* 6 bits */
	if len((*z).BitmaskAssetFrozen) == 0 {
		zb0002Len--
		zb0002Mask |= 0x2
	}
	if len((*z).FreezeAccount) == 0 {
		zb0002Len--
		zb0002Mask |= 0x4
	}
	if len((*z).BitmaskFreezeAccount) == 0 {
		zb0002Len--
		zb0002Mask |= 0x8
	}
	if len((*z).FreezeAsset) == 0 {
		zb0002Len--
		zb0002Mask |= 0x10
	}
	if len((*z).BitmaskFreezeAsset) == 0 {
		zb0002Len--
		zb0002Mask |= 0x20
	}
	// variable map header, size zb0002Len
	o = append(o, 0x80|uint8(zb0002Len))
	if zb0002Len != 0 {
		if (zb0002Mask & 0x2) == 0 { // if not empty
			// string "afrzbm"
			o = append(o, 0xa6, 0x61, 0x66, 0x72, 0x7a, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskAssetFrozen))
		}
		if (zb0002Mask & 0x4) == 0 { // if not empty
			// string "fadd"
			o = append(o, 0xa4, 0x66, 0x61, 0x64, 0x64)
			o = msgp.AppendBytes(o, (*z).FreezeAccount)
		}
		if (zb0002Mask & 0x8) == 0 { // if not empty
			// string "faddbm"
			o = append(o, 0xa6, 0x66, 0x61, 0x64, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskFreezeAccount))
		}
		if (zb0002Mask & 0x10) == 0 { // if not empty
			// string "faid"
			o = append(o, 0xa4, 0x66, 0x61, 0x69, 0x64)
			if (*z).FreezeAsset == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).FreezeAsset)))
			}
			for zb0001 := range (*z).FreezeAsset {
				o = (*z).FreezeAsset[zb0001].MarshalMsg(o)
			}
		}
		if (zb0002Mask & 0x20) == 0 { // if not empty
			// string "faidbm"
			o = append(o, 0xa6, 0x66, 0x61, 0x69, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskFreezeAsset))
		}
	}
	return
}

func (_ *encodedAssetFreezeTxnFields) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedAssetFreezeTxnFields)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *encodedAssetFreezeTxnFields) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0002 int
	var zb0003 bool
	zb0002, zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0002, zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 > 0 {
			zb0002--
			var zb0004 int
			zb0004, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FreezeAccount")
				return
			}
			if zb0004 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0004), uint64(maxAddressBytes))
				return
			}
			(*z).FreezeAccount, bts, err = msgp.ReadBytesBytes(bts, (*z).FreezeAccount)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FreezeAccount")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			{
				var zb0005 []byte
				var zb0006 int
				zb0006, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreezeAccount")
					return
				}
				if zb0006 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0006), uint64(maxBitmaskSize))
					return
				}
				zb0005, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskFreezeAccount))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreezeAccount")
					return
				}
				(*z).BitmaskFreezeAccount = bitmask(zb0005)
			}
		}
		if zb0002 > 0 {
			zb0002--
			var zb0007 int
			var zb0008 bool
			zb0007, zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FreezeAsset")
				return
			}
			if zb0007 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0007), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "FreezeAsset")
				return
			}
			if zb0008 {
				(*z).FreezeAsset = nil
			} else if (*z).FreezeAsset != nil && cap((*z).FreezeAsset) >= zb0007 {
				(*z).FreezeAsset = ((*z).FreezeAsset)[:zb0007]
			} else {
				(*z).FreezeAsset = make([]basics.AssetIndex, zb0007)
			}
			for zb0001 := range (*z).FreezeAsset {
				bts, err = (*z).FreezeAsset[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "FreezeAsset", zb0001)
					return
				}
			}
		}
		if zb0002 > 0 {
			zb0002--
			{
				var zb0009 []byte
				var zb0010 int
				zb0010, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreezeAsset")
					return
				}
				if zb0010 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0010), uint64(maxBitmaskSize))
					return
				}
				zb0009, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskFreezeAsset))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreezeAsset")
					return
				}
				(*z).BitmaskFreezeAsset = bitmask(zb0009)
			}
		}
		if zb0002 > 0 {
			zb0002--
			{
				var zb0011 []byte
				var zb0012 int
				zb0012, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetFrozen")
					return
				}
				if zb0012 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0012), uint64(maxBitmaskSize))
					return
				}
				zb0011, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskAssetFrozen))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetFrozen")
					return
				}
				(*z).BitmaskAssetFrozen = bitmask(zb0011)
			}
		}
		if zb0002 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0002)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0003 {
			(*z) = encodedAssetFreezeTxnFields{}
		}
		for zb0002 > 0 {
			zb0002--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "fadd":
				var zb0013 int
				zb0013, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "FreezeAccount")
					return
				}
				if zb0013 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0013), uint64(maxAddressBytes))
					return
				}
				(*z).FreezeAccount, bts, err = msgp.ReadBytesBytes(bts, (*z).FreezeAccount)
				if err != nil {
					err = msgp.WrapError(err, "FreezeAccount")
					return
				}
			case "faddbm":
				{
					var zb0014 []byte
					var zb0015 int
					zb0015, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreezeAccount")
						return
					}
					if zb0015 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0015), uint64(maxBitmaskSize))
						return
					}
					zb0014, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskFreezeAccount))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreezeAccount")
						return
					}
					(*z).BitmaskFreezeAccount = bitmask(zb0014)
				}
			case "faid":
				var zb0016 int
				var zb0017 bool
				zb0016, zb0017, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "FreezeAsset")
					return
				}
				if zb0016 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0016), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "FreezeAsset")
					return
				}
				if zb0017 {
					(*z).FreezeAsset = nil
				} else if (*z).FreezeAsset != nil && cap((*z).FreezeAsset) >= zb0016 {
					(*z).FreezeAsset = ((*z).FreezeAsset)[:zb0016]
				} else {
					(*z).FreezeAsset = make([]basics.AssetIndex, zb0016)
				}
				for zb0001 := range (*z).FreezeAsset {
					bts, err = (*z).FreezeAsset[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "FreezeAsset", zb0001)
						return
					}
				}
			case "faidbm":
				{
					var zb0018 []byte
					var zb0019 int
					zb0019, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreezeAsset")
						return
					}
					if zb0019 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0019), uint64(maxBitmaskSize))
						return
					}
					zb0018, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskFreezeAsset))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreezeAsset")
						return
					}
					(*z).BitmaskFreezeAsset = bitmask(zb0018)
				}
			case "afrzbm":
				{
					var zb0020 []byte
					var zb0021 int
					zb0021, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetFrozen")
						return
					}
					if zb0021 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0021), uint64(maxBitmaskSize))
						return
					}
					zb0020, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskAssetFrozen))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetFrozen")
						return
					}
					(*z).BitmaskAssetFrozen = bitmask(zb0020)
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *encodedAssetFreezeTxnFields) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedAssetFreezeTxnFields)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *encodedAssetFreezeTxnFields) Msgsize() (s int) {
	s = 1 + 5 + msgp.BytesPrefixSize + len((*z).FreezeAccount) + 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskFreezeAccount)) + 5 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).FreezeAsset {
		s += (*z).FreezeAsset[zb0001].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskFreezeAsset)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskAssetFrozen))
	return
}

// MsgIsZero returns whether this is a zero value
func (z *encodedAssetFreezeTxnFields) MsgIsZero() bool {
	return (len((*z).FreezeAccount) == 0) && (len((*z).BitmaskFreezeAccount) == 0) && (len((*z).FreezeAsset) == 0) && (len((*z).BitmaskFreezeAsset) == 0) && (len((*z).BitmaskAssetFrozen) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *encodedAssetParams) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0006Len := uint32(21)
	var zb0006Mask uint32 /* 22 bits */
	if len((*z).MetadataHash) == 0 {
		zb0006Len--
		zb0006Mask |= 0x2
	}
	if len((*z).BitmaskMetadataHash) == 0 {
		zb0006Len--
		zb0006Mask |= 0x4
	}
	if len((*z).AssetName) == 0 {
		zb0006Len--
		zb0006Mask |= 0x8
	}
	if len((*z).BitmaskAssetName) == 0 {
		zb0006Len--
		zb0006Mask |= 0x10
	}
	if len((*z).URL) == 0 {
		zb0006Len--
		zb0006Mask |= 0x20
	}
	if len((*z).BitmaskURL) == 0 {
		zb0006Len--
		zb0006Mask |= 0x40
	}
	if len((*z).Clawback) == 0 {
		zb0006Len--
		zb0006Mask |= 0x80
	}
	if len((*z).BitmaskClawback) == 0 {
		zb0006Len--
		zb0006Mask |= 0x100
	}
	if len((*z).Decimals) == 0 {
		zb0006Len--
		zb0006Mask |= 0x200
	}
	if len((*z).BitmaskDecimals) == 0 {
		zb0006Len--
		zb0006Mask |= 0x400
	}
	if len((*z).BitmaskDefaultFrozen) == 0 {
		zb0006Len--
		zb0006Mask |= 0x800
	}
	if len((*z).Freeze) == 0 {
		zb0006Len--
		zb0006Mask |= 0x1000
	}
	if len((*z).BitmaskFreeze) == 0 {
		zb0006Len--
		zb0006Mask |= 0x2000
	}
	if len((*z).Manager) == 0 {
		zb0006Len--
		zb0006Mask |= 0x4000
	}
	if len((*z).BitmaskManager) == 0 {
		zb0006Len--
		zb0006Mask |= 0x8000
	}
	if len((*z).Reserve) == 0 {
		zb0006Len--
		zb0006Mask |= 0x10000
	}
	if len((*z).BitmaskReserve) == 0 {
		zb0006Len--
		zb0006Mask |= 0x20000
	}
	if len((*z).Total) == 0 {
		zb0006Len--
		zb0006Mask |= 0x40000
	}
	if len((*z).BitmaskTotal) == 0 {
		zb0006Len--
		zb0006Mask |= 0x80000
	}
	if len((*z).UnitName) == 0 {
		zb0006Len--
		zb0006Mask |= 0x100000
	}
	if len((*z).BitmaskUnitName) == 0 {
		zb0006Len--
		zb0006Mask |= 0x200000
	}
	// variable map header, size zb0006Len
	o = msgp.AppendMapHeader(o, zb0006Len)
	if zb0006Len != 0 {
		if (zb0006Mask & 0x2) == 0 { // if not empty
			// string "am"
			o = append(o, 0xa2, 0x61, 0x6d)
			o = msgp.AppendBytes(o, (*z).MetadataHash)
		}
		if (zb0006Mask & 0x4) == 0 { // if not empty
			// string "ambm"
			o = append(o, 0xa4, 0x61, 0x6d, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskMetadataHash))
		}
		if (zb0006Mask & 0x8) == 0 { // if not empty
			// string "an"
			o = append(o, 0xa2, 0x61, 0x6e)
			if (*z).AssetName == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).AssetName)))
			}
			for zb0004 := range (*z).AssetName {
				o = msgp.AppendString(o, (*z).AssetName[zb0004])
			}
		}
		if (zb0006Mask & 0x10) == 0 { // if not empty
			// string "anbm"
			o = append(o, 0xa4, 0x61, 0x6e, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskAssetName))
		}
		if (zb0006Mask & 0x20) == 0 { // if not empty
			// string "au"
			o = append(o, 0xa2, 0x61, 0x75)
			if (*z).URL == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).URL)))
			}
			for zb0005 := range (*z).URL {
				o = msgp.AppendString(o, (*z).URL[zb0005])
			}
		}
		if (zb0006Mask & 0x40) == 0 { // if not empty
			// string "aubm"
			o = append(o, 0xa4, 0x61, 0x75, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskURL))
		}
		if (zb0006Mask & 0x80) == 0 { // if not empty
			// string "c"
			o = append(o, 0xa1, 0x63)
			o = msgp.AppendBytes(o, (*z).Clawback)
		}
		if (zb0006Mask & 0x100) == 0 { // if not empty
			// string "cbm"
			o = append(o, 0xa3, 0x63, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskClawback))
		}
		if (zb0006Mask & 0x200) == 0 { // if not empty
			// string "dc"
			o = append(o, 0xa2, 0x64, 0x63)
			if (*z).Decimals == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Decimals)))
			}
			for zb0002 := range (*z).Decimals {
				o = msgp.AppendUint32(o, (*z).Decimals[zb0002])
			}
		}
		if (zb0006Mask & 0x400) == 0 { // if not empty
			// string "dcbm"
			o = append(o, 0xa4, 0x64, 0x63, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskDecimals))
		}
		if (zb0006Mask & 0x800) == 0 { // if not empty
			// string "dfbm"
			o = append(o, 0xa4, 0x64, 0x66, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskDefaultFrozen))
		}
		if (zb0006Mask & 0x1000) == 0 { // if not empty
			// string "f"
			o = append(o, 0xa1, 0x66)
			o = msgp.AppendBytes(o, (*z).Freeze)
		}
		if (zb0006Mask & 0x2000) == 0 { // if not empty
			// string "fbm"
			o = append(o, 0xa3, 0x66, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskFreeze))
		}
		if (zb0006Mask & 0x4000) == 0 { // if not empty
			// string "m"
			o = append(o, 0xa1, 0x6d)
			o = msgp.AppendBytes(o, (*z).Manager)
		}
		if (zb0006Mask & 0x8000) == 0 { // if not empty
			// string "mbm"
			o = append(o, 0xa3, 0x6d, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskManager))
		}
		if (zb0006Mask & 0x10000) == 0 { // if not empty
			// string "r"
			o = append(o, 0xa1, 0x72)
			o = msgp.AppendBytes(o, (*z).Reserve)
		}
		if (zb0006Mask & 0x20000) == 0 { // if not empty
			// string "rbm"
			o = append(o, 0xa3, 0x72, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskReserve))
		}
		if (zb0006Mask & 0x40000) == 0 { // if not empty
			// string "t"
			o = append(o, 0xa1, 0x74)
			if (*z).Total == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Total)))
			}
			for zb0001 := range (*z).Total {
				o = msgp.AppendUint64(o, (*z).Total[zb0001])
			}
		}
		if (zb0006Mask & 0x80000) == 0 { // if not empty
			// string "tbm"
			o = append(o, 0xa3, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskTotal))
		}
		if (zb0006Mask & 0x100000) == 0 { // if not empty
			// string "un"
			o = append(o, 0xa2, 0x75, 0x6e)
			if (*z).UnitName == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).UnitName)))
			}
			for zb0003 := range (*z).UnitName {
				o = msgp.AppendString(o, (*z).UnitName[zb0003])
			}
		}
		if (zb0006Mask & 0x200000) == 0 { // if not empty
			// string "unbm"
			o = append(o, 0xa4, 0x75, 0x6e, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskUnitName))
		}
	}
	return
}

func (_ *encodedAssetParams) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedAssetParams)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *encodedAssetParams) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0006 int
	var zb0007 bool
	zb0006, zb0007, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0006, zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0006 > 0 {
			zb0006--
			var zb0008 int
			var zb0009 bool
			zb0008, zb0009, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Total")
				return
			}
			if zb0008 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0008), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Total")
				return
			}
			if zb0009 {
				(*z).Total = nil
			} else if (*z).Total != nil && cap((*z).Total) >= zb0008 {
				(*z).Total = ((*z).Total)[:zb0008]
			} else {
				(*z).Total = make([]uint64, zb0008)
			}
			for zb0001 := range (*z).Total {
				(*z).Total[zb0001], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Total", zb0001)
					return
				}
			}
		}
		if zb0006 > 0 {
			zb0006--
			{
				var zb0010 []byte
				var zb0011 int
				zb0011, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskTotal")
					return
				}
				if zb0011 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0011), uint64(maxBitmaskSize))
					return
				}
				zb0010, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskTotal))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskTotal")
					return
				}
				(*z).BitmaskTotal = bitmask(zb0010)
			}
		}
		if zb0006 > 0 {
			zb0006--
			var zb0012 int
			var zb0013 bool
			zb0012, zb0013, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Decimals")
				return
			}
			if zb0012 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0012), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Decimals")
				return
			}
			if zb0013 {
				(*z).Decimals = nil
			} else if (*z).Decimals != nil && cap((*z).Decimals) >= zb0012 {
				(*z).Decimals = ((*z).Decimals)[:zb0012]
			} else {
				(*z).Decimals = make([]uint32, zb0012)
			}
			for zb0002 := range (*z).Decimals {
				(*z).Decimals[zb0002], bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Decimals", zb0002)
					return
				}
			}
		}
		if zb0006 > 0 {
			zb0006--
			{
				var zb0014 []byte
				var zb0015 int
				zb0015, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskDecimals")
					return
				}
				if zb0015 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0015), uint64(maxBitmaskSize))
					return
				}
				zb0014, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskDecimals))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskDecimals")
					return
				}
				(*z).BitmaskDecimals = bitmask(zb0014)
			}
		}
		if zb0006 > 0 {
			zb0006--
			{
				var zb0016 []byte
				var zb0017 int
				zb0017, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskDefaultFrozen")
					return
				}
				if zb0017 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0017), uint64(maxBitmaskSize))
					return
				}
				zb0016, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskDefaultFrozen))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskDefaultFrozen")
					return
				}
				(*z).BitmaskDefaultFrozen = bitmask(zb0016)
			}
		}
		if zb0006 > 0 {
			zb0006--
			var zb0018 int
			var zb0019 bool
			zb0018, zb0019, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "UnitName")
				return
			}
			if zb0018 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0018), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "UnitName")
				return
			}
			if zb0019 {
				(*z).UnitName = nil
			} else if (*z).UnitName != nil && cap((*z).UnitName) >= zb0018 {
				(*z).UnitName = ((*z).UnitName)[:zb0018]
			} else {
				(*z).UnitName = make([]string, zb0018)
			}
			for zb0003 := range (*z).UnitName {
				(*z).UnitName[zb0003], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "UnitName", zb0003)
					return
				}
			}
		}
		if zb0006 > 0 {
			zb0006--
			{
				var zb0020 []byte
				var zb0021 int
				zb0021, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskUnitName")
					return
				}
				if zb0021 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0021), uint64(maxBitmaskSize))
					return
				}
				zb0020, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskUnitName))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskUnitName")
					return
				}
				(*z).BitmaskUnitName = bitmask(zb0020)
			}
		}
		if zb0006 > 0 {
			zb0006--
			var zb0022 int
			var zb0023 bool
			zb0022, zb0023, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetName")
				return
			}
			if zb0022 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0022), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "AssetName")
				return
			}
			if zb0023 {
				(*z).AssetName = nil
			} else if (*z).AssetName != nil && cap((*z).AssetName) >= zb0022 {
				(*z).AssetName = ((*z).AssetName)[:zb0022]
			} else {
				(*z).AssetName = make([]string, zb0022)
			}
			for zb0004 := range (*z).AssetName {
				(*z).AssetName[zb0004], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AssetName", zb0004)
					return
				}
			}
		}
		if zb0006 > 0 {
			zb0006--
			{
				var zb0024 []byte
				var zb0025 int
				zb0025, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetName")
					return
				}
				if zb0025 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0025), uint64(maxBitmaskSize))
					return
				}
				zb0024, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskAssetName))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetName")
					return
				}
				(*z).BitmaskAssetName = bitmask(zb0024)
			}
		}
		if zb0006 > 0 {
			zb0006--
			var zb0026 int
			var zb0027 bool
			zb0026, zb0027, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "URL")
				return
			}
			if zb0026 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0026), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "URL")
				return
			}
			if zb0027 {
				(*z).URL = nil
			} else if (*z).URL != nil && cap((*z).URL) >= zb0026 {
				(*z).URL = ((*z).URL)[:zb0026]
			} else {
				(*z).URL = make([]string, zb0026)
			}
			for zb0005 := range (*z).URL {
				(*z).URL[zb0005], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "URL", zb0005)
					return
				}
			}
		}
		if zb0006 > 0 {
			zb0006--
			{
				var zb0028 []byte
				var zb0029 int
				zb0029, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskURL")
					return
				}
				if zb0029 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0029), uint64(maxBitmaskSize))
					return
				}
				zb0028, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskURL))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskURL")
					return
				}
				(*z).BitmaskURL = bitmask(zb0028)
			}
		}
		if zb0006 > 0 {
			zb0006--
			var zb0030 int
			zb0030, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MetadataHash")
				return
			}
			if zb0030 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0030), uint64(maxAddressBytes))
				return
			}
			(*z).MetadataHash, bts, err = msgp.ReadBytesBytes(bts, (*z).MetadataHash)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MetadataHash")
				return
			}
		}
		if zb0006 > 0 {
			zb0006--
			{
				var zb0031 []byte
				var zb0032 int
				zb0032, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskMetadataHash")
					return
				}
				if zb0032 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0032), uint64(maxBitmaskSize))
					return
				}
				zb0031, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskMetadataHash))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskMetadataHash")
					return
				}
				(*z).BitmaskMetadataHash = bitmask(zb0031)
			}
		}
		if zb0006 > 0 {
			zb0006--
			var zb0033 int
			zb0033, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Manager")
				return
			}
			if zb0033 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0033), uint64(maxAddressBytes))
				return
			}
			(*z).Manager, bts, err = msgp.ReadBytesBytes(bts, (*z).Manager)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Manager")
				return
			}
		}
		if zb0006 > 0 {
			zb0006--
			{
				var zb0034 []byte
				var zb0035 int
				zb0035, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskManager")
					return
				}
				if zb0035 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0035), uint64(maxBitmaskSize))
					return
				}
				zb0034, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskManager))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskManager")
					return
				}
				(*z).BitmaskManager = bitmask(zb0034)
			}
		}
		if zb0006 > 0 {
			zb0006--
			var zb0036 int
			zb0036, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Reserve")
				return
			}
			if zb0036 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0036), uint64(maxAddressBytes))
				return
			}
			(*z).Reserve, bts, err = msgp.ReadBytesBytes(bts, (*z).Reserve)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Reserve")
				return
			}
		}
		if zb0006 > 0 {
			zb0006--
			{
				var zb0037 []byte
				var zb0038 int
				zb0038, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskReserve")
					return
				}
				if zb0038 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0038), uint64(maxBitmaskSize))
					return
				}
				zb0037, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskReserve))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskReserve")
					return
				}
				(*z).BitmaskReserve = bitmask(zb0037)
			}
		}
		if zb0006 > 0 {
			zb0006--
			var zb0039 int
			zb0039, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Freeze")
				return
			}
			if zb0039 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0039), uint64(maxAddressBytes))
				return
			}
			(*z).Freeze, bts, err = msgp.ReadBytesBytes(bts, (*z).Freeze)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Freeze")
				return
			}
		}
		if zb0006 > 0 {
			zb0006--
			{
				var zb0040 []byte
				var zb0041 int
				zb0041, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreeze")
					return
				}
				if zb0041 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0041), uint64(maxBitmaskSize))
					return
				}
				zb0040, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskFreeze))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreeze")
					return
				}
				(*z).BitmaskFreeze = bitmask(zb0040)
			}
		}
		if zb0006 > 0 {
			zb0006--
			var zb0042 int
			zb0042, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Clawback")
				return
			}
			if zb0042 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0042), uint64(maxAddressBytes))
				return
			}
			(*z).Clawback, bts, err = msgp.ReadBytesBytes(bts, (*z).Clawback)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Clawback")
				return
			}
		}
		if zb0006 > 0 {
			zb0006--
			{
				var zb0043 []byte
				var zb0044 int
				zb0044, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskClawback")
					return
				}
				if zb0044 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0044), uint64(maxBitmaskSize))
					return
				}
				zb0043, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskClawback))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskClawback")
					return
				}
				(*z).BitmaskClawback = bitmask(zb0043)
			}
		}
		if zb0006 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0006)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0007 {
			(*z) = encodedAssetParams{}
		}
		for zb0006 > 0 {
			zb0006--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "t":
				var zb0045 int
				var zb0046 bool
				zb0045, zb0046, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Total")
					return
				}
				if zb0045 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0045), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Total")
					return
				}
				if zb0046 {
					(*z).Total = nil
				} else if (*z).Total != nil && cap((*z).Total) >= zb0045 {
					(*z).Total = ((*z).Total)[:zb0045]
				} else {
					(*z).Total = make([]uint64, zb0045)
				}
				for zb0001 := range (*z).Total {
					(*z).Total[zb0001], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Total", zb0001)
						return
					}
				}
			case "tbm":
				{
					var zb0047 []byte
					var zb0048 int
					zb0048, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskTotal")
						return
					}
					if zb0048 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0048), uint64(maxBitmaskSize))
						return
					}
					zb0047, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskTotal))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskTotal")
						return
					}
					(*z).BitmaskTotal = bitmask(zb0047)
				}
			case "dc":
				var zb0049 int
				var zb0050 bool
				zb0049, zb0050, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Decimals")
					return
				}
				if zb0049 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0049), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Decimals")
					return
				}
				if zb0050 {
					(*z).Decimals = nil
				} else if (*z).Decimals != nil && cap((*z).Decimals) >= zb0049 {
					(*z).Decimals = ((*z).Decimals)[:zb0049]
				} else {
					(*z).Decimals = make([]uint32, zb0049)
				}
				for zb0002 := range (*z).Decimals {
					(*z).Decimals[zb0002], bts, err = msgp.ReadUint32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Decimals", zb0002)
						return
					}
				}
			case "dcbm":
				{
					var zb0051 []byte
					var zb0052 int
					zb0052, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskDecimals")
						return
					}
					if zb0052 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0052), uint64(maxBitmaskSize))
						return
					}
					zb0051, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskDecimals))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskDecimals")
						return
					}
					(*z).BitmaskDecimals = bitmask(zb0051)
				}
			case "dfbm":
				{
					var zb0053 []byte
					var zb0054 int
					zb0054, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskDefaultFrozen")
						return
					}
					if zb0054 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0054), uint64(maxBitmaskSize))
						return
					}
					zb0053, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskDefaultFrozen))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskDefaultFrozen")
						return
					}
					(*z).BitmaskDefaultFrozen = bitmask(zb0053)
				}
			case "un":
				var zb0055 int
				var zb0056 bool
				zb0055, zb0056, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "UnitName")
					return
				}
				if zb0055 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0055), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "UnitName")
					return
				}
				if zb0056 {
					(*z).UnitName = nil
				} else if (*z).UnitName != nil && cap((*z).UnitName) >= zb0055 {
					(*z).UnitName = ((*z).UnitName)[:zb0055]
				} else {
					(*z).UnitName = make([]string, zb0055)
				}
				for zb0003 := range (*z).UnitName {
					(*z).UnitName[zb0003], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "UnitName", zb0003)
						return
					}
				}
			case "unbm":
				{
					var zb0057 []byte
					var zb0058 int
					zb0058, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskUnitName")
						return
					}
					if zb0058 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0058), uint64(maxBitmaskSize))
						return
					}
					zb0057, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskUnitName))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskUnitName")
						return
					}
					(*z).BitmaskUnitName = bitmask(zb0057)
				}
			case "an":
				var zb0059 int
				var zb0060 bool
				zb0059, zb0060, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetName")
					return
				}
				if zb0059 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0059), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "AssetName")
					return
				}
				if zb0060 {
					(*z).AssetName = nil
				} else if (*z).AssetName != nil && cap((*z).AssetName) >= zb0059 {
					(*z).AssetName = ((*z).AssetName)[:zb0059]
				} else {
					(*z).AssetName = make([]string, zb0059)
				}
				for zb0004 := range (*z).AssetName {
					(*z).AssetName[zb0004], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "AssetName", zb0004)
						return
					}
				}
			case "anbm":
				{
					var zb0061 []byte
					var zb0062 int
					zb0062, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetName")
						return
					}
					if zb0062 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0062), uint64(maxBitmaskSize))
						return
					}
					zb0061, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskAssetName))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetName")
						return
					}
					(*z).BitmaskAssetName = bitmask(zb0061)
				}
			case "au":
				var zb0063 int
				var zb0064 bool
				zb0063, zb0064, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "URL")
					return
				}
				if zb0063 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0063), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "URL")
					return
				}
				if zb0064 {
					(*z).URL = nil
				} else if (*z).URL != nil && cap((*z).URL) >= zb0063 {
					(*z).URL = ((*z).URL)[:zb0063]
				} else {
					(*z).URL = make([]string, zb0063)
				}
				for zb0005 := range (*z).URL {
					(*z).URL[zb0005], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "URL", zb0005)
						return
					}
				}
			case "aubm":
				{
					var zb0065 []byte
					var zb0066 int
					zb0066, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskURL")
						return
					}
					if zb0066 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0066), uint64(maxBitmaskSize))
						return
					}
					zb0065, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskURL))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskURL")
						return
					}
					(*z).BitmaskURL = bitmask(zb0065)
				}
			case "am":
				var zb0067 int
				zb0067, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "MetadataHash")
					return
				}
				if zb0067 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0067), uint64(maxAddressBytes))
					return
				}
				(*z).MetadataHash, bts, err = msgp.ReadBytesBytes(bts, (*z).MetadataHash)
				if err != nil {
					err = msgp.WrapError(err, "MetadataHash")
					return
				}
			case "ambm":
				{
					var zb0068 []byte
					var zb0069 int
					zb0069, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskMetadataHash")
						return
					}
					if zb0069 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0069), uint64(maxBitmaskSize))
						return
					}
					zb0068, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskMetadataHash))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskMetadataHash")
						return
					}
					(*z).BitmaskMetadataHash = bitmask(zb0068)
				}
			case "m":
				var zb0070 int
				zb0070, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Manager")
					return
				}
				if zb0070 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0070), uint64(maxAddressBytes))
					return
				}
				(*z).Manager, bts, err = msgp.ReadBytesBytes(bts, (*z).Manager)
				if err != nil {
					err = msgp.WrapError(err, "Manager")
					return
				}
			case "mbm":
				{
					var zb0071 []byte
					var zb0072 int
					zb0072, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskManager")
						return
					}
					if zb0072 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0072), uint64(maxBitmaskSize))
						return
					}
					zb0071, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskManager))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskManager")
						return
					}
					(*z).BitmaskManager = bitmask(zb0071)
				}
			case "r":
				var zb0073 int
				zb0073, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Reserve")
					return
				}
				if zb0073 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0073), uint64(maxAddressBytes))
					return
				}
				(*z).Reserve, bts, err = msgp.ReadBytesBytes(bts, (*z).Reserve)
				if err != nil {
					err = msgp.WrapError(err, "Reserve")
					return
				}
			case "rbm":
				{
					var zb0074 []byte
					var zb0075 int
					zb0075, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskReserve")
						return
					}
					if zb0075 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0075), uint64(maxBitmaskSize))
						return
					}
					zb0074, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskReserve))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskReserve")
						return
					}
					(*z).BitmaskReserve = bitmask(zb0074)
				}
			case "f":
				var zb0076 int
				zb0076, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Freeze")
					return
				}
				if zb0076 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0076), uint64(maxAddressBytes))
					return
				}
				(*z).Freeze, bts, err = msgp.ReadBytesBytes(bts, (*z).Freeze)
				if err != nil {
					err = msgp.WrapError(err, "Freeze")
					return
				}
			case "fbm":
				{
					var zb0077 []byte
					var zb0078 int
					zb0078, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreeze")
						return
					}
					if zb0078 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0078), uint64(maxBitmaskSize))
						return
					}
					zb0077, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskFreeze))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreeze")
						return
					}
					(*z).BitmaskFreeze = bitmask(zb0077)
				}
			case "c":
				var zb0079 int
				zb0079, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Clawback")
					return
				}
				if zb0079 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0079), uint64(maxAddressBytes))
					return
				}
				(*z).Clawback, bts, err = msgp.ReadBytesBytes(bts, (*z).Clawback)
				if err != nil {
					err = msgp.WrapError(err, "Clawback")
					return
				}
			case "cbm":
				{
					var zb0080 []byte
					var zb0081 int
					zb0081, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskClawback")
						return
					}
					if zb0081 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0081), uint64(maxBitmaskSize))
						return
					}
					zb0080, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskClawback))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskClawback")
						return
					}
					(*z).BitmaskClawback = bitmask(zb0080)
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *encodedAssetParams) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedAssetParams)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *encodedAssetParams) Msgsize() (s int) {
	s = 3 + 2 + msgp.ArrayHeaderSize + (len((*z).Total) * (msgp.Uint64Size)) + 4 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskTotal)) + 3 + msgp.ArrayHeaderSize + (len((*z).Decimals) * (msgp.Uint32Size)) + 5 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskDecimals)) + 5 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskDefaultFrozen)) + 3 + msgp.ArrayHeaderSize
	for zb0003 := range (*z).UnitName {
		s += msgp.StringPrefixSize + len((*z).UnitName[zb0003])
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskUnitName)) + 3 + msgp.ArrayHeaderSize
	for zb0004 := range (*z).AssetName {
		s += msgp.StringPrefixSize + len((*z).AssetName[zb0004])
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskAssetName)) + 3 + msgp.ArrayHeaderSize
	for zb0005 := range (*z).URL {
		s += msgp.StringPrefixSize + len((*z).URL[zb0005])
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskURL)) + 3 + msgp.BytesPrefixSize + len((*z).MetadataHash) + 5 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskMetadataHash)) + 2 + msgp.BytesPrefixSize + len((*z).Manager) + 4 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskManager)) + 2 + msgp.BytesPrefixSize + len((*z).Reserve) + 4 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskReserve)) + 2 + msgp.BytesPrefixSize + len((*z).Freeze) + 4 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskFreeze)) + 2 + msgp.BytesPrefixSize + len((*z).Clawback) + 4 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskClawback))
	return
}

// MsgIsZero returns whether this is a zero value
func (z *encodedAssetParams) MsgIsZero() bool {
	return (len((*z).Total) == 0) && (len((*z).BitmaskTotal) == 0) && (len((*z).Decimals) == 0) && (len((*z).BitmaskDecimals) == 0) && (len((*z).BitmaskDefaultFrozen) == 0) && (len((*z).UnitName) == 0) && (len((*z).BitmaskUnitName) == 0) && (len((*z).AssetName) == 0) && (len((*z).BitmaskAssetName) == 0) && (len((*z).URL) == 0) && (len((*z).BitmaskURL) == 0) && (len((*z).MetadataHash) == 0) && (len((*z).BitmaskMetadataHash) == 0) && (len((*z).Manager) == 0) && (len((*z).BitmaskManager) == 0) && (len((*z).Reserve) == 0) && (len((*z).BitmaskReserve) == 0) && (len((*z).Freeze) == 0) && (len((*z).BitmaskFreeze) == 0) && (len((*z).Clawback) == 0) && (len((*z).BitmaskClawback) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *encodedAssetTransferTxnFields) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0003Len := uint32(10)
	var zb0003Mask uint16 /* 11 bits */
	if len((*z).AssetAmount) == 0 {
		zb0003Len--
		zb0003Mask |= 0x2
	}
	if len((*z).BitmaskAssetAmount) == 0 {
		zb0003Len--
		zb0003Mask |= 0x4
	}
	if len((*z).AssetCloseTo) == 0 {
		zb0003Len--
		zb0003Mask |= 0x8
	}
	if len((*z).BitmaskAssetCloseTo) == 0 {
		zb0003Len--
		zb0003Mask |= 0x10
	}
	if len((*z).AssetReceiver) == 0 {
		zb0003Len--
		zb0003Mask |= 0x20
	}
	if len((*z).BitmaskAssetReceiver) == 0 {
		zb0003Len--
		zb0003Mask |= 0x40
	}
	if len((*z).AssetSender) == 0 {
		zb0003Len--
		zb0003Mask |= 0x80
	}
	if len((*z).BitmaskAssetSender) == 0 {
		zb0003Len--
		zb0003Mask |= 0x100
	}
	if len((*z).XferAsset) == 0 {
		zb0003Len--
		zb0003Mask |= 0x200
	}
	if len((*z).BitmaskXferAsset) == 0 {
		zb0003Len--
		zb0003Mask |= 0x400
	}
	// variable map header, size zb0003Len
	o = append(o, 0x80|uint8(zb0003Len))
	if zb0003Len != 0 {
		if (zb0003Mask & 0x2) == 0 { // if not empty
			// string "aamt"
			o = append(o, 0xa4, 0x61, 0x61, 0x6d, 0x74)
			if (*z).AssetAmount == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).AssetAmount)))
			}
			for zb0002 := range (*z).AssetAmount {
				o = msgp.AppendUint64(o, (*z).AssetAmount[zb0002])
			}
		}
		if (zb0003Mask & 0x4) == 0 { // if not empty
			// string "aamtbm"
			o = append(o, 0xa6, 0x61, 0x61, 0x6d, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskAssetAmount))
		}
		if (zb0003Mask & 0x8) == 0 { // if not empty
			// string "aclose"
			o = append(o, 0xa6, 0x61, 0x63, 0x6c, 0x6f, 0x73, 0x65)
			o = msgp.AppendBytes(o, (*z).AssetCloseTo)
		}
		if (zb0003Mask & 0x10) == 0 { // if not empty
			// string "aclosebm"
			o = append(o, 0xa8, 0x61, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskAssetCloseTo))
		}
		if (zb0003Mask & 0x20) == 0 { // if not empty
			// string "arcv"
			o = append(o, 0xa4, 0x61, 0x72, 0x63, 0x76)
			o = msgp.AppendBytes(o, (*z).AssetReceiver)
		}
		if (zb0003Mask & 0x40) == 0 { // if not empty
			// string "arcvbm"
			o = append(o, 0xa6, 0x61, 0x72, 0x63, 0x76, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskAssetReceiver))
		}
		if (zb0003Mask & 0x80) == 0 { // if not empty
			// string "asnd"
			o = append(o, 0xa4, 0x61, 0x73, 0x6e, 0x64)
			o = msgp.AppendBytes(o, (*z).AssetSender)
		}
		if (zb0003Mask & 0x100) == 0 { // if not empty
			// string "asndbm"
			o = append(o, 0xa6, 0x61, 0x73, 0x6e, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskAssetSender))
		}
		if (zb0003Mask & 0x200) == 0 { // if not empty
			// string "xaid"
			o = append(o, 0xa4, 0x78, 0x61, 0x69, 0x64)
			if (*z).XferAsset == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).XferAsset)))
			}
			for zb0001 := range (*z).XferAsset {
				o = (*z).XferAsset[zb0001].MarshalMsg(o)
			}
		}
		if (zb0003Mask & 0x400) == 0 { // if not empty
			// string "xaidbm"
			o = append(o, 0xa6, 0x78, 0x61, 0x69, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskXferAsset))
		}
	}
	return
}

func (_ *encodedAssetTransferTxnFields) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedAssetTransferTxnFields)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *encodedAssetTransferTxnFields) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0003 int
	var zb0004 bool
	zb0003, zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0003, zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0003 > 0 {
			zb0003--
			var zb0005 int
			var zb0006 bool
			zb0005, zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "XferAsset")
				return
			}
			if zb0005 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0005), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "XferAsset")
				return
			}
			if zb0006 {
				(*z).XferAsset = nil
			} else if (*z).XferAsset != nil && cap((*z).XferAsset) >= zb0005 {
				(*z).XferAsset = ((*z).XferAsset)[:zb0005]
			} else {
				(*z).XferAsset = make([]basics.AssetIndex, zb0005)
			}
			for zb0001 := range (*z).XferAsset {
				bts, err = (*z).XferAsset[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "XferAsset", zb0001)
					return
				}
			}
		}
		if zb0003 > 0 {
			zb0003--
			{
				var zb0007 []byte
				var zb0008 int
				zb0008, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskXferAsset")
					return
				}
				if zb0008 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0008), uint64(maxBitmaskSize))
					return
				}
				zb0007, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskXferAsset))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskXferAsset")
					return
				}
				(*z).BitmaskXferAsset = bitmask(zb0007)
			}
		}
		if zb0003 > 0 {
			zb0003--
			var zb0009 int
			var zb0010 bool
			zb0009, zb0010, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetAmount")
				return
			}
			if zb0009 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0009), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "AssetAmount")
				return
			}
			if zb0010 {
				(*z).AssetAmount = nil
			} else if (*z).AssetAmount != nil && cap((*z).AssetAmount) >= zb0009 {
				(*z).AssetAmount = ((*z).AssetAmount)[:zb0009]
			} else {
				(*z).AssetAmount = make([]uint64, zb0009)
			}
			for zb0002 := range (*z).AssetAmount {
				(*z).AssetAmount[zb0002], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AssetAmount", zb0002)
					return
				}
			}
		}
		if zb0003 > 0 {
			zb0003--
			{
				var zb0011 []byte
				var zb0012 int
				zb0012, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetAmount")
					return
				}
				if zb0012 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0012), uint64(maxBitmaskSize))
					return
				}
				zb0011, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskAssetAmount))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetAmount")
					return
				}
				(*z).BitmaskAssetAmount = bitmask(zb0011)
			}
		}
		if zb0003 > 0 {
			zb0003--
			var zb0013 int
			zb0013, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetSender")
				return
			}
			if zb0013 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0013), uint64(maxAddressBytes))
				return
			}
			(*z).AssetSender, bts, err = msgp.ReadBytesBytes(bts, (*z).AssetSender)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetSender")
				return
			}
		}
		if zb0003 > 0 {
			zb0003--
			{
				var zb0014 []byte
				var zb0015 int
				zb0015, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetSender")
					return
				}
				if zb0015 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0015), uint64(maxBitmaskSize))
					return
				}
				zb0014, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskAssetSender))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetSender")
					return
				}
				(*z).BitmaskAssetSender = bitmask(zb0014)
			}
		}
		if zb0003 > 0 {
			zb0003--
			var zb0016 int
			zb0016, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetReceiver")
				return
			}
			if zb0016 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0016), uint64(maxAddressBytes))
				return
			}
			(*z).AssetReceiver, bts, err = msgp.ReadBytesBytes(bts, (*z).AssetReceiver)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetReceiver")
				return
			}
		}
		if zb0003 > 0 {
			zb0003--
			{
				var zb0017 []byte
				var zb0018 int
				zb0018, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetReceiver")
					return
				}
				if zb0018 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0018), uint64(maxBitmaskSize))
					return
				}
				zb0017, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskAssetReceiver))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetReceiver")
					return
				}
				(*z).BitmaskAssetReceiver = bitmask(zb0017)
			}
		}
		if zb0003 > 0 {
			zb0003--
			var zb0019 int
			zb0019, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetCloseTo")
				return
			}
			if zb0019 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0019), uint64(maxAddressBytes))
				return
			}
			(*z).AssetCloseTo, bts, err = msgp.ReadBytesBytes(bts, (*z).AssetCloseTo)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetCloseTo")
				return
			}
		}
		if zb0003 > 0 {
			zb0003--
			{
				var zb0020 []byte
				var zb0021 int
				zb0021, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetCloseTo")
					return
				}
				if zb0021 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0021), uint64(maxBitmaskSize))
					return
				}
				zb0020, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskAssetCloseTo))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetCloseTo")
					return
				}
				(*z).BitmaskAssetCloseTo = bitmask(zb0020)
			}
		}
		if zb0003 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0003)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0004 {
			(*z) = encodedAssetTransferTxnFields{}
		}
		for zb0003 > 0 {
			zb0003--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "xaid":
				var zb0022 int
				var zb0023 bool
				zb0022, zb0023, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XferAsset")
					return
				}
				if zb0022 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0022), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "XferAsset")
					return
				}
				if zb0023 {
					(*z).XferAsset = nil
				} else if (*z).XferAsset != nil && cap((*z).XferAsset) >= zb0022 {
					(*z).XferAsset = ((*z).XferAsset)[:zb0022]
				} else {
					(*z).XferAsset = make([]basics.AssetIndex, zb0022)
				}
				for zb0001 := range (*z).XferAsset {
					bts, err = (*z).XferAsset[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "XferAsset", zb0001)
						return
					}
				}
			case "xaidbm":
				{
					var zb0024 []byte
					var zb0025 int
					zb0025, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskXferAsset")
						return
					}
					if zb0025 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0025), uint64(maxBitmaskSize))
						return
					}
					zb0024, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskXferAsset))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskXferAsset")
						return
					}
					(*z).BitmaskXferAsset = bitmask(zb0024)
				}
			case "aamt":
				var zb0026 int
				var zb0027 bool
				zb0026, zb0027, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetAmount")
					return
				}
				if zb0026 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0026), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "AssetAmount")
					return
				}
				if zb0027 {
					(*z).AssetAmount = nil
				} else if (*z).AssetAmount != nil && cap((*z).AssetAmount) >= zb0026 {
					(*z).AssetAmount = ((*z).AssetAmount)[:zb0026]
				} else {
					(*z).AssetAmount = make([]uint64, zb0026)
				}
				for zb0002 := range (*z).AssetAmount {
					(*z).AssetAmount[zb0002], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "AssetAmount", zb0002)
						return
					}
				}
			case "aamtbm":
				{
					var zb0028 []byte
					var zb0029 int
					zb0029, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetAmount")
						return
					}
					if zb0029 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0029), uint64(maxBitmaskSize))
						return
					}
					zb0028, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskAssetAmount))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetAmount")
						return
					}
					(*z).BitmaskAssetAmount = bitmask(zb0028)
				}
			case "asnd":
				var zb0030 int
				zb0030, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetSender")
					return
				}
				if zb0030 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0030), uint64(maxAddressBytes))
					return
				}
				(*z).AssetSender, bts, err = msgp.ReadBytesBytes(bts, (*z).AssetSender)
				if err != nil {
					err = msgp.WrapError(err, "AssetSender")
					return
				}
			case "asndbm":
				{
					var zb0031 []byte
					var zb0032 int
					zb0032, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetSender")
						return
					}
					if zb0032 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0032), uint64(maxBitmaskSize))
						return
					}
					zb0031, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskAssetSender))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetSender")
						return
					}
					(*z).BitmaskAssetSender = bitmask(zb0031)
				}
			case "arcv":
				var zb0033 int
				zb0033, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetReceiver")
					return
				}
				if zb0033 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0033), uint64(maxAddressBytes))
					return
				}
				(*z).AssetReceiver, bts, err = msgp.ReadBytesBytes(bts, (*z).AssetReceiver)
				if err != nil {
					err = msgp.WrapError(err, "AssetReceiver")
					return
				}
			case "arcvbm":
				{
					var zb0034 []byte
					var zb0035 int
					zb0035, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetReceiver")
						return
					}
					if zb0035 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0035), uint64(maxBitmaskSize))
						return
					}
					zb0034, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskAssetReceiver))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetReceiver")
						return
					}
					(*z).BitmaskAssetReceiver = bitmask(zb0034)
				}
			case "aclose":
				var zb0036 int
				zb0036, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetCloseTo")
					return
				}
				if zb0036 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0036), uint64(maxAddressBytes))
					return
				}
				(*z).AssetCloseTo, bts, err = msgp.ReadBytesBytes(bts, (*z).AssetCloseTo)
				if err != nil {
					err = msgp.WrapError(err, "AssetCloseTo")
					return
				}
			case "aclosebm":
				{
					var zb0037 []byte
					var zb0038 int
					zb0038, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetCloseTo")
						return
					}
					if zb0038 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0038), uint64(maxBitmaskSize))
						return
					}
					zb0037, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskAssetCloseTo))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetCloseTo")
						return
					}
					(*z).BitmaskAssetCloseTo = bitmask(zb0037)
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *encodedAssetTransferTxnFields) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedAssetTransferTxnFields)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *encodedAssetTransferTxnFields) Msgsize() (s int) {
	s = 1 + 5 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).XferAsset {
		s += (*z).XferAsset[zb0001].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskXferAsset)) + 5 + msgp.ArrayHeaderSize + (len((*z).AssetAmount) * (msgp.Uint64Size)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskAssetAmount)) + 5 + msgp.BytesPrefixSize + len((*z).AssetSender) + 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskAssetSender)) + 5 + msgp.BytesPrefixSize + len((*z).AssetReceiver) + 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskAssetReceiver)) + 7 + msgp.BytesPrefixSize + len((*z).AssetCloseTo) + 9 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskAssetCloseTo))
	return
}

// MsgIsZero returns whether this is a zero value
func (z *encodedAssetTransferTxnFields) MsgIsZero() bool {
	return (len((*z).XferAsset) == 0) && (len((*z).BitmaskXferAsset) == 0) && (len((*z).AssetAmount) == 0) && (len((*z).BitmaskAssetAmount) == 0) && (len((*z).AssetSender) == 0) && (len((*z).BitmaskAssetSender) == 0) && (len((*z).AssetReceiver) == 0) && (len((*z).BitmaskAssetReceiver) == 0) && (len((*z).AssetCloseTo) == 0) && (len((*z).BitmaskAssetCloseTo) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *encodedBloomFilter) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 5 bits */
	if len((*z).BloomFilter) == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if ((*z).EncodingParams.Offset == 0) && ((*z).EncodingParams.Modulator == 0) {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if (*z).Shuffler == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if (*z).BloomFilterType == 0 {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "f"
			o = append(o, 0xa1, 0x66)
			o = msgp.AppendBytes(o, (*z).BloomFilter)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "p"
			o = append(o, 0xa1, 0x70)
			// omitempty: check for empty values
			zb0002Len := uint32(2)
			var zb0002Mask uint8 /* 3 bits */
			if (*z).EncodingParams.Modulator == 0 {
				zb0002Len--
				zb0002Mask |= 0x2
			}
			if (*z).EncodingParams.Offset == 0 {
				zb0002Len--
				zb0002Mask |= 0x4
			}
			// variable map header, size zb0002Len
			o = append(o, 0x80|uint8(zb0002Len))
			if (zb0002Mask & 0x2) == 0 { // if not empty
				// string "m"
				o = append(o, 0xa1, 0x6d)
				o = msgp.AppendByte(o, (*z).EncodingParams.Modulator)
			}
			if (zb0002Mask & 0x4) == 0 { // if not empty
				// string "o"
				o = append(o, 0xa1, 0x6f)
				o = msgp.AppendByte(o, (*z).EncodingParams.Offset)
			}
		}
		if (zb0001Mask & 0x8) == 0 { // if not empty
			// string "s"
			o = append(o, 0xa1, 0x73)
			o = msgp.AppendByte(o, (*z).Shuffler)
		}
		if (zb0001Mask & 0x10) == 0 { // if not empty
			// string "t"
			o = append(o, 0xa1, 0x74)
			o = msgp.AppendByte(o, (*z).BloomFilterType)
		}
	}
	return
}

func (_ *encodedBloomFilter) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedBloomFilter)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *encodedBloomFilter) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			(*z).BloomFilterType, bts, err = msgp.ReadByteBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "BloomFilterType")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			var zb0003 int
			var zb0004 bool
			zb0003, zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if _, ok := err.(msgp.TypeError); ok {
				zb0003, zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "EncodingParams")
					return
				}
				if zb0003 > 0 {
					zb0003--
					(*z).EncodingParams.Offset, bts, err = msgp.ReadByteBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "EncodingParams", "struct-from-array", "Offset")
						return
					}
				}
				if zb0003 > 0 {
					zb0003--
					(*z).EncodingParams.Modulator, bts, err = msgp.ReadByteBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "EncodingParams", "struct-from-array", "Modulator")
						return
					}
				}
				if zb0003 > 0 {
					err = msgp.ErrTooManyArrayFields(zb0003)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "EncodingParams", "struct-from-array")
						return
					}
				}
			} else {
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "EncodingParams")
					return
				}
				if zb0004 {
					(*z).EncodingParams = requestParams{}
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "EncodingParams")
						return
					}
					switch string(field) {
					case "o":
						(*z).EncodingParams.Offset, bts, err = msgp.ReadByteBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "EncodingParams", "Offset")
							return
						}
					case "m":
						(*z).EncodingParams.Modulator, bts, err = msgp.ReadByteBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "EncodingParams", "Modulator")
							return
						}
					default:
						err = msgp.ErrNoField(string(field))
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "EncodingParams")
							return
						}
					}
				}
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).Shuffler, bts, err = msgp.ReadByteBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Shuffler")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			var zb0005 int
			zb0005, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "BloomFilter")
				return
			}
			if zb0005 > maxBloomFilterSize {
				err = msgp.ErrOverflow(uint64(zb0005), uint64(maxBloomFilterSize))
				return
			}
			(*z).BloomFilter, bts, err = msgp.ReadBytesBytes(bts, (*z).BloomFilter)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "BloomFilter")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = encodedBloomFilter{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "t":
				(*z).BloomFilterType, bts, err = msgp.ReadByteBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "BloomFilterType")
					return
				}
			case "p":
				var zb0006 int
				var zb0007 bool
				zb0006, zb0007, bts, err = msgp.ReadMapHeaderBytes(bts)
				if _, ok := err.(msgp.TypeError); ok {
					zb0006, zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "EncodingParams")
						return
					}
					if zb0006 > 0 {
						zb0006--
						(*z).EncodingParams.Offset, bts, err = msgp.ReadByteBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "EncodingParams", "struct-from-array", "Offset")
							return
						}
					}
					if zb0006 > 0 {
						zb0006--
						(*z).EncodingParams.Modulator, bts, err = msgp.ReadByteBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "EncodingParams", "struct-from-array", "Modulator")
							return
						}
					}
					if zb0006 > 0 {
						err = msgp.ErrTooManyArrayFields(zb0006)
						if err != nil {
							err = msgp.WrapError(err, "EncodingParams", "struct-from-array")
							return
						}
					}
				} else {
					if err != nil {
						err = msgp.WrapError(err, "EncodingParams")
						return
					}
					if zb0007 {
						(*z).EncodingParams = requestParams{}
					}
					for zb0006 > 0 {
						zb0006--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "EncodingParams")
							return
						}
						switch string(field) {
						case "o":
							(*z).EncodingParams.Offset, bts, err = msgp.ReadByteBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "EncodingParams", "Offset")
								return
							}
						case "m":
							(*z).EncodingParams.Modulator, bts, err = msgp.ReadByteBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "EncodingParams", "Modulator")
								return
							}
						default:
							err = msgp.ErrNoField(string(field))
							if err != nil {
								err = msgp.WrapError(err, "EncodingParams")
								return
							}
						}
					}
				}
			case "s":
				(*z).Shuffler, bts, err = msgp.ReadByteBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Shuffler")
					return
				}
			case "f":
				var zb0008 int
				zb0008, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "BloomFilter")
					return
				}
				if zb0008 > maxBloomFilterSize {
					err = msgp.ErrOverflow(uint64(zb0008), uint64(maxBloomFilterSize))
					return
				}
				(*z).BloomFilter, bts, err = msgp.ReadBytesBytes(bts, (*z).BloomFilter)
				if err != nil {
					err = msgp.WrapError(err, "BloomFilter")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *encodedBloomFilter) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedBloomFilter)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *encodedBloomFilter) Msgsize() (s int) {
	s = 1 + 2 + msgp.ByteSize + 2 + 1 + 2 + msgp.ByteSize + 2 + msgp.ByteSize + 2 + msgp.ByteSize + 2 + msgp.BytesPrefixSize + len((*z).BloomFilter)
	return
}

// MsgIsZero returns whether this is a zero value
func (z *encodedBloomFilter) MsgIsZero() bool {
	return ((*z).BloomFilterType == 0) && (((*z).EncodingParams.Offset == 0) && ((*z).EncodingParams.Modulator == 0)) && ((*z).Shuffler == 0) && (len((*z).BloomFilter) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *encodedCompactCertTxnFields) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0004Len := uint32(6)
	var zb0004Mask uint8 /* 7 bits */
	if len((*z).Cert) == 0 {
		zb0004Len--
		zb0004Mask |= 0x2
	}
	if len((*z).BitmaskCert) == 0 {
		zb0004Len--
		zb0004Mask |= 0x4
	}
	if len((*z).CertRound) == 0 {
		zb0004Len--
		zb0004Mask |= 0x8
	}
	if len((*z).BitmaskCertRound) == 0 {
		zb0004Len--
		zb0004Mask |= 0x10
	}
	if len((*z).CertType) == 0 {
		zb0004Len--
		zb0004Mask |= 0x20
	}
	if len((*z).BitmaskCertType) == 0 {
		zb0004Len--
		zb0004Mask |= 0x40
	}
	// variable map header, size zb0004Len
	o = append(o, 0x80|uint8(zb0004Len))
	if zb0004Len != 0 {
		if (zb0004Mask & 0x2) == 0 { // if not empty
			// string "cert"
			o = append(o, 0xa4, 0x63, 0x65, 0x72, 0x74)
			if (*z).Cert == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Cert)))
			}
			for zb0003 := range (*z).Cert {
				o = (*z).Cert[zb0003].MarshalMsg(o)
			}
		}
		if (zb0004Mask & 0x4) == 0 { // if not empty
			// string "certbm"
			o = append(o, 0xa6, 0x63, 0x65, 0x72, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskCert))
		}
		if (zb0004Mask & 0x8) == 0 { // if not empty
			// string "certrnd"
			o = append(o, 0xa7, 0x63, 0x65, 0x72, 0x74, 0x72, 0x6e, 0x64)
			if (*z).CertRound == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).CertRound)))
			}
			for zb0001 := range (*z).CertRound {
				o = (*z).CertRound[zb0001].MarshalMsg(o)
			}
		}
		if (zb0004Mask & 0x10) == 0 { // if not empty
			// string "certrndbm"
			o = append(o, 0xa9, 0x63, 0x65, 0x72, 0x74, 0x72, 0x6e, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskCertRound))
		}
		if (zb0004Mask & 0x20) == 0 { // if not empty
			// string "certtype"
			o = append(o, 0xa8, 0x63, 0x65, 0x72, 0x74, 0x74, 0x79, 0x70, 0x65)
			if (*z).CertType == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).CertType)))
			}
			for zb0002 := range (*z).CertType {
				o = (*z).CertType[zb0002].MarshalMsg(o)
			}
		}
		if (zb0004Mask & 0x40) == 0 { // if not empty
			// string "certtypebm"
			o = append(o, 0xaa, 0x63, 0x65, 0x72, 0x74, 0x74, 0x79, 0x70, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskCertType))
		}
	}
	return
}

func (_ *encodedCompactCertTxnFields) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedCompactCertTxnFields)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *encodedCompactCertTxnFields) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0004 int
	var zb0005 bool
	zb0004, zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0004, zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0004 > 0 {
			zb0004--
			var zb0006 int
			var zb0007 bool
			zb0006, zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CertRound")
				return
			}
			if zb0006 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0006), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "CertRound")
				return
			}
			if zb0007 {
				(*z).CertRound = nil
			} else if (*z).CertRound != nil && cap((*z).CertRound) >= zb0006 {
				(*z).CertRound = ((*z).CertRound)[:zb0006]
			} else {
				(*z).CertRound = make([]basics.Round, zb0006)
			}
			for zb0001 := range (*z).CertRound {
				bts, err = (*z).CertRound[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "CertRound", zb0001)
					return
				}
			}
		}
		if zb0004 > 0 {
			zb0004--
			{
				var zb0008 []byte
				var zb0009 int
				zb0009, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCertRound")
					return
				}
				if zb0009 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0009), uint64(maxBitmaskSize))
					return
				}
				zb0008, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskCertRound))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCertRound")
					return
				}
				(*z).BitmaskCertRound = bitmask(zb0008)
			}
		}
		if zb0004 > 0 {
			zb0004--
			var zb0010 int
			var zb0011 bool
			zb0010, zb0011, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CertType")
				return
			}
			if zb0010 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0010), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "CertType")
				return
			}
			if zb0011 {
				(*z).CertType = nil
			} else if (*z).CertType != nil && cap((*z).CertType) >= zb0010 {
				(*z).CertType = ((*z).CertType)[:zb0010]
			} else {
				(*z).CertType = make([]protocol.CompactCertType, zb0010)
			}
			for zb0002 := range (*z).CertType {
				bts, err = (*z).CertType[zb0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "CertType", zb0002)
					return
				}
			}
		}
		if zb0004 > 0 {
			zb0004--
			{
				var zb0012 []byte
				var zb0013 int
				zb0013, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCertType")
					return
				}
				if zb0013 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0013), uint64(maxBitmaskSize))
					return
				}
				zb0012, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskCertType))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCertType")
					return
				}
				(*z).BitmaskCertType = bitmask(zb0012)
			}
		}
		if zb0004 > 0 {
			zb0004--
			var zb0014 int
			var zb0015 bool
			zb0014, zb0015, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Cert")
				return
			}
			if zb0014 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0014), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Cert")
				return
			}
			if zb0015 {
				(*z).Cert = nil
			} else if (*z).Cert != nil && cap((*z).Cert) >= zb0014 {
				(*z).Cert = ((*z).Cert)[:zb0014]
			} else {
				(*z).Cert = make([]compactcert.Cert, zb0014)
			}
			for zb0003 := range (*z).Cert {
				bts, err = (*z).Cert[zb0003].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Cert", zb0003)
					return
				}
			}
		}
		if zb0004 > 0 {
			zb0004--
			{
				var zb0016 []byte
				var zb0017 int
				zb0017, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCert")
					return
				}
				if zb0017 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0017), uint64(maxBitmaskSize))
					return
				}
				zb0016, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskCert))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCert")
					return
				}
				(*z).BitmaskCert = bitmask(zb0016)
			}
		}
		if zb0004 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0004)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0005 {
			(*z) = encodedCompactCertTxnFields{}
		}
		for zb0004 > 0 {
			zb0004--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "certrnd":
				var zb0018 int
				var zb0019 bool
				zb0018, zb0019, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "CertRound")
					return
				}
				if zb0018 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0018), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "CertRound")
					return
				}
				if zb0019 {
					(*z).CertRound = nil
				} else if (*z).CertRound != nil && cap((*z).CertRound) >= zb0018 {
					(*z).CertRound = ((*z).CertRound)[:zb0018]
				} else {
					(*z).CertRound = make([]basics.Round, zb0018)
				}
				for zb0001 := range (*z).CertRound {
					bts, err = (*z).CertRound[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "CertRound", zb0001)
						return
					}
				}
			case "certrndbm":
				{
					var zb0020 []byte
					var zb0021 int
					zb0021, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCertRound")
						return
					}
					if zb0021 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0021), uint64(maxBitmaskSize))
						return
					}
					zb0020, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskCertRound))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCertRound")
						return
					}
					(*z).BitmaskCertRound = bitmask(zb0020)
				}
			case "certtype":
				var zb0022 int
				var zb0023 bool
				zb0022, zb0023, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "CertType")
					return
				}
				if zb0022 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0022), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "CertType")
					return
				}
				if zb0023 {
					(*z).CertType = nil
				} else if (*z).CertType != nil && cap((*z).CertType) >= zb0022 {
					(*z).CertType = ((*z).CertType)[:zb0022]
				} else {
					(*z).CertType = make([]protocol.CompactCertType, zb0022)
				}
				for zb0002 := range (*z).CertType {
					bts, err = (*z).CertType[zb0002].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "CertType", zb0002)
						return
					}
				}
			case "certtypebm":
				{
					var zb0024 []byte
					var zb0025 int
					zb0025, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCertType")
						return
					}
					if zb0025 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0025), uint64(maxBitmaskSize))
						return
					}
					zb0024, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskCertType))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCertType")
						return
					}
					(*z).BitmaskCertType = bitmask(zb0024)
				}
			case "cert":
				var zb0026 int
				var zb0027 bool
				zb0026, zb0027, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cert")
					return
				}
				if zb0026 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0026), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Cert")
					return
				}
				if zb0027 {
					(*z).Cert = nil
				} else if (*z).Cert != nil && cap((*z).Cert) >= zb0026 {
					(*z).Cert = ((*z).Cert)[:zb0026]
				} else {
					(*z).Cert = make([]compactcert.Cert, zb0026)
				}
				for zb0003 := range (*z).Cert {
					bts, err = (*z).Cert[zb0003].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Cert", zb0003)
						return
					}
				}
			case "certbm":
				{
					var zb0028 []byte
					var zb0029 int
					zb0029, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCert")
						return
					}
					if zb0029 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0029), uint64(maxBitmaskSize))
						return
					}
					zb0028, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskCert))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCert")
						return
					}
					(*z).BitmaskCert = bitmask(zb0028)
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *encodedCompactCertTxnFields) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedCompactCertTxnFields)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *encodedCompactCertTxnFields) Msgsize() (s int) {
	s = 1 + 8 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).CertRound {
		s += (*z).CertRound[zb0001].Msgsize()
	}
	s += 10 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskCertRound)) + 9 + msgp.ArrayHeaderSize
	for zb0002 := range (*z).CertType {
		s += (*z).CertType[zb0002].Msgsize()
	}
	s += 11 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskCertType)) + 5 + msgp.ArrayHeaderSize
	for zb0003 := range (*z).Cert {
		s += (*z).Cert[zb0003].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskCert))
	return
}

// MsgIsZero returns whether this is a zero value
func (z *encodedCompactCertTxnFields) MsgIsZero() bool {
	return (len((*z).CertRound) == 0) && (len((*z).BitmaskCertRound) == 0) && (len((*z).CertType) == 0) && (len((*z).BitmaskCertType) == 0) && (len((*z).Cert) == 0) && (len((*z).BitmaskCert) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *encodedKeyregTxnFields) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0004Len := uint32(11)
	var zb0004Mask uint16 /* 12 bits */
	if len((*z).BitmaskNonparticipation) == 0 {
		zb0004Len--
		zb0004Mask |= 0x2
	}
	if len((*z).SelectionPK) == 0 {
		zb0004Len--
		zb0004Mask |= 0x4
	}
	if len((*z).BitmaskSelectionPK) == 0 {
		zb0004Len--
		zb0004Mask |= 0x8
	}
	if len((*z).VoteFirst) == 0 {
		zb0004Len--
		zb0004Mask |= 0x10
	}
	if len((*z).BitmaskVoteFirst) == 0 {
		zb0004Len--
		zb0004Mask |= 0x20
	}
	if len((*z).VoteKeyDilution) == 0 {
		zb0004Len--
		zb0004Mask |= 0x40
	}
	if len((*z).BitmaskVoteKeyDilution) == 0 {
		zb0004Len--
		zb0004Mask |= 0x80
	}
	if len((*z).VotePK) == 0 {
		zb0004Len--
		zb0004Mask |= 0x100
	}
	if len((*z).BitmaskVotePK) == 0 {
		zb0004Len--
		zb0004Mask |= 0x200
	}
	if len((*z).VoteLast) == 0 {
		zb0004Len--
		zb0004Mask |= 0x400
	}
	if len((*z).BitmaskVoteLast) == 0 {
		zb0004Len--
		zb0004Mask |= 0x800
	}
	// variable map header, size zb0004Len
	o = append(o, 0x80|uint8(zb0004Len))
	if zb0004Len != 0 {
		if (zb0004Mask & 0x2) == 0 { // if not empty
			// string "nonpartbm"
			o = append(o, 0xa9, 0x6e, 0x6f, 0x6e, 0x70, 0x61, 0x72, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskNonparticipation))
		}
		if (zb0004Mask & 0x4) == 0 { // if not empty
			// string "selkey"
			o = append(o, 0xa6, 0x73, 0x65, 0x6c, 0x6b, 0x65, 0x79)
			o = msgp.AppendBytes(o, (*z).SelectionPK)
		}
		if (zb0004Mask & 0x8) == 0 { // if not empty
			// string "selkeybm"
			o = append(o, 0xa8, 0x73, 0x65, 0x6c, 0x6b, 0x65, 0x79, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskSelectionPK))
		}
		if (zb0004Mask & 0x10) == 0 { // if not empty
			// string "votefst"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x66, 0x73, 0x74)
			if (*z).VoteFirst == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).VoteFirst)))
			}
			for zb0001 := range (*z).VoteFirst {
				o = (*z).VoteFirst[zb0001].MarshalMsg(o)
			}
		}
		if (zb0004Mask & 0x20) == 0 { // if not empty
			// string "votefstbm"
			o = append(o, 0xa9, 0x76, 0x6f, 0x74, 0x65, 0x66, 0x73, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskVoteFirst))
		}
		if (zb0004Mask & 0x40) == 0 { // if not empty
			// string "votekd"
			o = append(o, 0xa6, 0x76, 0x6f, 0x74, 0x65, 0x6b, 0x64)
			if (*z).VoteKeyDilution == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).VoteKeyDilution)))
			}
			for zb0003 := range (*z).VoteKeyDilution {
				o = msgp.AppendUint64(o, (*z).VoteKeyDilution[zb0003])
			}
		}
		if (zb0004Mask & 0x80) == 0 { // if not empty
			// string "votekdbm"
			o = append(o, 0xa8, 0x76, 0x6f, 0x74, 0x65, 0x6b, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskVoteKeyDilution))
		}
		if (zb0004Mask & 0x100) == 0 { // if not empty
			// string "votekey"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x6b, 0x65, 0x79)
			o = msgp.AppendBytes(o, (*z).VotePK)
		}
		if (zb0004Mask & 0x200) == 0 { // if not empty
			// string "votekeybm"
			o = append(o, 0xa9, 0x76, 0x6f, 0x74, 0x65, 0x6b, 0x65, 0x79, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskVotePK))
		}
		if (zb0004Mask & 0x400) == 0 { // if not empty
			// string "votelst"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x6c, 0x73, 0x74)
			if (*z).VoteLast == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).VoteLast)))
			}
			for zb0002 := range (*z).VoteLast {
				o = (*z).VoteLast[zb0002].MarshalMsg(o)
			}
		}
		if (zb0004Mask & 0x800) == 0 { // if not empty
			// string "votelstbm"
			o = append(o, 0xa9, 0x76, 0x6f, 0x74, 0x65, 0x6c, 0x73, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskVoteLast))
		}
	}
	return
}

func (_ *encodedKeyregTxnFields) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedKeyregTxnFields)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *encodedKeyregTxnFields) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0004 int
	var zb0005 bool
	zb0004, zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0004, zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0004 > 0 {
			zb0004--
			var zb0006 int
			zb0006, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VotePK")
				return
			}
			if zb0006 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0006), uint64(maxAddressBytes))
				return
			}
			(*z).VotePK, bts, err = msgp.ReadBytesBytes(bts, (*z).VotePK)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VotePK")
				return
			}
		}
		if zb0004 > 0 {
			zb0004--
			{
				var zb0007 []byte
				var zb0008 int
				zb0008, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVotePK")
					return
				}
				if zb0008 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0008), uint64(maxBitmaskSize))
					return
				}
				zb0007, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskVotePK))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVotePK")
					return
				}
				(*z).BitmaskVotePK = bitmask(zb0007)
			}
		}
		if zb0004 > 0 {
			zb0004--
			var zb0009 int
			zb0009, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SelectionPK")
				return
			}
			if zb0009 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0009), uint64(maxAddressBytes))
				return
			}
			(*z).SelectionPK, bts, err = msgp.ReadBytesBytes(bts, (*z).SelectionPK)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SelectionPK")
				return
			}
		}
		if zb0004 > 0 {
			zb0004--
			{
				var zb0010 []byte
				var zb0011 int
				zb0011, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskSelectionPK")
					return
				}
				if zb0011 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0011), uint64(maxBitmaskSize))
					return
				}
				zb0010, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskSelectionPK))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskSelectionPK")
					return
				}
				(*z).BitmaskSelectionPK = bitmask(zb0010)
			}
		}
		if zb0004 > 0 {
			zb0004--
			var zb0012 int
			var zb0013 bool
			zb0012, zb0013, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteFirst")
				return
			}
			if zb0012 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0012), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "VoteFirst")
				return
			}
			if zb0013 {
				(*z).VoteFirst = nil
			} else if (*z).VoteFirst != nil && cap((*z).VoteFirst) >= zb0012 {
				(*z).VoteFirst = ((*z).VoteFirst)[:zb0012]
			} else {
				(*z).VoteFirst = make([]basics.Round, zb0012)
			}
			for zb0001 := range (*z).VoteFirst {
				bts, err = (*z).VoteFirst[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "VoteFirst", zb0001)
					return
				}
			}
		}
		if zb0004 > 0 {
			zb0004--
			{
				var zb0014 []byte
				var zb0015 int
				zb0015, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteFirst")
					return
				}
				if zb0015 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0015), uint64(maxBitmaskSize))
					return
				}
				zb0014, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskVoteFirst))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteFirst")
					return
				}
				(*z).BitmaskVoteFirst = bitmask(zb0014)
			}
		}
		if zb0004 > 0 {
			zb0004--
			var zb0016 int
			var zb0017 bool
			zb0016, zb0017, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteLast")
				return
			}
			if zb0016 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0016), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "VoteLast")
				return
			}
			if zb0017 {
				(*z).VoteLast = nil
			} else if (*z).VoteLast != nil && cap((*z).VoteLast) >= zb0016 {
				(*z).VoteLast = ((*z).VoteLast)[:zb0016]
			} else {
				(*z).VoteLast = make([]basics.Round, zb0016)
			}
			for zb0002 := range (*z).VoteLast {
				bts, err = (*z).VoteLast[zb0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "VoteLast", zb0002)
					return
				}
			}
		}
		if zb0004 > 0 {
			zb0004--
			{
				var zb0018 []byte
				var zb0019 int
				zb0019, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteLast")
					return
				}
				if zb0019 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0019), uint64(maxBitmaskSize))
					return
				}
				zb0018, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskVoteLast))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteLast")
					return
				}
				(*z).BitmaskVoteLast = bitmask(zb0018)
			}
		}
		if zb0004 > 0 {
			zb0004--
			var zb0020 int
			var zb0021 bool
			zb0020, zb0021, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteKeyDilution")
				return
			}
			if zb0020 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0020), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "VoteKeyDilution")
				return
			}
			if zb0021 {
				(*z).VoteKeyDilution = nil
			} else if (*z).VoteKeyDilution != nil && cap((*z).VoteKeyDilution) >= zb0020 {
				(*z).VoteKeyDilution = ((*z).VoteKeyDilution)[:zb0020]
			} else {
				(*z).VoteKeyDilution = make([]uint64, zb0020)
			}
			for zb0003 := range (*z).VoteKeyDilution {
				(*z).VoteKeyDilution[zb0003], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "VoteKeyDilution", zb0003)
					return
				}
			}
		}
		if zb0004 > 0 {
			zb0004--
			{
				var zb0022 []byte
				var zb0023 int
				zb0023, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteKeyDilution")
					return
				}
				if zb0023 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0023), uint64(maxBitmaskSize))
					return
				}
				zb0022, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskVoteKeyDilution))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteKeyDilution")
					return
				}
				(*z).BitmaskVoteKeyDilution = bitmask(zb0022)
			}
		}
		if zb0004 > 0 {
			zb0004--
			{
				var zb0024 []byte
				var zb0025 int
				zb0025, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskNonparticipation")
					return
				}
				if zb0025 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0025), uint64(maxBitmaskSize))
					return
				}
				zb0024, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskNonparticipation))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskNonparticipation")
					return
				}
				(*z).BitmaskNonparticipation = bitmask(zb0024)
			}
		}
		if zb0004 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0004)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0005 {
			(*z) = encodedKeyregTxnFields{}
		}
		for zb0004 > 0 {
			zb0004--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "votekey":
				var zb0026 int
				zb0026, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "VotePK")
					return
				}
				if zb0026 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0026), uint64(maxAddressBytes))
					return
				}
				(*z).VotePK, bts, err = msgp.ReadBytesBytes(bts, (*z).VotePK)
				if err != nil {
					err = msgp.WrapError(err, "VotePK")
					return
				}
			case "votekeybm":
				{
					var zb0027 []byte
					var zb0028 int
					zb0028, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVotePK")
						return
					}
					if zb0028 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0028), uint64(maxBitmaskSize))
						return
					}
					zb0027, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskVotePK))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVotePK")
						return
					}
					(*z).BitmaskVotePK = bitmask(zb0027)
				}
			case "selkey":
				var zb0029 int
				zb0029, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "SelectionPK")
					return
				}
				if zb0029 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0029), uint64(maxAddressBytes))
					return
				}
				(*z).SelectionPK, bts, err = msgp.ReadBytesBytes(bts, (*z).SelectionPK)
				if err != nil {
					err = msgp.WrapError(err, "SelectionPK")
					return
				}
			case "selkeybm":
				{
					var zb0030 []byte
					var zb0031 int
					zb0031, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskSelectionPK")
						return
					}
					if zb0031 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0031), uint64(maxBitmaskSize))
						return
					}
					zb0030, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskSelectionPK))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskSelectionPK")
						return
					}
					(*z).BitmaskSelectionPK = bitmask(zb0030)
				}
			case "votefst":
				var zb0032 int
				var zb0033 bool
				zb0032, zb0033, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteFirst")
					return
				}
				if zb0032 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0032), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "VoteFirst")
					return
				}
				if zb0033 {
					(*z).VoteFirst = nil
				} else if (*z).VoteFirst != nil && cap((*z).VoteFirst) >= zb0032 {
					(*z).VoteFirst = ((*z).VoteFirst)[:zb0032]
				} else {
					(*z).VoteFirst = make([]basics.Round, zb0032)
				}
				for zb0001 := range (*z).VoteFirst {
					bts, err = (*z).VoteFirst[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "VoteFirst", zb0001)
						return
					}
				}
			case "votefstbm":
				{
					var zb0034 []byte
					var zb0035 int
					zb0035, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteFirst")
						return
					}
					if zb0035 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0035), uint64(maxBitmaskSize))
						return
					}
					zb0034, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskVoteFirst))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteFirst")
						return
					}
					(*z).BitmaskVoteFirst = bitmask(zb0034)
				}
			case "votelst":
				var zb0036 int
				var zb0037 bool
				zb0036, zb0037, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteLast")
					return
				}
				if zb0036 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0036), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "VoteLast")
					return
				}
				if zb0037 {
					(*z).VoteLast = nil
				} else if (*z).VoteLast != nil && cap((*z).VoteLast) >= zb0036 {
					(*z).VoteLast = ((*z).VoteLast)[:zb0036]
				} else {
					(*z).VoteLast = make([]basics.Round, zb0036)
				}
				for zb0002 := range (*z).VoteLast {
					bts, err = (*z).VoteLast[zb0002].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "VoteLast", zb0002)
						return
					}
				}
			case "votelstbm":
				{
					var zb0038 []byte
					var zb0039 int
					zb0039, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteLast")
						return
					}
					if zb0039 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0039), uint64(maxBitmaskSize))
						return
					}
					zb0038, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskVoteLast))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteLast")
						return
					}
					(*z).BitmaskVoteLast = bitmask(zb0038)
				}
			case "votekd":
				var zb0040 int
				var zb0041 bool
				zb0040, zb0041, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteKeyDilution")
					return
				}
				if zb0040 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0040), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "VoteKeyDilution")
					return
				}
				if zb0041 {
					(*z).VoteKeyDilution = nil
				} else if (*z).VoteKeyDilution != nil && cap((*z).VoteKeyDilution) >= zb0040 {
					(*z).VoteKeyDilution = ((*z).VoteKeyDilution)[:zb0040]
				} else {
					(*z).VoteKeyDilution = make([]uint64, zb0040)
				}
				for zb0003 := range (*z).VoteKeyDilution {
					(*z).VoteKeyDilution[zb0003], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "VoteKeyDilution", zb0003)
						return
					}
				}
			case "votekdbm":
				{
					var zb0042 []byte
					var zb0043 int
					zb0043, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteKeyDilution")
						return
					}
					if zb0043 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0043), uint64(maxBitmaskSize))
						return
					}
					zb0042, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskVoteKeyDilution))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteKeyDilution")
						return
					}
					(*z).BitmaskVoteKeyDilution = bitmask(zb0042)
				}
			case "nonpartbm":
				{
					var zb0044 []byte
					var zb0045 int
					zb0045, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskNonparticipation")
						return
					}
					if zb0045 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0045), uint64(maxBitmaskSize))
						return
					}
					zb0044, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskNonparticipation))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskNonparticipation")
						return
					}
					(*z).BitmaskNonparticipation = bitmask(zb0044)
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *encodedKeyregTxnFields) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedKeyregTxnFields)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *encodedKeyregTxnFields) Msgsize() (s int) {
	s = 1 + 8 + msgp.BytesPrefixSize + len((*z).VotePK) + 10 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskVotePK)) + 7 + msgp.BytesPrefixSize + len((*z).SelectionPK) + 9 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskSelectionPK)) + 8 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).VoteFirst {
		s += (*z).VoteFirst[zb0001].Msgsize()
	}
	s += 10 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskVoteFirst)) + 8 + msgp.ArrayHeaderSize
	for zb0002 := range (*z).VoteLast {
		s += (*z).VoteLast[zb0002].Msgsize()
	}
	s += 10 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskVoteLast)) + 7 + msgp.ArrayHeaderSize + (len((*z).VoteKeyDilution) * (msgp.Uint64Size)) + 9 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskVoteKeyDilution)) + 10 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskNonparticipation))
	return
}

// MsgIsZero returns whether this is a zero value
func (z *encodedKeyregTxnFields) MsgIsZero() bool {
	return (len((*z).VotePK) == 0) && (len((*z).BitmaskVotePK) == 0) && (len((*z).SelectionPK) == 0) && (len((*z).BitmaskSelectionPK) == 0) && (len((*z).VoteFirst) == 0) && (len((*z).BitmaskVoteFirst) == 0) && (len((*z).VoteLast) == 0) && (len((*z).BitmaskVoteLast) == 0) && (len((*z).VoteKeyDilution) == 0) && (len((*z).BitmaskVoteKeyDilution) == 0) && (len((*z).BitmaskNonparticipation) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *encodedPaymentTxnFields) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0002Len := uint32(6)
	var zb0002Mask uint8 /* 7 bits */
	if len((*z).Amount) == 0 {
		zb0002Len--
		zb0002Mask |= 0x2
	}
	if len((*z).BitmaskAmount) == 0 {
		zb0002Len--
		zb0002Mask |= 0x4
	}
	if len((*z).CloseRemainderTo) == 0 {
		zb0002Len--
		zb0002Mask |= 0x8
	}
	if len((*z).BitmaskCloseRemainderTo) == 0 {
		zb0002Len--
		zb0002Mask |= 0x10
	}
	if len((*z).Receiver) == 0 {
		zb0002Len--
		zb0002Mask |= 0x20
	}
	if len((*z).BitmaskReceiver) == 0 {
		zb0002Len--
		zb0002Mask |= 0x40
	}
	// variable map header, size zb0002Len
	o = append(o, 0x80|uint8(zb0002Len))
	if zb0002Len != 0 {
		if (zb0002Mask & 0x2) == 0 { // if not empty
			// string "amt"
			o = append(o, 0xa3, 0x61, 0x6d, 0x74)
			if (*z).Amount == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Amount)))
			}
			for zb0001 := range (*z).Amount {
				o = (*z).Amount[zb0001].MarshalMsg(o)
			}
		}
		if (zb0002Mask & 0x4) == 0 { // if not empty
			// string "amtbm"
			o = append(o, 0xa5, 0x61, 0x6d, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskAmount))
		}
		if (zb0002Mask & 0x8) == 0 { // if not empty
			// string "close"
			o = append(o, 0xa5, 0x63, 0x6c, 0x6f, 0x73, 0x65)
			o = msgp.AppendBytes(o, (*z).CloseRemainderTo)
		}
		if (zb0002Mask & 0x10) == 0 { // if not empty
			// string "closebm"
			o = append(o, 0xa7, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskCloseRemainderTo))
		}
		if (zb0002Mask & 0x20) == 0 { // if not empty
			// string "rcv"
			o = append(o, 0xa3, 0x72, 0x63, 0x76)
			o = msgp.AppendBytes(o, (*z).Receiver)
		}
		if (zb0002Mask & 0x40) == 0 { // if not empty
			// string "rcvbm"
			o = append(o, 0xa5, 0x72, 0x63, 0x76, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskReceiver))
		}
	}
	return
}

func (_ *encodedPaymentTxnFields) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedPaymentTxnFields)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *encodedPaymentTxnFields) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0002 int
	var zb0003 bool
	zb0002, zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0002, zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 > 0 {
			zb0002--
			var zb0004 int
			zb0004, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Receiver")
				return
			}
			if zb0004 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0004), uint64(maxAddressBytes))
				return
			}
			(*z).Receiver, bts, err = msgp.ReadBytesBytes(bts, (*z).Receiver)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Receiver")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			{
				var zb0005 []byte
				var zb0006 int
				zb0006, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskReceiver")
					return
				}
				if zb0006 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0006), uint64(maxBitmaskSize))
					return
				}
				zb0005, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskReceiver))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskReceiver")
					return
				}
				(*z).BitmaskReceiver = bitmask(zb0005)
			}
		}
		if zb0002 > 0 {
			zb0002--
			var zb0007 int
			var zb0008 bool
			zb0007, zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Amount")
				return
			}
			if zb0007 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0007), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Amount")
				return
			}
			if zb0008 {
				(*z).Amount = nil
			} else if (*z).Amount != nil && cap((*z).Amount) >= zb0007 {
				(*z).Amount = ((*z).Amount)[:zb0007]
			} else {
				(*z).Amount = make([]basics.MicroAlgos, zb0007)
			}
			for zb0001 := range (*z).Amount {
				bts, err = (*z).Amount[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Amount", zb0001)
					return
				}
			}
		}
		if zb0002 > 0 {
			zb0002--
			{
				var zb0009 []byte
				var zb0010 int
				zb0010, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAmount")
					return
				}
				if zb0010 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0010), uint64(maxBitmaskSize))
					return
				}
				zb0009, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskAmount))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAmount")
					return
				}
				(*z).BitmaskAmount = bitmask(zb0009)
			}
		}
		if zb0002 > 0 {
			zb0002--
			var zb0011 int
			zb0011, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CloseRemainderTo")
				return
			}
			if zb0011 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0011), uint64(maxAddressBytes))
				return
			}
			(*z).CloseRemainderTo, bts, err = msgp.ReadBytesBytes(bts, (*z).CloseRemainderTo)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CloseRemainderTo")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			{
				var zb0012 []byte
				var zb0013 int
				zb0013, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCloseRemainderTo")
					return
				}
				if zb0013 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0013), uint64(maxBitmaskSize))
					return
				}
				zb0012, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskCloseRemainderTo))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCloseRemainderTo")
					return
				}
				(*z).BitmaskCloseRemainderTo = bitmask(zb0012)
			}
		}
		if zb0002 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0002)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0003 {
			(*z) = encodedPaymentTxnFields{}
		}
		for zb0002 > 0 {
			zb0002--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "rcv":
				var zb0014 int
				zb0014, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Receiver")
					return
				}
				if zb0014 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0014), uint64(maxAddressBytes))
					return
				}
				(*z).Receiver, bts, err = msgp.ReadBytesBytes(bts, (*z).Receiver)
				if err != nil {
					err = msgp.WrapError(err, "Receiver")
					return
				}
			case "rcvbm":
				{
					var zb0015 []byte
					var zb0016 int
					zb0016, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskReceiver")
						return
					}
					if zb0016 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0016), uint64(maxBitmaskSize))
						return
					}
					zb0015, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskReceiver))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskReceiver")
						return
					}
					(*z).BitmaskReceiver = bitmask(zb0015)
				}
			case "amt":
				var zb0017 int
				var zb0018 bool
				zb0017, zb0018, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Amount")
					return
				}
				if zb0017 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0017), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Amount")
					return
				}
				if zb0018 {
					(*z).Amount = nil
				} else if (*z).Amount != nil && cap((*z).Amount) >= zb0017 {
					(*z).Amount = ((*z).Amount)[:zb0017]
				} else {
					(*z).Amount = make([]basics.MicroAlgos, zb0017)
				}
				for zb0001 := range (*z).Amount {
					bts, err = (*z).Amount[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Amount", zb0001)
						return
					}
				}
			case "amtbm":
				{
					var zb0019 []byte
					var zb0020 int
					zb0020, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAmount")
						return
					}
					if zb0020 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0020), uint64(maxBitmaskSize))
						return
					}
					zb0019, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskAmount))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAmount")
						return
					}
					(*z).BitmaskAmount = bitmask(zb0019)
				}
			case "close":
				var zb0021 int
				zb0021, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "CloseRemainderTo")
					return
				}
				if zb0021 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0021), uint64(maxAddressBytes))
					return
				}
				(*z).CloseRemainderTo, bts, err = msgp.ReadBytesBytes(bts, (*z).CloseRemainderTo)
				if err != nil {
					err = msgp.WrapError(err, "CloseRemainderTo")
					return
				}
			case "closebm":
				{
					var zb0022 []byte
					var zb0023 int
					zb0023, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCloseRemainderTo")
						return
					}
					if zb0023 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0023), uint64(maxBitmaskSize))
						return
					}
					zb0022, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskCloseRemainderTo))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCloseRemainderTo")
						return
					}
					(*z).BitmaskCloseRemainderTo = bitmask(zb0022)
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *encodedPaymentTxnFields) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedPaymentTxnFields)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *encodedPaymentTxnFields) Msgsize() (s int) {
	s = 1 + 4 + msgp.BytesPrefixSize + len((*z).Receiver) + 6 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskReceiver)) + 4 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).Amount {
		s += (*z).Amount[zb0001].Msgsize()
	}
	s += 6 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskAmount)) + 6 + msgp.BytesPrefixSize + len((*z).CloseRemainderTo) + 8 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskCloseRemainderTo))
	return
}

// MsgIsZero returns whether this is a zero value
func (z *encodedPaymentTxnFields) MsgIsZero() bool {
	return (len((*z).Receiver) == 0) && (len((*z).BitmaskReceiver) == 0) && (len((*z).Amount) == 0) && (len((*z).BitmaskAmount) == 0) && (len((*z).CloseRemainderTo) == 0) && (len((*z).BitmaskCloseRemainderTo) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *encodedSignedTxns) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0038Len := uint32(114)
	var zb0038Mask [2]uint64 /* 125 bits */
	if len((*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x800
	}
	if len((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetAmount) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x1000
	}
	if len((*z).encodedTxns.encodedAssetTransferTxnFields.AssetCloseTo) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x2000
	}
	if len((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetCloseTo) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x4000
	}
	if len((*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskAssetFrozen) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x8000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x10000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x20000
	}
	if len((*z).encodedTxns.encodedPaymentTxnFields.Amount) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x40000
	}
	if len((*z).encodedTxns.encodedPaymentTxnFields.BitmaskAmount) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x80000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x100000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x200000
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x400000
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationArgs) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x800000
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.OnCompletion) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x1000000
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskOnCompletion) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x2000000
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x4000000
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApprovalProgram) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x8000000
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x10000000
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignAssets) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x20000000
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.Accounts) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x40000000
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskAccounts) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x80000000
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x100000000
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignApps) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x200000000
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x400000000
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationID) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x800000000
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x1000000000
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskClearStateProgram) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x2000000000
	}
	if len((*z).encodedTxns.encodedAssetTransferTxnFields.AssetReceiver) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x4000000000
	}
	if len((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetReceiver) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x8000000000
	}
	if len((*z).encodedTxns.encodedAssetTransferTxnFields.AssetSender) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x10000000000
	}
	if len((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetSender) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x20000000000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x40000000000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x80000000000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Clawback) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x100000000000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x200000000000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.BitmaskConfigAsset) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x400000000000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x800000000000
	}
	if len((*z).encodedTxns.encodedCompactCertTxnFields.Cert) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x1000000000000
	}
	if len((*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCert) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x2000000000000
	}
	if len((*z).encodedTxns.encodedCompactCertTxnFields.CertRound) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x4000000000000
	}
	if len((*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCertRound) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x8000000000000
	}
	if len((*z).encodedTxns.encodedCompactCertTxnFields.CertType) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x10000000000000
	}
	if len((*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCertType) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x20000000000000
	}
	if len((*z).encodedTxns.encodedPaymentTxnFields.CloseRemainderTo) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x40000000000000
	}
	if len((*z).encodedTxns.encodedPaymentTxnFields.BitmaskCloseRemainderTo) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x80000000000000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x100000000000000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x200000000000000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x400000000000000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Freeze) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x800000000000000
	}
	if len((*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAccount) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x1000000000000000
	}
	if len((*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAccount) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x2000000000000000
	}
	if len((*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x4000000000000000
	}
	if len((*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAsset) == 0 {
		zb0038Len--
		zb0038Mask[0] |= 0x8000000000000000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x1
	}
	if len((*z).encodedTxns.encodedTxnHeaders.Fee) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x2
	}
	if len((*z).encodedTxns.encodedTxnHeaders.BitmaskFee) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x4
	}
	if len((*z).encodedTxns.encodedTxnHeaders.FirstValid) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x8
	}
	if len((*z).encodedTxns.encodedTxnHeaders.BitmaskFirstValid) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x10
	}
	if (*z).encodedTxns.encodedTxnHeaders.GenesisID == "" {
		zb0038Len--
		zb0038Mask[1] |= 0x20
	}
	if len((*z).encodedTxns.encodedTxnHeaders.BitmaskGenesisID) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x40
	}
	if (*z).encodedTxns.encodedTxnHeaders.GenesisHash.MsgIsZero() {
		zb0038Len--
		zb0038Mask[1] |= 0x80
	}
	if len((*z).encodedTxns.encodedTxnHeaders.BitmaskGenesisHash) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x100
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x200
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x400
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x800
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumUint) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x1000
	}
	if len((*z).encodedTxns.encodedTxnHeaders.BitmaskGroup) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x2000
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x4000
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x8000
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x10000
	}
	if len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumUint) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x20000
	}
	if len((*z).Lsig) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x40000
	}
	if len((*z).BitmaskLsig) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x80000
	}
	if len((*z).encodedTxns.encodedTxnHeaders.LastValid) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x100000
	}
	if len((*z).encodedTxns.encodedTxnHeaders.BitmaskLastValid) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x200000
	}
	if len((*z).encodedTxns.encodedTxnHeaders.Lease) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x400000
	}
	if len((*z).encodedTxns.encodedTxnHeaders.BitmaskLease) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x800000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Manager) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x1000000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x2000000
	}
	if len((*z).Msig) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x4000000
	}
	if len((*z).BitmaskMsig) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x8000000
	}
	if len((*z).encodedTxns.encodedKeyregTxnFields.BitmaskNonparticipation) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x10000000
	}
	if len((*z).encodedTxns.encodedTxnHeaders.Note) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x20000000
	}
	if len((*z).encodedTxns.encodedTxnHeaders.BitmaskNote) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x40000000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Reserve) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x80000000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x100000000
	}
	if len((*z).encodedTxns.encodedPaymentTxnFields.Receiver) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x200000000
	}
	if len((*z).encodedTxns.encodedPaymentTxnFields.BitmaskReceiver) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x400000000
	}
	if len((*z).encodedTxns.encodedTxnHeaders.RekeyTo) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x800000000
	}
	if len((*z).encodedTxns.encodedTxnHeaders.BitmaskRekeyTo) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x1000000000
	}
	if len((*z).encodedTxns.encodedKeyregTxnFields.SelectionPK) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x2000000000
	}
	if len((*z).encodedTxns.encodedKeyregTxnFields.BitmaskSelectionPK) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x4000000000
	}
	if len((*z).AuthAddr) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x8000000000
	}
	if len((*z).BitmaskAuthAddr) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x10000000000
	}
	if len((*z).Sig) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x20000000000
	}
	if len((*z).BitmaskSig) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x40000000000
	}
	if len((*z).encodedTxns.encodedTxnHeaders.Sender) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x80000000000
	}
	if len((*z).encodedTxns.encodedTxnHeaders.BitmaskSender) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x100000000000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x200000000000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x400000000000
	}
	if len((*z).encodedTxns.TxType) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x800000000000
	}
	if len((*z).encodedTxns.BitmaskTxType) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x1000000000000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x2000000000000
	}
	if len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x4000000000000
	}
	if len((*z).encodedTxns.encodedKeyregTxnFields.VoteFirst) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x8000000000000
	}
	if len((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteFirst) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x10000000000000
	}
	if len((*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x20000000000000
	}
	if len((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteKeyDilution) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x40000000000000
	}
	if len((*z).encodedTxns.encodedKeyregTxnFields.VotePK) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x80000000000000
	}
	if len((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVotePK) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x100000000000000
	}
	if len((*z).encodedTxns.encodedKeyregTxnFields.VoteLast) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x200000000000000
	}
	if len((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteLast) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x400000000000000
	}
	if len((*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x800000000000000
	}
	if len((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskXferAsset) == 0 {
		zb0038Len--
		zb0038Mask[1] |= 0x1000000000000000
	}
	// variable map header, size zb0038Len
	o = msgp.AppendMapHeader(o, zb0038Len)
	if zb0038Len != 0 {
		if (zb0038Mask[0] & 0x800) == 0 { // if not empty
			// string "aamt"
			o = append(o, 0xa4, 0x61, 0x61, 0x6d, 0x74)
			if (*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount)))
			}
			for zb0018 := range (*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount {
				o = msgp.AppendUint64(o, (*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount[zb0018])
			}
		}
		if (zb0038Mask[0] & 0x1000) == 0 { // if not empty
			// string "aamtbm"
			o = append(o, 0xa6, 0x61, 0x61, 0x6d, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetAmount))
		}
		if (zb0038Mask[0] & 0x2000) == 0 { // if not empty
			// string "aclose"
			o = append(o, 0xa6, 0x61, 0x63, 0x6c, 0x6f, 0x73, 0x65)
			o = msgp.AppendBytes(o, (*z).encodedTxns.encodedAssetTransferTxnFields.AssetCloseTo)
		}
		if (zb0038Mask[0] & 0x4000) == 0 { // if not empty
			// string "aclosebm"
			o = append(o, 0xa8, 0x61, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetCloseTo))
		}
		if (zb0038Mask[0] & 0x8000) == 0 { // if not empty
			// string "afrzbm"
			o = append(o, 0xa6, 0x61, 0x66, 0x72, 0x7a, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskAssetFrozen))
		}
		if (zb0038Mask[0] & 0x10000) == 0 { // if not empty
			// string "am"
			o = append(o, 0xa2, 0x61, 0x6d)
			o = msgp.AppendBytes(o, (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash)
		}
		if (zb0038Mask[0] & 0x20000) == 0 { // if not empty
			// string "ambm"
			o = append(o, 0xa4, 0x61, 0x6d, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash))
		}
		if (zb0038Mask[0] & 0x40000) == 0 { // if not empty
			// string "amt"
			o = append(o, 0xa3, 0x61, 0x6d, 0x74)
			if (*z).encodedTxns.encodedPaymentTxnFields.Amount == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedPaymentTxnFields.Amount)))
			}
			for zb0010 := range (*z).encodedTxns.encodedPaymentTxnFields.Amount {
				o = (*z).encodedTxns.encodedPaymentTxnFields.Amount[zb0010].MarshalMsg(o)
			}
		}
		if (zb0038Mask[0] & 0x80000) == 0 { // if not empty
			// string "amtbm"
			o = append(o, 0xa5, 0x61, 0x6d, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedPaymentTxnFields.BitmaskAmount))
		}
		if (zb0038Mask[0] & 0x100000) == 0 { // if not empty
			// string "an"
			o = append(o, 0xa2, 0x61, 0x6e)
			if (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName)))
			}
			for zb0015 := range (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName {
				o = msgp.AppendString(o, (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName[zb0015])
			}
		}
		if (zb0038Mask[0] & 0x200000) == 0 { // if not empty
			// string "anbm"
			o = append(o, 0xa4, 0x61, 0x6e, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName))
		}
		if (zb0038Mask[0] & 0x400000) == 0 { // if not empty
			// string "apaa"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x61)
			if (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs)))
			}
			for zb0021 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs {
				if (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021] == nil {
					o = msgp.AppendNil(o)
				} else {
					o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021])))
				}
				for zb0022 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021] {
					o = msgp.AppendBytes(o, (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021][zb0022])
				}
			}
		}
		if (zb0038Mask[0] & 0x800000) == 0 { // if not empty
			// string "apaabm"
			o = append(o, 0xa6, 0x61, 0x70, 0x61, 0x61, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationArgs))
		}
		if (zb0038Mask[0] & 0x1000000) == 0 { // if not empty
			// string "apan"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x6e)
			o = msgp.AppendBytes(o, (*z).encodedTxns.encodedApplicationCallTxnFields.OnCompletion)
		}
		if (zb0038Mask[0] & 0x2000000) == 0 { // if not empty
			// string "apanbm"
			o = append(o, 0xa6, 0x61, 0x70, 0x61, 0x6e, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskOnCompletion))
		}
		if (zb0038Mask[0] & 0x4000000) == 0 { // if not empty
			// string "apap"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x70)
			if (*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram)))
			}
			for zb0033 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram {
				o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram[zb0033]))
			}
		}
		if (zb0038Mask[0] & 0x8000000) == 0 { // if not empty
			// string "apapbm"
			o = append(o, 0xa6, 0x61, 0x70, 0x61, 0x70, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApprovalProgram))
		}
		if (zb0038Mask[0] & 0x10000000) == 0 { // if not empty
			// string "apas"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x73)
			if (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets)))
			}
			for zb0027 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets {
				if (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027] == nil {
					o = msgp.AppendNil(o)
				} else {
					o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027])))
				}
				for zb0028 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027] {
					o = (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027][zb0028].MarshalMsg(o)
				}
			}
		}
		if (zb0038Mask[0] & 0x20000000) == 0 { // if not empty
			// string "apasbm"
			o = append(o, 0xa6, 0x61, 0x70, 0x61, 0x73, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignAssets))
		}
		if (zb0038Mask[0] & 0x40000000) == 0 { // if not empty
			// string "apat"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x74)
			if (*z).encodedTxns.encodedApplicationCallTxnFields.Accounts == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedApplicationCallTxnFields.Accounts)))
			}
			for zb0023 := range (*z).encodedTxns.encodedApplicationCallTxnFields.Accounts {
				if (*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023] == nil {
					o = msgp.AppendNil(o)
				} else {
					o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023])))
				}
				for zb0024 := range (*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023] {
					o = (*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023][zb0024].MarshalMsg(o)
				}
			}
		}
		if (zb0038Mask[0] & 0x80000000) == 0 { // if not empty
			// string "apatbm"
			o = append(o, 0xa6, 0x61, 0x70, 0x61, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskAccounts))
		}
		if (zb0038Mask[0] & 0x100000000) == 0 { // if not empty
			// string "apfa"
			o = append(o, 0xa4, 0x61, 0x70, 0x66, 0x61)
			if (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps)))
			}
			for zb0025 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps {
				if (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025] == nil {
					o = msgp.AppendNil(o)
				} else {
					o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025])))
				}
				for zb0026 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025] {
					o = (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025][zb0026].MarshalMsg(o)
				}
			}
		}
		if (zb0038Mask[0] & 0x200000000) == 0 { // if not empty
			// string "apfabm"
			o = append(o, 0xa6, 0x61, 0x70, 0x66, 0x61, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignApps))
		}
		if (zb0038Mask[0] & 0x400000000) == 0 { // if not empty
			// string "apid"
			o = append(o, 0xa4, 0x61, 0x70, 0x69, 0x64)
			if (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID)))
			}
			for zb0020 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID {
				o = (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID[zb0020].MarshalMsg(o)
			}
		}
		if (zb0038Mask[0] & 0x800000000) == 0 { // if not empty
			// string "apidbm"
			o = append(o, 0xa6, 0x61, 0x70, 0x69, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationID))
		}
		if (zb0038Mask[0] & 0x1000000000) == 0 { // if not empty
			// string "apsu"
			o = append(o, 0xa4, 0x61, 0x70, 0x73, 0x75)
			if (*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram)))
			}
			for zb0034 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram {
				o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram[zb0034]))
			}
		}
		if (zb0038Mask[0] & 0x2000000000) == 0 { // if not empty
			// string "apsubm"
			o = append(o, 0xa6, 0x61, 0x70, 0x73, 0x75, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskClearStateProgram))
		}
		if (zb0038Mask[0] & 0x4000000000) == 0 { // if not empty
			// string "arcv"
			o = append(o, 0xa4, 0x61, 0x72, 0x63, 0x76)
			o = msgp.AppendBytes(o, (*z).encodedTxns.encodedAssetTransferTxnFields.AssetReceiver)
		}
		if (zb0038Mask[0] & 0x8000000000) == 0 { // if not empty
			// string "arcvbm"
			o = append(o, 0xa6, 0x61, 0x72, 0x63, 0x76, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetReceiver))
		}
		if (zb0038Mask[0] & 0x10000000000) == 0 { // if not empty
			// string "asnd"
			o = append(o, 0xa4, 0x61, 0x73, 0x6e, 0x64)
			o = msgp.AppendBytes(o, (*z).encodedTxns.encodedAssetTransferTxnFields.AssetSender)
		}
		if (zb0038Mask[0] & 0x20000000000) == 0 { // if not empty
			// string "asndbm"
			o = append(o, 0xa6, 0x61, 0x73, 0x6e, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetSender))
		}
		if (zb0038Mask[0] & 0x40000000000) == 0 { // if not empty
			// string "au"
			o = append(o, 0xa2, 0x61, 0x75)
			if (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL)))
			}
			for zb0016 := range (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL {
				o = msgp.AppendString(o, (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL[zb0016])
			}
		}
		if (zb0038Mask[0] & 0x80000000000) == 0 { // if not empty
			// string "aubm"
			o = append(o, 0xa4, 0x61, 0x75, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL))
		}
		if (zb0038Mask[0] & 0x100000000000) == 0 { // if not empty
			// string "c"
			o = append(o, 0xa1, 0x63)
			o = msgp.AppendBytes(o, (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Clawback)
		}
		if (zb0038Mask[0] & 0x200000000000) == 0 { // if not empty
			// string "caid"
			o = append(o, 0xa4, 0x63, 0x61, 0x69, 0x64)
			if (*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset)))
			}
			for zb0011 := range (*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset {
				o = (*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset[zb0011].MarshalMsg(o)
			}
		}
		if (zb0038Mask[0] & 0x400000000000) == 0 { // if not empty
			// string "caidbm"
			o = append(o, 0xa6, 0x63, 0x61, 0x69, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.BitmaskConfigAsset))
		}
		if (zb0038Mask[0] & 0x800000000000) == 0 { // if not empty
			// string "cbm"
			o = append(o, 0xa3, 0x63, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback))
		}
		if (zb0038Mask[0] & 0x1000000000000) == 0 { // if not empty
			// string "cert"
			o = append(o, 0xa4, 0x63, 0x65, 0x72, 0x74)
			if (*z).encodedTxns.encodedCompactCertTxnFields.Cert == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedCompactCertTxnFields.Cert)))
			}
			for zb0037 := range (*z).encodedTxns.encodedCompactCertTxnFields.Cert {
				o = (*z).encodedTxns.encodedCompactCertTxnFields.Cert[zb0037].MarshalMsg(o)
			}
		}
		if (zb0038Mask[0] & 0x2000000000000) == 0 { // if not empty
			// string "certbm"
			o = append(o, 0xa6, 0x63, 0x65, 0x72, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCert))
		}
		if (zb0038Mask[0] & 0x4000000000000) == 0 { // if not empty
			// string "certrnd"
			o = append(o, 0xa7, 0x63, 0x65, 0x72, 0x74, 0x72, 0x6e, 0x64)
			if (*z).encodedTxns.encodedCompactCertTxnFields.CertRound == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedCompactCertTxnFields.CertRound)))
			}
			for zb0035 := range (*z).encodedTxns.encodedCompactCertTxnFields.CertRound {
				o = (*z).encodedTxns.encodedCompactCertTxnFields.CertRound[zb0035].MarshalMsg(o)
			}
		}
		if (zb0038Mask[0] & 0x8000000000000) == 0 { // if not empty
			// string "certrndbm"
			o = append(o, 0xa9, 0x63, 0x65, 0x72, 0x74, 0x72, 0x6e, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCertRound))
		}
		if (zb0038Mask[0] & 0x10000000000000) == 0 { // if not empty
			// string "certtype"
			o = append(o, 0xa8, 0x63, 0x65, 0x72, 0x74, 0x74, 0x79, 0x70, 0x65)
			if (*z).encodedTxns.encodedCompactCertTxnFields.CertType == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedCompactCertTxnFields.CertType)))
			}
			for zb0036 := range (*z).encodedTxns.encodedCompactCertTxnFields.CertType {
				o = (*z).encodedTxns.encodedCompactCertTxnFields.CertType[zb0036].MarshalMsg(o)
			}
		}
		if (zb0038Mask[0] & 0x20000000000000) == 0 { // if not empty
			// string "certtypebm"
			o = append(o, 0xaa, 0x63, 0x65, 0x72, 0x74, 0x74, 0x79, 0x70, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCertType))
		}
		if (zb0038Mask[0] & 0x40000000000000) == 0 { // if not empty
			// string "close"
			o = append(o, 0xa5, 0x63, 0x6c, 0x6f, 0x73, 0x65)
			o = msgp.AppendBytes(o, (*z).encodedTxns.encodedPaymentTxnFields.CloseRemainderTo)
		}
		if (zb0038Mask[0] & 0x80000000000000) == 0 { // if not empty
			// string "closebm"
			o = append(o, 0xa7, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedPaymentTxnFields.BitmaskCloseRemainderTo))
		}
		if (zb0038Mask[0] & 0x100000000000000) == 0 { // if not empty
			// string "dc"
			o = append(o, 0xa2, 0x64, 0x63)
			if (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals)))
			}
			for zb0013 := range (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals {
				o = msgp.AppendUint32(o, (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals[zb0013])
			}
		}
		if (zb0038Mask[0] & 0x200000000000000) == 0 { // if not empty
			// string "dcbm"
			o = append(o, 0xa4, 0x64, 0x63, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals))
		}
		if (zb0038Mask[0] & 0x400000000000000) == 0 { // if not empty
			// string "dfbm"
			o = append(o, 0xa4, 0x64, 0x66, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen))
		}
		if (zb0038Mask[0] & 0x800000000000000) == 0 { // if not empty
			// string "f"
			o = append(o, 0xa1, 0x66)
			o = msgp.AppendBytes(o, (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Freeze)
		}
		if (zb0038Mask[0] & 0x1000000000000000) == 0 { // if not empty
			// string "fadd"
			o = append(o, 0xa4, 0x66, 0x61, 0x64, 0x64)
			o = msgp.AppendBytes(o, (*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAccount)
		}
		if (zb0038Mask[0] & 0x2000000000000000) == 0 { // if not empty
			// string "faddbm"
			o = append(o, 0xa6, 0x66, 0x61, 0x64, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAccount))
		}
		if (zb0038Mask[0] & 0x4000000000000000) == 0 { // if not empty
			// string "faid"
			o = append(o, 0xa4, 0x66, 0x61, 0x69, 0x64)
			if (*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset)))
			}
			for zb0019 := range (*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset {
				o = (*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset[zb0019].MarshalMsg(o)
			}
		}
		if (zb0038Mask[0] & 0x8000000000000000) == 0 { // if not empty
			// string "faidbm"
			o = append(o, 0xa6, 0x66, 0x61, 0x69, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAsset))
		}
		if (zb0038Mask[1] & 0x1) == 0 { // if not empty
			// string "fbm"
			o = append(o, 0xa3, 0x66, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze))
		}
		if (zb0038Mask[1] & 0x2) == 0 { // if not empty
			// string "fee"
			o = append(o, 0xa3, 0x66, 0x65, 0x65)
			if (*z).encodedTxns.encodedTxnHeaders.Fee == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedTxnHeaders.Fee)))
			}
			for zb0003 := range (*z).encodedTxns.encodedTxnHeaders.Fee {
				o = (*z).encodedTxns.encodedTxnHeaders.Fee[zb0003].MarshalMsg(o)
			}
		}
		if (zb0038Mask[1] & 0x4) == 0 { // if not empty
			// string "feebm"
			o = append(o, 0xa5, 0x66, 0x65, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskFee))
		}
		if (zb0038Mask[1] & 0x8) == 0 { // if not empty
			// string "fv"
			o = append(o, 0xa2, 0x66, 0x76)
			if (*z).encodedTxns.encodedTxnHeaders.FirstValid == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedTxnHeaders.FirstValid)))
			}
			for zb0004 := range (*z).encodedTxns.encodedTxnHeaders.FirstValid {
				o = (*z).encodedTxns.encodedTxnHeaders.FirstValid[zb0004].MarshalMsg(o)
			}
		}
		if (zb0038Mask[1] & 0x10) == 0 { // if not empty
			// string "fvbm"
			o = append(o, 0xa4, 0x66, 0x76, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskFirstValid))
		}
		if (zb0038Mask[1] & 0x20) == 0 { // if not empty
			// string "gen"
			o = append(o, 0xa3, 0x67, 0x65, 0x6e)
			o = msgp.AppendString(o, (*z).encodedTxns.encodedTxnHeaders.GenesisID)
		}
		if (zb0038Mask[1] & 0x40) == 0 { // if not empty
			// string "genbm"
			o = append(o, 0xa5, 0x67, 0x65, 0x6e, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskGenesisID))
		}
		if (zb0038Mask[1] & 0x80) == 0 { // if not empty
			// string "gh"
			o = append(o, 0xa2, 0x67, 0x68)
			o = (*z).encodedTxns.encodedTxnHeaders.GenesisHash.MarshalMsg(o)
		}
		if (zb0038Mask[1] & 0x100) == 0 { // if not empty
			// string "ghbm"
			o = append(o, 0xa4, 0x67, 0x68, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskGenesisHash))
		}
		if (zb0038Mask[1] & 0x200) == 0 { // if not empty
			// string "gnbs"
			o = append(o, 0xa4, 0x67, 0x6e, 0x62, 0x73)
			if (*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice)))
			}
			for zb0032 := range (*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice {
				o = msgp.AppendUint64(o, (*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice[zb0032])
			}
		}
		if (zb0038Mask[1] & 0x400) == 0 { // if not empty
			// string "gnbsbm"
			o = append(o, 0xa6, 0x67, 0x6e, 0x62, 0x73, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice))
		}
		if (zb0038Mask[1] & 0x800) == 0 { // if not empty
			// string "gnui"
			o = append(o, 0xa4, 0x67, 0x6e, 0x75, 0x69)
			if (*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint)))
			}
			for zb0031 := range (*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint {
				o = msgp.AppendUint64(o, (*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint[zb0031])
			}
		}
		if (zb0038Mask[1] & 0x1000) == 0 { // if not empty
			// string "gnuibm"
			o = append(o, 0xa6, 0x67, 0x6e, 0x75, 0x69, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumUint))
		}
		if (zb0038Mask[1] & 0x2000) == 0 { // if not empty
			// string "grpbm"
			o = append(o, 0xa5, 0x67, 0x72, 0x70, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskGroup))
		}
		if (zb0038Mask[1] & 0x4000) == 0 { // if not empty
			// string "lnbs"
			o = append(o, 0xa4, 0x6c, 0x6e, 0x62, 0x73)
			if (*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice)))
			}
			for zb0030 := range (*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice {
				o = msgp.AppendUint64(o, (*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice[zb0030])
			}
		}
		if (zb0038Mask[1] & 0x8000) == 0 { // if not empty
			// string "lnbsbm"
			o = append(o, 0xa6, 0x6c, 0x6e, 0x62, 0x73, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice))
		}
		if (zb0038Mask[1] & 0x10000) == 0 { // if not empty
			// string "lnui"
			o = append(o, 0xa4, 0x6c, 0x6e, 0x75, 0x69)
			if (*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint)))
			}
			for zb0029 := range (*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint {
				o = msgp.AppendUint64(o, (*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint[zb0029])
			}
		}
		if (zb0038Mask[1] & 0x20000) == 0 { // if not empty
			// string "lnuibm"
			o = append(o, 0xa6, 0x6c, 0x6e, 0x75, 0x69, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumUint))
		}
		if (zb0038Mask[1] & 0x40000) == 0 { // if not empty
			// string "lsig"
			o = append(o, 0xa4, 0x6c, 0x73, 0x69, 0x67)
			if (*z).Lsig == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Lsig)))
			}
			for zb0002 := range (*z).Lsig {
				o = (*z).Lsig[zb0002].MarshalMsg(o)
			}
		}
		if (zb0038Mask[1] & 0x80000) == 0 { // if not empty
			// string "lsigbm"
			o = append(o, 0xa6, 0x6c, 0x73, 0x69, 0x67, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskLsig))
		}
		if (zb0038Mask[1] & 0x100000) == 0 { // if not empty
			// string "lv"
			o = append(o, 0xa2, 0x6c, 0x76)
			if (*z).encodedTxns.encodedTxnHeaders.LastValid == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedTxnHeaders.LastValid)))
			}
			for zb0005 := range (*z).encodedTxns.encodedTxnHeaders.LastValid {
				o = (*z).encodedTxns.encodedTxnHeaders.LastValid[zb0005].MarshalMsg(o)
			}
		}
		if (zb0038Mask[1] & 0x200000) == 0 { // if not empty
			// string "lvbm"
			o = append(o, 0xa4, 0x6c, 0x76, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskLastValid))
		}
		if (zb0038Mask[1] & 0x400000) == 0 { // if not empty
			// string "lx"
			o = append(o, 0xa2, 0x6c, 0x78)
			o = msgp.AppendBytes(o, (*z).encodedTxns.encodedTxnHeaders.Lease)
		}
		if (zb0038Mask[1] & 0x800000) == 0 { // if not empty
			// string "lxbm"
			o = append(o, 0xa4, 0x6c, 0x78, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskLease))
		}
		if (zb0038Mask[1] & 0x1000000) == 0 { // if not empty
			// string "m"
			o = append(o, 0xa1, 0x6d)
			o = msgp.AppendBytes(o, (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Manager)
		}
		if (zb0038Mask[1] & 0x2000000) == 0 { // if not empty
			// string "mbm"
			o = append(o, 0xa3, 0x6d, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager))
		}
		if (zb0038Mask[1] & 0x4000000) == 0 { // if not empty
			// string "msig"
			o = append(o, 0xa4, 0x6d, 0x73, 0x69, 0x67)
			if (*z).Msig == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Msig)))
			}
			for zb0001 := range (*z).Msig {
				o = (*z).Msig[zb0001].MarshalMsg(o)
			}
		}
		if (zb0038Mask[1] & 0x8000000) == 0 { // if not empty
			// string "msigbm"
			o = append(o, 0xa6, 0x6d, 0x73, 0x69, 0x67, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskMsig))
		}
		if (zb0038Mask[1] & 0x10000000) == 0 { // if not empty
			// string "nonpartbm"
			o = append(o, 0xa9, 0x6e, 0x6f, 0x6e, 0x70, 0x61, 0x72, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskNonparticipation))
		}
		if (zb0038Mask[1] & 0x20000000) == 0 { // if not empty
			// string "note"
			o = append(o, 0xa4, 0x6e, 0x6f, 0x74, 0x65)
			if (*z).encodedTxns.encodedTxnHeaders.Note == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedTxnHeaders.Note)))
			}
			for zb0006 := range (*z).encodedTxns.encodedTxnHeaders.Note {
				o = msgp.AppendBytes(o, (*z).encodedTxns.encodedTxnHeaders.Note[zb0006])
			}
		}
		if (zb0038Mask[1] & 0x40000000) == 0 { // if not empty
			// string "notebm"
			o = append(o, 0xa6, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskNote))
		}
		if (zb0038Mask[1] & 0x80000000) == 0 { // if not empty
			// string "r"
			o = append(o, 0xa1, 0x72)
			o = msgp.AppendBytes(o, (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Reserve)
		}
		if (zb0038Mask[1] & 0x100000000) == 0 { // if not empty
			// string "rbm"
			o = append(o, 0xa3, 0x72, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve))
		}
		if (zb0038Mask[1] & 0x200000000) == 0 { // if not empty
			// string "rcv"
			o = append(o, 0xa3, 0x72, 0x63, 0x76)
			o = msgp.AppendBytes(o, (*z).encodedTxns.encodedPaymentTxnFields.Receiver)
		}
		if (zb0038Mask[1] & 0x400000000) == 0 { // if not empty
			// string "rcvbm"
			o = append(o, 0xa5, 0x72, 0x63, 0x76, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedPaymentTxnFields.BitmaskReceiver))
		}
		if (zb0038Mask[1] & 0x800000000) == 0 { // if not empty
			// string "rekey"
			o = append(o, 0xa5, 0x72, 0x65, 0x6b, 0x65, 0x79)
			o = msgp.AppendBytes(o, (*z).encodedTxns.encodedTxnHeaders.RekeyTo)
		}
		if (zb0038Mask[1] & 0x1000000000) == 0 { // if not empty
			// string "rekeybm"
			o = append(o, 0xa7, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskRekeyTo))
		}
		if (zb0038Mask[1] & 0x2000000000) == 0 { // if not empty
			// string "selkey"
			o = append(o, 0xa6, 0x73, 0x65, 0x6c, 0x6b, 0x65, 0x79)
			o = msgp.AppendBytes(o, (*z).encodedTxns.encodedKeyregTxnFields.SelectionPK)
		}
		if (zb0038Mask[1] & 0x4000000000) == 0 { // if not empty
			// string "selkeybm"
			o = append(o, 0xa8, 0x73, 0x65, 0x6c, 0x6b, 0x65, 0x79, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskSelectionPK))
		}
		if (zb0038Mask[1] & 0x8000000000) == 0 { // if not empty
			// string "sgnr"
			o = append(o, 0xa4, 0x73, 0x67, 0x6e, 0x72)
			o = msgp.AppendBytes(o, (*z).AuthAddr)
		}
		if (zb0038Mask[1] & 0x10000000000) == 0 { // if not empty
			// string "sgnrbm"
			o = append(o, 0xa6, 0x73, 0x67, 0x6e, 0x72, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskAuthAddr))
		}
		if (zb0038Mask[1] & 0x20000000000) == 0 { // if not empty
			// string "sig"
			o = append(o, 0xa3, 0x73, 0x69, 0x67)
			o = msgp.AppendBytes(o, (*z).Sig)
		}
		if (zb0038Mask[1] & 0x40000000000) == 0 { // if not empty
			// string "sigbm"
			o = append(o, 0xa5, 0x73, 0x69, 0x67, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskSig))
		}
		if (zb0038Mask[1] & 0x80000000000) == 0 { // if not empty
			// string "snd"
			o = append(o, 0xa3, 0x73, 0x6e, 0x64)
			o = msgp.AppendBytes(o, (*z).encodedTxns.encodedTxnHeaders.Sender)
		}
		if (zb0038Mask[1] & 0x100000000000) == 0 { // if not empty
			// string "sndbm"
			o = append(o, 0xa5, 0x73, 0x6e, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskSender))
		}
		if (zb0038Mask[1] & 0x200000000000) == 0 { // if not empty
			// string "t"
			o = append(o, 0xa1, 0x74)
			if (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total)))
			}
			for zb0012 := range (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total {
				o = msgp.AppendUint64(o, (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total[zb0012])
			}
		}
		if (zb0038Mask[1] & 0x400000000000) == 0 { // if not empty
			// string "tbm"
			o = append(o, 0xa3, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal))
		}
		if (zb0038Mask[1] & 0x800000000000) == 0 { // if not empty
			// string "type"
			o = append(o, 0xa4, 0x74, 0x79, 0x70, 0x65)
			o = msgp.AppendBytes(o, (*z).encodedTxns.TxType)
		}
		if (zb0038Mask[1] & 0x1000000000000) == 0 { // if not empty
			// string "typebm"
			o = append(o, 0xa6, 0x74, 0x79, 0x70, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.BitmaskTxType))
		}
		if (zb0038Mask[1] & 0x2000000000000) == 0 { // if not empty
			// string "un"
			o = append(o, 0xa2, 0x75, 0x6e)
			if (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName)))
			}
			for zb0014 := range (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName {
				o = msgp.AppendString(o, (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName[zb0014])
			}
		}
		if (zb0038Mask[1] & 0x4000000000000) == 0 { // if not empty
			// string "unbm"
			o = append(o, 0xa4, 0x75, 0x6e, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName))
		}
		if (zb0038Mask[1] & 0x8000000000000) == 0 { // if not empty
			// string "votefst"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x66, 0x73, 0x74)
			if (*z).encodedTxns.encodedKeyregTxnFields.VoteFirst == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedKeyregTxnFields.VoteFirst)))
			}
			for zb0007 := range (*z).encodedTxns.encodedKeyregTxnFields.VoteFirst {
				o = (*z).encodedTxns.encodedKeyregTxnFields.VoteFirst[zb0007].MarshalMsg(o)
			}
		}
		if (zb0038Mask[1] & 0x10000000000000) == 0 { // if not empty
			// string "votefstbm"
			o = append(o, 0xa9, 0x76, 0x6f, 0x74, 0x65, 0x66, 0x73, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteFirst))
		}
		if (zb0038Mask[1] & 0x20000000000000) == 0 { // if not empty
			// string "votekd"
			o = append(o, 0xa6, 0x76, 0x6f, 0x74, 0x65, 0x6b, 0x64)
			if (*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution)))
			}
			for zb0009 := range (*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution {
				o = msgp.AppendUint64(o, (*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution[zb0009])
			}
		}
		if (zb0038Mask[1] & 0x40000000000000) == 0 { // if not empty
			// string "votekdbm"
			o = append(o, 0xa8, 0x76, 0x6f, 0x74, 0x65, 0x6b, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteKeyDilution))
		}
		if (zb0038Mask[1] & 0x80000000000000) == 0 { // if not empty
			// string "votekey"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x6b, 0x65, 0x79)
			o = msgp.AppendBytes(o, (*z).encodedTxns.encodedKeyregTxnFields.VotePK)
		}
		if (zb0038Mask[1] & 0x100000000000000) == 0 { // if not empty
			// string "votekeybm"
			o = append(o, 0xa9, 0x76, 0x6f, 0x74, 0x65, 0x6b, 0x65, 0x79, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVotePK))
		}
		if (zb0038Mask[1] & 0x200000000000000) == 0 { // if not empty
			// string "votelst"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x6c, 0x73, 0x74)
			if (*z).encodedTxns.encodedKeyregTxnFields.VoteLast == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedKeyregTxnFields.VoteLast)))
			}
			for zb0008 := range (*z).encodedTxns.encodedKeyregTxnFields.VoteLast {
				o = (*z).encodedTxns.encodedKeyregTxnFields.VoteLast[zb0008].MarshalMsg(o)
			}
		}
		if (zb0038Mask[1] & 0x400000000000000) == 0 { // if not empty
			// string "votelstbm"
			o = append(o, 0xa9, 0x76, 0x6f, 0x74, 0x65, 0x6c, 0x73, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteLast))
		}
		if (zb0038Mask[1] & 0x800000000000000) == 0 { // if not empty
			// string "xaid"
			o = append(o, 0xa4, 0x78, 0x61, 0x69, 0x64)
			if (*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset)))
			}
			for zb0017 := range (*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset {
				o = (*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset[zb0017].MarshalMsg(o)
			}
		}
		if (zb0038Mask[1] & 0x1000000000000000) == 0 { // if not empty
			// string "xaidbm"
			o = append(o, 0xa6, 0x78, 0x61, 0x69, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskXferAsset))
		}
	}
	return
}

func (_ *encodedSignedTxns) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedSignedTxns)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *encodedSignedTxns) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0038 int
	var zb0039 bool
	zb0038, zb0039, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0038, zb0039, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0038 > 0 {
			zb0038--
			var zb0040 int
			zb0040, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Sig")
				return
			}
			if zb0040 > maxSignatureBytes {
				err = msgp.ErrOverflow(uint64(zb0040), uint64(maxSignatureBytes))
				return
			}
			(*z).Sig, bts, err = msgp.ReadBytesBytes(bts, (*z).Sig)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Sig")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0041 []byte
				var zb0042 int
				zb0042, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskSig")
					return
				}
				if zb0042 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0042), uint64(maxBitmaskSize))
					return
				}
				zb0041, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskSig))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskSig")
					return
				}
				(*z).BitmaskSig = bitmask(zb0041)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0043 int
			var zb0044 bool
			zb0043, zb0044, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Msig")
				return
			}
			if zb0043 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0043), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Msig")
				return
			}
			if zb0044 {
				(*z).Msig = nil
			} else if (*z).Msig != nil && cap((*z).Msig) >= zb0043 {
				(*z).Msig = ((*z).Msig)[:zb0043]
			} else {
				(*z).Msig = make([]crypto.MultisigSig, zb0043)
			}
			for zb0001 := range (*z).Msig {
				bts, err = (*z).Msig[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Msig", zb0001)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0045 []byte
				var zb0046 int
				zb0046, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskMsig")
					return
				}
				if zb0046 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0046), uint64(maxBitmaskSize))
					return
				}
				zb0045, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskMsig))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskMsig")
					return
				}
				(*z).BitmaskMsig = bitmask(zb0045)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0047 int
			var zb0048 bool
			zb0047, zb0048, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Lsig")
				return
			}
			if zb0047 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0047), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Lsig")
				return
			}
			if zb0048 {
				(*z).Lsig = nil
			} else if (*z).Lsig != nil && cap((*z).Lsig) >= zb0047 {
				(*z).Lsig = ((*z).Lsig)[:zb0047]
			} else {
				(*z).Lsig = make([]transactions.LogicSig, zb0047)
			}
			for zb0002 := range (*z).Lsig {
				bts, err = (*z).Lsig[zb0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Lsig", zb0002)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0049 []byte
				var zb0050 int
				zb0050, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLsig")
					return
				}
				if zb0050 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0050), uint64(maxBitmaskSize))
					return
				}
				zb0049, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskLsig))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLsig")
					return
				}
				(*z).BitmaskLsig = bitmask(zb0049)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0051 int
			zb0051, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AuthAddr")
				return
			}
			if zb0051 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0051), uint64(maxAddressBytes))
				return
			}
			(*z).AuthAddr, bts, err = msgp.ReadBytesBytes(bts, (*z).AuthAddr)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AuthAddr")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0052 []byte
				var zb0053 int
				zb0053, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAuthAddr")
					return
				}
				if zb0053 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0053), uint64(maxBitmaskSize))
					return
				}
				zb0052, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskAuthAddr))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAuthAddr")
					return
				}
				(*z).BitmaskAuthAddr = bitmask(zb0052)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0054 int
			zb0054, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TxType")
				return
			}
			if zb0054 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0054), uint64(maxEncodedTransactionGroup))
				return
			}
			(*z).encodedTxns.TxType, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.TxType)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TxType")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0055 []byte
				var zb0056 int
				zb0056, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskTxType")
					return
				}
				if zb0056 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0056), uint64(maxBitmaskSize))
					return
				}
				zb0055, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.BitmaskTxType))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskTxType")
					return
				}
				(*z).encodedTxns.BitmaskTxType = bitmask(zb0055)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0057 int
			zb0057, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Sender")
				return
			}
			if zb0057 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0057), uint64(maxAddressBytes))
				return
			}
			(*z).encodedTxns.encodedTxnHeaders.Sender, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedTxnHeaders.Sender)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Sender")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0058 []byte
				var zb0059 int
				zb0059, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskSender")
					return
				}
				if zb0059 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0059), uint64(maxBitmaskSize))
					return
				}
				zb0058, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskSender))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskSender")
					return
				}
				(*z).encodedTxns.encodedTxnHeaders.BitmaskSender = bitmask(zb0058)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0060 int
			var zb0061 bool
			zb0060, zb0061, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Fee")
				return
			}
			if zb0060 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0060), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Fee")
				return
			}
			if zb0061 {
				(*z).encodedTxns.encodedTxnHeaders.Fee = nil
			} else if (*z).encodedTxns.encodedTxnHeaders.Fee != nil && cap((*z).encodedTxns.encodedTxnHeaders.Fee) >= zb0060 {
				(*z).encodedTxns.encodedTxnHeaders.Fee = ((*z).encodedTxns.encodedTxnHeaders.Fee)[:zb0060]
			} else {
				(*z).encodedTxns.encodedTxnHeaders.Fee = make([]basics.MicroAlgos, zb0060)
			}
			for zb0003 := range (*z).encodedTxns.encodedTxnHeaders.Fee {
				bts, err = (*z).encodedTxns.encodedTxnHeaders.Fee[zb0003].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Fee", zb0003)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0062 []byte
				var zb0063 int
				zb0063, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFee")
					return
				}
				if zb0063 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0063), uint64(maxBitmaskSize))
					return
				}
				zb0062, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskFee))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFee")
					return
				}
				(*z).encodedTxns.encodedTxnHeaders.BitmaskFee = bitmask(zb0062)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0064 int
			var zb0065 bool
			zb0064, zb0065, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FirstValid")
				return
			}
			if zb0064 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0064), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "FirstValid")
				return
			}
			if zb0065 {
				(*z).encodedTxns.encodedTxnHeaders.FirstValid = nil
			} else if (*z).encodedTxns.encodedTxnHeaders.FirstValid != nil && cap((*z).encodedTxns.encodedTxnHeaders.FirstValid) >= zb0064 {
				(*z).encodedTxns.encodedTxnHeaders.FirstValid = ((*z).encodedTxns.encodedTxnHeaders.FirstValid)[:zb0064]
			} else {
				(*z).encodedTxns.encodedTxnHeaders.FirstValid = make([]basics.Round, zb0064)
			}
			for zb0004 := range (*z).encodedTxns.encodedTxnHeaders.FirstValid {
				bts, err = (*z).encodedTxns.encodedTxnHeaders.FirstValid[zb0004].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "FirstValid", zb0004)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0066 []byte
				var zb0067 int
				zb0067, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFirstValid")
					return
				}
				if zb0067 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0067), uint64(maxBitmaskSize))
					return
				}
				zb0066, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskFirstValid))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFirstValid")
					return
				}
				(*z).encodedTxns.encodedTxnHeaders.BitmaskFirstValid = bitmask(zb0066)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0068 int
			var zb0069 bool
			zb0068, zb0069, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LastValid")
				return
			}
			if zb0068 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0068), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "LastValid")
				return
			}
			if zb0069 {
				(*z).encodedTxns.encodedTxnHeaders.LastValid = nil
			} else if (*z).encodedTxns.encodedTxnHeaders.LastValid != nil && cap((*z).encodedTxns.encodedTxnHeaders.LastValid) >= zb0068 {
				(*z).encodedTxns.encodedTxnHeaders.LastValid = ((*z).encodedTxns.encodedTxnHeaders.LastValid)[:zb0068]
			} else {
				(*z).encodedTxns.encodedTxnHeaders.LastValid = make([]basics.Round, zb0068)
			}
			for zb0005 := range (*z).encodedTxns.encodedTxnHeaders.LastValid {
				bts, err = (*z).encodedTxns.encodedTxnHeaders.LastValid[zb0005].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "LastValid", zb0005)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0070 []byte
				var zb0071 int
				zb0071, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLastValid")
					return
				}
				if zb0071 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0071), uint64(maxBitmaskSize))
					return
				}
				zb0070, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskLastValid))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLastValid")
					return
				}
				(*z).encodedTxns.encodedTxnHeaders.BitmaskLastValid = bitmask(zb0070)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0072 int
			var zb0073 bool
			zb0072, zb0073, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Note")
				return
			}
			if zb0072 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0072), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Note")
				return
			}
			if zb0073 {
				(*z).encodedTxns.encodedTxnHeaders.Note = nil
			} else if (*z).encodedTxns.encodedTxnHeaders.Note != nil && cap((*z).encodedTxns.encodedTxnHeaders.Note) >= zb0072 {
				(*z).encodedTxns.encodedTxnHeaders.Note = ((*z).encodedTxns.encodedTxnHeaders.Note)[:zb0072]
			} else {
				(*z).encodedTxns.encodedTxnHeaders.Note = make([][]byte, zb0072)
			}
			for zb0006 := range (*z).encodedTxns.encodedTxnHeaders.Note {
				(*z).encodedTxns.encodedTxnHeaders.Note[zb0006], bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedTxnHeaders.Note[zb0006])
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Note", zb0006)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0074 []byte
				var zb0075 int
				zb0075, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskNote")
					return
				}
				if zb0075 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0075), uint64(maxBitmaskSize))
					return
				}
				zb0074, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskNote))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskNote")
					return
				}
				(*z).encodedTxns.encodedTxnHeaders.BitmaskNote = bitmask(zb0074)
			}
		}
		if zb0038 > 0 {
			zb0038--
			(*z).encodedTxns.encodedTxnHeaders.GenesisID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GenesisID")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0076 []byte
				var zb0077 int
				zb0077, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGenesisID")
					return
				}
				if zb0077 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0077), uint64(maxBitmaskSize))
					return
				}
				zb0076, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskGenesisID))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGenesisID")
					return
				}
				(*z).encodedTxns.encodedTxnHeaders.BitmaskGenesisID = bitmask(zb0076)
			}
		}
		if zb0038 > 0 {
			zb0038--
			bts, err = (*z).encodedTxns.encodedTxnHeaders.GenesisHash.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GenesisHash")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0078 []byte
				var zb0079 int
				zb0079, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGenesisHash")
					return
				}
				if zb0079 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0079), uint64(maxBitmaskSize))
					return
				}
				zb0078, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskGenesisHash))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGenesisHash")
					return
				}
				(*z).encodedTxns.encodedTxnHeaders.BitmaskGenesisHash = bitmask(zb0078)
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0080 []byte
				var zb0081 int
				zb0081, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGroup")
					return
				}
				if zb0081 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0081), uint64(maxBitmaskSize))
					return
				}
				zb0080, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskGroup))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGroup")
					return
				}
				(*z).encodedTxns.encodedTxnHeaders.BitmaskGroup = bitmask(zb0080)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0082 int
			zb0082, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Lease")
				return
			}
			if zb0082 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0082), uint64(maxAddressBytes))
				return
			}
			(*z).encodedTxns.encodedTxnHeaders.Lease, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedTxnHeaders.Lease)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Lease")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0083 []byte
				var zb0084 int
				zb0084, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLease")
					return
				}
				if zb0084 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0084), uint64(maxBitmaskSize))
					return
				}
				zb0083, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskLease))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLease")
					return
				}
				(*z).encodedTxns.encodedTxnHeaders.BitmaskLease = bitmask(zb0083)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0085 int
			zb0085, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RekeyTo")
				return
			}
			if zb0085 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0085), uint64(maxAddressBytes))
				return
			}
			(*z).encodedTxns.encodedTxnHeaders.RekeyTo, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedTxnHeaders.RekeyTo)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RekeyTo")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0086 []byte
				var zb0087 int
				zb0087, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskRekeyTo")
					return
				}
				if zb0087 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0087), uint64(maxBitmaskSize))
					return
				}
				zb0086, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskRekeyTo))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskRekeyTo")
					return
				}
				(*z).encodedTxns.encodedTxnHeaders.BitmaskRekeyTo = bitmask(zb0086)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0088 int
			zb0088, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VotePK")
				return
			}
			if zb0088 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0088), uint64(maxAddressBytes))
				return
			}
			(*z).encodedTxns.encodedKeyregTxnFields.VotePK, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedKeyregTxnFields.VotePK)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VotePK")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0089 []byte
				var zb0090 int
				zb0090, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVotePK")
					return
				}
				if zb0090 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0090), uint64(maxBitmaskSize))
					return
				}
				zb0089, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVotePK))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVotePK")
					return
				}
				(*z).encodedTxns.encodedKeyregTxnFields.BitmaskVotePK = bitmask(zb0089)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0091 int
			zb0091, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SelectionPK")
				return
			}
			if zb0091 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0091), uint64(maxAddressBytes))
				return
			}
			(*z).encodedTxns.encodedKeyregTxnFields.SelectionPK, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedKeyregTxnFields.SelectionPK)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SelectionPK")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0092 []byte
				var zb0093 int
				zb0093, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskSelectionPK")
					return
				}
				if zb0093 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0093), uint64(maxBitmaskSize))
					return
				}
				zb0092, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskSelectionPK))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskSelectionPK")
					return
				}
				(*z).encodedTxns.encodedKeyregTxnFields.BitmaskSelectionPK = bitmask(zb0092)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0094 int
			var zb0095 bool
			zb0094, zb0095, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteFirst")
				return
			}
			if zb0094 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0094), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "VoteFirst")
				return
			}
			if zb0095 {
				(*z).encodedTxns.encodedKeyregTxnFields.VoteFirst = nil
			} else if (*z).encodedTxns.encodedKeyregTxnFields.VoteFirst != nil && cap((*z).encodedTxns.encodedKeyregTxnFields.VoteFirst) >= zb0094 {
				(*z).encodedTxns.encodedKeyregTxnFields.VoteFirst = ((*z).encodedTxns.encodedKeyregTxnFields.VoteFirst)[:zb0094]
			} else {
				(*z).encodedTxns.encodedKeyregTxnFields.VoteFirst = make([]basics.Round, zb0094)
			}
			for zb0007 := range (*z).encodedTxns.encodedKeyregTxnFields.VoteFirst {
				bts, err = (*z).encodedTxns.encodedKeyregTxnFields.VoteFirst[zb0007].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "VoteFirst", zb0007)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0096 []byte
				var zb0097 int
				zb0097, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteFirst")
					return
				}
				if zb0097 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0097), uint64(maxBitmaskSize))
					return
				}
				zb0096, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteFirst))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteFirst")
					return
				}
				(*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteFirst = bitmask(zb0096)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0098 int
			var zb0099 bool
			zb0098, zb0099, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteLast")
				return
			}
			if zb0098 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0098), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "VoteLast")
				return
			}
			if zb0099 {
				(*z).encodedTxns.encodedKeyregTxnFields.VoteLast = nil
			} else if (*z).encodedTxns.encodedKeyregTxnFields.VoteLast != nil && cap((*z).encodedTxns.encodedKeyregTxnFields.VoteLast) >= zb0098 {
				(*z).encodedTxns.encodedKeyregTxnFields.VoteLast = ((*z).encodedTxns.encodedKeyregTxnFields.VoteLast)[:zb0098]
			} else {
				(*z).encodedTxns.encodedKeyregTxnFields.VoteLast = make([]basics.Round, zb0098)
			}
			for zb0008 := range (*z).encodedTxns.encodedKeyregTxnFields.VoteLast {
				bts, err = (*z).encodedTxns.encodedKeyregTxnFields.VoteLast[zb0008].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "VoteLast", zb0008)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0100 []byte
				var zb0101 int
				zb0101, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteLast")
					return
				}
				if zb0101 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0101), uint64(maxBitmaskSize))
					return
				}
				zb0100, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteLast))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteLast")
					return
				}
				(*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteLast = bitmask(zb0100)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0102 int
			var zb0103 bool
			zb0102, zb0103, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteKeyDilution")
				return
			}
			if zb0102 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0102), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "VoteKeyDilution")
				return
			}
			if zb0103 {
				(*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution = nil
			} else if (*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution != nil && cap((*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution) >= zb0102 {
				(*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution = ((*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution)[:zb0102]
			} else {
				(*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution = make([]uint64, zb0102)
			}
			for zb0009 := range (*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution {
				(*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution[zb0009], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "VoteKeyDilution", zb0009)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0104 []byte
				var zb0105 int
				zb0105, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteKeyDilution")
					return
				}
				if zb0105 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0105), uint64(maxBitmaskSize))
					return
				}
				zb0104, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteKeyDilution))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteKeyDilution")
					return
				}
				(*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteKeyDilution = bitmask(zb0104)
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0106 []byte
				var zb0107 int
				zb0107, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskNonparticipation")
					return
				}
				if zb0107 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0107), uint64(maxBitmaskSize))
					return
				}
				zb0106, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskNonparticipation))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskNonparticipation")
					return
				}
				(*z).encodedTxns.encodedKeyregTxnFields.BitmaskNonparticipation = bitmask(zb0106)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0108 int
			zb0108, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Receiver")
				return
			}
			if zb0108 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0108), uint64(maxAddressBytes))
				return
			}
			(*z).encodedTxns.encodedPaymentTxnFields.Receiver, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedPaymentTxnFields.Receiver)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Receiver")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0109 []byte
				var zb0110 int
				zb0110, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskReceiver")
					return
				}
				if zb0110 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0110), uint64(maxBitmaskSize))
					return
				}
				zb0109, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedPaymentTxnFields.BitmaskReceiver))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskReceiver")
					return
				}
				(*z).encodedTxns.encodedPaymentTxnFields.BitmaskReceiver = bitmask(zb0109)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0111 int
			var zb0112 bool
			zb0111, zb0112, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Amount")
				return
			}
			if zb0111 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0111), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Amount")
				return
			}
			if zb0112 {
				(*z).encodedTxns.encodedPaymentTxnFields.Amount = nil
			} else if (*z).encodedTxns.encodedPaymentTxnFields.Amount != nil && cap((*z).encodedTxns.encodedPaymentTxnFields.Amount) >= zb0111 {
				(*z).encodedTxns.encodedPaymentTxnFields.Amount = ((*z).encodedTxns.encodedPaymentTxnFields.Amount)[:zb0111]
			} else {
				(*z).encodedTxns.encodedPaymentTxnFields.Amount = make([]basics.MicroAlgos, zb0111)
			}
			for zb0010 := range (*z).encodedTxns.encodedPaymentTxnFields.Amount {
				bts, err = (*z).encodedTxns.encodedPaymentTxnFields.Amount[zb0010].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Amount", zb0010)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0113 []byte
				var zb0114 int
				zb0114, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAmount")
					return
				}
				if zb0114 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0114), uint64(maxBitmaskSize))
					return
				}
				zb0113, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedPaymentTxnFields.BitmaskAmount))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAmount")
					return
				}
				(*z).encodedTxns.encodedPaymentTxnFields.BitmaskAmount = bitmask(zb0113)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0115 int
			zb0115, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CloseRemainderTo")
				return
			}
			if zb0115 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0115), uint64(maxAddressBytes))
				return
			}
			(*z).encodedTxns.encodedPaymentTxnFields.CloseRemainderTo, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedPaymentTxnFields.CloseRemainderTo)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CloseRemainderTo")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0116 []byte
				var zb0117 int
				zb0117, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCloseRemainderTo")
					return
				}
				if zb0117 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0117), uint64(maxBitmaskSize))
					return
				}
				zb0116, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedPaymentTxnFields.BitmaskCloseRemainderTo))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCloseRemainderTo")
					return
				}
				(*z).encodedTxns.encodedPaymentTxnFields.BitmaskCloseRemainderTo = bitmask(zb0116)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0118 int
			var zb0119 bool
			zb0118, zb0119, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ConfigAsset")
				return
			}
			if zb0118 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0118), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ConfigAsset")
				return
			}
			if zb0119 {
				(*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset = nil
			} else if (*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset != nil && cap((*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset) >= zb0118 {
				(*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset = ((*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset)[:zb0118]
			} else {
				(*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset = make([]basics.AssetIndex, zb0118)
			}
			for zb0011 := range (*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset {
				bts, err = (*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset[zb0011].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ConfigAsset", zb0011)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0120 []byte
				var zb0121 int
				zb0121, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskConfigAsset")
					return
				}
				if zb0121 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0121), uint64(maxBitmaskSize))
					return
				}
				zb0120, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.BitmaskConfigAsset))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskConfigAsset")
					return
				}
				(*z).encodedTxns.encodedAssetConfigTxnFields.BitmaskConfigAsset = bitmask(zb0120)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0122 int
			var zb0123 bool
			zb0122, zb0123, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Total")
				return
			}
			if zb0122 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0122), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Total")
				return
			}
			if zb0123 {
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total = nil
			} else if (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total != nil && cap((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total) >= zb0122 {
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total = ((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total)[:zb0122]
			} else {
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total = make([]uint64, zb0122)
			}
			for zb0012 := range (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total {
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total[zb0012], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Total", zb0012)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0124 []byte
				var zb0125 int
				zb0125, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskTotal")
					return
				}
				if zb0125 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0125), uint64(maxBitmaskSize))
					return
				}
				zb0124, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskTotal")
					return
				}
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal = bitmask(zb0124)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0126 int
			var zb0127 bool
			zb0126, zb0127, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Decimals")
				return
			}
			if zb0126 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0126), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Decimals")
				return
			}
			if zb0127 {
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals = nil
			} else if (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals != nil && cap((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals) >= zb0126 {
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals = ((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals)[:zb0126]
			} else {
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals = make([]uint32, zb0126)
			}
			for zb0013 := range (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals {
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals[zb0013], bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Decimals", zb0013)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0128 []byte
				var zb0129 int
				zb0129, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskDecimals")
					return
				}
				if zb0129 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0129), uint64(maxBitmaskSize))
					return
				}
				zb0128, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskDecimals")
					return
				}
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals = bitmask(zb0128)
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0130 []byte
				var zb0131 int
				zb0131, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskDefaultFrozen")
					return
				}
				if zb0131 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0131), uint64(maxBitmaskSize))
					return
				}
				zb0130, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskDefaultFrozen")
					return
				}
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen = bitmask(zb0130)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0132 int
			var zb0133 bool
			zb0132, zb0133, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "UnitName")
				return
			}
			if zb0132 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0132), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "UnitName")
				return
			}
			if zb0133 {
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName = nil
			} else if (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName != nil && cap((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName) >= zb0132 {
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName = ((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName)[:zb0132]
			} else {
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName = make([]string, zb0132)
			}
			for zb0014 := range (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName {
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName[zb0014], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "UnitName", zb0014)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0134 []byte
				var zb0135 int
				zb0135, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskUnitName")
					return
				}
				if zb0135 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0135), uint64(maxBitmaskSize))
					return
				}
				zb0134, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskUnitName")
					return
				}
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName = bitmask(zb0134)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0136 int
			var zb0137 bool
			zb0136, zb0137, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetName")
				return
			}
			if zb0136 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0136), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "AssetName")
				return
			}
			if zb0137 {
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName = nil
			} else if (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName != nil && cap((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName) >= zb0136 {
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName = ((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName)[:zb0136]
			} else {
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName = make([]string, zb0136)
			}
			for zb0015 := range (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName {
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName[zb0015], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AssetName", zb0015)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0138 []byte
				var zb0139 int
				zb0139, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetName")
					return
				}
				if zb0139 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0139), uint64(maxBitmaskSize))
					return
				}
				zb0138, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetName")
					return
				}
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName = bitmask(zb0138)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0140 int
			var zb0141 bool
			zb0140, zb0141, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "URL")
				return
			}
			if zb0140 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0140), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "URL")
				return
			}
			if zb0141 {
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL = nil
			} else if (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL != nil && cap((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL) >= zb0140 {
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL = ((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL)[:zb0140]
			} else {
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL = make([]string, zb0140)
			}
			for zb0016 := range (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL {
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL[zb0016], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "URL", zb0016)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0142 []byte
				var zb0143 int
				zb0143, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskURL")
					return
				}
				if zb0143 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0143), uint64(maxBitmaskSize))
					return
				}
				zb0142, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskURL")
					return
				}
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL = bitmask(zb0142)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0144 int
			zb0144, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MetadataHash")
				return
			}
			if zb0144 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0144), uint64(maxAddressBytes))
				return
			}
			(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MetadataHash")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0145 []byte
				var zb0146 int
				zb0146, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskMetadataHash")
					return
				}
				if zb0146 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0146), uint64(maxBitmaskSize))
					return
				}
				zb0145, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskMetadataHash")
					return
				}
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash = bitmask(zb0145)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0147 int
			zb0147, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Manager")
				return
			}
			if zb0147 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0147), uint64(maxAddressBytes))
				return
			}
			(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Manager, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Manager)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Manager")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0148 []byte
				var zb0149 int
				zb0149, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskManager")
					return
				}
				if zb0149 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0149), uint64(maxBitmaskSize))
					return
				}
				zb0148, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskManager")
					return
				}
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager = bitmask(zb0148)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0150 int
			zb0150, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Reserve")
				return
			}
			if zb0150 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0150), uint64(maxAddressBytes))
				return
			}
			(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Reserve, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Reserve)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Reserve")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0151 []byte
				var zb0152 int
				zb0152, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskReserve")
					return
				}
				if zb0152 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0152), uint64(maxBitmaskSize))
					return
				}
				zb0151, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskReserve")
					return
				}
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve = bitmask(zb0151)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0153 int
			zb0153, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Freeze")
				return
			}
			if zb0153 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0153), uint64(maxAddressBytes))
				return
			}
			(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Freeze, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Freeze)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Freeze")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0154 []byte
				var zb0155 int
				zb0155, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreeze")
					return
				}
				if zb0155 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0155), uint64(maxBitmaskSize))
					return
				}
				zb0154, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreeze")
					return
				}
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze = bitmask(zb0154)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0156 int
			zb0156, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Clawback")
				return
			}
			if zb0156 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0156), uint64(maxAddressBytes))
				return
			}
			(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Clawback, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Clawback)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Clawback")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0157 []byte
				var zb0158 int
				zb0158, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskClawback")
					return
				}
				if zb0158 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0158), uint64(maxBitmaskSize))
					return
				}
				zb0157, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskClawback")
					return
				}
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback = bitmask(zb0157)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0159 int
			var zb0160 bool
			zb0159, zb0160, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "XferAsset")
				return
			}
			if zb0159 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0159), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "XferAsset")
				return
			}
			if zb0160 {
				(*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset = nil
			} else if (*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset != nil && cap((*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset) >= zb0159 {
				(*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset = ((*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset)[:zb0159]
			} else {
				(*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset = make([]basics.AssetIndex, zb0159)
			}
			for zb0017 := range (*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset {
				bts, err = (*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset[zb0017].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "XferAsset", zb0017)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0161 []byte
				var zb0162 int
				zb0162, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskXferAsset")
					return
				}
				if zb0162 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0162), uint64(maxBitmaskSize))
					return
				}
				zb0161, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskXferAsset))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskXferAsset")
					return
				}
				(*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskXferAsset = bitmask(zb0161)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0163 int
			var zb0164 bool
			zb0163, zb0164, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetAmount")
				return
			}
			if zb0163 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0163), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "AssetAmount")
				return
			}
			if zb0164 {
				(*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount = nil
			} else if (*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount != nil && cap((*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount) >= zb0163 {
				(*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount = ((*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount)[:zb0163]
			} else {
				(*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount = make([]uint64, zb0163)
			}
			for zb0018 := range (*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount {
				(*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount[zb0018], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AssetAmount", zb0018)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0165 []byte
				var zb0166 int
				zb0166, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetAmount")
					return
				}
				if zb0166 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0166), uint64(maxBitmaskSize))
					return
				}
				zb0165, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetAmount))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetAmount")
					return
				}
				(*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetAmount = bitmask(zb0165)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0167 int
			zb0167, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetSender")
				return
			}
			if zb0167 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0167), uint64(maxAddressBytes))
				return
			}
			(*z).encodedTxns.encodedAssetTransferTxnFields.AssetSender, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedAssetTransferTxnFields.AssetSender)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetSender")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0168 []byte
				var zb0169 int
				zb0169, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetSender")
					return
				}
				if zb0169 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0169), uint64(maxBitmaskSize))
					return
				}
				zb0168, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetSender))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetSender")
					return
				}
				(*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetSender = bitmask(zb0168)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0170 int
			zb0170, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetReceiver")
				return
			}
			if zb0170 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0170), uint64(maxAddressBytes))
				return
			}
			(*z).encodedTxns.encodedAssetTransferTxnFields.AssetReceiver, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedAssetTransferTxnFields.AssetReceiver)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetReceiver")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0171 []byte
				var zb0172 int
				zb0172, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetReceiver")
					return
				}
				if zb0172 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0172), uint64(maxBitmaskSize))
					return
				}
				zb0171, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetReceiver))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetReceiver")
					return
				}
				(*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetReceiver = bitmask(zb0171)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0173 int
			zb0173, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetCloseTo")
				return
			}
			if zb0173 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0173), uint64(maxAddressBytes))
				return
			}
			(*z).encodedTxns.encodedAssetTransferTxnFields.AssetCloseTo, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedAssetTransferTxnFields.AssetCloseTo)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetCloseTo")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0174 []byte
				var zb0175 int
				zb0175, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetCloseTo")
					return
				}
				if zb0175 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0175), uint64(maxBitmaskSize))
					return
				}
				zb0174, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetCloseTo))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetCloseTo")
					return
				}
				(*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetCloseTo = bitmask(zb0174)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0176 int
			zb0176, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FreezeAccount")
				return
			}
			if zb0176 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0176), uint64(maxAddressBytes))
				return
			}
			(*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAccount, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAccount)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FreezeAccount")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0177 []byte
				var zb0178 int
				zb0178, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreezeAccount")
					return
				}
				if zb0178 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0178), uint64(maxBitmaskSize))
					return
				}
				zb0177, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAccount))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreezeAccount")
					return
				}
				(*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAccount = bitmask(zb0177)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0179 int
			var zb0180 bool
			zb0179, zb0180, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FreezeAsset")
				return
			}
			if zb0179 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0179), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "FreezeAsset")
				return
			}
			if zb0180 {
				(*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset = nil
			} else if (*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset != nil && cap((*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset) >= zb0179 {
				(*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset = ((*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset)[:zb0179]
			} else {
				(*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset = make([]basics.AssetIndex, zb0179)
			}
			for zb0019 := range (*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset {
				bts, err = (*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset[zb0019].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "FreezeAsset", zb0019)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0181 []byte
				var zb0182 int
				zb0182, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreezeAsset")
					return
				}
				if zb0182 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0182), uint64(maxBitmaskSize))
					return
				}
				zb0181, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAsset))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreezeAsset")
					return
				}
				(*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAsset = bitmask(zb0181)
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0183 []byte
				var zb0184 int
				zb0184, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetFrozen")
					return
				}
				if zb0184 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0184), uint64(maxBitmaskSize))
					return
				}
				zb0183, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskAssetFrozen))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetFrozen")
					return
				}
				(*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskAssetFrozen = bitmask(zb0183)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0185 int
			var zb0186 bool
			zb0185, zb0186, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApplicationID")
				return
			}
			if zb0185 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0185), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ApplicationID")
				return
			}
			if zb0186 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID = nil
			} else if (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID) >= zb0185 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID = ((*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID)[:zb0185]
			} else {
				(*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID = make([]basics.AppIndex, zb0185)
			}
			for zb0020 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID {
				bts, err = (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID[zb0020].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ApplicationID", zb0020)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0187 []byte
				var zb0188 int
				zb0188, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApplicationID")
					return
				}
				if zb0188 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0188), uint64(maxBitmaskSize))
					return
				}
				zb0187, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationID))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApplicationID")
					return
				}
				(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationID = bitmask(zb0187)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0189 int
			zb0189, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "OnCompletion")
				return
			}
			if zb0189 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0189), uint64(maxEncodedTransactionGroup))
				return
			}
			(*z).encodedTxns.encodedApplicationCallTxnFields.OnCompletion, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedApplicationCallTxnFields.OnCompletion)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "OnCompletion")
				return
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0190 []byte
				var zb0191 int
				zb0191, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskOnCompletion")
					return
				}
				if zb0191 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0191), uint64(maxBitmaskSize))
					return
				}
				zb0190, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskOnCompletion))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskOnCompletion")
					return
				}
				(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskOnCompletion = bitmask(zb0190)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0192 int
			var zb0193 bool
			zb0192, zb0193, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs")
				return
			}
			if zb0192 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0192), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs")
				return
			}
			if zb0193 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs = nil
			} else if (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs) >= zb0192 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs = ((*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs)[:zb0192]
			} else {
				(*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs = make([]applicationArgs, zb0192)
			}
			for zb0021 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs {
				var zb0194 int
				var zb0195 bool
				zb0194, zb0195, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs", zb0021)
					return
				}
				if zb0194 > transactions.EncodedMaxApplicationArgs {
					err = msgp.ErrOverflow(uint64(zb0194), uint64(transactions.EncodedMaxApplicationArgs))
					err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs", zb0021)
					return
				}
				if zb0195 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021] = nil
				} else if (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021] != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021]) >= zb0194 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021] = ((*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021])[:zb0194]
				} else {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021] = make(applicationArgs, zb0194)
				}
				for zb0022 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021] {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021][zb0022], bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021][zb0022])
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs", zb0021, zb0022)
						return
					}
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0196 []byte
				var zb0197 int
				zb0197, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApplicationArgs")
					return
				}
				if zb0197 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0197), uint64(maxBitmaskSize))
					return
				}
				zb0196, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationArgs))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApplicationArgs")
					return
				}
				(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationArgs = bitmask(zb0196)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0198 int
			var zb0199 bool
			zb0198, zb0199, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Accounts")
				return
			}
			if zb0198 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0198), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Accounts")
				return
			}
			if zb0199 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.Accounts = nil
			} else if (*z).encodedTxns.encodedApplicationCallTxnFields.Accounts != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.Accounts) >= zb0198 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.Accounts = ((*z).encodedTxns.encodedApplicationCallTxnFields.Accounts)[:zb0198]
			} else {
				(*z).encodedTxns.encodedApplicationCallTxnFields.Accounts = make([]addresses, zb0198)
			}
			for zb0023 := range (*z).encodedTxns.encodedApplicationCallTxnFields.Accounts {
				var zb0200 int
				var zb0201 bool
				zb0200, zb0201, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Accounts", zb0023)
					return
				}
				if zb0200 > transactions.EncodedMaxAccounts {
					err = msgp.ErrOverflow(uint64(zb0200), uint64(transactions.EncodedMaxAccounts))
					err = msgp.WrapError(err, "struct-from-array", "Accounts", zb0023)
					return
				}
				if zb0201 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023] = nil
				} else if (*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023] != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023]) >= zb0200 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023] = ((*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023])[:zb0200]
				} else {
					(*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023] = make(addresses, zb0200)
				}
				for zb0024 := range (*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023] {
					bts, err = (*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023][zb0024].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "Accounts", zb0023, zb0024)
						return
					}
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0202 []byte
				var zb0203 int
				zb0203, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAccounts")
					return
				}
				if zb0203 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0203), uint64(maxBitmaskSize))
					return
				}
				zb0202, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskAccounts))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAccounts")
					return
				}
				(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskAccounts = bitmask(zb0202)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0204 int
			var zb0205 bool
			zb0204, zb0205, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ForeignApps")
				return
			}
			if zb0204 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0204), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ForeignApps")
				return
			}
			if zb0205 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps = nil
			} else if (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps) >= zb0204 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps = ((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps)[:zb0204]
			} else {
				(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps = make([]appIndices, zb0204)
			}
			for zb0025 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps {
				var zb0206 int
				var zb0207 bool
				zb0206, zb0207, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ForeignApps", zb0025)
					return
				}
				if zb0206 > transactions.EncodedMaxForeignApps {
					err = msgp.ErrOverflow(uint64(zb0206), uint64(transactions.EncodedMaxForeignApps))
					err = msgp.WrapError(err, "struct-from-array", "ForeignApps", zb0025)
					return
				}
				if zb0207 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025] = nil
				} else if (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025] != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025]) >= zb0206 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025] = ((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025])[:zb0206]
				} else {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025] = make(appIndices, zb0206)
				}
				for zb0026 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025] {
					bts, err = (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025][zb0026].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ForeignApps", zb0025, zb0026)
						return
					}
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0208 []byte
				var zb0209 int
				zb0209, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskForeignApps")
					return
				}
				if zb0209 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0209), uint64(maxBitmaskSize))
					return
				}
				zb0208, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignApps))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskForeignApps")
					return
				}
				(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignApps = bitmask(zb0208)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0210 int
			var zb0211 bool
			zb0210, zb0211, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ForeignAssets")
				return
			}
			if zb0210 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0210), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ForeignAssets")
				return
			}
			if zb0211 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets = nil
			} else if (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets) >= zb0210 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets = ((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets)[:zb0210]
			} else {
				(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets = make([]assetIndices, zb0210)
			}
			for zb0027 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets {
				var zb0212 int
				var zb0213 bool
				zb0212, zb0213, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ForeignAssets", zb0027)
					return
				}
				if zb0212 > transactions.EncodedMaxForeignAssets {
					err = msgp.ErrOverflow(uint64(zb0212), uint64(transactions.EncodedMaxForeignAssets))
					err = msgp.WrapError(err, "struct-from-array", "ForeignAssets", zb0027)
					return
				}
				if zb0213 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027] = nil
				} else if (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027] != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027]) >= zb0212 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027] = ((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027])[:zb0212]
				} else {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027] = make(assetIndices, zb0212)
				}
				for zb0028 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027] {
					bts, err = (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027][zb0028].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ForeignAssets", zb0027, zb0028)
						return
					}
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0214 []byte
				var zb0215 int
				zb0215, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskForeignAssets")
					return
				}
				if zb0215 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0215), uint64(maxBitmaskSize))
					return
				}
				zb0214, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignAssets))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskForeignAssets")
					return
				}
				(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignAssets = bitmask(zb0214)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0216 int
			var zb0217 bool
			zb0216, zb0217, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LocalNumUint")
				return
			}
			if zb0216 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0216), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "LocalNumUint")
				return
			}
			if zb0217 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint = nil
			} else if (*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint) >= zb0216 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint = ((*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint)[:zb0216]
			} else {
				(*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint = make([]uint64, zb0216)
			}
			for zb0029 := range (*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint {
				(*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint[zb0029], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "LocalNumUint", zb0029)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0218 []byte
				var zb0219 int
				zb0219, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLocalNumUint")
					return
				}
				if zb0219 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0219), uint64(maxBitmaskSize))
					return
				}
				zb0218, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumUint))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLocalNumUint")
					return
				}
				(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumUint = bitmask(zb0218)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0220 int
			var zb0221 bool
			zb0220, zb0221, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LocalNumByteSlice")
				return
			}
			if zb0220 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0220), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "LocalNumByteSlice")
				return
			}
			if zb0221 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice = nil
			} else if (*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice) >= zb0220 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice = ((*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice)[:zb0220]
			} else {
				(*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice = make([]uint64, zb0220)
			}
			for zb0030 := range (*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice {
				(*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice[zb0030], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "LocalNumByteSlice", zb0030)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0222 []byte
				var zb0223 int
				zb0223, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLocalNumByteSlice")
					return
				}
				if zb0223 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0223), uint64(maxBitmaskSize))
					return
				}
				zb0222, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLocalNumByteSlice")
					return
				}
				(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice = bitmask(zb0222)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0224 int
			var zb0225 bool
			zb0224, zb0225, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GlobalNumUint")
				return
			}
			if zb0224 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0224), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "GlobalNumUint")
				return
			}
			if zb0225 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint = nil
			} else if (*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint) >= zb0224 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint = ((*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint)[:zb0224]
			} else {
				(*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint = make([]uint64, zb0224)
			}
			for zb0031 := range (*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint {
				(*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint[zb0031], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "GlobalNumUint", zb0031)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0226 []byte
				var zb0227 int
				zb0227, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGlobalNumUint")
					return
				}
				if zb0227 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0227), uint64(maxBitmaskSize))
					return
				}
				zb0226, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumUint))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGlobalNumUint")
					return
				}
				(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumUint = bitmask(zb0226)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0228 int
			var zb0229 bool
			zb0228, zb0229, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GlobalNumByteSlice")
				return
			}
			if zb0228 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0228), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "GlobalNumByteSlice")
				return
			}
			if zb0229 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice = nil
			} else if (*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice) >= zb0228 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice = ((*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice)[:zb0228]
			} else {
				(*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice = make([]uint64, zb0228)
			}
			for zb0032 := range (*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice {
				(*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice[zb0032], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "GlobalNumByteSlice", zb0032)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0230 []byte
				var zb0231 int
				zb0231, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGlobalNumByteSlice")
					return
				}
				if zb0231 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0231), uint64(maxBitmaskSize))
					return
				}
				zb0230, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGlobalNumByteSlice")
					return
				}
				(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice = bitmask(zb0230)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0232 int
			var zb0233 bool
			zb0232, zb0233, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram")
				return
			}
			if zb0232 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0232), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram")
				return
			}
			if zb0233 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram = nil
			} else if (*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram) >= zb0232 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram = ((*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram)[:zb0232]
			} else {
				(*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram = make([]program, zb0232)
			}
			for zb0033 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram {
				{
					var zb0234 []byte
					var zb0235 int
					zb0235, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram", zb0033)
						return
					}
					if zb0235 > config.MaxAppProgramLen {
						err = msgp.ErrOverflow(uint64(zb0235), uint64(config.MaxAppProgramLen))
						return
					}
					zb0234, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram[zb0033]))
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram", zb0033)
						return
					}
					(*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram[zb0033] = program(zb0234)
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0236 []byte
				var zb0237 int
				zb0237, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApprovalProgram")
					return
				}
				if zb0237 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0237), uint64(maxBitmaskSize))
					return
				}
				zb0236, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApprovalProgram))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApprovalProgram")
					return
				}
				(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApprovalProgram = bitmask(zb0236)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0238 int
			var zb0239 bool
			zb0238, zb0239, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram")
				return
			}
			if zb0238 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0238), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram")
				return
			}
			if zb0239 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram = nil
			} else if (*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram) >= zb0238 {
				(*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram = ((*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram)[:zb0238]
			} else {
				(*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram = make([]program, zb0238)
			}
			for zb0034 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram {
				{
					var zb0240 []byte
					var zb0241 int
					zb0241, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram", zb0034)
						return
					}
					if zb0241 > config.MaxAppProgramLen {
						err = msgp.ErrOverflow(uint64(zb0241), uint64(config.MaxAppProgramLen))
						return
					}
					zb0240, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram[zb0034]))
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram", zb0034)
						return
					}
					(*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram[zb0034] = program(zb0240)
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0242 []byte
				var zb0243 int
				zb0243, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskClearStateProgram")
					return
				}
				if zb0243 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0243), uint64(maxBitmaskSize))
					return
				}
				zb0242, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskClearStateProgram))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskClearStateProgram")
					return
				}
				(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskClearStateProgram = bitmask(zb0242)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0244 int
			var zb0245 bool
			zb0244, zb0245, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CertRound")
				return
			}
			if zb0244 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0244), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "CertRound")
				return
			}
			if zb0245 {
				(*z).encodedTxns.encodedCompactCertTxnFields.CertRound = nil
			} else if (*z).encodedTxns.encodedCompactCertTxnFields.CertRound != nil && cap((*z).encodedTxns.encodedCompactCertTxnFields.CertRound) >= zb0244 {
				(*z).encodedTxns.encodedCompactCertTxnFields.CertRound = ((*z).encodedTxns.encodedCompactCertTxnFields.CertRound)[:zb0244]
			} else {
				(*z).encodedTxns.encodedCompactCertTxnFields.CertRound = make([]basics.Round, zb0244)
			}
			for zb0035 := range (*z).encodedTxns.encodedCompactCertTxnFields.CertRound {
				bts, err = (*z).encodedTxns.encodedCompactCertTxnFields.CertRound[zb0035].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "CertRound", zb0035)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0246 []byte
				var zb0247 int
				zb0247, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCertRound")
					return
				}
				if zb0247 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0247), uint64(maxBitmaskSize))
					return
				}
				zb0246, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCertRound))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCertRound")
					return
				}
				(*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCertRound = bitmask(zb0246)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0248 int
			var zb0249 bool
			zb0248, zb0249, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CertType")
				return
			}
			if zb0248 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0248), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "CertType")
				return
			}
			if zb0249 {
				(*z).encodedTxns.encodedCompactCertTxnFields.CertType = nil
			} else if (*z).encodedTxns.encodedCompactCertTxnFields.CertType != nil && cap((*z).encodedTxns.encodedCompactCertTxnFields.CertType) >= zb0248 {
				(*z).encodedTxns.encodedCompactCertTxnFields.CertType = ((*z).encodedTxns.encodedCompactCertTxnFields.CertType)[:zb0248]
			} else {
				(*z).encodedTxns.encodedCompactCertTxnFields.CertType = make([]protocol.CompactCertType, zb0248)
			}
			for zb0036 := range (*z).encodedTxns.encodedCompactCertTxnFields.CertType {
				bts, err = (*z).encodedTxns.encodedCompactCertTxnFields.CertType[zb0036].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "CertType", zb0036)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0250 []byte
				var zb0251 int
				zb0251, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCertType")
					return
				}
				if zb0251 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0251), uint64(maxBitmaskSize))
					return
				}
				zb0250, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCertType))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCertType")
					return
				}
				(*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCertType = bitmask(zb0250)
			}
		}
		if zb0038 > 0 {
			zb0038--
			var zb0252 int
			var zb0253 bool
			zb0252, zb0253, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Cert")
				return
			}
			if zb0252 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0252), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Cert")
				return
			}
			if zb0253 {
				(*z).encodedTxns.encodedCompactCertTxnFields.Cert = nil
			} else if (*z).encodedTxns.encodedCompactCertTxnFields.Cert != nil && cap((*z).encodedTxns.encodedCompactCertTxnFields.Cert) >= zb0252 {
				(*z).encodedTxns.encodedCompactCertTxnFields.Cert = ((*z).encodedTxns.encodedCompactCertTxnFields.Cert)[:zb0252]
			} else {
				(*z).encodedTxns.encodedCompactCertTxnFields.Cert = make([]compactcert.Cert, zb0252)
			}
			for zb0037 := range (*z).encodedTxns.encodedCompactCertTxnFields.Cert {
				bts, err = (*z).encodedTxns.encodedCompactCertTxnFields.Cert[zb0037].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Cert", zb0037)
					return
				}
			}
		}
		if zb0038 > 0 {
			zb0038--
			{
				var zb0254 []byte
				var zb0255 int
				zb0255, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCert")
					return
				}
				if zb0255 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0255), uint64(maxBitmaskSize))
					return
				}
				zb0254, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCert))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCert")
					return
				}
				(*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCert = bitmask(zb0254)
			}
		}
		if zb0038 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0038)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0039 {
			(*z) = encodedSignedTxns{}
		}
		for zb0038 > 0 {
			zb0038--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "sig":
				var zb0256 int
				zb0256, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sig")
					return
				}
				if zb0256 > maxSignatureBytes {
					err = msgp.ErrOverflow(uint64(zb0256), uint64(maxSignatureBytes))
					return
				}
				(*z).Sig, bts, err = msgp.ReadBytesBytes(bts, (*z).Sig)
				if err != nil {
					err = msgp.WrapError(err, "Sig")
					return
				}
			case "sigbm":
				{
					var zb0257 []byte
					var zb0258 int
					zb0258, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskSig")
						return
					}
					if zb0258 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0258), uint64(maxBitmaskSize))
						return
					}
					zb0257, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskSig))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskSig")
						return
					}
					(*z).BitmaskSig = bitmask(zb0257)
				}
			case "msig":
				var zb0259 int
				var zb0260 bool
				zb0259, zb0260, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Msig")
					return
				}
				if zb0259 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0259), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Msig")
					return
				}
				if zb0260 {
					(*z).Msig = nil
				} else if (*z).Msig != nil && cap((*z).Msig) >= zb0259 {
					(*z).Msig = ((*z).Msig)[:zb0259]
				} else {
					(*z).Msig = make([]crypto.MultisigSig, zb0259)
				}
				for zb0001 := range (*z).Msig {
					bts, err = (*z).Msig[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Msig", zb0001)
						return
					}
				}
			case "msigbm":
				{
					var zb0261 []byte
					var zb0262 int
					zb0262, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskMsig")
						return
					}
					if zb0262 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0262), uint64(maxBitmaskSize))
						return
					}
					zb0261, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskMsig))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskMsig")
						return
					}
					(*z).BitmaskMsig = bitmask(zb0261)
				}
			case "lsig":
				var zb0263 int
				var zb0264 bool
				zb0263, zb0264, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Lsig")
					return
				}
				if zb0263 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0263), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Lsig")
					return
				}
				if zb0264 {
					(*z).Lsig = nil
				} else if (*z).Lsig != nil && cap((*z).Lsig) >= zb0263 {
					(*z).Lsig = ((*z).Lsig)[:zb0263]
				} else {
					(*z).Lsig = make([]transactions.LogicSig, zb0263)
				}
				for zb0002 := range (*z).Lsig {
					bts, err = (*z).Lsig[zb0002].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Lsig", zb0002)
						return
					}
				}
			case "lsigbm":
				{
					var zb0265 []byte
					var zb0266 int
					zb0266, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLsig")
						return
					}
					if zb0266 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0266), uint64(maxBitmaskSize))
						return
					}
					zb0265, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskLsig))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLsig")
						return
					}
					(*z).BitmaskLsig = bitmask(zb0265)
				}
			case "sgnr":
				var zb0267 int
				zb0267, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "AuthAddr")
					return
				}
				if zb0267 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0267), uint64(maxAddressBytes))
					return
				}
				(*z).AuthAddr, bts, err = msgp.ReadBytesBytes(bts, (*z).AuthAddr)
				if err != nil {
					err = msgp.WrapError(err, "AuthAddr")
					return
				}
			case "sgnrbm":
				{
					var zb0268 []byte
					var zb0269 int
					zb0269, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAuthAddr")
						return
					}
					if zb0269 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0269), uint64(maxBitmaskSize))
						return
					}
					zb0268, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskAuthAddr))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAuthAddr")
						return
					}
					(*z).BitmaskAuthAddr = bitmask(zb0268)
				}
			case "type":
				var zb0270 int
				zb0270, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "TxType")
					return
				}
				if zb0270 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0270), uint64(maxEncodedTransactionGroup))
					return
				}
				(*z).encodedTxns.TxType, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.TxType)
				if err != nil {
					err = msgp.WrapError(err, "TxType")
					return
				}
			case "typebm":
				{
					var zb0271 []byte
					var zb0272 int
					zb0272, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskTxType")
						return
					}
					if zb0272 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0272), uint64(maxBitmaskSize))
						return
					}
					zb0271, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.BitmaskTxType))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskTxType")
						return
					}
					(*z).encodedTxns.BitmaskTxType = bitmask(zb0271)
				}
			case "snd":
				var zb0273 int
				zb0273, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sender")
					return
				}
				if zb0273 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0273), uint64(maxAddressBytes))
					return
				}
				(*z).encodedTxns.encodedTxnHeaders.Sender, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedTxnHeaders.Sender)
				if err != nil {
					err = msgp.WrapError(err, "Sender")
					return
				}
			case "sndbm":
				{
					var zb0274 []byte
					var zb0275 int
					zb0275, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskSender")
						return
					}
					if zb0275 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0275), uint64(maxBitmaskSize))
						return
					}
					zb0274, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskSender))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskSender")
						return
					}
					(*z).encodedTxns.encodedTxnHeaders.BitmaskSender = bitmask(zb0274)
				}
			case "fee":
				var zb0276 int
				var zb0277 bool
				zb0276, zb0277, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Fee")
					return
				}
				if zb0276 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0276), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Fee")
					return
				}
				if zb0277 {
					(*z).encodedTxns.encodedTxnHeaders.Fee = nil
				} else if (*z).encodedTxns.encodedTxnHeaders.Fee != nil && cap((*z).encodedTxns.encodedTxnHeaders.Fee) >= zb0276 {
					(*z).encodedTxns.encodedTxnHeaders.Fee = ((*z).encodedTxns.encodedTxnHeaders.Fee)[:zb0276]
				} else {
					(*z).encodedTxns.encodedTxnHeaders.Fee = make([]basics.MicroAlgos, zb0276)
				}
				for zb0003 := range (*z).encodedTxns.encodedTxnHeaders.Fee {
					bts, err = (*z).encodedTxns.encodedTxnHeaders.Fee[zb0003].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Fee", zb0003)
						return
					}
				}
			case "feebm":
				{
					var zb0278 []byte
					var zb0279 int
					zb0279, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFee")
						return
					}
					if zb0279 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0279), uint64(maxBitmaskSize))
						return
					}
					zb0278, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskFee))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFee")
						return
					}
					(*z).encodedTxns.encodedTxnHeaders.BitmaskFee = bitmask(zb0278)
				}
			case "fv":
				var zb0280 int
				var zb0281 bool
				zb0280, zb0281, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "FirstValid")
					return
				}
				if zb0280 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0280), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "FirstValid")
					return
				}
				if zb0281 {
					(*z).encodedTxns.encodedTxnHeaders.FirstValid = nil
				} else if (*z).encodedTxns.encodedTxnHeaders.FirstValid != nil && cap((*z).encodedTxns.encodedTxnHeaders.FirstValid) >= zb0280 {
					(*z).encodedTxns.encodedTxnHeaders.FirstValid = ((*z).encodedTxns.encodedTxnHeaders.FirstValid)[:zb0280]
				} else {
					(*z).encodedTxns.encodedTxnHeaders.FirstValid = make([]basics.Round, zb0280)
				}
				for zb0004 := range (*z).encodedTxns.encodedTxnHeaders.FirstValid {
					bts, err = (*z).encodedTxns.encodedTxnHeaders.FirstValid[zb0004].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "FirstValid", zb0004)
						return
					}
				}
			case "fvbm":
				{
					var zb0282 []byte
					var zb0283 int
					zb0283, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFirstValid")
						return
					}
					if zb0283 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0283), uint64(maxBitmaskSize))
						return
					}
					zb0282, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskFirstValid))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFirstValid")
						return
					}
					(*z).encodedTxns.encodedTxnHeaders.BitmaskFirstValid = bitmask(zb0282)
				}
			case "lv":
				var zb0284 int
				var zb0285 bool
				zb0284, zb0285, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LastValid")
					return
				}
				if zb0284 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0284), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "LastValid")
					return
				}
				if zb0285 {
					(*z).encodedTxns.encodedTxnHeaders.LastValid = nil
				} else if (*z).encodedTxns.encodedTxnHeaders.LastValid != nil && cap((*z).encodedTxns.encodedTxnHeaders.LastValid) >= zb0284 {
					(*z).encodedTxns.encodedTxnHeaders.LastValid = ((*z).encodedTxns.encodedTxnHeaders.LastValid)[:zb0284]
				} else {
					(*z).encodedTxns.encodedTxnHeaders.LastValid = make([]basics.Round, zb0284)
				}
				for zb0005 := range (*z).encodedTxns.encodedTxnHeaders.LastValid {
					bts, err = (*z).encodedTxns.encodedTxnHeaders.LastValid[zb0005].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "LastValid", zb0005)
						return
					}
				}
			case "lvbm":
				{
					var zb0286 []byte
					var zb0287 int
					zb0287, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLastValid")
						return
					}
					if zb0287 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0287), uint64(maxBitmaskSize))
						return
					}
					zb0286, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskLastValid))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLastValid")
						return
					}
					(*z).encodedTxns.encodedTxnHeaders.BitmaskLastValid = bitmask(zb0286)
				}
			case "note":
				var zb0288 int
				var zb0289 bool
				zb0288, zb0289, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Note")
					return
				}
				if zb0288 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0288), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Note")
					return
				}
				if zb0289 {
					(*z).encodedTxns.encodedTxnHeaders.Note = nil
				} else if (*z).encodedTxns.encodedTxnHeaders.Note != nil && cap((*z).encodedTxns.encodedTxnHeaders.Note) >= zb0288 {
					(*z).encodedTxns.encodedTxnHeaders.Note = ((*z).encodedTxns.encodedTxnHeaders.Note)[:zb0288]
				} else {
					(*z).encodedTxns.encodedTxnHeaders.Note = make([][]byte, zb0288)
				}
				for zb0006 := range (*z).encodedTxns.encodedTxnHeaders.Note {
					(*z).encodedTxns.encodedTxnHeaders.Note[zb0006], bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedTxnHeaders.Note[zb0006])
					if err != nil {
						err = msgp.WrapError(err, "Note", zb0006)
						return
					}
				}
			case "notebm":
				{
					var zb0290 []byte
					var zb0291 int
					zb0291, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskNote")
						return
					}
					if zb0291 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0291), uint64(maxBitmaskSize))
						return
					}
					zb0290, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskNote))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskNote")
						return
					}
					(*z).encodedTxns.encodedTxnHeaders.BitmaskNote = bitmask(zb0290)
				}
			case "gen":
				(*z).encodedTxns.encodedTxnHeaders.GenesisID, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "GenesisID")
					return
				}
			case "genbm":
				{
					var zb0292 []byte
					var zb0293 int
					zb0293, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGenesisID")
						return
					}
					if zb0293 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0293), uint64(maxBitmaskSize))
						return
					}
					zb0292, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskGenesisID))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGenesisID")
						return
					}
					(*z).encodedTxns.encodedTxnHeaders.BitmaskGenesisID = bitmask(zb0292)
				}
			case "gh":
				bts, err = (*z).encodedTxns.encodedTxnHeaders.GenesisHash.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "GenesisHash")
					return
				}
			case "ghbm":
				{
					var zb0294 []byte
					var zb0295 int
					zb0295, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGenesisHash")
						return
					}
					if zb0295 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0295), uint64(maxBitmaskSize))
						return
					}
					zb0294, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskGenesisHash))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGenesisHash")
						return
					}
					(*z).encodedTxns.encodedTxnHeaders.BitmaskGenesisHash = bitmask(zb0294)
				}
			case "grpbm":
				{
					var zb0296 []byte
					var zb0297 int
					zb0297, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGroup")
						return
					}
					if zb0297 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0297), uint64(maxBitmaskSize))
						return
					}
					zb0296, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskGroup))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGroup")
						return
					}
					(*z).encodedTxns.encodedTxnHeaders.BitmaskGroup = bitmask(zb0296)
				}
			case "lx":
				var zb0298 int
				zb0298, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Lease")
					return
				}
				if zb0298 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0298), uint64(maxAddressBytes))
					return
				}
				(*z).encodedTxns.encodedTxnHeaders.Lease, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedTxnHeaders.Lease)
				if err != nil {
					err = msgp.WrapError(err, "Lease")
					return
				}
			case "lxbm":
				{
					var zb0299 []byte
					var zb0300 int
					zb0300, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLease")
						return
					}
					if zb0300 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0300), uint64(maxBitmaskSize))
						return
					}
					zb0299, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskLease))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLease")
						return
					}
					(*z).encodedTxns.encodedTxnHeaders.BitmaskLease = bitmask(zb0299)
				}
			case "rekey":
				var zb0301 int
				zb0301, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "RekeyTo")
					return
				}
				if zb0301 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0301), uint64(maxAddressBytes))
					return
				}
				(*z).encodedTxns.encodedTxnHeaders.RekeyTo, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedTxnHeaders.RekeyTo)
				if err != nil {
					err = msgp.WrapError(err, "RekeyTo")
					return
				}
			case "rekeybm":
				{
					var zb0302 []byte
					var zb0303 int
					zb0303, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskRekeyTo")
						return
					}
					if zb0303 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0303), uint64(maxBitmaskSize))
						return
					}
					zb0302, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedTxnHeaders.BitmaskRekeyTo))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskRekeyTo")
						return
					}
					(*z).encodedTxns.encodedTxnHeaders.BitmaskRekeyTo = bitmask(zb0302)
				}
			case "votekey":
				var zb0304 int
				zb0304, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "VotePK")
					return
				}
				if zb0304 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0304), uint64(maxAddressBytes))
					return
				}
				(*z).encodedTxns.encodedKeyregTxnFields.VotePK, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedKeyregTxnFields.VotePK)
				if err != nil {
					err = msgp.WrapError(err, "VotePK")
					return
				}
			case "votekeybm":
				{
					var zb0305 []byte
					var zb0306 int
					zb0306, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVotePK")
						return
					}
					if zb0306 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0306), uint64(maxBitmaskSize))
						return
					}
					zb0305, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVotePK))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVotePK")
						return
					}
					(*z).encodedTxns.encodedKeyregTxnFields.BitmaskVotePK = bitmask(zb0305)
				}
			case "selkey":
				var zb0307 int
				zb0307, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "SelectionPK")
					return
				}
				if zb0307 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0307), uint64(maxAddressBytes))
					return
				}
				(*z).encodedTxns.encodedKeyregTxnFields.SelectionPK, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedKeyregTxnFields.SelectionPK)
				if err != nil {
					err = msgp.WrapError(err, "SelectionPK")
					return
				}
			case "selkeybm":
				{
					var zb0308 []byte
					var zb0309 int
					zb0309, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskSelectionPK")
						return
					}
					if zb0309 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0309), uint64(maxBitmaskSize))
						return
					}
					zb0308, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskSelectionPK))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskSelectionPK")
						return
					}
					(*z).encodedTxns.encodedKeyregTxnFields.BitmaskSelectionPK = bitmask(zb0308)
				}
			case "votefst":
				var zb0310 int
				var zb0311 bool
				zb0310, zb0311, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteFirst")
					return
				}
				if zb0310 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0310), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "VoteFirst")
					return
				}
				if zb0311 {
					(*z).encodedTxns.encodedKeyregTxnFields.VoteFirst = nil
				} else if (*z).encodedTxns.encodedKeyregTxnFields.VoteFirst != nil && cap((*z).encodedTxns.encodedKeyregTxnFields.VoteFirst) >= zb0310 {
					(*z).encodedTxns.encodedKeyregTxnFields.VoteFirst = ((*z).encodedTxns.encodedKeyregTxnFields.VoteFirst)[:zb0310]
				} else {
					(*z).encodedTxns.encodedKeyregTxnFields.VoteFirst = make([]basics.Round, zb0310)
				}
				for zb0007 := range (*z).encodedTxns.encodedKeyregTxnFields.VoteFirst {
					bts, err = (*z).encodedTxns.encodedKeyregTxnFields.VoteFirst[zb0007].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "VoteFirst", zb0007)
						return
					}
				}
			case "votefstbm":
				{
					var zb0312 []byte
					var zb0313 int
					zb0313, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteFirst")
						return
					}
					if zb0313 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0313), uint64(maxBitmaskSize))
						return
					}
					zb0312, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteFirst))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteFirst")
						return
					}
					(*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteFirst = bitmask(zb0312)
				}
			case "votelst":
				var zb0314 int
				var zb0315 bool
				zb0314, zb0315, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteLast")
					return
				}
				if zb0314 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0314), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "VoteLast")
					return
				}
				if zb0315 {
					(*z).encodedTxns.encodedKeyregTxnFields.VoteLast = nil
				} else if (*z).encodedTxns.encodedKeyregTxnFields.VoteLast != nil && cap((*z).encodedTxns.encodedKeyregTxnFields.VoteLast) >= zb0314 {
					(*z).encodedTxns.encodedKeyregTxnFields.VoteLast = ((*z).encodedTxns.encodedKeyregTxnFields.VoteLast)[:zb0314]
				} else {
					(*z).encodedTxns.encodedKeyregTxnFields.VoteLast = make([]basics.Round, zb0314)
				}
				for zb0008 := range (*z).encodedTxns.encodedKeyregTxnFields.VoteLast {
					bts, err = (*z).encodedTxns.encodedKeyregTxnFields.VoteLast[zb0008].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "VoteLast", zb0008)
						return
					}
				}
			case "votelstbm":
				{
					var zb0316 []byte
					var zb0317 int
					zb0317, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteLast")
						return
					}
					if zb0317 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0317), uint64(maxBitmaskSize))
						return
					}
					zb0316, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteLast))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteLast")
						return
					}
					(*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteLast = bitmask(zb0316)
				}
			case "votekd":
				var zb0318 int
				var zb0319 bool
				zb0318, zb0319, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteKeyDilution")
					return
				}
				if zb0318 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0318), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "VoteKeyDilution")
					return
				}
				if zb0319 {
					(*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution = nil
				} else if (*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution != nil && cap((*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution) >= zb0318 {
					(*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution = ((*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution)[:zb0318]
				} else {
					(*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution = make([]uint64, zb0318)
				}
				for zb0009 := range (*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution {
					(*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution[zb0009], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "VoteKeyDilution", zb0009)
						return
					}
				}
			case "votekdbm":
				{
					var zb0320 []byte
					var zb0321 int
					zb0321, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteKeyDilution")
						return
					}
					if zb0321 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0321), uint64(maxBitmaskSize))
						return
					}
					zb0320, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteKeyDilution))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteKeyDilution")
						return
					}
					(*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteKeyDilution = bitmask(zb0320)
				}
			case "nonpartbm":
				{
					var zb0322 []byte
					var zb0323 int
					zb0323, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskNonparticipation")
						return
					}
					if zb0323 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0323), uint64(maxBitmaskSize))
						return
					}
					zb0322, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskNonparticipation))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskNonparticipation")
						return
					}
					(*z).encodedTxns.encodedKeyregTxnFields.BitmaskNonparticipation = bitmask(zb0322)
				}
			case "rcv":
				var zb0324 int
				zb0324, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Receiver")
					return
				}
				if zb0324 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0324), uint64(maxAddressBytes))
					return
				}
				(*z).encodedTxns.encodedPaymentTxnFields.Receiver, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedPaymentTxnFields.Receiver)
				if err != nil {
					err = msgp.WrapError(err, "Receiver")
					return
				}
			case "rcvbm":
				{
					var zb0325 []byte
					var zb0326 int
					zb0326, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskReceiver")
						return
					}
					if zb0326 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0326), uint64(maxBitmaskSize))
						return
					}
					zb0325, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedPaymentTxnFields.BitmaskReceiver))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskReceiver")
						return
					}
					(*z).encodedTxns.encodedPaymentTxnFields.BitmaskReceiver = bitmask(zb0325)
				}
			case "amt":
				var zb0327 int
				var zb0328 bool
				zb0327, zb0328, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Amount")
					return
				}
				if zb0327 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0327), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Amount")
					return
				}
				if zb0328 {
					(*z).encodedTxns.encodedPaymentTxnFields.Amount = nil
				} else if (*z).encodedTxns.encodedPaymentTxnFields.Amount != nil && cap((*z).encodedTxns.encodedPaymentTxnFields.Amount) >= zb0327 {
					(*z).encodedTxns.encodedPaymentTxnFields.Amount = ((*z).encodedTxns.encodedPaymentTxnFields.Amount)[:zb0327]
				} else {
					(*z).encodedTxns.encodedPaymentTxnFields.Amount = make([]basics.MicroAlgos, zb0327)
				}
				for zb0010 := range (*z).encodedTxns.encodedPaymentTxnFields.Amount {
					bts, err = (*z).encodedTxns.encodedPaymentTxnFields.Amount[zb0010].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Amount", zb0010)
						return
					}
				}
			case "amtbm":
				{
					var zb0329 []byte
					var zb0330 int
					zb0330, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAmount")
						return
					}
					if zb0330 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0330), uint64(maxBitmaskSize))
						return
					}
					zb0329, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedPaymentTxnFields.BitmaskAmount))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAmount")
						return
					}
					(*z).encodedTxns.encodedPaymentTxnFields.BitmaskAmount = bitmask(zb0329)
				}
			case "close":
				var zb0331 int
				zb0331, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "CloseRemainderTo")
					return
				}
				if zb0331 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0331), uint64(maxAddressBytes))
					return
				}
				(*z).encodedTxns.encodedPaymentTxnFields.CloseRemainderTo, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedPaymentTxnFields.CloseRemainderTo)
				if err != nil {
					err = msgp.WrapError(err, "CloseRemainderTo")
					return
				}
			case "closebm":
				{
					var zb0332 []byte
					var zb0333 int
					zb0333, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCloseRemainderTo")
						return
					}
					if zb0333 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0333), uint64(maxBitmaskSize))
						return
					}
					zb0332, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedPaymentTxnFields.BitmaskCloseRemainderTo))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCloseRemainderTo")
						return
					}
					(*z).encodedTxns.encodedPaymentTxnFields.BitmaskCloseRemainderTo = bitmask(zb0332)
				}
			case "caid":
				var zb0334 int
				var zb0335 bool
				zb0334, zb0335, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ConfigAsset")
					return
				}
				if zb0334 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0334), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ConfigAsset")
					return
				}
				if zb0335 {
					(*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset = nil
				} else if (*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset != nil && cap((*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset) >= zb0334 {
					(*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset = ((*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset)[:zb0334]
				} else {
					(*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset = make([]basics.AssetIndex, zb0334)
				}
				for zb0011 := range (*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset {
					bts, err = (*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset[zb0011].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "ConfigAsset", zb0011)
						return
					}
				}
			case "caidbm":
				{
					var zb0336 []byte
					var zb0337 int
					zb0337, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskConfigAsset")
						return
					}
					if zb0337 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0337), uint64(maxBitmaskSize))
						return
					}
					zb0336, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.BitmaskConfigAsset))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskConfigAsset")
						return
					}
					(*z).encodedTxns.encodedAssetConfigTxnFields.BitmaskConfigAsset = bitmask(zb0336)
				}
			case "t":
				var zb0338 int
				var zb0339 bool
				zb0338, zb0339, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Total")
					return
				}
				if zb0338 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0338), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Total")
					return
				}
				if zb0339 {
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total = nil
				} else if (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total != nil && cap((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total) >= zb0338 {
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total = ((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total)[:zb0338]
				} else {
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total = make([]uint64, zb0338)
				}
				for zb0012 := range (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total {
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total[zb0012], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Total", zb0012)
						return
					}
				}
			case "tbm":
				{
					var zb0340 []byte
					var zb0341 int
					zb0341, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskTotal")
						return
					}
					if zb0341 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0341), uint64(maxBitmaskSize))
						return
					}
					zb0340, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskTotal")
						return
					}
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal = bitmask(zb0340)
				}
			case "dc":
				var zb0342 int
				var zb0343 bool
				zb0342, zb0343, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Decimals")
					return
				}
				if zb0342 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0342), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Decimals")
					return
				}
				if zb0343 {
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals = nil
				} else if (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals != nil && cap((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals) >= zb0342 {
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals = ((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals)[:zb0342]
				} else {
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals = make([]uint32, zb0342)
				}
				for zb0013 := range (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals {
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals[zb0013], bts, err = msgp.ReadUint32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Decimals", zb0013)
						return
					}
				}
			case "dcbm":
				{
					var zb0344 []byte
					var zb0345 int
					zb0345, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskDecimals")
						return
					}
					if zb0345 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0345), uint64(maxBitmaskSize))
						return
					}
					zb0344, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskDecimals")
						return
					}
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals = bitmask(zb0344)
				}
			case "dfbm":
				{
					var zb0346 []byte
					var zb0347 int
					zb0347, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskDefaultFrozen")
						return
					}
					if zb0347 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0347), uint64(maxBitmaskSize))
						return
					}
					zb0346, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskDefaultFrozen")
						return
					}
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen = bitmask(zb0346)
				}
			case "un":
				var zb0348 int
				var zb0349 bool
				zb0348, zb0349, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "UnitName")
					return
				}
				if zb0348 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0348), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "UnitName")
					return
				}
				if zb0349 {
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName = nil
				} else if (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName != nil && cap((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName) >= zb0348 {
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName = ((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName)[:zb0348]
				} else {
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName = make([]string, zb0348)
				}
				for zb0014 := range (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName {
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName[zb0014], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "UnitName", zb0014)
						return
					}
				}
			case "unbm":
				{
					var zb0350 []byte
					var zb0351 int
					zb0351, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskUnitName")
						return
					}
					if zb0351 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0351), uint64(maxBitmaskSize))
						return
					}
					zb0350, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskUnitName")
						return
					}
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName = bitmask(zb0350)
				}
			case "an":
				var zb0352 int
				var zb0353 bool
				zb0352, zb0353, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetName")
					return
				}
				if zb0352 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0352), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "AssetName")
					return
				}
				if zb0353 {
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName = nil
				} else if (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName != nil && cap((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName) >= zb0352 {
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName = ((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName)[:zb0352]
				} else {
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName = make([]string, zb0352)
				}
				for zb0015 := range (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName {
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName[zb0015], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "AssetName", zb0015)
						return
					}
				}
			case "anbm":
				{
					var zb0354 []byte
					var zb0355 int
					zb0355, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetName")
						return
					}
					if zb0355 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0355), uint64(maxBitmaskSize))
						return
					}
					zb0354, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetName")
						return
					}
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName = bitmask(zb0354)
				}
			case "au":
				var zb0356 int
				var zb0357 bool
				zb0356, zb0357, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "URL")
					return
				}
				if zb0356 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0356), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "URL")
					return
				}
				if zb0357 {
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL = nil
				} else if (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL != nil && cap((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL) >= zb0356 {
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL = ((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL)[:zb0356]
				} else {
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL = make([]string, zb0356)
				}
				for zb0016 := range (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL {
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL[zb0016], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "URL", zb0016)
						return
					}
				}
			case "aubm":
				{
					var zb0358 []byte
					var zb0359 int
					zb0359, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskURL")
						return
					}
					if zb0359 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0359), uint64(maxBitmaskSize))
						return
					}
					zb0358, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskURL")
						return
					}
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL = bitmask(zb0358)
				}
			case "am":
				var zb0360 int
				zb0360, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "MetadataHash")
					return
				}
				if zb0360 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0360), uint64(maxAddressBytes))
					return
				}
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash)
				if err != nil {
					err = msgp.WrapError(err, "MetadataHash")
					return
				}
			case "ambm":
				{
					var zb0361 []byte
					var zb0362 int
					zb0362, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskMetadataHash")
						return
					}
					if zb0362 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0362), uint64(maxBitmaskSize))
						return
					}
					zb0361, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskMetadataHash")
						return
					}
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash = bitmask(zb0361)
				}
			case "m":
				var zb0363 int
				zb0363, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Manager")
					return
				}
				if zb0363 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0363), uint64(maxAddressBytes))
					return
				}
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Manager, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Manager)
				if err != nil {
					err = msgp.WrapError(err, "Manager")
					return
				}
			case "mbm":
				{
					var zb0364 []byte
					var zb0365 int
					zb0365, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskManager")
						return
					}
					if zb0365 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0365), uint64(maxBitmaskSize))
						return
					}
					zb0364, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskManager")
						return
					}
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager = bitmask(zb0364)
				}
			case "r":
				var zb0366 int
				zb0366, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Reserve")
					return
				}
				if zb0366 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0366), uint64(maxAddressBytes))
					return
				}
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Reserve, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Reserve)
				if err != nil {
					err = msgp.WrapError(err, "Reserve")
					return
				}
			case "rbm":
				{
					var zb0367 []byte
					var zb0368 int
					zb0368, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskReserve")
						return
					}
					if zb0368 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0368), uint64(maxBitmaskSize))
						return
					}
					zb0367, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskReserve")
						return
					}
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve = bitmask(zb0367)
				}
			case "f":
				var zb0369 int
				zb0369, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Freeze")
					return
				}
				if zb0369 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0369), uint64(maxAddressBytes))
					return
				}
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Freeze, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Freeze)
				if err != nil {
					err = msgp.WrapError(err, "Freeze")
					return
				}
			case "fbm":
				{
					var zb0370 []byte
					var zb0371 int
					zb0371, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreeze")
						return
					}
					if zb0371 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0371), uint64(maxBitmaskSize))
						return
					}
					zb0370, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreeze")
						return
					}
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze = bitmask(zb0370)
				}
			case "c":
				var zb0372 int
				zb0372, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Clawback")
					return
				}
				if zb0372 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0372), uint64(maxAddressBytes))
					return
				}
				(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Clawback, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Clawback)
				if err != nil {
					err = msgp.WrapError(err, "Clawback")
					return
				}
			case "cbm":
				{
					var zb0373 []byte
					var zb0374 int
					zb0374, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskClawback")
						return
					}
					if zb0374 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0374), uint64(maxBitmaskSize))
						return
					}
					zb0373, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskClawback")
						return
					}
					(*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback = bitmask(zb0373)
				}
			case "xaid":
				var zb0375 int
				var zb0376 bool
				zb0375, zb0376, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XferAsset")
					return
				}
				if zb0375 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0375), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "XferAsset")
					return
				}
				if zb0376 {
					(*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset = nil
				} else if (*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset != nil && cap((*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset) >= zb0375 {
					(*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset = ((*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset)[:zb0375]
				} else {
					(*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset = make([]basics.AssetIndex, zb0375)
				}
				for zb0017 := range (*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset {
					bts, err = (*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset[zb0017].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "XferAsset", zb0017)
						return
					}
				}
			case "xaidbm":
				{
					var zb0377 []byte
					var zb0378 int
					zb0378, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskXferAsset")
						return
					}
					if zb0378 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0378), uint64(maxBitmaskSize))
						return
					}
					zb0377, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskXferAsset))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskXferAsset")
						return
					}
					(*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskXferAsset = bitmask(zb0377)
				}
			case "aamt":
				var zb0379 int
				var zb0380 bool
				zb0379, zb0380, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetAmount")
					return
				}
				if zb0379 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0379), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "AssetAmount")
					return
				}
				if zb0380 {
					(*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount = nil
				} else if (*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount != nil && cap((*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount) >= zb0379 {
					(*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount = ((*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount)[:zb0379]
				} else {
					(*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount = make([]uint64, zb0379)
				}
				for zb0018 := range (*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount {
					(*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount[zb0018], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "AssetAmount", zb0018)
						return
					}
				}
			case "aamtbm":
				{
					var zb0381 []byte
					var zb0382 int
					zb0382, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetAmount")
						return
					}
					if zb0382 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0382), uint64(maxBitmaskSize))
						return
					}
					zb0381, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetAmount))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetAmount")
						return
					}
					(*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetAmount = bitmask(zb0381)
				}
			case "asnd":
				var zb0383 int
				zb0383, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetSender")
					return
				}
				if zb0383 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0383), uint64(maxAddressBytes))
					return
				}
				(*z).encodedTxns.encodedAssetTransferTxnFields.AssetSender, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedAssetTransferTxnFields.AssetSender)
				if err != nil {
					err = msgp.WrapError(err, "AssetSender")
					return
				}
			case "asndbm":
				{
					var zb0384 []byte
					var zb0385 int
					zb0385, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetSender")
						return
					}
					if zb0385 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0385), uint64(maxBitmaskSize))
						return
					}
					zb0384, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetSender))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetSender")
						return
					}
					(*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetSender = bitmask(zb0384)
				}
			case "arcv":
				var zb0386 int
				zb0386, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetReceiver")
					return
				}
				if zb0386 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0386), uint64(maxAddressBytes))
					return
				}
				(*z).encodedTxns.encodedAssetTransferTxnFields.AssetReceiver, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedAssetTransferTxnFields.AssetReceiver)
				if err != nil {
					err = msgp.WrapError(err, "AssetReceiver")
					return
				}
			case "arcvbm":
				{
					var zb0387 []byte
					var zb0388 int
					zb0388, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetReceiver")
						return
					}
					if zb0388 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0388), uint64(maxBitmaskSize))
						return
					}
					zb0387, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetReceiver))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetReceiver")
						return
					}
					(*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetReceiver = bitmask(zb0387)
				}
			case "aclose":
				var zb0389 int
				zb0389, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetCloseTo")
					return
				}
				if zb0389 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0389), uint64(maxAddressBytes))
					return
				}
				(*z).encodedTxns.encodedAssetTransferTxnFields.AssetCloseTo, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedAssetTransferTxnFields.AssetCloseTo)
				if err != nil {
					err = msgp.WrapError(err, "AssetCloseTo")
					return
				}
			case "aclosebm":
				{
					var zb0390 []byte
					var zb0391 int
					zb0391, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetCloseTo")
						return
					}
					if zb0391 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0391), uint64(maxBitmaskSize))
						return
					}
					zb0390, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetCloseTo))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetCloseTo")
						return
					}
					(*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetCloseTo = bitmask(zb0390)
				}
			case "fadd":
				var zb0392 int
				zb0392, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "FreezeAccount")
					return
				}
				if zb0392 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0392), uint64(maxAddressBytes))
					return
				}
				(*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAccount, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAccount)
				if err != nil {
					err = msgp.WrapError(err, "FreezeAccount")
					return
				}
			case "faddbm":
				{
					var zb0393 []byte
					var zb0394 int
					zb0394, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreezeAccount")
						return
					}
					if zb0394 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0394), uint64(maxBitmaskSize))
						return
					}
					zb0393, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAccount))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreezeAccount")
						return
					}
					(*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAccount = bitmask(zb0393)
				}
			case "faid":
				var zb0395 int
				var zb0396 bool
				zb0395, zb0396, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "FreezeAsset")
					return
				}
				if zb0395 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0395), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "FreezeAsset")
					return
				}
				if zb0396 {
					(*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset = nil
				} else if (*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset != nil && cap((*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset) >= zb0395 {
					(*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset = ((*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset)[:zb0395]
				} else {
					(*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset = make([]basics.AssetIndex, zb0395)
				}
				for zb0019 := range (*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset {
					bts, err = (*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset[zb0019].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "FreezeAsset", zb0019)
						return
					}
				}
			case "faidbm":
				{
					var zb0397 []byte
					var zb0398 int
					zb0398, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreezeAsset")
						return
					}
					if zb0398 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0398), uint64(maxBitmaskSize))
						return
					}
					zb0397, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAsset))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreezeAsset")
						return
					}
					(*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAsset = bitmask(zb0397)
				}
			case "afrzbm":
				{
					var zb0399 []byte
					var zb0400 int
					zb0400, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetFrozen")
						return
					}
					if zb0400 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0400), uint64(maxBitmaskSize))
						return
					}
					zb0399, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskAssetFrozen))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetFrozen")
						return
					}
					(*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskAssetFrozen = bitmask(zb0399)
				}
			case "apid":
				var zb0401 int
				var zb0402 bool
				zb0401, zb0402, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApplicationID")
					return
				}
				if zb0401 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0401), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ApplicationID")
					return
				}
				if zb0402 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID = nil
				} else if (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID) >= zb0401 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID = ((*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID)[:zb0401]
				} else {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID = make([]basics.AppIndex, zb0401)
				}
				for zb0020 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID {
					bts, err = (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID[zb0020].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "ApplicationID", zb0020)
						return
					}
				}
			case "apidbm":
				{
					var zb0403 []byte
					var zb0404 int
					zb0404, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApplicationID")
						return
					}
					if zb0404 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0404), uint64(maxBitmaskSize))
						return
					}
					zb0403, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationID))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApplicationID")
						return
					}
					(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationID = bitmask(zb0403)
				}
			case "apan":
				var zb0405 int
				zb0405, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "OnCompletion")
					return
				}
				if zb0405 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0405), uint64(maxEncodedTransactionGroup))
					return
				}
				(*z).encodedTxns.encodedApplicationCallTxnFields.OnCompletion, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedApplicationCallTxnFields.OnCompletion)
				if err != nil {
					err = msgp.WrapError(err, "OnCompletion")
					return
				}
			case "apanbm":
				{
					var zb0406 []byte
					var zb0407 int
					zb0407, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskOnCompletion")
						return
					}
					if zb0407 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0407), uint64(maxBitmaskSize))
						return
					}
					zb0406, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskOnCompletion))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskOnCompletion")
						return
					}
					(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskOnCompletion = bitmask(zb0406)
				}
			case "apaa":
				var zb0408 int
				var zb0409 bool
				zb0408, zb0409, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApplicationArgs")
					return
				}
				if zb0408 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0408), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ApplicationArgs")
					return
				}
				if zb0409 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs = nil
				} else if (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs) >= zb0408 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs = ((*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs)[:zb0408]
				} else {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs = make([]applicationArgs, zb0408)
				}
				for zb0021 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs {
					var zb0410 int
					var zb0411 bool
					zb0410, zb0411, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ApplicationArgs", zb0021)
						return
					}
					if zb0410 > transactions.EncodedMaxApplicationArgs {
						err = msgp.ErrOverflow(uint64(zb0410), uint64(transactions.EncodedMaxApplicationArgs))
						err = msgp.WrapError(err, "ApplicationArgs", zb0021)
						return
					}
					if zb0411 {
						(*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021] = nil
					} else if (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021] != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021]) >= zb0410 {
						(*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021] = ((*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021])[:zb0410]
					} else {
						(*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021] = make(applicationArgs, zb0410)
					}
					for zb0022 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021] {
						(*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021][zb0022], bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021][zb0022])
						if err != nil {
							err = msgp.WrapError(err, "ApplicationArgs", zb0021, zb0022)
							return
						}
					}
				}
			case "apaabm":
				{
					var zb0412 []byte
					var zb0413 int
					zb0413, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApplicationArgs")
						return
					}
					if zb0413 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0413), uint64(maxBitmaskSize))
						return
					}
					zb0412, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationArgs))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApplicationArgs")
						return
					}
					(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationArgs = bitmask(zb0412)
				}
			case "apat":
				var zb0414 int
				var zb0415 bool
				zb0414, zb0415, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Accounts")
					return
				}
				if zb0414 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0414), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Accounts")
					return
				}
				if zb0415 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.Accounts = nil
				} else if (*z).encodedTxns.encodedApplicationCallTxnFields.Accounts != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.Accounts) >= zb0414 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.Accounts = ((*z).encodedTxns.encodedApplicationCallTxnFields.Accounts)[:zb0414]
				} else {
					(*z).encodedTxns.encodedApplicationCallTxnFields.Accounts = make([]addresses, zb0414)
				}
				for zb0023 := range (*z).encodedTxns.encodedApplicationCallTxnFields.Accounts {
					var zb0416 int
					var zb0417 bool
					zb0416, zb0417, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Accounts", zb0023)
						return
					}
					if zb0416 > transactions.EncodedMaxAccounts {
						err = msgp.ErrOverflow(uint64(zb0416), uint64(transactions.EncodedMaxAccounts))
						err = msgp.WrapError(err, "Accounts", zb0023)
						return
					}
					if zb0417 {
						(*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023] = nil
					} else if (*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023] != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023]) >= zb0416 {
						(*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023] = ((*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023])[:zb0416]
					} else {
						(*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023] = make(addresses, zb0416)
					}
					for zb0024 := range (*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023] {
						bts, err = (*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023][zb0024].UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "Accounts", zb0023, zb0024)
							return
						}
					}
				}
			case "apatbm":
				{
					var zb0418 []byte
					var zb0419 int
					zb0419, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAccounts")
						return
					}
					if zb0419 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0419), uint64(maxBitmaskSize))
						return
					}
					zb0418, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskAccounts))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAccounts")
						return
					}
					(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskAccounts = bitmask(zb0418)
				}
			case "apfa":
				var zb0420 int
				var zb0421 bool
				zb0420, zb0421, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ForeignApps")
					return
				}
				if zb0420 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0420), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ForeignApps")
					return
				}
				if zb0421 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps = nil
				} else if (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps) >= zb0420 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps = ((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps)[:zb0420]
				} else {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps = make([]appIndices, zb0420)
				}
				for zb0025 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps {
					var zb0422 int
					var zb0423 bool
					zb0422, zb0423, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ForeignApps", zb0025)
						return
					}
					if zb0422 > transactions.EncodedMaxForeignApps {
						err = msgp.ErrOverflow(uint64(zb0422), uint64(transactions.EncodedMaxForeignApps))
						err = msgp.WrapError(err, "ForeignApps", zb0025)
						return
					}
					if zb0423 {
						(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025] = nil
					} else if (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025] != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025]) >= zb0422 {
						(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025] = ((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025])[:zb0422]
					} else {
						(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025] = make(appIndices, zb0422)
					}
					for zb0026 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025] {
						bts, err = (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025][zb0026].UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "ForeignApps", zb0025, zb0026)
							return
						}
					}
				}
			case "apfabm":
				{
					var zb0424 []byte
					var zb0425 int
					zb0425, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskForeignApps")
						return
					}
					if zb0425 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0425), uint64(maxBitmaskSize))
						return
					}
					zb0424, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignApps))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskForeignApps")
						return
					}
					(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignApps = bitmask(zb0424)
				}
			case "apas":
				var zb0426 int
				var zb0427 bool
				zb0426, zb0427, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ForeignAssets")
					return
				}
				if zb0426 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0426), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ForeignAssets")
					return
				}
				if zb0427 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets = nil
				} else if (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets) >= zb0426 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets = ((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets)[:zb0426]
				} else {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets = make([]assetIndices, zb0426)
				}
				for zb0027 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets {
					var zb0428 int
					var zb0429 bool
					zb0428, zb0429, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ForeignAssets", zb0027)
						return
					}
					if zb0428 > transactions.EncodedMaxForeignAssets {
						err = msgp.ErrOverflow(uint64(zb0428), uint64(transactions.EncodedMaxForeignAssets))
						err = msgp.WrapError(err, "ForeignAssets", zb0027)
						return
					}
					if zb0429 {
						(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027] = nil
					} else if (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027] != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027]) >= zb0428 {
						(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027] = ((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027])[:zb0428]
					} else {
						(*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027] = make(assetIndices, zb0428)
					}
					for zb0028 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027] {
						bts, err = (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027][zb0028].UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "ForeignAssets", zb0027, zb0028)
							return
						}
					}
				}
			case "apasbm":
				{
					var zb0430 []byte
					var zb0431 int
					zb0431, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskForeignAssets")
						return
					}
					if zb0431 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0431), uint64(maxBitmaskSize))
						return
					}
					zb0430, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignAssets))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskForeignAssets")
						return
					}
					(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignAssets = bitmask(zb0430)
				}
			case "lnui":
				var zb0432 int
				var zb0433 bool
				zb0432, zb0433, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LocalNumUint")
					return
				}
				if zb0432 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0432), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "LocalNumUint")
					return
				}
				if zb0433 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint = nil
				} else if (*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint) >= zb0432 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint = ((*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint)[:zb0432]
				} else {
					(*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint = make([]uint64, zb0432)
				}
				for zb0029 := range (*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint {
					(*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint[zb0029], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "LocalNumUint", zb0029)
						return
					}
				}
			case "lnuibm":
				{
					var zb0434 []byte
					var zb0435 int
					zb0435, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLocalNumUint")
						return
					}
					if zb0435 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0435), uint64(maxBitmaskSize))
						return
					}
					zb0434, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumUint))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLocalNumUint")
						return
					}
					(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumUint = bitmask(zb0434)
				}
			case "lnbs":
				var zb0436 int
				var zb0437 bool
				zb0436, zb0437, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LocalNumByteSlice")
					return
				}
				if zb0436 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0436), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "LocalNumByteSlice")
					return
				}
				if zb0437 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice = nil
				} else if (*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice) >= zb0436 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice = ((*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice)[:zb0436]
				} else {
					(*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice = make([]uint64, zb0436)
				}
				for zb0030 := range (*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice {
					(*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice[zb0030], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "LocalNumByteSlice", zb0030)
						return
					}
				}
			case "lnbsbm":
				{
					var zb0438 []byte
					var zb0439 int
					zb0439, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLocalNumByteSlice")
						return
					}
					if zb0439 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0439), uint64(maxBitmaskSize))
						return
					}
					zb0438, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLocalNumByteSlice")
						return
					}
					(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice = bitmask(zb0438)
				}
			case "gnui":
				var zb0440 int
				var zb0441 bool
				zb0440, zb0441, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "GlobalNumUint")
					return
				}
				if zb0440 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0440), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "GlobalNumUint")
					return
				}
				if zb0441 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint = nil
				} else if (*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint) >= zb0440 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint = ((*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint)[:zb0440]
				} else {
					(*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint = make([]uint64, zb0440)
				}
				for zb0031 := range (*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint {
					(*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint[zb0031], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "GlobalNumUint", zb0031)
						return
					}
				}
			case "gnuibm":
				{
					var zb0442 []byte
					var zb0443 int
					zb0443, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGlobalNumUint")
						return
					}
					if zb0443 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0443), uint64(maxBitmaskSize))
						return
					}
					zb0442, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumUint))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGlobalNumUint")
						return
					}
					(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumUint = bitmask(zb0442)
				}
			case "gnbs":
				var zb0444 int
				var zb0445 bool
				zb0444, zb0445, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "GlobalNumByteSlice")
					return
				}
				if zb0444 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0444), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "GlobalNumByteSlice")
					return
				}
				if zb0445 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice = nil
				} else if (*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice) >= zb0444 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice = ((*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice)[:zb0444]
				} else {
					(*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice = make([]uint64, zb0444)
				}
				for zb0032 := range (*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice {
					(*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice[zb0032], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "GlobalNumByteSlice", zb0032)
						return
					}
				}
			case "gnbsbm":
				{
					var zb0446 []byte
					var zb0447 int
					zb0447, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGlobalNumByteSlice")
						return
					}
					if zb0447 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0447), uint64(maxBitmaskSize))
						return
					}
					zb0446, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGlobalNumByteSlice")
						return
					}
					(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice = bitmask(zb0446)
				}
			case "apap":
				var zb0448 int
				var zb0449 bool
				zb0448, zb0449, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApprovalProgram")
					return
				}
				if zb0448 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0448), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ApprovalProgram")
					return
				}
				if zb0449 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram = nil
				} else if (*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram) >= zb0448 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram = ((*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram)[:zb0448]
				} else {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram = make([]program, zb0448)
				}
				for zb0033 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram {
					{
						var zb0450 []byte
						var zb0451 int
						zb0451, err = msgp.ReadBytesBytesHeader(bts)
						if err != nil {
							err = msgp.WrapError(err, "ApprovalProgram", zb0033)
							return
						}
						if zb0451 > config.MaxAppProgramLen {
							err = msgp.ErrOverflow(uint64(zb0451), uint64(config.MaxAppProgramLen))
							return
						}
						zb0450, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram[zb0033]))
						if err != nil {
							err = msgp.WrapError(err, "ApprovalProgram", zb0033)
							return
						}
						(*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram[zb0033] = program(zb0450)
					}
				}
			case "apapbm":
				{
					var zb0452 []byte
					var zb0453 int
					zb0453, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApprovalProgram")
						return
					}
					if zb0453 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0453), uint64(maxBitmaskSize))
						return
					}
					zb0452, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApprovalProgram))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApprovalProgram")
						return
					}
					(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApprovalProgram = bitmask(zb0452)
				}
			case "apsu":
				var zb0454 int
				var zb0455 bool
				zb0454, zb0455, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ClearStateProgram")
					return
				}
				if zb0454 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0454), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ClearStateProgram")
					return
				}
				if zb0455 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram = nil
				} else if (*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram != nil && cap((*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram) >= zb0454 {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram = ((*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram)[:zb0454]
				} else {
					(*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram = make([]program, zb0454)
				}
				for zb0034 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram {
					{
						var zb0456 []byte
						var zb0457 int
						zb0457, err = msgp.ReadBytesBytesHeader(bts)
						if err != nil {
							err = msgp.WrapError(err, "ClearStateProgram", zb0034)
							return
						}
						if zb0457 > config.MaxAppProgramLen {
							err = msgp.ErrOverflow(uint64(zb0457), uint64(config.MaxAppProgramLen))
							return
						}
						zb0456, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram[zb0034]))
						if err != nil {
							err = msgp.WrapError(err, "ClearStateProgram", zb0034)
							return
						}
						(*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram[zb0034] = program(zb0456)
					}
				}
			case "apsubm":
				{
					var zb0458 []byte
					var zb0459 int
					zb0459, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskClearStateProgram")
						return
					}
					if zb0459 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0459), uint64(maxBitmaskSize))
						return
					}
					zb0458, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskClearStateProgram))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskClearStateProgram")
						return
					}
					(*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskClearStateProgram = bitmask(zb0458)
				}
			case "certrnd":
				var zb0460 int
				var zb0461 bool
				zb0460, zb0461, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "CertRound")
					return
				}
				if zb0460 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0460), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "CertRound")
					return
				}
				if zb0461 {
					(*z).encodedTxns.encodedCompactCertTxnFields.CertRound = nil
				} else if (*z).encodedTxns.encodedCompactCertTxnFields.CertRound != nil && cap((*z).encodedTxns.encodedCompactCertTxnFields.CertRound) >= zb0460 {
					(*z).encodedTxns.encodedCompactCertTxnFields.CertRound = ((*z).encodedTxns.encodedCompactCertTxnFields.CertRound)[:zb0460]
				} else {
					(*z).encodedTxns.encodedCompactCertTxnFields.CertRound = make([]basics.Round, zb0460)
				}
				for zb0035 := range (*z).encodedTxns.encodedCompactCertTxnFields.CertRound {
					bts, err = (*z).encodedTxns.encodedCompactCertTxnFields.CertRound[zb0035].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "CertRound", zb0035)
						return
					}
				}
			case "certrndbm":
				{
					var zb0462 []byte
					var zb0463 int
					zb0463, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCertRound")
						return
					}
					if zb0463 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0463), uint64(maxBitmaskSize))
						return
					}
					zb0462, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCertRound))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCertRound")
						return
					}
					(*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCertRound = bitmask(zb0462)
				}
			case "certtype":
				var zb0464 int
				var zb0465 bool
				zb0464, zb0465, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "CertType")
					return
				}
				if zb0464 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0464), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "CertType")
					return
				}
				if zb0465 {
					(*z).encodedTxns.encodedCompactCertTxnFields.CertType = nil
				} else if (*z).encodedTxns.encodedCompactCertTxnFields.CertType != nil && cap((*z).encodedTxns.encodedCompactCertTxnFields.CertType) >= zb0464 {
					(*z).encodedTxns.encodedCompactCertTxnFields.CertType = ((*z).encodedTxns.encodedCompactCertTxnFields.CertType)[:zb0464]
				} else {
					(*z).encodedTxns.encodedCompactCertTxnFields.CertType = make([]protocol.CompactCertType, zb0464)
				}
				for zb0036 := range (*z).encodedTxns.encodedCompactCertTxnFields.CertType {
					bts, err = (*z).encodedTxns.encodedCompactCertTxnFields.CertType[zb0036].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "CertType", zb0036)
						return
					}
				}
			case "certtypebm":
				{
					var zb0466 []byte
					var zb0467 int
					zb0467, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCertType")
						return
					}
					if zb0467 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0467), uint64(maxBitmaskSize))
						return
					}
					zb0466, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCertType))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCertType")
						return
					}
					(*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCertType = bitmask(zb0466)
				}
			case "cert":
				var zb0468 int
				var zb0469 bool
				zb0468, zb0469, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cert")
					return
				}
				if zb0468 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0468), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Cert")
					return
				}
				if zb0469 {
					(*z).encodedTxns.encodedCompactCertTxnFields.Cert = nil
				} else if (*z).encodedTxns.encodedCompactCertTxnFields.Cert != nil && cap((*z).encodedTxns.encodedCompactCertTxnFields.Cert) >= zb0468 {
					(*z).encodedTxns.encodedCompactCertTxnFields.Cert = ((*z).encodedTxns.encodedCompactCertTxnFields.Cert)[:zb0468]
				} else {
					(*z).encodedTxns.encodedCompactCertTxnFields.Cert = make([]compactcert.Cert, zb0468)
				}
				for zb0037 := range (*z).encodedTxns.encodedCompactCertTxnFields.Cert {
					bts, err = (*z).encodedTxns.encodedCompactCertTxnFields.Cert[zb0037].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Cert", zb0037)
						return
					}
				}
			case "certbm":
				{
					var zb0470 []byte
					var zb0471 int
					zb0471, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCert")
						return
					}
					if zb0471 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0471), uint64(maxBitmaskSize))
						return
					}
					zb0470, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCert))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCert")
						return
					}
					(*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCert = bitmask(zb0470)
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *encodedSignedTxns) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedSignedTxns)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *encodedSignedTxns) Msgsize() (s int) {
	s = 3 + 4 + msgp.BytesPrefixSize + len((*z).Sig) + 6 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskSig)) + 5 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).Msig {
		s += (*z).Msig[zb0001].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskMsig)) + 5 + msgp.ArrayHeaderSize
	for zb0002 := range (*z).Lsig {
		s += (*z).Lsig[zb0002].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskLsig)) + 5 + msgp.BytesPrefixSize + len((*z).AuthAddr) + 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskAuthAddr)) + 5 + msgp.BytesPrefixSize + len((*z).encodedTxns.TxType) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.BitmaskTxType)) + 4 + msgp.BytesPrefixSize + len((*z).encodedTxns.encodedTxnHeaders.Sender) + 6 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedTxnHeaders.BitmaskSender)) + 4 + msgp.ArrayHeaderSize
	for zb0003 := range (*z).encodedTxns.encodedTxnHeaders.Fee {
		s += (*z).encodedTxns.encodedTxnHeaders.Fee[zb0003].Msgsize()
	}
	s += 6 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedTxnHeaders.BitmaskFee)) + 3 + msgp.ArrayHeaderSize
	for zb0004 := range (*z).encodedTxns.encodedTxnHeaders.FirstValid {
		s += (*z).encodedTxns.encodedTxnHeaders.FirstValid[zb0004].Msgsize()
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedTxnHeaders.BitmaskFirstValid)) + 3 + msgp.ArrayHeaderSize
	for zb0005 := range (*z).encodedTxns.encodedTxnHeaders.LastValid {
		s += (*z).encodedTxns.encodedTxnHeaders.LastValid[zb0005].Msgsize()
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedTxnHeaders.BitmaskLastValid)) + 5 + msgp.ArrayHeaderSize
	for zb0006 := range (*z).encodedTxns.encodedTxnHeaders.Note {
		s += msgp.BytesPrefixSize + len((*z).encodedTxns.encodedTxnHeaders.Note[zb0006])
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedTxnHeaders.BitmaskNote)) + 4 + msgp.StringPrefixSize + len((*z).encodedTxns.encodedTxnHeaders.GenesisID) + 6 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedTxnHeaders.BitmaskGenesisID)) + 3 + (*z).encodedTxns.encodedTxnHeaders.GenesisHash.Msgsize() + 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedTxnHeaders.BitmaskGenesisHash)) + 6 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedTxnHeaders.BitmaskGroup)) + 3 + msgp.BytesPrefixSize + len((*z).encodedTxns.encodedTxnHeaders.Lease) + 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedTxnHeaders.BitmaskLease)) + 6 + msgp.BytesPrefixSize + len((*z).encodedTxns.encodedTxnHeaders.RekeyTo) + 8 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedTxnHeaders.BitmaskRekeyTo)) + 8 + msgp.BytesPrefixSize + len((*z).encodedTxns.encodedKeyregTxnFields.VotePK) + 10 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVotePK)) + 7 + msgp.BytesPrefixSize + len((*z).encodedTxns.encodedKeyregTxnFields.SelectionPK) + 9 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskSelectionPK)) + 8 + msgp.ArrayHeaderSize
	for zb0007 := range (*z).encodedTxns.encodedKeyregTxnFields.VoteFirst {
		s += (*z).encodedTxns.encodedKeyregTxnFields.VoteFirst[zb0007].Msgsize()
	}
	s += 10 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteFirst)) + 8 + msgp.ArrayHeaderSize
	for zb0008 := range (*z).encodedTxns.encodedKeyregTxnFields.VoteLast {
		s += (*z).encodedTxns.encodedKeyregTxnFields.VoteLast[zb0008].Msgsize()
	}
	s += 10 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteLast)) + 7 + msgp.ArrayHeaderSize + (len((*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution) * (msgp.Uint64Size)) + 9 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteKeyDilution)) + 10 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedKeyregTxnFields.BitmaskNonparticipation)) + 4 + msgp.BytesPrefixSize + len((*z).encodedTxns.encodedPaymentTxnFields.Receiver) + 6 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedPaymentTxnFields.BitmaskReceiver)) + 4 + msgp.ArrayHeaderSize
	for zb0010 := range (*z).encodedTxns.encodedPaymentTxnFields.Amount {
		s += (*z).encodedTxns.encodedPaymentTxnFields.Amount[zb0010].Msgsize()
	}
	s += 6 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedPaymentTxnFields.BitmaskAmount)) + 6 + msgp.BytesPrefixSize + len((*z).encodedTxns.encodedPaymentTxnFields.CloseRemainderTo) + 8 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedPaymentTxnFields.BitmaskCloseRemainderTo)) + 5 + msgp.ArrayHeaderSize
	for zb0011 := range (*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset {
		s += (*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset[zb0011].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedAssetConfigTxnFields.BitmaskConfigAsset)) + 2 + msgp.ArrayHeaderSize + (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total) * (msgp.Uint64Size)) + 4 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal)) + 3 + msgp.ArrayHeaderSize + (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals) * (msgp.Uint32Size)) + 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals)) + 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen)) + 3 + msgp.ArrayHeaderSize
	for zb0014 := range (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName {
		s += msgp.StringPrefixSize + len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName[zb0014])
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName)) + 3 + msgp.ArrayHeaderSize
	for zb0015 := range (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName {
		s += msgp.StringPrefixSize + len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName[zb0015])
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName)) + 3 + msgp.ArrayHeaderSize
	for zb0016 := range (*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL {
		s += msgp.StringPrefixSize + len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL[zb0016])
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL)) + 3 + msgp.BytesPrefixSize + len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash) + 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash)) + 2 + msgp.BytesPrefixSize + len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Manager) + 4 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager)) + 2 + msgp.BytesPrefixSize + len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Reserve) + 4 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve)) + 2 + msgp.BytesPrefixSize + len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Freeze) + 4 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze)) + 2 + msgp.BytesPrefixSize + len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Clawback) + 4 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback)) + 5 + msgp.ArrayHeaderSize
	for zb0017 := range (*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset {
		s += (*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset[zb0017].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskXferAsset)) + 5 + msgp.ArrayHeaderSize + (len((*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount) * (msgp.Uint64Size)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetAmount)) + 5 + msgp.BytesPrefixSize + len((*z).encodedTxns.encodedAssetTransferTxnFields.AssetSender) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetSender)) + 5 + msgp.BytesPrefixSize + len((*z).encodedTxns.encodedAssetTransferTxnFields.AssetReceiver) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetReceiver)) + 7 + msgp.BytesPrefixSize + len((*z).encodedTxns.encodedAssetTransferTxnFields.AssetCloseTo) + 9 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetCloseTo)) + 5 + msgp.BytesPrefixSize + len((*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAccount) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAccount)) + 5 + msgp.ArrayHeaderSize
	for zb0019 := range (*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset {
		s += (*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset[zb0019].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAsset)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskAssetFrozen)) + 5 + msgp.ArrayHeaderSize
	for zb0020 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID {
		s += (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID[zb0020].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationID)) + 5 + msgp.BytesPrefixSize + len((*z).encodedTxns.encodedApplicationCallTxnFields.OnCompletion) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskOnCompletion)) + 5 + msgp.ArrayHeaderSize
	for zb0021 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs {
		s += msgp.ArrayHeaderSize
		for zb0022 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021] {
			s += msgp.BytesPrefixSize + len((*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0021][zb0022])
		}
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationArgs)) + 5 + msgp.ArrayHeaderSize
	for zb0023 := range (*z).encodedTxns.encodedApplicationCallTxnFields.Accounts {
		s += msgp.ArrayHeaderSize
		for zb0024 := range (*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023] {
			s += (*z).encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0023][zb0024].Msgsize()
		}
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskAccounts)) + 5 + msgp.ArrayHeaderSize
	for zb0025 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps {
		s += msgp.ArrayHeaderSize
		for zb0026 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025] {
			s += (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0025][zb0026].Msgsize()
		}
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignApps)) + 5 + msgp.ArrayHeaderSize
	for zb0027 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets {
		s += msgp.ArrayHeaderSize
		for zb0028 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027] {
			s += (*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0027][zb0028].Msgsize()
		}
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignAssets)) + 5 + msgp.ArrayHeaderSize + (len((*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint) * (msgp.Uint64Size)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumUint)) + 5 + msgp.ArrayHeaderSize + (len((*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice) * (msgp.Uint64Size)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice)) + 5 + msgp.ArrayHeaderSize + (len((*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint) * (msgp.Uint64Size)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumUint)) + 5 + msgp.ArrayHeaderSize + (len((*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice) * (msgp.Uint64Size)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice)) + 5 + msgp.ArrayHeaderSize
	for zb0033 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram {
		s += msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram[zb0033]))
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApprovalProgram)) + 5 + msgp.ArrayHeaderSize
	for zb0034 := range (*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram {
		s += msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram[zb0034]))
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskClearStateProgram)) + 8 + msgp.ArrayHeaderSize
	for zb0035 := range (*z).encodedTxns.encodedCompactCertTxnFields.CertRound {
		s += (*z).encodedTxns.encodedCompactCertTxnFields.CertRound[zb0035].Msgsize()
	}
	s += 10 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCertRound)) + 9 + msgp.ArrayHeaderSize
	for zb0036 := range (*z).encodedTxns.encodedCompactCertTxnFields.CertType {
		s += (*z).encodedTxns.encodedCompactCertTxnFields.CertType[zb0036].Msgsize()
	}
	s += 11 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCertType)) + 5 + msgp.ArrayHeaderSize
	for zb0037 := range (*z).encodedTxns.encodedCompactCertTxnFields.Cert {
		s += (*z).encodedTxns.encodedCompactCertTxnFields.Cert[zb0037].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCert))
	return
}

// MsgIsZero returns whether this is a zero value
func (z *encodedSignedTxns) MsgIsZero() bool {
	return (len((*z).Sig) == 0) && (len((*z).BitmaskSig) == 0) && (len((*z).Msig) == 0) && (len((*z).BitmaskMsig) == 0) && (len((*z).Lsig) == 0) && (len((*z).BitmaskLsig) == 0) && (len((*z).AuthAddr) == 0) && (len((*z).BitmaskAuthAddr) == 0) && (len((*z).encodedTxns.TxType) == 0) && (len((*z).encodedTxns.BitmaskTxType) == 0) && (len((*z).encodedTxns.encodedTxnHeaders.Sender) == 0) && (len((*z).encodedTxns.encodedTxnHeaders.BitmaskSender) == 0) && (len((*z).encodedTxns.encodedTxnHeaders.Fee) == 0) && (len((*z).encodedTxns.encodedTxnHeaders.BitmaskFee) == 0) && (len((*z).encodedTxns.encodedTxnHeaders.FirstValid) == 0) && (len((*z).encodedTxns.encodedTxnHeaders.BitmaskFirstValid) == 0) && (len((*z).encodedTxns.encodedTxnHeaders.LastValid) == 0) && (len((*z).encodedTxns.encodedTxnHeaders.BitmaskLastValid) == 0) && (len((*z).encodedTxns.encodedTxnHeaders.Note) == 0) && (len((*z).encodedTxns.encodedTxnHeaders.BitmaskNote) == 0) && ((*z).encodedTxns.encodedTxnHeaders.GenesisID == "") && (len((*z).encodedTxns.encodedTxnHeaders.BitmaskGenesisID) == 0) && ((*z).encodedTxns.encodedTxnHeaders.GenesisHash.MsgIsZero()) && (len((*z).encodedTxns.encodedTxnHeaders.BitmaskGenesisHash) == 0) && (len((*z).encodedTxns.encodedTxnHeaders.BitmaskGroup) == 0) && (len((*z).encodedTxns.encodedTxnHeaders.Lease) == 0) && (len((*z).encodedTxns.encodedTxnHeaders.BitmaskLease) == 0) && (len((*z).encodedTxns.encodedTxnHeaders.RekeyTo) == 0) && (len((*z).encodedTxns.encodedTxnHeaders.BitmaskRekeyTo) == 0) && (len((*z).encodedTxns.encodedKeyregTxnFields.VotePK) == 0) && (len((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVotePK) == 0) && (len((*z).encodedTxns.encodedKeyregTxnFields.SelectionPK) == 0) && (len((*z).encodedTxns.encodedKeyregTxnFields.BitmaskSelectionPK) == 0) && (len((*z).encodedTxns.encodedKeyregTxnFields.VoteFirst) == 0) && (len((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteFirst) == 0) && (len((*z).encodedTxns.encodedKeyregTxnFields.VoteLast) == 0) && (len((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteLast) == 0) && (len((*z).encodedTxns.encodedKeyregTxnFields.VoteKeyDilution) == 0) && (len((*z).encodedTxns.encodedKeyregTxnFields.BitmaskVoteKeyDilution) == 0) && (len((*z).encodedTxns.encodedKeyregTxnFields.BitmaskNonparticipation) == 0) && (len((*z).encodedTxns.encodedPaymentTxnFields.Receiver) == 0) && (len((*z).encodedTxns.encodedPaymentTxnFields.BitmaskReceiver) == 0) && (len((*z).encodedTxns.encodedPaymentTxnFields.Amount) == 0) && (len((*z).encodedTxns.encodedPaymentTxnFields.BitmaskAmount) == 0) && (len((*z).encodedTxns.encodedPaymentTxnFields.CloseRemainderTo) == 0) && (len((*z).encodedTxns.encodedPaymentTxnFields.BitmaskCloseRemainderTo) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.ConfigAsset) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.BitmaskConfigAsset) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Manager) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Reserve) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Freeze) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Clawback) == 0) && (len((*z).encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback) == 0) && (len((*z).encodedTxns.encodedAssetTransferTxnFields.XferAsset) == 0) && (len((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskXferAsset) == 0) && (len((*z).encodedTxns.encodedAssetTransferTxnFields.AssetAmount) == 0) && (len((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetAmount) == 0) && (len((*z).encodedTxns.encodedAssetTransferTxnFields.AssetSender) == 0) && (len((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetSender) == 0) && (len((*z).encodedTxns.encodedAssetTransferTxnFields.AssetReceiver) == 0) && (len((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetReceiver) == 0) && (len((*z).encodedTxns.encodedAssetTransferTxnFields.AssetCloseTo) == 0) && (len((*z).encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetCloseTo) == 0) && (len((*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAccount) == 0) && (len((*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAccount) == 0) && (len((*z).encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset) == 0) && (len((*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAsset) == 0) && (len((*z).encodedTxns.encodedAssetFreezeTxnFields.BitmaskAssetFrozen) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationID) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationID) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.OnCompletion) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskOnCompletion) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationArgs) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.Accounts) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskAccounts) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignApps) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignApps) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.ForeignAssets) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignAssets) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumUint) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumUint) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumUint) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskApprovalProgram) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram) == 0) && (len((*z).encodedTxns.encodedApplicationCallTxnFields.BitmaskClearStateProgram) == 0) && (len((*z).encodedTxns.encodedCompactCertTxnFields.CertRound) == 0) && (len((*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCertRound) == 0) && (len((*z).encodedTxns.encodedCompactCertTxnFields.CertType) == 0) && (len((*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCertType) == 0) && (len((*z).encodedTxns.encodedCompactCertTxnFields.Cert) == 0) && (len((*z).encodedTxns.encodedCompactCertTxnFields.BitmaskCert) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *encodedTxnHeaders) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0005Len := uint32(19)
	var zb0005Mask uint32 /* 20 bits */
	if len((*z).Fee) == 0 {
		zb0005Len--
		zb0005Mask |= 0x2
	}
	if len((*z).BitmaskFee) == 0 {
		zb0005Len--
		zb0005Mask |= 0x4
	}
	if len((*z).FirstValid) == 0 {
		zb0005Len--
		zb0005Mask |= 0x8
	}
	if len((*z).BitmaskFirstValid) == 0 {
		zb0005Len--
		zb0005Mask |= 0x10
	}
	if (*z).GenesisID == "" {
		zb0005Len--
		zb0005Mask |= 0x20
	}
	if len((*z).BitmaskGenesisID) == 0 {
		zb0005Len--
		zb0005Mask |= 0x40
	}
	if (*z).GenesisHash.MsgIsZero() {
		zb0005Len--
		zb0005Mask |= 0x80
	}
	if len((*z).BitmaskGenesisHash) == 0 {
		zb0005Len--
		zb0005Mask |= 0x100
	}
	if len((*z).BitmaskGroup) == 0 {
		zb0005Len--
		zb0005Mask |= 0x200
	}
	if len((*z).LastValid) == 0 {
		zb0005Len--
		zb0005Mask |= 0x400
	}
	if len((*z).BitmaskLastValid) == 0 {
		zb0005Len--
		zb0005Mask |= 0x800
	}
	if len((*z).Lease) == 0 {
		zb0005Len--
		zb0005Mask |= 0x1000
	}
	if len((*z).BitmaskLease) == 0 {
		zb0005Len--
		zb0005Mask |= 0x2000
	}
	if len((*z).Note) == 0 {
		zb0005Len--
		zb0005Mask |= 0x4000
	}
	if len((*z).BitmaskNote) == 0 {
		zb0005Len--
		zb0005Mask |= 0x8000
	}
	if len((*z).RekeyTo) == 0 {
		zb0005Len--
		zb0005Mask |= 0x10000
	}
	if len((*z).BitmaskRekeyTo) == 0 {
		zb0005Len--
		zb0005Mask |= 0x20000
	}
	if len((*z).Sender) == 0 {
		zb0005Len--
		zb0005Mask |= 0x40000
	}
	if len((*z).BitmaskSender) == 0 {
		zb0005Len--
		zb0005Mask |= 0x80000
	}
	// variable map header, size zb0005Len
	o = msgp.AppendMapHeader(o, zb0005Len)
	if zb0005Len != 0 {
		if (zb0005Mask & 0x2) == 0 { // if not empty
			// string "fee"
			o = append(o, 0xa3, 0x66, 0x65, 0x65)
			if (*z).Fee == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Fee)))
			}
			for zb0001 := range (*z).Fee {
				o = (*z).Fee[zb0001].MarshalMsg(o)
			}
		}
		if (zb0005Mask & 0x4) == 0 { // if not empty
			// string "feebm"
			o = append(o, 0xa5, 0x66, 0x65, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskFee))
		}
		if (zb0005Mask & 0x8) == 0 { // if not empty
			// string "fv"
			o = append(o, 0xa2, 0x66, 0x76)
			if (*z).FirstValid == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).FirstValid)))
			}
			for zb0002 := range (*z).FirstValid {
				o = (*z).FirstValid[zb0002].MarshalMsg(o)
			}
		}
		if (zb0005Mask & 0x10) == 0 { // if not empty
			// string "fvbm"
			o = append(o, 0xa4, 0x66, 0x76, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskFirstValid))
		}
		if (zb0005Mask & 0x20) == 0 { // if not empty
			// string "gen"
			o = append(o, 0xa3, 0x67, 0x65, 0x6e)
			o = msgp.AppendString(o, (*z).GenesisID)
		}
		if (zb0005Mask & 0x40) == 0 { // if not empty
			// string "genbm"
			o = append(o, 0xa5, 0x67, 0x65, 0x6e, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskGenesisID))
		}
		if (zb0005Mask & 0x80) == 0 { // if not empty
			// string "gh"
			o = append(o, 0xa2, 0x67, 0x68)
			o = (*z).GenesisHash.MarshalMsg(o)
		}
		if (zb0005Mask & 0x100) == 0 { // if not empty
			// string "ghbm"
			o = append(o, 0xa4, 0x67, 0x68, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskGenesisHash))
		}
		if (zb0005Mask & 0x200) == 0 { // if not empty
			// string "grpbm"
			o = append(o, 0xa5, 0x67, 0x72, 0x70, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskGroup))
		}
		if (zb0005Mask & 0x400) == 0 { // if not empty
			// string "lv"
			o = append(o, 0xa2, 0x6c, 0x76)
			if (*z).LastValid == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).LastValid)))
			}
			for zb0003 := range (*z).LastValid {
				o = (*z).LastValid[zb0003].MarshalMsg(o)
			}
		}
		if (zb0005Mask & 0x800) == 0 { // if not empty
			// string "lvbm"
			o = append(o, 0xa4, 0x6c, 0x76, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskLastValid))
		}
		if (zb0005Mask & 0x1000) == 0 { // if not empty
			// string "lx"
			o = append(o, 0xa2, 0x6c, 0x78)
			o = msgp.AppendBytes(o, (*z).Lease)
		}
		if (zb0005Mask & 0x2000) == 0 { // if not empty
			// string "lxbm"
			o = append(o, 0xa4, 0x6c, 0x78, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskLease))
		}
		if (zb0005Mask & 0x4000) == 0 { // if not empty
			// string "note"
			o = append(o, 0xa4, 0x6e, 0x6f, 0x74, 0x65)
			if (*z).Note == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Note)))
			}
			for zb0004 := range (*z).Note {
				o = msgp.AppendBytes(o, (*z).Note[zb0004])
			}
		}
		if (zb0005Mask & 0x8000) == 0 { // if not empty
			// string "notebm"
			o = append(o, 0xa6, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskNote))
		}
		if (zb0005Mask & 0x10000) == 0 { // if not empty
			// string "rekey"
			o = append(o, 0xa5, 0x72, 0x65, 0x6b, 0x65, 0x79)
			o = msgp.AppendBytes(o, (*z).RekeyTo)
		}
		if (zb0005Mask & 0x20000) == 0 { // if not empty
			// string "rekeybm"
			o = append(o, 0xa7, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskRekeyTo))
		}
		if (zb0005Mask & 0x40000) == 0 { // if not empty
			// string "snd"
			o = append(o, 0xa3, 0x73, 0x6e, 0x64)
			o = msgp.AppendBytes(o, (*z).Sender)
		}
		if (zb0005Mask & 0x80000) == 0 { // if not empty
			// string "sndbm"
			o = append(o, 0xa5, 0x73, 0x6e, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskSender))
		}
	}
	return
}

func (_ *encodedTxnHeaders) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedTxnHeaders)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *encodedTxnHeaders) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0005 int
	var zb0006 bool
	zb0005, zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0005, zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0005 > 0 {
			zb0005--
			var zb0007 int
			zb0007, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Sender")
				return
			}
			if zb0007 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0007), uint64(maxAddressBytes))
				return
			}
			(*z).Sender, bts, err = msgp.ReadBytesBytes(bts, (*z).Sender)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Sender")
				return
			}
		}
		if zb0005 > 0 {
			zb0005--
			{
				var zb0008 []byte
				var zb0009 int
				zb0009, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskSender")
					return
				}
				if zb0009 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0009), uint64(maxBitmaskSize))
					return
				}
				zb0008, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskSender))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskSender")
					return
				}
				(*z).BitmaskSender = bitmask(zb0008)
			}
		}
		if zb0005 > 0 {
			zb0005--
			var zb0010 int
			var zb0011 bool
			zb0010, zb0011, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Fee")
				return
			}
			if zb0010 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0010), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Fee")
				return
			}
			if zb0011 {
				(*z).Fee = nil
			} else if (*z).Fee != nil && cap((*z).Fee) >= zb0010 {
				(*z).Fee = ((*z).Fee)[:zb0010]
			} else {
				(*z).Fee = make([]basics.MicroAlgos, zb0010)
			}
			for zb0001 := range (*z).Fee {
				bts, err = (*z).Fee[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Fee", zb0001)
					return
				}
			}
		}
		if zb0005 > 0 {
			zb0005--
			{
				var zb0012 []byte
				var zb0013 int
				zb0013, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFee")
					return
				}
				if zb0013 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0013), uint64(maxBitmaskSize))
					return
				}
				zb0012, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskFee))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFee")
					return
				}
				(*z).BitmaskFee = bitmask(zb0012)
			}
		}
		if zb0005 > 0 {
			zb0005--
			var zb0014 int
			var zb0015 bool
			zb0014, zb0015, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FirstValid")
				return
			}
			if zb0014 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0014), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "FirstValid")
				return
			}
			if zb0015 {
				(*z).FirstValid = nil
			} else if (*z).FirstValid != nil && cap((*z).FirstValid) >= zb0014 {
				(*z).FirstValid = ((*z).FirstValid)[:zb0014]
			} else {
				(*z).FirstValid = make([]basics.Round, zb0014)
			}
			for zb0002 := range (*z).FirstValid {
				bts, err = (*z).FirstValid[zb0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "FirstValid", zb0002)
					return
				}
			}
		}
		if zb0005 > 0 {
			zb0005--
			{
				var zb0016 []byte
				var zb0017 int
				zb0017, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFirstValid")
					return
				}
				if zb0017 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0017), uint64(maxBitmaskSize))
					return
				}
				zb0016, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskFirstValid))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFirstValid")
					return
				}
				(*z).BitmaskFirstValid = bitmask(zb0016)
			}
		}
		if zb0005 > 0 {
			zb0005--
			var zb0018 int
			var zb0019 bool
			zb0018, zb0019, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LastValid")
				return
			}
			if zb0018 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0018), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "LastValid")
				return
			}
			if zb0019 {
				(*z).LastValid = nil
			} else if (*z).LastValid != nil && cap((*z).LastValid) >= zb0018 {
				(*z).LastValid = ((*z).LastValid)[:zb0018]
			} else {
				(*z).LastValid = make([]basics.Round, zb0018)
			}
			for zb0003 := range (*z).LastValid {
				bts, err = (*z).LastValid[zb0003].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "LastValid", zb0003)
					return
				}
			}
		}
		if zb0005 > 0 {
			zb0005--
			{
				var zb0020 []byte
				var zb0021 int
				zb0021, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLastValid")
					return
				}
				if zb0021 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0021), uint64(maxBitmaskSize))
					return
				}
				zb0020, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskLastValid))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLastValid")
					return
				}
				(*z).BitmaskLastValid = bitmask(zb0020)
			}
		}
		if zb0005 > 0 {
			zb0005--
			var zb0022 int
			var zb0023 bool
			zb0022, zb0023, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Note")
				return
			}
			if zb0022 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0022), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Note")
				return
			}
			if zb0023 {
				(*z).Note = nil
			} else if (*z).Note != nil && cap((*z).Note) >= zb0022 {
				(*z).Note = ((*z).Note)[:zb0022]
			} else {
				(*z).Note = make([][]byte, zb0022)
			}
			for zb0004 := range (*z).Note {
				(*z).Note[zb0004], bts, err = msgp.ReadBytesBytes(bts, (*z).Note[zb0004])
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Note", zb0004)
					return
				}
			}
		}
		if zb0005 > 0 {
			zb0005--
			{
				var zb0024 []byte
				var zb0025 int
				zb0025, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskNote")
					return
				}
				if zb0025 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0025), uint64(maxBitmaskSize))
					return
				}
				zb0024, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskNote))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskNote")
					return
				}
				(*z).BitmaskNote = bitmask(zb0024)
			}
		}
		if zb0005 > 0 {
			zb0005--
			(*z).GenesisID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GenesisID")
				return
			}
		}
		if zb0005 > 0 {
			zb0005--
			{
				var zb0026 []byte
				var zb0027 int
				zb0027, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGenesisID")
					return
				}
				if zb0027 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0027), uint64(maxBitmaskSize))
					return
				}
				zb0026, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskGenesisID))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGenesisID")
					return
				}
				(*z).BitmaskGenesisID = bitmask(zb0026)
			}
		}
		if zb0005 > 0 {
			zb0005--
			bts, err = (*z).GenesisHash.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GenesisHash")
				return
			}
		}
		if zb0005 > 0 {
			zb0005--
			{
				var zb0028 []byte
				var zb0029 int
				zb0029, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGenesisHash")
					return
				}
				if zb0029 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0029), uint64(maxBitmaskSize))
					return
				}
				zb0028, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskGenesisHash))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGenesisHash")
					return
				}
				(*z).BitmaskGenesisHash = bitmask(zb0028)
			}
		}
		if zb0005 > 0 {
			zb0005--
			{
				var zb0030 []byte
				var zb0031 int
				zb0031, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGroup")
					return
				}
				if zb0031 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0031), uint64(maxBitmaskSize))
					return
				}
				zb0030, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskGroup))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGroup")
					return
				}
				(*z).BitmaskGroup = bitmask(zb0030)
			}
		}
		if zb0005 > 0 {
			zb0005--
			var zb0032 int
			zb0032, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Lease")
				return
			}
			if zb0032 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0032), uint64(maxAddressBytes))
				return
			}
			(*z).Lease, bts, err = msgp.ReadBytesBytes(bts, (*z).Lease)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Lease")
				return
			}
		}
		if zb0005 > 0 {
			zb0005--
			{
				var zb0033 []byte
				var zb0034 int
				zb0034, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLease")
					return
				}
				if zb0034 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0034), uint64(maxBitmaskSize))
					return
				}
				zb0033, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskLease))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLease")
					return
				}
				(*z).BitmaskLease = bitmask(zb0033)
			}
		}
		if zb0005 > 0 {
			zb0005--
			var zb0035 int
			zb0035, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RekeyTo")
				return
			}
			if zb0035 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0035), uint64(maxAddressBytes))
				return
			}
			(*z).RekeyTo, bts, err = msgp.ReadBytesBytes(bts, (*z).RekeyTo)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RekeyTo")
				return
			}
		}
		if zb0005 > 0 {
			zb0005--
			{
				var zb0036 []byte
				var zb0037 int
				zb0037, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskRekeyTo")
					return
				}
				if zb0037 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0037), uint64(maxBitmaskSize))
					return
				}
				zb0036, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskRekeyTo))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskRekeyTo")
					return
				}
				(*z).BitmaskRekeyTo = bitmask(zb0036)
			}
		}
		if zb0005 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0005)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0006 {
			(*z) = encodedTxnHeaders{}
		}
		for zb0005 > 0 {
			zb0005--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "snd":
				var zb0038 int
				zb0038, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sender")
					return
				}
				if zb0038 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0038), uint64(maxAddressBytes))
					return
				}
				(*z).Sender, bts, err = msgp.ReadBytesBytes(bts, (*z).Sender)
				if err != nil {
					err = msgp.WrapError(err, "Sender")
					return
				}
			case "sndbm":
				{
					var zb0039 []byte
					var zb0040 int
					zb0040, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskSender")
						return
					}
					if zb0040 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0040), uint64(maxBitmaskSize))
						return
					}
					zb0039, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskSender))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskSender")
						return
					}
					(*z).BitmaskSender = bitmask(zb0039)
				}
			case "fee":
				var zb0041 int
				var zb0042 bool
				zb0041, zb0042, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Fee")
					return
				}
				if zb0041 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0041), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Fee")
					return
				}
				if zb0042 {
					(*z).Fee = nil
				} else if (*z).Fee != nil && cap((*z).Fee) >= zb0041 {
					(*z).Fee = ((*z).Fee)[:zb0041]
				} else {
					(*z).Fee = make([]basics.MicroAlgos, zb0041)
				}
				for zb0001 := range (*z).Fee {
					bts, err = (*z).Fee[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Fee", zb0001)
						return
					}
				}
			case "feebm":
				{
					var zb0043 []byte
					var zb0044 int
					zb0044, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFee")
						return
					}
					if zb0044 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0044), uint64(maxBitmaskSize))
						return
					}
					zb0043, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskFee))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFee")
						return
					}
					(*z).BitmaskFee = bitmask(zb0043)
				}
			case "fv":
				var zb0045 int
				var zb0046 bool
				zb0045, zb0046, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "FirstValid")
					return
				}
				if zb0045 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0045), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "FirstValid")
					return
				}
				if zb0046 {
					(*z).FirstValid = nil
				} else if (*z).FirstValid != nil && cap((*z).FirstValid) >= zb0045 {
					(*z).FirstValid = ((*z).FirstValid)[:zb0045]
				} else {
					(*z).FirstValid = make([]basics.Round, zb0045)
				}
				for zb0002 := range (*z).FirstValid {
					bts, err = (*z).FirstValid[zb0002].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "FirstValid", zb0002)
						return
					}
				}
			case "fvbm":
				{
					var zb0047 []byte
					var zb0048 int
					zb0048, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFirstValid")
						return
					}
					if zb0048 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0048), uint64(maxBitmaskSize))
						return
					}
					zb0047, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskFirstValid))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFirstValid")
						return
					}
					(*z).BitmaskFirstValid = bitmask(zb0047)
				}
			case "lv":
				var zb0049 int
				var zb0050 bool
				zb0049, zb0050, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LastValid")
					return
				}
				if zb0049 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0049), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "LastValid")
					return
				}
				if zb0050 {
					(*z).LastValid = nil
				} else if (*z).LastValid != nil && cap((*z).LastValid) >= zb0049 {
					(*z).LastValid = ((*z).LastValid)[:zb0049]
				} else {
					(*z).LastValid = make([]basics.Round, zb0049)
				}
				for zb0003 := range (*z).LastValid {
					bts, err = (*z).LastValid[zb0003].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "LastValid", zb0003)
						return
					}
				}
			case "lvbm":
				{
					var zb0051 []byte
					var zb0052 int
					zb0052, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLastValid")
						return
					}
					if zb0052 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0052), uint64(maxBitmaskSize))
						return
					}
					zb0051, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskLastValid))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLastValid")
						return
					}
					(*z).BitmaskLastValid = bitmask(zb0051)
				}
			case "note":
				var zb0053 int
				var zb0054 bool
				zb0053, zb0054, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Note")
					return
				}
				if zb0053 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0053), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Note")
					return
				}
				if zb0054 {
					(*z).Note = nil
				} else if (*z).Note != nil && cap((*z).Note) >= zb0053 {
					(*z).Note = ((*z).Note)[:zb0053]
				} else {
					(*z).Note = make([][]byte, zb0053)
				}
				for zb0004 := range (*z).Note {
					(*z).Note[zb0004], bts, err = msgp.ReadBytesBytes(bts, (*z).Note[zb0004])
					if err != nil {
						err = msgp.WrapError(err, "Note", zb0004)
						return
					}
				}
			case "notebm":
				{
					var zb0055 []byte
					var zb0056 int
					zb0056, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskNote")
						return
					}
					if zb0056 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0056), uint64(maxBitmaskSize))
						return
					}
					zb0055, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskNote))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskNote")
						return
					}
					(*z).BitmaskNote = bitmask(zb0055)
				}
			case "gen":
				(*z).GenesisID, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "GenesisID")
					return
				}
			case "genbm":
				{
					var zb0057 []byte
					var zb0058 int
					zb0058, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGenesisID")
						return
					}
					if zb0058 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0058), uint64(maxBitmaskSize))
						return
					}
					zb0057, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskGenesisID))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGenesisID")
						return
					}
					(*z).BitmaskGenesisID = bitmask(zb0057)
				}
			case "gh":
				bts, err = (*z).GenesisHash.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "GenesisHash")
					return
				}
			case "ghbm":
				{
					var zb0059 []byte
					var zb0060 int
					zb0060, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGenesisHash")
						return
					}
					if zb0060 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0060), uint64(maxBitmaskSize))
						return
					}
					zb0059, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskGenesisHash))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGenesisHash")
						return
					}
					(*z).BitmaskGenesisHash = bitmask(zb0059)
				}
			case "grpbm":
				{
					var zb0061 []byte
					var zb0062 int
					zb0062, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGroup")
						return
					}
					if zb0062 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0062), uint64(maxBitmaskSize))
						return
					}
					zb0061, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskGroup))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGroup")
						return
					}
					(*z).BitmaskGroup = bitmask(zb0061)
				}
			case "lx":
				var zb0063 int
				zb0063, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Lease")
					return
				}
				if zb0063 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0063), uint64(maxAddressBytes))
					return
				}
				(*z).Lease, bts, err = msgp.ReadBytesBytes(bts, (*z).Lease)
				if err != nil {
					err = msgp.WrapError(err, "Lease")
					return
				}
			case "lxbm":
				{
					var zb0064 []byte
					var zb0065 int
					zb0065, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLease")
						return
					}
					if zb0065 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0065), uint64(maxBitmaskSize))
						return
					}
					zb0064, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskLease))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLease")
						return
					}
					(*z).BitmaskLease = bitmask(zb0064)
				}
			case "rekey":
				var zb0066 int
				zb0066, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "RekeyTo")
					return
				}
				if zb0066 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0066), uint64(maxAddressBytes))
					return
				}
				(*z).RekeyTo, bts, err = msgp.ReadBytesBytes(bts, (*z).RekeyTo)
				if err != nil {
					err = msgp.WrapError(err, "RekeyTo")
					return
				}
			case "rekeybm":
				{
					var zb0067 []byte
					var zb0068 int
					zb0068, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskRekeyTo")
						return
					}
					if zb0068 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0068), uint64(maxBitmaskSize))
						return
					}
					zb0067, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskRekeyTo))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskRekeyTo")
						return
					}
					(*z).BitmaskRekeyTo = bitmask(zb0067)
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *encodedTxnHeaders) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedTxnHeaders)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *encodedTxnHeaders) Msgsize() (s int) {
	s = 3 + 4 + msgp.BytesPrefixSize + len((*z).Sender) + 6 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskSender)) + 4 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).Fee {
		s += (*z).Fee[zb0001].Msgsize()
	}
	s += 6 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskFee)) + 3 + msgp.ArrayHeaderSize
	for zb0002 := range (*z).FirstValid {
		s += (*z).FirstValid[zb0002].Msgsize()
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskFirstValid)) + 3 + msgp.ArrayHeaderSize
	for zb0003 := range (*z).LastValid {
		s += (*z).LastValid[zb0003].Msgsize()
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskLastValid)) + 5 + msgp.ArrayHeaderSize
	for zb0004 := range (*z).Note {
		s += msgp.BytesPrefixSize + len((*z).Note[zb0004])
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskNote)) + 4 + msgp.StringPrefixSize + len((*z).GenesisID) + 6 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskGenesisID)) + 3 + (*z).GenesisHash.Msgsize() + 5 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskGenesisHash)) + 6 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskGroup)) + 3 + msgp.BytesPrefixSize + len((*z).Lease) + 5 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskLease)) + 6 + msgp.BytesPrefixSize + len((*z).RekeyTo) + 8 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskRekeyTo))
	return
}

// MsgIsZero returns whether this is a zero value
func (z *encodedTxnHeaders) MsgIsZero() bool {
	return (len((*z).Sender) == 0) && (len((*z).BitmaskSender) == 0) && (len((*z).Fee) == 0) && (len((*z).BitmaskFee) == 0) && (len((*z).FirstValid) == 0) && (len((*z).BitmaskFirstValid) == 0) && (len((*z).LastValid) == 0) && (len((*z).BitmaskLastValid) == 0) && (len((*z).Note) == 0) && (len((*z).BitmaskNote) == 0) && ((*z).GenesisID == "") && (len((*z).BitmaskGenesisID) == 0) && ((*z).GenesisHash.MsgIsZero()) && (len((*z).BitmaskGenesisHash) == 0) && (len((*z).BitmaskGroup) == 0) && (len((*z).Lease) == 0) && (len((*z).BitmaskLease) == 0) && (len((*z).RekeyTo) == 0) && (len((*z).BitmaskRekeyTo) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *encodedTxns) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0036Len := uint32(106)
	var zb0036Mask [2]uint64 /* 116 bits */
	if len((*z).encodedAssetTransferTxnFields.AssetAmount) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x400
	}
	if len((*z).encodedAssetTransferTxnFields.BitmaskAssetAmount) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x800
	}
	if len((*z).encodedAssetTransferTxnFields.AssetCloseTo) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x1000
	}
	if len((*z).encodedAssetTransferTxnFields.BitmaskAssetCloseTo) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x2000
	}
	if len((*z).encodedAssetFreezeTxnFields.BitmaskAssetFrozen) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x4000
	}
	if len((*z).encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x8000
	}
	if len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x10000
	}
	if len((*z).encodedPaymentTxnFields.Amount) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x20000
	}
	if len((*z).encodedPaymentTxnFields.BitmaskAmount) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x40000
	}
	if len((*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x80000
	}
	if len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x100000
	}
	if len((*z).encodedApplicationCallTxnFields.ApplicationArgs) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x200000
	}
	if len((*z).encodedApplicationCallTxnFields.BitmaskApplicationArgs) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x400000
	}
	if len((*z).encodedApplicationCallTxnFields.OnCompletion) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x800000
	}
	if len((*z).encodedApplicationCallTxnFields.BitmaskOnCompletion) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x1000000
	}
	if len((*z).encodedApplicationCallTxnFields.ApprovalProgram) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x2000000
	}
	if len((*z).encodedApplicationCallTxnFields.BitmaskApprovalProgram) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x4000000
	}
	if len((*z).encodedApplicationCallTxnFields.ForeignAssets) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x8000000
	}
	if len((*z).encodedApplicationCallTxnFields.BitmaskForeignAssets) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x10000000
	}
	if len((*z).encodedApplicationCallTxnFields.Accounts) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x20000000
	}
	if len((*z).encodedApplicationCallTxnFields.BitmaskAccounts) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x40000000
	}
	if len((*z).encodedApplicationCallTxnFields.ForeignApps) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x80000000
	}
	if len((*z).encodedApplicationCallTxnFields.BitmaskForeignApps) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x100000000
	}
	if len((*z).encodedApplicationCallTxnFields.ApplicationID) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x200000000
	}
	if len((*z).encodedApplicationCallTxnFields.BitmaskApplicationID) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x400000000
	}
	if len((*z).encodedApplicationCallTxnFields.ClearStateProgram) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x800000000
	}
	if len((*z).encodedApplicationCallTxnFields.BitmaskClearStateProgram) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x1000000000
	}
	if len((*z).encodedAssetTransferTxnFields.AssetReceiver) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x2000000000
	}
	if len((*z).encodedAssetTransferTxnFields.BitmaskAssetReceiver) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x4000000000
	}
	if len((*z).encodedAssetTransferTxnFields.AssetSender) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x8000000000
	}
	if len((*z).encodedAssetTransferTxnFields.BitmaskAssetSender) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x10000000000
	}
	if len((*z).encodedAssetConfigTxnFields.encodedAssetParams.URL) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x20000000000
	}
	if len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x40000000000
	}
	if len((*z).encodedAssetConfigTxnFields.encodedAssetParams.Clawback) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x80000000000
	}
	if len((*z).encodedAssetConfigTxnFields.ConfigAsset) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x100000000000
	}
	if len((*z).encodedAssetConfigTxnFields.BitmaskConfigAsset) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x200000000000
	}
	if len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x400000000000
	}
	if len((*z).encodedCompactCertTxnFields.Cert) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x800000000000
	}
	if len((*z).encodedCompactCertTxnFields.BitmaskCert) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x1000000000000
	}
	if len((*z).encodedCompactCertTxnFields.CertRound) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x2000000000000
	}
	if len((*z).encodedCompactCertTxnFields.BitmaskCertRound) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x4000000000000
	}
	if len((*z).encodedCompactCertTxnFields.CertType) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x8000000000000
	}
	if len((*z).encodedCompactCertTxnFields.BitmaskCertType) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x10000000000000
	}
	if len((*z).encodedPaymentTxnFields.CloseRemainderTo) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x20000000000000
	}
	if len((*z).encodedPaymentTxnFields.BitmaskCloseRemainderTo) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x40000000000000
	}
	if len((*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x80000000000000
	}
	if len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x100000000000000
	}
	if len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x200000000000000
	}
	if len((*z).encodedAssetConfigTxnFields.encodedAssetParams.Freeze) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x400000000000000
	}
	if len((*z).encodedAssetFreezeTxnFields.FreezeAccount) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x800000000000000
	}
	if len((*z).encodedAssetFreezeTxnFields.BitmaskFreezeAccount) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x1000000000000000
	}
	if len((*z).encodedAssetFreezeTxnFields.FreezeAsset) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x2000000000000000
	}
	if len((*z).encodedAssetFreezeTxnFields.BitmaskFreezeAsset) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x4000000000000000
	}
	if len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze) == 0 {
		zb0036Len--
		zb0036Mask[0] |= 0x8000000000000000
	}
	if len((*z).encodedTxnHeaders.Fee) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x1
	}
	if len((*z).encodedTxnHeaders.BitmaskFee) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x2
	}
	if len((*z).encodedTxnHeaders.FirstValid) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x4
	}
	if len((*z).encodedTxnHeaders.BitmaskFirstValid) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x8
	}
	if (*z).encodedTxnHeaders.GenesisID == "" {
		zb0036Len--
		zb0036Mask[1] |= 0x10
	}
	if len((*z).encodedTxnHeaders.BitmaskGenesisID) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x20
	}
	if (*z).encodedTxnHeaders.GenesisHash.MsgIsZero() {
		zb0036Len--
		zb0036Mask[1] |= 0x40
	}
	if len((*z).encodedTxnHeaders.BitmaskGenesisHash) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x80
	}
	if len((*z).encodedApplicationCallTxnFields.GlobalNumByteSlice) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x100
	}
	if len((*z).encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x200
	}
	if len((*z).encodedApplicationCallTxnFields.GlobalNumUint) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x400
	}
	if len((*z).encodedApplicationCallTxnFields.BitmaskGlobalNumUint) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x800
	}
	if len((*z).encodedTxnHeaders.BitmaskGroup) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x1000
	}
	if len((*z).encodedApplicationCallTxnFields.LocalNumByteSlice) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x2000
	}
	if len((*z).encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x4000
	}
	if len((*z).encodedApplicationCallTxnFields.LocalNumUint) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x8000
	}
	if len((*z).encodedApplicationCallTxnFields.BitmaskLocalNumUint) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x10000
	}
	if len((*z).encodedTxnHeaders.LastValid) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x20000
	}
	if len((*z).encodedTxnHeaders.BitmaskLastValid) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x40000
	}
	if len((*z).encodedTxnHeaders.Lease) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x80000
	}
	if len((*z).encodedTxnHeaders.BitmaskLease) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x100000
	}
	if len((*z).encodedAssetConfigTxnFields.encodedAssetParams.Manager) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x200000
	}
	if len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x400000
	}
	if len((*z).encodedKeyregTxnFields.BitmaskNonparticipation) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x800000
	}
	if len((*z).encodedTxnHeaders.Note) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x1000000
	}
	if len((*z).encodedTxnHeaders.BitmaskNote) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x2000000
	}
	if len((*z).encodedAssetConfigTxnFields.encodedAssetParams.Reserve) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x4000000
	}
	if len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x8000000
	}
	if len((*z).encodedPaymentTxnFields.Receiver) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x10000000
	}
	if len((*z).encodedPaymentTxnFields.BitmaskReceiver) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x20000000
	}
	if len((*z).encodedTxnHeaders.RekeyTo) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x40000000
	}
	if len((*z).encodedTxnHeaders.BitmaskRekeyTo) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x80000000
	}
	if len((*z).encodedKeyregTxnFields.SelectionPK) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x100000000
	}
	if len((*z).encodedKeyregTxnFields.BitmaskSelectionPK) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x200000000
	}
	if len((*z).encodedTxnHeaders.Sender) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x400000000
	}
	if len((*z).encodedTxnHeaders.BitmaskSender) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x800000000
	}
	if len((*z).encodedAssetConfigTxnFields.encodedAssetParams.Total) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x1000000000
	}
	if len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x2000000000
	}
	if len((*z).TxType) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x4000000000
	}
	if len((*z).BitmaskTxType) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x8000000000
	}
	if len((*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x10000000000
	}
	if len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x20000000000
	}
	if len((*z).encodedKeyregTxnFields.VoteFirst) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x40000000000
	}
	if len((*z).encodedKeyregTxnFields.BitmaskVoteFirst) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x80000000000
	}
	if len((*z).encodedKeyregTxnFields.VoteKeyDilution) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x100000000000
	}
	if len((*z).encodedKeyregTxnFields.BitmaskVoteKeyDilution) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x200000000000
	}
	if len((*z).encodedKeyregTxnFields.VotePK) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x400000000000
	}
	if len((*z).encodedKeyregTxnFields.BitmaskVotePK) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x800000000000
	}
	if len((*z).encodedKeyregTxnFields.VoteLast) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x1000000000000
	}
	if len((*z).encodedKeyregTxnFields.BitmaskVoteLast) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x2000000000000
	}
	if len((*z).encodedAssetTransferTxnFields.XferAsset) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x4000000000000
	}
	if len((*z).encodedAssetTransferTxnFields.BitmaskXferAsset) == 0 {
		zb0036Len--
		zb0036Mask[1] |= 0x8000000000000
	}
	// variable map header, size zb0036Len
	o = msgp.AppendMapHeader(o, zb0036Len)
	if zb0036Len != 0 {
		if (zb0036Mask[0] & 0x400) == 0 { // if not empty
			// string "aamt"
			o = append(o, 0xa4, 0x61, 0x61, 0x6d, 0x74)
			if (*z).encodedAssetTransferTxnFields.AssetAmount == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedAssetTransferTxnFields.AssetAmount)))
			}
			for zb0016 := range (*z).encodedAssetTransferTxnFields.AssetAmount {
				o = msgp.AppendUint64(o, (*z).encodedAssetTransferTxnFields.AssetAmount[zb0016])
			}
		}
		if (zb0036Mask[0] & 0x800) == 0 { // if not empty
			// string "aamtbm"
			o = append(o, 0xa6, 0x61, 0x61, 0x6d, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetTransferTxnFields.BitmaskAssetAmount))
		}
		if (zb0036Mask[0] & 0x1000) == 0 { // if not empty
			// string "aclose"
			o = append(o, 0xa6, 0x61, 0x63, 0x6c, 0x6f, 0x73, 0x65)
			o = msgp.AppendBytes(o, (*z).encodedAssetTransferTxnFields.AssetCloseTo)
		}
		if (zb0036Mask[0] & 0x2000) == 0 { // if not empty
			// string "aclosebm"
			o = append(o, 0xa8, 0x61, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetTransferTxnFields.BitmaskAssetCloseTo))
		}
		if (zb0036Mask[0] & 0x4000) == 0 { // if not empty
			// string "afrzbm"
			o = append(o, 0xa6, 0x61, 0x66, 0x72, 0x7a, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetFreezeTxnFields.BitmaskAssetFrozen))
		}
		if (zb0036Mask[0] & 0x8000) == 0 { // if not empty
			// string "am"
			o = append(o, 0xa2, 0x61, 0x6d)
			o = msgp.AppendBytes(o, (*z).encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash)
		}
		if (zb0036Mask[0] & 0x10000) == 0 { // if not empty
			// string "ambm"
			o = append(o, 0xa4, 0x61, 0x6d, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash))
		}
		if (zb0036Mask[0] & 0x20000) == 0 { // if not empty
			// string "amt"
			o = append(o, 0xa3, 0x61, 0x6d, 0x74)
			if (*z).encodedPaymentTxnFields.Amount == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedPaymentTxnFields.Amount)))
			}
			for zb0008 := range (*z).encodedPaymentTxnFields.Amount {
				o = (*z).encodedPaymentTxnFields.Amount[zb0008].MarshalMsg(o)
			}
		}
		if (zb0036Mask[0] & 0x40000) == 0 { // if not empty
			// string "amtbm"
			o = append(o, 0xa5, 0x61, 0x6d, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedPaymentTxnFields.BitmaskAmount))
		}
		if (zb0036Mask[0] & 0x80000) == 0 { // if not empty
			// string "an"
			o = append(o, 0xa2, 0x61, 0x6e)
			if (*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName)))
			}
			for zb0013 := range (*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName {
				o = msgp.AppendString(o, (*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName[zb0013])
			}
		}
		if (zb0036Mask[0] & 0x100000) == 0 { // if not empty
			// string "anbm"
			o = append(o, 0xa4, 0x61, 0x6e, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName))
		}
		if (zb0036Mask[0] & 0x200000) == 0 { // if not empty
			// string "apaa"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x61)
			if (*z).encodedApplicationCallTxnFields.ApplicationArgs == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedApplicationCallTxnFields.ApplicationArgs)))
			}
			for zb0019 := range (*z).encodedApplicationCallTxnFields.ApplicationArgs {
				if (*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019] == nil {
					o = msgp.AppendNil(o)
				} else {
					o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019])))
				}
				for zb0020 := range (*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019] {
					o = msgp.AppendBytes(o, (*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019][zb0020])
				}
			}
		}
		if (zb0036Mask[0] & 0x400000) == 0 { // if not empty
			// string "apaabm"
			o = append(o, 0xa6, 0x61, 0x70, 0x61, 0x61, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedApplicationCallTxnFields.BitmaskApplicationArgs))
		}
		if (zb0036Mask[0] & 0x800000) == 0 { // if not empty
			// string "apan"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x6e)
			o = msgp.AppendBytes(o, (*z).encodedApplicationCallTxnFields.OnCompletion)
		}
		if (zb0036Mask[0] & 0x1000000) == 0 { // if not empty
			// string "apanbm"
			o = append(o, 0xa6, 0x61, 0x70, 0x61, 0x6e, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedApplicationCallTxnFields.BitmaskOnCompletion))
		}
		if (zb0036Mask[0] & 0x2000000) == 0 { // if not empty
			// string "apap"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x70)
			if (*z).encodedApplicationCallTxnFields.ApprovalProgram == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedApplicationCallTxnFields.ApprovalProgram)))
			}
			for zb0031 := range (*z).encodedApplicationCallTxnFields.ApprovalProgram {
				o = msgp.AppendBytes(o, []byte((*z).encodedApplicationCallTxnFields.ApprovalProgram[zb0031]))
			}
		}
		if (zb0036Mask[0] & 0x4000000) == 0 { // if not empty
			// string "apapbm"
			o = append(o, 0xa6, 0x61, 0x70, 0x61, 0x70, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedApplicationCallTxnFields.BitmaskApprovalProgram))
		}
		if (zb0036Mask[0] & 0x8000000) == 0 { // if not empty
			// string "apas"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x73)
			if (*z).encodedApplicationCallTxnFields.ForeignAssets == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedApplicationCallTxnFields.ForeignAssets)))
			}
			for zb0025 := range (*z).encodedApplicationCallTxnFields.ForeignAssets {
				if (*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025] == nil {
					o = msgp.AppendNil(o)
				} else {
					o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025])))
				}
				for zb0026 := range (*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025] {
					o = (*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025][zb0026].MarshalMsg(o)
				}
			}
		}
		if (zb0036Mask[0] & 0x10000000) == 0 { // if not empty
			// string "apasbm"
			o = append(o, 0xa6, 0x61, 0x70, 0x61, 0x73, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedApplicationCallTxnFields.BitmaskForeignAssets))
		}
		if (zb0036Mask[0] & 0x20000000) == 0 { // if not empty
			// string "apat"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x74)
			if (*z).encodedApplicationCallTxnFields.Accounts == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedApplicationCallTxnFields.Accounts)))
			}
			for zb0021 := range (*z).encodedApplicationCallTxnFields.Accounts {
				if (*z).encodedApplicationCallTxnFields.Accounts[zb0021] == nil {
					o = msgp.AppendNil(o)
				} else {
					o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedApplicationCallTxnFields.Accounts[zb0021])))
				}
				for zb0022 := range (*z).encodedApplicationCallTxnFields.Accounts[zb0021] {
					o = (*z).encodedApplicationCallTxnFields.Accounts[zb0021][zb0022].MarshalMsg(o)
				}
			}
		}
		if (zb0036Mask[0] & 0x40000000) == 0 { // if not empty
			// string "apatbm"
			o = append(o, 0xa6, 0x61, 0x70, 0x61, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedApplicationCallTxnFields.BitmaskAccounts))
		}
		if (zb0036Mask[0] & 0x80000000) == 0 { // if not empty
			// string "apfa"
			o = append(o, 0xa4, 0x61, 0x70, 0x66, 0x61)
			if (*z).encodedApplicationCallTxnFields.ForeignApps == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedApplicationCallTxnFields.ForeignApps)))
			}
			for zb0023 := range (*z).encodedApplicationCallTxnFields.ForeignApps {
				if (*z).encodedApplicationCallTxnFields.ForeignApps[zb0023] == nil {
					o = msgp.AppendNil(o)
				} else {
					o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedApplicationCallTxnFields.ForeignApps[zb0023])))
				}
				for zb0024 := range (*z).encodedApplicationCallTxnFields.ForeignApps[zb0023] {
					o = (*z).encodedApplicationCallTxnFields.ForeignApps[zb0023][zb0024].MarshalMsg(o)
				}
			}
		}
		if (zb0036Mask[0] & 0x100000000) == 0 { // if not empty
			// string "apfabm"
			o = append(o, 0xa6, 0x61, 0x70, 0x66, 0x61, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedApplicationCallTxnFields.BitmaskForeignApps))
		}
		if (zb0036Mask[0] & 0x200000000) == 0 { // if not empty
			// string "apid"
			o = append(o, 0xa4, 0x61, 0x70, 0x69, 0x64)
			if (*z).encodedApplicationCallTxnFields.ApplicationID == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedApplicationCallTxnFields.ApplicationID)))
			}
			for zb0018 := range (*z).encodedApplicationCallTxnFields.ApplicationID {
				o = (*z).encodedApplicationCallTxnFields.ApplicationID[zb0018].MarshalMsg(o)
			}
		}
		if (zb0036Mask[0] & 0x400000000) == 0 { // if not empty
			// string "apidbm"
			o = append(o, 0xa6, 0x61, 0x70, 0x69, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedApplicationCallTxnFields.BitmaskApplicationID))
		}
		if (zb0036Mask[0] & 0x800000000) == 0 { // if not empty
			// string "apsu"
			o = append(o, 0xa4, 0x61, 0x70, 0x73, 0x75)
			if (*z).encodedApplicationCallTxnFields.ClearStateProgram == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedApplicationCallTxnFields.ClearStateProgram)))
			}
			for zb0032 := range (*z).encodedApplicationCallTxnFields.ClearStateProgram {
				o = msgp.AppendBytes(o, []byte((*z).encodedApplicationCallTxnFields.ClearStateProgram[zb0032]))
			}
		}
		if (zb0036Mask[0] & 0x1000000000) == 0 { // if not empty
			// string "apsubm"
			o = append(o, 0xa6, 0x61, 0x70, 0x73, 0x75, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedApplicationCallTxnFields.BitmaskClearStateProgram))
		}
		if (zb0036Mask[0] & 0x2000000000) == 0 { // if not empty
			// string "arcv"
			o = append(o, 0xa4, 0x61, 0x72, 0x63, 0x76)
			o = msgp.AppendBytes(o, (*z).encodedAssetTransferTxnFields.AssetReceiver)
		}
		if (zb0036Mask[0] & 0x4000000000) == 0 { // if not empty
			// string "arcvbm"
			o = append(o, 0xa6, 0x61, 0x72, 0x63, 0x76, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetTransferTxnFields.BitmaskAssetReceiver))
		}
		if (zb0036Mask[0] & 0x8000000000) == 0 { // if not empty
			// string "asnd"
			o = append(o, 0xa4, 0x61, 0x73, 0x6e, 0x64)
			o = msgp.AppendBytes(o, (*z).encodedAssetTransferTxnFields.AssetSender)
		}
		if (zb0036Mask[0] & 0x10000000000) == 0 { // if not empty
			// string "asndbm"
			o = append(o, 0xa6, 0x61, 0x73, 0x6e, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetTransferTxnFields.BitmaskAssetSender))
		}
		if (zb0036Mask[0] & 0x20000000000) == 0 { // if not empty
			// string "au"
			o = append(o, 0xa2, 0x61, 0x75)
			if (*z).encodedAssetConfigTxnFields.encodedAssetParams.URL == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedAssetConfigTxnFields.encodedAssetParams.URL)))
			}
			for zb0014 := range (*z).encodedAssetConfigTxnFields.encodedAssetParams.URL {
				o = msgp.AppendString(o, (*z).encodedAssetConfigTxnFields.encodedAssetParams.URL[zb0014])
			}
		}
		if (zb0036Mask[0] & 0x40000000000) == 0 { // if not empty
			// string "aubm"
			o = append(o, 0xa4, 0x61, 0x75, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL))
		}
		if (zb0036Mask[0] & 0x80000000000) == 0 { // if not empty
			// string "c"
			o = append(o, 0xa1, 0x63)
			o = msgp.AppendBytes(o, (*z).encodedAssetConfigTxnFields.encodedAssetParams.Clawback)
		}
		if (zb0036Mask[0] & 0x100000000000) == 0 { // if not empty
			// string "caid"
			o = append(o, 0xa4, 0x63, 0x61, 0x69, 0x64)
			if (*z).encodedAssetConfigTxnFields.ConfigAsset == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedAssetConfigTxnFields.ConfigAsset)))
			}
			for zb0009 := range (*z).encodedAssetConfigTxnFields.ConfigAsset {
				o = (*z).encodedAssetConfigTxnFields.ConfigAsset[zb0009].MarshalMsg(o)
			}
		}
		if (zb0036Mask[0] & 0x200000000000) == 0 { // if not empty
			// string "caidbm"
			o = append(o, 0xa6, 0x63, 0x61, 0x69, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetConfigTxnFields.BitmaskConfigAsset))
		}
		if (zb0036Mask[0] & 0x400000000000) == 0 { // if not empty
			// string "cbm"
			o = append(o, 0xa3, 0x63, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback))
		}
		if (zb0036Mask[0] & 0x800000000000) == 0 { // if not empty
			// string "cert"
			o = append(o, 0xa4, 0x63, 0x65, 0x72, 0x74)
			if (*z).encodedCompactCertTxnFields.Cert == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedCompactCertTxnFields.Cert)))
			}
			for zb0035 := range (*z).encodedCompactCertTxnFields.Cert {
				o = (*z).encodedCompactCertTxnFields.Cert[zb0035].MarshalMsg(o)
			}
		}
		if (zb0036Mask[0] & 0x1000000000000) == 0 { // if not empty
			// string "certbm"
			o = append(o, 0xa6, 0x63, 0x65, 0x72, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedCompactCertTxnFields.BitmaskCert))
		}
		if (zb0036Mask[0] & 0x2000000000000) == 0 { // if not empty
			// string "certrnd"
			o = append(o, 0xa7, 0x63, 0x65, 0x72, 0x74, 0x72, 0x6e, 0x64)
			if (*z).encodedCompactCertTxnFields.CertRound == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedCompactCertTxnFields.CertRound)))
			}
			for zb0033 := range (*z).encodedCompactCertTxnFields.CertRound {
				o = (*z).encodedCompactCertTxnFields.CertRound[zb0033].MarshalMsg(o)
			}
		}
		if (zb0036Mask[0] & 0x4000000000000) == 0 { // if not empty
			// string "certrndbm"
			o = append(o, 0xa9, 0x63, 0x65, 0x72, 0x74, 0x72, 0x6e, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedCompactCertTxnFields.BitmaskCertRound))
		}
		if (zb0036Mask[0] & 0x8000000000000) == 0 { // if not empty
			// string "certtype"
			o = append(o, 0xa8, 0x63, 0x65, 0x72, 0x74, 0x74, 0x79, 0x70, 0x65)
			if (*z).encodedCompactCertTxnFields.CertType == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedCompactCertTxnFields.CertType)))
			}
			for zb0034 := range (*z).encodedCompactCertTxnFields.CertType {
				o = (*z).encodedCompactCertTxnFields.CertType[zb0034].MarshalMsg(o)
			}
		}
		if (zb0036Mask[0] & 0x10000000000000) == 0 { // if not empty
			// string "certtypebm"
			o = append(o, 0xaa, 0x63, 0x65, 0x72, 0x74, 0x74, 0x79, 0x70, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedCompactCertTxnFields.BitmaskCertType))
		}
		if (zb0036Mask[0] & 0x20000000000000) == 0 { // if not empty
			// string "close"
			o = append(o, 0xa5, 0x63, 0x6c, 0x6f, 0x73, 0x65)
			o = msgp.AppendBytes(o, (*z).encodedPaymentTxnFields.CloseRemainderTo)
		}
		if (zb0036Mask[0] & 0x40000000000000) == 0 { // if not empty
			// string "closebm"
			o = append(o, 0xa7, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedPaymentTxnFields.BitmaskCloseRemainderTo))
		}
		if (zb0036Mask[0] & 0x80000000000000) == 0 { // if not empty
			// string "dc"
			o = append(o, 0xa2, 0x64, 0x63)
			if (*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals)))
			}
			for zb0011 := range (*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals {
				o = msgp.AppendUint32(o, (*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals[zb0011])
			}
		}
		if (zb0036Mask[0] & 0x100000000000000) == 0 { // if not empty
			// string "dcbm"
			o = append(o, 0xa4, 0x64, 0x63, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals))
		}
		if (zb0036Mask[0] & 0x200000000000000) == 0 { // if not empty
			// string "dfbm"
			o = append(o, 0xa4, 0x64, 0x66, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen))
		}
		if (zb0036Mask[0] & 0x400000000000000) == 0 { // if not empty
			// string "f"
			o = append(o, 0xa1, 0x66)
			o = msgp.AppendBytes(o, (*z).encodedAssetConfigTxnFields.encodedAssetParams.Freeze)
		}
		if (zb0036Mask[0] & 0x800000000000000) == 0 { // if not empty
			// string "fadd"
			o = append(o, 0xa4, 0x66, 0x61, 0x64, 0x64)
			o = msgp.AppendBytes(o, (*z).encodedAssetFreezeTxnFields.FreezeAccount)
		}
		if (zb0036Mask[0] & 0x1000000000000000) == 0 { // if not empty
			// string "faddbm"
			o = append(o, 0xa6, 0x66, 0x61, 0x64, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetFreezeTxnFields.BitmaskFreezeAccount))
		}
		if (zb0036Mask[0] & 0x2000000000000000) == 0 { // if not empty
			// string "faid"
			o = append(o, 0xa4, 0x66, 0x61, 0x69, 0x64)
			if (*z).encodedAssetFreezeTxnFields.FreezeAsset == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedAssetFreezeTxnFields.FreezeAsset)))
			}
			for zb0017 := range (*z).encodedAssetFreezeTxnFields.FreezeAsset {
				o = (*z).encodedAssetFreezeTxnFields.FreezeAsset[zb0017].MarshalMsg(o)
			}
		}
		if (zb0036Mask[0] & 0x4000000000000000) == 0 { // if not empty
			// string "faidbm"
			o = append(o, 0xa6, 0x66, 0x61, 0x69, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetFreezeTxnFields.BitmaskFreezeAsset))
		}
		if (zb0036Mask[0] & 0x8000000000000000) == 0 { // if not empty
			// string "fbm"
			o = append(o, 0xa3, 0x66, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze))
		}
		if (zb0036Mask[1] & 0x1) == 0 { // if not empty
			// string "fee"
			o = append(o, 0xa3, 0x66, 0x65, 0x65)
			if (*z).encodedTxnHeaders.Fee == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxnHeaders.Fee)))
			}
			for zb0001 := range (*z).encodedTxnHeaders.Fee {
				o = (*z).encodedTxnHeaders.Fee[zb0001].MarshalMsg(o)
			}
		}
		if (zb0036Mask[1] & 0x2) == 0 { // if not empty
			// string "feebm"
			o = append(o, 0xa5, 0x66, 0x65, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxnHeaders.BitmaskFee))
		}
		if (zb0036Mask[1] & 0x4) == 0 { // if not empty
			// string "fv"
			o = append(o, 0xa2, 0x66, 0x76)
			if (*z).encodedTxnHeaders.FirstValid == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxnHeaders.FirstValid)))
			}
			for zb0002 := range (*z).encodedTxnHeaders.FirstValid {
				o = (*z).encodedTxnHeaders.FirstValid[zb0002].MarshalMsg(o)
			}
		}
		if (zb0036Mask[1] & 0x8) == 0 { // if not empty
			// string "fvbm"
			o = append(o, 0xa4, 0x66, 0x76, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxnHeaders.BitmaskFirstValid))
		}
		if (zb0036Mask[1] & 0x10) == 0 { // if not empty
			// string "gen"
			o = append(o, 0xa3, 0x67, 0x65, 0x6e)
			o = msgp.AppendString(o, (*z).encodedTxnHeaders.GenesisID)
		}
		if (zb0036Mask[1] & 0x20) == 0 { // if not empty
			// string "genbm"
			o = append(o, 0xa5, 0x67, 0x65, 0x6e, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxnHeaders.BitmaskGenesisID))
		}
		if (zb0036Mask[1] & 0x40) == 0 { // if not empty
			// string "gh"
			o = append(o, 0xa2, 0x67, 0x68)
			o = (*z).encodedTxnHeaders.GenesisHash.MarshalMsg(o)
		}
		if (zb0036Mask[1] & 0x80) == 0 { // if not empty
			// string "ghbm"
			o = append(o, 0xa4, 0x67, 0x68, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxnHeaders.BitmaskGenesisHash))
		}
		if (zb0036Mask[1] & 0x100) == 0 { // if not empty
			// string "gnbs"
			o = append(o, 0xa4, 0x67, 0x6e, 0x62, 0x73)
			if (*z).encodedApplicationCallTxnFields.GlobalNumByteSlice == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedApplicationCallTxnFields.GlobalNumByteSlice)))
			}
			for zb0030 := range (*z).encodedApplicationCallTxnFields.GlobalNumByteSlice {
				o = msgp.AppendUint64(o, (*z).encodedApplicationCallTxnFields.GlobalNumByteSlice[zb0030])
			}
		}
		if (zb0036Mask[1] & 0x200) == 0 { // if not empty
			// string "gnbsbm"
			o = append(o, 0xa6, 0x67, 0x6e, 0x62, 0x73, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice))
		}
		if (zb0036Mask[1] & 0x400) == 0 { // if not empty
			// string "gnui"
			o = append(o, 0xa4, 0x67, 0x6e, 0x75, 0x69)
			if (*z).encodedApplicationCallTxnFields.GlobalNumUint == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedApplicationCallTxnFields.GlobalNumUint)))
			}
			for zb0029 := range (*z).encodedApplicationCallTxnFields.GlobalNumUint {
				o = msgp.AppendUint64(o, (*z).encodedApplicationCallTxnFields.GlobalNumUint[zb0029])
			}
		}
		if (zb0036Mask[1] & 0x800) == 0 { // if not empty
			// string "gnuibm"
			o = append(o, 0xa6, 0x67, 0x6e, 0x75, 0x69, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedApplicationCallTxnFields.BitmaskGlobalNumUint))
		}
		if (zb0036Mask[1] & 0x1000) == 0 { // if not empty
			// string "grpbm"
			o = append(o, 0xa5, 0x67, 0x72, 0x70, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxnHeaders.BitmaskGroup))
		}
		if (zb0036Mask[1] & 0x2000) == 0 { // if not empty
			// string "lnbs"
			o = append(o, 0xa4, 0x6c, 0x6e, 0x62, 0x73)
			if (*z).encodedApplicationCallTxnFields.LocalNumByteSlice == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedApplicationCallTxnFields.LocalNumByteSlice)))
			}
			for zb0028 := range (*z).encodedApplicationCallTxnFields.LocalNumByteSlice {
				o = msgp.AppendUint64(o, (*z).encodedApplicationCallTxnFields.LocalNumByteSlice[zb0028])
			}
		}
		if (zb0036Mask[1] & 0x4000) == 0 { // if not empty
			// string "lnbsbm"
			o = append(o, 0xa6, 0x6c, 0x6e, 0x62, 0x73, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice))
		}
		if (zb0036Mask[1] & 0x8000) == 0 { // if not empty
			// string "lnui"
			o = append(o, 0xa4, 0x6c, 0x6e, 0x75, 0x69)
			if (*z).encodedApplicationCallTxnFields.LocalNumUint == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedApplicationCallTxnFields.LocalNumUint)))
			}
			for zb0027 := range (*z).encodedApplicationCallTxnFields.LocalNumUint {
				o = msgp.AppendUint64(o, (*z).encodedApplicationCallTxnFields.LocalNumUint[zb0027])
			}
		}
		if (zb0036Mask[1] & 0x10000) == 0 { // if not empty
			// string "lnuibm"
			o = append(o, 0xa6, 0x6c, 0x6e, 0x75, 0x69, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedApplicationCallTxnFields.BitmaskLocalNumUint))
		}
		if (zb0036Mask[1] & 0x20000) == 0 { // if not empty
			// string "lv"
			o = append(o, 0xa2, 0x6c, 0x76)
			if (*z).encodedTxnHeaders.LastValid == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxnHeaders.LastValid)))
			}
			for zb0003 := range (*z).encodedTxnHeaders.LastValid {
				o = (*z).encodedTxnHeaders.LastValid[zb0003].MarshalMsg(o)
			}
		}
		if (zb0036Mask[1] & 0x40000) == 0 { // if not empty
			// string "lvbm"
			o = append(o, 0xa4, 0x6c, 0x76, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxnHeaders.BitmaskLastValid))
		}
		if (zb0036Mask[1] & 0x80000) == 0 { // if not empty
			// string "lx"
			o = append(o, 0xa2, 0x6c, 0x78)
			o = msgp.AppendBytes(o, (*z).encodedTxnHeaders.Lease)
		}
		if (zb0036Mask[1] & 0x100000) == 0 { // if not empty
			// string "lxbm"
			o = append(o, 0xa4, 0x6c, 0x78, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxnHeaders.BitmaskLease))
		}
		if (zb0036Mask[1] & 0x200000) == 0 { // if not empty
			// string "m"
			o = append(o, 0xa1, 0x6d)
			o = msgp.AppendBytes(o, (*z).encodedAssetConfigTxnFields.encodedAssetParams.Manager)
		}
		if (zb0036Mask[1] & 0x400000) == 0 { // if not empty
			// string "mbm"
			o = append(o, 0xa3, 0x6d, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager))
		}
		if (zb0036Mask[1] & 0x800000) == 0 { // if not empty
			// string "nonpartbm"
			o = append(o, 0xa9, 0x6e, 0x6f, 0x6e, 0x70, 0x61, 0x72, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedKeyregTxnFields.BitmaskNonparticipation))
		}
		if (zb0036Mask[1] & 0x1000000) == 0 { // if not empty
			// string "note"
			o = append(o, 0xa4, 0x6e, 0x6f, 0x74, 0x65)
			if (*z).encodedTxnHeaders.Note == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedTxnHeaders.Note)))
			}
			for zb0004 := range (*z).encodedTxnHeaders.Note {
				o = msgp.AppendBytes(o, (*z).encodedTxnHeaders.Note[zb0004])
			}
		}
		if (zb0036Mask[1] & 0x2000000) == 0 { // if not empty
			// string "notebm"
			o = append(o, 0xa6, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxnHeaders.BitmaskNote))
		}
		if (zb0036Mask[1] & 0x4000000) == 0 { // if not empty
			// string "r"
			o = append(o, 0xa1, 0x72)
			o = msgp.AppendBytes(o, (*z).encodedAssetConfigTxnFields.encodedAssetParams.Reserve)
		}
		if (zb0036Mask[1] & 0x8000000) == 0 { // if not empty
			// string "rbm"
			o = append(o, 0xa3, 0x72, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve))
		}
		if (zb0036Mask[1] & 0x10000000) == 0 { // if not empty
			// string "rcv"
			o = append(o, 0xa3, 0x72, 0x63, 0x76)
			o = msgp.AppendBytes(o, (*z).encodedPaymentTxnFields.Receiver)
		}
		if (zb0036Mask[1] & 0x20000000) == 0 { // if not empty
			// string "rcvbm"
			o = append(o, 0xa5, 0x72, 0x63, 0x76, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedPaymentTxnFields.BitmaskReceiver))
		}
		if (zb0036Mask[1] & 0x40000000) == 0 { // if not empty
			// string "rekey"
			o = append(o, 0xa5, 0x72, 0x65, 0x6b, 0x65, 0x79)
			o = msgp.AppendBytes(o, (*z).encodedTxnHeaders.RekeyTo)
		}
		if (zb0036Mask[1] & 0x80000000) == 0 { // if not empty
			// string "rekeybm"
			o = append(o, 0xa7, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxnHeaders.BitmaskRekeyTo))
		}
		if (zb0036Mask[1] & 0x100000000) == 0 { // if not empty
			// string "selkey"
			o = append(o, 0xa6, 0x73, 0x65, 0x6c, 0x6b, 0x65, 0x79)
			o = msgp.AppendBytes(o, (*z).encodedKeyregTxnFields.SelectionPK)
		}
		if (zb0036Mask[1] & 0x200000000) == 0 { // if not empty
			// string "selkeybm"
			o = append(o, 0xa8, 0x73, 0x65, 0x6c, 0x6b, 0x65, 0x79, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedKeyregTxnFields.BitmaskSelectionPK))
		}
		if (zb0036Mask[1] & 0x400000000) == 0 { // if not empty
			// string "snd"
			o = append(o, 0xa3, 0x73, 0x6e, 0x64)
			o = msgp.AppendBytes(o, (*z).encodedTxnHeaders.Sender)
		}
		if (zb0036Mask[1] & 0x800000000) == 0 { // if not empty
			// string "sndbm"
			o = append(o, 0xa5, 0x73, 0x6e, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedTxnHeaders.BitmaskSender))
		}
		if (zb0036Mask[1] & 0x1000000000) == 0 { // if not empty
			// string "t"
			o = append(o, 0xa1, 0x74)
			if (*z).encodedAssetConfigTxnFields.encodedAssetParams.Total == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedAssetConfigTxnFields.encodedAssetParams.Total)))
			}
			for zb0010 := range (*z).encodedAssetConfigTxnFields.encodedAssetParams.Total {
				o = msgp.AppendUint64(o, (*z).encodedAssetConfigTxnFields.encodedAssetParams.Total[zb0010])
			}
		}
		if (zb0036Mask[1] & 0x2000000000) == 0 { // if not empty
			// string "tbm"
			o = append(o, 0xa3, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal))
		}
		if (zb0036Mask[1] & 0x4000000000) == 0 { // if not empty
			// string "type"
			o = append(o, 0xa4, 0x74, 0x79, 0x70, 0x65)
			o = msgp.AppendBytes(o, (*z).TxType)
		}
		if (zb0036Mask[1] & 0x8000000000) == 0 { // if not empty
			// string "typebm"
			o = append(o, 0xa6, 0x74, 0x79, 0x70, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).BitmaskTxType))
		}
		if (zb0036Mask[1] & 0x10000000000) == 0 { // if not empty
			// string "un"
			o = append(o, 0xa2, 0x75, 0x6e)
			if (*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName)))
			}
			for zb0012 := range (*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName {
				o = msgp.AppendString(o, (*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName[zb0012])
			}
		}
		if (zb0036Mask[1] & 0x20000000000) == 0 { // if not empty
			// string "unbm"
			o = append(o, 0xa4, 0x75, 0x6e, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName))
		}
		if (zb0036Mask[1] & 0x40000000000) == 0 { // if not empty
			// string "votefst"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x66, 0x73, 0x74)
			if (*z).encodedKeyregTxnFields.VoteFirst == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedKeyregTxnFields.VoteFirst)))
			}
			for zb0005 := range (*z).encodedKeyregTxnFields.VoteFirst {
				o = (*z).encodedKeyregTxnFields.VoteFirst[zb0005].MarshalMsg(o)
			}
		}
		if (zb0036Mask[1] & 0x80000000000) == 0 { // if not empty
			// string "votefstbm"
			o = append(o, 0xa9, 0x76, 0x6f, 0x74, 0x65, 0x66, 0x73, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedKeyregTxnFields.BitmaskVoteFirst))
		}
		if (zb0036Mask[1] & 0x100000000000) == 0 { // if not empty
			// string "votekd"
			o = append(o, 0xa6, 0x76, 0x6f, 0x74, 0x65, 0x6b, 0x64)
			if (*z).encodedKeyregTxnFields.VoteKeyDilution == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedKeyregTxnFields.VoteKeyDilution)))
			}
			for zb0007 := range (*z).encodedKeyregTxnFields.VoteKeyDilution {
				o = msgp.AppendUint64(o, (*z).encodedKeyregTxnFields.VoteKeyDilution[zb0007])
			}
		}
		if (zb0036Mask[1] & 0x200000000000) == 0 { // if not empty
			// string "votekdbm"
			o = append(o, 0xa8, 0x76, 0x6f, 0x74, 0x65, 0x6b, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedKeyregTxnFields.BitmaskVoteKeyDilution))
		}
		if (zb0036Mask[1] & 0x400000000000) == 0 { // if not empty
			// string "votekey"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x6b, 0x65, 0x79)
			o = msgp.AppendBytes(o, (*z).encodedKeyregTxnFields.VotePK)
		}
		if (zb0036Mask[1] & 0x800000000000) == 0 { // if not empty
			// string "votekeybm"
			o = append(o, 0xa9, 0x76, 0x6f, 0x74, 0x65, 0x6b, 0x65, 0x79, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedKeyregTxnFields.BitmaskVotePK))
		}
		if (zb0036Mask[1] & 0x1000000000000) == 0 { // if not empty
			// string "votelst"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x6c, 0x73, 0x74)
			if (*z).encodedKeyregTxnFields.VoteLast == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedKeyregTxnFields.VoteLast)))
			}
			for zb0006 := range (*z).encodedKeyregTxnFields.VoteLast {
				o = (*z).encodedKeyregTxnFields.VoteLast[zb0006].MarshalMsg(o)
			}
		}
		if (zb0036Mask[1] & 0x2000000000000) == 0 { // if not empty
			// string "votelstbm"
			o = append(o, 0xa9, 0x76, 0x6f, 0x74, 0x65, 0x6c, 0x73, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedKeyregTxnFields.BitmaskVoteLast))
		}
		if (zb0036Mask[1] & 0x4000000000000) == 0 { // if not empty
			// string "xaid"
			o = append(o, 0xa4, 0x78, 0x61, 0x69, 0x64)
			if (*z).encodedAssetTransferTxnFields.XferAsset == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedAssetTransferTxnFields.XferAsset)))
			}
			for zb0015 := range (*z).encodedAssetTransferTxnFields.XferAsset {
				o = (*z).encodedAssetTransferTxnFields.XferAsset[zb0015].MarshalMsg(o)
			}
		}
		if (zb0036Mask[1] & 0x8000000000000) == 0 { // if not empty
			// string "xaidbm"
			o = append(o, 0xa6, 0x78, 0x61, 0x69, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedAssetTransferTxnFields.BitmaskXferAsset))
		}
	}
	return
}

func (_ *encodedTxns) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedTxns)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *encodedTxns) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0036 int
	var zb0037 bool
	zb0036, zb0037, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0036, zb0037, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0036 > 0 {
			zb0036--
			var zb0038 int
			zb0038, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TxType")
				return
			}
			if zb0038 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0038), uint64(maxEncodedTransactionGroup))
				return
			}
			(*z).TxType, bts, err = msgp.ReadBytesBytes(bts, (*z).TxType)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TxType")
				return
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0039 []byte
				var zb0040 int
				zb0040, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskTxType")
					return
				}
				if zb0040 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0040), uint64(maxBitmaskSize))
					return
				}
				zb0039, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskTxType))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskTxType")
					return
				}
				(*z).BitmaskTxType = bitmask(zb0039)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0041 int
			zb0041, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Sender")
				return
			}
			if zb0041 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0041), uint64(maxAddressBytes))
				return
			}
			(*z).encodedTxnHeaders.Sender, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxnHeaders.Sender)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Sender")
				return
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0042 []byte
				var zb0043 int
				zb0043, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskSender")
					return
				}
				if zb0043 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0043), uint64(maxBitmaskSize))
					return
				}
				zb0042, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxnHeaders.BitmaskSender))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskSender")
					return
				}
				(*z).encodedTxnHeaders.BitmaskSender = bitmask(zb0042)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0044 int
			var zb0045 bool
			zb0044, zb0045, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Fee")
				return
			}
			if zb0044 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0044), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Fee")
				return
			}
			if zb0045 {
				(*z).encodedTxnHeaders.Fee = nil
			} else if (*z).encodedTxnHeaders.Fee != nil && cap((*z).encodedTxnHeaders.Fee) >= zb0044 {
				(*z).encodedTxnHeaders.Fee = ((*z).encodedTxnHeaders.Fee)[:zb0044]
			} else {
				(*z).encodedTxnHeaders.Fee = make([]basics.MicroAlgos, zb0044)
			}
			for zb0001 := range (*z).encodedTxnHeaders.Fee {
				bts, err = (*z).encodedTxnHeaders.Fee[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Fee", zb0001)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0046 []byte
				var zb0047 int
				zb0047, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFee")
					return
				}
				if zb0047 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0047), uint64(maxBitmaskSize))
					return
				}
				zb0046, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxnHeaders.BitmaskFee))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFee")
					return
				}
				(*z).encodedTxnHeaders.BitmaskFee = bitmask(zb0046)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0048 int
			var zb0049 bool
			zb0048, zb0049, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FirstValid")
				return
			}
			if zb0048 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0048), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "FirstValid")
				return
			}
			if zb0049 {
				(*z).encodedTxnHeaders.FirstValid = nil
			} else if (*z).encodedTxnHeaders.FirstValid != nil && cap((*z).encodedTxnHeaders.FirstValid) >= zb0048 {
				(*z).encodedTxnHeaders.FirstValid = ((*z).encodedTxnHeaders.FirstValid)[:zb0048]
			} else {
				(*z).encodedTxnHeaders.FirstValid = make([]basics.Round, zb0048)
			}
			for zb0002 := range (*z).encodedTxnHeaders.FirstValid {
				bts, err = (*z).encodedTxnHeaders.FirstValid[zb0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "FirstValid", zb0002)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0050 []byte
				var zb0051 int
				zb0051, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFirstValid")
					return
				}
				if zb0051 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0051), uint64(maxBitmaskSize))
					return
				}
				zb0050, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxnHeaders.BitmaskFirstValid))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFirstValid")
					return
				}
				(*z).encodedTxnHeaders.BitmaskFirstValid = bitmask(zb0050)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0052 int
			var zb0053 bool
			zb0052, zb0053, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LastValid")
				return
			}
			if zb0052 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0052), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "LastValid")
				return
			}
			if zb0053 {
				(*z).encodedTxnHeaders.LastValid = nil
			} else if (*z).encodedTxnHeaders.LastValid != nil && cap((*z).encodedTxnHeaders.LastValid) >= zb0052 {
				(*z).encodedTxnHeaders.LastValid = ((*z).encodedTxnHeaders.LastValid)[:zb0052]
			} else {
				(*z).encodedTxnHeaders.LastValid = make([]basics.Round, zb0052)
			}
			for zb0003 := range (*z).encodedTxnHeaders.LastValid {
				bts, err = (*z).encodedTxnHeaders.LastValid[zb0003].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "LastValid", zb0003)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0054 []byte
				var zb0055 int
				zb0055, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLastValid")
					return
				}
				if zb0055 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0055), uint64(maxBitmaskSize))
					return
				}
				zb0054, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxnHeaders.BitmaskLastValid))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLastValid")
					return
				}
				(*z).encodedTxnHeaders.BitmaskLastValid = bitmask(zb0054)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0056 int
			var zb0057 bool
			zb0056, zb0057, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Note")
				return
			}
			if zb0056 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0056), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Note")
				return
			}
			if zb0057 {
				(*z).encodedTxnHeaders.Note = nil
			} else if (*z).encodedTxnHeaders.Note != nil && cap((*z).encodedTxnHeaders.Note) >= zb0056 {
				(*z).encodedTxnHeaders.Note = ((*z).encodedTxnHeaders.Note)[:zb0056]
			} else {
				(*z).encodedTxnHeaders.Note = make([][]byte, zb0056)
			}
			for zb0004 := range (*z).encodedTxnHeaders.Note {
				(*z).encodedTxnHeaders.Note[zb0004], bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxnHeaders.Note[zb0004])
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Note", zb0004)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0058 []byte
				var zb0059 int
				zb0059, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskNote")
					return
				}
				if zb0059 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0059), uint64(maxBitmaskSize))
					return
				}
				zb0058, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxnHeaders.BitmaskNote))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskNote")
					return
				}
				(*z).encodedTxnHeaders.BitmaskNote = bitmask(zb0058)
			}
		}
		if zb0036 > 0 {
			zb0036--
			(*z).encodedTxnHeaders.GenesisID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GenesisID")
				return
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0060 []byte
				var zb0061 int
				zb0061, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGenesisID")
					return
				}
				if zb0061 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0061), uint64(maxBitmaskSize))
					return
				}
				zb0060, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxnHeaders.BitmaskGenesisID))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGenesisID")
					return
				}
				(*z).encodedTxnHeaders.BitmaskGenesisID = bitmask(zb0060)
			}
		}
		if zb0036 > 0 {
			zb0036--
			bts, err = (*z).encodedTxnHeaders.GenesisHash.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GenesisHash")
				return
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0062 []byte
				var zb0063 int
				zb0063, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGenesisHash")
					return
				}
				if zb0063 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0063), uint64(maxBitmaskSize))
					return
				}
				zb0062, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxnHeaders.BitmaskGenesisHash))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGenesisHash")
					return
				}
				(*z).encodedTxnHeaders.BitmaskGenesisHash = bitmask(zb0062)
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0064 []byte
				var zb0065 int
				zb0065, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGroup")
					return
				}
				if zb0065 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0065), uint64(maxBitmaskSize))
					return
				}
				zb0064, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxnHeaders.BitmaskGroup))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGroup")
					return
				}
				(*z).encodedTxnHeaders.BitmaskGroup = bitmask(zb0064)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0066 int
			zb0066, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Lease")
				return
			}
			if zb0066 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0066), uint64(maxAddressBytes))
				return
			}
			(*z).encodedTxnHeaders.Lease, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxnHeaders.Lease)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Lease")
				return
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0067 []byte
				var zb0068 int
				zb0068, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLease")
					return
				}
				if zb0068 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0068), uint64(maxBitmaskSize))
					return
				}
				zb0067, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxnHeaders.BitmaskLease))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLease")
					return
				}
				(*z).encodedTxnHeaders.BitmaskLease = bitmask(zb0067)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0069 int
			zb0069, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RekeyTo")
				return
			}
			if zb0069 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0069), uint64(maxAddressBytes))
				return
			}
			(*z).encodedTxnHeaders.RekeyTo, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxnHeaders.RekeyTo)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RekeyTo")
				return
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0070 []byte
				var zb0071 int
				zb0071, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskRekeyTo")
					return
				}
				if zb0071 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0071), uint64(maxBitmaskSize))
					return
				}
				zb0070, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxnHeaders.BitmaskRekeyTo))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskRekeyTo")
					return
				}
				(*z).encodedTxnHeaders.BitmaskRekeyTo = bitmask(zb0070)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0072 int
			zb0072, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VotePK")
				return
			}
			if zb0072 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0072), uint64(maxAddressBytes))
				return
			}
			(*z).encodedKeyregTxnFields.VotePK, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedKeyregTxnFields.VotePK)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VotePK")
				return
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0073 []byte
				var zb0074 int
				zb0074, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVotePK")
					return
				}
				if zb0074 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0074), uint64(maxBitmaskSize))
					return
				}
				zb0073, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedKeyregTxnFields.BitmaskVotePK))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVotePK")
					return
				}
				(*z).encodedKeyregTxnFields.BitmaskVotePK = bitmask(zb0073)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0075 int
			zb0075, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SelectionPK")
				return
			}
			if zb0075 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0075), uint64(maxAddressBytes))
				return
			}
			(*z).encodedKeyregTxnFields.SelectionPK, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedKeyregTxnFields.SelectionPK)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SelectionPK")
				return
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0076 []byte
				var zb0077 int
				zb0077, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskSelectionPK")
					return
				}
				if zb0077 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0077), uint64(maxBitmaskSize))
					return
				}
				zb0076, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedKeyregTxnFields.BitmaskSelectionPK))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskSelectionPK")
					return
				}
				(*z).encodedKeyregTxnFields.BitmaskSelectionPK = bitmask(zb0076)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0078 int
			var zb0079 bool
			zb0078, zb0079, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteFirst")
				return
			}
			if zb0078 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0078), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "VoteFirst")
				return
			}
			if zb0079 {
				(*z).encodedKeyregTxnFields.VoteFirst = nil
			} else if (*z).encodedKeyregTxnFields.VoteFirst != nil && cap((*z).encodedKeyregTxnFields.VoteFirst) >= zb0078 {
				(*z).encodedKeyregTxnFields.VoteFirst = ((*z).encodedKeyregTxnFields.VoteFirst)[:zb0078]
			} else {
				(*z).encodedKeyregTxnFields.VoteFirst = make([]basics.Round, zb0078)
			}
			for zb0005 := range (*z).encodedKeyregTxnFields.VoteFirst {
				bts, err = (*z).encodedKeyregTxnFields.VoteFirst[zb0005].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "VoteFirst", zb0005)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0080 []byte
				var zb0081 int
				zb0081, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteFirst")
					return
				}
				if zb0081 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0081), uint64(maxBitmaskSize))
					return
				}
				zb0080, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedKeyregTxnFields.BitmaskVoteFirst))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteFirst")
					return
				}
				(*z).encodedKeyregTxnFields.BitmaskVoteFirst = bitmask(zb0080)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0082 int
			var zb0083 bool
			zb0082, zb0083, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteLast")
				return
			}
			if zb0082 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0082), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "VoteLast")
				return
			}
			if zb0083 {
				(*z).encodedKeyregTxnFields.VoteLast = nil
			} else if (*z).encodedKeyregTxnFields.VoteLast != nil && cap((*z).encodedKeyregTxnFields.VoteLast) >= zb0082 {
				(*z).encodedKeyregTxnFields.VoteLast = ((*z).encodedKeyregTxnFields.VoteLast)[:zb0082]
			} else {
				(*z).encodedKeyregTxnFields.VoteLast = make([]basics.Round, zb0082)
			}
			for zb0006 := range (*z).encodedKeyregTxnFields.VoteLast {
				bts, err = (*z).encodedKeyregTxnFields.VoteLast[zb0006].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "VoteLast", zb0006)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0084 []byte
				var zb0085 int
				zb0085, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteLast")
					return
				}
				if zb0085 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0085), uint64(maxBitmaskSize))
					return
				}
				zb0084, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedKeyregTxnFields.BitmaskVoteLast))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteLast")
					return
				}
				(*z).encodedKeyregTxnFields.BitmaskVoteLast = bitmask(zb0084)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0086 int
			var zb0087 bool
			zb0086, zb0087, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteKeyDilution")
				return
			}
			if zb0086 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0086), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "VoteKeyDilution")
				return
			}
			if zb0087 {
				(*z).encodedKeyregTxnFields.VoteKeyDilution = nil
			} else if (*z).encodedKeyregTxnFields.VoteKeyDilution != nil && cap((*z).encodedKeyregTxnFields.VoteKeyDilution) >= zb0086 {
				(*z).encodedKeyregTxnFields.VoteKeyDilution = ((*z).encodedKeyregTxnFields.VoteKeyDilution)[:zb0086]
			} else {
				(*z).encodedKeyregTxnFields.VoteKeyDilution = make([]uint64, zb0086)
			}
			for zb0007 := range (*z).encodedKeyregTxnFields.VoteKeyDilution {
				(*z).encodedKeyregTxnFields.VoteKeyDilution[zb0007], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "VoteKeyDilution", zb0007)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0088 []byte
				var zb0089 int
				zb0089, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteKeyDilution")
					return
				}
				if zb0089 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0089), uint64(maxBitmaskSize))
					return
				}
				zb0088, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedKeyregTxnFields.BitmaskVoteKeyDilution))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteKeyDilution")
					return
				}
				(*z).encodedKeyregTxnFields.BitmaskVoteKeyDilution = bitmask(zb0088)
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0090 []byte
				var zb0091 int
				zb0091, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskNonparticipation")
					return
				}
				if zb0091 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0091), uint64(maxBitmaskSize))
					return
				}
				zb0090, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedKeyregTxnFields.BitmaskNonparticipation))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskNonparticipation")
					return
				}
				(*z).encodedKeyregTxnFields.BitmaskNonparticipation = bitmask(zb0090)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0092 int
			zb0092, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Receiver")
				return
			}
			if zb0092 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0092), uint64(maxAddressBytes))
				return
			}
			(*z).encodedPaymentTxnFields.Receiver, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedPaymentTxnFields.Receiver)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Receiver")
				return
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0093 []byte
				var zb0094 int
				zb0094, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskReceiver")
					return
				}
				if zb0094 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0094), uint64(maxBitmaskSize))
					return
				}
				zb0093, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedPaymentTxnFields.BitmaskReceiver))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskReceiver")
					return
				}
				(*z).encodedPaymentTxnFields.BitmaskReceiver = bitmask(zb0093)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0095 int
			var zb0096 bool
			zb0095, zb0096, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Amount")
				return
			}
			if zb0095 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0095), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Amount")
				return
			}
			if zb0096 {
				(*z).encodedPaymentTxnFields.Amount = nil
			} else if (*z).encodedPaymentTxnFields.Amount != nil && cap((*z).encodedPaymentTxnFields.Amount) >= zb0095 {
				(*z).encodedPaymentTxnFields.Amount = ((*z).encodedPaymentTxnFields.Amount)[:zb0095]
			} else {
				(*z).encodedPaymentTxnFields.Amount = make([]basics.MicroAlgos, zb0095)
			}
			for zb0008 := range (*z).encodedPaymentTxnFields.Amount {
				bts, err = (*z).encodedPaymentTxnFields.Amount[zb0008].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Amount", zb0008)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0097 []byte
				var zb0098 int
				zb0098, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAmount")
					return
				}
				if zb0098 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0098), uint64(maxBitmaskSize))
					return
				}
				zb0097, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedPaymentTxnFields.BitmaskAmount))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAmount")
					return
				}
				(*z).encodedPaymentTxnFields.BitmaskAmount = bitmask(zb0097)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0099 int
			zb0099, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CloseRemainderTo")
				return
			}
			if zb0099 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0099), uint64(maxAddressBytes))
				return
			}
			(*z).encodedPaymentTxnFields.CloseRemainderTo, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedPaymentTxnFields.CloseRemainderTo)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CloseRemainderTo")
				return
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0100 []byte
				var zb0101 int
				zb0101, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCloseRemainderTo")
					return
				}
				if zb0101 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0101), uint64(maxBitmaskSize))
					return
				}
				zb0100, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedPaymentTxnFields.BitmaskCloseRemainderTo))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCloseRemainderTo")
					return
				}
				(*z).encodedPaymentTxnFields.BitmaskCloseRemainderTo = bitmask(zb0100)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0102 int
			var zb0103 bool
			zb0102, zb0103, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ConfigAsset")
				return
			}
			if zb0102 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0102), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ConfigAsset")
				return
			}
			if zb0103 {
				(*z).encodedAssetConfigTxnFields.ConfigAsset = nil
			} else if (*z).encodedAssetConfigTxnFields.ConfigAsset != nil && cap((*z).encodedAssetConfigTxnFields.ConfigAsset) >= zb0102 {
				(*z).encodedAssetConfigTxnFields.ConfigAsset = ((*z).encodedAssetConfigTxnFields.ConfigAsset)[:zb0102]
			} else {
				(*z).encodedAssetConfigTxnFields.ConfigAsset = make([]basics.AssetIndex, zb0102)
			}
			for zb0009 := range (*z).encodedAssetConfigTxnFields.ConfigAsset {
				bts, err = (*z).encodedAssetConfigTxnFields.ConfigAsset[zb0009].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ConfigAsset", zb0009)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0104 []byte
				var zb0105 int
				zb0105, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskConfigAsset")
					return
				}
				if zb0105 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0105), uint64(maxBitmaskSize))
					return
				}
				zb0104, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.BitmaskConfigAsset))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskConfigAsset")
					return
				}
				(*z).encodedAssetConfigTxnFields.BitmaskConfigAsset = bitmask(zb0104)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0106 int
			var zb0107 bool
			zb0106, zb0107, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Total")
				return
			}
			if zb0106 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0106), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Total")
				return
			}
			if zb0107 {
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.Total = nil
			} else if (*z).encodedAssetConfigTxnFields.encodedAssetParams.Total != nil && cap((*z).encodedAssetConfigTxnFields.encodedAssetParams.Total) >= zb0106 {
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.Total = ((*z).encodedAssetConfigTxnFields.encodedAssetParams.Total)[:zb0106]
			} else {
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.Total = make([]uint64, zb0106)
			}
			for zb0010 := range (*z).encodedAssetConfigTxnFields.encodedAssetParams.Total {
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.Total[zb0010], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Total", zb0010)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0108 []byte
				var zb0109 int
				zb0109, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskTotal")
					return
				}
				if zb0109 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0109), uint64(maxBitmaskSize))
					return
				}
				zb0108, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskTotal")
					return
				}
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal = bitmask(zb0108)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0110 int
			var zb0111 bool
			zb0110, zb0111, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Decimals")
				return
			}
			if zb0110 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0110), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Decimals")
				return
			}
			if zb0111 {
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals = nil
			} else if (*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals != nil && cap((*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals) >= zb0110 {
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals = ((*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals)[:zb0110]
			} else {
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals = make([]uint32, zb0110)
			}
			for zb0011 := range (*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals {
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals[zb0011], bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Decimals", zb0011)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0112 []byte
				var zb0113 int
				zb0113, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskDecimals")
					return
				}
				if zb0113 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0113), uint64(maxBitmaskSize))
					return
				}
				zb0112, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskDecimals")
					return
				}
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals = bitmask(zb0112)
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0114 []byte
				var zb0115 int
				zb0115, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskDefaultFrozen")
					return
				}
				if zb0115 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0115), uint64(maxBitmaskSize))
					return
				}
				zb0114, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskDefaultFrozen")
					return
				}
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen = bitmask(zb0114)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0116 int
			var zb0117 bool
			zb0116, zb0117, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "UnitName")
				return
			}
			if zb0116 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0116), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "UnitName")
				return
			}
			if zb0117 {
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName = nil
			} else if (*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName != nil && cap((*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName) >= zb0116 {
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName = ((*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName)[:zb0116]
			} else {
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName = make([]string, zb0116)
			}
			for zb0012 := range (*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName {
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName[zb0012], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "UnitName", zb0012)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0118 []byte
				var zb0119 int
				zb0119, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskUnitName")
					return
				}
				if zb0119 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0119), uint64(maxBitmaskSize))
					return
				}
				zb0118, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskUnitName")
					return
				}
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName = bitmask(zb0118)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0120 int
			var zb0121 bool
			zb0120, zb0121, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetName")
				return
			}
			if zb0120 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0120), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "AssetName")
				return
			}
			if zb0121 {
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName = nil
			} else if (*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName != nil && cap((*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName) >= zb0120 {
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName = ((*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName)[:zb0120]
			} else {
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName = make([]string, zb0120)
			}
			for zb0013 := range (*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName {
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName[zb0013], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AssetName", zb0013)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0122 []byte
				var zb0123 int
				zb0123, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetName")
					return
				}
				if zb0123 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0123), uint64(maxBitmaskSize))
					return
				}
				zb0122, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetName")
					return
				}
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName = bitmask(zb0122)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0124 int
			var zb0125 bool
			zb0124, zb0125, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "URL")
				return
			}
			if zb0124 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0124), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "URL")
				return
			}
			if zb0125 {
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.URL = nil
			} else if (*z).encodedAssetConfigTxnFields.encodedAssetParams.URL != nil && cap((*z).encodedAssetConfigTxnFields.encodedAssetParams.URL) >= zb0124 {
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.URL = ((*z).encodedAssetConfigTxnFields.encodedAssetParams.URL)[:zb0124]
			} else {
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.URL = make([]string, zb0124)
			}
			for zb0014 := range (*z).encodedAssetConfigTxnFields.encodedAssetParams.URL {
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.URL[zb0014], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "URL", zb0014)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0126 []byte
				var zb0127 int
				zb0127, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskURL")
					return
				}
				if zb0127 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0127), uint64(maxBitmaskSize))
					return
				}
				zb0126, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskURL")
					return
				}
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL = bitmask(zb0126)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0128 int
			zb0128, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MetadataHash")
				return
			}
			if zb0128 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0128), uint64(maxAddressBytes))
				return
			}
			(*z).encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MetadataHash")
				return
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0129 []byte
				var zb0130 int
				zb0130, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskMetadataHash")
					return
				}
				if zb0130 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0130), uint64(maxBitmaskSize))
					return
				}
				zb0129, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskMetadataHash")
					return
				}
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash = bitmask(zb0129)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0131 int
			zb0131, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Manager")
				return
			}
			if zb0131 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0131), uint64(maxAddressBytes))
				return
			}
			(*z).encodedAssetConfigTxnFields.encodedAssetParams.Manager, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetConfigTxnFields.encodedAssetParams.Manager)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Manager")
				return
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0132 []byte
				var zb0133 int
				zb0133, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskManager")
					return
				}
				if zb0133 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0133), uint64(maxBitmaskSize))
					return
				}
				zb0132, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskManager")
					return
				}
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager = bitmask(zb0132)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0134 int
			zb0134, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Reserve")
				return
			}
			if zb0134 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0134), uint64(maxAddressBytes))
				return
			}
			(*z).encodedAssetConfigTxnFields.encodedAssetParams.Reserve, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetConfigTxnFields.encodedAssetParams.Reserve)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Reserve")
				return
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0135 []byte
				var zb0136 int
				zb0136, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskReserve")
					return
				}
				if zb0136 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0136), uint64(maxBitmaskSize))
					return
				}
				zb0135, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskReserve")
					return
				}
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve = bitmask(zb0135)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0137 int
			zb0137, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Freeze")
				return
			}
			if zb0137 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0137), uint64(maxAddressBytes))
				return
			}
			(*z).encodedAssetConfigTxnFields.encodedAssetParams.Freeze, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetConfigTxnFields.encodedAssetParams.Freeze)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Freeze")
				return
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0138 []byte
				var zb0139 int
				zb0139, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreeze")
					return
				}
				if zb0139 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0139), uint64(maxBitmaskSize))
					return
				}
				zb0138, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreeze")
					return
				}
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze = bitmask(zb0138)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0140 int
			zb0140, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Clawback")
				return
			}
			if zb0140 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0140), uint64(maxAddressBytes))
				return
			}
			(*z).encodedAssetConfigTxnFields.encodedAssetParams.Clawback, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetConfigTxnFields.encodedAssetParams.Clawback)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Clawback")
				return
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0141 []byte
				var zb0142 int
				zb0142, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskClawback")
					return
				}
				if zb0142 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0142), uint64(maxBitmaskSize))
					return
				}
				zb0141, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskClawback")
					return
				}
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback = bitmask(zb0141)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0143 int
			var zb0144 bool
			zb0143, zb0144, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "XferAsset")
				return
			}
			if zb0143 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0143), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "XferAsset")
				return
			}
			if zb0144 {
				(*z).encodedAssetTransferTxnFields.XferAsset = nil
			} else if (*z).encodedAssetTransferTxnFields.XferAsset != nil && cap((*z).encodedAssetTransferTxnFields.XferAsset) >= zb0143 {
				(*z).encodedAssetTransferTxnFields.XferAsset = ((*z).encodedAssetTransferTxnFields.XferAsset)[:zb0143]
			} else {
				(*z).encodedAssetTransferTxnFields.XferAsset = make([]basics.AssetIndex, zb0143)
			}
			for zb0015 := range (*z).encodedAssetTransferTxnFields.XferAsset {
				bts, err = (*z).encodedAssetTransferTxnFields.XferAsset[zb0015].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "XferAsset", zb0015)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0145 []byte
				var zb0146 int
				zb0146, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskXferAsset")
					return
				}
				if zb0146 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0146), uint64(maxBitmaskSize))
					return
				}
				zb0145, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetTransferTxnFields.BitmaskXferAsset))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskXferAsset")
					return
				}
				(*z).encodedAssetTransferTxnFields.BitmaskXferAsset = bitmask(zb0145)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0147 int
			var zb0148 bool
			zb0147, zb0148, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetAmount")
				return
			}
			if zb0147 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0147), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "AssetAmount")
				return
			}
			if zb0148 {
				(*z).encodedAssetTransferTxnFields.AssetAmount = nil
			} else if (*z).encodedAssetTransferTxnFields.AssetAmount != nil && cap((*z).encodedAssetTransferTxnFields.AssetAmount) >= zb0147 {
				(*z).encodedAssetTransferTxnFields.AssetAmount = ((*z).encodedAssetTransferTxnFields.AssetAmount)[:zb0147]
			} else {
				(*z).encodedAssetTransferTxnFields.AssetAmount = make([]uint64, zb0147)
			}
			for zb0016 := range (*z).encodedAssetTransferTxnFields.AssetAmount {
				(*z).encodedAssetTransferTxnFields.AssetAmount[zb0016], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AssetAmount", zb0016)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0149 []byte
				var zb0150 int
				zb0150, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetAmount")
					return
				}
				if zb0150 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0150), uint64(maxBitmaskSize))
					return
				}
				zb0149, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetTransferTxnFields.BitmaskAssetAmount))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetAmount")
					return
				}
				(*z).encodedAssetTransferTxnFields.BitmaskAssetAmount = bitmask(zb0149)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0151 int
			zb0151, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetSender")
				return
			}
			if zb0151 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0151), uint64(maxAddressBytes))
				return
			}
			(*z).encodedAssetTransferTxnFields.AssetSender, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetTransferTxnFields.AssetSender)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetSender")
				return
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0152 []byte
				var zb0153 int
				zb0153, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetSender")
					return
				}
				if zb0153 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0153), uint64(maxBitmaskSize))
					return
				}
				zb0152, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetTransferTxnFields.BitmaskAssetSender))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetSender")
					return
				}
				(*z).encodedAssetTransferTxnFields.BitmaskAssetSender = bitmask(zb0152)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0154 int
			zb0154, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetReceiver")
				return
			}
			if zb0154 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0154), uint64(maxAddressBytes))
				return
			}
			(*z).encodedAssetTransferTxnFields.AssetReceiver, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetTransferTxnFields.AssetReceiver)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetReceiver")
				return
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0155 []byte
				var zb0156 int
				zb0156, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetReceiver")
					return
				}
				if zb0156 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0156), uint64(maxBitmaskSize))
					return
				}
				zb0155, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetTransferTxnFields.BitmaskAssetReceiver))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetReceiver")
					return
				}
				(*z).encodedAssetTransferTxnFields.BitmaskAssetReceiver = bitmask(zb0155)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0157 int
			zb0157, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetCloseTo")
				return
			}
			if zb0157 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0157), uint64(maxAddressBytes))
				return
			}
			(*z).encodedAssetTransferTxnFields.AssetCloseTo, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetTransferTxnFields.AssetCloseTo)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetCloseTo")
				return
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0158 []byte
				var zb0159 int
				zb0159, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetCloseTo")
					return
				}
				if zb0159 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0159), uint64(maxBitmaskSize))
					return
				}
				zb0158, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetTransferTxnFields.BitmaskAssetCloseTo))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetCloseTo")
					return
				}
				(*z).encodedAssetTransferTxnFields.BitmaskAssetCloseTo = bitmask(zb0158)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0160 int
			zb0160, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FreezeAccount")
				return
			}
			if zb0160 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0160), uint64(maxAddressBytes))
				return
			}
			(*z).encodedAssetFreezeTxnFields.FreezeAccount, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetFreezeTxnFields.FreezeAccount)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FreezeAccount")
				return
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0161 []byte
				var zb0162 int
				zb0162, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreezeAccount")
					return
				}
				if zb0162 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0162), uint64(maxBitmaskSize))
					return
				}
				zb0161, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetFreezeTxnFields.BitmaskFreezeAccount))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreezeAccount")
					return
				}
				(*z).encodedAssetFreezeTxnFields.BitmaskFreezeAccount = bitmask(zb0161)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0163 int
			var zb0164 bool
			zb0163, zb0164, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FreezeAsset")
				return
			}
			if zb0163 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0163), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "FreezeAsset")
				return
			}
			if zb0164 {
				(*z).encodedAssetFreezeTxnFields.FreezeAsset = nil
			} else if (*z).encodedAssetFreezeTxnFields.FreezeAsset != nil && cap((*z).encodedAssetFreezeTxnFields.FreezeAsset) >= zb0163 {
				(*z).encodedAssetFreezeTxnFields.FreezeAsset = ((*z).encodedAssetFreezeTxnFields.FreezeAsset)[:zb0163]
			} else {
				(*z).encodedAssetFreezeTxnFields.FreezeAsset = make([]basics.AssetIndex, zb0163)
			}
			for zb0017 := range (*z).encodedAssetFreezeTxnFields.FreezeAsset {
				bts, err = (*z).encodedAssetFreezeTxnFields.FreezeAsset[zb0017].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "FreezeAsset", zb0017)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0165 []byte
				var zb0166 int
				zb0166, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreezeAsset")
					return
				}
				if zb0166 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0166), uint64(maxBitmaskSize))
					return
				}
				zb0165, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetFreezeTxnFields.BitmaskFreezeAsset))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreezeAsset")
					return
				}
				(*z).encodedAssetFreezeTxnFields.BitmaskFreezeAsset = bitmask(zb0165)
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0167 []byte
				var zb0168 int
				zb0168, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetFrozen")
					return
				}
				if zb0168 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0168), uint64(maxBitmaskSize))
					return
				}
				zb0167, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetFreezeTxnFields.BitmaskAssetFrozen))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetFrozen")
					return
				}
				(*z).encodedAssetFreezeTxnFields.BitmaskAssetFrozen = bitmask(zb0167)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0169 int
			var zb0170 bool
			zb0169, zb0170, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApplicationID")
				return
			}
			if zb0169 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0169), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ApplicationID")
				return
			}
			if zb0170 {
				(*z).encodedApplicationCallTxnFields.ApplicationID = nil
			} else if (*z).encodedApplicationCallTxnFields.ApplicationID != nil && cap((*z).encodedApplicationCallTxnFields.ApplicationID) >= zb0169 {
				(*z).encodedApplicationCallTxnFields.ApplicationID = ((*z).encodedApplicationCallTxnFields.ApplicationID)[:zb0169]
			} else {
				(*z).encodedApplicationCallTxnFields.ApplicationID = make([]basics.AppIndex, zb0169)
			}
			for zb0018 := range (*z).encodedApplicationCallTxnFields.ApplicationID {
				bts, err = (*z).encodedApplicationCallTxnFields.ApplicationID[zb0018].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ApplicationID", zb0018)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0171 []byte
				var zb0172 int
				zb0172, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApplicationID")
					return
				}
				if zb0172 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0172), uint64(maxBitmaskSize))
					return
				}
				zb0171, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskApplicationID))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApplicationID")
					return
				}
				(*z).encodedApplicationCallTxnFields.BitmaskApplicationID = bitmask(zb0171)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0173 int
			zb0173, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "OnCompletion")
				return
			}
			if zb0173 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0173), uint64(maxEncodedTransactionGroup))
				return
			}
			(*z).encodedApplicationCallTxnFields.OnCompletion, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedApplicationCallTxnFields.OnCompletion)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "OnCompletion")
				return
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0174 []byte
				var zb0175 int
				zb0175, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskOnCompletion")
					return
				}
				if zb0175 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0175), uint64(maxBitmaskSize))
					return
				}
				zb0174, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskOnCompletion))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskOnCompletion")
					return
				}
				(*z).encodedApplicationCallTxnFields.BitmaskOnCompletion = bitmask(zb0174)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0176 int
			var zb0177 bool
			zb0176, zb0177, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs")
				return
			}
			if zb0176 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0176), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs")
				return
			}
			if zb0177 {
				(*z).encodedApplicationCallTxnFields.ApplicationArgs = nil
			} else if (*z).encodedApplicationCallTxnFields.ApplicationArgs != nil && cap((*z).encodedApplicationCallTxnFields.ApplicationArgs) >= zb0176 {
				(*z).encodedApplicationCallTxnFields.ApplicationArgs = ((*z).encodedApplicationCallTxnFields.ApplicationArgs)[:zb0176]
			} else {
				(*z).encodedApplicationCallTxnFields.ApplicationArgs = make([]applicationArgs, zb0176)
			}
			for zb0019 := range (*z).encodedApplicationCallTxnFields.ApplicationArgs {
				var zb0178 int
				var zb0179 bool
				zb0178, zb0179, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs", zb0019)
					return
				}
				if zb0178 > transactions.EncodedMaxApplicationArgs {
					err = msgp.ErrOverflow(uint64(zb0178), uint64(transactions.EncodedMaxApplicationArgs))
					err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs", zb0019)
					return
				}
				if zb0179 {
					(*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019] = nil
				} else if (*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019] != nil && cap((*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019]) >= zb0178 {
					(*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019] = ((*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019])[:zb0178]
				} else {
					(*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019] = make(applicationArgs, zb0178)
				}
				for zb0020 := range (*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019] {
					(*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019][zb0020], bts, err = msgp.ReadBytesBytes(bts, (*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019][zb0020])
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs", zb0019, zb0020)
						return
					}
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0180 []byte
				var zb0181 int
				zb0181, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApplicationArgs")
					return
				}
				if zb0181 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0181), uint64(maxBitmaskSize))
					return
				}
				zb0180, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskApplicationArgs))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApplicationArgs")
					return
				}
				(*z).encodedApplicationCallTxnFields.BitmaskApplicationArgs = bitmask(zb0180)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0182 int
			var zb0183 bool
			zb0182, zb0183, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Accounts")
				return
			}
			if zb0182 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0182), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Accounts")
				return
			}
			if zb0183 {
				(*z).encodedApplicationCallTxnFields.Accounts = nil
			} else if (*z).encodedApplicationCallTxnFields.Accounts != nil && cap((*z).encodedApplicationCallTxnFields.Accounts) >= zb0182 {
				(*z).encodedApplicationCallTxnFields.Accounts = ((*z).encodedApplicationCallTxnFields.Accounts)[:zb0182]
			} else {
				(*z).encodedApplicationCallTxnFields.Accounts = make([]addresses, zb0182)
			}
			for zb0021 := range (*z).encodedApplicationCallTxnFields.Accounts {
				var zb0184 int
				var zb0185 bool
				zb0184, zb0185, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Accounts", zb0021)
					return
				}
				if zb0184 > transactions.EncodedMaxAccounts {
					err = msgp.ErrOverflow(uint64(zb0184), uint64(transactions.EncodedMaxAccounts))
					err = msgp.WrapError(err, "struct-from-array", "Accounts", zb0021)
					return
				}
				if zb0185 {
					(*z).encodedApplicationCallTxnFields.Accounts[zb0021] = nil
				} else if (*z).encodedApplicationCallTxnFields.Accounts[zb0021] != nil && cap((*z).encodedApplicationCallTxnFields.Accounts[zb0021]) >= zb0184 {
					(*z).encodedApplicationCallTxnFields.Accounts[zb0021] = ((*z).encodedApplicationCallTxnFields.Accounts[zb0021])[:zb0184]
				} else {
					(*z).encodedApplicationCallTxnFields.Accounts[zb0021] = make(addresses, zb0184)
				}
				for zb0022 := range (*z).encodedApplicationCallTxnFields.Accounts[zb0021] {
					bts, err = (*z).encodedApplicationCallTxnFields.Accounts[zb0021][zb0022].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "Accounts", zb0021, zb0022)
						return
					}
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0186 []byte
				var zb0187 int
				zb0187, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAccounts")
					return
				}
				if zb0187 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0187), uint64(maxBitmaskSize))
					return
				}
				zb0186, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskAccounts))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAccounts")
					return
				}
				(*z).encodedApplicationCallTxnFields.BitmaskAccounts = bitmask(zb0186)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0188 int
			var zb0189 bool
			zb0188, zb0189, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ForeignApps")
				return
			}
			if zb0188 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0188), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ForeignApps")
				return
			}
			if zb0189 {
				(*z).encodedApplicationCallTxnFields.ForeignApps = nil
			} else if (*z).encodedApplicationCallTxnFields.ForeignApps != nil && cap((*z).encodedApplicationCallTxnFields.ForeignApps) >= zb0188 {
				(*z).encodedApplicationCallTxnFields.ForeignApps = ((*z).encodedApplicationCallTxnFields.ForeignApps)[:zb0188]
			} else {
				(*z).encodedApplicationCallTxnFields.ForeignApps = make([]appIndices, zb0188)
			}
			for zb0023 := range (*z).encodedApplicationCallTxnFields.ForeignApps {
				var zb0190 int
				var zb0191 bool
				zb0190, zb0191, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ForeignApps", zb0023)
					return
				}
				if zb0190 > transactions.EncodedMaxForeignApps {
					err = msgp.ErrOverflow(uint64(zb0190), uint64(transactions.EncodedMaxForeignApps))
					err = msgp.WrapError(err, "struct-from-array", "ForeignApps", zb0023)
					return
				}
				if zb0191 {
					(*z).encodedApplicationCallTxnFields.ForeignApps[zb0023] = nil
				} else if (*z).encodedApplicationCallTxnFields.ForeignApps[zb0023] != nil && cap((*z).encodedApplicationCallTxnFields.ForeignApps[zb0023]) >= zb0190 {
					(*z).encodedApplicationCallTxnFields.ForeignApps[zb0023] = ((*z).encodedApplicationCallTxnFields.ForeignApps[zb0023])[:zb0190]
				} else {
					(*z).encodedApplicationCallTxnFields.ForeignApps[zb0023] = make(appIndices, zb0190)
				}
				for zb0024 := range (*z).encodedApplicationCallTxnFields.ForeignApps[zb0023] {
					bts, err = (*z).encodedApplicationCallTxnFields.ForeignApps[zb0023][zb0024].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ForeignApps", zb0023, zb0024)
						return
					}
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0192 []byte
				var zb0193 int
				zb0193, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskForeignApps")
					return
				}
				if zb0193 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0193), uint64(maxBitmaskSize))
					return
				}
				zb0192, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskForeignApps))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskForeignApps")
					return
				}
				(*z).encodedApplicationCallTxnFields.BitmaskForeignApps = bitmask(zb0192)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0194 int
			var zb0195 bool
			zb0194, zb0195, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ForeignAssets")
				return
			}
			if zb0194 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0194), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ForeignAssets")
				return
			}
			if zb0195 {
				(*z).encodedApplicationCallTxnFields.ForeignAssets = nil
			} else if (*z).encodedApplicationCallTxnFields.ForeignAssets != nil && cap((*z).encodedApplicationCallTxnFields.ForeignAssets) >= zb0194 {
				(*z).encodedApplicationCallTxnFields.ForeignAssets = ((*z).encodedApplicationCallTxnFields.ForeignAssets)[:zb0194]
			} else {
				(*z).encodedApplicationCallTxnFields.ForeignAssets = make([]assetIndices, zb0194)
			}
			for zb0025 := range (*z).encodedApplicationCallTxnFields.ForeignAssets {
				var zb0196 int
				var zb0197 bool
				zb0196, zb0197, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ForeignAssets", zb0025)
					return
				}
				if zb0196 > transactions.EncodedMaxForeignAssets {
					err = msgp.ErrOverflow(uint64(zb0196), uint64(transactions.EncodedMaxForeignAssets))
					err = msgp.WrapError(err, "struct-from-array", "ForeignAssets", zb0025)
					return
				}
				if zb0197 {
					(*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025] = nil
				} else if (*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025] != nil && cap((*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025]) >= zb0196 {
					(*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025] = ((*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025])[:zb0196]
				} else {
					(*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025] = make(assetIndices, zb0196)
				}
				for zb0026 := range (*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025] {
					bts, err = (*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025][zb0026].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ForeignAssets", zb0025, zb0026)
						return
					}
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0198 []byte
				var zb0199 int
				zb0199, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskForeignAssets")
					return
				}
				if zb0199 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0199), uint64(maxBitmaskSize))
					return
				}
				zb0198, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskForeignAssets))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskForeignAssets")
					return
				}
				(*z).encodedApplicationCallTxnFields.BitmaskForeignAssets = bitmask(zb0198)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0200 int
			var zb0201 bool
			zb0200, zb0201, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LocalNumUint")
				return
			}
			if zb0200 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0200), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "LocalNumUint")
				return
			}
			if zb0201 {
				(*z).encodedApplicationCallTxnFields.LocalNumUint = nil
			} else if (*z).encodedApplicationCallTxnFields.LocalNumUint != nil && cap((*z).encodedApplicationCallTxnFields.LocalNumUint) >= zb0200 {
				(*z).encodedApplicationCallTxnFields.LocalNumUint = ((*z).encodedApplicationCallTxnFields.LocalNumUint)[:zb0200]
			} else {
				(*z).encodedApplicationCallTxnFields.LocalNumUint = make([]uint64, zb0200)
			}
			for zb0027 := range (*z).encodedApplicationCallTxnFields.LocalNumUint {
				(*z).encodedApplicationCallTxnFields.LocalNumUint[zb0027], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "LocalNumUint", zb0027)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0202 []byte
				var zb0203 int
				zb0203, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLocalNumUint")
					return
				}
				if zb0203 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0203), uint64(maxBitmaskSize))
					return
				}
				zb0202, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskLocalNumUint))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLocalNumUint")
					return
				}
				(*z).encodedApplicationCallTxnFields.BitmaskLocalNumUint = bitmask(zb0202)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0204 int
			var zb0205 bool
			zb0204, zb0205, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LocalNumByteSlice")
				return
			}
			if zb0204 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0204), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "LocalNumByteSlice")
				return
			}
			if zb0205 {
				(*z).encodedApplicationCallTxnFields.LocalNumByteSlice = nil
			} else if (*z).encodedApplicationCallTxnFields.LocalNumByteSlice != nil && cap((*z).encodedApplicationCallTxnFields.LocalNumByteSlice) >= zb0204 {
				(*z).encodedApplicationCallTxnFields.LocalNumByteSlice = ((*z).encodedApplicationCallTxnFields.LocalNumByteSlice)[:zb0204]
			} else {
				(*z).encodedApplicationCallTxnFields.LocalNumByteSlice = make([]uint64, zb0204)
			}
			for zb0028 := range (*z).encodedApplicationCallTxnFields.LocalNumByteSlice {
				(*z).encodedApplicationCallTxnFields.LocalNumByteSlice[zb0028], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "LocalNumByteSlice", zb0028)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0206 []byte
				var zb0207 int
				zb0207, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLocalNumByteSlice")
					return
				}
				if zb0207 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0207), uint64(maxBitmaskSize))
					return
				}
				zb0206, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLocalNumByteSlice")
					return
				}
				(*z).encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice = bitmask(zb0206)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0208 int
			var zb0209 bool
			zb0208, zb0209, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GlobalNumUint")
				return
			}
			if zb0208 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0208), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "GlobalNumUint")
				return
			}
			if zb0209 {
				(*z).encodedApplicationCallTxnFields.GlobalNumUint = nil
			} else if (*z).encodedApplicationCallTxnFields.GlobalNumUint != nil && cap((*z).encodedApplicationCallTxnFields.GlobalNumUint) >= zb0208 {
				(*z).encodedApplicationCallTxnFields.GlobalNumUint = ((*z).encodedApplicationCallTxnFields.GlobalNumUint)[:zb0208]
			} else {
				(*z).encodedApplicationCallTxnFields.GlobalNumUint = make([]uint64, zb0208)
			}
			for zb0029 := range (*z).encodedApplicationCallTxnFields.GlobalNumUint {
				(*z).encodedApplicationCallTxnFields.GlobalNumUint[zb0029], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "GlobalNumUint", zb0029)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0210 []byte
				var zb0211 int
				zb0211, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGlobalNumUint")
					return
				}
				if zb0211 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0211), uint64(maxBitmaskSize))
					return
				}
				zb0210, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskGlobalNumUint))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGlobalNumUint")
					return
				}
				(*z).encodedApplicationCallTxnFields.BitmaskGlobalNumUint = bitmask(zb0210)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0212 int
			var zb0213 bool
			zb0212, zb0213, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GlobalNumByteSlice")
				return
			}
			if zb0212 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0212), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "GlobalNumByteSlice")
				return
			}
			if zb0213 {
				(*z).encodedApplicationCallTxnFields.GlobalNumByteSlice = nil
			} else if (*z).encodedApplicationCallTxnFields.GlobalNumByteSlice != nil && cap((*z).encodedApplicationCallTxnFields.GlobalNumByteSlice) >= zb0212 {
				(*z).encodedApplicationCallTxnFields.GlobalNumByteSlice = ((*z).encodedApplicationCallTxnFields.GlobalNumByteSlice)[:zb0212]
			} else {
				(*z).encodedApplicationCallTxnFields.GlobalNumByteSlice = make([]uint64, zb0212)
			}
			for zb0030 := range (*z).encodedApplicationCallTxnFields.GlobalNumByteSlice {
				(*z).encodedApplicationCallTxnFields.GlobalNumByteSlice[zb0030], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "GlobalNumByteSlice", zb0030)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0214 []byte
				var zb0215 int
				zb0215, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGlobalNumByteSlice")
					return
				}
				if zb0215 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0215), uint64(maxBitmaskSize))
					return
				}
				zb0214, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGlobalNumByteSlice")
					return
				}
				(*z).encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice = bitmask(zb0214)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0216 int
			var zb0217 bool
			zb0216, zb0217, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram")
				return
			}
			if zb0216 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0216), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram")
				return
			}
			if zb0217 {
				(*z).encodedApplicationCallTxnFields.ApprovalProgram = nil
			} else if (*z).encodedApplicationCallTxnFields.ApprovalProgram != nil && cap((*z).encodedApplicationCallTxnFields.ApprovalProgram) >= zb0216 {
				(*z).encodedApplicationCallTxnFields.ApprovalProgram = ((*z).encodedApplicationCallTxnFields.ApprovalProgram)[:zb0216]
			} else {
				(*z).encodedApplicationCallTxnFields.ApprovalProgram = make([]program, zb0216)
			}
			for zb0031 := range (*z).encodedApplicationCallTxnFields.ApprovalProgram {
				{
					var zb0218 []byte
					var zb0219 int
					zb0219, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram", zb0031)
						return
					}
					if zb0219 > config.MaxAppProgramLen {
						err = msgp.ErrOverflow(uint64(zb0219), uint64(config.MaxAppProgramLen))
						return
					}
					zb0218, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.ApprovalProgram[zb0031]))
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram", zb0031)
						return
					}
					(*z).encodedApplicationCallTxnFields.ApprovalProgram[zb0031] = program(zb0218)
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0220 []byte
				var zb0221 int
				zb0221, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApprovalProgram")
					return
				}
				if zb0221 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0221), uint64(maxBitmaskSize))
					return
				}
				zb0220, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskApprovalProgram))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApprovalProgram")
					return
				}
				(*z).encodedApplicationCallTxnFields.BitmaskApprovalProgram = bitmask(zb0220)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0222 int
			var zb0223 bool
			zb0222, zb0223, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram")
				return
			}
			if zb0222 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0222), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram")
				return
			}
			if zb0223 {
				(*z).encodedApplicationCallTxnFields.ClearStateProgram = nil
			} else if (*z).encodedApplicationCallTxnFields.ClearStateProgram != nil && cap((*z).encodedApplicationCallTxnFields.ClearStateProgram) >= zb0222 {
				(*z).encodedApplicationCallTxnFields.ClearStateProgram = ((*z).encodedApplicationCallTxnFields.ClearStateProgram)[:zb0222]
			} else {
				(*z).encodedApplicationCallTxnFields.ClearStateProgram = make([]program, zb0222)
			}
			for zb0032 := range (*z).encodedApplicationCallTxnFields.ClearStateProgram {
				{
					var zb0224 []byte
					var zb0225 int
					zb0225, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram", zb0032)
						return
					}
					if zb0225 > config.MaxAppProgramLen {
						err = msgp.ErrOverflow(uint64(zb0225), uint64(config.MaxAppProgramLen))
						return
					}
					zb0224, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.ClearStateProgram[zb0032]))
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram", zb0032)
						return
					}
					(*z).encodedApplicationCallTxnFields.ClearStateProgram[zb0032] = program(zb0224)
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0226 []byte
				var zb0227 int
				zb0227, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskClearStateProgram")
					return
				}
				if zb0227 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0227), uint64(maxBitmaskSize))
					return
				}
				zb0226, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskClearStateProgram))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskClearStateProgram")
					return
				}
				(*z).encodedApplicationCallTxnFields.BitmaskClearStateProgram = bitmask(zb0226)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0228 int
			var zb0229 bool
			zb0228, zb0229, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CertRound")
				return
			}
			if zb0228 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0228), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "CertRound")
				return
			}
			if zb0229 {
				(*z).encodedCompactCertTxnFields.CertRound = nil
			} else if (*z).encodedCompactCertTxnFields.CertRound != nil && cap((*z).encodedCompactCertTxnFields.CertRound) >= zb0228 {
				(*z).encodedCompactCertTxnFields.CertRound = ((*z).encodedCompactCertTxnFields.CertRound)[:zb0228]
			} else {
				(*z).encodedCompactCertTxnFields.CertRound = make([]basics.Round, zb0228)
			}
			for zb0033 := range (*z).encodedCompactCertTxnFields.CertRound {
				bts, err = (*z).encodedCompactCertTxnFields.CertRound[zb0033].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "CertRound", zb0033)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0230 []byte
				var zb0231 int
				zb0231, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCertRound")
					return
				}
				if zb0231 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0231), uint64(maxBitmaskSize))
					return
				}
				zb0230, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedCompactCertTxnFields.BitmaskCertRound))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCertRound")
					return
				}
				(*z).encodedCompactCertTxnFields.BitmaskCertRound = bitmask(zb0230)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0232 int
			var zb0233 bool
			zb0232, zb0233, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CertType")
				return
			}
			if zb0232 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0232), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "CertType")
				return
			}
			if zb0233 {
				(*z).encodedCompactCertTxnFields.CertType = nil
			} else if (*z).encodedCompactCertTxnFields.CertType != nil && cap((*z).encodedCompactCertTxnFields.CertType) >= zb0232 {
				(*z).encodedCompactCertTxnFields.CertType = ((*z).encodedCompactCertTxnFields.CertType)[:zb0232]
			} else {
				(*z).encodedCompactCertTxnFields.CertType = make([]protocol.CompactCertType, zb0232)
			}
			for zb0034 := range (*z).encodedCompactCertTxnFields.CertType {
				bts, err = (*z).encodedCompactCertTxnFields.CertType[zb0034].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "CertType", zb0034)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0234 []byte
				var zb0235 int
				zb0235, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCertType")
					return
				}
				if zb0235 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0235), uint64(maxBitmaskSize))
					return
				}
				zb0234, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedCompactCertTxnFields.BitmaskCertType))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCertType")
					return
				}
				(*z).encodedCompactCertTxnFields.BitmaskCertType = bitmask(zb0234)
			}
		}
		if zb0036 > 0 {
			zb0036--
			var zb0236 int
			var zb0237 bool
			zb0236, zb0237, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Cert")
				return
			}
			if zb0236 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0236), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Cert")
				return
			}
			if zb0237 {
				(*z).encodedCompactCertTxnFields.Cert = nil
			} else if (*z).encodedCompactCertTxnFields.Cert != nil && cap((*z).encodedCompactCertTxnFields.Cert) >= zb0236 {
				(*z).encodedCompactCertTxnFields.Cert = ((*z).encodedCompactCertTxnFields.Cert)[:zb0236]
			} else {
				(*z).encodedCompactCertTxnFields.Cert = make([]compactcert.Cert, zb0236)
			}
			for zb0035 := range (*z).encodedCompactCertTxnFields.Cert {
				bts, err = (*z).encodedCompactCertTxnFields.Cert[zb0035].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Cert", zb0035)
					return
				}
			}
		}
		if zb0036 > 0 {
			zb0036--
			{
				var zb0238 []byte
				var zb0239 int
				zb0239, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCert")
					return
				}
				if zb0239 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0239), uint64(maxBitmaskSize))
					return
				}
				zb0238, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedCompactCertTxnFields.BitmaskCert))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCert")
					return
				}
				(*z).encodedCompactCertTxnFields.BitmaskCert = bitmask(zb0238)
			}
		}
		if zb0036 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0036)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0037 {
			(*z) = encodedTxns{}
		}
		for zb0036 > 0 {
			zb0036--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "type":
				var zb0240 int
				zb0240, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "TxType")
					return
				}
				if zb0240 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0240), uint64(maxEncodedTransactionGroup))
					return
				}
				(*z).TxType, bts, err = msgp.ReadBytesBytes(bts, (*z).TxType)
				if err != nil {
					err = msgp.WrapError(err, "TxType")
					return
				}
			case "typebm":
				{
					var zb0241 []byte
					var zb0242 int
					zb0242, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskTxType")
						return
					}
					if zb0242 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0242), uint64(maxBitmaskSize))
						return
					}
					zb0241, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).BitmaskTxType))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskTxType")
						return
					}
					(*z).BitmaskTxType = bitmask(zb0241)
				}
			case "snd":
				var zb0243 int
				zb0243, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sender")
					return
				}
				if zb0243 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0243), uint64(maxAddressBytes))
					return
				}
				(*z).encodedTxnHeaders.Sender, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxnHeaders.Sender)
				if err != nil {
					err = msgp.WrapError(err, "Sender")
					return
				}
			case "sndbm":
				{
					var zb0244 []byte
					var zb0245 int
					zb0245, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskSender")
						return
					}
					if zb0245 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0245), uint64(maxBitmaskSize))
						return
					}
					zb0244, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxnHeaders.BitmaskSender))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskSender")
						return
					}
					(*z).encodedTxnHeaders.BitmaskSender = bitmask(zb0244)
				}
			case "fee":
				var zb0246 int
				var zb0247 bool
				zb0246, zb0247, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Fee")
					return
				}
				if zb0246 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0246), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Fee")
					return
				}
				if zb0247 {
					(*z).encodedTxnHeaders.Fee = nil
				} else if (*z).encodedTxnHeaders.Fee != nil && cap((*z).encodedTxnHeaders.Fee) >= zb0246 {
					(*z).encodedTxnHeaders.Fee = ((*z).encodedTxnHeaders.Fee)[:zb0246]
				} else {
					(*z).encodedTxnHeaders.Fee = make([]basics.MicroAlgos, zb0246)
				}
				for zb0001 := range (*z).encodedTxnHeaders.Fee {
					bts, err = (*z).encodedTxnHeaders.Fee[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Fee", zb0001)
						return
					}
				}
			case "feebm":
				{
					var zb0248 []byte
					var zb0249 int
					zb0249, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFee")
						return
					}
					if zb0249 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0249), uint64(maxBitmaskSize))
						return
					}
					zb0248, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxnHeaders.BitmaskFee))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFee")
						return
					}
					(*z).encodedTxnHeaders.BitmaskFee = bitmask(zb0248)
				}
			case "fv":
				var zb0250 int
				var zb0251 bool
				zb0250, zb0251, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "FirstValid")
					return
				}
				if zb0250 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0250), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "FirstValid")
					return
				}
				if zb0251 {
					(*z).encodedTxnHeaders.FirstValid = nil
				} else if (*z).encodedTxnHeaders.FirstValid != nil && cap((*z).encodedTxnHeaders.FirstValid) >= zb0250 {
					(*z).encodedTxnHeaders.FirstValid = ((*z).encodedTxnHeaders.FirstValid)[:zb0250]
				} else {
					(*z).encodedTxnHeaders.FirstValid = make([]basics.Round, zb0250)
				}
				for zb0002 := range (*z).encodedTxnHeaders.FirstValid {
					bts, err = (*z).encodedTxnHeaders.FirstValid[zb0002].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "FirstValid", zb0002)
						return
					}
				}
			case "fvbm":
				{
					var zb0252 []byte
					var zb0253 int
					zb0253, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFirstValid")
						return
					}
					if zb0253 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0253), uint64(maxBitmaskSize))
						return
					}
					zb0252, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxnHeaders.BitmaskFirstValid))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFirstValid")
						return
					}
					(*z).encodedTxnHeaders.BitmaskFirstValid = bitmask(zb0252)
				}
			case "lv":
				var zb0254 int
				var zb0255 bool
				zb0254, zb0255, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LastValid")
					return
				}
				if zb0254 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0254), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "LastValid")
					return
				}
				if zb0255 {
					(*z).encodedTxnHeaders.LastValid = nil
				} else if (*z).encodedTxnHeaders.LastValid != nil && cap((*z).encodedTxnHeaders.LastValid) >= zb0254 {
					(*z).encodedTxnHeaders.LastValid = ((*z).encodedTxnHeaders.LastValid)[:zb0254]
				} else {
					(*z).encodedTxnHeaders.LastValid = make([]basics.Round, zb0254)
				}
				for zb0003 := range (*z).encodedTxnHeaders.LastValid {
					bts, err = (*z).encodedTxnHeaders.LastValid[zb0003].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "LastValid", zb0003)
						return
					}
				}
			case "lvbm":
				{
					var zb0256 []byte
					var zb0257 int
					zb0257, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLastValid")
						return
					}
					if zb0257 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0257), uint64(maxBitmaskSize))
						return
					}
					zb0256, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxnHeaders.BitmaskLastValid))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLastValid")
						return
					}
					(*z).encodedTxnHeaders.BitmaskLastValid = bitmask(zb0256)
				}
			case "note":
				var zb0258 int
				var zb0259 bool
				zb0258, zb0259, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Note")
					return
				}
				if zb0258 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0258), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Note")
					return
				}
				if zb0259 {
					(*z).encodedTxnHeaders.Note = nil
				} else if (*z).encodedTxnHeaders.Note != nil && cap((*z).encodedTxnHeaders.Note) >= zb0258 {
					(*z).encodedTxnHeaders.Note = ((*z).encodedTxnHeaders.Note)[:zb0258]
				} else {
					(*z).encodedTxnHeaders.Note = make([][]byte, zb0258)
				}
				for zb0004 := range (*z).encodedTxnHeaders.Note {
					(*z).encodedTxnHeaders.Note[zb0004], bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxnHeaders.Note[zb0004])
					if err != nil {
						err = msgp.WrapError(err, "Note", zb0004)
						return
					}
				}
			case "notebm":
				{
					var zb0260 []byte
					var zb0261 int
					zb0261, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskNote")
						return
					}
					if zb0261 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0261), uint64(maxBitmaskSize))
						return
					}
					zb0260, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxnHeaders.BitmaskNote))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskNote")
						return
					}
					(*z).encodedTxnHeaders.BitmaskNote = bitmask(zb0260)
				}
			case "gen":
				(*z).encodedTxnHeaders.GenesisID, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "GenesisID")
					return
				}
			case "genbm":
				{
					var zb0262 []byte
					var zb0263 int
					zb0263, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGenesisID")
						return
					}
					if zb0263 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0263), uint64(maxBitmaskSize))
						return
					}
					zb0262, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxnHeaders.BitmaskGenesisID))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGenesisID")
						return
					}
					(*z).encodedTxnHeaders.BitmaskGenesisID = bitmask(zb0262)
				}
			case "gh":
				bts, err = (*z).encodedTxnHeaders.GenesisHash.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "GenesisHash")
					return
				}
			case "ghbm":
				{
					var zb0264 []byte
					var zb0265 int
					zb0265, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGenesisHash")
						return
					}
					if zb0265 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0265), uint64(maxBitmaskSize))
						return
					}
					zb0264, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxnHeaders.BitmaskGenesisHash))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGenesisHash")
						return
					}
					(*z).encodedTxnHeaders.BitmaskGenesisHash = bitmask(zb0264)
				}
			case "grpbm":
				{
					var zb0266 []byte
					var zb0267 int
					zb0267, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGroup")
						return
					}
					if zb0267 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0267), uint64(maxBitmaskSize))
						return
					}
					zb0266, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxnHeaders.BitmaskGroup))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGroup")
						return
					}
					(*z).encodedTxnHeaders.BitmaskGroup = bitmask(zb0266)
				}
			case "lx":
				var zb0268 int
				zb0268, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Lease")
					return
				}
				if zb0268 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0268), uint64(maxAddressBytes))
					return
				}
				(*z).encodedTxnHeaders.Lease, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxnHeaders.Lease)
				if err != nil {
					err = msgp.WrapError(err, "Lease")
					return
				}
			case "lxbm":
				{
					var zb0269 []byte
					var zb0270 int
					zb0270, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLease")
						return
					}
					if zb0270 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0270), uint64(maxBitmaskSize))
						return
					}
					zb0269, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxnHeaders.BitmaskLease))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLease")
						return
					}
					(*z).encodedTxnHeaders.BitmaskLease = bitmask(zb0269)
				}
			case "rekey":
				var zb0271 int
				zb0271, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "RekeyTo")
					return
				}
				if zb0271 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0271), uint64(maxAddressBytes))
					return
				}
				(*z).encodedTxnHeaders.RekeyTo, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedTxnHeaders.RekeyTo)
				if err != nil {
					err = msgp.WrapError(err, "RekeyTo")
					return
				}
			case "rekeybm":
				{
					var zb0272 []byte
					var zb0273 int
					zb0273, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskRekeyTo")
						return
					}
					if zb0273 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0273), uint64(maxBitmaskSize))
						return
					}
					zb0272, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedTxnHeaders.BitmaskRekeyTo))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskRekeyTo")
						return
					}
					(*z).encodedTxnHeaders.BitmaskRekeyTo = bitmask(zb0272)
				}
			case "votekey":
				var zb0274 int
				zb0274, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "VotePK")
					return
				}
				if zb0274 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0274), uint64(maxAddressBytes))
					return
				}
				(*z).encodedKeyregTxnFields.VotePK, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedKeyregTxnFields.VotePK)
				if err != nil {
					err = msgp.WrapError(err, "VotePK")
					return
				}
			case "votekeybm":
				{
					var zb0275 []byte
					var zb0276 int
					zb0276, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVotePK")
						return
					}
					if zb0276 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0276), uint64(maxBitmaskSize))
						return
					}
					zb0275, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedKeyregTxnFields.BitmaskVotePK))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVotePK")
						return
					}
					(*z).encodedKeyregTxnFields.BitmaskVotePK = bitmask(zb0275)
				}
			case "selkey":
				var zb0277 int
				zb0277, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "SelectionPK")
					return
				}
				if zb0277 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0277), uint64(maxAddressBytes))
					return
				}
				(*z).encodedKeyregTxnFields.SelectionPK, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedKeyregTxnFields.SelectionPK)
				if err != nil {
					err = msgp.WrapError(err, "SelectionPK")
					return
				}
			case "selkeybm":
				{
					var zb0278 []byte
					var zb0279 int
					zb0279, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskSelectionPK")
						return
					}
					if zb0279 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0279), uint64(maxBitmaskSize))
						return
					}
					zb0278, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedKeyregTxnFields.BitmaskSelectionPK))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskSelectionPK")
						return
					}
					(*z).encodedKeyregTxnFields.BitmaskSelectionPK = bitmask(zb0278)
				}
			case "votefst":
				var zb0280 int
				var zb0281 bool
				zb0280, zb0281, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteFirst")
					return
				}
				if zb0280 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0280), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "VoteFirst")
					return
				}
				if zb0281 {
					(*z).encodedKeyregTxnFields.VoteFirst = nil
				} else if (*z).encodedKeyregTxnFields.VoteFirst != nil && cap((*z).encodedKeyregTxnFields.VoteFirst) >= zb0280 {
					(*z).encodedKeyregTxnFields.VoteFirst = ((*z).encodedKeyregTxnFields.VoteFirst)[:zb0280]
				} else {
					(*z).encodedKeyregTxnFields.VoteFirst = make([]basics.Round, zb0280)
				}
				for zb0005 := range (*z).encodedKeyregTxnFields.VoteFirst {
					bts, err = (*z).encodedKeyregTxnFields.VoteFirst[zb0005].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "VoteFirst", zb0005)
						return
					}
				}
			case "votefstbm":
				{
					var zb0282 []byte
					var zb0283 int
					zb0283, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteFirst")
						return
					}
					if zb0283 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0283), uint64(maxBitmaskSize))
						return
					}
					zb0282, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedKeyregTxnFields.BitmaskVoteFirst))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteFirst")
						return
					}
					(*z).encodedKeyregTxnFields.BitmaskVoteFirst = bitmask(zb0282)
				}
			case "votelst":
				var zb0284 int
				var zb0285 bool
				zb0284, zb0285, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteLast")
					return
				}
				if zb0284 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0284), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "VoteLast")
					return
				}
				if zb0285 {
					(*z).encodedKeyregTxnFields.VoteLast = nil
				} else if (*z).encodedKeyregTxnFields.VoteLast != nil && cap((*z).encodedKeyregTxnFields.VoteLast) >= zb0284 {
					(*z).encodedKeyregTxnFields.VoteLast = ((*z).encodedKeyregTxnFields.VoteLast)[:zb0284]
				} else {
					(*z).encodedKeyregTxnFields.VoteLast = make([]basics.Round, zb0284)
				}
				for zb0006 := range (*z).encodedKeyregTxnFields.VoteLast {
					bts, err = (*z).encodedKeyregTxnFields.VoteLast[zb0006].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "VoteLast", zb0006)
						return
					}
				}
			case "votelstbm":
				{
					var zb0286 []byte
					var zb0287 int
					zb0287, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteLast")
						return
					}
					if zb0287 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0287), uint64(maxBitmaskSize))
						return
					}
					zb0286, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedKeyregTxnFields.BitmaskVoteLast))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteLast")
						return
					}
					(*z).encodedKeyregTxnFields.BitmaskVoteLast = bitmask(zb0286)
				}
			case "votekd":
				var zb0288 int
				var zb0289 bool
				zb0288, zb0289, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteKeyDilution")
					return
				}
				if zb0288 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0288), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "VoteKeyDilution")
					return
				}
				if zb0289 {
					(*z).encodedKeyregTxnFields.VoteKeyDilution = nil
				} else if (*z).encodedKeyregTxnFields.VoteKeyDilution != nil && cap((*z).encodedKeyregTxnFields.VoteKeyDilution) >= zb0288 {
					(*z).encodedKeyregTxnFields.VoteKeyDilution = ((*z).encodedKeyregTxnFields.VoteKeyDilution)[:zb0288]
				} else {
					(*z).encodedKeyregTxnFields.VoteKeyDilution = make([]uint64, zb0288)
				}
				for zb0007 := range (*z).encodedKeyregTxnFields.VoteKeyDilution {
					(*z).encodedKeyregTxnFields.VoteKeyDilution[zb0007], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "VoteKeyDilution", zb0007)
						return
					}
				}
			case "votekdbm":
				{
					var zb0290 []byte
					var zb0291 int
					zb0291, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteKeyDilution")
						return
					}
					if zb0291 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0291), uint64(maxBitmaskSize))
						return
					}
					zb0290, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedKeyregTxnFields.BitmaskVoteKeyDilution))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteKeyDilution")
						return
					}
					(*z).encodedKeyregTxnFields.BitmaskVoteKeyDilution = bitmask(zb0290)
				}
			case "nonpartbm":
				{
					var zb0292 []byte
					var zb0293 int
					zb0293, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskNonparticipation")
						return
					}
					if zb0293 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0293), uint64(maxBitmaskSize))
						return
					}
					zb0292, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedKeyregTxnFields.BitmaskNonparticipation))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskNonparticipation")
						return
					}
					(*z).encodedKeyregTxnFields.BitmaskNonparticipation = bitmask(zb0292)
				}
			case "rcv":
				var zb0294 int
				zb0294, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Receiver")
					return
				}
				if zb0294 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0294), uint64(maxAddressBytes))
					return
				}
				(*z).encodedPaymentTxnFields.Receiver, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedPaymentTxnFields.Receiver)
				if err != nil {
					err = msgp.WrapError(err, "Receiver")
					return
				}
			case "rcvbm":
				{
					var zb0295 []byte
					var zb0296 int
					zb0296, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskReceiver")
						return
					}
					if zb0296 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0296), uint64(maxBitmaskSize))
						return
					}
					zb0295, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedPaymentTxnFields.BitmaskReceiver))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskReceiver")
						return
					}
					(*z).encodedPaymentTxnFields.BitmaskReceiver = bitmask(zb0295)
				}
			case "amt":
				var zb0297 int
				var zb0298 bool
				zb0297, zb0298, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Amount")
					return
				}
				if zb0297 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0297), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Amount")
					return
				}
				if zb0298 {
					(*z).encodedPaymentTxnFields.Amount = nil
				} else if (*z).encodedPaymentTxnFields.Amount != nil && cap((*z).encodedPaymentTxnFields.Amount) >= zb0297 {
					(*z).encodedPaymentTxnFields.Amount = ((*z).encodedPaymentTxnFields.Amount)[:zb0297]
				} else {
					(*z).encodedPaymentTxnFields.Amount = make([]basics.MicroAlgos, zb0297)
				}
				for zb0008 := range (*z).encodedPaymentTxnFields.Amount {
					bts, err = (*z).encodedPaymentTxnFields.Amount[zb0008].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Amount", zb0008)
						return
					}
				}
			case "amtbm":
				{
					var zb0299 []byte
					var zb0300 int
					zb0300, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAmount")
						return
					}
					if zb0300 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0300), uint64(maxBitmaskSize))
						return
					}
					zb0299, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedPaymentTxnFields.BitmaskAmount))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAmount")
						return
					}
					(*z).encodedPaymentTxnFields.BitmaskAmount = bitmask(zb0299)
				}
			case "close":
				var zb0301 int
				zb0301, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "CloseRemainderTo")
					return
				}
				if zb0301 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0301), uint64(maxAddressBytes))
					return
				}
				(*z).encodedPaymentTxnFields.CloseRemainderTo, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedPaymentTxnFields.CloseRemainderTo)
				if err != nil {
					err = msgp.WrapError(err, "CloseRemainderTo")
					return
				}
			case "closebm":
				{
					var zb0302 []byte
					var zb0303 int
					zb0303, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCloseRemainderTo")
						return
					}
					if zb0303 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0303), uint64(maxBitmaskSize))
						return
					}
					zb0302, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedPaymentTxnFields.BitmaskCloseRemainderTo))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCloseRemainderTo")
						return
					}
					(*z).encodedPaymentTxnFields.BitmaskCloseRemainderTo = bitmask(zb0302)
				}
			case "caid":
				var zb0304 int
				var zb0305 bool
				zb0304, zb0305, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ConfigAsset")
					return
				}
				if zb0304 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0304), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ConfigAsset")
					return
				}
				if zb0305 {
					(*z).encodedAssetConfigTxnFields.ConfigAsset = nil
				} else if (*z).encodedAssetConfigTxnFields.ConfigAsset != nil && cap((*z).encodedAssetConfigTxnFields.ConfigAsset) >= zb0304 {
					(*z).encodedAssetConfigTxnFields.ConfigAsset = ((*z).encodedAssetConfigTxnFields.ConfigAsset)[:zb0304]
				} else {
					(*z).encodedAssetConfigTxnFields.ConfigAsset = make([]basics.AssetIndex, zb0304)
				}
				for zb0009 := range (*z).encodedAssetConfigTxnFields.ConfigAsset {
					bts, err = (*z).encodedAssetConfigTxnFields.ConfigAsset[zb0009].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "ConfigAsset", zb0009)
						return
					}
				}
			case "caidbm":
				{
					var zb0306 []byte
					var zb0307 int
					zb0307, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskConfigAsset")
						return
					}
					if zb0307 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0307), uint64(maxBitmaskSize))
						return
					}
					zb0306, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.BitmaskConfigAsset))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskConfigAsset")
						return
					}
					(*z).encodedAssetConfigTxnFields.BitmaskConfigAsset = bitmask(zb0306)
				}
			case "t":
				var zb0308 int
				var zb0309 bool
				zb0308, zb0309, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Total")
					return
				}
				if zb0308 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0308), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Total")
					return
				}
				if zb0309 {
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.Total = nil
				} else if (*z).encodedAssetConfigTxnFields.encodedAssetParams.Total != nil && cap((*z).encodedAssetConfigTxnFields.encodedAssetParams.Total) >= zb0308 {
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.Total = ((*z).encodedAssetConfigTxnFields.encodedAssetParams.Total)[:zb0308]
				} else {
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.Total = make([]uint64, zb0308)
				}
				for zb0010 := range (*z).encodedAssetConfigTxnFields.encodedAssetParams.Total {
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.Total[zb0010], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Total", zb0010)
						return
					}
				}
			case "tbm":
				{
					var zb0310 []byte
					var zb0311 int
					zb0311, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskTotal")
						return
					}
					if zb0311 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0311), uint64(maxBitmaskSize))
						return
					}
					zb0310, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskTotal")
						return
					}
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal = bitmask(zb0310)
				}
			case "dc":
				var zb0312 int
				var zb0313 bool
				zb0312, zb0313, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Decimals")
					return
				}
				if zb0312 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0312), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Decimals")
					return
				}
				if zb0313 {
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals = nil
				} else if (*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals != nil && cap((*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals) >= zb0312 {
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals = ((*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals)[:zb0312]
				} else {
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals = make([]uint32, zb0312)
				}
				for zb0011 := range (*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals {
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals[zb0011], bts, err = msgp.ReadUint32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Decimals", zb0011)
						return
					}
				}
			case "dcbm":
				{
					var zb0314 []byte
					var zb0315 int
					zb0315, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskDecimals")
						return
					}
					if zb0315 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0315), uint64(maxBitmaskSize))
						return
					}
					zb0314, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskDecimals")
						return
					}
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals = bitmask(zb0314)
				}
			case "dfbm":
				{
					var zb0316 []byte
					var zb0317 int
					zb0317, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskDefaultFrozen")
						return
					}
					if zb0317 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0317), uint64(maxBitmaskSize))
						return
					}
					zb0316, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskDefaultFrozen")
						return
					}
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen = bitmask(zb0316)
				}
			case "un":
				var zb0318 int
				var zb0319 bool
				zb0318, zb0319, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "UnitName")
					return
				}
				if zb0318 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0318), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "UnitName")
					return
				}
				if zb0319 {
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName = nil
				} else if (*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName != nil && cap((*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName) >= zb0318 {
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName = ((*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName)[:zb0318]
				} else {
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName = make([]string, zb0318)
				}
				for zb0012 := range (*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName {
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName[zb0012], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "UnitName", zb0012)
						return
					}
				}
			case "unbm":
				{
					var zb0320 []byte
					var zb0321 int
					zb0321, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskUnitName")
						return
					}
					if zb0321 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0321), uint64(maxBitmaskSize))
						return
					}
					zb0320, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskUnitName")
						return
					}
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName = bitmask(zb0320)
				}
			case "an":
				var zb0322 int
				var zb0323 bool
				zb0322, zb0323, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetName")
					return
				}
				if zb0322 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0322), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "AssetName")
					return
				}
				if zb0323 {
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName = nil
				} else if (*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName != nil && cap((*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName) >= zb0322 {
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName = ((*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName)[:zb0322]
				} else {
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName = make([]string, zb0322)
				}
				for zb0013 := range (*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName {
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName[zb0013], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "AssetName", zb0013)
						return
					}
				}
			case "anbm":
				{
					var zb0324 []byte
					var zb0325 int
					zb0325, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetName")
						return
					}
					if zb0325 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0325), uint64(maxBitmaskSize))
						return
					}
					zb0324, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetName")
						return
					}
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName = bitmask(zb0324)
				}
			case "au":
				var zb0326 int
				var zb0327 bool
				zb0326, zb0327, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "URL")
					return
				}
				if zb0326 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0326), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "URL")
					return
				}
				if zb0327 {
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.URL = nil
				} else if (*z).encodedAssetConfigTxnFields.encodedAssetParams.URL != nil && cap((*z).encodedAssetConfigTxnFields.encodedAssetParams.URL) >= zb0326 {
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.URL = ((*z).encodedAssetConfigTxnFields.encodedAssetParams.URL)[:zb0326]
				} else {
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.URL = make([]string, zb0326)
				}
				for zb0014 := range (*z).encodedAssetConfigTxnFields.encodedAssetParams.URL {
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.URL[zb0014], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "URL", zb0014)
						return
					}
				}
			case "aubm":
				{
					var zb0328 []byte
					var zb0329 int
					zb0329, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskURL")
						return
					}
					if zb0329 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0329), uint64(maxBitmaskSize))
						return
					}
					zb0328, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskURL")
						return
					}
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL = bitmask(zb0328)
				}
			case "am":
				var zb0330 int
				zb0330, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "MetadataHash")
					return
				}
				if zb0330 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0330), uint64(maxAddressBytes))
					return
				}
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash)
				if err != nil {
					err = msgp.WrapError(err, "MetadataHash")
					return
				}
			case "ambm":
				{
					var zb0331 []byte
					var zb0332 int
					zb0332, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskMetadataHash")
						return
					}
					if zb0332 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0332), uint64(maxBitmaskSize))
						return
					}
					zb0331, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskMetadataHash")
						return
					}
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash = bitmask(zb0331)
				}
			case "m":
				var zb0333 int
				zb0333, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Manager")
					return
				}
				if zb0333 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0333), uint64(maxAddressBytes))
					return
				}
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.Manager, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetConfigTxnFields.encodedAssetParams.Manager)
				if err != nil {
					err = msgp.WrapError(err, "Manager")
					return
				}
			case "mbm":
				{
					var zb0334 []byte
					var zb0335 int
					zb0335, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskManager")
						return
					}
					if zb0335 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0335), uint64(maxBitmaskSize))
						return
					}
					zb0334, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskManager")
						return
					}
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager = bitmask(zb0334)
				}
			case "r":
				var zb0336 int
				zb0336, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Reserve")
					return
				}
				if zb0336 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0336), uint64(maxAddressBytes))
					return
				}
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.Reserve, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetConfigTxnFields.encodedAssetParams.Reserve)
				if err != nil {
					err = msgp.WrapError(err, "Reserve")
					return
				}
			case "rbm":
				{
					var zb0337 []byte
					var zb0338 int
					zb0338, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskReserve")
						return
					}
					if zb0338 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0338), uint64(maxBitmaskSize))
						return
					}
					zb0337, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskReserve")
						return
					}
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve = bitmask(zb0337)
				}
			case "f":
				var zb0339 int
				zb0339, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Freeze")
					return
				}
				if zb0339 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0339), uint64(maxAddressBytes))
					return
				}
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.Freeze, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetConfigTxnFields.encodedAssetParams.Freeze)
				if err != nil {
					err = msgp.WrapError(err, "Freeze")
					return
				}
			case "fbm":
				{
					var zb0340 []byte
					var zb0341 int
					zb0341, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreeze")
						return
					}
					if zb0341 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0341), uint64(maxBitmaskSize))
						return
					}
					zb0340, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreeze")
						return
					}
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze = bitmask(zb0340)
				}
			case "c":
				var zb0342 int
				zb0342, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Clawback")
					return
				}
				if zb0342 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0342), uint64(maxAddressBytes))
					return
				}
				(*z).encodedAssetConfigTxnFields.encodedAssetParams.Clawback, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetConfigTxnFields.encodedAssetParams.Clawback)
				if err != nil {
					err = msgp.WrapError(err, "Clawback")
					return
				}
			case "cbm":
				{
					var zb0343 []byte
					var zb0344 int
					zb0344, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskClawback")
						return
					}
					if zb0344 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0344), uint64(maxBitmaskSize))
						return
					}
					zb0343, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskClawback")
						return
					}
					(*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback = bitmask(zb0343)
				}
			case "xaid":
				var zb0345 int
				var zb0346 bool
				zb0345, zb0346, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XferAsset")
					return
				}
				if zb0345 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0345), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "XferAsset")
					return
				}
				if zb0346 {
					(*z).encodedAssetTransferTxnFields.XferAsset = nil
				} else if (*z).encodedAssetTransferTxnFields.XferAsset != nil && cap((*z).encodedAssetTransferTxnFields.XferAsset) >= zb0345 {
					(*z).encodedAssetTransferTxnFields.XferAsset = ((*z).encodedAssetTransferTxnFields.XferAsset)[:zb0345]
				} else {
					(*z).encodedAssetTransferTxnFields.XferAsset = make([]basics.AssetIndex, zb0345)
				}
				for zb0015 := range (*z).encodedAssetTransferTxnFields.XferAsset {
					bts, err = (*z).encodedAssetTransferTxnFields.XferAsset[zb0015].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "XferAsset", zb0015)
						return
					}
				}
			case "xaidbm":
				{
					var zb0347 []byte
					var zb0348 int
					zb0348, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskXferAsset")
						return
					}
					if zb0348 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0348), uint64(maxBitmaskSize))
						return
					}
					zb0347, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetTransferTxnFields.BitmaskXferAsset))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskXferAsset")
						return
					}
					(*z).encodedAssetTransferTxnFields.BitmaskXferAsset = bitmask(zb0347)
				}
			case "aamt":
				var zb0349 int
				var zb0350 bool
				zb0349, zb0350, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetAmount")
					return
				}
				if zb0349 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0349), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "AssetAmount")
					return
				}
				if zb0350 {
					(*z).encodedAssetTransferTxnFields.AssetAmount = nil
				} else if (*z).encodedAssetTransferTxnFields.AssetAmount != nil && cap((*z).encodedAssetTransferTxnFields.AssetAmount) >= zb0349 {
					(*z).encodedAssetTransferTxnFields.AssetAmount = ((*z).encodedAssetTransferTxnFields.AssetAmount)[:zb0349]
				} else {
					(*z).encodedAssetTransferTxnFields.AssetAmount = make([]uint64, zb0349)
				}
				for zb0016 := range (*z).encodedAssetTransferTxnFields.AssetAmount {
					(*z).encodedAssetTransferTxnFields.AssetAmount[zb0016], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "AssetAmount", zb0016)
						return
					}
				}
			case "aamtbm":
				{
					var zb0351 []byte
					var zb0352 int
					zb0352, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetAmount")
						return
					}
					if zb0352 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0352), uint64(maxBitmaskSize))
						return
					}
					zb0351, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetTransferTxnFields.BitmaskAssetAmount))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetAmount")
						return
					}
					(*z).encodedAssetTransferTxnFields.BitmaskAssetAmount = bitmask(zb0351)
				}
			case "asnd":
				var zb0353 int
				zb0353, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetSender")
					return
				}
				if zb0353 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0353), uint64(maxAddressBytes))
					return
				}
				(*z).encodedAssetTransferTxnFields.AssetSender, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetTransferTxnFields.AssetSender)
				if err != nil {
					err = msgp.WrapError(err, "AssetSender")
					return
				}
			case "asndbm":
				{
					var zb0354 []byte
					var zb0355 int
					zb0355, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetSender")
						return
					}
					if zb0355 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0355), uint64(maxBitmaskSize))
						return
					}
					zb0354, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetTransferTxnFields.BitmaskAssetSender))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetSender")
						return
					}
					(*z).encodedAssetTransferTxnFields.BitmaskAssetSender = bitmask(zb0354)
				}
			case "arcv":
				var zb0356 int
				zb0356, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetReceiver")
					return
				}
				if zb0356 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0356), uint64(maxAddressBytes))
					return
				}
				(*z).encodedAssetTransferTxnFields.AssetReceiver, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetTransferTxnFields.AssetReceiver)
				if err != nil {
					err = msgp.WrapError(err, "AssetReceiver")
					return
				}
			case "arcvbm":
				{
					var zb0357 []byte
					var zb0358 int
					zb0358, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetReceiver")
						return
					}
					if zb0358 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0358), uint64(maxBitmaskSize))
						return
					}
					zb0357, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetTransferTxnFields.BitmaskAssetReceiver))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetReceiver")
						return
					}
					(*z).encodedAssetTransferTxnFields.BitmaskAssetReceiver = bitmask(zb0357)
				}
			case "aclose":
				var zb0359 int
				zb0359, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetCloseTo")
					return
				}
				if zb0359 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0359), uint64(maxAddressBytes))
					return
				}
				(*z).encodedAssetTransferTxnFields.AssetCloseTo, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetTransferTxnFields.AssetCloseTo)
				if err != nil {
					err = msgp.WrapError(err, "AssetCloseTo")
					return
				}
			case "aclosebm":
				{
					var zb0360 []byte
					var zb0361 int
					zb0361, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetCloseTo")
						return
					}
					if zb0361 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0361), uint64(maxBitmaskSize))
						return
					}
					zb0360, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetTransferTxnFields.BitmaskAssetCloseTo))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetCloseTo")
						return
					}
					(*z).encodedAssetTransferTxnFields.BitmaskAssetCloseTo = bitmask(zb0360)
				}
			case "fadd":
				var zb0362 int
				zb0362, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "FreezeAccount")
					return
				}
				if zb0362 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0362), uint64(maxAddressBytes))
					return
				}
				(*z).encodedAssetFreezeTxnFields.FreezeAccount, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedAssetFreezeTxnFields.FreezeAccount)
				if err != nil {
					err = msgp.WrapError(err, "FreezeAccount")
					return
				}
			case "faddbm":
				{
					var zb0363 []byte
					var zb0364 int
					zb0364, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreezeAccount")
						return
					}
					if zb0364 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0364), uint64(maxBitmaskSize))
						return
					}
					zb0363, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetFreezeTxnFields.BitmaskFreezeAccount))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreezeAccount")
						return
					}
					(*z).encodedAssetFreezeTxnFields.BitmaskFreezeAccount = bitmask(zb0363)
				}
			case "faid":
				var zb0365 int
				var zb0366 bool
				zb0365, zb0366, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "FreezeAsset")
					return
				}
				if zb0365 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0365), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "FreezeAsset")
					return
				}
				if zb0366 {
					(*z).encodedAssetFreezeTxnFields.FreezeAsset = nil
				} else if (*z).encodedAssetFreezeTxnFields.FreezeAsset != nil && cap((*z).encodedAssetFreezeTxnFields.FreezeAsset) >= zb0365 {
					(*z).encodedAssetFreezeTxnFields.FreezeAsset = ((*z).encodedAssetFreezeTxnFields.FreezeAsset)[:zb0365]
				} else {
					(*z).encodedAssetFreezeTxnFields.FreezeAsset = make([]basics.AssetIndex, zb0365)
				}
				for zb0017 := range (*z).encodedAssetFreezeTxnFields.FreezeAsset {
					bts, err = (*z).encodedAssetFreezeTxnFields.FreezeAsset[zb0017].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "FreezeAsset", zb0017)
						return
					}
				}
			case "faidbm":
				{
					var zb0367 []byte
					var zb0368 int
					zb0368, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreezeAsset")
						return
					}
					if zb0368 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0368), uint64(maxBitmaskSize))
						return
					}
					zb0367, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetFreezeTxnFields.BitmaskFreezeAsset))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreezeAsset")
						return
					}
					(*z).encodedAssetFreezeTxnFields.BitmaskFreezeAsset = bitmask(zb0367)
				}
			case "afrzbm":
				{
					var zb0369 []byte
					var zb0370 int
					zb0370, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetFrozen")
						return
					}
					if zb0370 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0370), uint64(maxBitmaskSize))
						return
					}
					zb0369, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedAssetFreezeTxnFields.BitmaskAssetFrozen))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetFrozen")
						return
					}
					(*z).encodedAssetFreezeTxnFields.BitmaskAssetFrozen = bitmask(zb0369)
				}
			case "apid":
				var zb0371 int
				var zb0372 bool
				zb0371, zb0372, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApplicationID")
					return
				}
				if zb0371 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0371), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ApplicationID")
					return
				}
				if zb0372 {
					(*z).encodedApplicationCallTxnFields.ApplicationID = nil
				} else if (*z).encodedApplicationCallTxnFields.ApplicationID != nil && cap((*z).encodedApplicationCallTxnFields.ApplicationID) >= zb0371 {
					(*z).encodedApplicationCallTxnFields.ApplicationID = ((*z).encodedApplicationCallTxnFields.ApplicationID)[:zb0371]
				} else {
					(*z).encodedApplicationCallTxnFields.ApplicationID = make([]basics.AppIndex, zb0371)
				}
				for zb0018 := range (*z).encodedApplicationCallTxnFields.ApplicationID {
					bts, err = (*z).encodedApplicationCallTxnFields.ApplicationID[zb0018].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "ApplicationID", zb0018)
						return
					}
				}
			case "apidbm":
				{
					var zb0373 []byte
					var zb0374 int
					zb0374, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApplicationID")
						return
					}
					if zb0374 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0374), uint64(maxBitmaskSize))
						return
					}
					zb0373, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskApplicationID))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApplicationID")
						return
					}
					(*z).encodedApplicationCallTxnFields.BitmaskApplicationID = bitmask(zb0373)
				}
			case "apan":
				var zb0375 int
				zb0375, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "OnCompletion")
					return
				}
				if zb0375 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0375), uint64(maxEncodedTransactionGroup))
					return
				}
				(*z).encodedApplicationCallTxnFields.OnCompletion, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedApplicationCallTxnFields.OnCompletion)
				if err != nil {
					err = msgp.WrapError(err, "OnCompletion")
					return
				}
			case "apanbm":
				{
					var zb0376 []byte
					var zb0377 int
					zb0377, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskOnCompletion")
						return
					}
					if zb0377 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0377), uint64(maxBitmaskSize))
						return
					}
					zb0376, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskOnCompletion))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskOnCompletion")
						return
					}
					(*z).encodedApplicationCallTxnFields.BitmaskOnCompletion = bitmask(zb0376)
				}
			case "apaa":
				var zb0378 int
				var zb0379 bool
				zb0378, zb0379, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApplicationArgs")
					return
				}
				if zb0378 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0378), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ApplicationArgs")
					return
				}
				if zb0379 {
					(*z).encodedApplicationCallTxnFields.ApplicationArgs = nil
				} else if (*z).encodedApplicationCallTxnFields.ApplicationArgs != nil && cap((*z).encodedApplicationCallTxnFields.ApplicationArgs) >= zb0378 {
					(*z).encodedApplicationCallTxnFields.ApplicationArgs = ((*z).encodedApplicationCallTxnFields.ApplicationArgs)[:zb0378]
				} else {
					(*z).encodedApplicationCallTxnFields.ApplicationArgs = make([]applicationArgs, zb0378)
				}
				for zb0019 := range (*z).encodedApplicationCallTxnFields.ApplicationArgs {
					var zb0380 int
					var zb0381 bool
					zb0380, zb0381, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ApplicationArgs", zb0019)
						return
					}
					if zb0380 > transactions.EncodedMaxApplicationArgs {
						err = msgp.ErrOverflow(uint64(zb0380), uint64(transactions.EncodedMaxApplicationArgs))
						err = msgp.WrapError(err, "ApplicationArgs", zb0019)
						return
					}
					if zb0381 {
						(*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019] = nil
					} else if (*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019] != nil && cap((*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019]) >= zb0380 {
						(*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019] = ((*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019])[:zb0380]
					} else {
						(*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019] = make(applicationArgs, zb0380)
					}
					for zb0020 := range (*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019] {
						(*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019][zb0020], bts, err = msgp.ReadBytesBytes(bts, (*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019][zb0020])
						if err != nil {
							err = msgp.WrapError(err, "ApplicationArgs", zb0019, zb0020)
							return
						}
					}
				}
			case "apaabm":
				{
					var zb0382 []byte
					var zb0383 int
					zb0383, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApplicationArgs")
						return
					}
					if zb0383 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0383), uint64(maxBitmaskSize))
						return
					}
					zb0382, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskApplicationArgs))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApplicationArgs")
						return
					}
					(*z).encodedApplicationCallTxnFields.BitmaskApplicationArgs = bitmask(zb0382)
				}
			case "apat":
				var zb0384 int
				var zb0385 bool
				zb0384, zb0385, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Accounts")
					return
				}
				if zb0384 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0384), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Accounts")
					return
				}
				if zb0385 {
					(*z).encodedApplicationCallTxnFields.Accounts = nil
				} else if (*z).encodedApplicationCallTxnFields.Accounts != nil && cap((*z).encodedApplicationCallTxnFields.Accounts) >= zb0384 {
					(*z).encodedApplicationCallTxnFields.Accounts = ((*z).encodedApplicationCallTxnFields.Accounts)[:zb0384]
				} else {
					(*z).encodedApplicationCallTxnFields.Accounts = make([]addresses, zb0384)
				}
				for zb0021 := range (*z).encodedApplicationCallTxnFields.Accounts {
					var zb0386 int
					var zb0387 bool
					zb0386, zb0387, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Accounts", zb0021)
						return
					}
					if zb0386 > transactions.EncodedMaxAccounts {
						err = msgp.ErrOverflow(uint64(zb0386), uint64(transactions.EncodedMaxAccounts))
						err = msgp.WrapError(err, "Accounts", zb0021)
						return
					}
					if zb0387 {
						(*z).encodedApplicationCallTxnFields.Accounts[zb0021] = nil
					} else if (*z).encodedApplicationCallTxnFields.Accounts[zb0021] != nil && cap((*z).encodedApplicationCallTxnFields.Accounts[zb0021]) >= zb0386 {
						(*z).encodedApplicationCallTxnFields.Accounts[zb0021] = ((*z).encodedApplicationCallTxnFields.Accounts[zb0021])[:zb0386]
					} else {
						(*z).encodedApplicationCallTxnFields.Accounts[zb0021] = make(addresses, zb0386)
					}
					for zb0022 := range (*z).encodedApplicationCallTxnFields.Accounts[zb0021] {
						bts, err = (*z).encodedApplicationCallTxnFields.Accounts[zb0021][zb0022].UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "Accounts", zb0021, zb0022)
							return
						}
					}
				}
			case "apatbm":
				{
					var zb0388 []byte
					var zb0389 int
					zb0389, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAccounts")
						return
					}
					if zb0389 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0389), uint64(maxBitmaskSize))
						return
					}
					zb0388, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskAccounts))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAccounts")
						return
					}
					(*z).encodedApplicationCallTxnFields.BitmaskAccounts = bitmask(zb0388)
				}
			case "apfa":
				var zb0390 int
				var zb0391 bool
				zb0390, zb0391, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ForeignApps")
					return
				}
				if zb0390 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0390), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ForeignApps")
					return
				}
				if zb0391 {
					(*z).encodedApplicationCallTxnFields.ForeignApps = nil
				} else if (*z).encodedApplicationCallTxnFields.ForeignApps != nil && cap((*z).encodedApplicationCallTxnFields.ForeignApps) >= zb0390 {
					(*z).encodedApplicationCallTxnFields.ForeignApps = ((*z).encodedApplicationCallTxnFields.ForeignApps)[:zb0390]
				} else {
					(*z).encodedApplicationCallTxnFields.ForeignApps = make([]appIndices, zb0390)
				}
				for zb0023 := range (*z).encodedApplicationCallTxnFields.ForeignApps {
					var zb0392 int
					var zb0393 bool
					zb0392, zb0393, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ForeignApps", zb0023)
						return
					}
					if zb0392 > transactions.EncodedMaxForeignApps {
						err = msgp.ErrOverflow(uint64(zb0392), uint64(transactions.EncodedMaxForeignApps))
						err = msgp.WrapError(err, "ForeignApps", zb0023)
						return
					}
					if zb0393 {
						(*z).encodedApplicationCallTxnFields.ForeignApps[zb0023] = nil
					} else if (*z).encodedApplicationCallTxnFields.ForeignApps[zb0023] != nil && cap((*z).encodedApplicationCallTxnFields.ForeignApps[zb0023]) >= zb0392 {
						(*z).encodedApplicationCallTxnFields.ForeignApps[zb0023] = ((*z).encodedApplicationCallTxnFields.ForeignApps[zb0023])[:zb0392]
					} else {
						(*z).encodedApplicationCallTxnFields.ForeignApps[zb0023] = make(appIndices, zb0392)
					}
					for zb0024 := range (*z).encodedApplicationCallTxnFields.ForeignApps[zb0023] {
						bts, err = (*z).encodedApplicationCallTxnFields.ForeignApps[zb0023][zb0024].UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "ForeignApps", zb0023, zb0024)
							return
						}
					}
				}
			case "apfabm":
				{
					var zb0394 []byte
					var zb0395 int
					zb0395, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskForeignApps")
						return
					}
					if zb0395 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0395), uint64(maxBitmaskSize))
						return
					}
					zb0394, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskForeignApps))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskForeignApps")
						return
					}
					(*z).encodedApplicationCallTxnFields.BitmaskForeignApps = bitmask(zb0394)
				}
			case "apas":
				var zb0396 int
				var zb0397 bool
				zb0396, zb0397, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ForeignAssets")
					return
				}
				if zb0396 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0396), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ForeignAssets")
					return
				}
				if zb0397 {
					(*z).encodedApplicationCallTxnFields.ForeignAssets = nil
				} else if (*z).encodedApplicationCallTxnFields.ForeignAssets != nil && cap((*z).encodedApplicationCallTxnFields.ForeignAssets) >= zb0396 {
					(*z).encodedApplicationCallTxnFields.ForeignAssets = ((*z).encodedApplicationCallTxnFields.ForeignAssets)[:zb0396]
				} else {
					(*z).encodedApplicationCallTxnFields.ForeignAssets = make([]assetIndices, zb0396)
				}
				for zb0025 := range (*z).encodedApplicationCallTxnFields.ForeignAssets {
					var zb0398 int
					var zb0399 bool
					zb0398, zb0399, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ForeignAssets", zb0025)
						return
					}
					if zb0398 > transactions.EncodedMaxForeignAssets {
						err = msgp.ErrOverflow(uint64(zb0398), uint64(transactions.EncodedMaxForeignAssets))
						err = msgp.WrapError(err, "ForeignAssets", zb0025)
						return
					}
					if zb0399 {
						(*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025] = nil
					} else if (*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025] != nil && cap((*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025]) >= zb0398 {
						(*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025] = ((*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025])[:zb0398]
					} else {
						(*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025] = make(assetIndices, zb0398)
					}
					for zb0026 := range (*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025] {
						bts, err = (*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025][zb0026].UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "ForeignAssets", zb0025, zb0026)
							return
						}
					}
				}
			case "apasbm":
				{
					var zb0400 []byte
					var zb0401 int
					zb0401, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskForeignAssets")
						return
					}
					if zb0401 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0401), uint64(maxBitmaskSize))
						return
					}
					zb0400, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskForeignAssets))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskForeignAssets")
						return
					}
					(*z).encodedApplicationCallTxnFields.BitmaskForeignAssets = bitmask(zb0400)
				}
			case "lnui":
				var zb0402 int
				var zb0403 bool
				zb0402, zb0403, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LocalNumUint")
					return
				}
				if zb0402 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0402), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "LocalNumUint")
					return
				}
				if zb0403 {
					(*z).encodedApplicationCallTxnFields.LocalNumUint = nil
				} else if (*z).encodedApplicationCallTxnFields.LocalNumUint != nil && cap((*z).encodedApplicationCallTxnFields.LocalNumUint) >= zb0402 {
					(*z).encodedApplicationCallTxnFields.LocalNumUint = ((*z).encodedApplicationCallTxnFields.LocalNumUint)[:zb0402]
				} else {
					(*z).encodedApplicationCallTxnFields.LocalNumUint = make([]uint64, zb0402)
				}
				for zb0027 := range (*z).encodedApplicationCallTxnFields.LocalNumUint {
					(*z).encodedApplicationCallTxnFields.LocalNumUint[zb0027], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "LocalNumUint", zb0027)
						return
					}
				}
			case "lnuibm":
				{
					var zb0404 []byte
					var zb0405 int
					zb0405, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLocalNumUint")
						return
					}
					if zb0405 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0405), uint64(maxBitmaskSize))
						return
					}
					zb0404, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskLocalNumUint))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLocalNumUint")
						return
					}
					(*z).encodedApplicationCallTxnFields.BitmaskLocalNumUint = bitmask(zb0404)
				}
			case "lnbs":
				var zb0406 int
				var zb0407 bool
				zb0406, zb0407, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LocalNumByteSlice")
					return
				}
				if zb0406 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0406), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "LocalNumByteSlice")
					return
				}
				if zb0407 {
					(*z).encodedApplicationCallTxnFields.LocalNumByteSlice = nil
				} else if (*z).encodedApplicationCallTxnFields.LocalNumByteSlice != nil && cap((*z).encodedApplicationCallTxnFields.LocalNumByteSlice) >= zb0406 {
					(*z).encodedApplicationCallTxnFields.LocalNumByteSlice = ((*z).encodedApplicationCallTxnFields.LocalNumByteSlice)[:zb0406]
				} else {
					(*z).encodedApplicationCallTxnFields.LocalNumByteSlice = make([]uint64, zb0406)
				}
				for zb0028 := range (*z).encodedApplicationCallTxnFields.LocalNumByteSlice {
					(*z).encodedApplicationCallTxnFields.LocalNumByteSlice[zb0028], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "LocalNumByteSlice", zb0028)
						return
					}
				}
			case "lnbsbm":
				{
					var zb0408 []byte
					var zb0409 int
					zb0409, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLocalNumByteSlice")
						return
					}
					if zb0409 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0409), uint64(maxBitmaskSize))
						return
					}
					zb0408, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLocalNumByteSlice")
						return
					}
					(*z).encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice = bitmask(zb0408)
				}
			case "gnui":
				var zb0410 int
				var zb0411 bool
				zb0410, zb0411, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "GlobalNumUint")
					return
				}
				if zb0410 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0410), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "GlobalNumUint")
					return
				}
				if zb0411 {
					(*z).encodedApplicationCallTxnFields.GlobalNumUint = nil
				} else if (*z).encodedApplicationCallTxnFields.GlobalNumUint != nil && cap((*z).encodedApplicationCallTxnFields.GlobalNumUint) >= zb0410 {
					(*z).encodedApplicationCallTxnFields.GlobalNumUint = ((*z).encodedApplicationCallTxnFields.GlobalNumUint)[:zb0410]
				} else {
					(*z).encodedApplicationCallTxnFields.GlobalNumUint = make([]uint64, zb0410)
				}
				for zb0029 := range (*z).encodedApplicationCallTxnFields.GlobalNumUint {
					(*z).encodedApplicationCallTxnFields.GlobalNumUint[zb0029], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "GlobalNumUint", zb0029)
						return
					}
				}
			case "gnuibm":
				{
					var zb0412 []byte
					var zb0413 int
					zb0413, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGlobalNumUint")
						return
					}
					if zb0413 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0413), uint64(maxBitmaskSize))
						return
					}
					zb0412, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskGlobalNumUint))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGlobalNumUint")
						return
					}
					(*z).encodedApplicationCallTxnFields.BitmaskGlobalNumUint = bitmask(zb0412)
				}
			case "gnbs":
				var zb0414 int
				var zb0415 bool
				zb0414, zb0415, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "GlobalNumByteSlice")
					return
				}
				if zb0414 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0414), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "GlobalNumByteSlice")
					return
				}
				if zb0415 {
					(*z).encodedApplicationCallTxnFields.GlobalNumByteSlice = nil
				} else if (*z).encodedApplicationCallTxnFields.GlobalNumByteSlice != nil && cap((*z).encodedApplicationCallTxnFields.GlobalNumByteSlice) >= zb0414 {
					(*z).encodedApplicationCallTxnFields.GlobalNumByteSlice = ((*z).encodedApplicationCallTxnFields.GlobalNumByteSlice)[:zb0414]
				} else {
					(*z).encodedApplicationCallTxnFields.GlobalNumByteSlice = make([]uint64, zb0414)
				}
				for zb0030 := range (*z).encodedApplicationCallTxnFields.GlobalNumByteSlice {
					(*z).encodedApplicationCallTxnFields.GlobalNumByteSlice[zb0030], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "GlobalNumByteSlice", zb0030)
						return
					}
				}
			case "gnbsbm":
				{
					var zb0416 []byte
					var zb0417 int
					zb0417, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGlobalNumByteSlice")
						return
					}
					if zb0417 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0417), uint64(maxBitmaskSize))
						return
					}
					zb0416, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGlobalNumByteSlice")
						return
					}
					(*z).encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice = bitmask(zb0416)
				}
			case "apap":
				var zb0418 int
				var zb0419 bool
				zb0418, zb0419, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApprovalProgram")
					return
				}
				if zb0418 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0418), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ApprovalProgram")
					return
				}
				if zb0419 {
					(*z).encodedApplicationCallTxnFields.ApprovalProgram = nil
				} else if (*z).encodedApplicationCallTxnFields.ApprovalProgram != nil && cap((*z).encodedApplicationCallTxnFields.ApprovalProgram) >= zb0418 {
					(*z).encodedApplicationCallTxnFields.ApprovalProgram = ((*z).encodedApplicationCallTxnFields.ApprovalProgram)[:zb0418]
				} else {
					(*z).encodedApplicationCallTxnFields.ApprovalProgram = make([]program, zb0418)
				}
				for zb0031 := range (*z).encodedApplicationCallTxnFields.ApprovalProgram {
					{
						var zb0420 []byte
						var zb0421 int
						zb0421, err = msgp.ReadBytesBytesHeader(bts)
						if err != nil {
							err = msgp.WrapError(err, "ApprovalProgram", zb0031)
							return
						}
						if zb0421 > config.MaxAppProgramLen {
							err = msgp.ErrOverflow(uint64(zb0421), uint64(config.MaxAppProgramLen))
							return
						}
						zb0420, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.ApprovalProgram[zb0031]))
						if err != nil {
							err = msgp.WrapError(err, "ApprovalProgram", zb0031)
							return
						}
						(*z).encodedApplicationCallTxnFields.ApprovalProgram[zb0031] = program(zb0420)
					}
				}
			case "apapbm":
				{
					var zb0422 []byte
					var zb0423 int
					zb0423, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApprovalProgram")
						return
					}
					if zb0423 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0423), uint64(maxBitmaskSize))
						return
					}
					zb0422, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskApprovalProgram))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApprovalProgram")
						return
					}
					(*z).encodedApplicationCallTxnFields.BitmaskApprovalProgram = bitmask(zb0422)
				}
			case "apsu":
				var zb0424 int
				var zb0425 bool
				zb0424, zb0425, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ClearStateProgram")
					return
				}
				if zb0424 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0424), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ClearStateProgram")
					return
				}
				if zb0425 {
					(*z).encodedApplicationCallTxnFields.ClearStateProgram = nil
				} else if (*z).encodedApplicationCallTxnFields.ClearStateProgram != nil && cap((*z).encodedApplicationCallTxnFields.ClearStateProgram) >= zb0424 {
					(*z).encodedApplicationCallTxnFields.ClearStateProgram = ((*z).encodedApplicationCallTxnFields.ClearStateProgram)[:zb0424]
				} else {
					(*z).encodedApplicationCallTxnFields.ClearStateProgram = make([]program, zb0424)
				}
				for zb0032 := range (*z).encodedApplicationCallTxnFields.ClearStateProgram {
					{
						var zb0426 []byte
						var zb0427 int
						zb0427, err = msgp.ReadBytesBytesHeader(bts)
						if err != nil {
							err = msgp.WrapError(err, "ClearStateProgram", zb0032)
							return
						}
						if zb0427 > config.MaxAppProgramLen {
							err = msgp.ErrOverflow(uint64(zb0427), uint64(config.MaxAppProgramLen))
							return
						}
						zb0426, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.ClearStateProgram[zb0032]))
						if err != nil {
							err = msgp.WrapError(err, "ClearStateProgram", zb0032)
							return
						}
						(*z).encodedApplicationCallTxnFields.ClearStateProgram[zb0032] = program(zb0426)
					}
				}
			case "apsubm":
				{
					var zb0428 []byte
					var zb0429 int
					zb0429, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskClearStateProgram")
						return
					}
					if zb0429 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0429), uint64(maxBitmaskSize))
						return
					}
					zb0428, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedApplicationCallTxnFields.BitmaskClearStateProgram))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskClearStateProgram")
						return
					}
					(*z).encodedApplicationCallTxnFields.BitmaskClearStateProgram = bitmask(zb0428)
				}
			case "certrnd":
				var zb0430 int
				var zb0431 bool
				zb0430, zb0431, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "CertRound")
					return
				}
				if zb0430 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0430), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "CertRound")
					return
				}
				if zb0431 {
					(*z).encodedCompactCertTxnFields.CertRound = nil
				} else if (*z).encodedCompactCertTxnFields.CertRound != nil && cap((*z).encodedCompactCertTxnFields.CertRound) >= zb0430 {
					(*z).encodedCompactCertTxnFields.CertRound = ((*z).encodedCompactCertTxnFields.CertRound)[:zb0430]
				} else {
					(*z).encodedCompactCertTxnFields.CertRound = make([]basics.Round, zb0430)
				}
				for zb0033 := range (*z).encodedCompactCertTxnFields.CertRound {
					bts, err = (*z).encodedCompactCertTxnFields.CertRound[zb0033].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "CertRound", zb0033)
						return
					}
				}
			case "certrndbm":
				{
					var zb0432 []byte
					var zb0433 int
					zb0433, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCertRound")
						return
					}
					if zb0433 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0433), uint64(maxBitmaskSize))
						return
					}
					zb0432, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedCompactCertTxnFields.BitmaskCertRound))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCertRound")
						return
					}
					(*z).encodedCompactCertTxnFields.BitmaskCertRound = bitmask(zb0432)
				}
			case "certtype":
				var zb0434 int
				var zb0435 bool
				zb0434, zb0435, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "CertType")
					return
				}
				if zb0434 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0434), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "CertType")
					return
				}
				if zb0435 {
					(*z).encodedCompactCertTxnFields.CertType = nil
				} else if (*z).encodedCompactCertTxnFields.CertType != nil && cap((*z).encodedCompactCertTxnFields.CertType) >= zb0434 {
					(*z).encodedCompactCertTxnFields.CertType = ((*z).encodedCompactCertTxnFields.CertType)[:zb0434]
				} else {
					(*z).encodedCompactCertTxnFields.CertType = make([]protocol.CompactCertType, zb0434)
				}
				for zb0034 := range (*z).encodedCompactCertTxnFields.CertType {
					bts, err = (*z).encodedCompactCertTxnFields.CertType[zb0034].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "CertType", zb0034)
						return
					}
				}
			case "certtypebm":
				{
					var zb0436 []byte
					var zb0437 int
					zb0437, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCertType")
						return
					}
					if zb0437 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0437), uint64(maxBitmaskSize))
						return
					}
					zb0436, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedCompactCertTxnFields.BitmaskCertType))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCertType")
						return
					}
					(*z).encodedCompactCertTxnFields.BitmaskCertType = bitmask(zb0436)
				}
			case "cert":
				var zb0438 int
				var zb0439 bool
				zb0438, zb0439, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cert")
					return
				}
				if zb0438 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0438), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Cert")
					return
				}
				if zb0439 {
					(*z).encodedCompactCertTxnFields.Cert = nil
				} else if (*z).encodedCompactCertTxnFields.Cert != nil && cap((*z).encodedCompactCertTxnFields.Cert) >= zb0438 {
					(*z).encodedCompactCertTxnFields.Cert = ((*z).encodedCompactCertTxnFields.Cert)[:zb0438]
				} else {
					(*z).encodedCompactCertTxnFields.Cert = make([]compactcert.Cert, zb0438)
				}
				for zb0035 := range (*z).encodedCompactCertTxnFields.Cert {
					bts, err = (*z).encodedCompactCertTxnFields.Cert[zb0035].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Cert", zb0035)
						return
					}
				}
			case "certbm":
				{
					var zb0440 []byte
					var zb0441 int
					zb0441, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCert")
						return
					}
					if zb0441 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0441), uint64(maxBitmaskSize))
						return
					}
					zb0440, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedCompactCertTxnFields.BitmaskCert))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCert")
						return
					}
					(*z).encodedCompactCertTxnFields.BitmaskCert = bitmask(zb0440)
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *encodedTxns) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*encodedTxns)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *encodedTxns) Msgsize() (s int) {
	s = 3 + 5 + msgp.BytesPrefixSize + len((*z).TxType) + 7 + msgp.BytesPrefixSize + len([]byte((*z).BitmaskTxType)) + 4 + msgp.BytesPrefixSize + len((*z).encodedTxnHeaders.Sender) + 6 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxnHeaders.BitmaskSender)) + 4 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).encodedTxnHeaders.Fee {
		s += (*z).encodedTxnHeaders.Fee[zb0001].Msgsize()
	}
	s += 6 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxnHeaders.BitmaskFee)) + 3 + msgp.ArrayHeaderSize
	for zb0002 := range (*z).encodedTxnHeaders.FirstValid {
		s += (*z).encodedTxnHeaders.FirstValid[zb0002].Msgsize()
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxnHeaders.BitmaskFirstValid)) + 3 + msgp.ArrayHeaderSize
	for zb0003 := range (*z).encodedTxnHeaders.LastValid {
		s += (*z).encodedTxnHeaders.LastValid[zb0003].Msgsize()
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxnHeaders.BitmaskLastValid)) + 5 + msgp.ArrayHeaderSize
	for zb0004 := range (*z).encodedTxnHeaders.Note {
		s += msgp.BytesPrefixSize + len((*z).encodedTxnHeaders.Note[zb0004])
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxnHeaders.BitmaskNote)) + 4 + msgp.StringPrefixSize + len((*z).encodedTxnHeaders.GenesisID) + 6 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxnHeaders.BitmaskGenesisID)) + 3 + (*z).encodedTxnHeaders.GenesisHash.Msgsize() + 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxnHeaders.BitmaskGenesisHash)) + 6 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxnHeaders.BitmaskGroup)) + 3 + msgp.BytesPrefixSize + len((*z).encodedTxnHeaders.Lease) + 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxnHeaders.BitmaskLease)) + 6 + msgp.BytesPrefixSize + len((*z).encodedTxnHeaders.RekeyTo) + 8 + msgp.BytesPrefixSize + len([]byte((*z).encodedTxnHeaders.BitmaskRekeyTo)) + 8 + msgp.BytesPrefixSize + len((*z).encodedKeyregTxnFields.VotePK) + 10 + msgp.BytesPrefixSize + len([]byte((*z).encodedKeyregTxnFields.BitmaskVotePK)) + 7 + msgp.BytesPrefixSize + len((*z).encodedKeyregTxnFields.SelectionPK) + 9 + msgp.BytesPrefixSize + len([]byte((*z).encodedKeyregTxnFields.BitmaskSelectionPK)) + 8 + msgp.ArrayHeaderSize
	for zb0005 := range (*z).encodedKeyregTxnFields.VoteFirst {
		s += (*z).encodedKeyregTxnFields.VoteFirst[zb0005].Msgsize()
	}
	s += 10 + msgp.BytesPrefixSize + len([]byte((*z).encodedKeyregTxnFields.BitmaskVoteFirst)) + 8 + msgp.ArrayHeaderSize
	for zb0006 := range (*z).encodedKeyregTxnFields.VoteLast {
		s += (*z).encodedKeyregTxnFields.VoteLast[zb0006].Msgsize()
	}
	s += 10 + msgp.BytesPrefixSize + len([]byte((*z).encodedKeyregTxnFields.BitmaskVoteLast)) + 7 + msgp.ArrayHeaderSize + (len((*z).encodedKeyregTxnFields.VoteKeyDilution) * (msgp.Uint64Size)) + 9 + msgp.BytesPrefixSize + len([]byte((*z).encodedKeyregTxnFields.BitmaskVoteKeyDilution)) + 10 + msgp.BytesPrefixSize + len([]byte((*z).encodedKeyregTxnFields.BitmaskNonparticipation)) + 4 + msgp.BytesPrefixSize + len((*z).encodedPaymentTxnFields.Receiver) + 6 + msgp.BytesPrefixSize + len([]byte((*z).encodedPaymentTxnFields.BitmaskReceiver)) + 4 + msgp.ArrayHeaderSize
	for zb0008 := range (*z).encodedPaymentTxnFields.Amount {
		s += (*z).encodedPaymentTxnFields.Amount[zb0008].Msgsize()
	}
	s += 6 + msgp.BytesPrefixSize + len([]byte((*z).encodedPaymentTxnFields.BitmaskAmount)) + 6 + msgp.BytesPrefixSize + len((*z).encodedPaymentTxnFields.CloseRemainderTo) + 8 + msgp.BytesPrefixSize + len([]byte((*z).encodedPaymentTxnFields.BitmaskCloseRemainderTo)) + 5 + msgp.ArrayHeaderSize
	for zb0009 := range (*z).encodedAssetConfigTxnFields.ConfigAsset {
		s += (*z).encodedAssetConfigTxnFields.ConfigAsset[zb0009].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetConfigTxnFields.BitmaskConfigAsset)) + 2 + msgp.ArrayHeaderSize + (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.Total) * (msgp.Uint64Size)) + 4 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal)) + 3 + msgp.ArrayHeaderSize + (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals) * (msgp.Uint32Size)) + 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals)) + 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen)) + 3 + msgp.ArrayHeaderSize
	for zb0012 := range (*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName {
		s += msgp.StringPrefixSize + len((*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName[zb0012])
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName)) + 3 + msgp.ArrayHeaderSize
	for zb0013 := range (*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName {
		s += msgp.StringPrefixSize + len((*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName[zb0013])
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName)) + 3 + msgp.ArrayHeaderSize
	for zb0014 := range (*z).encodedAssetConfigTxnFields.encodedAssetParams.URL {
		s += msgp.StringPrefixSize + len((*z).encodedAssetConfigTxnFields.encodedAssetParams.URL[zb0014])
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL)) + 3 + msgp.BytesPrefixSize + len((*z).encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash) + 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash)) + 2 + msgp.BytesPrefixSize + len((*z).encodedAssetConfigTxnFields.encodedAssetParams.Manager) + 4 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager)) + 2 + msgp.BytesPrefixSize + len((*z).encodedAssetConfigTxnFields.encodedAssetParams.Reserve) + 4 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve)) + 2 + msgp.BytesPrefixSize + len((*z).encodedAssetConfigTxnFields.encodedAssetParams.Freeze) + 4 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze)) + 2 + msgp.BytesPrefixSize + len((*z).encodedAssetConfigTxnFields.encodedAssetParams.Clawback) + 4 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback)) + 5 + msgp.ArrayHeaderSize
	for zb0015 := range (*z).encodedAssetTransferTxnFields.XferAsset {
		s += (*z).encodedAssetTransferTxnFields.XferAsset[zb0015].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetTransferTxnFields.BitmaskXferAsset)) + 5 + msgp.ArrayHeaderSize + (len((*z).encodedAssetTransferTxnFields.AssetAmount) * (msgp.Uint64Size)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetTransferTxnFields.BitmaskAssetAmount)) + 5 + msgp.BytesPrefixSize + len((*z).encodedAssetTransferTxnFields.AssetSender) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetTransferTxnFields.BitmaskAssetSender)) + 5 + msgp.BytesPrefixSize + len((*z).encodedAssetTransferTxnFields.AssetReceiver) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetTransferTxnFields.BitmaskAssetReceiver)) + 7 + msgp.BytesPrefixSize + len((*z).encodedAssetTransferTxnFields.AssetCloseTo) + 9 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetTransferTxnFields.BitmaskAssetCloseTo)) + 5 + msgp.BytesPrefixSize + len((*z).encodedAssetFreezeTxnFields.FreezeAccount) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetFreezeTxnFields.BitmaskFreezeAccount)) + 5 + msgp.ArrayHeaderSize
	for zb0017 := range (*z).encodedAssetFreezeTxnFields.FreezeAsset {
		s += (*z).encodedAssetFreezeTxnFields.FreezeAsset[zb0017].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetFreezeTxnFields.BitmaskFreezeAsset)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedAssetFreezeTxnFields.BitmaskAssetFrozen)) + 5 + msgp.ArrayHeaderSize
	for zb0018 := range (*z).encodedApplicationCallTxnFields.ApplicationID {
		s += (*z).encodedApplicationCallTxnFields.ApplicationID[zb0018].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedApplicationCallTxnFields.BitmaskApplicationID)) + 5 + msgp.BytesPrefixSize + len((*z).encodedApplicationCallTxnFields.OnCompletion) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedApplicationCallTxnFields.BitmaskOnCompletion)) + 5 + msgp.ArrayHeaderSize
	for zb0019 := range (*z).encodedApplicationCallTxnFields.ApplicationArgs {
		s += msgp.ArrayHeaderSize
		for zb0020 := range (*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019] {
			s += msgp.BytesPrefixSize + len((*z).encodedApplicationCallTxnFields.ApplicationArgs[zb0019][zb0020])
		}
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedApplicationCallTxnFields.BitmaskApplicationArgs)) + 5 + msgp.ArrayHeaderSize
	for zb0021 := range (*z).encodedApplicationCallTxnFields.Accounts {
		s += msgp.ArrayHeaderSize
		for zb0022 := range (*z).encodedApplicationCallTxnFields.Accounts[zb0021] {
			s += (*z).encodedApplicationCallTxnFields.Accounts[zb0021][zb0022].Msgsize()
		}
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedApplicationCallTxnFields.BitmaskAccounts)) + 5 + msgp.ArrayHeaderSize
	for zb0023 := range (*z).encodedApplicationCallTxnFields.ForeignApps {
		s += msgp.ArrayHeaderSize
		for zb0024 := range (*z).encodedApplicationCallTxnFields.ForeignApps[zb0023] {
			s += (*z).encodedApplicationCallTxnFields.ForeignApps[zb0023][zb0024].Msgsize()
		}
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedApplicationCallTxnFields.BitmaskForeignApps)) + 5 + msgp.ArrayHeaderSize
	for zb0025 := range (*z).encodedApplicationCallTxnFields.ForeignAssets {
		s += msgp.ArrayHeaderSize
		for zb0026 := range (*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025] {
			s += (*z).encodedApplicationCallTxnFields.ForeignAssets[zb0025][zb0026].Msgsize()
		}
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedApplicationCallTxnFields.BitmaskForeignAssets)) + 5 + msgp.ArrayHeaderSize + (len((*z).encodedApplicationCallTxnFields.LocalNumUint) * (msgp.Uint64Size)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedApplicationCallTxnFields.BitmaskLocalNumUint)) + 5 + msgp.ArrayHeaderSize + (len((*z).encodedApplicationCallTxnFields.LocalNumByteSlice) * (msgp.Uint64Size)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice)) + 5 + msgp.ArrayHeaderSize + (len((*z).encodedApplicationCallTxnFields.GlobalNumUint) * (msgp.Uint64Size)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedApplicationCallTxnFields.BitmaskGlobalNumUint)) + 5 + msgp.ArrayHeaderSize + (len((*z).encodedApplicationCallTxnFields.GlobalNumByteSlice) * (msgp.Uint64Size)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice)) + 5 + msgp.ArrayHeaderSize
	for zb0031 := range (*z).encodedApplicationCallTxnFields.ApprovalProgram {
		s += msgp.BytesPrefixSize + len([]byte((*z).encodedApplicationCallTxnFields.ApprovalProgram[zb0031]))
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedApplicationCallTxnFields.BitmaskApprovalProgram)) + 5 + msgp.ArrayHeaderSize
	for zb0032 := range (*z).encodedApplicationCallTxnFields.ClearStateProgram {
		s += msgp.BytesPrefixSize + len([]byte((*z).encodedApplicationCallTxnFields.ClearStateProgram[zb0032]))
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedApplicationCallTxnFields.BitmaskClearStateProgram)) + 8 + msgp.ArrayHeaderSize
	for zb0033 := range (*z).encodedCompactCertTxnFields.CertRound {
		s += (*z).encodedCompactCertTxnFields.CertRound[zb0033].Msgsize()
	}
	s += 10 + msgp.BytesPrefixSize + len([]byte((*z).encodedCompactCertTxnFields.BitmaskCertRound)) + 9 + msgp.ArrayHeaderSize
	for zb0034 := range (*z).encodedCompactCertTxnFields.CertType {
		s += (*z).encodedCompactCertTxnFields.CertType[zb0034].Msgsize()
	}
	s += 11 + msgp.BytesPrefixSize + len([]byte((*z).encodedCompactCertTxnFields.BitmaskCertType)) + 5 + msgp.ArrayHeaderSize
	for zb0035 := range (*z).encodedCompactCertTxnFields.Cert {
		s += (*z).encodedCompactCertTxnFields.Cert[zb0035].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedCompactCertTxnFields.BitmaskCert))
	return
}

// MsgIsZero returns whether this is a zero value
func (z *encodedTxns) MsgIsZero() bool {
	return (len((*z).TxType) == 0) && (len((*z).BitmaskTxType) == 0) && (len((*z).encodedTxnHeaders.Sender) == 0) && (len((*z).encodedTxnHeaders.BitmaskSender) == 0) && (len((*z).encodedTxnHeaders.Fee) == 0) && (len((*z).encodedTxnHeaders.BitmaskFee) == 0) && (len((*z).encodedTxnHeaders.FirstValid) == 0) && (len((*z).encodedTxnHeaders.BitmaskFirstValid) == 0) && (len((*z).encodedTxnHeaders.LastValid) == 0) && (len((*z).encodedTxnHeaders.BitmaskLastValid) == 0) && (len((*z).encodedTxnHeaders.Note) == 0) && (len((*z).encodedTxnHeaders.BitmaskNote) == 0) && ((*z).encodedTxnHeaders.GenesisID == "") && (len((*z).encodedTxnHeaders.BitmaskGenesisID) == 0) && ((*z).encodedTxnHeaders.GenesisHash.MsgIsZero()) && (len((*z).encodedTxnHeaders.BitmaskGenesisHash) == 0) && (len((*z).encodedTxnHeaders.BitmaskGroup) == 0) && (len((*z).encodedTxnHeaders.Lease) == 0) && (len((*z).encodedTxnHeaders.BitmaskLease) == 0) && (len((*z).encodedTxnHeaders.RekeyTo) == 0) && (len((*z).encodedTxnHeaders.BitmaskRekeyTo) == 0) && (len((*z).encodedKeyregTxnFields.VotePK) == 0) && (len((*z).encodedKeyregTxnFields.BitmaskVotePK) == 0) && (len((*z).encodedKeyregTxnFields.SelectionPK) == 0) && (len((*z).encodedKeyregTxnFields.BitmaskSelectionPK) == 0) && (len((*z).encodedKeyregTxnFields.VoteFirst) == 0) && (len((*z).encodedKeyregTxnFields.BitmaskVoteFirst) == 0) && (len((*z).encodedKeyregTxnFields.VoteLast) == 0) && (len((*z).encodedKeyregTxnFields.BitmaskVoteLast) == 0) && (len((*z).encodedKeyregTxnFields.VoteKeyDilution) == 0) && (len((*z).encodedKeyregTxnFields.BitmaskVoteKeyDilution) == 0) && (len((*z).encodedKeyregTxnFields.BitmaskNonparticipation) == 0) && (len((*z).encodedPaymentTxnFields.Receiver) == 0) && (len((*z).encodedPaymentTxnFields.BitmaskReceiver) == 0) && (len((*z).encodedPaymentTxnFields.Amount) == 0) && (len((*z).encodedPaymentTxnFields.BitmaskAmount) == 0) && (len((*z).encodedPaymentTxnFields.CloseRemainderTo) == 0) && (len((*z).encodedPaymentTxnFields.BitmaskCloseRemainderTo) == 0) && (len((*z).encodedAssetConfigTxnFields.ConfigAsset) == 0) && (len((*z).encodedAssetConfigTxnFields.BitmaskConfigAsset) == 0) && (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.Total) == 0) && (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal) == 0) && (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.Decimals) == 0) && (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals) == 0) && (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen) == 0) && (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.UnitName) == 0) && (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName) == 0) && (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.AssetName) == 0) && (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName) == 0) && (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.URL) == 0) && (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL) == 0) && (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash) == 0) && (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash) == 0) && (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.Manager) == 0) && (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager) == 0) && (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.Reserve) == 0) && (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve) == 0) && (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.Freeze) == 0) && (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze) == 0) && (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.Clawback) == 0) && (len((*z).encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback) == 0) && (len((*z).encodedAssetTransferTxnFields.XferAsset) == 0) && (len((*z).encodedAssetTransferTxnFields.BitmaskXferAsset) == 0) && (len((*z).encodedAssetTransferTxnFields.AssetAmount) == 0) && (len((*z).encodedAssetTransferTxnFields.BitmaskAssetAmount) == 0) && (len((*z).encodedAssetTransferTxnFields.AssetSender) == 0) && (len((*z).encodedAssetTransferTxnFields.BitmaskAssetSender) == 0) && (len((*z).encodedAssetTransferTxnFields.AssetReceiver) == 0) && (len((*z).encodedAssetTransferTxnFields.BitmaskAssetReceiver) == 0) && (len((*z).encodedAssetTransferTxnFields.AssetCloseTo) == 0) && (len((*z).encodedAssetTransferTxnFields.BitmaskAssetCloseTo) == 0) && (len((*z).encodedAssetFreezeTxnFields.FreezeAccount) == 0) && (len((*z).encodedAssetFreezeTxnFields.BitmaskFreezeAccount) == 0) && (len((*z).encodedAssetFreezeTxnFields.FreezeAsset) == 0) && (len((*z).encodedAssetFreezeTxnFields.BitmaskFreezeAsset) == 0) && (len((*z).encodedAssetFreezeTxnFields.BitmaskAssetFrozen) == 0) && (len((*z).encodedApplicationCallTxnFields.ApplicationID) == 0) && (len((*z).encodedApplicationCallTxnFields.BitmaskApplicationID) == 0) && (len((*z).encodedApplicationCallTxnFields.OnCompletion) == 0) && (len((*z).encodedApplicationCallTxnFields.BitmaskOnCompletion) == 0) && (len((*z).encodedApplicationCallTxnFields.ApplicationArgs) == 0) && (len((*z).encodedApplicationCallTxnFields.BitmaskApplicationArgs) == 0) && (len((*z).encodedApplicationCallTxnFields.Accounts) == 0) && (len((*z).encodedApplicationCallTxnFields.BitmaskAccounts) == 0) && (len((*z).encodedApplicationCallTxnFields.ForeignApps) == 0) && (len((*z).encodedApplicationCallTxnFields.BitmaskForeignApps) == 0) && (len((*z).encodedApplicationCallTxnFields.ForeignAssets) == 0) && (len((*z).encodedApplicationCallTxnFields.BitmaskForeignAssets) == 0) && (len((*z).encodedApplicationCallTxnFields.LocalNumUint) == 0) && (len((*z).encodedApplicationCallTxnFields.BitmaskLocalNumUint) == 0) && (len((*z).encodedApplicationCallTxnFields.LocalNumByteSlice) == 0) && (len((*z).encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice) == 0) && (len((*z).encodedApplicationCallTxnFields.GlobalNumUint) == 0) && (len((*z).encodedApplicationCallTxnFields.BitmaskGlobalNumUint) == 0) && (len((*z).encodedApplicationCallTxnFields.GlobalNumByteSlice) == 0) && (len((*z).encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice) == 0) && (len((*z).encodedApplicationCallTxnFields.ApprovalProgram) == 0) && (len((*z).encodedApplicationCallTxnFields.BitmaskApprovalProgram) == 0) && (len((*z).encodedApplicationCallTxnFields.ClearStateProgram) == 0) && (len((*z).encodedApplicationCallTxnFields.BitmaskClearStateProgram) == 0) && (len((*z).encodedCompactCertTxnFields.CertRound) == 0) && (len((*z).encodedCompactCertTxnFields.BitmaskCertRound) == 0) && (len((*z).encodedCompactCertTxnFields.CertType) == 0) && (len((*z).encodedCompactCertTxnFields.BitmaskCertType) == 0) && (len((*z).encodedCompactCertTxnFields.Cert) == 0) && (len((*z).encodedCompactCertTxnFields.BitmaskCert) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *packedTransactionGroups) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(1)
	var zb0001Mask uint8 /* 2 bits */
	if len((*z).Bytes) == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "g"
			o = append(o, 0xa1, 0x67)
			o = msgp.AppendBytes(o, (*z).Bytes)
		}
	}
	return
}

func (_ *packedTransactionGroups) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*packedTransactionGroups)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *packedTransactionGroups) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			var zb0003 int
			zb0003, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Bytes")
				return
			}
			if zb0003 > maxEncodedTransactionGroupBytes {
				err = msgp.ErrOverflow(uint64(zb0003), uint64(maxEncodedTransactionGroupBytes))
				return
			}
			(*z).Bytes, bts, err = msgp.ReadBytesBytes(bts, (*z).Bytes)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Bytes")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = packedTransactionGroups{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "g":
				var zb0004 int
				zb0004, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Bytes")
					return
				}
				if zb0004 > maxEncodedTransactionGroupBytes {
					err = msgp.ErrOverflow(uint64(zb0004), uint64(maxEncodedTransactionGroupBytes))
					return
				}
				(*z).Bytes, bts, err = msgp.ReadBytesBytes(bts, (*z).Bytes)
				if err != nil {
					err = msgp.WrapError(err, "Bytes")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *packedTransactionGroups) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*packedTransactionGroups)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *packedTransactionGroups) Msgsize() (s int) {
	s = 1 + 2 + msgp.BytesPrefixSize + len((*z).Bytes)
	return
}

// MsgIsZero returns whether this is a zero value
func (z *packedTransactionGroups) MsgIsZero() bool {
	return (len((*z).Bytes) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z program) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, []byte(z))
	return
}

func (_ program) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(program)
	if !ok {
		_, ok = (z).(*program)
	}
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *program) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 []byte
		var zb0002 int
		zb0002, err = msgp.ReadBytesBytesHeader(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 > config.MaxAppProgramLen {
			err = msgp.ErrOverflow(uint64(zb0002), uint64(config.MaxAppProgramLen))
			return
		}
		zb0001, bts, err = msgp.ReadBytesBytes(bts, []byte((*z)))
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = program(zb0001)
	}
	o = bts
	return
}

func (_ *program) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*program)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z program) Msgsize() (s int) {
	s = msgp.BytesPrefixSize + len([]byte(z))
	return
}

// MsgIsZero returns whether this is a zero value
func (z program) MsgIsZero() bool {
	return len(z) == 0
}

// MarshalMsg implements msgp.Marshaler
func (z *requestParams) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 3 bits */
	if (*z).Modulator == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).Offset == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "m"
			o = append(o, 0xa1, 0x6d)
			o = msgp.AppendByte(o, (*z).Modulator)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "o"
			o = append(o, 0xa1, 0x6f)
			o = msgp.AppendByte(o, (*z).Offset)
		}
	}
	return
}

func (_ *requestParams) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*requestParams)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *requestParams) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			(*z).Offset, bts, err = msgp.ReadByteBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Offset")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).Modulator, bts, err = msgp.ReadByteBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Modulator")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = requestParams{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "o":
				(*z).Offset, bts, err = msgp.ReadByteBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Offset")
					return
				}
			case "m":
				(*z).Modulator, bts, err = msgp.ReadByteBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Modulator")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *requestParams) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*requestParams)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *requestParams) Msgsize() (s int) {
	s = 1 + 2 + msgp.ByteSize + 2 + msgp.ByteSize
	return
}

// MsgIsZero returns whether this is a zero value
func (z *requestParams) MsgIsZero() bool {
	return ((*z).Offset == 0) && ((*z).Modulator == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *timingParams) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0002Len := uint32(4)
	var zb0002Mask uint8 /* 5 bits */
	if len((*z).AcceptedMsgSeq) == 0 {
		zb0002Len--
		zb0002Mask |= 0x2
	}
	if (*z).NextMsgMinDelay == 0 {
		zb0002Len--
		zb0002Mask |= 0x4
	}
	if (*z).ResponseElapsedTime == 0 {
		zb0002Len--
		zb0002Mask |= 0x8
	}
	if (*z).RefTxnBlockMsgSeq == 0 {
		zb0002Len--
		zb0002Mask |= 0x10
	}
	// variable map header, size zb0002Len
	o = append(o, 0x80|uint8(zb0002Len))
	if zb0002Len != 0 {
		if (zb0002Mask & 0x2) == 0 { // if not empty
			// string "a"
			o = append(o, 0xa1, 0x61)
			if (*z).AcceptedMsgSeq == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).AcceptedMsgSeq)))
			}
			for zb0001 := range (*z).AcceptedMsgSeq {
				o = msgp.AppendUint32(o, (*z).AcceptedMsgSeq[zb0001])
			}
		}
		if (zb0002Mask & 0x4) == 0 { // if not empty
			// string "m"
			o = append(o, 0xa1, 0x6d)
			o = msgp.AppendUint64(o, (*z).NextMsgMinDelay)
		}
		if (zb0002Mask & 0x8) == 0 { // if not empty
			// string "r"
			o = append(o, 0xa1, 0x72)
			o = msgp.AppendUint64(o, (*z).ResponseElapsedTime)
		}
		if (zb0002Mask & 0x10) == 0 { // if not empty
			// string "s"
			o = append(o, 0xa1, 0x73)
			o = msgp.AppendUint64(o, (*z).RefTxnBlockMsgSeq)
		}
	}
	return
}

func (_ *timingParams) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*timingParams)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *timingParams) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0002 int
	var zb0003 bool
	zb0002, zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0002, zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 > 0 {
			zb0002--
			(*z).RefTxnBlockMsgSeq, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RefTxnBlockMsgSeq")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			(*z).ResponseElapsedTime, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ResponseElapsedTime")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			var zb0004 int
			var zb0005 bool
			zb0004, zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AcceptedMsgSeq")
				return
			}
			if zb0004 > maxAcceptedMsgSeq {
				err = msgp.ErrOverflow(uint64(zb0004), uint64(maxAcceptedMsgSeq))
				err = msgp.WrapError(err, "struct-from-array", "AcceptedMsgSeq")
				return
			}
			if zb0005 {
				(*z).AcceptedMsgSeq = nil
			} else if (*z).AcceptedMsgSeq != nil && cap((*z).AcceptedMsgSeq) >= zb0004 {
				(*z).AcceptedMsgSeq = ((*z).AcceptedMsgSeq)[:zb0004]
			} else {
				(*z).AcceptedMsgSeq = make([]uint32, zb0004)
			}
			for zb0001 := range (*z).AcceptedMsgSeq {
				(*z).AcceptedMsgSeq[zb0001], bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AcceptedMsgSeq", zb0001)
					return
				}
			}
		}
		if zb0002 > 0 {
			zb0002--
			(*z).NextMsgMinDelay, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "NextMsgMinDelay")
				return
			}
		}
		if zb0002 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0002)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0003 {
			(*z) = timingParams{}
		}
		for zb0002 > 0 {
			zb0002--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "s":
				(*z).RefTxnBlockMsgSeq, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RefTxnBlockMsgSeq")
					return
				}
			case "r":
				(*z).ResponseElapsedTime, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ResponseElapsedTime")
					return
				}
			case "a":
				var zb0006 int
				var zb0007 bool
				zb0006, zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AcceptedMsgSeq")
					return
				}
				if zb0006 > maxAcceptedMsgSeq {
					err = msgp.ErrOverflow(uint64(zb0006), uint64(maxAcceptedMsgSeq))
					err = msgp.WrapError(err, "AcceptedMsgSeq")
					return
				}
				if zb0007 {
					(*z).AcceptedMsgSeq = nil
				} else if (*z).AcceptedMsgSeq != nil && cap((*z).AcceptedMsgSeq) >= zb0006 {
					(*z).AcceptedMsgSeq = ((*z).AcceptedMsgSeq)[:zb0006]
				} else {
					(*z).AcceptedMsgSeq = make([]uint32, zb0006)
				}
				for zb0001 := range (*z).AcceptedMsgSeq {
					(*z).AcceptedMsgSeq[zb0001], bts, err = msgp.ReadUint32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "AcceptedMsgSeq", zb0001)
						return
					}
				}
			case "m":
				(*z).NextMsgMinDelay, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NextMsgMinDelay")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *timingParams) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*timingParams)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *timingParams) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.ArrayHeaderSize + (len((*z).AcceptedMsgSeq) * (msgp.Uint32Size)) + 2 + msgp.Uint64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z *timingParams) MsgIsZero() bool {
	return ((*z).RefTxnBlockMsgSeq == 0) && ((*z).ResponseElapsedTime == 0) && (len((*z).AcceptedMsgSeq) == 0) && ((*z).NextMsgMinDelay == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z *transactionBlockMessage) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(6)
	var zb0001Mask uint8 /* 7 bits */
	if (*z).TxnBloomFilter.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if len((*z).TransactionGroups.Bytes) == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if ((*z).UpdatedRequestParams.Offset == 0) && ((*z).UpdatedRequestParams.Modulator == 0) {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if (*z).Round.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if (*z).MsgSync.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if (*z).Version == 0 {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "b"
			o = append(o, 0xa1, 0x62)
			o = (*z).TxnBloomFilter.MarshalMsg(o)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "g"
			o = append(o, 0xa1, 0x67)
			// omitempty: check for empty values
			zb0002Len := uint32(1)
			var zb0002Mask uint8 /* 2 bits */
			if len((*z).TransactionGroups.Bytes) == 0 {
				zb0002Len--
				zb0002Mask |= 0x2
			}
			// variable map header, size zb0002Len
			o = append(o, 0x80|uint8(zb0002Len))
			if (zb0002Mask & 0x2) == 0 { // if not empty
				// string "g"
				o = append(o, 0xa1, 0x67)
				o = msgp.AppendBytes(o, (*z).TransactionGroups.Bytes)
			}
		}
		if (zb0001Mask & 0x8) == 0 { // if not empty
			// string "p"
			o = append(o, 0xa1, 0x70)
			// omitempty: check for empty values
			zb0003Len := uint32(2)
			var zb0003Mask uint8 /* 3 bits */
			if (*z).UpdatedRequestParams.Modulator == 0 {
				zb0003Len--
				zb0003Mask |= 0x2
			}
			if (*z).UpdatedRequestParams.Offset == 0 {
				zb0003Len--
				zb0003Mask |= 0x4
			}
			// variable map header, size zb0003Len
			o = append(o, 0x80|uint8(zb0003Len))
			if (zb0003Mask & 0x2) == 0 { // if not empty
				// string "m"
				o = append(o, 0xa1, 0x6d)
				o = msgp.AppendByte(o, (*z).UpdatedRequestParams.Modulator)
			}
			if (zb0003Mask & 0x4) == 0 { // if not empty
				// string "o"
				o = append(o, 0xa1, 0x6f)
				o = msgp.AppendByte(o, (*z).UpdatedRequestParams.Offset)
			}
		}
		if (zb0001Mask & 0x10) == 0 { // if not empty
			// string "r"
			o = append(o, 0xa1, 0x72)
			o = (*z).Round.MarshalMsg(o)
		}
		if (zb0001Mask & 0x20) == 0 { // if not empty
			// string "t"
			o = append(o, 0xa1, 0x74)
			o = (*z).MsgSync.MarshalMsg(o)
		}
		if (zb0001Mask & 0x40) == 0 { // if not empty
			// string "v"
			o = append(o, 0xa1, 0x76)
			o = msgp.AppendInt32(o, (*z).Version)
		}
	}
	return
}

func (_ *transactionBlockMessage) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*transactionBlockMessage)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *transactionBlockMessage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			(*z).Version, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Version")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Round.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Round")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).TxnBloomFilter.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TxnBloomFilter")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			var zb0003 int
			var zb0004 bool
			zb0003, zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if _, ok := err.(msgp.TypeError); ok {
				zb0003, zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "UpdatedRequestParams")
					return
				}
				if zb0003 > 0 {
					zb0003--
					(*z).UpdatedRequestParams.Offset, bts, err = msgp.ReadByteBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "UpdatedRequestParams", "struct-from-array", "Offset")
						return
					}
				}
				if zb0003 > 0 {
					zb0003--
					(*z).UpdatedRequestParams.Modulator, bts, err = msgp.ReadByteBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "UpdatedRequestParams", "struct-from-array", "Modulator")
						return
					}
				}
				if zb0003 > 0 {
					err = msgp.ErrTooManyArrayFields(zb0003)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "UpdatedRequestParams", "struct-from-array")
						return
					}
				}
			} else {
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "UpdatedRequestParams")
					return
				}
				if zb0004 {
					(*z).UpdatedRequestParams = requestParams{}
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "UpdatedRequestParams")
						return
					}
					switch string(field) {
					case "o":
						(*z).UpdatedRequestParams.Offset, bts, err = msgp.ReadByteBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "UpdatedRequestParams", "Offset")
							return
						}
					case "m":
						(*z).UpdatedRequestParams.Modulator, bts, err = msgp.ReadByteBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "UpdatedRequestParams", "Modulator")
							return
						}
					default:
						err = msgp.ErrNoField(string(field))
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "UpdatedRequestParams")
							return
						}
					}
				}
			}
		}
		if zb0001 > 0 {
			zb0001--
			var zb0005 int
			var zb0006 bool
			zb0005, zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
			if _, ok := err.(msgp.TypeError); ok {
				zb0005, zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "TransactionGroups")
					return
				}
				if zb0005 > 0 {
					zb0005--
					var zb0007 int
					zb0007, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "TransactionGroups", "struct-from-array", "Bytes")
						return
					}
					if zb0007 > maxEncodedTransactionGroupBytes {
						err = msgp.ErrOverflow(uint64(zb0007), uint64(maxEncodedTransactionGroupBytes))
						return
					}
					(*z).TransactionGroups.Bytes, bts, err = msgp.ReadBytesBytes(bts, (*z).TransactionGroups.Bytes)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "TransactionGroups", "struct-from-array", "Bytes")
						return
					}
				}
				if zb0005 > 0 {
					err = msgp.ErrTooManyArrayFields(zb0005)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "TransactionGroups", "struct-from-array")
						return
					}
				}
			} else {
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "TransactionGroups")
					return
				}
				if zb0006 {
					(*z).TransactionGroups = packedTransactionGroups{}
				}
				for zb0005 > 0 {
					zb0005--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "TransactionGroups")
						return
					}
					switch string(field) {
					case "g":
						var zb0008 int
						zb0008, err = msgp.ReadBytesBytesHeader(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "TransactionGroups", "Bytes")
							return
						}
						if zb0008 > maxEncodedTransactionGroupBytes {
							err = msgp.ErrOverflow(uint64(zb0008), uint64(maxEncodedTransactionGroupBytes))
							return
						}
						(*z).TransactionGroups.Bytes, bts, err = msgp.ReadBytesBytes(bts, (*z).TransactionGroups.Bytes)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "TransactionGroups", "Bytes")
							return
						}
					default:
						err = msgp.ErrNoField(string(field))
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "TransactionGroups")
							return
						}
					}
				}
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).MsgSync.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MsgSync")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = transactionBlockMessage{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "v":
				(*z).Version, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Version")
					return
				}
			case "r":
				bts, err = (*z).Round.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Round")
					return
				}
			case "b":
				bts, err = (*z).TxnBloomFilter.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "TxnBloomFilter")
					return
				}
			case "p":
				var zb0009 int
				var zb0010 bool
				zb0009, zb0010, bts, err = msgp.ReadMapHeaderBytes(bts)
				if _, ok := err.(msgp.TypeError); ok {
					zb0009, zb0010, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "UpdatedRequestParams")
						return
					}
					if zb0009 > 0 {
						zb0009--
						(*z).UpdatedRequestParams.Offset, bts, err = msgp.ReadByteBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "UpdatedRequestParams", "struct-from-array", "Offset")
							return
						}
					}
					if zb0009 > 0 {
						zb0009--
						(*z).UpdatedRequestParams.Modulator, bts, err = msgp.ReadByteBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "UpdatedRequestParams", "struct-from-array", "Modulator")
							return
						}
					}
					if zb0009 > 0 {
						err = msgp.ErrTooManyArrayFields(zb0009)
						if err != nil {
							err = msgp.WrapError(err, "UpdatedRequestParams", "struct-from-array")
							return
						}
					}
				} else {
					if err != nil {
						err = msgp.WrapError(err, "UpdatedRequestParams")
						return
					}
					if zb0010 {
						(*z).UpdatedRequestParams = requestParams{}
					}
					for zb0009 > 0 {
						zb0009--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "UpdatedRequestParams")
							return
						}
						switch string(field) {
						case "o":
							(*z).UpdatedRequestParams.Offset, bts, err = msgp.ReadByteBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "UpdatedRequestParams", "Offset")
								return
							}
						case "m":
							(*z).UpdatedRequestParams.Modulator, bts, err = msgp.ReadByteBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "UpdatedRequestParams", "Modulator")
								return
							}
						default:
							err = msgp.ErrNoField(string(field))
							if err != nil {
								err = msgp.WrapError(err, "UpdatedRequestParams")
								return
							}
						}
					}
				}
			case "g":
				var zb0011 int
				var zb0012 bool
				zb0011, zb0012, bts, err = msgp.ReadMapHeaderBytes(bts)
				if _, ok := err.(msgp.TypeError); ok {
					zb0011, zb0012, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "TransactionGroups")
						return
					}
					if zb0011 > 0 {
						zb0011--
						var zb0013 int
						zb0013, err = msgp.ReadBytesBytesHeader(bts)
						if err != nil {
							err = msgp.WrapError(err, "TransactionGroups", "struct-from-array", "Bytes")
							return
						}
						if zb0013 > maxEncodedTransactionGroupBytes {
							err = msgp.ErrOverflow(uint64(zb0013), uint64(maxEncodedTransactionGroupBytes))
							return
						}
						(*z).TransactionGroups.Bytes, bts, err = msgp.ReadBytesBytes(bts, (*z).TransactionGroups.Bytes)
						if err != nil {
							err = msgp.WrapError(err, "TransactionGroups", "struct-from-array", "Bytes")
							return
						}
					}
					if zb0011 > 0 {
						err = msgp.ErrTooManyArrayFields(zb0011)
						if err != nil {
							err = msgp.WrapError(err, "TransactionGroups", "struct-from-array")
							return
						}
					}
				} else {
					if err != nil {
						err = msgp.WrapError(err, "TransactionGroups")
						return
					}
					if zb0012 {
						(*z).TransactionGroups = packedTransactionGroups{}
					}
					for zb0011 > 0 {
						zb0011--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "TransactionGroups")
							return
						}
						switch string(field) {
						case "g":
							var zb0014 int
							zb0014, err = msgp.ReadBytesBytesHeader(bts)
							if err != nil {
								err = msgp.WrapError(err, "TransactionGroups", "Bytes")
								return
							}
							if zb0014 > maxEncodedTransactionGroupBytes {
								err = msgp.ErrOverflow(uint64(zb0014), uint64(maxEncodedTransactionGroupBytes))
								return
							}
							(*z).TransactionGroups.Bytes, bts, err = msgp.ReadBytesBytes(bts, (*z).TransactionGroups.Bytes)
							if err != nil {
								err = msgp.WrapError(err, "TransactionGroups", "Bytes")
								return
							}
						default:
							err = msgp.ErrNoField(string(field))
							if err != nil {
								err = msgp.WrapError(err, "TransactionGroups")
								return
							}
						}
					}
				}
			case "t":
				bts, err = (*z).MsgSync.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "MsgSync")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *transactionBlockMessage) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*transactionBlockMessage)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *transactionBlockMessage) Msgsize() (s int) {
	s = 1 + 2 + msgp.Int32Size + 2 + (*z).Round.Msgsize() + 2 + (*z).TxnBloomFilter.Msgsize() + 2 + 1 + 2 + msgp.ByteSize + 2 + msgp.ByteSize + 2 + 1 + 2 + msgp.BytesPrefixSize + len((*z).TransactionGroups.Bytes) + 2 + (*z).MsgSync.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *transactionBlockMessage) MsgIsZero() bool {
	return ((*z).Version == 0) && ((*z).Round.MsgIsZero()) && ((*z).TxnBloomFilter.MsgIsZero()) && (((*z).UpdatedRequestParams.Offset == 0) && ((*z).UpdatedRequestParams.Modulator == 0)) && (len((*z).TransactionGroups.Bytes) == 0) && ((*z).MsgSync.MsgIsZero())
}

// MarshalMsg implements msgp.Marshaler
func (z *txGroupsEncodingStub) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0041Len := uint32(119)
	var zb0041Mask [3]uint64 /* 131 bits */
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x1000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetAmount) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x2000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetCloseTo) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x4000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetCloseTo) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x8000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskAssetFrozen) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x10000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x20000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x40000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x80000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskAmount) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x100000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x200000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x400000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x800000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationArgs) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x1000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.OnCompletion) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x2000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskOnCompletion) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x4000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x8000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApprovalProgram) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x10000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x20000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignAssets) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x40000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x80000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskAccounts) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x100000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x200000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignApps) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x400000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x800000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationID) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x1000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x2000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskClearStateProgram) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x4000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetReceiver) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x8000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetReceiver) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x10000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetSender) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x20000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetSender) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x40000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x80000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x100000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Clawback) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x200000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x400000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.BitmaskConfigAsset) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x800000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x1000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x2000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCert) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x4000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x8000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCertRound) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x10000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x20000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCertType) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x40000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.CloseRemainderTo) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x80000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskCloseRemainderTo) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x100000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x200000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x400000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x800000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Freeze) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x1000000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAccount) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x2000000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAccount) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x4000000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset) == 0 {
		zb0041Len--
		zb0041Mask[0] |= 0x8000000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAsset) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x1
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x2
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x4
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskFee) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x8
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x10
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskFirstValid) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x20
	}
	if (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.GenesisID == "" {
		zb0041Len--
		zb0041Mask[1] |= 0x40
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGenesisID) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x80
	}
	if (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.GenesisHash.MsgIsZero() {
		zb0041Len--
		zb0041Mask[1] |= 0x100
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGenesisHash) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x200
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x400
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x800
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x1000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumUint) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x2000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGroup) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x4000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x8000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x10000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x20000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumUint) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x40000
	}
	if len((*z).encodedSignedTxns.Lsig) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x80000
	}
	if len((*z).encodedSignedTxns.BitmaskLsig) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x100000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x200000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskLastValid) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x400000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Lease) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x800000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskLease) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x1000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Manager) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x2000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x4000000
	}
	if len((*z).encodedSignedTxns.Msig) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x8000000
	}
	if len((*z).encodedSignedTxns.BitmaskMsig) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x10000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskNonparticipation) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x20000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x40000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskNote) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x80000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Reserve) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x100000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x200000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Receiver) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x400000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskReceiver) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x800000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.RekeyTo) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x1000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskRekeyTo) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x2000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.SelectionPK) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x4000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskSelectionPK) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x8000000000
	}
	if len((*z).encodedSignedTxns.AuthAddr) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x10000000000
	}
	if len((*z).encodedSignedTxns.BitmaskAuthAddr) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x20000000000
	}
	if len((*z).encodedSignedTxns.Sig) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x40000000000
	}
	if len((*z).encodedSignedTxns.BitmaskSig) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x80000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Sender) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x100000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskSender) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x200000000000
	}
	if len((*z).SignedTxns) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x400000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x800000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x1000000000000
	}
	if (*z).TransactionGroupCount == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x2000000000000
	}
	if len((*z).TransactionGroupSizes) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x4000000000000
	}
	if (*z).TotalTransactionsCount == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x8000000000000
	}
	if len((*z).TxnGroups) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x10000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.TxType) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x20000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.BitmaskTxType) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x40000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x80000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x100000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x200000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteFirst) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x400000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x800000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteKeyDilution) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x1000000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VotePK) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x2000000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVotePK) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x4000000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast) == 0 {
		zb0041Len--
		zb0041Mask[1] |= 0x8000000000000000
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteLast) == 0 {
		zb0041Len--
		zb0041Mask[2] |= 0x1
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset) == 0 {
		zb0041Len--
		zb0041Mask[2] |= 0x2
	}
	if len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskXferAsset) == 0 {
		zb0041Len--
		zb0041Mask[2] |= 0x4
	}
	// variable map header, size zb0041Len
	o = msgp.AppendMapHeader(o, zb0041Len)
	if zb0041Len != 0 {
		if (zb0041Mask[0] & 0x1000) == 0 { // if not empty
			// string "aamt"
			o = append(o, 0xa4, 0x61, 0x61, 0x6d, 0x74)
			if (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount)))
			}
			for zb0019 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount {
				o = msgp.AppendUint64(o, (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount[zb0019])
			}
		}
		if (zb0041Mask[0] & 0x2000) == 0 { // if not empty
			// string "aamtbm"
			o = append(o, 0xa6, 0x61, 0x61, 0x6d, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetAmount))
		}
		if (zb0041Mask[0] & 0x4000) == 0 { // if not empty
			// string "aclose"
			o = append(o, 0xa6, 0x61, 0x63, 0x6c, 0x6f, 0x73, 0x65)
			o = msgp.AppendBytes(o, (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetCloseTo)
		}
		if (zb0041Mask[0] & 0x8000) == 0 { // if not empty
			// string "aclosebm"
			o = append(o, 0xa8, 0x61, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetCloseTo))
		}
		if (zb0041Mask[0] & 0x10000) == 0 { // if not empty
			// string "afrzbm"
			o = append(o, 0xa6, 0x61, 0x66, 0x72, 0x7a, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskAssetFrozen))
		}
		if (zb0041Mask[0] & 0x20000) == 0 { // if not empty
			// string "am"
			o = append(o, 0xa2, 0x61, 0x6d)
			o = msgp.AppendBytes(o, (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash)
		}
		if (zb0041Mask[0] & 0x40000) == 0 { // if not empty
			// string "ambm"
			o = append(o, 0xa4, 0x61, 0x6d, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash))
		}
		if (zb0041Mask[0] & 0x80000) == 0 { // if not empty
			// string "amt"
			o = append(o, 0xa3, 0x61, 0x6d, 0x74)
			if (*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount)))
			}
			for zb0011 := range (*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount {
				o = (*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount[zb0011].MarshalMsg(o)
			}
		}
		if (zb0041Mask[0] & 0x100000) == 0 { // if not empty
			// string "amtbm"
			o = append(o, 0xa5, 0x61, 0x6d, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskAmount))
		}
		if (zb0041Mask[0] & 0x200000) == 0 { // if not empty
			// string "an"
			o = append(o, 0xa2, 0x61, 0x6e)
			if (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName)))
			}
			for zb0016 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName {
				o = msgp.AppendString(o, (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName[zb0016])
			}
		}
		if (zb0041Mask[0] & 0x400000) == 0 { // if not empty
			// string "anbm"
			o = append(o, 0xa4, 0x61, 0x6e, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName))
		}
		if (zb0041Mask[0] & 0x800000) == 0 { // if not empty
			// string "apaa"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x61)
			if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs)))
			}
			for zb0022 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs {
				if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022] == nil {
					o = msgp.AppendNil(o)
				} else {
					o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022])))
				}
				for zb0023 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022] {
					o = msgp.AppendBytes(o, (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022][zb0023])
				}
			}
		}
		if (zb0041Mask[0] & 0x1000000) == 0 { // if not empty
			// string "apaabm"
			o = append(o, 0xa6, 0x61, 0x70, 0x61, 0x61, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationArgs))
		}
		if (zb0041Mask[0] & 0x2000000) == 0 { // if not empty
			// string "apan"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x6e)
			o = msgp.AppendBytes(o, (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.OnCompletion)
		}
		if (zb0041Mask[0] & 0x4000000) == 0 { // if not empty
			// string "apanbm"
			o = append(o, 0xa6, 0x61, 0x70, 0x61, 0x6e, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskOnCompletion))
		}
		if (zb0041Mask[0] & 0x8000000) == 0 { // if not empty
			// string "apap"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x70)
			if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram)))
			}
			for zb0034 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram {
				o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram[zb0034]))
			}
		}
		if (zb0041Mask[0] & 0x10000000) == 0 { // if not empty
			// string "apapbm"
			o = append(o, 0xa6, 0x61, 0x70, 0x61, 0x70, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApprovalProgram))
		}
		if (zb0041Mask[0] & 0x20000000) == 0 { // if not empty
			// string "apas"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x73)
			if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets)))
			}
			for zb0028 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets {
				if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028] == nil {
					o = msgp.AppendNil(o)
				} else {
					o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028])))
				}
				for zb0029 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028] {
					o = (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028][zb0029].MarshalMsg(o)
				}
			}
		}
		if (zb0041Mask[0] & 0x40000000) == 0 { // if not empty
			// string "apasbm"
			o = append(o, 0xa6, 0x61, 0x70, 0x61, 0x73, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignAssets))
		}
		if (zb0041Mask[0] & 0x80000000) == 0 { // if not empty
			// string "apat"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x74)
			if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts)))
			}
			for zb0024 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts {
				if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024] == nil {
					o = msgp.AppendNil(o)
				} else {
					o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024])))
				}
				for zb0025 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024] {
					o = (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024][zb0025].MarshalMsg(o)
				}
			}
		}
		if (zb0041Mask[0] & 0x100000000) == 0 { // if not empty
			// string "apatbm"
			o = append(o, 0xa6, 0x61, 0x70, 0x61, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskAccounts))
		}
		if (zb0041Mask[0] & 0x200000000) == 0 { // if not empty
			// string "apfa"
			o = append(o, 0xa4, 0x61, 0x70, 0x66, 0x61)
			if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps)))
			}
			for zb0026 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps {
				if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026] == nil {
					o = msgp.AppendNil(o)
				} else {
					o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026])))
				}
				for zb0027 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026] {
					o = (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026][zb0027].MarshalMsg(o)
				}
			}
		}
		if (zb0041Mask[0] & 0x400000000) == 0 { // if not empty
			// string "apfabm"
			o = append(o, 0xa6, 0x61, 0x70, 0x66, 0x61, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignApps))
		}
		if (zb0041Mask[0] & 0x800000000) == 0 { // if not empty
			// string "apid"
			o = append(o, 0xa4, 0x61, 0x70, 0x69, 0x64)
			if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID)))
			}
			for zb0021 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID {
				o = (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID[zb0021].MarshalMsg(o)
			}
		}
		if (zb0041Mask[0] & 0x1000000000) == 0 { // if not empty
			// string "apidbm"
			o = append(o, 0xa6, 0x61, 0x70, 0x69, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationID))
		}
		if (zb0041Mask[0] & 0x2000000000) == 0 { // if not empty
			// string "apsu"
			o = append(o, 0xa4, 0x61, 0x70, 0x73, 0x75)
			if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram)))
			}
			for zb0035 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram {
				o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram[zb0035]))
			}
		}
		if (zb0041Mask[0] & 0x4000000000) == 0 { // if not empty
			// string "apsubm"
			o = append(o, 0xa6, 0x61, 0x70, 0x73, 0x75, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskClearStateProgram))
		}
		if (zb0041Mask[0] & 0x8000000000) == 0 { // if not empty
			// string "arcv"
			o = append(o, 0xa4, 0x61, 0x72, 0x63, 0x76)
			o = msgp.AppendBytes(o, (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetReceiver)
		}
		if (zb0041Mask[0] & 0x10000000000) == 0 { // if not empty
			// string "arcvbm"
			o = append(o, 0xa6, 0x61, 0x72, 0x63, 0x76, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetReceiver))
		}
		if (zb0041Mask[0] & 0x20000000000) == 0 { // if not empty
			// string "asnd"
			o = append(o, 0xa4, 0x61, 0x73, 0x6e, 0x64)
			o = msgp.AppendBytes(o, (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetSender)
		}
		if (zb0041Mask[0] & 0x40000000000) == 0 { // if not empty
			// string "asndbm"
			o = append(o, 0xa6, 0x61, 0x73, 0x6e, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetSender))
		}
		if (zb0041Mask[0] & 0x80000000000) == 0 { // if not empty
			// string "au"
			o = append(o, 0xa2, 0x61, 0x75)
			if (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL)))
			}
			for zb0017 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL {
				o = msgp.AppendString(o, (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL[zb0017])
			}
		}
		if (zb0041Mask[0] & 0x100000000000) == 0 { // if not empty
			// string "aubm"
			o = append(o, 0xa4, 0x61, 0x75, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL))
		}
		if (zb0041Mask[0] & 0x200000000000) == 0 { // if not empty
			// string "c"
			o = append(o, 0xa1, 0x63)
			o = msgp.AppendBytes(o, (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Clawback)
		}
		if (zb0041Mask[0] & 0x400000000000) == 0 { // if not empty
			// string "caid"
			o = append(o, 0xa4, 0x63, 0x61, 0x69, 0x64)
			if (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset)))
			}
			for zb0012 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset {
				o = (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset[zb0012].MarshalMsg(o)
			}
		}
		if (zb0041Mask[0] & 0x800000000000) == 0 { // if not empty
			// string "caidbm"
			o = append(o, 0xa6, 0x63, 0x61, 0x69, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.BitmaskConfigAsset))
		}
		if (zb0041Mask[0] & 0x1000000000000) == 0 { // if not empty
			// string "cbm"
			o = append(o, 0xa3, 0x63, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback))
		}
		if (zb0041Mask[0] & 0x2000000000000) == 0 { // if not empty
			// string "cert"
			o = append(o, 0xa4, 0x63, 0x65, 0x72, 0x74)
			if (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert)))
			}
			for zb0038 := range (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert {
				o = (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert[zb0038].MarshalMsg(o)
			}
		}
		if (zb0041Mask[0] & 0x4000000000000) == 0 { // if not empty
			// string "certbm"
			o = append(o, 0xa6, 0x63, 0x65, 0x72, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCert))
		}
		if (zb0041Mask[0] & 0x8000000000000) == 0 { // if not empty
			// string "certrnd"
			o = append(o, 0xa7, 0x63, 0x65, 0x72, 0x74, 0x72, 0x6e, 0x64)
			if (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound)))
			}
			for zb0036 := range (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound {
				o = (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound[zb0036].MarshalMsg(o)
			}
		}
		if (zb0041Mask[0] & 0x10000000000000) == 0 { // if not empty
			// string "certrndbm"
			o = append(o, 0xa9, 0x63, 0x65, 0x72, 0x74, 0x72, 0x6e, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCertRound))
		}
		if (zb0041Mask[0] & 0x20000000000000) == 0 { // if not empty
			// string "certtype"
			o = append(o, 0xa8, 0x63, 0x65, 0x72, 0x74, 0x74, 0x79, 0x70, 0x65)
			if (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType)))
			}
			for zb0037 := range (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType {
				o = (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType[zb0037].MarshalMsg(o)
			}
		}
		if (zb0041Mask[0] & 0x40000000000000) == 0 { // if not empty
			// string "certtypebm"
			o = append(o, 0xaa, 0x63, 0x65, 0x72, 0x74, 0x74, 0x79, 0x70, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCertType))
		}
		if (zb0041Mask[0] & 0x80000000000000) == 0 { // if not empty
			// string "close"
			o = append(o, 0xa5, 0x63, 0x6c, 0x6f, 0x73, 0x65)
			o = msgp.AppendBytes(o, (*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.CloseRemainderTo)
		}
		if (zb0041Mask[0] & 0x100000000000000) == 0 { // if not empty
			// string "closebm"
			o = append(o, 0xa7, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskCloseRemainderTo))
		}
		if (zb0041Mask[0] & 0x200000000000000) == 0 { // if not empty
			// string "dc"
			o = append(o, 0xa2, 0x64, 0x63)
			if (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals)))
			}
			for zb0014 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals {
				o = msgp.AppendUint32(o, (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals[zb0014])
			}
		}
		if (zb0041Mask[0] & 0x400000000000000) == 0 { // if not empty
			// string "dcbm"
			o = append(o, 0xa4, 0x64, 0x63, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals))
		}
		if (zb0041Mask[0] & 0x800000000000000) == 0 { // if not empty
			// string "dfbm"
			o = append(o, 0xa4, 0x64, 0x66, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen))
		}
		if (zb0041Mask[0] & 0x1000000000000000) == 0 { // if not empty
			// string "f"
			o = append(o, 0xa1, 0x66)
			o = msgp.AppendBytes(o, (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Freeze)
		}
		if (zb0041Mask[0] & 0x2000000000000000) == 0 { // if not empty
			// string "fadd"
			o = append(o, 0xa4, 0x66, 0x61, 0x64, 0x64)
			o = msgp.AppendBytes(o, (*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAccount)
		}
		if (zb0041Mask[0] & 0x4000000000000000) == 0 { // if not empty
			// string "faddbm"
			o = append(o, 0xa6, 0x66, 0x61, 0x64, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAccount))
		}
		if (zb0041Mask[0] & 0x8000000000000000) == 0 { // if not empty
			// string "faid"
			o = append(o, 0xa4, 0x66, 0x61, 0x69, 0x64)
			if (*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset)))
			}
			for zb0020 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset {
				o = (*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset[zb0020].MarshalMsg(o)
			}
		}
		if (zb0041Mask[1] & 0x1) == 0 { // if not empty
			// string "faidbm"
			o = append(o, 0xa6, 0x66, 0x61, 0x69, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAsset))
		}
		if (zb0041Mask[1] & 0x2) == 0 { // if not empty
			// string "fbm"
			o = append(o, 0xa3, 0x66, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze))
		}
		if (zb0041Mask[1] & 0x4) == 0 { // if not empty
			// string "fee"
			o = append(o, 0xa3, 0x66, 0x65, 0x65)
			if (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee)))
			}
			for zb0004 := range (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee {
				o = (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee[zb0004].MarshalMsg(o)
			}
		}
		if (zb0041Mask[1] & 0x8) == 0 { // if not empty
			// string "feebm"
			o = append(o, 0xa5, 0x66, 0x65, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskFee))
		}
		if (zb0041Mask[1] & 0x10) == 0 { // if not empty
			// string "fv"
			o = append(o, 0xa2, 0x66, 0x76)
			if (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid)))
			}
			for zb0005 := range (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid {
				o = (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid[zb0005].MarshalMsg(o)
			}
		}
		if (zb0041Mask[1] & 0x20) == 0 { // if not empty
			// string "fvbm"
			o = append(o, 0xa4, 0x66, 0x76, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskFirstValid))
		}
		if (zb0041Mask[1] & 0x40) == 0 { // if not empty
			// string "gen"
			o = append(o, 0xa3, 0x67, 0x65, 0x6e)
			o = msgp.AppendString(o, (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.GenesisID)
		}
		if (zb0041Mask[1] & 0x80) == 0 { // if not empty
			// string "genbm"
			o = append(o, 0xa5, 0x67, 0x65, 0x6e, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGenesisID))
		}
		if (zb0041Mask[1] & 0x100) == 0 { // if not empty
			// string "gh"
			o = append(o, 0xa2, 0x67, 0x68)
			o = (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.GenesisHash.MarshalMsg(o)
		}
		if (zb0041Mask[1] & 0x200) == 0 { // if not empty
			// string "ghbm"
			o = append(o, 0xa4, 0x67, 0x68, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGenesisHash))
		}
		if (zb0041Mask[1] & 0x400) == 0 { // if not empty
			// string "gnbs"
			o = append(o, 0xa4, 0x67, 0x6e, 0x62, 0x73)
			if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice)))
			}
			for zb0033 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice {
				o = msgp.AppendUint64(o, (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice[zb0033])
			}
		}
		if (zb0041Mask[1] & 0x800) == 0 { // if not empty
			// string "gnbsbm"
			o = append(o, 0xa6, 0x67, 0x6e, 0x62, 0x73, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice))
		}
		if (zb0041Mask[1] & 0x1000) == 0 { // if not empty
			// string "gnui"
			o = append(o, 0xa4, 0x67, 0x6e, 0x75, 0x69)
			if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint)))
			}
			for zb0032 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint {
				o = msgp.AppendUint64(o, (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint[zb0032])
			}
		}
		if (zb0041Mask[1] & 0x2000) == 0 { // if not empty
			// string "gnuibm"
			o = append(o, 0xa6, 0x67, 0x6e, 0x75, 0x69, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumUint))
		}
		if (zb0041Mask[1] & 0x4000) == 0 { // if not empty
			// string "grpbm"
			o = append(o, 0xa5, 0x67, 0x72, 0x70, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGroup))
		}
		if (zb0041Mask[1] & 0x8000) == 0 { // if not empty
			// string "lnbs"
			o = append(o, 0xa4, 0x6c, 0x6e, 0x62, 0x73)
			if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice)))
			}
			for zb0031 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice {
				o = msgp.AppendUint64(o, (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice[zb0031])
			}
		}
		if (zb0041Mask[1] & 0x10000) == 0 { // if not empty
			// string "lnbsbm"
			o = append(o, 0xa6, 0x6c, 0x6e, 0x62, 0x73, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice))
		}
		if (zb0041Mask[1] & 0x20000) == 0 { // if not empty
			// string "lnui"
			o = append(o, 0xa4, 0x6c, 0x6e, 0x75, 0x69)
			if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint)))
			}
			for zb0030 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint {
				o = msgp.AppendUint64(o, (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint[zb0030])
			}
		}
		if (zb0041Mask[1] & 0x40000) == 0 { // if not empty
			// string "lnuibm"
			o = append(o, 0xa6, 0x6c, 0x6e, 0x75, 0x69, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumUint))
		}
		if (zb0041Mask[1] & 0x80000) == 0 { // if not empty
			// string "lsig"
			o = append(o, 0xa4, 0x6c, 0x73, 0x69, 0x67)
			if (*z).encodedSignedTxns.Lsig == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.Lsig)))
			}
			for zb0003 := range (*z).encodedSignedTxns.Lsig {
				o = (*z).encodedSignedTxns.Lsig[zb0003].MarshalMsg(o)
			}
		}
		if (zb0041Mask[1] & 0x100000) == 0 { // if not empty
			// string "lsigbm"
			o = append(o, 0xa6, 0x6c, 0x73, 0x69, 0x67, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.BitmaskLsig))
		}
		if (zb0041Mask[1] & 0x200000) == 0 { // if not empty
			// string "lv"
			o = append(o, 0xa2, 0x6c, 0x76)
			if (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid)))
			}
			for zb0006 := range (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid {
				o = (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid[zb0006].MarshalMsg(o)
			}
		}
		if (zb0041Mask[1] & 0x400000) == 0 { // if not empty
			// string "lvbm"
			o = append(o, 0xa4, 0x6c, 0x76, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskLastValid))
		}
		if (zb0041Mask[1] & 0x800000) == 0 { // if not empty
			// string "lx"
			o = append(o, 0xa2, 0x6c, 0x78)
			o = msgp.AppendBytes(o, (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Lease)
		}
		if (zb0041Mask[1] & 0x1000000) == 0 { // if not empty
			// string "lxbm"
			o = append(o, 0xa4, 0x6c, 0x78, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskLease))
		}
		if (zb0041Mask[1] & 0x2000000) == 0 { // if not empty
			// string "m"
			o = append(o, 0xa1, 0x6d)
			o = msgp.AppendBytes(o, (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Manager)
		}
		if (zb0041Mask[1] & 0x4000000) == 0 { // if not empty
			// string "mbm"
			o = append(o, 0xa3, 0x6d, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager))
		}
		if (zb0041Mask[1] & 0x8000000) == 0 { // if not empty
			// string "msig"
			o = append(o, 0xa4, 0x6d, 0x73, 0x69, 0x67)
			if (*z).encodedSignedTxns.Msig == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.Msig)))
			}
			for zb0002 := range (*z).encodedSignedTxns.Msig {
				o = (*z).encodedSignedTxns.Msig[zb0002].MarshalMsg(o)
			}
		}
		if (zb0041Mask[1] & 0x10000000) == 0 { // if not empty
			// string "msigbm"
			o = append(o, 0xa6, 0x6d, 0x73, 0x69, 0x67, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.BitmaskMsig))
		}
		if (zb0041Mask[1] & 0x20000000) == 0 { // if not empty
			// string "nonpartbm"
			o = append(o, 0xa9, 0x6e, 0x6f, 0x6e, 0x70, 0x61, 0x72, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskNonparticipation))
		}
		if (zb0041Mask[1] & 0x40000000) == 0 { // if not empty
			// string "note"
			o = append(o, 0xa4, 0x6e, 0x6f, 0x74, 0x65)
			if (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note)))
			}
			for zb0007 := range (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note {
				o = msgp.AppendBytes(o, (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note[zb0007])
			}
		}
		if (zb0041Mask[1] & 0x80000000) == 0 { // if not empty
			// string "notebm"
			o = append(o, 0xa6, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskNote))
		}
		if (zb0041Mask[1] & 0x100000000) == 0 { // if not empty
			// string "r"
			o = append(o, 0xa1, 0x72)
			o = msgp.AppendBytes(o, (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Reserve)
		}
		if (zb0041Mask[1] & 0x200000000) == 0 { // if not empty
			// string "rbm"
			o = append(o, 0xa3, 0x72, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve))
		}
		if (zb0041Mask[1] & 0x400000000) == 0 { // if not empty
			// string "rcv"
			o = append(o, 0xa3, 0x72, 0x63, 0x76)
			o = msgp.AppendBytes(o, (*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Receiver)
		}
		if (zb0041Mask[1] & 0x800000000) == 0 { // if not empty
			// string "rcvbm"
			o = append(o, 0xa5, 0x72, 0x63, 0x76, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskReceiver))
		}
		if (zb0041Mask[1] & 0x1000000000) == 0 { // if not empty
			// string "rekey"
			o = append(o, 0xa5, 0x72, 0x65, 0x6b, 0x65, 0x79)
			o = msgp.AppendBytes(o, (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.RekeyTo)
		}
		if (zb0041Mask[1] & 0x2000000000) == 0 { // if not empty
			// string "rekeybm"
			o = append(o, 0xa7, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskRekeyTo))
		}
		if (zb0041Mask[1] & 0x4000000000) == 0 { // if not empty
			// string "selkey"
			o = append(o, 0xa6, 0x73, 0x65, 0x6c, 0x6b, 0x65, 0x79)
			o = msgp.AppendBytes(o, (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.SelectionPK)
		}
		if (zb0041Mask[1] & 0x8000000000) == 0 { // if not empty
			// string "selkeybm"
			o = append(o, 0xa8, 0x73, 0x65, 0x6c, 0x6b, 0x65, 0x79, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskSelectionPK))
		}
		if (zb0041Mask[1] & 0x10000000000) == 0 { // if not empty
			// string "sgnr"
			o = append(o, 0xa4, 0x73, 0x67, 0x6e, 0x72)
			o = msgp.AppendBytes(o, (*z).encodedSignedTxns.AuthAddr)
		}
		if (zb0041Mask[1] & 0x20000000000) == 0 { // if not empty
			// string "sgnrbm"
			o = append(o, 0xa6, 0x73, 0x67, 0x6e, 0x72, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.BitmaskAuthAddr))
		}
		if (zb0041Mask[1] & 0x40000000000) == 0 { // if not empty
			// string "sig"
			o = append(o, 0xa3, 0x73, 0x69, 0x67)
			o = msgp.AppendBytes(o, (*z).encodedSignedTxns.Sig)
		}
		if (zb0041Mask[1] & 0x80000000000) == 0 { // if not empty
			// string "sigbm"
			o = append(o, 0xa5, 0x73, 0x69, 0x67, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.BitmaskSig))
		}
		if (zb0041Mask[1] & 0x100000000000) == 0 { // if not empty
			// string "snd"
			o = append(o, 0xa3, 0x73, 0x6e, 0x64)
			o = msgp.AppendBytes(o, (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Sender)
		}
		if (zb0041Mask[1] & 0x200000000000) == 0 { // if not empty
			// string "sndbm"
			o = append(o, 0xa5, 0x73, 0x6e, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskSender))
		}
		if (zb0041Mask[1] & 0x400000000000) == 0 { // if not empty
			// string "st"
			o = append(o, 0xa2, 0x73, 0x74)
			if (*z).SignedTxns == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).SignedTxns)))
			}
			for zb0001 := range (*z).SignedTxns {
				o = (*z).SignedTxns[zb0001].MarshalMsg(o)
			}
		}
		if (zb0041Mask[1] & 0x800000000000) == 0 { // if not empty
			// string "t"
			o = append(o, 0xa1, 0x74)
			if (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total)))
			}
			for zb0013 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total {
				o = msgp.AppendUint64(o, (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total[zb0013])
			}
		}
		if (zb0041Mask[1] & 0x1000000000000) == 0 { // if not empty
			// string "tbm"
			o = append(o, 0xa3, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal))
		}
		if (zb0041Mask[1] & 0x2000000000000) == 0 { // if not empty
			// string "tgc"
			o = append(o, 0xa3, 0x74, 0x67, 0x63)
			o = msgp.AppendUint64(o, (*z).TransactionGroupCount)
		}
		if (zb0041Mask[1] & 0x4000000000000) == 0 { // if not empty
			// string "tgs"
			o = append(o, 0xa3, 0x74, 0x67, 0x73)
			o = msgp.AppendBytes(o, (*z).TransactionGroupSizes)
		}
		if (zb0041Mask[1] & 0x8000000000000) == 0 { // if not empty
			// string "ttc"
			o = append(o, 0xa3, 0x74, 0x74, 0x63)
			o = msgp.AppendUint64(o, (*z).TotalTransactionsCount)
		}
		if (zb0041Mask[1] & 0x10000000000000) == 0 { // if not empty
			// string "txng"
			o = append(o, 0xa4, 0x74, 0x78, 0x6e, 0x67)
			if (*z).TxnGroups == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).TxnGroups)))
			}
			for zb0039 := range (*z).TxnGroups {
				if (*z).TxnGroups[zb0039] == nil {
					o = msgp.AppendNil(o)
				} else {
					o = msgp.AppendArrayHeader(o, uint32(len((*z).TxnGroups[zb0039])))
				}
				for zb0040 := range (*z).TxnGroups[zb0039] {
					o = (*z).TxnGroups[zb0039][zb0040].MarshalMsg(o)
				}
			}
		}
		if (zb0041Mask[1] & 0x20000000000000) == 0 { // if not empty
			// string "type"
			o = append(o, 0xa4, 0x74, 0x79, 0x70, 0x65)
			o = msgp.AppendBytes(o, (*z).encodedSignedTxns.encodedTxns.TxType)
		}
		if (zb0041Mask[1] & 0x40000000000000) == 0 { // if not empty
			// string "typebm"
			o = append(o, 0xa6, 0x74, 0x79, 0x70, 0x65, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.BitmaskTxType))
		}
		if (zb0041Mask[1] & 0x80000000000000) == 0 { // if not empty
			// string "un"
			o = append(o, 0xa2, 0x75, 0x6e)
			if (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName)))
			}
			for zb0015 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName {
				o = msgp.AppendString(o, (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName[zb0015])
			}
		}
		if (zb0041Mask[1] & 0x100000000000000) == 0 { // if not empty
			// string "unbm"
			o = append(o, 0xa4, 0x75, 0x6e, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName))
		}
		if (zb0041Mask[1] & 0x200000000000000) == 0 { // if not empty
			// string "votefst"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x66, 0x73, 0x74)
			if (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst)))
			}
			for zb0008 := range (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst {
				o = (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst[zb0008].MarshalMsg(o)
			}
		}
		if (zb0041Mask[1] & 0x400000000000000) == 0 { // if not empty
			// string "votefstbm"
			o = append(o, 0xa9, 0x76, 0x6f, 0x74, 0x65, 0x66, 0x73, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteFirst))
		}
		if (zb0041Mask[1] & 0x800000000000000) == 0 { // if not empty
			// string "votekd"
			o = append(o, 0xa6, 0x76, 0x6f, 0x74, 0x65, 0x6b, 0x64)
			if (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution)))
			}
			for zb0010 := range (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution {
				o = msgp.AppendUint64(o, (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution[zb0010])
			}
		}
		if (zb0041Mask[1] & 0x1000000000000000) == 0 { // if not empty
			// string "votekdbm"
			o = append(o, 0xa8, 0x76, 0x6f, 0x74, 0x65, 0x6b, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteKeyDilution))
		}
		if (zb0041Mask[1] & 0x2000000000000000) == 0 { // if not empty
			// string "votekey"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x6b, 0x65, 0x79)
			o = msgp.AppendBytes(o, (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VotePK)
		}
		if (zb0041Mask[1] & 0x4000000000000000) == 0 { // if not empty
			// string "votekeybm"
			o = append(o, 0xa9, 0x76, 0x6f, 0x74, 0x65, 0x6b, 0x65, 0x79, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVotePK))
		}
		if (zb0041Mask[1] & 0x8000000000000000) == 0 { // if not empty
			// string "votelst"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x6c, 0x73, 0x74)
			if (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast)))
			}
			for zb0009 := range (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast {
				o = (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast[zb0009].MarshalMsg(o)
			}
		}
		if (zb0041Mask[2] & 0x1) == 0 { // if not empty
			// string "votelstbm"
			o = append(o, 0xa9, 0x76, 0x6f, 0x74, 0x65, 0x6c, 0x73, 0x74, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteLast))
		}
		if (zb0041Mask[2] & 0x2) == 0 { // if not empty
			// string "xaid"
			o = append(o, 0xa4, 0x78, 0x61, 0x69, 0x64)
			if (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset)))
			}
			for zb0018 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset {
				o = (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset[zb0018].MarshalMsg(o)
			}
		}
		if (zb0041Mask[2] & 0x4) == 0 { // if not empty
			// string "xaidbm"
			o = append(o, 0xa6, 0x78, 0x61, 0x69, 0x64, 0x62, 0x6d)
			o = msgp.AppendBytes(o, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskXferAsset))
		}
	}
	return
}

func (_ *txGroupsEncodingStub) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*txGroupsEncodingStub)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *txGroupsEncodingStub) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0041 int
	var zb0042 bool
	zb0041, zb0042, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0041, zb0042, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0041 > 0 {
			zb0041--
			(*z).TotalTransactionsCount, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TotalTransactionsCount")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			(*z).TransactionGroupCount, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TransactionGroupCount")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0043 int
			zb0043, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TransactionGroupSizes")
				return
			}
			if zb0043 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0043), uint64(maxEncodedTransactionGroup))
				return
			}
			(*z).TransactionGroupSizes, bts, err = msgp.ReadBytesBytes(bts, (*z).TransactionGroupSizes)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TransactionGroupSizes")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0044 int
			var zb0045 bool
			zb0044, zb0045, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SignedTxns")
				return
			}
			if zb0044 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0044), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "SignedTxns")
				return
			}
			if zb0045 {
				(*z).SignedTxns = nil
			} else if (*z).SignedTxns != nil && cap((*z).SignedTxns) >= zb0044 {
				(*z).SignedTxns = ((*z).SignedTxns)[:zb0044]
			} else {
				(*z).SignedTxns = make([]transactions.SignedTxn, zb0044)
			}
			for zb0001 := range (*z).SignedTxns {
				bts, err = (*z).SignedTxns[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "SignedTxns", zb0001)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0046 int
			zb0046, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Sig")
				return
			}
			if zb0046 > maxSignatureBytes {
				err = msgp.ErrOverflow(uint64(zb0046), uint64(maxSignatureBytes))
				return
			}
			(*z).encodedSignedTxns.Sig, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.Sig)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Sig")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0047 []byte
				var zb0048 int
				zb0048, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskSig")
					return
				}
				if zb0048 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0048), uint64(maxBitmaskSize))
					return
				}
				zb0047, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.BitmaskSig))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskSig")
					return
				}
				(*z).encodedSignedTxns.BitmaskSig = bitmask(zb0047)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0049 int
			var zb0050 bool
			zb0049, zb0050, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Msig")
				return
			}
			if zb0049 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0049), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Msig")
				return
			}
			if zb0050 {
				(*z).encodedSignedTxns.Msig = nil
			} else if (*z).encodedSignedTxns.Msig != nil && cap((*z).encodedSignedTxns.Msig) >= zb0049 {
				(*z).encodedSignedTxns.Msig = ((*z).encodedSignedTxns.Msig)[:zb0049]
			} else {
				(*z).encodedSignedTxns.Msig = make([]crypto.MultisigSig, zb0049)
			}
			for zb0002 := range (*z).encodedSignedTxns.Msig {
				bts, err = (*z).encodedSignedTxns.Msig[zb0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Msig", zb0002)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0051 []byte
				var zb0052 int
				zb0052, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskMsig")
					return
				}
				if zb0052 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0052), uint64(maxBitmaskSize))
					return
				}
				zb0051, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.BitmaskMsig))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskMsig")
					return
				}
				(*z).encodedSignedTxns.BitmaskMsig = bitmask(zb0051)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0053 int
			var zb0054 bool
			zb0053, zb0054, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Lsig")
				return
			}
			if zb0053 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0053), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Lsig")
				return
			}
			if zb0054 {
				(*z).encodedSignedTxns.Lsig = nil
			} else if (*z).encodedSignedTxns.Lsig != nil && cap((*z).encodedSignedTxns.Lsig) >= zb0053 {
				(*z).encodedSignedTxns.Lsig = ((*z).encodedSignedTxns.Lsig)[:zb0053]
			} else {
				(*z).encodedSignedTxns.Lsig = make([]transactions.LogicSig, zb0053)
			}
			for zb0003 := range (*z).encodedSignedTxns.Lsig {
				bts, err = (*z).encodedSignedTxns.Lsig[zb0003].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Lsig", zb0003)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0055 []byte
				var zb0056 int
				zb0056, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLsig")
					return
				}
				if zb0056 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0056), uint64(maxBitmaskSize))
					return
				}
				zb0055, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.BitmaskLsig))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLsig")
					return
				}
				(*z).encodedSignedTxns.BitmaskLsig = bitmask(zb0055)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0057 int
			zb0057, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AuthAddr")
				return
			}
			if zb0057 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0057), uint64(maxAddressBytes))
				return
			}
			(*z).encodedSignedTxns.AuthAddr, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.AuthAddr)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AuthAddr")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0058 []byte
				var zb0059 int
				zb0059, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAuthAddr")
					return
				}
				if zb0059 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0059), uint64(maxBitmaskSize))
					return
				}
				zb0058, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.BitmaskAuthAddr))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAuthAddr")
					return
				}
				(*z).encodedSignedTxns.BitmaskAuthAddr = bitmask(zb0058)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0060 int
			zb0060, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TxType")
				return
			}
			if zb0060 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0060), uint64(maxEncodedTransactionGroup))
				return
			}
			(*z).encodedSignedTxns.encodedTxns.TxType, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.TxType)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TxType")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0061 []byte
				var zb0062 int
				zb0062, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskTxType")
					return
				}
				if zb0062 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0062), uint64(maxBitmaskSize))
					return
				}
				zb0061, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.BitmaskTxType))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskTxType")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.BitmaskTxType = bitmask(zb0061)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0063 int
			zb0063, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Sender")
				return
			}
			if zb0063 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0063), uint64(maxAddressBytes))
				return
			}
			(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Sender, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Sender)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Sender")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0064 []byte
				var zb0065 int
				zb0065, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskSender")
					return
				}
				if zb0065 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0065), uint64(maxBitmaskSize))
					return
				}
				zb0064, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskSender))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskSender")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskSender = bitmask(zb0064)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0066 int
			var zb0067 bool
			zb0066, zb0067, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Fee")
				return
			}
			if zb0066 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0066), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Fee")
				return
			}
			if zb0067 {
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee) >= zb0066 {
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee = ((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee)[:zb0066]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee = make([]basics.MicroAlgos, zb0066)
			}
			for zb0004 := range (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee {
				bts, err = (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee[zb0004].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Fee", zb0004)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0068 []byte
				var zb0069 int
				zb0069, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFee")
					return
				}
				if zb0069 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0069), uint64(maxBitmaskSize))
					return
				}
				zb0068, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskFee))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFee")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskFee = bitmask(zb0068)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0070 int
			var zb0071 bool
			zb0070, zb0071, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FirstValid")
				return
			}
			if zb0070 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0070), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "FirstValid")
				return
			}
			if zb0071 {
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid) >= zb0070 {
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid = ((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid)[:zb0070]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid = make([]basics.Round, zb0070)
			}
			for zb0005 := range (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid {
				bts, err = (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid[zb0005].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "FirstValid", zb0005)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0072 []byte
				var zb0073 int
				zb0073, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFirstValid")
					return
				}
				if zb0073 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0073), uint64(maxBitmaskSize))
					return
				}
				zb0072, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskFirstValid))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFirstValid")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskFirstValid = bitmask(zb0072)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0074 int
			var zb0075 bool
			zb0074, zb0075, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LastValid")
				return
			}
			if zb0074 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0074), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "LastValid")
				return
			}
			if zb0075 {
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid) >= zb0074 {
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid = ((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid)[:zb0074]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid = make([]basics.Round, zb0074)
			}
			for zb0006 := range (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid {
				bts, err = (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid[zb0006].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "LastValid", zb0006)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0076 []byte
				var zb0077 int
				zb0077, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLastValid")
					return
				}
				if zb0077 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0077), uint64(maxBitmaskSize))
					return
				}
				zb0076, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskLastValid))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLastValid")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskLastValid = bitmask(zb0076)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0078 int
			var zb0079 bool
			zb0078, zb0079, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Note")
				return
			}
			if zb0078 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0078), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Note")
				return
			}
			if zb0079 {
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note) >= zb0078 {
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note = ((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note)[:zb0078]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note = make([][]byte, zb0078)
			}
			for zb0007 := range (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note {
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note[zb0007], bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note[zb0007])
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Note", zb0007)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0080 []byte
				var zb0081 int
				zb0081, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskNote")
					return
				}
				if zb0081 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0081), uint64(maxBitmaskSize))
					return
				}
				zb0080, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskNote))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskNote")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskNote = bitmask(zb0080)
			}
		}
		if zb0041 > 0 {
			zb0041--
			(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.GenesisID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GenesisID")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0082 []byte
				var zb0083 int
				zb0083, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGenesisID")
					return
				}
				if zb0083 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0083), uint64(maxBitmaskSize))
					return
				}
				zb0082, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGenesisID))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGenesisID")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGenesisID = bitmask(zb0082)
			}
		}
		if zb0041 > 0 {
			zb0041--
			bts, err = (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.GenesisHash.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GenesisHash")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0084 []byte
				var zb0085 int
				zb0085, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGenesisHash")
					return
				}
				if zb0085 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0085), uint64(maxBitmaskSize))
					return
				}
				zb0084, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGenesisHash))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGenesisHash")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGenesisHash = bitmask(zb0084)
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0086 []byte
				var zb0087 int
				zb0087, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGroup")
					return
				}
				if zb0087 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0087), uint64(maxBitmaskSize))
					return
				}
				zb0086, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGroup))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGroup")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGroup = bitmask(zb0086)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0088 int
			zb0088, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Lease")
				return
			}
			if zb0088 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0088), uint64(maxAddressBytes))
				return
			}
			(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Lease, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Lease)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Lease")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0089 []byte
				var zb0090 int
				zb0090, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLease")
					return
				}
				if zb0090 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0090), uint64(maxBitmaskSize))
					return
				}
				zb0089, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskLease))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLease")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskLease = bitmask(zb0089)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0091 int
			zb0091, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RekeyTo")
				return
			}
			if zb0091 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0091), uint64(maxAddressBytes))
				return
			}
			(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.RekeyTo, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.RekeyTo)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RekeyTo")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0092 []byte
				var zb0093 int
				zb0093, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskRekeyTo")
					return
				}
				if zb0093 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0093), uint64(maxBitmaskSize))
					return
				}
				zb0092, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskRekeyTo))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskRekeyTo")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskRekeyTo = bitmask(zb0092)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0094 int
			zb0094, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VotePK")
				return
			}
			if zb0094 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0094), uint64(maxAddressBytes))
				return
			}
			(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VotePK, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VotePK)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VotePK")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0095 []byte
				var zb0096 int
				zb0096, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVotePK")
					return
				}
				if zb0096 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0096), uint64(maxBitmaskSize))
					return
				}
				zb0095, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVotePK))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVotePK")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVotePK = bitmask(zb0095)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0097 int
			zb0097, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SelectionPK")
				return
			}
			if zb0097 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0097), uint64(maxAddressBytes))
				return
			}
			(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.SelectionPK, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.SelectionPK)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SelectionPK")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0098 []byte
				var zb0099 int
				zb0099, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskSelectionPK")
					return
				}
				if zb0099 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0099), uint64(maxBitmaskSize))
					return
				}
				zb0098, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskSelectionPK))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskSelectionPK")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskSelectionPK = bitmask(zb0098)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0100 int
			var zb0101 bool
			zb0100, zb0101, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteFirst")
				return
			}
			if zb0100 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0100), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "VoteFirst")
				return
			}
			if zb0101 {
				(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst) >= zb0100 {
				(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst = ((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst)[:zb0100]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst = make([]basics.Round, zb0100)
			}
			for zb0008 := range (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst {
				bts, err = (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst[zb0008].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "VoteFirst", zb0008)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0102 []byte
				var zb0103 int
				zb0103, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteFirst")
					return
				}
				if zb0103 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0103), uint64(maxBitmaskSize))
					return
				}
				zb0102, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteFirst))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteFirst")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteFirst = bitmask(zb0102)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0104 int
			var zb0105 bool
			zb0104, zb0105, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteLast")
				return
			}
			if zb0104 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0104), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "VoteLast")
				return
			}
			if zb0105 {
				(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast) >= zb0104 {
				(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast = ((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast)[:zb0104]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast = make([]basics.Round, zb0104)
			}
			for zb0009 := range (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast {
				bts, err = (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast[zb0009].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "VoteLast", zb0009)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0106 []byte
				var zb0107 int
				zb0107, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteLast")
					return
				}
				if zb0107 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0107), uint64(maxBitmaskSize))
					return
				}
				zb0106, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteLast))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteLast")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteLast = bitmask(zb0106)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0108 int
			var zb0109 bool
			zb0108, zb0109, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteKeyDilution")
				return
			}
			if zb0108 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0108), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "VoteKeyDilution")
				return
			}
			if zb0109 {
				(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution) >= zb0108 {
				(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution = ((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution)[:zb0108]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution = make([]uint64, zb0108)
			}
			for zb0010 := range (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution {
				(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution[zb0010], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "VoteKeyDilution", zb0010)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0110 []byte
				var zb0111 int
				zb0111, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteKeyDilution")
					return
				}
				if zb0111 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0111), uint64(maxBitmaskSize))
					return
				}
				zb0110, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteKeyDilution))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskVoteKeyDilution")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteKeyDilution = bitmask(zb0110)
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0112 []byte
				var zb0113 int
				zb0113, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskNonparticipation")
					return
				}
				if zb0113 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0113), uint64(maxBitmaskSize))
					return
				}
				zb0112, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskNonparticipation))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskNonparticipation")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskNonparticipation = bitmask(zb0112)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0114 int
			zb0114, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Receiver")
				return
			}
			if zb0114 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0114), uint64(maxAddressBytes))
				return
			}
			(*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Receiver, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Receiver)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Receiver")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0115 []byte
				var zb0116 int
				zb0116, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskReceiver")
					return
				}
				if zb0116 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0116), uint64(maxBitmaskSize))
					return
				}
				zb0115, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskReceiver))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskReceiver")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskReceiver = bitmask(zb0115)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0117 int
			var zb0118 bool
			zb0117, zb0118, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Amount")
				return
			}
			if zb0117 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0117), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Amount")
				return
			}
			if zb0118 {
				(*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount) >= zb0117 {
				(*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount = ((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount)[:zb0117]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount = make([]basics.MicroAlgos, zb0117)
			}
			for zb0011 := range (*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount {
				bts, err = (*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount[zb0011].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Amount", zb0011)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0119 []byte
				var zb0120 int
				zb0120, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAmount")
					return
				}
				if zb0120 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0120), uint64(maxBitmaskSize))
					return
				}
				zb0119, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskAmount))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAmount")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskAmount = bitmask(zb0119)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0121 int
			zb0121, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CloseRemainderTo")
				return
			}
			if zb0121 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0121), uint64(maxAddressBytes))
				return
			}
			(*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.CloseRemainderTo, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.CloseRemainderTo)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CloseRemainderTo")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0122 []byte
				var zb0123 int
				zb0123, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCloseRemainderTo")
					return
				}
				if zb0123 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0123), uint64(maxBitmaskSize))
					return
				}
				zb0122, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskCloseRemainderTo))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCloseRemainderTo")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskCloseRemainderTo = bitmask(zb0122)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0124 int
			var zb0125 bool
			zb0124, zb0125, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ConfigAsset")
				return
			}
			if zb0124 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0124), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ConfigAsset")
				return
			}
			if zb0125 {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset) >= zb0124 {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset = ((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset)[:zb0124]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset = make([]basics.AssetIndex, zb0124)
			}
			for zb0012 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset {
				bts, err = (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset[zb0012].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ConfigAsset", zb0012)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0126 []byte
				var zb0127 int
				zb0127, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskConfigAsset")
					return
				}
				if zb0127 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0127), uint64(maxBitmaskSize))
					return
				}
				zb0126, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.BitmaskConfigAsset))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskConfigAsset")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.BitmaskConfigAsset = bitmask(zb0126)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0128 int
			var zb0129 bool
			zb0128, zb0129, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Total")
				return
			}
			if zb0128 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0128), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Total")
				return
			}
			if zb0129 {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total) >= zb0128 {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total = ((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total)[:zb0128]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total = make([]uint64, zb0128)
			}
			for zb0013 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total[zb0013], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Total", zb0013)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0130 []byte
				var zb0131 int
				zb0131, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskTotal")
					return
				}
				if zb0131 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0131), uint64(maxBitmaskSize))
					return
				}
				zb0130, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskTotal")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal = bitmask(zb0130)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0132 int
			var zb0133 bool
			zb0132, zb0133, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Decimals")
				return
			}
			if zb0132 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0132), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Decimals")
				return
			}
			if zb0133 {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals) >= zb0132 {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals = ((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals)[:zb0132]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals = make([]uint32, zb0132)
			}
			for zb0014 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals[zb0014], bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Decimals", zb0014)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0134 []byte
				var zb0135 int
				zb0135, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskDecimals")
					return
				}
				if zb0135 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0135), uint64(maxBitmaskSize))
					return
				}
				zb0134, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskDecimals")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals = bitmask(zb0134)
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0136 []byte
				var zb0137 int
				zb0137, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskDefaultFrozen")
					return
				}
				if zb0137 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0137), uint64(maxBitmaskSize))
					return
				}
				zb0136, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskDefaultFrozen")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen = bitmask(zb0136)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0138 int
			var zb0139 bool
			zb0138, zb0139, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "UnitName")
				return
			}
			if zb0138 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0138), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "UnitName")
				return
			}
			if zb0139 {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName) >= zb0138 {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName = ((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName)[:zb0138]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName = make([]string, zb0138)
			}
			for zb0015 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName[zb0015], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "UnitName", zb0015)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0140 []byte
				var zb0141 int
				zb0141, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskUnitName")
					return
				}
				if zb0141 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0141), uint64(maxBitmaskSize))
					return
				}
				zb0140, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskUnitName")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName = bitmask(zb0140)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0142 int
			var zb0143 bool
			zb0142, zb0143, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetName")
				return
			}
			if zb0142 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0142), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "AssetName")
				return
			}
			if zb0143 {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName) >= zb0142 {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName = ((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName)[:zb0142]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName = make([]string, zb0142)
			}
			for zb0016 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName[zb0016], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AssetName", zb0016)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0144 []byte
				var zb0145 int
				zb0145, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetName")
					return
				}
				if zb0145 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0145), uint64(maxBitmaskSize))
					return
				}
				zb0144, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetName")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName = bitmask(zb0144)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0146 int
			var zb0147 bool
			zb0146, zb0147, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "URL")
				return
			}
			if zb0146 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0146), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "URL")
				return
			}
			if zb0147 {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL) >= zb0146 {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL = ((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL)[:zb0146]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL = make([]string, zb0146)
			}
			for zb0017 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL[zb0017], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "URL", zb0017)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0148 []byte
				var zb0149 int
				zb0149, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskURL")
					return
				}
				if zb0149 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0149), uint64(maxBitmaskSize))
					return
				}
				zb0148, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskURL")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL = bitmask(zb0148)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0150 int
			zb0150, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MetadataHash")
				return
			}
			if zb0150 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0150), uint64(maxAddressBytes))
				return
			}
			(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "MetadataHash")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0151 []byte
				var zb0152 int
				zb0152, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskMetadataHash")
					return
				}
				if zb0152 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0152), uint64(maxBitmaskSize))
					return
				}
				zb0151, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskMetadataHash")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash = bitmask(zb0151)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0153 int
			zb0153, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Manager")
				return
			}
			if zb0153 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0153), uint64(maxAddressBytes))
				return
			}
			(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Manager, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Manager)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Manager")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0154 []byte
				var zb0155 int
				zb0155, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskManager")
					return
				}
				if zb0155 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0155), uint64(maxBitmaskSize))
					return
				}
				zb0154, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskManager")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager = bitmask(zb0154)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0156 int
			zb0156, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Reserve")
				return
			}
			if zb0156 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0156), uint64(maxAddressBytes))
				return
			}
			(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Reserve, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Reserve)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Reserve")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0157 []byte
				var zb0158 int
				zb0158, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskReserve")
					return
				}
				if zb0158 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0158), uint64(maxBitmaskSize))
					return
				}
				zb0157, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskReserve")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve = bitmask(zb0157)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0159 int
			zb0159, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Freeze")
				return
			}
			if zb0159 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0159), uint64(maxAddressBytes))
				return
			}
			(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Freeze, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Freeze)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Freeze")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0160 []byte
				var zb0161 int
				zb0161, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreeze")
					return
				}
				if zb0161 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0161), uint64(maxBitmaskSize))
					return
				}
				zb0160, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreeze")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze = bitmask(zb0160)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0162 int
			zb0162, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Clawback")
				return
			}
			if zb0162 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0162), uint64(maxAddressBytes))
				return
			}
			(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Clawback, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Clawback)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Clawback")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0163 []byte
				var zb0164 int
				zb0164, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskClawback")
					return
				}
				if zb0164 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0164), uint64(maxBitmaskSize))
					return
				}
				zb0163, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskClawback")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback = bitmask(zb0163)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0165 int
			var zb0166 bool
			zb0165, zb0166, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "XferAsset")
				return
			}
			if zb0165 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0165), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "XferAsset")
				return
			}
			if zb0166 {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset) >= zb0165 {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset = ((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset)[:zb0165]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset = make([]basics.AssetIndex, zb0165)
			}
			for zb0018 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset {
				bts, err = (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset[zb0018].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "XferAsset", zb0018)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0167 []byte
				var zb0168 int
				zb0168, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskXferAsset")
					return
				}
				if zb0168 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0168), uint64(maxBitmaskSize))
					return
				}
				zb0167, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskXferAsset))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskXferAsset")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskXferAsset = bitmask(zb0167)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0169 int
			var zb0170 bool
			zb0169, zb0170, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetAmount")
				return
			}
			if zb0169 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0169), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "AssetAmount")
				return
			}
			if zb0170 {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount) >= zb0169 {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount = ((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount)[:zb0169]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount = make([]uint64, zb0169)
			}
			for zb0019 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount[zb0019], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "AssetAmount", zb0019)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0171 []byte
				var zb0172 int
				zb0172, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetAmount")
					return
				}
				if zb0172 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0172), uint64(maxBitmaskSize))
					return
				}
				zb0171, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetAmount))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetAmount")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetAmount = bitmask(zb0171)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0173 int
			zb0173, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetSender")
				return
			}
			if zb0173 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0173), uint64(maxAddressBytes))
				return
			}
			(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetSender, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetSender)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetSender")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0174 []byte
				var zb0175 int
				zb0175, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetSender")
					return
				}
				if zb0175 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0175), uint64(maxBitmaskSize))
					return
				}
				zb0174, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetSender))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetSender")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetSender = bitmask(zb0174)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0176 int
			zb0176, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetReceiver")
				return
			}
			if zb0176 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0176), uint64(maxAddressBytes))
				return
			}
			(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetReceiver, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetReceiver)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetReceiver")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0177 []byte
				var zb0178 int
				zb0178, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetReceiver")
					return
				}
				if zb0178 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0178), uint64(maxBitmaskSize))
					return
				}
				zb0177, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetReceiver))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetReceiver")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetReceiver = bitmask(zb0177)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0179 int
			zb0179, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetCloseTo")
				return
			}
			if zb0179 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0179), uint64(maxAddressBytes))
				return
			}
			(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetCloseTo, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetCloseTo)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetCloseTo")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0180 []byte
				var zb0181 int
				zb0181, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetCloseTo")
					return
				}
				if zb0181 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0181), uint64(maxBitmaskSize))
					return
				}
				zb0180, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetCloseTo))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetCloseTo")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetCloseTo = bitmask(zb0180)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0182 int
			zb0182, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FreezeAccount")
				return
			}
			if zb0182 > maxAddressBytes {
				err = msgp.ErrOverflow(uint64(zb0182), uint64(maxAddressBytes))
				return
			}
			(*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAccount, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAccount)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FreezeAccount")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0183 []byte
				var zb0184 int
				zb0184, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreezeAccount")
					return
				}
				if zb0184 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0184), uint64(maxBitmaskSize))
					return
				}
				zb0183, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAccount))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreezeAccount")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAccount = bitmask(zb0183)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0185 int
			var zb0186 bool
			zb0185, zb0186, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FreezeAsset")
				return
			}
			if zb0185 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0185), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "FreezeAsset")
				return
			}
			if zb0186 {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset) >= zb0185 {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset = ((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset)[:zb0185]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset = make([]basics.AssetIndex, zb0185)
			}
			for zb0020 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset {
				bts, err = (*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset[zb0020].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "FreezeAsset", zb0020)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0187 []byte
				var zb0188 int
				zb0188, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreezeAsset")
					return
				}
				if zb0188 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0188), uint64(maxBitmaskSize))
					return
				}
				zb0187, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAsset))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskFreezeAsset")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAsset = bitmask(zb0187)
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0189 []byte
				var zb0190 int
				zb0190, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetFrozen")
					return
				}
				if zb0190 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0190), uint64(maxBitmaskSize))
					return
				}
				zb0189, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskAssetFrozen))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAssetFrozen")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskAssetFrozen = bitmask(zb0189)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0191 int
			var zb0192 bool
			zb0191, zb0192, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApplicationID")
				return
			}
			if zb0191 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0191), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ApplicationID")
				return
			}
			if zb0192 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID) >= zb0191 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID)[:zb0191]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID = make([]basics.AppIndex, zb0191)
			}
			for zb0021 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID {
				bts, err = (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID[zb0021].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ApplicationID", zb0021)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0193 []byte
				var zb0194 int
				zb0194, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApplicationID")
					return
				}
				if zb0194 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0194), uint64(maxBitmaskSize))
					return
				}
				zb0193, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationID))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApplicationID")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationID = bitmask(zb0193)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0195 int
			zb0195, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "OnCompletion")
				return
			}
			if zb0195 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0195), uint64(maxEncodedTransactionGroup))
				return
			}
			(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.OnCompletion, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.OnCompletion)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "OnCompletion")
				return
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0196 []byte
				var zb0197 int
				zb0197, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskOnCompletion")
					return
				}
				if zb0197 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0197), uint64(maxBitmaskSize))
					return
				}
				zb0196, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskOnCompletion))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskOnCompletion")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskOnCompletion = bitmask(zb0196)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0198 int
			var zb0199 bool
			zb0198, zb0199, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs")
				return
			}
			if zb0198 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0198), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs")
				return
			}
			if zb0199 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs) >= zb0198 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs)[:zb0198]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs = make([]applicationArgs, zb0198)
			}
			for zb0022 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs {
				var zb0200 int
				var zb0201 bool
				zb0200, zb0201, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs", zb0022)
					return
				}
				if zb0200 > transactions.EncodedMaxApplicationArgs {
					err = msgp.ErrOverflow(uint64(zb0200), uint64(transactions.EncodedMaxApplicationArgs))
					err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs", zb0022)
					return
				}
				if zb0201 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022] = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022] != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022]) >= zb0200 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022] = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022])[:zb0200]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022] = make(applicationArgs, zb0200)
				}
				for zb0023 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022] {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022][zb0023], bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022][zb0023])
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs", zb0022, zb0023)
						return
					}
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0202 []byte
				var zb0203 int
				zb0203, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApplicationArgs")
					return
				}
				if zb0203 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0203), uint64(maxBitmaskSize))
					return
				}
				zb0202, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationArgs))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApplicationArgs")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationArgs = bitmask(zb0202)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0204 int
			var zb0205 bool
			zb0204, zb0205, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Accounts")
				return
			}
			if zb0204 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0204), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Accounts")
				return
			}
			if zb0205 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts) >= zb0204 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts)[:zb0204]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts = make([]addresses, zb0204)
			}
			for zb0024 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts {
				var zb0206 int
				var zb0207 bool
				zb0206, zb0207, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Accounts", zb0024)
					return
				}
				if zb0206 > transactions.EncodedMaxAccounts {
					err = msgp.ErrOverflow(uint64(zb0206), uint64(transactions.EncodedMaxAccounts))
					err = msgp.WrapError(err, "struct-from-array", "Accounts", zb0024)
					return
				}
				if zb0207 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024] = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024] != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024]) >= zb0206 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024] = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024])[:zb0206]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024] = make(addresses, zb0206)
				}
				for zb0025 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024] {
					bts, err = (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024][zb0025].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "Accounts", zb0024, zb0025)
						return
					}
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0208 []byte
				var zb0209 int
				zb0209, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAccounts")
					return
				}
				if zb0209 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0209), uint64(maxBitmaskSize))
					return
				}
				zb0208, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskAccounts))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskAccounts")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskAccounts = bitmask(zb0208)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0210 int
			var zb0211 bool
			zb0210, zb0211, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ForeignApps")
				return
			}
			if zb0210 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0210), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ForeignApps")
				return
			}
			if zb0211 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps) >= zb0210 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps)[:zb0210]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps = make([]appIndices, zb0210)
			}
			for zb0026 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps {
				var zb0212 int
				var zb0213 bool
				zb0212, zb0213, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ForeignApps", zb0026)
					return
				}
				if zb0212 > transactions.EncodedMaxForeignApps {
					err = msgp.ErrOverflow(uint64(zb0212), uint64(transactions.EncodedMaxForeignApps))
					err = msgp.WrapError(err, "struct-from-array", "ForeignApps", zb0026)
					return
				}
				if zb0213 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026] = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026] != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026]) >= zb0212 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026] = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026])[:zb0212]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026] = make(appIndices, zb0212)
				}
				for zb0027 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026] {
					bts, err = (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026][zb0027].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ForeignApps", zb0026, zb0027)
						return
					}
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0214 []byte
				var zb0215 int
				zb0215, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskForeignApps")
					return
				}
				if zb0215 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0215), uint64(maxBitmaskSize))
					return
				}
				zb0214, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignApps))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskForeignApps")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignApps = bitmask(zb0214)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0216 int
			var zb0217 bool
			zb0216, zb0217, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ForeignAssets")
				return
			}
			if zb0216 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0216), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ForeignAssets")
				return
			}
			if zb0217 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets) >= zb0216 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets)[:zb0216]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets = make([]assetIndices, zb0216)
			}
			for zb0028 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets {
				var zb0218 int
				var zb0219 bool
				zb0218, zb0219, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ForeignAssets", zb0028)
					return
				}
				if zb0218 > transactions.EncodedMaxForeignAssets {
					err = msgp.ErrOverflow(uint64(zb0218), uint64(transactions.EncodedMaxForeignAssets))
					err = msgp.WrapError(err, "struct-from-array", "ForeignAssets", zb0028)
					return
				}
				if zb0219 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028] = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028] != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028]) >= zb0218 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028] = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028])[:zb0218]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028] = make(assetIndices, zb0218)
				}
				for zb0029 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028] {
					bts, err = (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028][zb0029].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ForeignAssets", zb0028, zb0029)
						return
					}
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0220 []byte
				var zb0221 int
				zb0221, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskForeignAssets")
					return
				}
				if zb0221 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0221), uint64(maxBitmaskSize))
					return
				}
				zb0220, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignAssets))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskForeignAssets")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignAssets = bitmask(zb0220)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0222 int
			var zb0223 bool
			zb0222, zb0223, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LocalNumUint")
				return
			}
			if zb0222 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0222), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "LocalNumUint")
				return
			}
			if zb0223 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint) >= zb0222 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint)[:zb0222]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint = make([]uint64, zb0222)
			}
			for zb0030 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint[zb0030], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "LocalNumUint", zb0030)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0224 []byte
				var zb0225 int
				zb0225, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLocalNumUint")
					return
				}
				if zb0225 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0225), uint64(maxBitmaskSize))
					return
				}
				zb0224, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumUint))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLocalNumUint")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumUint = bitmask(zb0224)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0226 int
			var zb0227 bool
			zb0226, zb0227, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LocalNumByteSlice")
				return
			}
			if zb0226 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0226), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "LocalNumByteSlice")
				return
			}
			if zb0227 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice) >= zb0226 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice)[:zb0226]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice = make([]uint64, zb0226)
			}
			for zb0031 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice[zb0031], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "LocalNumByteSlice", zb0031)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0228 []byte
				var zb0229 int
				zb0229, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLocalNumByteSlice")
					return
				}
				if zb0229 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0229), uint64(maxBitmaskSize))
					return
				}
				zb0228, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskLocalNumByteSlice")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice = bitmask(zb0228)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0230 int
			var zb0231 bool
			zb0230, zb0231, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GlobalNumUint")
				return
			}
			if zb0230 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0230), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "GlobalNumUint")
				return
			}
			if zb0231 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint) >= zb0230 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint)[:zb0230]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint = make([]uint64, zb0230)
			}
			for zb0032 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint[zb0032], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "GlobalNumUint", zb0032)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0232 []byte
				var zb0233 int
				zb0233, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGlobalNumUint")
					return
				}
				if zb0233 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0233), uint64(maxBitmaskSize))
					return
				}
				zb0232, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumUint))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGlobalNumUint")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumUint = bitmask(zb0232)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0234 int
			var zb0235 bool
			zb0234, zb0235, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GlobalNumByteSlice")
				return
			}
			if zb0234 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0234), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "GlobalNumByteSlice")
				return
			}
			if zb0235 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice) >= zb0234 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice)[:zb0234]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice = make([]uint64, zb0234)
			}
			for zb0033 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice[zb0033], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "GlobalNumByteSlice", zb0033)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0236 []byte
				var zb0237 int
				zb0237, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGlobalNumByteSlice")
					return
				}
				if zb0237 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0237), uint64(maxBitmaskSize))
					return
				}
				zb0236, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskGlobalNumByteSlice")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice = bitmask(zb0236)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0238 int
			var zb0239 bool
			zb0238, zb0239, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram")
				return
			}
			if zb0238 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0238), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram")
				return
			}
			if zb0239 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram) >= zb0238 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram)[:zb0238]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram = make([]program, zb0238)
			}
			for zb0034 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram {
				{
					var zb0240 []byte
					var zb0241 int
					zb0241, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram", zb0034)
						return
					}
					if zb0241 > config.MaxAppProgramLen {
						err = msgp.ErrOverflow(uint64(zb0241), uint64(config.MaxAppProgramLen))
						return
					}
					zb0240, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram[zb0034]))
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram", zb0034)
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram[zb0034] = program(zb0240)
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0242 []byte
				var zb0243 int
				zb0243, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApprovalProgram")
					return
				}
				if zb0243 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0243), uint64(maxBitmaskSize))
					return
				}
				zb0242, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApprovalProgram))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskApprovalProgram")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApprovalProgram = bitmask(zb0242)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0244 int
			var zb0245 bool
			zb0244, zb0245, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram")
				return
			}
			if zb0244 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0244), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram")
				return
			}
			if zb0245 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram) >= zb0244 {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram)[:zb0244]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram = make([]program, zb0244)
			}
			for zb0035 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram {
				{
					var zb0246 []byte
					var zb0247 int
					zb0247, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram", zb0035)
						return
					}
					if zb0247 > config.MaxAppProgramLen {
						err = msgp.ErrOverflow(uint64(zb0247), uint64(config.MaxAppProgramLen))
						return
					}
					zb0246, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram[zb0035]))
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram", zb0035)
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram[zb0035] = program(zb0246)
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0248 []byte
				var zb0249 int
				zb0249, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskClearStateProgram")
					return
				}
				if zb0249 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0249), uint64(maxBitmaskSize))
					return
				}
				zb0248, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskClearStateProgram))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskClearStateProgram")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskClearStateProgram = bitmask(zb0248)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0250 int
			var zb0251 bool
			zb0250, zb0251, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CertRound")
				return
			}
			if zb0250 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0250), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "CertRound")
				return
			}
			if zb0251 {
				(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound) >= zb0250 {
				(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound = ((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound)[:zb0250]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound = make([]basics.Round, zb0250)
			}
			for zb0036 := range (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound {
				bts, err = (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound[zb0036].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "CertRound", zb0036)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0252 []byte
				var zb0253 int
				zb0253, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCertRound")
					return
				}
				if zb0253 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0253), uint64(maxBitmaskSize))
					return
				}
				zb0252, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCertRound))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCertRound")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCertRound = bitmask(zb0252)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0254 int
			var zb0255 bool
			zb0254, zb0255, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CertType")
				return
			}
			if zb0254 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0254), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "CertType")
				return
			}
			if zb0255 {
				(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType) >= zb0254 {
				(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType = ((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType)[:zb0254]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType = make([]protocol.CompactCertType, zb0254)
			}
			for zb0037 := range (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType {
				bts, err = (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType[zb0037].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "CertType", zb0037)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0256 []byte
				var zb0257 int
				zb0257, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCertType")
					return
				}
				if zb0257 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0257), uint64(maxBitmaskSize))
					return
				}
				zb0256, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCertType))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCertType")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCertType = bitmask(zb0256)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0258 int
			var zb0259 bool
			zb0258, zb0259, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Cert")
				return
			}
			if zb0258 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0258), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "Cert")
				return
			}
			if zb0259 {
				(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert = nil
			} else if (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert) >= zb0258 {
				(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert = ((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert)[:zb0258]
			} else {
				(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert = make([]compactcert.Cert, zb0258)
			}
			for zb0038 := range (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert {
				bts, err = (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert[zb0038].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Cert", zb0038)
					return
				}
			}
		}
		if zb0041 > 0 {
			zb0041--
			{
				var zb0260 []byte
				var zb0261 int
				zb0261, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCert")
					return
				}
				if zb0261 > maxBitmaskSize {
					err = msgp.ErrOverflow(uint64(zb0261), uint64(maxBitmaskSize))
					return
				}
				zb0260, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCert))
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "BitmaskCert")
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCert = bitmask(zb0260)
			}
		}
		if zb0041 > 0 {
			zb0041--
			var zb0262 int
			var zb0263 bool
			zb0262, zb0263, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TxnGroups")
				return
			}
			if zb0262 > maxEncodedTransactionGroup {
				err = msgp.ErrOverflow(uint64(zb0262), uint64(maxEncodedTransactionGroup))
				err = msgp.WrapError(err, "struct-from-array", "TxnGroups")
				return
			}
			if zb0263 {
				(*z).TxnGroups = nil
			} else if (*z).TxnGroups != nil && cap((*z).TxnGroups) >= zb0262 {
				(*z).TxnGroups = ((*z).TxnGroups)[:zb0262]
			} else {
				(*z).TxnGroups = make([]txnGroups, zb0262)
			}
			for zb0039 := range (*z).TxnGroups {
				var zb0264 int
				var zb0265 bool
				zb0264, zb0265, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "TxnGroups", zb0039)
					return
				}
				if zb0264 > maxEncodedTransactionGroupEntries {
					err = msgp.ErrOverflow(uint64(zb0264), uint64(maxEncodedTransactionGroupEntries))
					err = msgp.WrapError(err, "struct-from-array", "TxnGroups", zb0039)
					return
				}
				if zb0265 {
					(*z).TxnGroups[zb0039] = nil
				} else if (*z).TxnGroups[zb0039] != nil && cap((*z).TxnGroups[zb0039]) >= zb0264 {
					(*z).TxnGroups[zb0039] = ((*z).TxnGroups[zb0039])[:zb0264]
				} else {
					(*z).TxnGroups[zb0039] = make(txnGroups, zb0264)
				}
				for zb0040 := range (*z).TxnGroups[zb0039] {
					bts, err = (*z).TxnGroups[zb0039][zb0040].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "TxnGroups", zb0039, zb0040)
						return
					}
				}
			}
		}
		if zb0041 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0041)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0042 {
			(*z) = txGroupsEncodingStub{}
		}
		for zb0041 > 0 {
			zb0041--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "ttc":
				(*z).TotalTransactionsCount, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalTransactionsCount")
					return
				}
			case "tgc":
				(*z).TransactionGroupCount, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TransactionGroupCount")
					return
				}
			case "tgs":
				var zb0266 int
				zb0266, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "TransactionGroupSizes")
					return
				}
				if zb0266 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0266), uint64(maxEncodedTransactionGroup))
					return
				}
				(*z).TransactionGroupSizes, bts, err = msgp.ReadBytesBytes(bts, (*z).TransactionGroupSizes)
				if err != nil {
					err = msgp.WrapError(err, "TransactionGroupSizes")
					return
				}
			case "st":
				var zb0267 int
				var zb0268 bool
				zb0267, zb0268, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SignedTxns")
					return
				}
				if zb0267 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0267), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "SignedTxns")
					return
				}
				if zb0268 {
					(*z).SignedTxns = nil
				} else if (*z).SignedTxns != nil && cap((*z).SignedTxns) >= zb0267 {
					(*z).SignedTxns = ((*z).SignedTxns)[:zb0267]
				} else {
					(*z).SignedTxns = make([]transactions.SignedTxn, zb0267)
				}
				for zb0001 := range (*z).SignedTxns {
					bts, err = (*z).SignedTxns[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "SignedTxns", zb0001)
						return
					}
				}
			case "sig":
				var zb0269 int
				zb0269, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sig")
					return
				}
				if zb0269 > maxSignatureBytes {
					err = msgp.ErrOverflow(uint64(zb0269), uint64(maxSignatureBytes))
					return
				}
				(*z).encodedSignedTxns.Sig, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.Sig)
				if err != nil {
					err = msgp.WrapError(err, "Sig")
					return
				}
			case "sigbm":
				{
					var zb0270 []byte
					var zb0271 int
					zb0271, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskSig")
						return
					}
					if zb0271 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0271), uint64(maxBitmaskSize))
						return
					}
					zb0270, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.BitmaskSig))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskSig")
						return
					}
					(*z).encodedSignedTxns.BitmaskSig = bitmask(zb0270)
				}
			case "msig":
				var zb0272 int
				var zb0273 bool
				zb0272, zb0273, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Msig")
					return
				}
				if zb0272 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0272), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Msig")
					return
				}
				if zb0273 {
					(*z).encodedSignedTxns.Msig = nil
				} else if (*z).encodedSignedTxns.Msig != nil && cap((*z).encodedSignedTxns.Msig) >= zb0272 {
					(*z).encodedSignedTxns.Msig = ((*z).encodedSignedTxns.Msig)[:zb0272]
				} else {
					(*z).encodedSignedTxns.Msig = make([]crypto.MultisigSig, zb0272)
				}
				for zb0002 := range (*z).encodedSignedTxns.Msig {
					bts, err = (*z).encodedSignedTxns.Msig[zb0002].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Msig", zb0002)
						return
					}
				}
			case "msigbm":
				{
					var zb0274 []byte
					var zb0275 int
					zb0275, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskMsig")
						return
					}
					if zb0275 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0275), uint64(maxBitmaskSize))
						return
					}
					zb0274, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.BitmaskMsig))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskMsig")
						return
					}
					(*z).encodedSignedTxns.BitmaskMsig = bitmask(zb0274)
				}
			case "lsig":
				var zb0276 int
				var zb0277 bool
				zb0276, zb0277, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Lsig")
					return
				}
				if zb0276 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0276), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Lsig")
					return
				}
				if zb0277 {
					(*z).encodedSignedTxns.Lsig = nil
				} else if (*z).encodedSignedTxns.Lsig != nil && cap((*z).encodedSignedTxns.Lsig) >= zb0276 {
					(*z).encodedSignedTxns.Lsig = ((*z).encodedSignedTxns.Lsig)[:zb0276]
				} else {
					(*z).encodedSignedTxns.Lsig = make([]transactions.LogicSig, zb0276)
				}
				for zb0003 := range (*z).encodedSignedTxns.Lsig {
					bts, err = (*z).encodedSignedTxns.Lsig[zb0003].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Lsig", zb0003)
						return
					}
				}
			case "lsigbm":
				{
					var zb0278 []byte
					var zb0279 int
					zb0279, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLsig")
						return
					}
					if zb0279 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0279), uint64(maxBitmaskSize))
						return
					}
					zb0278, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.BitmaskLsig))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLsig")
						return
					}
					(*z).encodedSignedTxns.BitmaskLsig = bitmask(zb0278)
				}
			case "sgnr":
				var zb0280 int
				zb0280, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "AuthAddr")
					return
				}
				if zb0280 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0280), uint64(maxAddressBytes))
					return
				}
				(*z).encodedSignedTxns.AuthAddr, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.AuthAddr)
				if err != nil {
					err = msgp.WrapError(err, "AuthAddr")
					return
				}
			case "sgnrbm":
				{
					var zb0281 []byte
					var zb0282 int
					zb0282, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAuthAddr")
						return
					}
					if zb0282 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0282), uint64(maxBitmaskSize))
						return
					}
					zb0281, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.BitmaskAuthAddr))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAuthAddr")
						return
					}
					(*z).encodedSignedTxns.BitmaskAuthAddr = bitmask(zb0281)
				}
			case "type":
				var zb0283 int
				zb0283, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "TxType")
					return
				}
				if zb0283 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0283), uint64(maxEncodedTransactionGroup))
					return
				}
				(*z).encodedSignedTxns.encodedTxns.TxType, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.TxType)
				if err != nil {
					err = msgp.WrapError(err, "TxType")
					return
				}
			case "typebm":
				{
					var zb0284 []byte
					var zb0285 int
					zb0285, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskTxType")
						return
					}
					if zb0285 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0285), uint64(maxBitmaskSize))
						return
					}
					zb0284, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.BitmaskTxType))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskTxType")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.BitmaskTxType = bitmask(zb0284)
				}
			case "snd":
				var zb0286 int
				zb0286, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sender")
					return
				}
				if zb0286 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0286), uint64(maxAddressBytes))
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Sender, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Sender)
				if err != nil {
					err = msgp.WrapError(err, "Sender")
					return
				}
			case "sndbm":
				{
					var zb0287 []byte
					var zb0288 int
					zb0288, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskSender")
						return
					}
					if zb0288 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0288), uint64(maxBitmaskSize))
						return
					}
					zb0287, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskSender))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskSender")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskSender = bitmask(zb0287)
				}
			case "fee":
				var zb0289 int
				var zb0290 bool
				zb0289, zb0290, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Fee")
					return
				}
				if zb0289 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0289), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Fee")
					return
				}
				if zb0290 {
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee) >= zb0289 {
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee = ((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee)[:zb0289]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee = make([]basics.MicroAlgos, zb0289)
				}
				for zb0004 := range (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee {
					bts, err = (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee[zb0004].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Fee", zb0004)
						return
					}
				}
			case "feebm":
				{
					var zb0291 []byte
					var zb0292 int
					zb0292, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFee")
						return
					}
					if zb0292 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0292), uint64(maxBitmaskSize))
						return
					}
					zb0291, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskFee))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFee")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskFee = bitmask(zb0291)
				}
			case "fv":
				var zb0293 int
				var zb0294 bool
				zb0293, zb0294, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "FirstValid")
					return
				}
				if zb0293 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0293), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "FirstValid")
					return
				}
				if zb0294 {
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid) >= zb0293 {
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid = ((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid)[:zb0293]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid = make([]basics.Round, zb0293)
				}
				for zb0005 := range (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid {
					bts, err = (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid[zb0005].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "FirstValid", zb0005)
						return
					}
				}
			case "fvbm":
				{
					var zb0295 []byte
					var zb0296 int
					zb0296, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFirstValid")
						return
					}
					if zb0296 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0296), uint64(maxBitmaskSize))
						return
					}
					zb0295, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskFirstValid))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFirstValid")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskFirstValid = bitmask(zb0295)
				}
			case "lv":
				var zb0297 int
				var zb0298 bool
				zb0297, zb0298, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LastValid")
					return
				}
				if zb0297 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0297), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "LastValid")
					return
				}
				if zb0298 {
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid) >= zb0297 {
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid = ((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid)[:zb0297]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid = make([]basics.Round, zb0297)
				}
				for zb0006 := range (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid {
					bts, err = (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid[zb0006].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "LastValid", zb0006)
						return
					}
				}
			case "lvbm":
				{
					var zb0299 []byte
					var zb0300 int
					zb0300, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLastValid")
						return
					}
					if zb0300 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0300), uint64(maxBitmaskSize))
						return
					}
					zb0299, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskLastValid))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLastValid")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskLastValid = bitmask(zb0299)
				}
			case "note":
				var zb0301 int
				var zb0302 bool
				zb0301, zb0302, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Note")
					return
				}
				if zb0301 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0301), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Note")
					return
				}
				if zb0302 {
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note) >= zb0301 {
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note = ((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note)[:zb0301]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note = make([][]byte, zb0301)
				}
				for zb0007 := range (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note {
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note[zb0007], bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note[zb0007])
					if err != nil {
						err = msgp.WrapError(err, "Note", zb0007)
						return
					}
				}
			case "notebm":
				{
					var zb0303 []byte
					var zb0304 int
					zb0304, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskNote")
						return
					}
					if zb0304 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0304), uint64(maxBitmaskSize))
						return
					}
					zb0303, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskNote))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskNote")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskNote = bitmask(zb0303)
				}
			case "gen":
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.GenesisID, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "GenesisID")
					return
				}
			case "genbm":
				{
					var zb0305 []byte
					var zb0306 int
					zb0306, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGenesisID")
						return
					}
					if zb0306 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0306), uint64(maxBitmaskSize))
						return
					}
					zb0305, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGenesisID))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGenesisID")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGenesisID = bitmask(zb0305)
				}
			case "gh":
				bts, err = (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.GenesisHash.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "GenesisHash")
					return
				}
			case "ghbm":
				{
					var zb0307 []byte
					var zb0308 int
					zb0308, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGenesisHash")
						return
					}
					if zb0308 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0308), uint64(maxBitmaskSize))
						return
					}
					zb0307, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGenesisHash))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGenesisHash")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGenesisHash = bitmask(zb0307)
				}
			case "grpbm":
				{
					var zb0309 []byte
					var zb0310 int
					zb0310, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGroup")
						return
					}
					if zb0310 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0310), uint64(maxBitmaskSize))
						return
					}
					zb0309, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGroup))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGroup")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGroup = bitmask(zb0309)
				}
			case "lx":
				var zb0311 int
				zb0311, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Lease")
					return
				}
				if zb0311 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0311), uint64(maxAddressBytes))
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Lease, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Lease)
				if err != nil {
					err = msgp.WrapError(err, "Lease")
					return
				}
			case "lxbm":
				{
					var zb0312 []byte
					var zb0313 int
					zb0313, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLease")
						return
					}
					if zb0313 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0313), uint64(maxBitmaskSize))
						return
					}
					zb0312, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskLease))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLease")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskLease = bitmask(zb0312)
				}
			case "rekey":
				var zb0314 int
				zb0314, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "RekeyTo")
					return
				}
				if zb0314 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0314), uint64(maxAddressBytes))
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.RekeyTo, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.RekeyTo)
				if err != nil {
					err = msgp.WrapError(err, "RekeyTo")
					return
				}
			case "rekeybm":
				{
					var zb0315 []byte
					var zb0316 int
					zb0316, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskRekeyTo")
						return
					}
					if zb0316 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0316), uint64(maxBitmaskSize))
						return
					}
					zb0315, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskRekeyTo))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskRekeyTo")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskRekeyTo = bitmask(zb0315)
				}
			case "votekey":
				var zb0317 int
				zb0317, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "VotePK")
					return
				}
				if zb0317 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0317), uint64(maxAddressBytes))
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VotePK, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VotePK)
				if err != nil {
					err = msgp.WrapError(err, "VotePK")
					return
				}
			case "votekeybm":
				{
					var zb0318 []byte
					var zb0319 int
					zb0319, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVotePK")
						return
					}
					if zb0319 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0319), uint64(maxBitmaskSize))
						return
					}
					zb0318, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVotePK))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVotePK")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVotePK = bitmask(zb0318)
				}
			case "selkey":
				var zb0320 int
				zb0320, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "SelectionPK")
					return
				}
				if zb0320 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0320), uint64(maxAddressBytes))
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.SelectionPK, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.SelectionPK)
				if err != nil {
					err = msgp.WrapError(err, "SelectionPK")
					return
				}
			case "selkeybm":
				{
					var zb0321 []byte
					var zb0322 int
					zb0322, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskSelectionPK")
						return
					}
					if zb0322 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0322), uint64(maxBitmaskSize))
						return
					}
					zb0321, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskSelectionPK))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskSelectionPK")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskSelectionPK = bitmask(zb0321)
				}
			case "votefst":
				var zb0323 int
				var zb0324 bool
				zb0323, zb0324, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteFirst")
					return
				}
				if zb0323 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0323), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "VoteFirst")
					return
				}
				if zb0324 {
					(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst) >= zb0323 {
					(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst = ((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst)[:zb0323]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst = make([]basics.Round, zb0323)
				}
				for zb0008 := range (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst {
					bts, err = (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst[zb0008].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "VoteFirst", zb0008)
						return
					}
				}
			case "votefstbm":
				{
					var zb0325 []byte
					var zb0326 int
					zb0326, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteFirst")
						return
					}
					if zb0326 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0326), uint64(maxBitmaskSize))
						return
					}
					zb0325, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteFirst))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteFirst")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteFirst = bitmask(zb0325)
				}
			case "votelst":
				var zb0327 int
				var zb0328 bool
				zb0327, zb0328, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteLast")
					return
				}
				if zb0327 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0327), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "VoteLast")
					return
				}
				if zb0328 {
					(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast) >= zb0327 {
					(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast = ((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast)[:zb0327]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast = make([]basics.Round, zb0327)
				}
				for zb0009 := range (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast {
					bts, err = (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast[zb0009].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "VoteLast", zb0009)
						return
					}
				}
			case "votelstbm":
				{
					var zb0329 []byte
					var zb0330 int
					zb0330, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteLast")
						return
					}
					if zb0330 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0330), uint64(maxBitmaskSize))
						return
					}
					zb0329, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteLast))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteLast")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteLast = bitmask(zb0329)
				}
			case "votekd":
				var zb0331 int
				var zb0332 bool
				zb0331, zb0332, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteKeyDilution")
					return
				}
				if zb0331 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0331), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "VoteKeyDilution")
					return
				}
				if zb0332 {
					(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution) >= zb0331 {
					(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution = ((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution)[:zb0331]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution = make([]uint64, zb0331)
				}
				for zb0010 := range (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution {
					(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution[zb0010], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "VoteKeyDilution", zb0010)
						return
					}
				}
			case "votekdbm":
				{
					var zb0333 []byte
					var zb0334 int
					zb0334, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteKeyDilution")
						return
					}
					if zb0334 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0334), uint64(maxBitmaskSize))
						return
					}
					zb0333, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteKeyDilution))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskVoteKeyDilution")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteKeyDilution = bitmask(zb0333)
				}
			case "nonpartbm":
				{
					var zb0335 []byte
					var zb0336 int
					zb0336, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskNonparticipation")
						return
					}
					if zb0336 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0336), uint64(maxBitmaskSize))
						return
					}
					zb0335, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskNonparticipation))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskNonparticipation")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskNonparticipation = bitmask(zb0335)
				}
			case "rcv":
				var zb0337 int
				zb0337, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Receiver")
					return
				}
				if zb0337 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0337), uint64(maxAddressBytes))
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Receiver, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Receiver)
				if err != nil {
					err = msgp.WrapError(err, "Receiver")
					return
				}
			case "rcvbm":
				{
					var zb0338 []byte
					var zb0339 int
					zb0339, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskReceiver")
						return
					}
					if zb0339 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0339), uint64(maxBitmaskSize))
						return
					}
					zb0338, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskReceiver))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskReceiver")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskReceiver = bitmask(zb0338)
				}
			case "amt":
				var zb0340 int
				var zb0341 bool
				zb0340, zb0341, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Amount")
					return
				}
				if zb0340 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0340), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Amount")
					return
				}
				if zb0341 {
					(*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount) >= zb0340 {
					(*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount = ((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount)[:zb0340]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount = make([]basics.MicroAlgos, zb0340)
				}
				for zb0011 := range (*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount {
					bts, err = (*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount[zb0011].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Amount", zb0011)
						return
					}
				}
			case "amtbm":
				{
					var zb0342 []byte
					var zb0343 int
					zb0343, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAmount")
						return
					}
					if zb0343 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0343), uint64(maxBitmaskSize))
						return
					}
					zb0342, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskAmount))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAmount")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskAmount = bitmask(zb0342)
				}
			case "close":
				var zb0344 int
				zb0344, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "CloseRemainderTo")
					return
				}
				if zb0344 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0344), uint64(maxAddressBytes))
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.CloseRemainderTo, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.CloseRemainderTo)
				if err != nil {
					err = msgp.WrapError(err, "CloseRemainderTo")
					return
				}
			case "closebm":
				{
					var zb0345 []byte
					var zb0346 int
					zb0346, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCloseRemainderTo")
						return
					}
					if zb0346 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0346), uint64(maxBitmaskSize))
						return
					}
					zb0345, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskCloseRemainderTo))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCloseRemainderTo")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskCloseRemainderTo = bitmask(zb0345)
				}
			case "caid":
				var zb0347 int
				var zb0348 bool
				zb0347, zb0348, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ConfigAsset")
					return
				}
				if zb0347 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0347), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ConfigAsset")
					return
				}
				if zb0348 {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset) >= zb0347 {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset = ((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset)[:zb0347]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset = make([]basics.AssetIndex, zb0347)
				}
				for zb0012 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset {
					bts, err = (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset[zb0012].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "ConfigAsset", zb0012)
						return
					}
				}
			case "caidbm":
				{
					var zb0349 []byte
					var zb0350 int
					zb0350, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskConfigAsset")
						return
					}
					if zb0350 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0350), uint64(maxBitmaskSize))
						return
					}
					zb0349, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.BitmaskConfigAsset))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskConfigAsset")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.BitmaskConfigAsset = bitmask(zb0349)
				}
			case "t":
				var zb0351 int
				var zb0352 bool
				zb0351, zb0352, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Total")
					return
				}
				if zb0351 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0351), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Total")
					return
				}
				if zb0352 {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total) >= zb0351 {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total = ((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total)[:zb0351]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total = make([]uint64, zb0351)
				}
				for zb0013 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total[zb0013], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Total", zb0013)
						return
					}
				}
			case "tbm":
				{
					var zb0353 []byte
					var zb0354 int
					zb0354, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskTotal")
						return
					}
					if zb0354 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0354), uint64(maxBitmaskSize))
						return
					}
					zb0353, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskTotal")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal = bitmask(zb0353)
				}
			case "dc":
				var zb0355 int
				var zb0356 bool
				zb0355, zb0356, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Decimals")
					return
				}
				if zb0355 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0355), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Decimals")
					return
				}
				if zb0356 {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals) >= zb0355 {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals = ((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals)[:zb0355]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals = make([]uint32, zb0355)
				}
				for zb0014 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals[zb0014], bts, err = msgp.ReadUint32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Decimals", zb0014)
						return
					}
				}
			case "dcbm":
				{
					var zb0357 []byte
					var zb0358 int
					zb0358, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskDecimals")
						return
					}
					if zb0358 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0358), uint64(maxBitmaskSize))
						return
					}
					zb0357, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskDecimals")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals = bitmask(zb0357)
				}
			case "dfbm":
				{
					var zb0359 []byte
					var zb0360 int
					zb0360, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskDefaultFrozen")
						return
					}
					if zb0360 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0360), uint64(maxBitmaskSize))
						return
					}
					zb0359, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskDefaultFrozen")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen = bitmask(zb0359)
				}
			case "un":
				var zb0361 int
				var zb0362 bool
				zb0361, zb0362, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "UnitName")
					return
				}
				if zb0361 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0361), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "UnitName")
					return
				}
				if zb0362 {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName) >= zb0361 {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName = ((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName)[:zb0361]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName = make([]string, zb0361)
				}
				for zb0015 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName[zb0015], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "UnitName", zb0015)
						return
					}
				}
			case "unbm":
				{
					var zb0363 []byte
					var zb0364 int
					zb0364, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskUnitName")
						return
					}
					if zb0364 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0364), uint64(maxBitmaskSize))
						return
					}
					zb0363, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskUnitName")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName = bitmask(zb0363)
				}
			case "an":
				var zb0365 int
				var zb0366 bool
				zb0365, zb0366, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetName")
					return
				}
				if zb0365 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0365), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "AssetName")
					return
				}
				if zb0366 {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName) >= zb0365 {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName = ((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName)[:zb0365]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName = make([]string, zb0365)
				}
				for zb0016 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName[zb0016], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "AssetName", zb0016)
						return
					}
				}
			case "anbm":
				{
					var zb0367 []byte
					var zb0368 int
					zb0368, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetName")
						return
					}
					if zb0368 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0368), uint64(maxBitmaskSize))
						return
					}
					zb0367, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetName")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName = bitmask(zb0367)
				}
			case "au":
				var zb0369 int
				var zb0370 bool
				zb0369, zb0370, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "URL")
					return
				}
				if zb0369 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0369), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "URL")
					return
				}
				if zb0370 {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL) >= zb0369 {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL = ((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL)[:zb0369]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL = make([]string, zb0369)
				}
				for zb0017 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL[zb0017], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "URL", zb0017)
						return
					}
				}
			case "aubm":
				{
					var zb0371 []byte
					var zb0372 int
					zb0372, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskURL")
						return
					}
					if zb0372 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0372), uint64(maxBitmaskSize))
						return
					}
					zb0371, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskURL")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL = bitmask(zb0371)
				}
			case "am":
				var zb0373 int
				zb0373, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "MetadataHash")
					return
				}
				if zb0373 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0373), uint64(maxAddressBytes))
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash)
				if err != nil {
					err = msgp.WrapError(err, "MetadataHash")
					return
				}
			case "ambm":
				{
					var zb0374 []byte
					var zb0375 int
					zb0375, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskMetadataHash")
						return
					}
					if zb0375 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0375), uint64(maxBitmaskSize))
						return
					}
					zb0374, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskMetadataHash")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash = bitmask(zb0374)
				}
			case "m":
				var zb0376 int
				zb0376, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Manager")
					return
				}
				if zb0376 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0376), uint64(maxAddressBytes))
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Manager, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Manager)
				if err != nil {
					err = msgp.WrapError(err, "Manager")
					return
				}
			case "mbm":
				{
					var zb0377 []byte
					var zb0378 int
					zb0378, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskManager")
						return
					}
					if zb0378 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0378), uint64(maxBitmaskSize))
						return
					}
					zb0377, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskManager")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager = bitmask(zb0377)
				}
			case "r":
				var zb0379 int
				zb0379, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Reserve")
					return
				}
				if zb0379 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0379), uint64(maxAddressBytes))
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Reserve, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Reserve)
				if err != nil {
					err = msgp.WrapError(err, "Reserve")
					return
				}
			case "rbm":
				{
					var zb0380 []byte
					var zb0381 int
					zb0381, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskReserve")
						return
					}
					if zb0381 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0381), uint64(maxBitmaskSize))
						return
					}
					zb0380, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskReserve")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve = bitmask(zb0380)
				}
			case "f":
				var zb0382 int
				zb0382, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Freeze")
					return
				}
				if zb0382 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0382), uint64(maxAddressBytes))
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Freeze, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Freeze)
				if err != nil {
					err = msgp.WrapError(err, "Freeze")
					return
				}
			case "fbm":
				{
					var zb0383 []byte
					var zb0384 int
					zb0384, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreeze")
						return
					}
					if zb0384 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0384), uint64(maxBitmaskSize))
						return
					}
					zb0383, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreeze")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze = bitmask(zb0383)
				}
			case "c":
				var zb0385 int
				zb0385, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Clawback")
					return
				}
				if zb0385 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0385), uint64(maxAddressBytes))
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Clawback, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Clawback)
				if err != nil {
					err = msgp.WrapError(err, "Clawback")
					return
				}
			case "cbm":
				{
					var zb0386 []byte
					var zb0387 int
					zb0387, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskClawback")
						return
					}
					if zb0387 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0387), uint64(maxBitmaskSize))
						return
					}
					zb0386, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskClawback")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback = bitmask(zb0386)
				}
			case "xaid":
				var zb0388 int
				var zb0389 bool
				zb0388, zb0389, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XferAsset")
					return
				}
				if zb0388 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0388), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "XferAsset")
					return
				}
				if zb0389 {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset) >= zb0388 {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset = ((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset)[:zb0388]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset = make([]basics.AssetIndex, zb0388)
				}
				for zb0018 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset {
					bts, err = (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset[zb0018].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "XferAsset", zb0018)
						return
					}
				}
			case "xaidbm":
				{
					var zb0390 []byte
					var zb0391 int
					zb0391, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskXferAsset")
						return
					}
					if zb0391 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0391), uint64(maxBitmaskSize))
						return
					}
					zb0390, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskXferAsset))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskXferAsset")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskXferAsset = bitmask(zb0390)
				}
			case "aamt":
				var zb0392 int
				var zb0393 bool
				zb0392, zb0393, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetAmount")
					return
				}
				if zb0392 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0392), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "AssetAmount")
					return
				}
				if zb0393 {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount) >= zb0392 {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount = ((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount)[:zb0392]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount = make([]uint64, zb0392)
				}
				for zb0019 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount[zb0019], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "AssetAmount", zb0019)
						return
					}
				}
			case "aamtbm":
				{
					var zb0394 []byte
					var zb0395 int
					zb0395, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetAmount")
						return
					}
					if zb0395 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0395), uint64(maxBitmaskSize))
						return
					}
					zb0394, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetAmount))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetAmount")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetAmount = bitmask(zb0394)
				}
			case "asnd":
				var zb0396 int
				zb0396, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetSender")
					return
				}
				if zb0396 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0396), uint64(maxAddressBytes))
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetSender, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetSender)
				if err != nil {
					err = msgp.WrapError(err, "AssetSender")
					return
				}
			case "asndbm":
				{
					var zb0397 []byte
					var zb0398 int
					zb0398, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetSender")
						return
					}
					if zb0398 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0398), uint64(maxBitmaskSize))
						return
					}
					zb0397, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetSender))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetSender")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetSender = bitmask(zb0397)
				}
			case "arcv":
				var zb0399 int
				zb0399, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetReceiver")
					return
				}
				if zb0399 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0399), uint64(maxAddressBytes))
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetReceiver, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetReceiver)
				if err != nil {
					err = msgp.WrapError(err, "AssetReceiver")
					return
				}
			case "arcvbm":
				{
					var zb0400 []byte
					var zb0401 int
					zb0401, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetReceiver")
						return
					}
					if zb0401 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0401), uint64(maxBitmaskSize))
						return
					}
					zb0400, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetReceiver))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetReceiver")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetReceiver = bitmask(zb0400)
				}
			case "aclose":
				var zb0402 int
				zb0402, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetCloseTo")
					return
				}
				if zb0402 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0402), uint64(maxAddressBytes))
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetCloseTo, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetCloseTo)
				if err != nil {
					err = msgp.WrapError(err, "AssetCloseTo")
					return
				}
			case "aclosebm":
				{
					var zb0403 []byte
					var zb0404 int
					zb0404, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetCloseTo")
						return
					}
					if zb0404 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0404), uint64(maxBitmaskSize))
						return
					}
					zb0403, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetCloseTo))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetCloseTo")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetCloseTo = bitmask(zb0403)
				}
			case "fadd":
				var zb0405 int
				zb0405, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "FreezeAccount")
					return
				}
				if zb0405 > maxAddressBytes {
					err = msgp.ErrOverflow(uint64(zb0405), uint64(maxAddressBytes))
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAccount, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAccount)
				if err != nil {
					err = msgp.WrapError(err, "FreezeAccount")
					return
				}
			case "faddbm":
				{
					var zb0406 []byte
					var zb0407 int
					zb0407, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreezeAccount")
						return
					}
					if zb0407 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0407), uint64(maxBitmaskSize))
						return
					}
					zb0406, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAccount))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreezeAccount")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAccount = bitmask(zb0406)
				}
			case "faid":
				var zb0408 int
				var zb0409 bool
				zb0408, zb0409, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "FreezeAsset")
					return
				}
				if zb0408 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0408), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "FreezeAsset")
					return
				}
				if zb0409 {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset) >= zb0408 {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset = ((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset)[:zb0408]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset = make([]basics.AssetIndex, zb0408)
				}
				for zb0020 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset {
					bts, err = (*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset[zb0020].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "FreezeAsset", zb0020)
						return
					}
				}
			case "faidbm":
				{
					var zb0410 []byte
					var zb0411 int
					zb0411, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreezeAsset")
						return
					}
					if zb0411 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0411), uint64(maxBitmaskSize))
						return
					}
					zb0410, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAsset))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskFreezeAsset")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAsset = bitmask(zb0410)
				}
			case "afrzbm":
				{
					var zb0412 []byte
					var zb0413 int
					zb0413, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetFrozen")
						return
					}
					if zb0413 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0413), uint64(maxBitmaskSize))
						return
					}
					zb0412, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskAssetFrozen))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAssetFrozen")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskAssetFrozen = bitmask(zb0412)
				}
			case "apid":
				var zb0414 int
				var zb0415 bool
				zb0414, zb0415, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApplicationID")
					return
				}
				if zb0414 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0414), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ApplicationID")
					return
				}
				if zb0415 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID) >= zb0414 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID)[:zb0414]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID = make([]basics.AppIndex, zb0414)
				}
				for zb0021 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID {
					bts, err = (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID[zb0021].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "ApplicationID", zb0021)
						return
					}
				}
			case "apidbm":
				{
					var zb0416 []byte
					var zb0417 int
					zb0417, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApplicationID")
						return
					}
					if zb0417 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0417), uint64(maxBitmaskSize))
						return
					}
					zb0416, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationID))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApplicationID")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationID = bitmask(zb0416)
				}
			case "apan":
				var zb0418 int
				zb0418, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "OnCompletion")
					return
				}
				if zb0418 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0418), uint64(maxEncodedTransactionGroup))
					return
				}
				(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.OnCompletion, bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.OnCompletion)
				if err != nil {
					err = msgp.WrapError(err, "OnCompletion")
					return
				}
			case "apanbm":
				{
					var zb0419 []byte
					var zb0420 int
					zb0420, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskOnCompletion")
						return
					}
					if zb0420 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0420), uint64(maxBitmaskSize))
						return
					}
					zb0419, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskOnCompletion))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskOnCompletion")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskOnCompletion = bitmask(zb0419)
				}
			case "apaa":
				var zb0421 int
				var zb0422 bool
				zb0421, zb0422, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApplicationArgs")
					return
				}
				if zb0421 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0421), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ApplicationArgs")
					return
				}
				if zb0422 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs) >= zb0421 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs)[:zb0421]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs = make([]applicationArgs, zb0421)
				}
				for zb0022 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs {
					var zb0423 int
					var zb0424 bool
					zb0423, zb0424, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ApplicationArgs", zb0022)
						return
					}
					if zb0423 > transactions.EncodedMaxApplicationArgs {
						err = msgp.ErrOverflow(uint64(zb0423), uint64(transactions.EncodedMaxApplicationArgs))
						err = msgp.WrapError(err, "ApplicationArgs", zb0022)
						return
					}
					if zb0424 {
						(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022] = nil
					} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022] != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022]) >= zb0423 {
						(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022] = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022])[:zb0423]
					} else {
						(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022] = make(applicationArgs, zb0423)
					}
					for zb0023 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022] {
						(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022][zb0023], bts, err = msgp.ReadBytesBytes(bts, (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022][zb0023])
						if err != nil {
							err = msgp.WrapError(err, "ApplicationArgs", zb0022, zb0023)
							return
						}
					}
				}
			case "apaabm":
				{
					var zb0425 []byte
					var zb0426 int
					zb0426, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApplicationArgs")
						return
					}
					if zb0426 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0426), uint64(maxBitmaskSize))
						return
					}
					zb0425, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationArgs))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApplicationArgs")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationArgs = bitmask(zb0425)
				}
			case "apat":
				var zb0427 int
				var zb0428 bool
				zb0427, zb0428, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Accounts")
					return
				}
				if zb0427 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0427), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Accounts")
					return
				}
				if zb0428 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts) >= zb0427 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts)[:zb0427]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts = make([]addresses, zb0427)
				}
				for zb0024 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts {
					var zb0429 int
					var zb0430 bool
					zb0429, zb0430, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Accounts", zb0024)
						return
					}
					if zb0429 > transactions.EncodedMaxAccounts {
						err = msgp.ErrOverflow(uint64(zb0429), uint64(transactions.EncodedMaxAccounts))
						err = msgp.WrapError(err, "Accounts", zb0024)
						return
					}
					if zb0430 {
						(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024] = nil
					} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024] != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024]) >= zb0429 {
						(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024] = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024])[:zb0429]
					} else {
						(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024] = make(addresses, zb0429)
					}
					for zb0025 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024] {
						bts, err = (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024][zb0025].UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "Accounts", zb0024, zb0025)
							return
						}
					}
				}
			case "apatbm":
				{
					var zb0431 []byte
					var zb0432 int
					zb0432, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAccounts")
						return
					}
					if zb0432 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0432), uint64(maxBitmaskSize))
						return
					}
					zb0431, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskAccounts))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskAccounts")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskAccounts = bitmask(zb0431)
				}
			case "apfa":
				var zb0433 int
				var zb0434 bool
				zb0433, zb0434, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ForeignApps")
					return
				}
				if zb0433 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0433), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ForeignApps")
					return
				}
				if zb0434 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps) >= zb0433 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps)[:zb0433]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps = make([]appIndices, zb0433)
				}
				for zb0026 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps {
					var zb0435 int
					var zb0436 bool
					zb0435, zb0436, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ForeignApps", zb0026)
						return
					}
					if zb0435 > transactions.EncodedMaxForeignApps {
						err = msgp.ErrOverflow(uint64(zb0435), uint64(transactions.EncodedMaxForeignApps))
						err = msgp.WrapError(err, "ForeignApps", zb0026)
						return
					}
					if zb0436 {
						(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026] = nil
					} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026] != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026]) >= zb0435 {
						(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026] = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026])[:zb0435]
					} else {
						(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026] = make(appIndices, zb0435)
					}
					for zb0027 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026] {
						bts, err = (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026][zb0027].UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "ForeignApps", zb0026, zb0027)
							return
						}
					}
				}
			case "apfabm":
				{
					var zb0437 []byte
					var zb0438 int
					zb0438, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskForeignApps")
						return
					}
					if zb0438 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0438), uint64(maxBitmaskSize))
						return
					}
					zb0437, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignApps))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskForeignApps")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignApps = bitmask(zb0437)
				}
			case "apas":
				var zb0439 int
				var zb0440 bool
				zb0439, zb0440, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ForeignAssets")
					return
				}
				if zb0439 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0439), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ForeignAssets")
					return
				}
				if zb0440 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets) >= zb0439 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets)[:zb0439]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets = make([]assetIndices, zb0439)
				}
				for zb0028 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets {
					var zb0441 int
					var zb0442 bool
					zb0441, zb0442, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ForeignAssets", zb0028)
						return
					}
					if zb0441 > transactions.EncodedMaxForeignAssets {
						err = msgp.ErrOverflow(uint64(zb0441), uint64(transactions.EncodedMaxForeignAssets))
						err = msgp.WrapError(err, "ForeignAssets", zb0028)
						return
					}
					if zb0442 {
						(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028] = nil
					} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028] != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028]) >= zb0441 {
						(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028] = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028])[:zb0441]
					} else {
						(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028] = make(assetIndices, zb0441)
					}
					for zb0029 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028] {
						bts, err = (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028][zb0029].UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "ForeignAssets", zb0028, zb0029)
							return
						}
					}
				}
			case "apasbm":
				{
					var zb0443 []byte
					var zb0444 int
					zb0444, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskForeignAssets")
						return
					}
					if zb0444 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0444), uint64(maxBitmaskSize))
						return
					}
					zb0443, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignAssets))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskForeignAssets")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignAssets = bitmask(zb0443)
				}
			case "lnui":
				var zb0445 int
				var zb0446 bool
				zb0445, zb0446, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LocalNumUint")
					return
				}
				if zb0445 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0445), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "LocalNumUint")
					return
				}
				if zb0446 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint) >= zb0445 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint)[:zb0445]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint = make([]uint64, zb0445)
				}
				for zb0030 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint[zb0030], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "LocalNumUint", zb0030)
						return
					}
				}
			case "lnuibm":
				{
					var zb0447 []byte
					var zb0448 int
					zb0448, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLocalNumUint")
						return
					}
					if zb0448 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0448), uint64(maxBitmaskSize))
						return
					}
					zb0447, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumUint))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLocalNumUint")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumUint = bitmask(zb0447)
				}
			case "lnbs":
				var zb0449 int
				var zb0450 bool
				zb0449, zb0450, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LocalNumByteSlice")
					return
				}
				if zb0449 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0449), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "LocalNumByteSlice")
					return
				}
				if zb0450 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice) >= zb0449 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice)[:zb0449]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice = make([]uint64, zb0449)
				}
				for zb0031 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice[zb0031], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "LocalNumByteSlice", zb0031)
						return
					}
				}
			case "lnbsbm":
				{
					var zb0451 []byte
					var zb0452 int
					zb0452, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLocalNumByteSlice")
						return
					}
					if zb0452 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0452), uint64(maxBitmaskSize))
						return
					}
					zb0451, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskLocalNumByteSlice")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice = bitmask(zb0451)
				}
			case "gnui":
				var zb0453 int
				var zb0454 bool
				zb0453, zb0454, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "GlobalNumUint")
					return
				}
				if zb0453 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0453), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "GlobalNumUint")
					return
				}
				if zb0454 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint) >= zb0453 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint)[:zb0453]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint = make([]uint64, zb0453)
				}
				for zb0032 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint[zb0032], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "GlobalNumUint", zb0032)
						return
					}
				}
			case "gnuibm":
				{
					var zb0455 []byte
					var zb0456 int
					zb0456, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGlobalNumUint")
						return
					}
					if zb0456 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0456), uint64(maxBitmaskSize))
						return
					}
					zb0455, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumUint))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGlobalNumUint")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumUint = bitmask(zb0455)
				}
			case "gnbs":
				var zb0457 int
				var zb0458 bool
				zb0457, zb0458, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "GlobalNumByteSlice")
					return
				}
				if zb0457 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0457), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "GlobalNumByteSlice")
					return
				}
				if zb0458 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice) >= zb0457 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice)[:zb0457]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice = make([]uint64, zb0457)
				}
				for zb0033 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice[zb0033], bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "GlobalNumByteSlice", zb0033)
						return
					}
				}
			case "gnbsbm":
				{
					var zb0459 []byte
					var zb0460 int
					zb0460, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGlobalNumByteSlice")
						return
					}
					if zb0460 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0460), uint64(maxBitmaskSize))
						return
					}
					zb0459, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskGlobalNumByteSlice")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice = bitmask(zb0459)
				}
			case "apap":
				var zb0461 int
				var zb0462 bool
				zb0461, zb0462, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApprovalProgram")
					return
				}
				if zb0461 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0461), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ApprovalProgram")
					return
				}
				if zb0462 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram) >= zb0461 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram)[:zb0461]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram = make([]program, zb0461)
				}
				for zb0034 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram {
					{
						var zb0463 []byte
						var zb0464 int
						zb0464, err = msgp.ReadBytesBytesHeader(bts)
						if err != nil {
							err = msgp.WrapError(err, "ApprovalProgram", zb0034)
							return
						}
						if zb0464 > config.MaxAppProgramLen {
							err = msgp.ErrOverflow(uint64(zb0464), uint64(config.MaxAppProgramLen))
							return
						}
						zb0463, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram[zb0034]))
						if err != nil {
							err = msgp.WrapError(err, "ApprovalProgram", zb0034)
							return
						}
						(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram[zb0034] = program(zb0463)
					}
				}
			case "apapbm":
				{
					var zb0465 []byte
					var zb0466 int
					zb0466, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApprovalProgram")
						return
					}
					if zb0466 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0466), uint64(maxBitmaskSize))
						return
					}
					zb0465, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApprovalProgram))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskApprovalProgram")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApprovalProgram = bitmask(zb0465)
				}
			case "apsu":
				var zb0467 int
				var zb0468 bool
				zb0467, zb0468, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ClearStateProgram")
					return
				}
				if zb0467 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0467), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "ClearStateProgram")
					return
				}
				if zb0468 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram) >= zb0467 {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram = ((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram)[:zb0467]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram = make([]program, zb0467)
				}
				for zb0035 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram {
					{
						var zb0469 []byte
						var zb0470 int
						zb0470, err = msgp.ReadBytesBytesHeader(bts)
						if err != nil {
							err = msgp.WrapError(err, "ClearStateProgram", zb0035)
							return
						}
						if zb0470 > config.MaxAppProgramLen {
							err = msgp.ErrOverflow(uint64(zb0470), uint64(config.MaxAppProgramLen))
							return
						}
						zb0469, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram[zb0035]))
						if err != nil {
							err = msgp.WrapError(err, "ClearStateProgram", zb0035)
							return
						}
						(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram[zb0035] = program(zb0469)
					}
				}
			case "apsubm":
				{
					var zb0471 []byte
					var zb0472 int
					zb0472, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskClearStateProgram")
						return
					}
					if zb0472 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0472), uint64(maxBitmaskSize))
						return
					}
					zb0471, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskClearStateProgram))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskClearStateProgram")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskClearStateProgram = bitmask(zb0471)
				}
			case "certrnd":
				var zb0473 int
				var zb0474 bool
				zb0473, zb0474, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "CertRound")
					return
				}
				if zb0473 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0473), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "CertRound")
					return
				}
				if zb0474 {
					(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound) >= zb0473 {
					(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound = ((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound)[:zb0473]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound = make([]basics.Round, zb0473)
				}
				for zb0036 := range (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound {
					bts, err = (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound[zb0036].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "CertRound", zb0036)
						return
					}
				}
			case "certrndbm":
				{
					var zb0475 []byte
					var zb0476 int
					zb0476, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCertRound")
						return
					}
					if zb0476 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0476), uint64(maxBitmaskSize))
						return
					}
					zb0475, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCertRound))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCertRound")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCertRound = bitmask(zb0475)
				}
			case "certtype":
				var zb0477 int
				var zb0478 bool
				zb0477, zb0478, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "CertType")
					return
				}
				if zb0477 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0477), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "CertType")
					return
				}
				if zb0478 {
					(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType) >= zb0477 {
					(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType = ((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType)[:zb0477]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType = make([]protocol.CompactCertType, zb0477)
				}
				for zb0037 := range (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType {
					bts, err = (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType[zb0037].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "CertType", zb0037)
						return
					}
				}
			case "certtypebm":
				{
					var zb0479 []byte
					var zb0480 int
					zb0480, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCertType")
						return
					}
					if zb0480 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0480), uint64(maxBitmaskSize))
						return
					}
					zb0479, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCertType))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCertType")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCertType = bitmask(zb0479)
				}
			case "cert":
				var zb0481 int
				var zb0482 bool
				zb0481, zb0482, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cert")
					return
				}
				if zb0481 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0481), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "Cert")
					return
				}
				if zb0482 {
					(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert = nil
				} else if (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert != nil && cap((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert) >= zb0481 {
					(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert = ((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert)[:zb0481]
				} else {
					(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert = make([]compactcert.Cert, zb0481)
				}
				for zb0038 := range (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert {
					bts, err = (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert[zb0038].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Cert", zb0038)
						return
					}
				}
			case "certbm":
				{
					var zb0483 []byte
					var zb0484 int
					zb0484, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCert")
						return
					}
					if zb0484 > maxBitmaskSize {
						err = msgp.ErrOverflow(uint64(zb0484), uint64(maxBitmaskSize))
						return
					}
					zb0483, bts, err = msgp.ReadBytesBytes(bts, []byte((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCert))
					if err != nil {
						err = msgp.WrapError(err, "BitmaskCert")
						return
					}
					(*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCert = bitmask(zb0483)
				}
			case "txng":
				var zb0485 int
				var zb0486 bool
				zb0485, zb0486, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TxnGroups")
					return
				}
				if zb0485 > maxEncodedTransactionGroup {
					err = msgp.ErrOverflow(uint64(zb0485), uint64(maxEncodedTransactionGroup))
					err = msgp.WrapError(err, "TxnGroups")
					return
				}
				if zb0486 {
					(*z).TxnGroups = nil
				} else if (*z).TxnGroups != nil && cap((*z).TxnGroups) >= zb0485 {
					(*z).TxnGroups = ((*z).TxnGroups)[:zb0485]
				} else {
					(*z).TxnGroups = make([]txnGroups, zb0485)
				}
				for zb0039 := range (*z).TxnGroups {
					var zb0487 int
					var zb0488 bool
					zb0487, zb0488, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "TxnGroups", zb0039)
						return
					}
					if zb0487 > maxEncodedTransactionGroupEntries {
						err = msgp.ErrOverflow(uint64(zb0487), uint64(maxEncodedTransactionGroupEntries))
						err = msgp.WrapError(err, "TxnGroups", zb0039)
						return
					}
					if zb0488 {
						(*z).TxnGroups[zb0039] = nil
					} else if (*z).TxnGroups[zb0039] != nil && cap((*z).TxnGroups[zb0039]) >= zb0487 {
						(*z).TxnGroups[zb0039] = ((*z).TxnGroups[zb0039])[:zb0487]
					} else {
						(*z).TxnGroups[zb0039] = make(txnGroups, zb0487)
					}
					for zb0040 := range (*z).TxnGroups[zb0039] {
						bts, err = (*z).TxnGroups[zb0039][zb0040].UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "TxnGroups", zb0039, zb0040)
							return
						}
					}
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *txGroupsEncodingStub) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*txGroupsEncodingStub)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *txGroupsEncodingStub) Msgsize() (s int) {
	s = 3 + 4 + msgp.Uint64Size + 4 + msgp.Uint64Size + 4 + msgp.BytesPrefixSize + len((*z).TransactionGroupSizes) + 3 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).SignedTxns {
		s += (*z).SignedTxns[zb0001].Msgsize()
	}
	s += 4 + msgp.BytesPrefixSize + len((*z).encodedSignedTxns.Sig) + 6 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.BitmaskSig)) + 5 + msgp.ArrayHeaderSize
	for zb0002 := range (*z).encodedSignedTxns.Msig {
		s += (*z).encodedSignedTxns.Msig[zb0002].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.BitmaskMsig)) + 5 + msgp.ArrayHeaderSize
	for zb0003 := range (*z).encodedSignedTxns.Lsig {
		s += (*z).encodedSignedTxns.Lsig[zb0003].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.BitmaskLsig)) + 5 + msgp.BytesPrefixSize + len((*z).encodedSignedTxns.AuthAddr) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.BitmaskAuthAddr)) + 5 + msgp.BytesPrefixSize + len((*z).encodedSignedTxns.encodedTxns.TxType) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.BitmaskTxType)) + 4 + msgp.BytesPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Sender) + 6 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskSender)) + 4 + msgp.ArrayHeaderSize
	for zb0004 := range (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee {
		s += (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee[zb0004].Msgsize()
	}
	s += 6 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskFee)) + 3 + msgp.ArrayHeaderSize
	for zb0005 := range (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid {
		s += (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid[zb0005].Msgsize()
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskFirstValid)) + 3 + msgp.ArrayHeaderSize
	for zb0006 := range (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid {
		s += (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid[zb0006].Msgsize()
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskLastValid)) + 5 + msgp.ArrayHeaderSize
	for zb0007 := range (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note {
		s += msgp.BytesPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note[zb0007])
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskNote)) + 4 + msgp.StringPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.GenesisID) + 6 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGenesisID)) + 3 + (*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.GenesisHash.Msgsize() + 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGenesisHash)) + 6 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGroup)) + 3 + msgp.BytesPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Lease) + 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskLease)) + 6 + msgp.BytesPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.RekeyTo) + 8 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskRekeyTo)) + 8 + msgp.BytesPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VotePK) + 10 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVotePK)) + 7 + msgp.BytesPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.SelectionPK) + 9 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskSelectionPK)) + 8 + msgp.ArrayHeaderSize
	for zb0008 := range (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst {
		s += (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst[zb0008].Msgsize()
	}
	s += 10 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteFirst)) + 8 + msgp.ArrayHeaderSize
	for zb0009 := range (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast {
		s += (*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast[zb0009].Msgsize()
	}
	s += 10 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteLast)) + 7 + msgp.ArrayHeaderSize + (len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution) * (msgp.Uint64Size)) + 9 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteKeyDilution)) + 10 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskNonparticipation)) + 4 + msgp.BytesPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Receiver) + 6 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskReceiver)) + 4 + msgp.ArrayHeaderSize
	for zb0011 := range (*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount {
		s += (*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount[zb0011].Msgsize()
	}
	s += 6 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskAmount)) + 6 + msgp.BytesPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.CloseRemainderTo) + 8 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskCloseRemainderTo)) + 5 + msgp.ArrayHeaderSize
	for zb0012 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset {
		s += (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset[zb0012].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.BitmaskConfigAsset)) + 2 + msgp.ArrayHeaderSize + (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total) * (msgp.Uint64Size)) + 4 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal)) + 3 + msgp.ArrayHeaderSize + (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals) * (msgp.Uint32Size)) + 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals)) + 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen)) + 3 + msgp.ArrayHeaderSize
	for zb0015 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName {
		s += msgp.StringPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName[zb0015])
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName)) + 3 + msgp.ArrayHeaderSize
	for zb0016 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName {
		s += msgp.StringPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName[zb0016])
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName)) + 3 + msgp.ArrayHeaderSize
	for zb0017 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL {
		s += msgp.StringPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL[zb0017])
	}
	s += 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL)) + 3 + msgp.BytesPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash) + 5 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash)) + 2 + msgp.BytesPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Manager) + 4 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager)) + 2 + msgp.BytesPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Reserve) + 4 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve)) + 2 + msgp.BytesPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Freeze) + 4 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze)) + 2 + msgp.BytesPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Clawback) + 4 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback)) + 5 + msgp.ArrayHeaderSize
	for zb0018 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset {
		s += (*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset[zb0018].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskXferAsset)) + 5 + msgp.ArrayHeaderSize + (len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount) * (msgp.Uint64Size)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetAmount)) + 5 + msgp.BytesPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetSender) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetSender)) + 5 + msgp.BytesPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetReceiver) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetReceiver)) + 7 + msgp.BytesPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetCloseTo) + 9 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetCloseTo)) + 5 + msgp.BytesPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAccount) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAccount)) + 5 + msgp.ArrayHeaderSize
	for zb0020 := range (*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset {
		s += (*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset[zb0020].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAsset)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskAssetFrozen)) + 5 + msgp.ArrayHeaderSize
	for zb0021 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID {
		s += (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID[zb0021].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationID)) + 5 + msgp.BytesPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.OnCompletion) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskOnCompletion)) + 5 + msgp.ArrayHeaderSize
	for zb0022 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs {
		s += msgp.ArrayHeaderSize
		for zb0023 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022] {
			s += msgp.BytesPrefixSize + len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs[zb0022][zb0023])
		}
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationArgs)) + 5 + msgp.ArrayHeaderSize
	for zb0024 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts {
		s += msgp.ArrayHeaderSize
		for zb0025 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024] {
			s += (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts[zb0024][zb0025].Msgsize()
		}
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskAccounts)) + 5 + msgp.ArrayHeaderSize
	for zb0026 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps {
		s += msgp.ArrayHeaderSize
		for zb0027 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026] {
			s += (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps[zb0026][zb0027].Msgsize()
		}
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignApps)) + 5 + msgp.ArrayHeaderSize
	for zb0028 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets {
		s += msgp.ArrayHeaderSize
		for zb0029 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028] {
			s += (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets[zb0028][zb0029].Msgsize()
		}
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignAssets)) + 5 + msgp.ArrayHeaderSize + (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint) * (msgp.Uint64Size)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumUint)) + 5 + msgp.ArrayHeaderSize + (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice) * (msgp.Uint64Size)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice)) + 5 + msgp.ArrayHeaderSize + (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint) * (msgp.Uint64Size)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumUint)) + 5 + msgp.ArrayHeaderSize + (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice) * (msgp.Uint64Size)) + 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice)) + 5 + msgp.ArrayHeaderSize
	for zb0034 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram {
		s += msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram[zb0034]))
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApprovalProgram)) + 5 + msgp.ArrayHeaderSize
	for zb0035 := range (*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram {
		s += msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram[zb0035]))
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskClearStateProgram)) + 8 + msgp.ArrayHeaderSize
	for zb0036 := range (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound {
		s += (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound[zb0036].Msgsize()
	}
	s += 10 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCertRound)) + 9 + msgp.ArrayHeaderSize
	for zb0037 := range (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType {
		s += (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType[zb0037].Msgsize()
	}
	s += 11 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCertType)) + 5 + msgp.ArrayHeaderSize
	for zb0038 := range (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert {
		s += (*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert[zb0038].Msgsize()
	}
	s += 7 + msgp.BytesPrefixSize + len([]byte((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCert)) + 5 + msgp.ArrayHeaderSize
	for zb0039 := range (*z).TxnGroups {
		s += msgp.ArrayHeaderSize
		for zb0040 := range (*z).TxnGroups[zb0039] {
			s += (*z).TxnGroups[zb0039][zb0040].Msgsize()
		}
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z *txGroupsEncodingStub) MsgIsZero() bool {
	return ((*z).TotalTransactionsCount == 0) && ((*z).TransactionGroupCount == 0) && (len((*z).TransactionGroupSizes) == 0) && (len((*z).SignedTxns) == 0) && (len((*z).encodedSignedTxns.Sig) == 0) && (len((*z).encodedSignedTxns.BitmaskSig) == 0) && (len((*z).encodedSignedTxns.Msig) == 0) && (len((*z).encodedSignedTxns.BitmaskMsig) == 0) && (len((*z).encodedSignedTxns.Lsig) == 0) && (len((*z).encodedSignedTxns.BitmaskLsig) == 0) && (len((*z).encodedSignedTxns.AuthAddr) == 0) && (len((*z).encodedSignedTxns.BitmaskAuthAddr) == 0) && (len((*z).encodedSignedTxns.encodedTxns.TxType) == 0) && (len((*z).encodedSignedTxns.encodedTxns.BitmaskTxType) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Sender) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskSender) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Fee) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskFee) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.FirstValid) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskFirstValid) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.LastValid) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskLastValid) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Note) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskNote) == 0) && ((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.GenesisID == "") && (len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGenesisID) == 0) && ((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.GenesisHash.MsgIsZero()) && (len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGenesisHash) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskGroup) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.Lease) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskLease) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.RekeyTo) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedTxnHeaders.BitmaskRekeyTo) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VotePK) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVotePK) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.SelectionPK) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskSelectionPK) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteFirst) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteFirst) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteLast) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteLast) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.VoteKeyDilution) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskVoteKeyDilution) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedKeyregTxnFields.BitmaskNonparticipation) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Receiver) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskReceiver) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.Amount) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskAmount) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.CloseRemainderTo) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedPaymentTxnFields.BitmaskCloseRemainderTo) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.ConfigAsset) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.BitmaskConfigAsset) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Total) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskTotal) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Decimals) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDecimals) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskDefaultFrozen) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.UnitName) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskUnitName) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.AssetName) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskAssetName) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.URL) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskURL) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.MetadataHash) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskMetadataHash) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Manager) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskManager) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Reserve) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskReserve) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Freeze) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskFreeze) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.Clawback) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetConfigTxnFields.encodedAssetParams.BitmaskClawback) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.XferAsset) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskXferAsset) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetAmount) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetAmount) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetSender) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetSender) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetReceiver) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetReceiver) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.AssetCloseTo) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetTransferTxnFields.BitmaskAssetCloseTo) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAccount) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAccount) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.FreezeAsset) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskFreezeAsset) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedAssetFreezeTxnFields.BitmaskAssetFrozen) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationID) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationID) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.OnCompletion) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskOnCompletion) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApplicationArgs) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApplicationArgs) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.Accounts) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskAccounts) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignApps) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignApps) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ForeignAssets) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskForeignAssets) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumUint) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumUint) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.LocalNumByteSlice) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskLocalNumByteSlice) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumUint) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumUint) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.GlobalNumByteSlice) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskGlobalNumByteSlice) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ApprovalProgram) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskApprovalProgram) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.ClearStateProgram) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedApplicationCallTxnFields.BitmaskClearStateProgram) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertRound) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCertRound) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.CertType) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCertType) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.Cert) == 0) && (len((*z).encodedSignedTxns.encodedTxns.encodedCompactCertTxnFields.BitmaskCert) == 0) && (len((*z).TxnGroups) == 0)
}

// MarshalMsg implements msgp.Marshaler
func (z txnGroups) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	if z == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendArrayHeader(o, uint32(len(z)))
	}
	for za0001 := range z {
		o = z[za0001].MarshalMsg(o)
	}
	return
}

func (_ txnGroups) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(txnGroups)
	if !ok {
		_, ok = (z).(*txnGroups)
	}
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *txnGroups) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 int
	var zb0003 bool
	zb0002, zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0002 > maxEncodedTransactionGroupEntries {
		err = msgp.ErrOverflow(uint64(zb0002), uint64(maxEncodedTransactionGroupEntries))
		err = msgp.WrapError(err)
		return
	}
	if zb0003 {
		(*z) = nil
	} else if (*z) != nil && cap((*z)) >= zb0002 {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(txnGroups, zb0002)
	}
	for zb0001 := range *z {
		bts, err = (*z)[zb0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	o = bts
	return
}

func (_ *txnGroups) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*txnGroups)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z txnGroups) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for za0001 := range z {
		s += z[za0001].Msgsize()
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z txnGroups) MsgIsZero() bool {
	return len(z) == 0
}
