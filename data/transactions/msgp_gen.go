package transactions

// Code generated by github.com/algorand/msgp DO NOT EDIT.

import (
	"sort"

	"github.com/algorand/msgp/msgp"

	"github.com/algorand/go-algorand/config"
	"github.com/algorand/go-algorand/crypto"
	"github.com/algorand/go-algorand/crypto/merklesignature"
	"github.com/algorand/go-algorand/crypto/stateproof"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/algorand/go-algorand/data/stateproofmsg"
	"github.com/algorand/go-algorand/protocol"
)

// The following msgp objects are implemented in this file:
// ApplicationCallTxnFields
//             |-----> (*) MarshalMsg
//             |-----> (*) CanMarshalMsg
//             |-----> (*) UnmarshalMsg
//             |-----> (*) UnmarshalValidateMsg
//             |-----> (*) CanUnmarshalMsg
//             |-----> (*) Msgsize
//             |-----> (*) MsgIsZero
//             |-----> ApplicationCallTxnFieldsMaxSize()
//
// ApplyData
//     |-----> (*) MarshalMsg
//     |-----> (*) CanMarshalMsg
//     |-----> (*) UnmarshalMsg
//     |-----> (*) UnmarshalValidateMsg
//     |-----> (*) CanUnmarshalMsg
//     |-----> (*) Msgsize
//     |-----> (*) MsgIsZero
//     |-----> ApplyDataMaxSize()
//
// AssetConfigTxnFields
//           |-----> (*) MarshalMsg
//           |-----> (*) CanMarshalMsg
//           |-----> (*) UnmarshalMsg
//           |-----> (*) UnmarshalValidateMsg
//           |-----> (*) CanUnmarshalMsg
//           |-----> (*) Msgsize
//           |-----> (*) MsgIsZero
//           |-----> AssetConfigTxnFieldsMaxSize()
//
// AssetFreezeTxnFields
//           |-----> (*) MarshalMsg
//           |-----> (*) CanMarshalMsg
//           |-----> (*) UnmarshalMsg
//           |-----> (*) UnmarshalValidateMsg
//           |-----> (*) CanUnmarshalMsg
//           |-----> (*) Msgsize
//           |-----> (*) MsgIsZero
//           |-----> AssetFreezeTxnFieldsMaxSize()
//
// AssetTransferTxnFields
//            |-----> (*) MarshalMsg
//            |-----> (*) CanMarshalMsg
//            |-----> (*) UnmarshalMsg
//            |-----> (*) UnmarshalValidateMsg
//            |-----> (*) CanUnmarshalMsg
//            |-----> (*) Msgsize
//            |-----> (*) MsgIsZero
//            |-----> AssetTransferTxnFieldsMaxSize()
//
// BoxRef
//    |-----> (*) MarshalMsg
//    |-----> (*) CanMarshalMsg
//    |-----> (*) UnmarshalMsg
//    |-----> (*) UnmarshalValidateMsg
//    |-----> (*) CanUnmarshalMsg
//    |-----> (*) Msgsize
//    |-----> (*) MsgIsZero
//    |-----> BoxRefMaxSize()
//
// EvalDelta
//     |-----> (*) MarshalMsg
//     |-----> (*) CanMarshalMsg
//     |-----> (*) UnmarshalMsg
//     |-----> (*) UnmarshalValidateMsg
//     |-----> (*) CanUnmarshalMsg
//     |-----> (*) Msgsize
//     |-----> (*) MsgIsZero
//     |-----> EvalDeltaMaxSize()
//
// Header
//    |-----> (*) MarshalMsg
//    |-----> (*) CanMarshalMsg
//    |-----> (*) UnmarshalMsg
//    |-----> (*) UnmarshalValidateMsg
//    |-----> (*) CanUnmarshalMsg
//    |-----> (*) Msgsize
//    |-----> (*) MsgIsZero
//    |-----> HeaderMaxSize()
//
// KeyregTxnFields
//        |-----> (*) MarshalMsg
//        |-----> (*) CanMarshalMsg
//        |-----> (*) UnmarshalMsg
//        |-----> (*) UnmarshalValidateMsg
//        |-----> (*) CanUnmarshalMsg
//        |-----> (*) Msgsize
//        |-----> (*) MsgIsZero
//        |-----> KeyregTxnFieldsMaxSize()
//
// LogicSig
//     |-----> (*) MarshalMsg
//     |-----> (*) CanMarshalMsg
//     |-----> (*) UnmarshalMsg
//     |-----> (*) UnmarshalValidateMsg
//     |-----> (*) CanUnmarshalMsg
//     |-----> (*) Msgsize
//     |-----> (*) MsgIsZero
//     |-----> LogicSigMaxSize()
//
// OnCompletion
//       |-----> MarshalMsg
//       |-----> CanMarshalMsg
//       |-----> (*) UnmarshalMsg
//       |-----> (*) UnmarshalValidateMsg
//       |-----> (*) CanUnmarshalMsg
//       |-----> Msgsize
//       |-----> MsgIsZero
//       |-----> OnCompletionMaxSize()
//
// PaymentTxnFields
//         |-----> (*) MarshalMsg
//         |-----> (*) CanMarshalMsg
//         |-----> (*) UnmarshalMsg
//         |-----> (*) UnmarshalValidateMsg
//         |-----> (*) CanUnmarshalMsg
//         |-----> (*) Msgsize
//         |-----> (*) MsgIsZero
//         |-----> PaymentTxnFieldsMaxSize()
//
// Payset
//    |-----> MarshalMsg
//    |-----> CanMarshalMsg
//    |-----> (*) UnmarshalMsg
//    |-----> (*) UnmarshalValidateMsg
//    |-----> (*) CanUnmarshalMsg
//    |-----> Msgsize
//    |-----> MsgIsZero
//    |-----> PaysetMaxSize()
//
// SignedTxn
//     |-----> (*) MarshalMsg
//     |-----> (*) CanMarshalMsg
//     |-----> (*) UnmarshalMsg
//     |-----> (*) UnmarshalValidateMsg
//     |-----> (*) CanUnmarshalMsg
//     |-----> (*) Msgsize
//     |-----> (*) MsgIsZero
//     |-----> SignedTxnMaxSize()
//
// SignedTxnInBlock
//         |-----> (*) MarshalMsg
//         |-----> (*) CanMarshalMsg
//         |-----> (*) UnmarshalMsg
//         |-----> (*) UnmarshalValidateMsg
//         |-----> (*) CanUnmarshalMsg
//         |-----> (*) Msgsize
//         |-----> (*) MsgIsZero
//         |-----> SignedTxnInBlockMaxSize()
//
// SignedTxnWithAD
//        |-----> (*) MarshalMsg
//        |-----> (*) CanMarshalMsg
//        |-----> (*) UnmarshalMsg
//        |-----> (*) UnmarshalValidateMsg
//        |-----> (*) CanUnmarshalMsg
//        |-----> (*) Msgsize
//        |-----> (*) MsgIsZero
//        |-----> SignedTxnWithADMaxSize()
//
// StateProofTxnFields
//          |-----> (*) MarshalMsg
//          |-----> (*) CanMarshalMsg
//          |-----> (*) UnmarshalMsg
//          |-----> (*) UnmarshalValidateMsg
//          |-----> (*) CanUnmarshalMsg
//          |-----> (*) Msgsize
//          |-----> (*) MsgIsZero
//          |-----> StateProofTxnFieldsMaxSize()
//
// Transaction
//      |-----> (*) MarshalMsg
//      |-----> (*) CanMarshalMsg
//      |-----> (*) UnmarshalMsg
//      |-----> (*) UnmarshalValidateMsg
//      |-----> (*) CanUnmarshalMsg
//      |-----> (*) Msgsize
//      |-----> (*) MsgIsZero
//      |-----> TransactionMaxSize()
//
// TxGroup
//    |-----> (*) MarshalMsg
//    |-----> (*) CanMarshalMsg
//    |-----> (*) UnmarshalMsg
//    |-----> (*) UnmarshalValidateMsg
//    |-----> (*) CanUnmarshalMsg
//    |-----> (*) Msgsize
//    |-----> (*) MsgIsZero
//    |-----> TxGroupMaxSize()
//
// Txid
//   |-----> (*) MarshalMsg
//   |-----> (*) CanMarshalMsg
//   |-----> (*) UnmarshalMsg
//   |-----> (*) UnmarshalValidateMsg
//   |-----> (*) CanUnmarshalMsg
//   |-----> (*) Msgsize
//   |-----> (*) MsgIsZero
//
// crypto.Digest
//       |-----> crypto.DigestMaxSize()
//

// MarshalMsg implements msgp.Marshaler
func (z *ApplicationCallTxnFields) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0006Len := uint32(12)
	var zb0006Mask uint16 /* 13 bits */
	if len((*z).ApplicationArgs) == 0 {
		zb0006Len--
		zb0006Mask |= 0x2
	}
	if (*z).OnCompletion == 0 {
		zb0006Len--
		zb0006Mask |= 0x4
	}
	if len((*z).ApprovalProgram) == 0 {
		zb0006Len--
		zb0006Mask |= 0x8
	}
	if len((*z).ForeignAssets) == 0 {
		zb0006Len--
		zb0006Mask |= 0x10
	}
	if len((*z).Accounts) == 0 {
		zb0006Len--
		zb0006Mask |= 0x20
	}
	if len((*z).Boxes) == 0 {
		zb0006Len--
		zb0006Mask |= 0x40
	}
	if (*z).ExtraProgramPages == 0 {
		zb0006Len--
		zb0006Mask |= 0x80
	}
	if len((*z).ForeignApps) == 0 {
		zb0006Len--
		zb0006Mask |= 0x100
	}
	if (*z).GlobalStateSchema.MsgIsZero() {
		zb0006Len--
		zb0006Mask |= 0x200
	}
	if (*z).ApplicationID.MsgIsZero() {
		zb0006Len--
		zb0006Mask |= 0x400
	}
	if (*z).LocalStateSchema.MsgIsZero() {
		zb0006Len--
		zb0006Mask |= 0x800
	}
	if len((*z).ClearStateProgram) == 0 {
		zb0006Len--
		zb0006Mask |= 0x1000
	}
	// variable map header, size zb0006Len
	o = append(o, 0x80|uint8(zb0006Len))
	if zb0006Len != 0 {
		if (zb0006Mask & 0x2) == 0 { // if not empty
			// string "apaa"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x61)
			if (*z).ApplicationArgs == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).ApplicationArgs)))
			}
			for zb0001 := range (*z).ApplicationArgs {
				o = msgp.AppendBytes(o, (*z).ApplicationArgs[zb0001])
			}
		}
		if (zb0006Mask & 0x4) == 0 { // if not empty
			// string "apan"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x6e)
			o = msgp.AppendUint64(o, uint64((*z).OnCompletion))
		}
		if (zb0006Mask & 0x8) == 0 { // if not empty
			// string "apap"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x70)
			o = msgp.AppendBytes(o, (*z).ApprovalProgram)
		}
		if (zb0006Mask & 0x10) == 0 { // if not empty
			// string "apas"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x73)
			if (*z).ForeignAssets == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).ForeignAssets)))
			}
			for zb0005 := range (*z).ForeignAssets {
				o = (*z).ForeignAssets[zb0005].MarshalMsg(o)
			}
		}
		if (zb0006Mask & 0x20) == 0 { // if not empty
			// string "apat"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x74)
			if (*z).Accounts == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Accounts)))
			}
			for zb0002 := range (*z).Accounts {
				o = (*z).Accounts[zb0002].MarshalMsg(o)
			}
		}
		if (zb0006Mask & 0x40) == 0 { // if not empty
			// string "apbx"
			o = append(o, 0xa4, 0x61, 0x70, 0x62, 0x78)
			if (*z).Boxes == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Boxes)))
			}
			for zb0004 := range (*z).Boxes {
				// omitempty: check for empty values
				zb0007Len := uint32(2)
				var zb0007Mask uint8 /* 3 bits */
				if (*z).Boxes[zb0004].Index == 0 {
					zb0007Len--
					zb0007Mask |= 0x2
				}
				if len((*z).Boxes[zb0004].Name) == 0 {
					zb0007Len--
					zb0007Mask |= 0x4
				}
				// variable map header, size zb0007Len
				o = append(o, 0x80|uint8(zb0007Len))
				if (zb0007Mask & 0x2) == 0 { // if not empty
					// string "i"
					o = append(o, 0xa1, 0x69)
					o = msgp.AppendUint64(o, (*z).Boxes[zb0004].Index)
				}
				if (zb0007Mask & 0x4) == 0 { // if not empty
					// string "n"
					o = append(o, 0xa1, 0x6e)
					o = msgp.AppendBytes(o, (*z).Boxes[zb0004].Name)
				}
			}
		}
		if (zb0006Mask & 0x80) == 0 { // if not empty
			// string "apep"
			o = append(o, 0xa4, 0x61, 0x70, 0x65, 0x70)
			o = msgp.AppendUint32(o, (*z).ExtraProgramPages)
		}
		if (zb0006Mask & 0x100) == 0 { // if not empty
			// string "apfa"
			o = append(o, 0xa4, 0x61, 0x70, 0x66, 0x61)
			if (*z).ForeignApps == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).ForeignApps)))
			}
			for zb0003 := range (*z).ForeignApps {
				o = (*z).ForeignApps[zb0003].MarshalMsg(o)
			}
		}
		if (zb0006Mask & 0x200) == 0 { // if not empty
			// string "apgs"
			o = append(o, 0xa4, 0x61, 0x70, 0x67, 0x73)
			o = (*z).GlobalStateSchema.MarshalMsg(o)
		}
		if (zb0006Mask & 0x400) == 0 { // if not empty
			// string "apid"
			o = append(o, 0xa4, 0x61, 0x70, 0x69, 0x64)
			o = (*z).ApplicationID.MarshalMsg(o)
		}
		if (zb0006Mask & 0x800) == 0 { // if not empty
			// string "apls"
			o = append(o, 0xa4, 0x61, 0x70, 0x6c, 0x73)
			o = (*z).LocalStateSchema.MarshalMsg(o)
		}
		if (zb0006Mask & 0x1000) == 0 { // if not empty
			// string "apsu"
			o = append(o, 0xa4, 0x61, 0x70, 0x73, 0x75)
			o = msgp.AppendBytes(o, (*z).ClearStateProgram)
		}
	}
	return
}

func (_ *ApplicationCallTxnFields) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*ApplicationCallTxnFields)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ApplicationCallTxnFields) unmarshalMsg(bts []byte, validate bool) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0006 int
	var zb0008 string
	var zb0009 bool
	var zb0007 bool
	_ = zb0008
	_ = zb0009
	zb0006, zb0007, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0006, zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if validate {
			err = &msgp.ErrNonCanonical{}
			return
		}
		if zb0006 > 0 {
			zb0006--
			bts, err = (*z).ApplicationID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApplicationID")
				return
			}
		}
		if zb0006 > 0 {
			zb0006--
			{
				var zb0010 uint64
				zb0010, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "OnCompletion")
					return
				}
				(*z).OnCompletion = OnCompletion(zb0010)
			}
		}
		if zb0006 > 0 {
			zb0006--
			var zb0011 int
			var zb0012 bool
			zb0011, zb0012, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs")
				return
			}
			if zb0011 > encodedMaxApplicationArgs {
				err = msgp.ErrOverflow(uint64(zb0011), uint64(encodedMaxApplicationArgs))
				err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs")
				return
			}
			if zb0012 {
				(*z).ApplicationArgs = nil
			} else if (*z).ApplicationArgs != nil && cap((*z).ApplicationArgs) >= zb0011 {
				(*z).ApplicationArgs = ((*z).ApplicationArgs)[:zb0011]
			} else {
				(*z).ApplicationArgs = make([][]byte, zb0011)
			}
			for zb0001 := range (*z).ApplicationArgs {
				(*z).ApplicationArgs[zb0001], bts, err = msgp.ReadBytesBytes(bts, (*z).ApplicationArgs[zb0001])
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs", zb0001)
					return
				}
			}
		}
		if zb0006 > 0 {
			zb0006--
			var zb0013 int
			var zb0014 bool
			zb0013, zb0014, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Accounts")
				return
			}
			if zb0013 > encodedMaxAccounts {
				err = msgp.ErrOverflow(uint64(zb0013), uint64(encodedMaxAccounts))
				err = msgp.WrapError(err, "struct-from-array", "Accounts")
				return
			}
			if zb0014 {
				(*z).Accounts = nil
			} else if (*z).Accounts != nil && cap((*z).Accounts) >= zb0013 {
				(*z).Accounts = ((*z).Accounts)[:zb0013]
			} else {
				(*z).Accounts = make([]basics.Address, zb0013)
			}
			for zb0002 := range (*z).Accounts {
				bts, err = (*z).Accounts[zb0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Accounts", zb0002)
					return
				}
			}
		}
		if zb0006 > 0 {
			zb0006--
			var zb0015 int
			var zb0016 bool
			zb0015, zb0016, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ForeignApps")
				return
			}
			if zb0015 > encodedMaxForeignApps {
				err = msgp.ErrOverflow(uint64(zb0015), uint64(encodedMaxForeignApps))
				err = msgp.WrapError(err, "struct-from-array", "ForeignApps")
				return
			}
			if zb0016 {
				(*z).ForeignApps = nil
			} else if (*z).ForeignApps != nil && cap((*z).ForeignApps) >= zb0015 {
				(*z).ForeignApps = ((*z).ForeignApps)[:zb0015]
			} else {
				(*z).ForeignApps = make([]basics.AppIndex, zb0015)
			}
			for zb0003 := range (*z).ForeignApps {
				bts, err = (*z).ForeignApps[zb0003].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ForeignApps", zb0003)
					return
				}
			}
		}
		if zb0006 > 0 {
			zb0006--
			var zb0017 int
			var zb0018 bool
			zb0017, zb0018, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Boxes")
				return
			}
			if zb0017 > encodedMaxBoxes {
				err = msgp.ErrOverflow(uint64(zb0017), uint64(encodedMaxBoxes))
				err = msgp.WrapError(err, "struct-from-array", "Boxes")
				return
			}
			if zb0018 {
				(*z).Boxes = nil
			} else if (*z).Boxes != nil && cap((*z).Boxes) >= zb0017 {
				(*z).Boxes = ((*z).Boxes)[:zb0017]
			} else {
				(*z).Boxes = make([]BoxRef, zb0017)
			}
			for zb0004 := range (*z).Boxes {
				var zb0019 int
				var zb0021 string
				var zb0022 bool
				var zb0020 bool
				_ = zb0021
				_ = zb0022
				zb0019, zb0020, bts, err = msgp.ReadMapHeaderBytes(bts)
				if _, ok := err.(msgp.TypeError); ok {
					zb0019, zb0020, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0004)
						return
					}
					if validate {
						err = &msgp.ErrNonCanonical{}
						return
					}
					if zb0019 > 0 {
						zb0019--
						(*z).Boxes[zb0004].Index, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0004, "struct-from-array", "Index")
							return
						}
					}
					if zb0019 > 0 {
						zb0019--
						var zb0023 int
						zb0023, err = msgp.ReadBytesBytesHeader(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0004, "struct-from-array", "Name")
							return
						}
						if zb0023 > config.MaxBytesKeyValueLen {
							err = msgp.ErrOverflow(uint64(zb0023), uint64(config.MaxBytesKeyValueLen))
							return
						}
						(*z).Boxes[zb0004].Name, bts, err = msgp.ReadBytesBytes(bts, (*z).Boxes[zb0004].Name)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0004, "struct-from-array", "Name")
							return
						}
					}
					if zb0019 > 0 {
						err = msgp.ErrTooManyArrayFields(zb0019)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0004, "struct-from-array")
							return
						}
					}
				} else {
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0004)
						return
					}
					if zb0020 {
						(*z).Boxes[zb0004] = BoxRef{}
					}
					for zb0019 > 0 {
						zb0019--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0004)
							return
						}
						switch string(field) {
						case "i":
							if validate && zb0022 && "i" < zb0021 {
								err = &msgp.ErrNonCanonical{}
								return
							}
							(*z).Boxes[zb0004].Index, bts, err = msgp.ReadUint64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0004, "Index")
								return
							}
							zb0021 = "i"
						case "n":
							if validate && zb0022 && "n" < zb0021 {
								err = &msgp.ErrNonCanonical{}
								return
							}
							var zb0024 int
							zb0024, err = msgp.ReadBytesBytesHeader(bts)
							if err != nil {
								err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0004, "Name")
								return
							}
							if zb0024 > config.MaxBytesKeyValueLen {
								err = msgp.ErrOverflow(uint64(zb0024), uint64(config.MaxBytesKeyValueLen))
								return
							}
							(*z).Boxes[zb0004].Name, bts, err = msgp.ReadBytesBytes(bts, (*z).Boxes[zb0004].Name)
							if err != nil {
								err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0004, "Name")
								return
							}
							zb0021 = "n"
						default:
							err = msgp.ErrNoField(string(field))
							if err != nil {
								err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0004)
								return
							}
						}
						zb0022 = true
					}
				}
			}
		}
		if zb0006 > 0 {
			zb0006--
			var zb0025 int
			var zb0026 bool
			zb0025, zb0026, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ForeignAssets")
				return
			}
			if zb0025 > encodedMaxForeignAssets {
				err = msgp.ErrOverflow(uint64(zb0025), uint64(encodedMaxForeignAssets))
				err = msgp.WrapError(err, "struct-from-array", "ForeignAssets")
				return
			}
			if zb0026 {
				(*z).ForeignAssets = nil
			} else if (*z).ForeignAssets != nil && cap((*z).ForeignAssets) >= zb0025 {
				(*z).ForeignAssets = ((*z).ForeignAssets)[:zb0025]
			} else {
				(*z).ForeignAssets = make([]basics.AssetIndex, zb0025)
			}
			for zb0005 := range (*z).ForeignAssets {
				bts, err = (*z).ForeignAssets[zb0005].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ForeignAssets", zb0005)
					return
				}
			}
		}
		if zb0006 > 0 {
			zb0006--
			bts, err = (*z).LocalStateSchema.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LocalStateSchema")
				return
			}
		}
		if zb0006 > 0 {
			zb0006--
			bts, err = (*z).GlobalStateSchema.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GlobalStateSchema")
				return
			}
		}
		if zb0006 > 0 {
			zb0006--
			var zb0027 int
			zb0027, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram")
				return
			}
			if zb0027 > config.MaxAvailableAppProgramLen {
				err = msgp.ErrOverflow(uint64(zb0027), uint64(config.MaxAvailableAppProgramLen))
				return
			}
			(*z).ApprovalProgram, bts, err = msgp.ReadBytesBytes(bts, (*z).ApprovalProgram)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram")
				return
			}
		}
		if zb0006 > 0 {
			zb0006--
			var zb0028 int
			zb0028, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram")
				return
			}
			if zb0028 > config.MaxAvailableAppProgramLen {
				err = msgp.ErrOverflow(uint64(zb0028), uint64(config.MaxAvailableAppProgramLen))
				return
			}
			(*z).ClearStateProgram, bts, err = msgp.ReadBytesBytes(bts, (*z).ClearStateProgram)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram")
				return
			}
		}
		if zb0006 > 0 {
			zb0006--
			(*z).ExtraProgramPages, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ExtraProgramPages")
				return
			}
		}
		if zb0006 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0006)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0007 {
			(*z) = ApplicationCallTxnFields{}
		}
		for zb0006 > 0 {
			zb0006--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "apid":
				if validate && zb0009 && "apid" < zb0008 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).ApplicationID.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApplicationID")
					return
				}
				zb0008 = "apid"
			case "apan":
				if validate && zb0009 && "apan" < zb0008 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				{
					var zb0029 uint64
					zb0029, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OnCompletion")
						return
					}
					(*z).OnCompletion = OnCompletion(zb0029)
				}
				zb0008 = "apan"
			case "apaa":
				if validate && zb0009 && "apaa" < zb0008 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0030 int
				var zb0031 bool
				zb0030, zb0031, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApplicationArgs")
					return
				}
				if zb0030 > encodedMaxApplicationArgs {
					err = msgp.ErrOverflow(uint64(zb0030), uint64(encodedMaxApplicationArgs))
					err = msgp.WrapError(err, "ApplicationArgs")
					return
				}
				if zb0031 {
					(*z).ApplicationArgs = nil
				} else if (*z).ApplicationArgs != nil && cap((*z).ApplicationArgs) >= zb0030 {
					(*z).ApplicationArgs = ((*z).ApplicationArgs)[:zb0030]
				} else {
					(*z).ApplicationArgs = make([][]byte, zb0030)
				}
				for zb0001 := range (*z).ApplicationArgs {
					(*z).ApplicationArgs[zb0001], bts, err = msgp.ReadBytesBytes(bts, (*z).ApplicationArgs[zb0001])
					if err != nil {
						err = msgp.WrapError(err, "ApplicationArgs", zb0001)
						return
					}
				}
				zb0008 = "apaa"
			case "apat":
				if validate && zb0009 && "apat" < zb0008 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0032 int
				var zb0033 bool
				zb0032, zb0033, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Accounts")
					return
				}
				if zb0032 > encodedMaxAccounts {
					err = msgp.ErrOverflow(uint64(zb0032), uint64(encodedMaxAccounts))
					err = msgp.WrapError(err, "Accounts")
					return
				}
				if zb0033 {
					(*z).Accounts = nil
				} else if (*z).Accounts != nil && cap((*z).Accounts) >= zb0032 {
					(*z).Accounts = ((*z).Accounts)[:zb0032]
				} else {
					(*z).Accounts = make([]basics.Address, zb0032)
				}
				for zb0002 := range (*z).Accounts {
					bts, err = (*z).Accounts[zb0002].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Accounts", zb0002)
						return
					}
				}
				zb0008 = "apat"
			case "apfa":
				if validate && zb0009 && "apfa" < zb0008 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0034 int
				var zb0035 bool
				zb0034, zb0035, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ForeignApps")
					return
				}
				if zb0034 > encodedMaxForeignApps {
					err = msgp.ErrOverflow(uint64(zb0034), uint64(encodedMaxForeignApps))
					err = msgp.WrapError(err, "ForeignApps")
					return
				}
				if zb0035 {
					(*z).ForeignApps = nil
				} else if (*z).ForeignApps != nil && cap((*z).ForeignApps) >= zb0034 {
					(*z).ForeignApps = ((*z).ForeignApps)[:zb0034]
				} else {
					(*z).ForeignApps = make([]basics.AppIndex, zb0034)
				}
				for zb0003 := range (*z).ForeignApps {
					bts, err = (*z).ForeignApps[zb0003].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "ForeignApps", zb0003)
						return
					}
				}
				zb0008 = "apfa"
			case "apbx":
				if validate && zb0009 && "apbx" < zb0008 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0036 int
				var zb0037 bool
				zb0036, zb0037, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Boxes")
					return
				}
				if zb0036 > encodedMaxBoxes {
					err = msgp.ErrOverflow(uint64(zb0036), uint64(encodedMaxBoxes))
					err = msgp.WrapError(err, "Boxes")
					return
				}
				if zb0037 {
					(*z).Boxes = nil
				} else if (*z).Boxes != nil && cap((*z).Boxes) >= zb0036 {
					(*z).Boxes = ((*z).Boxes)[:zb0036]
				} else {
					(*z).Boxes = make([]BoxRef, zb0036)
				}
				for zb0004 := range (*z).Boxes {
					var zb0038 int
					var zb0040 string
					var zb0041 bool
					var zb0039 bool
					_ = zb0040
					_ = zb0041
					zb0038, zb0039, bts, err = msgp.ReadMapHeaderBytes(bts)
					if _, ok := err.(msgp.TypeError); ok {
						zb0038, zb0039, bts, err = msgp.ReadArrayHeaderBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Boxes", zb0004)
							return
						}
						if validate {
							err = &msgp.ErrNonCanonical{}
							return
						}
						if zb0038 > 0 {
							zb0038--
							(*z).Boxes[zb0004].Index, bts, err = msgp.ReadUint64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Boxes", zb0004, "struct-from-array", "Index")
								return
							}
						}
						if zb0038 > 0 {
							zb0038--
							var zb0042 int
							zb0042, err = msgp.ReadBytesBytesHeader(bts)
							if err != nil {
								err = msgp.WrapError(err, "Boxes", zb0004, "struct-from-array", "Name")
								return
							}
							if zb0042 > config.MaxBytesKeyValueLen {
								err = msgp.ErrOverflow(uint64(zb0042), uint64(config.MaxBytesKeyValueLen))
								return
							}
							(*z).Boxes[zb0004].Name, bts, err = msgp.ReadBytesBytes(bts, (*z).Boxes[zb0004].Name)
							if err != nil {
								err = msgp.WrapError(err, "Boxes", zb0004, "struct-from-array", "Name")
								return
							}
						}
						if zb0038 > 0 {
							err = msgp.ErrTooManyArrayFields(zb0038)
							if err != nil {
								err = msgp.WrapError(err, "Boxes", zb0004, "struct-from-array")
								return
							}
						}
					} else {
						if err != nil {
							err = msgp.WrapError(err, "Boxes", zb0004)
							return
						}
						if zb0039 {
							(*z).Boxes[zb0004] = BoxRef{}
						}
						for zb0038 > 0 {
							zb0038--
							field, bts, err = msgp.ReadMapKeyZC(bts)
							if err != nil {
								err = msgp.WrapError(err, "Boxes", zb0004)
								return
							}
							switch string(field) {
							case "i":
								if validate && zb0041 && "i" < zb0040 {
									err = &msgp.ErrNonCanonical{}
									return
								}
								(*z).Boxes[zb0004].Index, bts, err = msgp.ReadUint64Bytes(bts)
								if err != nil {
									err = msgp.WrapError(err, "Boxes", zb0004, "Index")
									return
								}
								zb0040 = "i"
							case "n":
								if validate && zb0041 && "n" < zb0040 {
									err = &msgp.ErrNonCanonical{}
									return
								}
								var zb0043 int
								zb0043, err = msgp.ReadBytesBytesHeader(bts)
								if err != nil {
									err = msgp.WrapError(err, "Boxes", zb0004, "Name")
									return
								}
								if zb0043 > config.MaxBytesKeyValueLen {
									err = msgp.ErrOverflow(uint64(zb0043), uint64(config.MaxBytesKeyValueLen))
									return
								}
								(*z).Boxes[zb0004].Name, bts, err = msgp.ReadBytesBytes(bts, (*z).Boxes[zb0004].Name)
								if err != nil {
									err = msgp.WrapError(err, "Boxes", zb0004, "Name")
									return
								}
								zb0040 = "n"
							default:
								err = msgp.ErrNoField(string(field))
								if err != nil {
									err = msgp.WrapError(err, "Boxes", zb0004)
									return
								}
							}
							zb0041 = true
						}
					}
				}
				zb0008 = "apbx"
			case "apas":
				if validate && zb0009 && "apas" < zb0008 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0044 int
				var zb0045 bool
				zb0044, zb0045, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ForeignAssets")
					return
				}
				if zb0044 > encodedMaxForeignAssets {
					err = msgp.ErrOverflow(uint64(zb0044), uint64(encodedMaxForeignAssets))
					err = msgp.WrapError(err, "ForeignAssets")
					return
				}
				if zb0045 {
					(*z).ForeignAssets = nil
				} else if (*z).ForeignAssets != nil && cap((*z).ForeignAssets) >= zb0044 {
					(*z).ForeignAssets = ((*z).ForeignAssets)[:zb0044]
				} else {
					(*z).ForeignAssets = make([]basics.AssetIndex, zb0044)
				}
				for zb0005 := range (*z).ForeignAssets {
					bts, err = (*z).ForeignAssets[zb0005].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "ForeignAssets", zb0005)
						return
					}
				}
				zb0008 = "apas"
			case "apls":
				if validate && zb0009 && "apls" < zb0008 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).LocalStateSchema.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "LocalStateSchema")
					return
				}
				zb0008 = "apls"
			case "apgs":
				if validate && zb0009 && "apgs" < zb0008 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).GlobalStateSchema.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "GlobalStateSchema")
					return
				}
				zb0008 = "apgs"
			case "apap":
				if validate && zb0009 && "apap" < zb0008 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0046 int
				zb0046, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApprovalProgram")
					return
				}
				if zb0046 > config.MaxAvailableAppProgramLen {
					err = msgp.ErrOverflow(uint64(zb0046), uint64(config.MaxAvailableAppProgramLen))
					return
				}
				(*z).ApprovalProgram, bts, err = msgp.ReadBytesBytes(bts, (*z).ApprovalProgram)
				if err != nil {
					err = msgp.WrapError(err, "ApprovalProgram")
					return
				}
				zb0008 = "apap"
			case "apsu":
				if validate && zb0009 && "apsu" < zb0008 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0047 int
				zb0047, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "ClearStateProgram")
					return
				}
				if zb0047 > config.MaxAvailableAppProgramLen {
					err = msgp.ErrOverflow(uint64(zb0047), uint64(config.MaxAvailableAppProgramLen))
					return
				}
				(*z).ClearStateProgram, bts, err = msgp.ReadBytesBytes(bts, (*z).ClearStateProgram)
				if err != nil {
					err = msgp.WrapError(err, "ClearStateProgram")
					return
				}
				zb0008 = "apsu"
			case "apep":
				if validate && zb0009 && "apep" < zb0008 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				(*z).ExtraProgramPages, bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ExtraProgramPages")
					return
				}
				zb0008 = "apep"
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
			zb0009 = true
		}
	}
	o = bts
	return
}

func (z *ApplicationCallTxnFields) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, false)
}
func (z *ApplicationCallTxnFields) UnmarshalValidateMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, true)
}
func (_ *ApplicationCallTxnFields) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*ApplicationCallTxnFields)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ApplicationCallTxnFields) Msgsize() (s int) {
	s = 1 + 5 + (*z).ApplicationID.Msgsize() + 5 + msgp.Uint64Size + 5 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).ApplicationArgs {
		s += msgp.BytesPrefixSize + len((*z).ApplicationArgs[zb0001])
	}
	s += 5 + msgp.ArrayHeaderSize
	for zb0002 := range (*z).Accounts {
		s += (*z).Accounts[zb0002].Msgsize()
	}
	s += 5 + msgp.ArrayHeaderSize
	for zb0003 := range (*z).ForeignApps {
		s += (*z).ForeignApps[zb0003].Msgsize()
	}
	s += 5 + msgp.ArrayHeaderSize
	for zb0004 := range (*z).Boxes {
		s += 1 + 2 + msgp.Uint64Size + 2 + msgp.BytesPrefixSize + len((*z).Boxes[zb0004].Name)
	}
	s += 5 + msgp.ArrayHeaderSize
	for zb0005 := range (*z).ForeignAssets {
		s += (*z).ForeignAssets[zb0005].Msgsize()
	}
	s += 5 + (*z).LocalStateSchema.Msgsize() + 5 + (*z).GlobalStateSchema.Msgsize() + 5 + msgp.BytesPrefixSize + len((*z).ApprovalProgram) + 5 + msgp.BytesPrefixSize + len((*z).ClearStateProgram) + 5 + msgp.Uint32Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z *ApplicationCallTxnFields) MsgIsZero() bool {
	return ((*z).ApplicationID.MsgIsZero()) && ((*z).OnCompletion == 0) && (len((*z).ApplicationArgs) == 0) && (len((*z).Accounts) == 0) && (len((*z).ForeignApps) == 0) && (len((*z).Boxes) == 0) && (len((*z).ForeignAssets) == 0) && ((*z).LocalStateSchema.MsgIsZero()) && ((*z).GlobalStateSchema.MsgIsZero()) && (len((*z).ApprovalProgram) == 0) && (len((*z).ClearStateProgram) == 0) && ((*z).ExtraProgramPages == 0)
}

// MaxSize returns a maximum valid message size for this message type
func ApplicationCallTxnFieldsMaxSize() (s int) {
	s = 1 + 5 + basics.AppIndexMaxSize() + 5 + msgp.Uint64Size + 5
	// Calculating size of slice: z.ApplicationArgs
	s += msgp.ArrayHeaderSize + config.MaxAppTotalArgLen + 5
	// Calculating size of slice: z.Accounts
	s += msgp.ArrayHeaderSize + ((encodedMaxAccounts) * (basics.AddressMaxSize()))
	s += 5
	// Calculating size of slice: z.ForeignApps
	s += msgp.ArrayHeaderSize + ((encodedMaxForeignApps) * (basics.AppIndexMaxSize()))
	s += 5
	// Calculating size of slice: z.Boxes
	s += msgp.ArrayHeaderSize + ((encodedMaxBoxes) * (BoxRefMaxSize()))
	s += 5
	// Calculating size of slice: z.ForeignAssets
	s += msgp.ArrayHeaderSize + ((encodedMaxForeignAssets) * (basics.AssetIndexMaxSize()))
	s += 5 + basics.StateSchemaMaxSize() + 5 + basics.StateSchemaMaxSize() + 5 + msgp.BytesPrefixSize + config.MaxAvailableAppProgramLen + 5 + msgp.BytesPrefixSize + config.MaxAvailableAppProgramLen + 5 + msgp.Uint32Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ApplyData) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(8)
	var zb0001Mask uint16 /* 9 bits */
	if (*z).AssetClosingAmount == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).ApplicationID.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if (*z).ClosingAmount.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if (*z).ConfigAsset.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if (*z).EvalDelta.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if (*z).CloseRewards.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if (*z).ReceiverRewards.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	if (*z).SenderRewards.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "aca"
			o = append(o, 0xa3, 0x61, 0x63, 0x61)
			o = msgp.AppendUint64(o, (*z).AssetClosingAmount)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "apid"
			o = append(o, 0xa4, 0x61, 0x70, 0x69, 0x64)
			o = (*z).ApplicationID.MarshalMsg(o)
		}
		if (zb0001Mask & 0x8) == 0 { // if not empty
			// string "ca"
			o = append(o, 0xa2, 0x63, 0x61)
			o = (*z).ClosingAmount.MarshalMsg(o)
		}
		if (zb0001Mask & 0x10) == 0 { // if not empty
			// string "caid"
			o = append(o, 0xa4, 0x63, 0x61, 0x69, 0x64)
			o = (*z).ConfigAsset.MarshalMsg(o)
		}
		if (zb0001Mask & 0x20) == 0 { // if not empty
			// string "dt"
			o = append(o, 0xa2, 0x64, 0x74)
			o = (*z).EvalDelta.MarshalMsg(o)
		}
		if (zb0001Mask & 0x40) == 0 { // if not empty
			// string "rc"
			o = append(o, 0xa2, 0x72, 0x63)
			o = (*z).CloseRewards.MarshalMsg(o)
		}
		if (zb0001Mask & 0x80) == 0 { // if not empty
			// string "rr"
			o = append(o, 0xa2, 0x72, 0x72)
			o = (*z).ReceiverRewards.MarshalMsg(o)
		}
		if (zb0001Mask & 0x100) == 0 { // if not empty
			// string "rs"
			o = append(o, 0xa2, 0x72, 0x73)
			o = (*z).SenderRewards.MarshalMsg(o)
		}
	}
	return
}

func (_ *ApplyData) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*ApplyData)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ApplyData) unmarshalMsg(bts []byte, validate bool) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0003 string
	var zb0004 bool
	var zb0002 bool
	_ = zb0003
	_ = zb0004
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if validate {
			err = &msgp.ErrNonCanonical{}
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).ClosingAmount.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ClosingAmount")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).AssetClosingAmount, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetClosingAmount")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).SenderRewards.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SenderRewards")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).ReceiverRewards.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ReceiverRewards")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).CloseRewards.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CloseRewards")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).EvalDelta.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "EvalDelta")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).ConfigAsset.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ConfigAsset")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).ApplicationID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApplicationID")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = ApplyData{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "ca":
				if validate && zb0004 && "ca" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).ClosingAmount.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ClosingAmount")
					return
				}
				zb0003 = "ca"
			case "aca":
				if validate && zb0004 && "aca" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				(*z).AssetClosingAmount, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetClosingAmount")
					return
				}
				zb0003 = "aca"
			case "rs":
				if validate && zb0004 && "rs" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).SenderRewards.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "SenderRewards")
					return
				}
				zb0003 = "rs"
			case "rr":
				if validate && zb0004 && "rr" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).ReceiverRewards.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReceiverRewards")
					return
				}
				zb0003 = "rr"
			case "rc":
				if validate && zb0004 && "rc" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).CloseRewards.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "CloseRewards")
					return
				}
				zb0003 = "rc"
			case "dt":
				if validate && zb0004 && "dt" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).EvalDelta.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "EvalDelta")
					return
				}
				zb0003 = "dt"
			case "caid":
				if validate && zb0004 && "caid" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).ConfigAsset.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ConfigAsset")
					return
				}
				zb0003 = "caid"
			case "apid":
				if validate && zb0004 && "apid" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).ApplicationID.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApplicationID")
					return
				}
				zb0003 = "apid"
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
			zb0004 = true
		}
	}
	o = bts
	return
}

func (z *ApplyData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, false)
}
func (z *ApplyData) UnmarshalValidateMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, true)
}
func (_ *ApplyData) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*ApplyData)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ApplyData) Msgsize() (s int) {
	s = 1 + 3 + (*z).ClosingAmount.Msgsize() + 4 + msgp.Uint64Size + 3 + (*z).SenderRewards.Msgsize() + 3 + (*z).ReceiverRewards.Msgsize() + 3 + (*z).CloseRewards.Msgsize() + 3 + (*z).EvalDelta.Msgsize() + 5 + (*z).ConfigAsset.Msgsize() + 5 + (*z).ApplicationID.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *ApplyData) MsgIsZero() bool {
	return ((*z).ClosingAmount.MsgIsZero()) && ((*z).AssetClosingAmount == 0) && ((*z).SenderRewards.MsgIsZero()) && ((*z).ReceiverRewards.MsgIsZero()) && ((*z).CloseRewards.MsgIsZero()) && ((*z).EvalDelta.MsgIsZero()) && ((*z).ConfigAsset.MsgIsZero()) && ((*z).ApplicationID.MsgIsZero())
}

// MaxSize returns a maximum valid message size for this message type
func ApplyDataMaxSize() (s int) {
	s = 1 + 3 + basics.MicroAlgosMaxSize() + 4 + msgp.Uint64Size + 3 + basics.MicroAlgosMaxSize() + 3 + basics.MicroAlgosMaxSize() + 3 + basics.MicroAlgosMaxSize() + 3 + EvalDeltaMaxSize() + 5 + basics.AssetIndexMaxSize() + 5 + basics.AppIndexMaxSize()
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AssetConfigTxnFields) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 3 bits */
	if (*z).AssetParams.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).ConfigAsset.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "apar"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x72)
			o = (*z).AssetParams.MarshalMsg(o)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "caid"
			o = append(o, 0xa4, 0x63, 0x61, 0x69, 0x64)
			o = (*z).ConfigAsset.MarshalMsg(o)
		}
	}
	return
}

func (_ *AssetConfigTxnFields) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetConfigTxnFields)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AssetConfigTxnFields) unmarshalMsg(bts []byte, validate bool) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0003 string
	var zb0004 bool
	var zb0002 bool
	_ = zb0003
	_ = zb0004
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if validate {
			err = &msgp.ErrNonCanonical{}
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).ConfigAsset.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ConfigAsset")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).AssetParams.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetParams")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = AssetConfigTxnFields{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "caid":
				if validate && zb0004 && "caid" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).ConfigAsset.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ConfigAsset")
					return
				}
				zb0003 = "caid"
			case "apar":
				if validate && zb0004 && "apar" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).AssetParams.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetParams")
					return
				}
				zb0003 = "apar"
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
			zb0004 = true
		}
	}
	o = bts
	return
}

func (z *AssetConfigTxnFields) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, false)
}
func (z *AssetConfigTxnFields) UnmarshalValidateMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, true)
}
func (_ *AssetConfigTxnFields) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetConfigTxnFields)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AssetConfigTxnFields) Msgsize() (s int) {
	s = 1 + 5 + (*z).ConfigAsset.Msgsize() + 5 + (*z).AssetParams.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *AssetConfigTxnFields) MsgIsZero() bool {
	return ((*z).ConfigAsset.MsgIsZero()) && ((*z).AssetParams.MsgIsZero())
}

// MaxSize returns a maximum valid message size for this message type
func AssetConfigTxnFieldsMaxSize() (s int) {
	s = 1 + 5 + basics.AssetIndexMaxSize() + 5 + basics.AssetParamsMaxSize()
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AssetFreezeTxnFields) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(3)
	var zb0001Mask uint8 /* 4 bits */
	if (*z).AssetFrozen == false {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).FreezeAccount.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if (*z).FreezeAsset.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "afrz"
			o = append(o, 0xa4, 0x61, 0x66, 0x72, 0x7a)
			o = msgp.AppendBool(o, (*z).AssetFrozen)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "fadd"
			o = append(o, 0xa4, 0x66, 0x61, 0x64, 0x64)
			o = (*z).FreezeAccount.MarshalMsg(o)
		}
		if (zb0001Mask & 0x8) == 0 { // if not empty
			// string "faid"
			o = append(o, 0xa4, 0x66, 0x61, 0x69, 0x64)
			o = (*z).FreezeAsset.MarshalMsg(o)
		}
	}
	return
}

func (_ *AssetFreezeTxnFields) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetFreezeTxnFields)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AssetFreezeTxnFields) unmarshalMsg(bts []byte, validate bool) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0003 string
	var zb0004 bool
	var zb0002 bool
	_ = zb0003
	_ = zb0004
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if validate {
			err = &msgp.ErrNonCanonical{}
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).FreezeAccount.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FreezeAccount")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).FreezeAsset.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FreezeAsset")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).AssetFrozen, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetFrozen")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = AssetFreezeTxnFields{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "fadd":
				if validate && zb0004 && "fadd" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).FreezeAccount.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "FreezeAccount")
					return
				}
				zb0003 = "fadd"
			case "faid":
				if validate && zb0004 && "faid" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).FreezeAsset.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "FreezeAsset")
					return
				}
				zb0003 = "faid"
			case "afrz":
				if validate && zb0004 && "afrz" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				(*z).AssetFrozen, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetFrozen")
					return
				}
				zb0003 = "afrz"
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
			zb0004 = true
		}
	}
	o = bts
	return
}

func (z *AssetFreezeTxnFields) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, false)
}
func (z *AssetFreezeTxnFields) UnmarshalValidateMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, true)
}
func (_ *AssetFreezeTxnFields) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetFreezeTxnFields)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AssetFreezeTxnFields) Msgsize() (s int) {
	s = 1 + 5 + (*z).FreezeAccount.Msgsize() + 5 + (*z).FreezeAsset.Msgsize() + 5 + msgp.BoolSize
	return
}

// MsgIsZero returns whether this is a zero value
func (z *AssetFreezeTxnFields) MsgIsZero() bool {
	return ((*z).FreezeAccount.MsgIsZero()) && ((*z).FreezeAsset.MsgIsZero()) && ((*z).AssetFrozen == false)
}

// MaxSize returns a maximum valid message size for this message type
func AssetFreezeTxnFieldsMaxSize() (s int) {
	s = 1 + 5 + basics.AddressMaxSize() + 5 + basics.AssetIndexMaxSize() + 5 + msgp.BoolSize
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AssetTransferTxnFields) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(5)
	var zb0001Mask uint8 /* 6 bits */
	if (*z).AssetAmount == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).AssetCloseTo.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if (*z).AssetReceiver.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if (*z).AssetSender.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if (*z).XferAsset.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "aamt"
			o = append(o, 0xa4, 0x61, 0x61, 0x6d, 0x74)
			o = msgp.AppendUint64(o, (*z).AssetAmount)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "aclose"
			o = append(o, 0xa6, 0x61, 0x63, 0x6c, 0x6f, 0x73, 0x65)
			o = (*z).AssetCloseTo.MarshalMsg(o)
		}
		if (zb0001Mask & 0x8) == 0 { // if not empty
			// string "arcv"
			o = append(o, 0xa4, 0x61, 0x72, 0x63, 0x76)
			o = (*z).AssetReceiver.MarshalMsg(o)
		}
		if (zb0001Mask & 0x10) == 0 { // if not empty
			// string "asnd"
			o = append(o, 0xa4, 0x61, 0x73, 0x6e, 0x64)
			o = (*z).AssetSender.MarshalMsg(o)
		}
		if (zb0001Mask & 0x20) == 0 { // if not empty
			// string "xaid"
			o = append(o, 0xa4, 0x78, 0x61, 0x69, 0x64)
			o = (*z).XferAsset.MarshalMsg(o)
		}
	}
	return
}

func (_ *AssetTransferTxnFields) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetTransferTxnFields)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AssetTransferTxnFields) unmarshalMsg(bts []byte, validate bool) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0003 string
	var zb0004 bool
	var zb0002 bool
	_ = zb0003
	_ = zb0004
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if validate {
			err = &msgp.ErrNonCanonical{}
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).XferAsset.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "XferAsset")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).AssetAmount, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetAmount")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).AssetSender.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetSender")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).AssetReceiver.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetReceiver")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).AssetCloseTo.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetCloseTo")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = AssetTransferTxnFields{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "xaid":
				if validate && zb0004 && "xaid" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).XferAsset.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "XferAsset")
					return
				}
				zb0003 = "xaid"
			case "aamt":
				if validate && zb0004 && "aamt" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				(*z).AssetAmount, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetAmount")
					return
				}
				zb0003 = "aamt"
			case "asnd":
				if validate && zb0004 && "asnd" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).AssetSender.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetSender")
					return
				}
				zb0003 = "asnd"
			case "arcv":
				if validate && zb0004 && "arcv" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).AssetReceiver.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetReceiver")
					return
				}
				zb0003 = "arcv"
			case "aclose":
				if validate && zb0004 && "aclose" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).AssetCloseTo.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetCloseTo")
					return
				}
				zb0003 = "aclose"
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
			zb0004 = true
		}
	}
	o = bts
	return
}

func (z *AssetTransferTxnFields) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, false)
}
func (z *AssetTransferTxnFields) UnmarshalValidateMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, true)
}
func (_ *AssetTransferTxnFields) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*AssetTransferTxnFields)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AssetTransferTxnFields) Msgsize() (s int) {
	s = 1 + 5 + (*z).XferAsset.Msgsize() + 5 + msgp.Uint64Size + 5 + (*z).AssetSender.Msgsize() + 5 + (*z).AssetReceiver.Msgsize() + 7 + (*z).AssetCloseTo.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *AssetTransferTxnFields) MsgIsZero() bool {
	return ((*z).XferAsset.MsgIsZero()) && ((*z).AssetAmount == 0) && ((*z).AssetSender.MsgIsZero()) && ((*z).AssetReceiver.MsgIsZero()) && ((*z).AssetCloseTo.MsgIsZero())
}

// MaxSize returns a maximum valid message size for this message type
func AssetTransferTxnFieldsMaxSize() (s int) {
	s = 1 + 5 + basics.AssetIndexMaxSize() + 5 + msgp.Uint64Size + 5 + basics.AddressMaxSize() + 5 + basics.AddressMaxSize() + 7 + basics.AddressMaxSize()
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BoxRef) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 3 bits */
	if (*z).Index == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if len((*z).Name) == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "i"
			o = append(o, 0xa1, 0x69)
			o = msgp.AppendUint64(o, (*z).Index)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "n"
			o = append(o, 0xa1, 0x6e)
			o = msgp.AppendBytes(o, (*z).Name)
		}
	}
	return
}

func (_ *BoxRef) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*BoxRef)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BoxRef) unmarshalMsg(bts []byte, validate bool) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0003 string
	var zb0004 bool
	var zb0002 bool
	_ = zb0003
	_ = zb0004
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if validate {
			err = &msgp.ErrNonCanonical{}
			return
		}
		if zb0001 > 0 {
			zb0001--
			(*z).Index, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Index")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			var zb0005 int
			zb0005, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Name")
				return
			}
			if zb0005 > config.MaxBytesKeyValueLen {
				err = msgp.ErrOverflow(uint64(zb0005), uint64(config.MaxBytesKeyValueLen))
				return
			}
			(*z).Name, bts, err = msgp.ReadBytesBytes(bts, (*z).Name)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Name")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = BoxRef{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "i":
				if validate && zb0004 && "i" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				(*z).Index, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Index")
					return
				}
				zb0003 = "i"
			case "n":
				if validate && zb0004 && "n" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0006 int
				zb0006, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Name")
					return
				}
				if zb0006 > config.MaxBytesKeyValueLen {
					err = msgp.ErrOverflow(uint64(zb0006), uint64(config.MaxBytesKeyValueLen))
					return
				}
				(*z).Name, bts, err = msgp.ReadBytesBytes(bts, (*z).Name)
				if err != nil {
					err = msgp.WrapError(err, "Name")
					return
				}
				zb0003 = "n"
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
			zb0004 = true
		}
	}
	o = bts
	return
}

func (z *BoxRef) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, false)
}
func (z *BoxRef) UnmarshalValidateMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, true)
}
func (_ *BoxRef) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*BoxRef)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BoxRef) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint64Size + 2 + msgp.BytesPrefixSize + len((*z).Name)
	return
}

// MsgIsZero returns whether this is a zero value
func (z *BoxRef) MsgIsZero() bool {
	return ((*z).Index == 0) && (len((*z).Name) == 0)
}

// MaxSize returns a maximum valid message size for this message type
func BoxRefMaxSize() (s int) {
	s = 1 + 2 + msgp.Uint64Size + 2 + msgp.BytesPrefixSize + config.MaxBytesKeyValueLen
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EvalDelta) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0006Len := uint32(5)
	var zb0006Mask uint8 /* 6 bits */
	if (*z).GlobalDelta.MsgIsZero() {
		zb0006Len--
		zb0006Mask |= 0x2
	}
	if len((*z).InnerTxns) == 0 {
		zb0006Len--
		zb0006Mask |= 0x4
	}
	if len((*z).LocalDeltas) == 0 {
		zb0006Len--
		zb0006Mask |= 0x8
	}
	if len((*z).Logs) == 0 {
		zb0006Len--
		zb0006Mask |= 0x10
	}
	if len((*z).SharedAccts) == 0 {
		zb0006Len--
		zb0006Mask |= 0x20
	}
	// variable map header, size zb0006Len
	o = append(o, 0x80|uint8(zb0006Len))
	if zb0006Len != 0 {
		if (zb0006Mask & 0x2) == 0 { // if not empty
			// string "gd"
			o = append(o, 0xa2, 0x67, 0x64)
			o = (*z).GlobalDelta.MarshalMsg(o)
		}
		if (zb0006Mask & 0x4) == 0 { // if not empty
			// string "itx"
			o = append(o, 0xa3, 0x69, 0x74, 0x78)
			if (*z).InnerTxns == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).InnerTxns)))
			}
			for zb0005 := range (*z).InnerTxns {
				o = (*z).InnerTxns[zb0005].MarshalMsg(o)
			}
		}
		if (zb0006Mask & 0x8) == 0 { // if not empty
			// string "ld"
			o = append(o, 0xa2, 0x6c, 0x64)
			if (*z).LocalDeltas == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendMapHeader(o, uint32(len((*z).LocalDeltas)))
			}
			zb0001_keys := make([]uint64, 0, len((*z).LocalDeltas))
			for zb0001 := range (*z).LocalDeltas {
				zb0001_keys = append(zb0001_keys, zb0001)
			}
			sort.Sort(SortUint64(zb0001_keys))
			for _, zb0001 := range zb0001_keys {
				zb0002 := (*z).LocalDeltas[zb0001]
				_ = zb0002
				o = msgp.AppendUint64(o, zb0001)
				o = zb0002.MarshalMsg(o)
			}
		}
		if (zb0006Mask & 0x10) == 0 { // if not empty
			// string "lg"
			o = append(o, 0xa2, 0x6c, 0x67)
			if (*z).Logs == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Logs)))
			}
			for zb0004 := range (*z).Logs {
				o = msgp.AppendString(o, (*z).Logs[zb0004])
			}
		}
		if (zb0006Mask & 0x20) == 0 { // if not empty
			// string "sa"
			o = append(o, 0xa2, 0x73, 0x61)
			if (*z).SharedAccts == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).SharedAccts)))
			}
			for zb0003 := range (*z).SharedAccts {
				o = (*z).SharedAccts[zb0003].MarshalMsg(o)
			}
		}
	}
	return
}

func (_ *EvalDelta) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*EvalDelta)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EvalDelta) unmarshalMsg(bts []byte, validate bool) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0006 int
	var zb0008 string
	var zb0009 bool
	var zb0007 bool
	_ = zb0008
	_ = zb0009
	zb0006, zb0007, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0006, zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if validate {
			err = &msgp.ErrNonCanonical{}
			return
		}
		if zb0006 > 0 {
			zb0006--
			bts, err = (*z).GlobalDelta.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GlobalDelta")
				return
			}
		}
		if zb0006 > 0 {
			zb0006--
			var zb0010 int
			var zb0011 bool
			zb0010, zb0011, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LocalDeltas")
				return
			}
			if zb0010 > config.MaxEvalDeltaAccounts {
				err = msgp.ErrOverflow(uint64(zb0010), uint64(config.MaxEvalDeltaAccounts))
				err = msgp.WrapError(err, "struct-from-array", "LocalDeltas")
				return
			}
			if zb0011 {
				(*z).LocalDeltas = nil
			} else if (*z).LocalDeltas == nil {
				(*z).LocalDeltas = make(map[uint64]basics.StateDelta, zb0010)
			}
			var zb0012 uint64
			_ = zb0012
			var zb0013 bool
			_ = zb0013
			for zb0010 > 0 {
				var zb0001 uint64
				var zb0002 basics.StateDelta
				zb0010--
				zb0001, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "LocalDeltas")
					return
				}
				if validate && zb0013 && Uint64Less(zb0001, zb0012) {
					err = &msgp.ErrNonCanonical{}
					return
				}
				zb0012 = zb0001
				zb0013 = true
				bts, err = zb0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "LocalDeltas", zb0001)
					return
				}
				(*z).LocalDeltas[zb0001] = zb0002
			}
		}
		if zb0006 > 0 {
			zb0006--
			var zb0014 int
			var zb0015 bool
			zb0014, zb0015, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SharedAccts")
				return
			}
			if zb0014 > config.MaxEvalDeltaAccounts {
				err = msgp.ErrOverflow(uint64(zb0014), uint64(config.MaxEvalDeltaAccounts))
				err = msgp.WrapError(err, "struct-from-array", "SharedAccts")
				return
			}
			if zb0015 {
				(*z).SharedAccts = nil
			} else if (*z).SharedAccts != nil && cap((*z).SharedAccts) >= zb0014 {
				(*z).SharedAccts = ((*z).SharedAccts)[:zb0014]
			} else {
				(*z).SharedAccts = make([]basics.Address, zb0014)
			}
			for zb0003 := range (*z).SharedAccts {
				bts, err = (*z).SharedAccts[zb0003].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "SharedAccts", zb0003)
					return
				}
			}
		}
		if zb0006 > 0 {
			zb0006--
			var zb0016 int
			var zb0017 bool
			zb0016, zb0017, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Logs")
				return
			}
			if zb0016 > config.MaxLogCalls {
				err = msgp.ErrOverflow(uint64(zb0016), uint64(config.MaxLogCalls))
				err = msgp.WrapError(err, "struct-from-array", "Logs")
				return
			}
			if zb0017 {
				(*z).Logs = nil
			} else if (*z).Logs != nil && cap((*z).Logs) >= zb0016 {
				(*z).Logs = ((*z).Logs)[:zb0016]
			} else {
				(*z).Logs = make([]string, zb0016)
			}
			for zb0004 := range (*z).Logs {
				(*z).Logs[zb0004], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Logs", zb0004)
					return
				}
			}
		}
		if zb0006 > 0 {
			zb0006--
			var zb0018 int
			var zb0019 bool
			zb0018, zb0019, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "InnerTxns")
				return
			}
			if zb0018 > config.MaxInnerTransactionsPerDelta {
				err = msgp.ErrOverflow(uint64(zb0018), uint64(config.MaxInnerTransactionsPerDelta))
				err = msgp.WrapError(err, "struct-from-array", "InnerTxns")
				return
			}
			if zb0019 {
				(*z).InnerTxns = nil
			} else if (*z).InnerTxns != nil && cap((*z).InnerTxns) >= zb0018 {
				(*z).InnerTxns = ((*z).InnerTxns)[:zb0018]
			} else {
				(*z).InnerTxns = make([]SignedTxnWithAD, zb0018)
			}
			for zb0005 := range (*z).InnerTxns {
				bts, err = (*z).InnerTxns[zb0005].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "InnerTxns", zb0005)
					return
				}
			}
		}
		if zb0006 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0006)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0007 {
			(*z) = EvalDelta{}
		}
		for zb0006 > 0 {
			zb0006--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "gd":
				if validate && zb0009 && "gd" < zb0008 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).GlobalDelta.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "GlobalDelta")
					return
				}
				zb0008 = "gd"
			case "ld":
				if validate && zb0009 && "ld" < zb0008 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0020 int
				var zb0021 bool
				zb0020, zb0021, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LocalDeltas")
					return
				}
				if zb0020 > config.MaxEvalDeltaAccounts {
					err = msgp.ErrOverflow(uint64(zb0020), uint64(config.MaxEvalDeltaAccounts))
					err = msgp.WrapError(err, "LocalDeltas")
					return
				}
				if zb0021 {
					(*z).LocalDeltas = nil
				} else if (*z).LocalDeltas == nil {
					(*z).LocalDeltas = make(map[uint64]basics.StateDelta, zb0020)
				}
				var zb0022 uint64
				_ = zb0022
				var zb0023 bool
				_ = zb0023
				for zb0020 > 0 {
					var zb0001 uint64
					var zb0002 basics.StateDelta
					zb0020--
					zb0001, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "LocalDeltas")
						return
					}
					if validate && zb0023 && Uint64Less(zb0001, zb0022) {
						err = &msgp.ErrNonCanonical{}
						return
					}
					zb0022 = zb0001
					zb0023 = true
					bts, err = zb0002.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "LocalDeltas", zb0001)
						return
					}
					(*z).LocalDeltas[zb0001] = zb0002
				}
				zb0008 = "ld"
			case "sa":
				if validate && zb0009 && "sa" < zb0008 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0024 int
				var zb0025 bool
				zb0024, zb0025, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharedAccts")
					return
				}
				if zb0024 > config.MaxEvalDeltaAccounts {
					err = msgp.ErrOverflow(uint64(zb0024), uint64(config.MaxEvalDeltaAccounts))
					err = msgp.WrapError(err, "SharedAccts")
					return
				}
				if zb0025 {
					(*z).SharedAccts = nil
				} else if (*z).SharedAccts != nil && cap((*z).SharedAccts) >= zb0024 {
					(*z).SharedAccts = ((*z).SharedAccts)[:zb0024]
				} else {
					(*z).SharedAccts = make([]basics.Address, zb0024)
				}
				for zb0003 := range (*z).SharedAccts {
					bts, err = (*z).SharedAccts[zb0003].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "SharedAccts", zb0003)
						return
					}
				}
				zb0008 = "sa"
			case "lg":
				if validate && zb0009 && "lg" < zb0008 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0026 int
				var zb0027 bool
				zb0026, zb0027, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Logs")
					return
				}
				if zb0026 > config.MaxLogCalls {
					err = msgp.ErrOverflow(uint64(zb0026), uint64(config.MaxLogCalls))
					err = msgp.WrapError(err, "Logs")
					return
				}
				if zb0027 {
					(*z).Logs = nil
				} else if (*z).Logs != nil && cap((*z).Logs) >= zb0026 {
					(*z).Logs = ((*z).Logs)[:zb0026]
				} else {
					(*z).Logs = make([]string, zb0026)
				}
				for zb0004 := range (*z).Logs {
					(*z).Logs[zb0004], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Logs", zb0004)
						return
					}
				}
				zb0008 = "lg"
			case "itx":
				if validate && zb0009 && "itx" < zb0008 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0028 int
				var zb0029 bool
				zb0028, zb0029, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "InnerTxns")
					return
				}
				if zb0028 > config.MaxInnerTransactionsPerDelta {
					err = msgp.ErrOverflow(uint64(zb0028), uint64(config.MaxInnerTransactionsPerDelta))
					err = msgp.WrapError(err, "InnerTxns")
					return
				}
				if zb0029 {
					(*z).InnerTxns = nil
				} else if (*z).InnerTxns != nil && cap((*z).InnerTxns) >= zb0028 {
					(*z).InnerTxns = ((*z).InnerTxns)[:zb0028]
				} else {
					(*z).InnerTxns = make([]SignedTxnWithAD, zb0028)
				}
				for zb0005 := range (*z).InnerTxns {
					bts, err = (*z).InnerTxns[zb0005].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "InnerTxns", zb0005)
						return
					}
				}
				zb0008 = "itx"
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
			zb0009 = true
		}
	}
	o = bts
	return
}

func (z *EvalDelta) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, false)
}
func (z *EvalDelta) UnmarshalValidateMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, true)
}
func (_ *EvalDelta) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*EvalDelta)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EvalDelta) Msgsize() (s int) {
	s = 1 + 3 + (*z).GlobalDelta.Msgsize() + 3 + msgp.MapHeaderSize
	if (*z).LocalDeltas != nil {
		for zb0001, zb0002 := range (*z).LocalDeltas {
			_ = zb0001
			_ = zb0002
			s += 0 + msgp.Uint64Size + zb0002.Msgsize()
		}
	}
	s += 3 + msgp.ArrayHeaderSize
	for zb0003 := range (*z).SharedAccts {
		s += (*z).SharedAccts[zb0003].Msgsize()
	}
	s += 3 + msgp.ArrayHeaderSize
	for zb0004 := range (*z).Logs {
		s += msgp.StringPrefixSize + len((*z).Logs[zb0004])
	}
	s += 4 + msgp.ArrayHeaderSize
	for zb0005 := range (*z).InnerTxns {
		s += (*z).InnerTxns[zb0005].Msgsize()
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z *EvalDelta) MsgIsZero() bool {
	return ((*z).GlobalDelta.MsgIsZero()) && (len((*z).LocalDeltas) == 0) && (len((*z).SharedAccts) == 0) && (len((*z).Logs) == 0) && (len((*z).InnerTxns) == 0)
}

// MaxSize returns a maximum valid message size for this message type
func EvalDeltaMaxSize() (s int) {
	s = 1 + 3 + basics.StateDeltaMaxSize() + 3
	s += msgp.MapHeaderSize
	// Adding size of map keys for z.LocalDeltas
	s += config.MaxEvalDeltaAccounts * (msgp.Uint64Size)
	// Adding size of map values for z.LocalDeltas
	s += config.MaxEvalDeltaAccounts * (basics.StateDeltaMaxSize())
	s += 3
	// Calculating size of slice: z.SharedAccts
	s += msgp.ArrayHeaderSize + ((config.MaxEvalDeltaAccounts) * (basics.AddressMaxSize()))
	s += 3
	// Calculating size of slice: z.Logs
	s += msgp.ArrayHeaderSize + (config.MaxLogCalls * msgp.StringPrefixSize) + config.MaxEvalDeltaTotalLogSize + 4
	// Calculating size of slice: z.InnerTxns
	s += msgp.ArrayHeaderSize + ((config.MaxInnerTransactionsPerDelta) * (SignedTxnWithADMaxSize()))
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Header) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0002Len := uint32(10)
	var zb0002Mask uint16 /* 11 bits */
	if (*z).Fee.MsgIsZero() {
		zb0002Len--
		zb0002Mask |= 0x2
	}
	if (*z).FirstValid.MsgIsZero() {
		zb0002Len--
		zb0002Mask |= 0x4
	}
	if (*z).GenesisID == "" {
		zb0002Len--
		zb0002Mask |= 0x8
	}
	if (*z).GenesisHash.MsgIsZero() {
		zb0002Len--
		zb0002Mask |= 0x10
	}
	if (*z).Group.MsgIsZero() {
		zb0002Len--
		zb0002Mask |= 0x20
	}
	if (*z).LastValid.MsgIsZero() {
		zb0002Len--
		zb0002Mask |= 0x40
	}
	if (*z).Lease == ([32]byte{}) {
		zb0002Len--
		zb0002Mask |= 0x80
	}
	if len((*z).Note) == 0 {
		zb0002Len--
		zb0002Mask |= 0x100
	}
	if (*z).RekeyTo.MsgIsZero() {
		zb0002Len--
		zb0002Mask |= 0x200
	}
	if (*z).Sender.MsgIsZero() {
		zb0002Len--
		zb0002Mask |= 0x400
	}
	// variable map header, size zb0002Len
	o = append(o, 0x80|uint8(zb0002Len))
	if zb0002Len != 0 {
		if (zb0002Mask & 0x2) == 0 { // if not empty
			// string "fee"
			o = append(o, 0xa3, 0x66, 0x65, 0x65)
			o = (*z).Fee.MarshalMsg(o)
		}
		if (zb0002Mask & 0x4) == 0 { // if not empty
			// string "fv"
			o = append(o, 0xa2, 0x66, 0x76)
			o = (*z).FirstValid.MarshalMsg(o)
		}
		if (zb0002Mask & 0x8) == 0 { // if not empty
			// string "gen"
			o = append(o, 0xa3, 0x67, 0x65, 0x6e)
			o = msgp.AppendString(o, (*z).GenesisID)
		}
		if (zb0002Mask & 0x10) == 0 { // if not empty
			// string "gh"
			o = append(o, 0xa2, 0x67, 0x68)
			o = (*z).GenesisHash.MarshalMsg(o)
		}
		if (zb0002Mask & 0x20) == 0 { // if not empty
			// string "grp"
			o = append(o, 0xa3, 0x67, 0x72, 0x70)
			o = (*z).Group.MarshalMsg(o)
		}
		if (zb0002Mask & 0x40) == 0 { // if not empty
			// string "lv"
			o = append(o, 0xa2, 0x6c, 0x76)
			o = (*z).LastValid.MarshalMsg(o)
		}
		if (zb0002Mask & 0x80) == 0 { // if not empty
			// string "lx"
			o = append(o, 0xa2, 0x6c, 0x78)
			o = msgp.AppendBytes(o, ((*z).Lease)[:])
		}
		if (zb0002Mask & 0x100) == 0 { // if not empty
			// string "note"
			o = append(o, 0xa4, 0x6e, 0x6f, 0x74, 0x65)
			o = msgp.AppendBytes(o, (*z).Note)
		}
		if (zb0002Mask & 0x200) == 0 { // if not empty
			// string "rekey"
			o = append(o, 0xa5, 0x72, 0x65, 0x6b, 0x65, 0x79)
			o = (*z).RekeyTo.MarshalMsg(o)
		}
		if (zb0002Mask & 0x400) == 0 { // if not empty
			// string "snd"
			o = append(o, 0xa3, 0x73, 0x6e, 0x64)
			o = (*z).Sender.MarshalMsg(o)
		}
	}
	return
}

func (_ *Header) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*Header)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Header) unmarshalMsg(bts []byte, validate bool) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0002 int
	var zb0004 string
	var zb0005 bool
	var zb0003 bool
	_ = zb0004
	_ = zb0005
	zb0002, zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0002, zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if validate {
			err = &msgp.ErrNonCanonical{}
			return
		}
		if zb0002 > 0 {
			zb0002--
			bts, err = (*z).Sender.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Sender")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			bts, err = (*z).Fee.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Fee")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			bts, err = (*z).FirstValid.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FirstValid")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			bts, err = (*z).LastValid.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LastValid")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			var zb0006 int
			zb0006, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Note")
				return
			}
			if zb0006 > config.MaxTxnNoteBytes {
				err = msgp.ErrOverflow(uint64(zb0006), uint64(config.MaxTxnNoteBytes))
				return
			}
			(*z).Note, bts, err = msgp.ReadBytesBytes(bts, (*z).Note)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Note")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			var zb0007 int
			zb0007, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GenesisID")
				return
			}
			if zb0007 > config.MaxGenesisIDLen {
				err = msgp.ErrOverflow(uint64(zb0007), uint64(config.MaxGenesisIDLen))
				return
			}
			(*z).GenesisID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GenesisID")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			bts, err = (*z).GenesisHash.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GenesisHash")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			bts, err = (*z).Group.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Group")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			bts, err = msgp.ReadExactBytes(bts, ((*z).Lease)[:])
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Lease")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			bts, err = (*z).RekeyTo.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RekeyTo")
				return
			}
		}
		if zb0002 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0002)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0003 {
			(*z) = Header{}
		}
		for zb0002 > 0 {
			zb0002--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "snd":
				if validate && zb0005 && "snd" < zb0004 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Sender.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sender")
					return
				}
				zb0004 = "snd"
			case "fee":
				if validate && zb0005 && "fee" < zb0004 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Fee.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Fee")
					return
				}
				zb0004 = "fee"
			case "fv":
				if validate && zb0005 && "fv" < zb0004 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).FirstValid.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "FirstValid")
					return
				}
				zb0004 = "fv"
			case "lv":
				if validate && zb0005 && "lv" < zb0004 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).LastValid.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "LastValid")
					return
				}
				zb0004 = "lv"
			case "note":
				if validate && zb0005 && "note" < zb0004 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0008 int
				zb0008, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Note")
					return
				}
				if zb0008 > config.MaxTxnNoteBytes {
					err = msgp.ErrOverflow(uint64(zb0008), uint64(config.MaxTxnNoteBytes))
					return
				}
				(*z).Note, bts, err = msgp.ReadBytesBytes(bts, (*z).Note)
				if err != nil {
					err = msgp.WrapError(err, "Note")
					return
				}
				zb0004 = "note"
			case "gen":
				if validate && zb0005 && "gen" < zb0004 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0009 int
				zb0009, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "GenesisID")
					return
				}
				if zb0009 > config.MaxGenesisIDLen {
					err = msgp.ErrOverflow(uint64(zb0009), uint64(config.MaxGenesisIDLen))
					return
				}
				(*z).GenesisID, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "GenesisID")
					return
				}
				zb0004 = "gen"
			case "gh":
				if validate && zb0005 && "gh" < zb0004 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).GenesisHash.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "GenesisHash")
					return
				}
				zb0004 = "gh"
			case "grp":
				if validate && zb0005 && "grp" < zb0004 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Group.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Group")
					return
				}
				zb0004 = "grp"
			case "lx":
				if validate && zb0005 && "lx" < zb0004 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = msgp.ReadExactBytes(bts, ((*z).Lease)[:])
				if err != nil {
					err = msgp.WrapError(err, "Lease")
					return
				}
				zb0004 = "lx"
			case "rekey":
				if validate && zb0005 && "rekey" < zb0004 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).RekeyTo.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "RekeyTo")
					return
				}
				zb0004 = "rekey"
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
			zb0005 = true
		}
	}
	o = bts
	return
}

func (z *Header) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, false)
}
func (z *Header) UnmarshalValidateMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, true)
}
func (_ *Header) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*Header)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Header) Msgsize() (s int) {
	s = 1 + 4 + (*z).Sender.Msgsize() + 4 + (*z).Fee.Msgsize() + 3 + (*z).FirstValid.Msgsize() + 3 + (*z).LastValid.Msgsize() + 5 + msgp.BytesPrefixSize + len((*z).Note) + 4 + msgp.StringPrefixSize + len((*z).GenesisID) + 3 + (*z).GenesisHash.Msgsize() + 4 + (*z).Group.Msgsize() + 3 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 6 + (*z).RekeyTo.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *Header) MsgIsZero() bool {
	return ((*z).Sender.MsgIsZero()) && ((*z).Fee.MsgIsZero()) && ((*z).FirstValid.MsgIsZero()) && ((*z).LastValid.MsgIsZero()) && (len((*z).Note) == 0) && ((*z).GenesisID == "") && ((*z).GenesisHash.MsgIsZero()) && ((*z).Group.MsgIsZero()) && ((*z).Lease == ([32]byte{})) && ((*z).RekeyTo.MsgIsZero())
}

// MaxSize returns a maximum valid message size for this message type
func HeaderMaxSize() (s int) {
	s = 1 + 4 + basics.AddressMaxSize() + 4 + basics.MicroAlgosMaxSize() + 3 + basics.RoundMaxSize() + 3 + basics.RoundMaxSize() + 5 + msgp.BytesPrefixSize + config.MaxTxnNoteBytes + 4 + msgp.StringPrefixSize + config.MaxGenesisIDLen + 3 + crypto.DigestMaxSize() + 4 + crypto.DigestMaxSize() + 3
	// Calculating size of array: z.Lease
	s += msgp.ArrayHeaderSize + ((32) * (msgp.ByteSize))
	s += 6 + basics.AddressMaxSize()
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *KeyregTxnFields) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(7)
	var zb0001Mask uint8 /* 8 bits */
	if (*z).Nonparticipation == false {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).SelectionPK.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if (*z).StateProofPK.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if (*z).VoteFirst.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if (*z).VoteKeyDilution == 0 {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if (*z).VotePK.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if (*z).VoteLast.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "nonpart"
			o = append(o, 0xa7, 0x6e, 0x6f, 0x6e, 0x70, 0x61, 0x72, 0x74)
			o = msgp.AppendBool(o, (*z).Nonparticipation)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "selkey"
			o = append(o, 0xa6, 0x73, 0x65, 0x6c, 0x6b, 0x65, 0x79)
			o = (*z).SelectionPK.MarshalMsg(o)
		}
		if (zb0001Mask & 0x8) == 0 { // if not empty
			// string "sprfkey"
			o = append(o, 0xa7, 0x73, 0x70, 0x72, 0x66, 0x6b, 0x65, 0x79)
			o = (*z).StateProofPK.MarshalMsg(o)
		}
		if (zb0001Mask & 0x10) == 0 { // if not empty
			// string "votefst"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x66, 0x73, 0x74)
			o = (*z).VoteFirst.MarshalMsg(o)
		}
		if (zb0001Mask & 0x20) == 0 { // if not empty
			// string "votekd"
			o = append(o, 0xa6, 0x76, 0x6f, 0x74, 0x65, 0x6b, 0x64)
			o = msgp.AppendUint64(o, (*z).VoteKeyDilution)
		}
		if (zb0001Mask & 0x40) == 0 { // if not empty
			// string "votekey"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x6b, 0x65, 0x79)
			o = (*z).VotePK.MarshalMsg(o)
		}
		if (zb0001Mask & 0x80) == 0 { // if not empty
			// string "votelst"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x6c, 0x73, 0x74)
			o = (*z).VoteLast.MarshalMsg(o)
		}
	}
	return
}

func (_ *KeyregTxnFields) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*KeyregTxnFields)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *KeyregTxnFields) unmarshalMsg(bts []byte, validate bool) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0003 string
	var zb0004 bool
	var zb0002 bool
	_ = zb0003
	_ = zb0004
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if validate {
			err = &msgp.ErrNonCanonical{}
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).VotePK.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VotePK")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).SelectionPK.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SelectionPK")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).StateProofPK.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "StateProofPK")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).VoteFirst.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteFirst")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).VoteLast.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteLast")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).VoteKeyDilution, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteKeyDilution")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).Nonparticipation, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Nonparticipation")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = KeyregTxnFields{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "votekey":
				if validate && zb0004 && "votekey" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).VotePK.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "VotePK")
					return
				}
				zb0003 = "votekey"
			case "selkey":
				if validate && zb0004 && "selkey" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).SelectionPK.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "SelectionPK")
					return
				}
				zb0003 = "selkey"
			case "sprfkey":
				if validate && zb0004 && "sprfkey" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).StateProofPK.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "StateProofPK")
					return
				}
				zb0003 = "sprfkey"
			case "votefst":
				if validate && zb0004 && "votefst" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).VoteFirst.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteFirst")
					return
				}
				zb0003 = "votefst"
			case "votelst":
				if validate && zb0004 && "votelst" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).VoteLast.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteLast")
					return
				}
				zb0003 = "votelst"
			case "votekd":
				if validate && zb0004 && "votekd" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				(*z).VoteKeyDilution, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteKeyDilution")
					return
				}
				zb0003 = "votekd"
			case "nonpart":
				if validate && zb0004 && "nonpart" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				(*z).Nonparticipation, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Nonparticipation")
					return
				}
				zb0003 = "nonpart"
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
			zb0004 = true
		}
	}
	o = bts
	return
}

func (z *KeyregTxnFields) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, false)
}
func (z *KeyregTxnFields) UnmarshalValidateMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, true)
}
func (_ *KeyregTxnFields) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*KeyregTxnFields)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *KeyregTxnFields) Msgsize() (s int) {
	s = 1 + 8 + (*z).VotePK.Msgsize() + 7 + (*z).SelectionPK.Msgsize() + 8 + (*z).StateProofPK.Msgsize() + 8 + (*z).VoteFirst.Msgsize() + 8 + (*z).VoteLast.Msgsize() + 7 + msgp.Uint64Size + 8 + msgp.BoolSize
	return
}

// MsgIsZero returns whether this is a zero value
func (z *KeyregTxnFields) MsgIsZero() bool {
	return ((*z).VotePK.MsgIsZero()) && ((*z).SelectionPK.MsgIsZero()) && ((*z).StateProofPK.MsgIsZero()) && ((*z).VoteFirst.MsgIsZero()) && ((*z).VoteLast.MsgIsZero()) && ((*z).VoteKeyDilution == 0) && ((*z).Nonparticipation == false)
}

// MaxSize returns a maximum valid message size for this message type
func KeyregTxnFieldsMaxSize() (s int) {
	s = 1 + 8 + crypto.OneTimeSignatureVerifierMaxSize() + 7 + crypto.VRFVerifierMaxSize() + 8 + merklesignature.CommitmentMaxSize() + 8 + basics.RoundMaxSize() + 8 + basics.RoundMaxSize() + 7 + msgp.Uint64Size + 8 + msgp.BoolSize
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *LogicSig) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0002Len := uint32(4)
	var zb0002Mask uint8 /* 5 bits */
	if len((*z).Args) == 0 {
		zb0002Len--
		zb0002Mask |= 0x2
	}
	if len((*z).Logic) == 0 {
		zb0002Len--
		zb0002Mask |= 0x4
	}
	if (*z).Msig.MsgIsZero() {
		zb0002Len--
		zb0002Mask |= 0x8
	}
	if (*z).Sig.MsgIsZero() {
		zb0002Len--
		zb0002Mask |= 0x10
	}
	// variable map header, size zb0002Len
	o = append(o, 0x80|uint8(zb0002Len))
	if zb0002Len != 0 {
		if (zb0002Mask & 0x2) == 0 { // if not empty
			// string "arg"
			o = append(o, 0xa3, 0x61, 0x72, 0x67)
			if (*z).Args == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).Args)))
			}
			for zb0001 := range (*z).Args {
				o = msgp.AppendBytes(o, (*z).Args[zb0001])
			}
		}
		if (zb0002Mask & 0x4) == 0 { // if not empty
			// string "l"
			o = append(o, 0xa1, 0x6c)
			o = msgp.AppendBytes(o, (*z).Logic)
		}
		if (zb0002Mask & 0x8) == 0 { // if not empty
			// string "msig"
			o = append(o, 0xa4, 0x6d, 0x73, 0x69, 0x67)
			o = (*z).Msig.MarshalMsg(o)
		}
		if (zb0002Mask & 0x10) == 0 { // if not empty
			// string "sig"
			o = append(o, 0xa3, 0x73, 0x69, 0x67)
			o = (*z).Sig.MarshalMsg(o)
		}
	}
	return
}

func (_ *LogicSig) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*LogicSig)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LogicSig) unmarshalMsg(bts []byte, validate bool) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0002 int
	var zb0004 string
	var zb0005 bool
	var zb0003 bool
	_ = zb0004
	_ = zb0005
	zb0002, zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0002, zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if validate {
			err = &msgp.ErrNonCanonical{}
			return
		}
		if zb0002 > 0 {
			zb0002--
			var zb0006 int
			zb0006, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Logic")
				return
			}
			if zb0006 > config.MaxLogicSigMaxSize {
				err = msgp.ErrOverflow(uint64(zb0006), uint64(config.MaxLogicSigMaxSize))
				return
			}
			(*z).Logic, bts, err = msgp.ReadBytesBytes(bts, (*z).Logic)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Logic")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			bts, err = (*z).Sig.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Sig")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			bts, err = (*z).Msig.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Msig")
				return
			}
		}
		if zb0002 > 0 {
			zb0002--
			var zb0007 int
			var zb0008 bool
			zb0007, zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Args")
				return
			}
			if zb0007 > EvalMaxArgs {
				err = msgp.ErrOverflow(uint64(zb0007), uint64(EvalMaxArgs))
				err = msgp.WrapError(err, "struct-from-array", "Args")
				return
			}
			if zb0008 {
				(*z).Args = nil
			} else if (*z).Args != nil && cap((*z).Args) >= zb0007 {
				(*z).Args = ((*z).Args)[:zb0007]
			} else {
				(*z).Args = make([][]byte, zb0007)
			}
			for zb0001 := range (*z).Args {
				var zb0009 int
				zb0009, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Args", zb0001)
					return
				}
				if zb0009 > config.MaxLogicSigMaxSize {
					err = msgp.ErrOverflow(uint64(zb0009), uint64(config.MaxLogicSigMaxSize))
					return
				}
				(*z).Args[zb0001], bts, err = msgp.ReadBytesBytes(bts, (*z).Args[zb0001])
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Args", zb0001)
					return
				}
			}
		}
		if zb0002 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0002)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0003 {
			(*z) = LogicSig{}
		}
		for zb0002 > 0 {
			zb0002--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "l":
				if validate && zb0005 && "l" < zb0004 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0010 int
				zb0010, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Logic")
					return
				}
				if zb0010 > config.MaxLogicSigMaxSize {
					err = msgp.ErrOverflow(uint64(zb0010), uint64(config.MaxLogicSigMaxSize))
					return
				}
				(*z).Logic, bts, err = msgp.ReadBytesBytes(bts, (*z).Logic)
				if err != nil {
					err = msgp.WrapError(err, "Logic")
					return
				}
				zb0004 = "l"
			case "sig":
				if validate && zb0005 && "sig" < zb0004 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Sig.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sig")
					return
				}
				zb0004 = "sig"
			case "msig":
				if validate && zb0005 && "msig" < zb0004 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Msig.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Msig")
					return
				}
				zb0004 = "msig"
			case "arg":
				if validate && zb0005 && "arg" < zb0004 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0011 int
				var zb0012 bool
				zb0011, zb0012, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Args")
					return
				}
				if zb0011 > EvalMaxArgs {
					err = msgp.ErrOverflow(uint64(zb0011), uint64(EvalMaxArgs))
					err = msgp.WrapError(err, "Args")
					return
				}
				if zb0012 {
					(*z).Args = nil
				} else if (*z).Args != nil && cap((*z).Args) >= zb0011 {
					(*z).Args = ((*z).Args)[:zb0011]
				} else {
					(*z).Args = make([][]byte, zb0011)
				}
				for zb0001 := range (*z).Args {
					var zb0013 int
					zb0013, err = msgp.ReadBytesBytesHeader(bts)
					if err != nil {
						err = msgp.WrapError(err, "Args", zb0001)
						return
					}
					if zb0013 > config.MaxLogicSigMaxSize {
						err = msgp.ErrOverflow(uint64(zb0013), uint64(config.MaxLogicSigMaxSize))
						return
					}
					(*z).Args[zb0001], bts, err = msgp.ReadBytesBytes(bts, (*z).Args[zb0001])
					if err != nil {
						err = msgp.WrapError(err, "Args", zb0001)
						return
					}
				}
				zb0004 = "arg"
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
			zb0005 = true
		}
	}
	o = bts
	return
}

func (z *LogicSig) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, false)
}
func (z *LogicSig) UnmarshalValidateMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, true)
}
func (_ *LogicSig) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*LogicSig)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *LogicSig) Msgsize() (s int) {
	s = 1 + 2 + msgp.BytesPrefixSize + len((*z).Logic) + 4 + (*z).Sig.Msgsize() + 5 + (*z).Msig.Msgsize() + 4 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).Args {
		s += msgp.BytesPrefixSize + len((*z).Args[zb0001])
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z *LogicSig) MsgIsZero() bool {
	return (len((*z).Logic) == 0) && ((*z).Sig.MsgIsZero()) && ((*z).Msig.MsgIsZero()) && (len((*z).Args) == 0)
}

// MaxSize returns a maximum valid message size for this message type
func LogicSigMaxSize() (s int) {
	s = 1 + 2 + msgp.BytesPrefixSize + config.MaxLogicSigMaxSize + 4 + crypto.SignatureMaxSize() + 5 + crypto.MultisigSigMaxSize() + 4
	// Calculating size of slice: z.Args
	s += msgp.ArrayHeaderSize + ((EvalMaxArgs) * (msgp.BytesPrefixSize + config.MaxLogicSigMaxSize))
	return
}

// MarshalMsg implements msgp.Marshaler
func (z OnCompletion) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint64(o, uint64(z))
	return
}

func (_ OnCompletion) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(OnCompletion)
	if !ok {
		_, ok = (z).(*OnCompletion)
	}
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OnCompletion) unmarshalMsg(bts []byte, validate bool) (o []byte, err error) {
	{
		var zb0001 uint64
		zb0001, bts, err = msgp.ReadUint64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = OnCompletion(zb0001)
	}
	o = bts
	return
}

func (z *OnCompletion) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, false)
}
func (z *OnCompletion) UnmarshalValidateMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, true)
}
func (_ *OnCompletion) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*OnCompletion)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z OnCompletion) Msgsize() (s int) {
	s = msgp.Uint64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z OnCompletion) MsgIsZero() bool {
	return z == 0
}

// MaxSize returns a maximum valid message size for this message type
func OnCompletionMaxSize() (s int) {
	s = msgp.Uint64Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PaymentTxnFields) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(3)
	var zb0001Mask uint8 /* 4 bits */
	if (*z).Amount.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).CloseRemainderTo.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if (*z).Receiver.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "amt"
			o = append(o, 0xa3, 0x61, 0x6d, 0x74)
			o = (*z).Amount.MarshalMsg(o)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "close"
			o = append(o, 0xa5, 0x63, 0x6c, 0x6f, 0x73, 0x65)
			o = (*z).CloseRemainderTo.MarshalMsg(o)
		}
		if (zb0001Mask & 0x8) == 0 { // if not empty
			// string "rcv"
			o = append(o, 0xa3, 0x72, 0x63, 0x76)
			o = (*z).Receiver.MarshalMsg(o)
		}
	}
	return
}

func (_ *PaymentTxnFields) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*PaymentTxnFields)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PaymentTxnFields) unmarshalMsg(bts []byte, validate bool) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0003 string
	var zb0004 bool
	var zb0002 bool
	_ = zb0003
	_ = zb0004
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if validate {
			err = &msgp.ErrNonCanonical{}
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Receiver.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Receiver")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Amount.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Amount")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).CloseRemainderTo.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CloseRemainderTo")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = PaymentTxnFields{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "rcv":
				if validate && zb0004 && "rcv" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Receiver.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Receiver")
					return
				}
				zb0003 = "rcv"
			case "amt":
				if validate && zb0004 && "amt" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Amount.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Amount")
					return
				}
				zb0003 = "amt"
			case "close":
				if validate && zb0004 && "close" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).CloseRemainderTo.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "CloseRemainderTo")
					return
				}
				zb0003 = "close"
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
			zb0004 = true
		}
	}
	o = bts
	return
}

func (z *PaymentTxnFields) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, false)
}
func (z *PaymentTxnFields) UnmarshalValidateMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, true)
}
func (_ *PaymentTxnFields) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*PaymentTxnFields)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PaymentTxnFields) Msgsize() (s int) {
	s = 1 + 4 + (*z).Receiver.Msgsize() + 4 + (*z).Amount.Msgsize() + 6 + (*z).CloseRemainderTo.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *PaymentTxnFields) MsgIsZero() bool {
	return ((*z).Receiver.MsgIsZero()) && ((*z).Amount.MsgIsZero()) && ((*z).CloseRemainderTo.MsgIsZero())
}

// MaxSize returns a maximum valid message size for this message type
func PaymentTxnFieldsMaxSize() (s int) {
	s = 1 + 4 + basics.AddressMaxSize() + 4 + basics.MicroAlgosMaxSize() + 6 + basics.AddressMaxSize()
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Payset) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	if z == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendArrayHeader(o, uint32(len(z)))
	}
	for za0001 := range z {
		o = z[za0001].MarshalMsg(o)
	}
	return
}

func (_ Payset) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(Payset)
	if !ok {
		_, ok = (z).(*Payset)
	}
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Payset) unmarshalMsg(bts []byte, validate bool) (o []byte, err error) {
	var zb0002 int
	var zb0003 bool
	zb0002, zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0002 > 100000 {
		err = msgp.ErrOverflow(uint64(zb0002), uint64(100000))
		err = msgp.WrapError(err)
		return
	}
	if zb0003 {
		(*z) = nil
	} else if (*z) != nil && cap((*z)) >= zb0002 {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(Payset, zb0002)
	}
	for zb0001 := range *z {
		bts, err = (*z)[zb0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	o = bts
	return
}

func (z *Payset) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, false)
}
func (z *Payset) UnmarshalValidateMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, true)
}
func (_ *Payset) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*Payset)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Payset) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for za0001 := range z {
		s += z[za0001].Msgsize()
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z Payset) MsgIsZero() bool {
	return len(z) == 0
}

// MaxSize returns a maximum valid message size for this message type
func PaysetMaxSize() (s int) {
	// Calculating size of slice: z
	s += msgp.ArrayHeaderSize + ((100000) * (SignedTxnInBlockMaxSize()))
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SignedTxn) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(5)
	var zb0001Mask uint8 /* 6 bits */
	if (*z).Lsig.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).Msig.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if (*z).AuthAddr.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if (*z).Sig.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if (*z).Txn.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "lsig"
			o = append(o, 0xa4, 0x6c, 0x73, 0x69, 0x67)
			o = (*z).Lsig.MarshalMsg(o)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "msig"
			o = append(o, 0xa4, 0x6d, 0x73, 0x69, 0x67)
			o = (*z).Msig.MarshalMsg(o)
		}
		if (zb0001Mask & 0x8) == 0 { // if not empty
			// string "sgnr"
			o = append(o, 0xa4, 0x73, 0x67, 0x6e, 0x72)
			o = (*z).AuthAddr.MarshalMsg(o)
		}
		if (zb0001Mask & 0x10) == 0 { // if not empty
			// string "sig"
			o = append(o, 0xa3, 0x73, 0x69, 0x67)
			o = (*z).Sig.MarshalMsg(o)
		}
		if (zb0001Mask & 0x20) == 0 { // if not empty
			// string "txn"
			o = append(o, 0xa3, 0x74, 0x78, 0x6e)
			o = (*z).Txn.MarshalMsg(o)
		}
	}
	return
}

func (_ *SignedTxn) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*SignedTxn)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SignedTxn) unmarshalMsg(bts []byte, validate bool) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0003 string
	var zb0004 bool
	var zb0002 bool
	_ = zb0003
	_ = zb0004
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if validate {
			err = &msgp.ErrNonCanonical{}
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Sig.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Sig")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Msig.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Msig")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Lsig.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Lsig")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Txn.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Txn")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).AuthAddr.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AuthAddr")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = SignedTxn{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "sig":
				if validate && zb0004 && "sig" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Sig.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sig")
					return
				}
				zb0003 = "sig"
			case "msig":
				if validate && zb0004 && "msig" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Msig.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Msig")
					return
				}
				zb0003 = "msig"
			case "lsig":
				if validate && zb0004 && "lsig" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Lsig.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Lsig")
					return
				}
				zb0003 = "lsig"
			case "txn":
				if validate && zb0004 && "txn" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Txn.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Txn")
					return
				}
				zb0003 = "txn"
			case "sgnr":
				if validate && zb0004 && "sgnr" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).AuthAddr.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "AuthAddr")
					return
				}
				zb0003 = "sgnr"
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
			zb0004 = true
		}
	}
	o = bts
	return
}

func (z *SignedTxn) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, false)
}
func (z *SignedTxn) UnmarshalValidateMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, true)
}
func (_ *SignedTxn) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*SignedTxn)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SignedTxn) Msgsize() (s int) {
	s = 1 + 4 + (*z).Sig.Msgsize() + 5 + (*z).Msig.Msgsize() + 5 + (*z).Lsig.Msgsize() + 4 + (*z).Txn.Msgsize() + 5 + (*z).AuthAddr.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *SignedTxn) MsgIsZero() bool {
	return ((*z).Sig.MsgIsZero()) && ((*z).Msig.MsgIsZero()) && ((*z).Lsig.MsgIsZero()) && ((*z).Txn.MsgIsZero()) && ((*z).AuthAddr.MsgIsZero())
}

// MaxSize returns a maximum valid message size for this message type
func SignedTxnMaxSize() (s int) {
	s = 1 + 4 + crypto.SignatureMaxSize() + 5 + crypto.MultisigSigMaxSize() + 5 + LogicSigMaxSize() + 4 + TransactionMaxSize() + 5 + basics.AddressMaxSize()
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SignedTxnInBlock) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(15)
	var zb0001Mask uint32 /* 19 bits */
	if (*z).SignedTxnWithAD.ApplyData.AssetClosingAmount == 0 {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if (*z).SignedTxnWithAD.ApplyData.ApplicationID.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if (*z).SignedTxnWithAD.ApplyData.ClosingAmount.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if (*z).SignedTxnWithAD.ApplyData.ConfigAsset.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	if (*z).SignedTxnWithAD.ApplyData.EvalDelta.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	if (*z).HasGenesisHash == false {
		zb0001Len--
		zb0001Mask |= 0x200
	}
	if (*z).HasGenesisID == false {
		zb0001Len--
		zb0001Mask |= 0x400
	}
	if (*z).SignedTxnWithAD.SignedTxn.Lsig.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x800
	}
	if (*z).SignedTxnWithAD.SignedTxn.Msig.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x1000
	}
	if (*z).SignedTxnWithAD.ApplyData.CloseRewards.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x2000
	}
	if (*z).SignedTxnWithAD.ApplyData.ReceiverRewards.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x4000
	}
	if (*z).SignedTxnWithAD.ApplyData.SenderRewards.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x8000
	}
	if (*z).SignedTxnWithAD.SignedTxn.AuthAddr.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x10000
	}
	if (*z).SignedTxnWithAD.SignedTxn.Sig.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x20000
	}
	if (*z).SignedTxnWithAD.SignedTxn.Txn.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x40000
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x10) == 0 { // if not empty
			// string "aca"
			o = append(o, 0xa3, 0x61, 0x63, 0x61)
			o = msgp.AppendUint64(o, (*z).SignedTxnWithAD.ApplyData.AssetClosingAmount)
		}
		if (zb0001Mask & 0x20) == 0 { // if not empty
			// string "apid"
			o = append(o, 0xa4, 0x61, 0x70, 0x69, 0x64)
			o = (*z).SignedTxnWithAD.ApplyData.ApplicationID.MarshalMsg(o)
		}
		if (zb0001Mask & 0x40) == 0 { // if not empty
			// string "ca"
			o = append(o, 0xa2, 0x63, 0x61)
			o = (*z).SignedTxnWithAD.ApplyData.ClosingAmount.MarshalMsg(o)
		}
		if (zb0001Mask & 0x80) == 0 { // if not empty
			// string "caid"
			o = append(o, 0xa4, 0x63, 0x61, 0x69, 0x64)
			o = (*z).SignedTxnWithAD.ApplyData.ConfigAsset.MarshalMsg(o)
		}
		if (zb0001Mask & 0x100) == 0 { // if not empty
			// string "dt"
			o = append(o, 0xa2, 0x64, 0x74)
			o = (*z).SignedTxnWithAD.ApplyData.EvalDelta.MarshalMsg(o)
		}
		if (zb0001Mask & 0x200) == 0 { // if not empty
			// string "hgh"
			o = append(o, 0xa3, 0x68, 0x67, 0x68)
			o = msgp.AppendBool(o, (*z).HasGenesisHash)
		}
		if (zb0001Mask & 0x400) == 0 { // if not empty
			// string "hgi"
			o = append(o, 0xa3, 0x68, 0x67, 0x69)
			o = msgp.AppendBool(o, (*z).HasGenesisID)
		}
		if (zb0001Mask & 0x800) == 0 { // if not empty
			// string "lsig"
			o = append(o, 0xa4, 0x6c, 0x73, 0x69, 0x67)
			o = (*z).SignedTxnWithAD.SignedTxn.Lsig.MarshalMsg(o)
		}
		if (zb0001Mask & 0x1000) == 0 { // if not empty
			// string "msig"
			o = append(o, 0xa4, 0x6d, 0x73, 0x69, 0x67)
			o = (*z).SignedTxnWithAD.SignedTxn.Msig.MarshalMsg(o)
		}
		if (zb0001Mask & 0x2000) == 0 { // if not empty
			// string "rc"
			o = append(o, 0xa2, 0x72, 0x63)
			o = (*z).SignedTxnWithAD.ApplyData.CloseRewards.MarshalMsg(o)
		}
		if (zb0001Mask & 0x4000) == 0 { // if not empty
			// string "rr"
			o = append(o, 0xa2, 0x72, 0x72)
			o = (*z).SignedTxnWithAD.ApplyData.ReceiverRewards.MarshalMsg(o)
		}
		if (zb0001Mask & 0x8000) == 0 { // if not empty
			// string "rs"
			o = append(o, 0xa2, 0x72, 0x73)
			o = (*z).SignedTxnWithAD.ApplyData.SenderRewards.MarshalMsg(o)
		}
		if (zb0001Mask & 0x10000) == 0 { // if not empty
			// string "sgnr"
			o = append(o, 0xa4, 0x73, 0x67, 0x6e, 0x72)
			o = (*z).SignedTxnWithAD.SignedTxn.AuthAddr.MarshalMsg(o)
		}
		if (zb0001Mask & 0x20000) == 0 { // if not empty
			// string "sig"
			o = append(o, 0xa3, 0x73, 0x69, 0x67)
			o = (*z).SignedTxnWithAD.SignedTxn.Sig.MarshalMsg(o)
		}
		if (zb0001Mask & 0x40000) == 0 { // if not empty
			// string "txn"
			o = append(o, 0xa3, 0x74, 0x78, 0x6e)
			o = (*z).SignedTxnWithAD.SignedTxn.Txn.MarshalMsg(o)
		}
	}
	return
}

func (_ *SignedTxnInBlock) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*SignedTxnInBlock)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SignedTxnInBlock) unmarshalMsg(bts []byte, validate bool) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0003 string
	var zb0004 bool
	var zb0002 bool
	_ = zb0003
	_ = zb0004
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if validate {
			err = &msgp.ErrNonCanonical{}
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).SignedTxnWithAD.SignedTxn.Sig.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Sig")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).SignedTxnWithAD.SignedTxn.Msig.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Msig")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).SignedTxnWithAD.SignedTxn.Lsig.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Lsig")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).SignedTxnWithAD.SignedTxn.Txn.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Txn")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).SignedTxnWithAD.SignedTxn.AuthAddr.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AuthAddr")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).SignedTxnWithAD.ApplyData.ClosingAmount.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ClosingAmount")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).SignedTxnWithAD.ApplyData.AssetClosingAmount, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetClosingAmount")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).SignedTxnWithAD.ApplyData.SenderRewards.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SenderRewards")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).SignedTxnWithAD.ApplyData.ReceiverRewards.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ReceiverRewards")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).SignedTxnWithAD.ApplyData.CloseRewards.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CloseRewards")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).SignedTxnWithAD.ApplyData.EvalDelta.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "EvalDelta")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).SignedTxnWithAD.ApplyData.ConfigAsset.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ConfigAsset")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).SignedTxnWithAD.ApplyData.ApplicationID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApplicationID")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).HasGenesisID, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "HasGenesisID")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).HasGenesisHash, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "HasGenesisHash")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = SignedTxnInBlock{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "sig":
				if validate && zb0004 && "sig" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).SignedTxnWithAD.SignedTxn.Sig.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sig")
					return
				}
				zb0003 = "sig"
			case "msig":
				if validate && zb0004 && "msig" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).SignedTxnWithAD.SignedTxn.Msig.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Msig")
					return
				}
				zb0003 = "msig"
			case "lsig":
				if validate && zb0004 && "lsig" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).SignedTxnWithAD.SignedTxn.Lsig.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Lsig")
					return
				}
				zb0003 = "lsig"
			case "txn":
				if validate && zb0004 && "txn" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).SignedTxnWithAD.SignedTxn.Txn.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Txn")
					return
				}
				zb0003 = "txn"
			case "sgnr":
				if validate && zb0004 && "sgnr" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).SignedTxnWithAD.SignedTxn.AuthAddr.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "AuthAddr")
					return
				}
				zb0003 = "sgnr"
			case "ca":
				if validate && zb0004 && "ca" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).SignedTxnWithAD.ApplyData.ClosingAmount.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ClosingAmount")
					return
				}
				zb0003 = "ca"
			case "aca":
				if validate && zb0004 && "aca" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				(*z).SignedTxnWithAD.ApplyData.AssetClosingAmount, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetClosingAmount")
					return
				}
				zb0003 = "aca"
			case "rs":
				if validate && zb0004 && "rs" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).SignedTxnWithAD.ApplyData.SenderRewards.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "SenderRewards")
					return
				}
				zb0003 = "rs"
			case "rr":
				if validate && zb0004 && "rr" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).SignedTxnWithAD.ApplyData.ReceiverRewards.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReceiverRewards")
					return
				}
				zb0003 = "rr"
			case "rc":
				if validate && zb0004 && "rc" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).SignedTxnWithAD.ApplyData.CloseRewards.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "CloseRewards")
					return
				}
				zb0003 = "rc"
			case "dt":
				if validate && zb0004 && "dt" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).SignedTxnWithAD.ApplyData.EvalDelta.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "EvalDelta")
					return
				}
				zb0003 = "dt"
			case "caid":
				if validate && zb0004 && "caid" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).SignedTxnWithAD.ApplyData.ConfigAsset.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ConfigAsset")
					return
				}
				zb0003 = "caid"
			case "apid":
				if validate && zb0004 && "apid" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).SignedTxnWithAD.ApplyData.ApplicationID.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApplicationID")
					return
				}
				zb0003 = "apid"
			case "hgi":
				if validate && zb0004 && "hgi" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				(*z).HasGenesisID, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "HasGenesisID")
					return
				}
				zb0003 = "hgi"
			case "hgh":
				if validate && zb0004 && "hgh" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				(*z).HasGenesisHash, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "HasGenesisHash")
					return
				}
				zb0003 = "hgh"
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
			zb0004 = true
		}
	}
	o = bts
	return
}

func (z *SignedTxnInBlock) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, false)
}
func (z *SignedTxnInBlock) UnmarshalValidateMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, true)
}
func (_ *SignedTxnInBlock) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*SignedTxnInBlock)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SignedTxnInBlock) Msgsize() (s int) {
	s = 1 + 4 + (*z).SignedTxnWithAD.SignedTxn.Sig.Msgsize() + 5 + (*z).SignedTxnWithAD.SignedTxn.Msig.Msgsize() + 5 + (*z).SignedTxnWithAD.SignedTxn.Lsig.Msgsize() + 4 + (*z).SignedTxnWithAD.SignedTxn.Txn.Msgsize() + 5 + (*z).SignedTxnWithAD.SignedTxn.AuthAddr.Msgsize() + 3 + (*z).SignedTxnWithAD.ApplyData.ClosingAmount.Msgsize() + 4 + msgp.Uint64Size + 3 + (*z).SignedTxnWithAD.ApplyData.SenderRewards.Msgsize() + 3 + (*z).SignedTxnWithAD.ApplyData.ReceiverRewards.Msgsize() + 3 + (*z).SignedTxnWithAD.ApplyData.CloseRewards.Msgsize() + 3 + (*z).SignedTxnWithAD.ApplyData.EvalDelta.Msgsize() + 5 + (*z).SignedTxnWithAD.ApplyData.ConfigAsset.Msgsize() + 5 + (*z).SignedTxnWithAD.ApplyData.ApplicationID.Msgsize() + 4 + msgp.BoolSize + 4 + msgp.BoolSize
	return
}

// MsgIsZero returns whether this is a zero value
func (z *SignedTxnInBlock) MsgIsZero() bool {
	return ((*z).SignedTxnWithAD.SignedTxn.Sig.MsgIsZero()) && ((*z).SignedTxnWithAD.SignedTxn.Msig.MsgIsZero()) && ((*z).SignedTxnWithAD.SignedTxn.Lsig.MsgIsZero()) && ((*z).SignedTxnWithAD.SignedTxn.Txn.MsgIsZero()) && ((*z).SignedTxnWithAD.SignedTxn.AuthAddr.MsgIsZero()) && ((*z).SignedTxnWithAD.ApplyData.ClosingAmount.MsgIsZero()) && ((*z).SignedTxnWithAD.ApplyData.AssetClosingAmount == 0) && ((*z).SignedTxnWithAD.ApplyData.SenderRewards.MsgIsZero()) && ((*z).SignedTxnWithAD.ApplyData.ReceiverRewards.MsgIsZero()) && ((*z).SignedTxnWithAD.ApplyData.CloseRewards.MsgIsZero()) && ((*z).SignedTxnWithAD.ApplyData.EvalDelta.MsgIsZero()) && ((*z).SignedTxnWithAD.ApplyData.ConfigAsset.MsgIsZero()) && ((*z).SignedTxnWithAD.ApplyData.ApplicationID.MsgIsZero()) && ((*z).HasGenesisID == false) && ((*z).HasGenesisHash == false)
}

// MaxSize returns a maximum valid message size for this message type
func SignedTxnInBlockMaxSize() (s int) {
	s = 1 + 4 + crypto.SignatureMaxSize() + 5 + crypto.MultisigSigMaxSize() + 5 + LogicSigMaxSize() + 4 + TransactionMaxSize() + 5 + basics.AddressMaxSize() + 3 + basics.MicroAlgosMaxSize() + 4 + msgp.Uint64Size + 3 + basics.MicroAlgosMaxSize() + 3 + basics.MicroAlgosMaxSize() + 3 + basics.MicroAlgosMaxSize() + 3 + EvalDeltaMaxSize() + 5 + basics.AssetIndexMaxSize() + 5 + basics.AppIndexMaxSize() + 4 + msgp.BoolSize + 4 + msgp.BoolSize
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SignedTxnWithAD) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(13)
	var zb0001Mask uint16 /* 16 bits */
	if (*z).ApplyData.AssetClosingAmount == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if (*z).ApplyData.ApplicationID.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if (*z).ApplyData.ClosingAmount.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if (*z).ApplyData.ConfigAsset.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if (*z).ApplyData.EvalDelta.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	if (*z).SignedTxn.Lsig.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	if (*z).SignedTxn.Msig.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x200
	}
	if (*z).ApplyData.CloseRewards.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x400
	}
	if (*z).ApplyData.ReceiverRewards.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x800
	}
	if (*z).ApplyData.SenderRewards.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x1000
	}
	if (*z).SignedTxn.AuthAddr.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x2000
	}
	if (*z).SignedTxn.Sig.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x4000
	}
	if (*z).SignedTxn.Txn.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x8000
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x8) == 0 { // if not empty
			// string "aca"
			o = append(o, 0xa3, 0x61, 0x63, 0x61)
			o = msgp.AppendUint64(o, (*z).ApplyData.AssetClosingAmount)
		}
		if (zb0001Mask & 0x10) == 0 { // if not empty
			// string "apid"
			o = append(o, 0xa4, 0x61, 0x70, 0x69, 0x64)
			o = (*z).ApplyData.ApplicationID.MarshalMsg(o)
		}
		if (zb0001Mask & 0x20) == 0 { // if not empty
			// string "ca"
			o = append(o, 0xa2, 0x63, 0x61)
			o = (*z).ApplyData.ClosingAmount.MarshalMsg(o)
		}
		if (zb0001Mask & 0x40) == 0 { // if not empty
			// string "caid"
			o = append(o, 0xa4, 0x63, 0x61, 0x69, 0x64)
			o = (*z).ApplyData.ConfigAsset.MarshalMsg(o)
		}
		if (zb0001Mask & 0x80) == 0 { // if not empty
			// string "dt"
			o = append(o, 0xa2, 0x64, 0x74)
			o = (*z).ApplyData.EvalDelta.MarshalMsg(o)
		}
		if (zb0001Mask & 0x100) == 0 { // if not empty
			// string "lsig"
			o = append(o, 0xa4, 0x6c, 0x73, 0x69, 0x67)
			o = (*z).SignedTxn.Lsig.MarshalMsg(o)
		}
		if (zb0001Mask & 0x200) == 0 { // if not empty
			// string "msig"
			o = append(o, 0xa4, 0x6d, 0x73, 0x69, 0x67)
			o = (*z).SignedTxn.Msig.MarshalMsg(o)
		}
		if (zb0001Mask & 0x400) == 0 { // if not empty
			// string "rc"
			o = append(o, 0xa2, 0x72, 0x63)
			o = (*z).ApplyData.CloseRewards.MarshalMsg(o)
		}
		if (zb0001Mask & 0x800) == 0 { // if not empty
			// string "rr"
			o = append(o, 0xa2, 0x72, 0x72)
			o = (*z).ApplyData.ReceiverRewards.MarshalMsg(o)
		}
		if (zb0001Mask & 0x1000) == 0 { // if not empty
			// string "rs"
			o = append(o, 0xa2, 0x72, 0x73)
			o = (*z).ApplyData.SenderRewards.MarshalMsg(o)
		}
		if (zb0001Mask & 0x2000) == 0 { // if not empty
			// string "sgnr"
			o = append(o, 0xa4, 0x73, 0x67, 0x6e, 0x72)
			o = (*z).SignedTxn.AuthAddr.MarshalMsg(o)
		}
		if (zb0001Mask & 0x4000) == 0 { // if not empty
			// string "sig"
			o = append(o, 0xa3, 0x73, 0x69, 0x67)
			o = (*z).SignedTxn.Sig.MarshalMsg(o)
		}
		if (zb0001Mask & 0x8000) == 0 { // if not empty
			// string "txn"
			o = append(o, 0xa3, 0x74, 0x78, 0x6e)
			o = (*z).SignedTxn.Txn.MarshalMsg(o)
		}
	}
	return
}

func (_ *SignedTxnWithAD) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*SignedTxnWithAD)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SignedTxnWithAD) unmarshalMsg(bts []byte, validate bool) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0003 string
	var zb0004 bool
	var zb0002 bool
	_ = zb0003
	_ = zb0004
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if validate {
			err = &msgp.ErrNonCanonical{}
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).SignedTxn.Sig.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Sig")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).SignedTxn.Msig.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Msig")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).SignedTxn.Lsig.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Lsig")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).SignedTxn.Txn.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Txn")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).SignedTxn.AuthAddr.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AuthAddr")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).ApplyData.ClosingAmount.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ClosingAmount")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).ApplyData.AssetClosingAmount, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetClosingAmount")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).ApplyData.SenderRewards.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SenderRewards")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).ApplyData.ReceiverRewards.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ReceiverRewards")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).ApplyData.CloseRewards.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CloseRewards")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).ApplyData.EvalDelta.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "EvalDelta")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).ApplyData.ConfigAsset.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ConfigAsset")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).ApplyData.ApplicationID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApplicationID")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = SignedTxnWithAD{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "sig":
				if validate && zb0004 && "sig" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).SignedTxn.Sig.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sig")
					return
				}
				zb0003 = "sig"
			case "msig":
				if validate && zb0004 && "msig" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).SignedTxn.Msig.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Msig")
					return
				}
				zb0003 = "msig"
			case "lsig":
				if validate && zb0004 && "lsig" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).SignedTxn.Lsig.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Lsig")
					return
				}
				zb0003 = "lsig"
			case "txn":
				if validate && zb0004 && "txn" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).SignedTxn.Txn.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Txn")
					return
				}
				zb0003 = "txn"
			case "sgnr":
				if validate && zb0004 && "sgnr" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).SignedTxn.AuthAddr.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "AuthAddr")
					return
				}
				zb0003 = "sgnr"
			case "ca":
				if validate && zb0004 && "ca" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).ApplyData.ClosingAmount.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ClosingAmount")
					return
				}
				zb0003 = "ca"
			case "aca":
				if validate && zb0004 && "aca" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				(*z).ApplyData.AssetClosingAmount, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetClosingAmount")
					return
				}
				zb0003 = "aca"
			case "rs":
				if validate && zb0004 && "rs" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).ApplyData.SenderRewards.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "SenderRewards")
					return
				}
				zb0003 = "rs"
			case "rr":
				if validate && zb0004 && "rr" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).ApplyData.ReceiverRewards.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReceiverRewards")
					return
				}
				zb0003 = "rr"
			case "rc":
				if validate && zb0004 && "rc" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).ApplyData.CloseRewards.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "CloseRewards")
					return
				}
				zb0003 = "rc"
			case "dt":
				if validate && zb0004 && "dt" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).ApplyData.EvalDelta.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "EvalDelta")
					return
				}
				zb0003 = "dt"
			case "caid":
				if validate && zb0004 && "caid" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).ApplyData.ConfigAsset.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ConfigAsset")
					return
				}
				zb0003 = "caid"
			case "apid":
				if validate && zb0004 && "apid" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).ApplyData.ApplicationID.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApplicationID")
					return
				}
				zb0003 = "apid"
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
			zb0004 = true
		}
	}
	o = bts
	return
}

func (z *SignedTxnWithAD) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, false)
}
func (z *SignedTxnWithAD) UnmarshalValidateMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, true)
}
func (_ *SignedTxnWithAD) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*SignedTxnWithAD)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SignedTxnWithAD) Msgsize() (s int) {
	s = 1 + 4 + (*z).SignedTxn.Sig.Msgsize() + 5 + (*z).SignedTxn.Msig.Msgsize() + 5 + (*z).SignedTxn.Lsig.Msgsize() + 4 + (*z).SignedTxn.Txn.Msgsize() + 5 + (*z).SignedTxn.AuthAddr.Msgsize() + 3 + (*z).ApplyData.ClosingAmount.Msgsize() + 4 + msgp.Uint64Size + 3 + (*z).ApplyData.SenderRewards.Msgsize() + 3 + (*z).ApplyData.ReceiverRewards.Msgsize() + 3 + (*z).ApplyData.CloseRewards.Msgsize() + 3 + (*z).ApplyData.EvalDelta.Msgsize() + 5 + (*z).ApplyData.ConfigAsset.Msgsize() + 5 + (*z).ApplyData.ApplicationID.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *SignedTxnWithAD) MsgIsZero() bool {
	return ((*z).SignedTxn.Sig.MsgIsZero()) && ((*z).SignedTxn.Msig.MsgIsZero()) && ((*z).SignedTxn.Lsig.MsgIsZero()) && ((*z).SignedTxn.Txn.MsgIsZero()) && ((*z).SignedTxn.AuthAddr.MsgIsZero()) && ((*z).ApplyData.ClosingAmount.MsgIsZero()) && ((*z).ApplyData.AssetClosingAmount == 0) && ((*z).ApplyData.SenderRewards.MsgIsZero()) && ((*z).ApplyData.ReceiverRewards.MsgIsZero()) && ((*z).ApplyData.CloseRewards.MsgIsZero()) && ((*z).ApplyData.EvalDelta.MsgIsZero()) && ((*z).ApplyData.ConfigAsset.MsgIsZero()) && ((*z).ApplyData.ApplicationID.MsgIsZero())
}

// MaxSize returns a maximum valid message size for this message type
func SignedTxnWithADMaxSize() (s int) {
	s = 1 + 4 + crypto.SignatureMaxSize() + 5 + crypto.MultisigSigMaxSize() + 5 + LogicSigMaxSize() + 4 + TransactionMaxSize() + 5 + basics.AddressMaxSize() + 3 + basics.MicroAlgosMaxSize() + 4 + msgp.Uint64Size + 3 + basics.MicroAlgosMaxSize() + 3 + basics.MicroAlgosMaxSize() + 3 + basics.MicroAlgosMaxSize() + 3 + EvalDeltaMaxSize() + 5 + basics.AssetIndexMaxSize() + 5 + basics.AppIndexMaxSize()
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *StateProofTxnFields) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(3)
	var zb0001Mask uint8 /* 4 bits */
	if (*z).StateProof.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if (*z).Message.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if (*z).StateProofType.MsgIsZero() {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x2) == 0 { // if not empty
			// string "sp"
			o = append(o, 0xa2, 0x73, 0x70)
			o = (*z).StateProof.MarshalMsg(o)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "spmsg"
			o = append(o, 0xa5, 0x73, 0x70, 0x6d, 0x73, 0x67)
			o = (*z).Message.MarshalMsg(o)
		}
		if (zb0001Mask & 0x8) == 0 { // if not empty
			// string "sptype"
			o = append(o, 0xa6, 0x73, 0x70, 0x74, 0x79, 0x70, 0x65)
			o = (*z).StateProofType.MarshalMsg(o)
		}
	}
	return
}

func (_ *StateProofTxnFields) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*StateProofTxnFields)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StateProofTxnFields) unmarshalMsg(bts []byte, validate bool) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0003 string
	var zb0004 bool
	var zb0002 bool
	_ = zb0003
	_ = zb0004
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if validate {
			err = &msgp.ErrNonCanonical{}
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).StateProofType.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "StateProofType")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).StateProof.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "StateProof")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Message.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Message")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = StateProofTxnFields{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "sptype":
				if validate && zb0004 && "sptype" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).StateProofType.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "StateProofType")
					return
				}
				zb0003 = "sptype"
			case "sp":
				if validate && zb0004 && "sp" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).StateProof.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "StateProof")
					return
				}
				zb0003 = "sp"
			case "spmsg":
				if validate && zb0004 && "spmsg" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Message.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Message")
					return
				}
				zb0003 = "spmsg"
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
			zb0004 = true
		}
	}
	o = bts
	return
}

func (z *StateProofTxnFields) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, false)
}
func (z *StateProofTxnFields) UnmarshalValidateMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, true)
}
func (_ *StateProofTxnFields) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*StateProofTxnFields)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *StateProofTxnFields) Msgsize() (s int) {
	s = 1 + 7 + (*z).StateProofType.Msgsize() + 3 + (*z).StateProof.Msgsize() + 6 + (*z).Message.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *StateProofTxnFields) MsgIsZero() bool {
	return ((*z).StateProofType.MsgIsZero()) && ((*z).StateProof.MsgIsZero()) && ((*z).Message.MsgIsZero())
}

// MaxSize returns a maximum valid message size for this message type
func StateProofTxnFieldsMaxSize() (s int) {
	s = 1 + 7 + protocol.StateProofTypeMaxSize() + 3 + stateproof.StateProofMaxSize() + 6 + stateproofmsg.MessageMaxSize()
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Transaction) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0007Len := uint32(46)
	var zb0007Mask uint64 /* 55 bits */
	if (*z).AssetTransferTxnFields.AssetAmount == 0 {
		zb0007Len--
		zb0007Mask |= 0x200
	}
	if (*z).AssetTransferTxnFields.AssetCloseTo.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x400
	}
	if (*z).AssetFreezeTxnFields.AssetFrozen == false {
		zb0007Len--
		zb0007Mask |= 0x800
	}
	if (*z).PaymentTxnFields.Amount.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x1000
	}
	if len((*z).ApplicationCallTxnFields.ApplicationArgs) == 0 {
		zb0007Len--
		zb0007Mask |= 0x2000
	}
	if (*z).ApplicationCallTxnFields.OnCompletion == 0 {
		zb0007Len--
		zb0007Mask |= 0x4000
	}
	if len((*z).ApplicationCallTxnFields.ApprovalProgram) == 0 {
		zb0007Len--
		zb0007Mask |= 0x8000
	}
	if (*z).AssetConfigTxnFields.AssetParams.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x10000
	}
	if len((*z).ApplicationCallTxnFields.ForeignAssets) == 0 {
		zb0007Len--
		zb0007Mask |= 0x20000
	}
	if len((*z).ApplicationCallTxnFields.Accounts) == 0 {
		zb0007Len--
		zb0007Mask |= 0x40000
	}
	if len((*z).ApplicationCallTxnFields.Boxes) == 0 {
		zb0007Len--
		zb0007Mask |= 0x80000
	}
	if (*z).ApplicationCallTxnFields.ExtraProgramPages == 0 {
		zb0007Len--
		zb0007Mask |= 0x100000
	}
	if len((*z).ApplicationCallTxnFields.ForeignApps) == 0 {
		zb0007Len--
		zb0007Mask |= 0x200000
	}
	if (*z).ApplicationCallTxnFields.GlobalStateSchema.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x400000
	}
	if (*z).ApplicationCallTxnFields.ApplicationID.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x800000
	}
	if (*z).ApplicationCallTxnFields.LocalStateSchema.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x1000000
	}
	if len((*z).ApplicationCallTxnFields.ClearStateProgram) == 0 {
		zb0007Len--
		zb0007Mask |= 0x2000000
	}
	if (*z).AssetTransferTxnFields.AssetReceiver.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x4000000
	}
	if (*z).AssetTransferTxnFields.AssetSender.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x8000000
	}
	if (*z).AssetConfigTxnFields.ConfigAsset.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x10000000
	}
	if (*z).PaymentTxnFields.CloseRemainderTo.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x20000000
	}
	if (*z).AssetFreezeTxnFields.FreezeAccount.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x40000000
	}
	if (*z).AssetFreezeTxnFields.FreezeAsset.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x80000000
	}
	if (*z).Header.Fee.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x100000000
	}
	if (*z).Header.FirstValid.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x200000000
	}
	if (*z).Header.GenesisID == "" {
		zb0007Len--
		zb0007Mask |= 0x400000000
	}
	if (*z).Header.GenesisHash.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x800000000
	}
	if (*z).Header.Group.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x1000000000
	}
	if (*z).Header.LastValid.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x2000000000
	}
	if (*z).Header.Lease == ([32]byte{}) {
		zb0007Len--
		zb0007Mask |= 0x4000000000
	}
	if (*z).KeyregTxnFields.Nonparticipation == false {
		zb0007Len--
		zb0007Mask |= 0x8000000000
	}
	if len((*z).Header.Note) == 0 {
		zb0007Len--
		zb0007Mask |= 0x10000000000
	}
	if (*z).PaymentTxnFields.Receiver.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x20000000000
	}
	if (*z).Header.RekeyTo.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x40000000000
	}
	if (*z).KeyregTxnFields.SelectionPK.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x80000000000
	}
	if (*z).Header.Sender.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x100000000000
	}
	if (*z).StateProofTxnFields.StateProof.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x200000000000
	}
	if (*z).StateProofTxnFields.Message.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x400000000000
	}
	if (*z).KeyregTxnFields.StateProofPK.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x800000000000
	}
	if (*z).StateProofTxnFields.StateProofType.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x1000000000000
	}
	if (*z).Type.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x2000000000000
	}
	if (*z).KeyregTxnFields.VoteFirst.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x4000000000000
	}
	if (*z).KeyregTxnFields.VoteKeyDilution == 0 {
		zb0007Len--
		zb0007Mask |= 0x8000000000000
	}
	if (*z).KeyregTxnFields.VotePK.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x10000000000000
	}
	if (*z).KeyregTxnFields.VoteLast.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x20000000000000
	}
	if (*z).AssetTransferTxnFields.XferAsset.MsgIsZero() {
		zb0007Len--
		zb0007Mask |= 0x40000000000000
	}
	// variable map header, size zb0007Len
	o = msgp.AppendMapHeader(o, zb0007Len)
	if zb0007Len != 0 {
		if (zb0007Mask & 0x200) == 0 { // if not empty
			// string "aamt"
			o = append(o, 0xa4, 0x61, 0x61, 0x6d, 0x74)
			o = msgp.AppendUint64(o, (*z).AssetTransferTxnFields.AssetAmount)
		}
		if (zb0007Mask & 0x400) == 0 { // if not empty
			// string "aclose"
			o = append(o, 0xa6, 0x61, 0x63, 0x6c, 0x6f, 0x73, 0x65)
			o = (*z).AssetTransferTxnFields.AssetCloseTo.MarshalMsg(o)
		}
		if (zb0007Mask & 0x800) == 0 { // if not empty
			// string "afrz"
			o = append(o, 0xa4, 0x61, 0x66, 0x72, 0x7a)
			o = msgp.AppendBool(o, (*z).AssetFreezeTxnFields.AssetFrozen)
		}
		if (zb0007Mask & 0x1000) == 0 { // if not empty
			// string "amt"
			o = append(o, 0xa3, 0x61, 0x6d, 0x74)
			o = (*z).PaymentTxnFields.Amount.MarshalMsg(o)
		}
		if (zb0007Mask & 0x2000) == 0 { // if not empty
			// string "apaa"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x61)
			if (*z).ApplicationCallTxnFields.ApplicationArgs == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).ApplicationCallTxnFields.ApplicationArgs)))
			}
			for zb0002 := range (*z).ApplicationCallTxnFields.ApplicationArgs {
				o = msgp.AppendBytes(o, (*z).ApplicationCallTxnFields.ApplicationArgs[zb0002])
			}
		}
		if (zb0007Mask & 0x4000) == 0 { // if not empty
			// string "apan"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x6e)
			o = msgp.AppendUint64(o, uint64((*z).ApplicationCallTxnFields.OnCompletion))
		}
		if (zb0007Mask & 0x8000) == 0 { // if not empty
			// string "apap"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x70)
			o = msgp.AppendBytes(o, (*z).ApplicationCallTxnFields.ApprovalProgram)
		}
		if (zb0007Mask & 0x10000) == 0 { // if not empty
			// string "apar"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x72)
			o = (*z).AssetConfigTxnFields.AssetParams.MarshalMsg(o)
		}
		if (zb0007Mask & 0x20000) == 0 { // if not empty
			// string "apas"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x73)
			if (*z).ApplicationCallTxnFields.ForeignAssets == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).ApplicationCallTxnFields.ForeignAssets)))
			}
			for zb0006 := range (*z).ApplicationCallTxnFields.ForeignAssets {
				o = (*z).ApplicationCallTxnFields.ForeignAssets[zb0006].MarshalMsg(o)
			}
		}
		if (zb0007Mask & 0x40000) == 0 { // if not empty
			// string "apat"
			o = append(o, 0xa4, 0x61, 0x70, 0x61, 0x74)
			if (*z).ApplicationCallTxnFields.Accounts == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).ApplicationCallTxnFields.Accounts)))
			}
			for zb0003 := range (*z).ApplicationCallTxnFields.Accounts {
				o = (*z).ApplicationCallTxnFields.Accounts[zb0003].MarshalMsg(o)
			}
		}
		if (zb0007Mask & 0x80000) == 0 { // if not empty
			// string "apbx"
			o = append(o, 0xa4, 0x61, 0x70, 0x62, 0x78)
			if (*z).ApplicationCallTxnFields.Boxes == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).ApplicationCallTxnFields.Boxes)))
			}
			for zb0005 := range (*z).ApplicationCallTxnFields.Boxes {
				// omitempty: check for empty values
				zb0008Len := uint32(2)
				var zb0008Mask uint8 /* 3 bits */
				if (*z).ApplicationCallTxnFields.Boxes[zb0005].Index == 0 {
					zb0008Len--
					zb0008Mask |= 0x2
				}
				if len((*z).ApplicationCallTxnFields.Boxes[zb0005].Name) == 0 {
					zb0008Len--
					zb0008Mask |= 0x4
				}
				// variable map header, size zb0008Len
				o = append(o, 0x80|uint8(zb0008Len))
				if (zb0008Mask & 0x2) == 0 { // if not empty
					// string "i"
					o = append(o, 0xa1, 0x69)
					o = msgp.AppendUint64(o, (*z).ApplicationCallTxnFields.Boxes[zb0005].Index)
				}
				if (zb0008Mask & 0x4) == 0 { // if not empty
					// string "n"
					o = append(o, 0xa1, 0x6e)
					o = msgp.AppendBytes(o, (*z).ApplicationCallTxnFields.Boxes[zb0005].Name)
				}
			}
		}
		if (zb0007Mask & 0x100000) == 0 { // if not empty
			// string "apep"
			o = append(o, 0xa4, 0x61, 0x70, 0x65, 0x70)
			o = msgp.AppendUint32(o, (*z).ApplicationCallTxnFields.ExtraProgramPages)
		}
		if (zb0007Mask & 0x200000) == 0 { // if not empty
			// string "apfa"
			o = append(o, 0xa4, 0x61, 0x70, 0x66, 0x61)
			if (*z).ApplicationCallTxnFields.ForeignApps == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).ApplicationCallTxnFields.ForeignApps)))
			}
			for zb0004 := range (*z).ApplicationCallTxnFields.ForeignApps {
				o = (*z).ApplicationCallTxnFields.ForeignApps[zb0004].MarshalMsg(o)
			}
		}
		if (zb0007Mask & 0x400000) == 0 { // if not empty
			// string "apgs"
			o = append(o, 0xa4, 0x61, 0x70, 0x67, 0x73)
			o = (*z).ApplicationCallTxnFields.GlobalStateSchema.MarshalMsg(o)
		}
		if (zb0007Mask & 0x800000) == 0 { // if not empty
			// string "apid"
			o = append(o, 0xa4, 0x61, 0x70, 0x69, 0x64)
			o = (*z).ApplicationCallTxnFields.ApplicationID.MarshalMsg(o)
		}
		if (zb0007Mask & 0x1000000) == 0 { // if not empty
			// string "apls"
			o = append(o, 0xa4, 0x61, 0x70, 0x6c, 0x73)
			o = (*z).ApplicationCallTxnFields.LocalStateSchema.MarshalMsg(o)
		}
		if (zb0007Mask & 0x2000000) == 0 { // if not empty
			// string "apsu"
			o = append(o, 0xa4, 0x61, 0x70, 0x73, 0x75)
			o = msgp.AppendBytes(o, (*z).ApplicationCallTxnFields.ClearStateProgram)
		}
		if (zb0007Mask & 0x4000000) == 0 { // if not empty
			// string "arcv"
			o = append(o, 0xa4, 0x61, 0x72, 0x63, 0x76)
			o = (*z).AssetTransferTxnFields.AssetReceiver.MarshalMsg(o)
		}
		if (zb0007Mask & 0x8000000) == 0 { // if not empty
			// string "asnd"
			o = append(o, 0xa4, 0x61, 0x73, 0x6e, 0x64)
			o = (*z).AssetTransferTxnFields.AssetSender.MarshalMsg(o)
		}
		if (zb0007Mask & 0x10000000) == 0 { // if not empty
			// string "caid"
			o = append(o, 0xa4, 0x63, 0x61, 0x69, 0x64)
			o = (*z).AssetConfigTxnFields.ConfigAsset.MarshalMsg(o)
		}
		if (zb0007Mask & 0x20000000) == 0 { // if not empty
			// string "close"
			o = append(o, 0xa5, 0x63, 0x6c, 0x6f, 0x73, 0x65)
			o = (*z).PaymentTxnFields.CloseRemainderTo.MarshalMsg(o)
		}
		if (zb0007Mask & 0x40000000) == 0 { // if not empty
			// string "fadd"
			o = append(o, 0xa4, 0x66, 0x61, 0x64, 0x64)
			o = (*z).AssetFreezeTxnFields.FreezeAccount.MarshalMsg(o)
		}
		if (zb0007Mask & 0x80000000) == 0 { // if not empty
			// string "faid"
			o = append(o, 0xa4, 0x66, 0x61, 0x69, 0x64)
			o = (*z).AssetFreezeTxnFields.FreezeAsset.MarshalMsg(o)
		}
		if (zb0007Mask & 0x100000000) == 0 { // if not empty
			// string "fee"
			o = append(o, 0xa3, 0x66, 0x65, 0x65)
			o = (*z).Header.Fee.MarshalMsg(o)
		}
		if (zb0007Mask & 0x200000000) == 0 { // if not empty
			// string "fv"
			o = append(o, 0xa2, 0x66, 0x76)
			o = (*z).Header.FirstValid.MarshalMsg(o)
		}
		if (zb0007Mask & 0x400000000) == 0 { // if not empty
			// string "gen"
			o = append(o, 0xa3, 0x67, 0x65, 0x6e)
			o = msgp.AppendString(o, (*z).Header.GenesisID)
		}
		if (zb0007Mask & 0x800000000) == 0 { // if not empty
			// string "gh"
			o = append(o, 0xa2, 0x67, 0x68)
			o = (*z).Header.GenesisHash.MarshalMsg(o)
		}
		if (zb0007Mask & 0x1000000000) == 0 { // if not empty
			// string "grp"
			o = append(o, 0xa3, 0x67, 0x72, 0x70)
			o = (*z).Header.Group.MarshalMsg(o)
		}
		if (zb0007Mask & 0x2000000000) == 0 { // if not empty
			// string "lv"
			o = append(o, 0xa2, 0x6c, 0x76)
			o = (*z).Header.LastValid.MarshalMsg(o)
		}
		if (zb0007Mask & 0x4000000000) == 0 { // if not empty
			// string "lx"
			o = append(o, 0xa2, 0x6c, 0x78)
			o = msgp.AppendBytes(o, ((*z).Header.Lease)[:])
		}
		if (zb0007Mask & 0x8000000000) == 0 { // if not empty
			// string "nonpart"
			o = append(o, 0xa7, 0x6e, 0x6f, 0x6e, 0x70, 0x61, 0x72, 0x74)
			o = msgp.AppendBool(o, (*z).KeyregTxnFields.Nonparticipation)
		}
		if (zb0007Mask & 0x10000000000) == 0 { // if not empty
			// string "note"
			o = append(o, 0xa4, 0x6e, 0x6f, 0x74, 0x65)
			o = msgp.AppendBytes(o, (*z).Header.Note)
		}
		if (zb0007Mask & 0x20000000000) == 0 { // if not empty
			// string "rcv"
			o = append(o, 0xa3, 0x72, 0x63, 0x76)
			o = (*z).PaymentTxnFields.Receiver.MarshalMsg(o)
		}
		if (zb0007Mask & 0x40000000000) == 0 { // if not empty
			// string "rekey"
			o = append(o, 0xa5, 0x72, 0x65, 0x6b, 0x65, 0x79)
			o = (*z).Header.RekeyTo.MarshalMsg(o)
		}
		if (zb0007Mask & 0x80000000000) == 0 { // if not empty
			// string "selkey"
			o = append(o, 0xa6, 0x73, 0x65, 0x6c, 0x6b, 0x65, 0x79)
			o = (*z).KeyregTxnFields.SelectionPK.MarshalMsg(o)
		}
		if (zb0007Mask & 0x100000000000) == 0 { // if not empty
			// string "snd"
			o = append(o, 0xa3, 0x73, 0x6e, 0x64)
			o = (*z).Header.Sender.MarshalMsg(o)
		}
		if (zb0007Mask & 0x200000000000) == 0 { // if not empty
			// string "sp"
			o = append(o, 0xa2, 0x73, 0x70)
			o = (*z).StateProofTxnFields.StateProof.MarshalMsg(o)
		}
		if (zb0007Mask & 0x400000000000) == 0 { // if not empty
			// string "spmsg"
			o = append(o, 0xa5, 0x73, 0x70, 0x6d, 0x73, 0x67)
			o = (*z).StateProofTxnFields.Message.MarshalMsg(o)
		}
		if (zb0007Mask & 0x800000000000) == 0 { // if not empty
			// string "sprfkey"
			o = append(o, 0xa7, 0x73, 0x70, 0x72, 0x66, 0x6b, 0x65, 0x79)
			o = (*z).KeyregTxnFields.StateProofPK.MarshalMsg(o)
		}
		if (zb0007Mask & 0x1000000000000) == 0 { // if not empty
			// string "sptype"
			o = append(o, 0xa6, 0x73, 0x70, 0x74, 0x79, 0x70, 0x65)
			o = (*z).StateProofTxnFields.StateProofType.MarshalMsg(o)
		}
		if (zb0007Mask & 0x2000000000000) == 0 { // if not empty
			// string "type"
			o = append(o, 0xa4, 0x74, 0x79, 0x70, 0x65)
			o = (*z).Type.MarshalMsg(o)
		}
		if (zb0007Mask & 0x4000000000000) == 0 { // if not empty
			// string "votefst"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x66, 0x73, 0x74)
			o = (*z).KeyregTxnFields.VoteFirst.MarshalMsg(o)
		}
		if (zb0007Mask & 0x8000000000000) == 0 { // if not empty
			// string "votekd"
			o = append(o, 0xa6, 0x76, 0x6f, 0x74, 0x65, 0x6b, 0x64)
			o = msgp.AppendUint64(o, (*z).KeyregTxnFields.VoteKeyDilution)
		}
		if (zb0007Mask & 0x10000000000000) == 0 { // if not empty
			// string "votekey"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x6b, 0x65, 0x79)
			o = (*z).KeyregTxnFields.VotePK.MarshalMsg(o)
		}
		if (zb0007Mask & 0x20000000000000) == 0 { // if not empty
			// string "votelst"
			o = append(o, 0xa7, 0x76, 0x6f, 0x74, 0x65, 0x6c, 0x73, 0x74)
			o = (*z).KeyregTxnFields.VoteLast.MarshalMsg(o)
		}
		if (zb0007Mask & 0x40000000000000) == 0 { // if not empty
			// string "xaid"
			o = append(o, 0xa4, 0x78, 0x61, 0x69, 0x64)
			o = (*z).AssetTransferTxnFields.XferAsset.MarshalMsg(o)
		}
	}
	return
}

func (_ *Transaction) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*Transaction)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Transaction) unmarshalMsg(bts []byte, validate bool) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0007 int
	var zb0009 string
	var zb0010 bool
	var zb0008 bool
	_ = zb0009
	_ = zb0010
	zb0007, zb0008, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0007, zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if validate {
			err = &msgp.ErrNonCanonical{}
			return
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).Type.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Type")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).Header.Sender.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Sender")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).Header.Fee.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Fee")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).Header.FirstValid.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FirstValid")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).Header.LastValid.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LastValid")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0011 int
			zb0011, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Note")
				return
			}
			if zb0011 > config.MaxTxnNoteBytes {
				err = msgp.ErrOverflow(uint64(zb0011), uint64(config.MaxTxnNoteBytes))
				return
			}
			(*z).Header.Note, bts, err = msgp.ReadBytesBytes(bts, (*z).Header.Note)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Note")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0012 int
			zb0012, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GenesisID")
				return
			}
			if zb0012 > config.MaxGenesisIDLen {
				err = msgp.ErrOverflow(uint64(zb0012), uint64(config.MaxGenesisIDLen))
				return
			}
			(*z).Header.GenesisID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GenesisID")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).Header.GenesisHash.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GenesisHash")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).Header.Group.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Group")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = msgp.ReadExactBytes(bts, ((*z).Header.Lease)[:])
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Lease")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).Header.RekeyTo.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "RekeyTo")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).KeyregTxnFields.VotePK.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VotePK")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).KeyregTxnFields.SelectionPK.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "SelectionPK")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).KeyregTxnFields.StateProofPK.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "StateProofPK")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).KeyregTxnFields.VoteFirst.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteFirst")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).KeyregTxnFields.VoteLast.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteLast")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			(*z).KeyregTxnFields.VoteKeyDilution, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VoteKeyDilution")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			(*z).KeyregTxnFields.Nonparticipation, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Nonparticipation")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).PaymentTxnFields.Receiver.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Receiver")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).PaymentTxnFields.Amount.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Amount")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).PaymentTxnFields.CloseRemainderTo.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "CloseRemainderTo")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).AssetConfigTxnFields.ConfigAsset.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ConfigAsset")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).AssetConfigTxnFields.AssetParams.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetParams")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).AssetTransferTxnFields.XferAsset.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "XferAsset")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			(*z).AssetTransferTxnFields.AssetAmount, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetAmount")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).AssetTransferTxnFields.AssetSender.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetSender")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).AssetTransferTxnFields.AssetReceiver.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetReceiver")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).AssetTransferTxnFields.AssetCloseTo.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetCloseTo")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).AssetFreezeTxnFields.FreezeAccount.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FreezeAccount")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).AssetFreezeTxnFields.FreezeAsset.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FreezeAsset")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			(*z).AssetFreezeTxnFields.AssetFrozen, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "AssetFrozen")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).ApplicationCallTxnFields.ApplicationID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApplicationID")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			{
				var zb0013 uint64
				zb0013, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "OnCompletion")
					return
				}
				(*z).ApplicationCallTxnFields.OnCompletion = OnCompletion(zb0013)
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0014 int
			var zb0015 bool
			zb0014, zb0015, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs")
				return
			}
			if zb0014 > encodedMaxApplicationArgs {
				err = msgp.ErrOverflow(uint64(zb0014), uint64(encodedMaxApplicationArgs))
				err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs")
				return
			}
			if zb0015 {
				(*z).ApplicationCallTxnFields.ApplicationArgs = nil
			} else if (*z).ApplicationCallTxnFields.ApplicationArgs != nil && cap((*z).ApplicationCallTxnFields.ApplicationArgs) >= zb0014 {
				(*z).ApplicationCallTxnFields.ApplicationArgs = ((*z).ApplicationCallTxnFields.ApplicationArgs)[:zb0014]
			} else {
				(*z).ApplicationCallTxnFields.ApplicationArgs = make([][]byte, zb0014)
			}
			for zb0002 := range (*z).ApplicationCallTxnFields.ApplicationArgs {
				(*z).ApplicationCallTxnFields.ApplicationArgs[zb0002], bts, err = msgp.ReadBytesBytes(bts, (*z).ApplicationCallTxnFields.ApplicationArgs[zb0002])
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ApplicationArgs", zb0002)
					return
				}
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0016 int
			var zb0017 bool
			zb0016, zb0017, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Accounts")
				return
			}
			if zb0016 > encodedMaxAccounts {
				err = msgp.ErrOverflow(uint64(zb0016), uint64(encodedMaxAccounts))
				err = msgp.WrapError(err, "struct-from-array", "Accounts")
				return
			}
			if zb0017 {
				(*z).ApplicationCallTxnFields.Accounts = nil
			} else if (*z).ApplicationCallTxnFields.Accounts != nil && cap((*z).ApplicationCallTxnFields.Accounts) >= zb0016 {
				(*z).ApplicationCallTxnFields.Accounts = ((*z).ApplicationCallTxnFields.Accounts)[:zb0016]
			} else {
				(*z).ApplicationCallTxnFields.Accounts = make([]basics.Address, zb0016)
			}
			for zb0003 := range (*z).ApplicationCallTxnFields.Accounts {
				bts, err = (*z).ApplicationCallTxnFields.Accounts[zb0003].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "Accounts", zb0003)
					return
				}
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0018 int
			var zb0019 bool
			zb0018, zb0019, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ForeignApps")
				return
			}
			if zb0018 > encodedMaxForeignApps {
				err = msgp.ErrOverflow(uint64(zb0018), uint64(encodedMaxForeignApps))
				err = msgp.WrapError(err, "struct-from-array", "ForeignApps")
				return
			}
			if zb0019 {
				(*z).ApplicationCallTxnFields.ForeignApps = nil
			} else if (*z).ApplicationCallTxnFields.ForeignApps != nil && cap((*z).ApplicationCallTxnFields.ForeignApps) >= zb0018 {
				(*z).ApplicationCallTxnFields.ForeignApps = ((*z).ApplicationCallTxnFields.ForeignApps)[:zb0018]
			} else {
				(*z).ApplicationCallTxnFields.ForeignApps = make([]basics.AppIndex, zb0018)
			}
			for zb0004 := range (*z).ApplicationCallTxnFields.ForeignApps {
				bts, err = (*z).ApplicationCallTxnFields.ForeignApps[zb0004].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ForeignApps", zb0004)
					return
				}
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0020 int
			var zb0021 bool
			zb0020, zb0021, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Boxes")
				return
			}
			if zb0020 > encodedMaxBoxes {
				err = msgp.ErrOverflow(uint64(zb0020), uint64(encodedMaxBoxes))
				err = msgp.WrapError(err, "struct-from-array", "Boxes")
				return
			}
			if zb0021 {
				(*z).ApplicationCallTxnFields.Boxes = nil
			} else if (*z).ApplicationCallTxnFields.Boxes != nil && cap((*z).ApplicationCallTxnFields.Boxes) >= zb0020 {
				(*z).ApplicationCallTxnFields.Boxes = ((*z).ApplicationCallTxnFields.Boxes)[:zb0020]
			} else {
				(*z).ApplicationCallTxnFields.Boxes = make([]BoxRef, zb0020)
			}
			for zb0005 := range (*z).ApplicationCallTxnFields.Boxes {
				var zb0022 int
				var zb0024 string
				var zb0025 bool
				var zb0023 bool
				_ = zb0024
				_ = zb0025
				zb0022, zb0023, bts, err = msgp.ReadMapHeaderBytes(bts)
				if _, ok := err.(msgp.TypeError); ok {
					zb0022, zb0023, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0005)
						return
					}
					if validate {
						err = &msgp.ErrNonCanonical{}
						return
					}
					if zb0022 > 0 {
						zb0022--
						(*z).ApplicationCallTxnFields.Boxes[zb0005].Index, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0005, "struct-from-array", "Index")
							return
						}
					}
					if zb0022 > 0 {
						zb0022--
						var zb0026 int
						zb0026, err = msgp.ReadBytesBytesHeader(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0005, "struct-from-array", "Name")
							return
						}
						if zb0026 > config.MaxBytesKeyValueLen {
							err = msgp.ErrOverflow(uint64(zb0026), uint64(config.MaxBytesKeyValueLen))
							return
						}
						(*z).ApplicationCallTxnFields.Boxes[zb0005].Name, bts, err = msgp.ReadBytesBytes(bts, (*z).ApplicationCallTxnFields.Boxes[zb0005].Name)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0005, "struct-from-array", "Name")
							return
						}
					}
					if zb0022 > 0 {
						err = msgp.ErrTooManyArrayFields(zb0022)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0005, "struct-from-array")
							return
						}
					}
				} else {
					if err != nil {
						err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0005)
						return
					}
					if zb0023 {
						(*z).ApplicationCallTxnFields.Boxes[zb0005] = BoxRef{}
					}
					for zb0022 > 0 {
						zb0022--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0005)
							return
						}
						switch string(field) {
						case "i":
							if validate && zb0025 && "i" < zb0024 {
								err = &msgp.ErrNonCanonical{}
								return
							}
							(*z).ApplicationCallTxnFields.Boxes[zb0005].Index, bts, err = msgp.ReadUint64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0005, "Index")
								return
							}
							zb0024 = "i"
						case "n":
							if validate && zb0025 && "n" < zb0024 {
								err = &msgp.ErrNonCanonical{}
								return
							}
							var zb0027 int
							zb0027, err = msgp.ReadBytesBytesHeader(bts)
							if err != nil {
								err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0005, "Name")
								return
							}
							if zb0027 > config.MaxBytesKeyValueLen {
								err = msgp.ErrOverflow(uint64(zb0027), uint64(config.MaxBytesKeyValueLen))
								return
							}
							(*z).ApplicationCallTxnFields.Boxes[zb0005].Name, bts, err = msgp.ReadBytesBytes(bts, (*z).ApplicationCallTxnFields.Boxes[zb0005].Name)
							if err != nil {
								err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0005, "Name")
								return
							}
							zb0024 = "n"
						default:
							err = msgp.ErrNoField(string(field))
							if err != nil {
								err = msgp.WrapError(err, "struct-from-array", "Boxes", zb0005)
								return
							}
						}
						zb0025 = true
					}
				}
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0028 int
			var zb0029 bool
			zb0028, zb0029, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ForeignAssets")
				return
			}
			if zb0028 > encodedMaxForeignAssets {
				err = msgp.ErrOverflow(uint64(zb0028), uint64(encodedMaxForeignAssets))
				err = msgp.WrapError(err, "struct-from-array", "ForeignAssets")
				return
			}
			if zb0029 {
				(*z).ApplicationCallTxnFields.ForeignAssets = nil
			} else if (*z).ApplicationCallTxnFields.ForeignAssets != nil && cap((*z).ApplicationCallTxnFields.ForeignAssets) >= zb0028 {
				(*z).ApplicationCallTxnFields.ForeignAssets = ((*z).ApplicationCallTxnFields.ForeignAssets)[:zb0028]
			} else {
				(*z).ApplicationCallTxnFields.ForeignAssets = make([]basics.AssetIndex, zb0028)
			}
			for zb0006 := range (*z).ApplicationCallTxnFields.ForeignAssets {
				bts, err = (*z).ApplicationCallTxnFields.ForeignAssets[zb0006].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "ForeignAssets", zb0006)
					return
				}
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).ApplicationCallTxnFields.LocalStateSchema.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LocalStateSchema")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).ApplicationCallTxnFields.GlobalStateSchema.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "GlobalStateSchema")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0030 int
			zb0030, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram")
				return
			}
			if zb0030 > config.MaxAvailableAppProgramLen {
				err = msgp.ErrOverflow(uint64(zb0030), uint64(config.MaxAvailableAppProgramLen))
				return
			}
			(*z).ApplicationCallTxnFields.ApprovalProgram, bts, err = msgp.ReadBytesBytes(bts, (*z).ApplicationCallTxnFields.ApprovalProgram)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ApprovalProgram")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			var zb0031 int
			zb0031, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram")
				return
			}
			if zb0031 > config.MaxAvailableAppProgramLen {
				err = msgp.ErrOverflow(uint64(zb0031), uint64(config.MaxAvailableAppProgramLen))
				return
			}
			(*z).ApplicationCallTxnFields.ClearStateProgram, bts, err = msgp.ReadBytesBytes(bts, (*z).ApplicationCallTxnFields.ClearStateProgram)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ClearStateProgram")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			(*z).ApplicationCallTxnFields.ExtraProgramPages, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "ExtraProgramPages")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).StateProofTxnFields.StateProofType.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "StateProofType")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).StateProofTxnFields.StateProof.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "StateProof")
				return
			}
		}
		if zb0007 > 0 {
			zb0007--
			bts, err = (*z).StateProofTxnFields.Message.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Message")
				return
			}
		}
		if zb0007 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0007)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0008 {
			(*z) = Transaction{}
		}
		for zb0007 > 0 {
			zb0007--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "type":
				if validate && zb0010 && "type" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Type.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				zb0009 = "type"
			case "snd":
				if validate && zb0010 && "snd" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Header.Sender.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sender")
					return
				}
				zb0009 = "snd"
			case "fee":
				if validate && zb0010 && "fee" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Header.Fee.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Fee")
					return
				}
				zb0009 = "fee"
			case "fv":
				if validate && zb0010 && "fv" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Header.FirstValid.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "FirstValid")
					return
				}
				zb0009 = "fv"
			case "lv":
				if validate && zb0010 && "lv" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Header.LastValid.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "LastValid")
					return
				}
				zb0009 = "lv"
			case "note":
				if validate && zb0010 && "note" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0032 int
				zb0032, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "Note")
					return
				}
				if zb0032 > config.MaxTxnNoteBytes {
					err = msgp.ErrOverflow(uint64(zb0032), uint64(config.MaxTxnNoteBytes))
					return
				}
				(*z).Header.Note, bts, err = msgp.ReadBytesBytes(bts, (*z).Header.Note)
				if err != nil {
					err = msgp.WrapError(err, "Note")
					return
				}
				zb0009 = "note"
			case "gen":
				if validate && zb0010 && "gen" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0033 int
				zb0033, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "GenesisID")
					return
				}
				if zb0033 > config.MaxGenesisIDLen {
					err = msgp.ErrOverflow(uint64(zb0033), uint64(config.MaxGenesisIDLen))
					return
				}
				(*z).Header.GenesisID, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "GenesisID")
					return
				}
				zb0009 = "gen"
			case "gh":
				if validate && zb0010 && "gh" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Header.GenesisHash.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "GenesisHash")
					return
				}
				zb0009 = "gh"
			case "grp":
				if validate && zb0010 && "grp" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Header.Group.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Group")
					return
				}
				zb0009 = "grp"
			case "lx":
				if validate && zb0010 && "lx" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = msgp.ReadExactBytes(bts, ((*z).Header.Lease)[:])
				if err != nil {
					err = msgp.WrapError(err, "Lease")
					return
				}
				zb0009 = "lx"
			case "rekey":
				if validate && zb0010 && "rekey" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).Header.RekeyTo.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "RekeyTo")
					return
				}
				zb0009 = "rekey"
			case "votekey":
				if validate && zb0010 && "votekey" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).KeyregTxnFields.VotePK.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "VotePK")
					return
				}
				zb0009 = "votekey"
			case "selkey":
				if validate && zb0010 && "selkey" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).KeyregTxnFields.SelectionPK.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "SelectionPK")
					return
				}
				zb0009 = "selkey"
			case "sprfkey":
				if validate && zb0010 && "sprfkey" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).KeyregTxnFields.StateProofPK.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "StateProofPK")
					return
				}
				zb0009 = "sprfkey"
			case "votefst":
				if validate && zb0010 && "votefst" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).KeyregTxnFields.VoteFirst.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteFirst")
					return
				}
				zb0009 = "votefst"
			case "votelst":
				if validate && zb0010 && "votelst" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).KeyregTxnFields.VoteLast.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteLast")
					return
				}
				zb0009 = "votelst"
			case "votekd":
				if validate && zb0010 && "votekd" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				(*z).KeyregTxnFields.VoteKeyDilution, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoteKeyDilution")
					return
				}
				zb0009 = "votekd"
			case "nonpart":
				if validate && zb0010 && "nonpart" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				(*z).KeyregTxnFields.Nonparticipation, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Nonparticipation")
					return
				}
				zb0009 = "nonpart"
			case "rcv":
				if validate && zb0010 && "rcv" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).PaymentTxnFields.Receiver.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Receiver")
					return
				}
				zb0009 = "rcv"
			case "amt":
				if validate && zb0010 && "amt" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).PaymentTxnFields.Amount.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Amount")
					return
				}
				zb0009 = "amt"
			case "close":
				if validate && zb0010 && "close" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).PaymentTxnFields.CloseRemainderTo.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "CloseRemainderTo")
					return
				}
				zb0009 = "close"
			case "caid":
				if validate && zb0010 && "caid" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).AssetConfigTxnFields.ConfigAsset.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ConfigAsset")
					return
				}
				zb0009 = "caid"
			case "apar":
				if validate && zb0010 && "apar" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).AssetConfigTxnFields.AssetParams.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetParams")
					return
				}
				zb0009 = "apar"
			case "xaid":
				if validate && zb0010 && "xaid" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).AssetTransferTxnFields.XferAsset.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "XferAsset")
					return
				}
				zb0009 = "xaid"
			case "aamt":
				if validate && zb0010 && "aamt" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				(*z).AssetTransferTxnFields.AssetAmount, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetAmount")
					return
				}
				zb0009 = "aamt"
			case "asnd":
				if validate && zb0010 && "asnd" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).AssetTransferTxnFields.AssetSender.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetSender")
					return
				}
				zb0009 = "asnd"
			case "arcv":
				if validate && zb0010 && "arcv" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).AssetTransferTxnFields.AssetReceiver.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetReceiver")
					return
				}
				zb0009 = "arcv"
			case "aclose":
				if validate && zb0010 && "aclose" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).AssetTransferTxnFields.AssetCloseTo.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetCloseTo")
					return
				}
				zb0009 = "aclose"
			case "fadd":
				if validate && zb0010 && "fadd" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).AssetFreezeTxnFields.FreezeAccount.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "FreezeAccount")
					return
				}
				zb0009 = "fadd"
			case "faid":
				if validate && zb0010 && "faid" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).AssetFreezeTxnFields.FreezeAsset.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "FreezeAsset")
					return
				}
				zb0009 = "faid"
			case "afrz":
				if validate && zb0010 && "afrz" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				(*z).AssetFreezeTxnFields.AssetFrozen, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssetFrozen")
					return
				}
				zb0009 = "afrz"
			case "apid":
				if validate && zb0010 && "apid" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).ApplicationCallTxnFields.ApplicationID.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApplicationID")
					return
				}
				zb0009 = "apid"
			case "apan":
				if validate && zb0010 && "apan" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				{
					var zb0034 uint64
					zb0034, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OnCompletion")
						return
					}
					(*z).ApplicationCallTxnFields.OnCompletion = OnCompletion(zb0034)
				}
				zb0009 = "apan"
			case "apaa":
				if validate && zb0010 && "apaa" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0035 int
				var zb0036 bool
				zb0035, zb0036, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApplicationArgs")
					return
				}
				if zb0035 > encodedMaxApplicationArgs {
					err = msgp.ErrOverflow(uint64(zb0035), uint64(encodedMaxApplicationArgs))
					err = msgp.WrapError(err, "ApplicationArgs")
					return
				}
				if zb0036 {
					(*z).ApplicationCallTxnFields.ApplicationArgs = nil
				} else if (*z).ApplicationCallTxnFields.ApplicationArgs != nil && cap((*z).ApplicationCallTxnFields.ApplicationArgs) >= zb0035 {
					(*z).ApplicationCallTxnFields.ApplicationArgs = ((*z).ApplicationCallTxnFields.ApplicationArgs)[:zb0035]
				} else {
					(*z).ApplicationCallTxnFields.ApplicationArgs = make([][]byte, zb0035)
				}
				for zb0002 := range (*z).ApplicationCallTxnFields.ApplicationArgs {
					(*z).ApplicationCallTxnFields.ApplicationArgs[zb0002], bts, err = msgp.ReadBytesBytes(bts, (*z).ApplicationCallTxnFields.ApplicationArgs[zb0002])
					if err != nil {
						err = msgp.WrapError(err, "ApplicationArgs", zb0002)
						return
					}
				}
				zb0009 = "apaa"
			case "apat":
				if validate && zb0010 && "apat" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0037 int
				var zb0038 bool
				zb0037, zb0038, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Accounts")
					return
				}
				if zb0037 > encodedMaxAccounts {
					err = msgp.ErrOverflow(uint64(zb0037), uint64(encodedMaxAccounts))
					err = msgp.WrapError(err, "Accounts")
					return
				}
				if zb0038 {
					(*z).ApplicationCallTxnFields.Accounts = nil
				} else if (*z).ApplicationCallTxnFields.Accounts != nil && cap((*z).ApplicationCallTxnFields.Accounts) >= zb0037 {
					(*z).ApplicationCallTxnFields.Accounts = ((*z).ApplicationCallTxnFields.Accounts)[:zb0037]
				} else {
					(*z).ApplicationCallTxnFields.Accounts = make([]basics.Address, zb0037)
				}
				for zb0003 := range (*z).ApplicationCallTxnFields.Accounts {
					bts, err = (*z).ApplicationCallTxnFields.Accounts[zb0003].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Accounts", zb0003)
						return
					}
				}
				zb0009 = "apat"
			case "apfa":
				if validate && zb0010 && "apfa" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0039 int
				var zb0040 bool
				zb0039, zb0040, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ForeignApps")
					return
				}
				if zb0039 > encodedMaxForeignApps {
					err = msgp.ErrOverflow(uint64(zb0039), uint64(encodedMaxForeignApps))
					err = msgp.WrapError(err, "ForeignApps")
					return
				}
				if zb0040 {
					(*z).ApplicationCallTxnFields.ForeignApps = nil
				} else if (*z).ApplicationCallTxnFields.ForeignApps != nil && cap((*z).ApplicationCallTxnFields.ForeignApps) >= zb0039 {
					(*z).ApplicationCallTxnFields.ForeignApps = ((*z).ApplicationCallTxnFields.ForeignApps)[:zb0039]
				} else {
					(*z).ApplicationCallTxnFields.ForeignApps = make([]basics.AppIndex, zb0039)
				}
				for zb0004 := range (*z).ApplicationCallTxnFields.ForeignApps {
					bts, err = (*z).ApplicationCallTxnFields.ForeignApps[zb0004].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "ForeignApps", zb0004)
						return
					}
				}
				zb0009 = "apfa"
			case "apbx":
				if validate && zb0010 && "apbx" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0041 int
				var zb0042 bool
				zb0041, zb0042, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Boxes")
					return
				}
				if zb0041 > encodedMaxBoxes {
					err = msgp.ErrOverflow(uint64(zb0041), uint64(encodedMaxBoxes))
					err = msgp.WrapError(err, "Boxes")
					return
				}
				if zb0042 {
					(*z).ApplicationCallTxnFields.Boxes = nil
				} else if (*z).ApplicationCallTxnFields.Boxes != nil && cap((*z).ApplicationCallTxnFields.Boxes) >= zb0041 {
					(*z).ApplicationCallTxnFields.Boxes = ((*z).ApplicationCallTxnFields.Boxes)[:zb0041]
				} else {
					(*z).ApplicationCallTxnFields.Boxes = make([]BoxRef, zb0041)
				}
				for zb0005 := range (*z).ApplicationCallTxnFields.Boxes {
					var zb0043 int
					var zb0045 string
					var zb0046 bool
					var zb0044 bool
					_ = zb0045
					_ = zb0046
					zb0043, zb0044, bts, err = msgp.ReadMapHeaderBytes(bts)
					if _, ok := err.(msgp.TypeError); ok {
						zb0043, zb0044, bts, err = msgp.ReadArrayHeaderBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Boxes", zb0005)
							return
						}
						if validate {
							err = &msgp.ErrNonCanonical{}
							return
						}
						if zb0043 > 0 {
							zb0043--
							(*z).ApplicationCallTxnFields.Boxes[zb0005].Index, bts, err = msgp.ReadUint64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Boxes", zb0005, "struct-from-array", "Index")
								return
							}
						}
						if zb0043 > 0 {
							zb0043--
							var zb0047 int
							zb0047, err = msgp.ReadBytesBytesHeader(bts)
							if err != nil {
								err = msgp.WrapError(err, "Boxes", zb0005, "struct-from-array", "Name")
								return
							}
							if zb0047 > config.MaxBytesKeyValueLen {
								err = msgp.ErrOverflow(uint64(zb0047), uint64(config.MaxBytesKeyValueLen))
								return
							}
							(*z).ApplicationCallTxnFields.Boxes[zb0005].Name, bts, err = msgp.ReadBytesBytes(bts, (*z).ApplicationCallTxnFields.Boxes[zb0005].Name)
							if err != nil {
								err = msgp.WrapError(err, "Boxes", zb0005, "struct-from-array", "Name")
								return
							}
						}
						if zb0043 > 0 {
							err = msgp.ErrTooManyArrayFields(zb0043)
							if err != nil {
								err = msgp.WrapError(err, "Boxes", zb0005, "struct-from-array")
								return
							}
						}
					} else {
						if err != nil {
							err = msgp.WrapError(err, "Boxes", zb0005)
							return
						}
						if zb0044 {
							(*z).ApplicationCallTxnFields.Boxes[zb0005] = BoxRef{}
						}
						for zb0043 > 0 {
							zb0043--
							field, bts, err = msgp.ReadMapKeyZC(bts)
							if err != nil {
								err = msgp.WrapError(err, "Boxes", zb0005)
								return
							}
							switch string(field) {
							case "i":
								if validate && zb0046 && "i" < zb0045 {
									err = &msgp.ErrNonCanonical{}
									return
								}
								(*z).ApplicationCallTxnFields.Boxes[zb0005].Index, bts, err = msgp.ReadUint64Bytes(bts)
								if err != nil {
									err = msgp.WrapError(err, "Boxes", zb0005, "Index")
									return
								}
								zb0045 = "i"
							case "n":
								if validate && zb0046 && "n" < zb0045 {
									err = &msgp.ErrNonCanonical{}
									return
								}
								var zb0048 int
								zb0048, err = msgp.ReadBytesBytesHeader(bts)
								if err != nil {
									err = msgp.WrapError(err, "Boxes", zb0005, "Name")
									return
								}
								if zb0048 > config.MaxBytesKeyValueLen {
									err = msgp.ErrOverflow(uint64(zb0048), uint64(config.MaxBytesKeyValueLen))
									return
								}
								(*z).ApplicationCallTxnFields.Boxes[zb0005].Name, bts, err = msgp.ReadBytesBytes(bts, (*z).ApplicationCallTxnFields.Boxes[zb0005].Name)
								if err != nil {
									err = msgp.WrapError(err, "Boxes", zb0005, "Name")
									return
								}
								zb0045 = "n"
							default:
								err = msgp.ErrNoField(string(field))
								if err != nil {
									err = msgp.WrapError(err, "Boxes", zb0005)
									return
								}
							}
							zb0046 = true
						}
					}
				}
				zb0009 = "apbx"
			case "apas":
				if validate && zb0010 && "apas" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0049 int
				var zb0050 bool
				zb0049, zb0050, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ForeignAssets")
					return
				}
				if zb0049 > encodedMaxForeignAssets {
					err = msgp.ErrOverflow(uint64(zb0049), uint64(encodedMaxForeignAssets))
					err = msgp.WrapError(err, "ForeignAssets")
					return
				}
				if zb0050 {
					(*z).ApplicationCallTxnFields.ForeignAssets = nil
				} else if (*z).ApplicationCallTxnFields.ForeignAssets != nil && cap((*z).ApplicationCallTxnFields.ForeignAssets) >= zb0049 {
					(*z).ApplicationCallTxnFields.ForeignAssets = ((*z).ApplicationCallTxnFields.ForeignAssets)[:zb0049]
				} else {
					(*z).ApplicationCallTxnFields.ForeignAssets = make([]basics.AssetIndex, zb0049)
				}
				for zb0006 := range (*z).ApplicationCallTxnFields.ForeignAssets {
					bts, err = (*z).ApplicationCallTxnFields.ForeignAssets[zb0006].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "ForeignAssets", zb0006)
						return
					}
				}
				zb0009 = "apas"
			case "apls":
				if validate && zb0010 && "apls" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).ApplicationCallTxnFields.LocalStateSchema.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "LocalStateSchema")
					return
				}
				zb0009 = "apls"
			case "apgs":
				if validate && zb0010 && "apgs" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).ApplicationCallTxnFields.GlobalStateSchema.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "GlobalStateSchema")
					return
				}
				zb0009 = "apgs"
			case "apap":
				if validate && zb0010 && "apap" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0051 int
				zb0051, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApprovalProgram")
					return
				}
				if zb0051 > config.MaxAvailableAppProgramLen {
					err = msgp.ErrOverflow(uint64(zb0051), uint64(config.MaxAvailableAppProgramLen))
					return
				}
				(*z).ApplicationCallTxnFields.ApprovalProgram, bts, err = msgp.ReadBytesBytes(bts, (*z).ApplicationCallTxnFields.ApprovalProgram)
				if err != nil {
					err = msgp.WrapError(err, "ApprovalProgram")
					return
				}
				zb0009 = "apap"
			case "apsu":
				if validate && zb0010 && "apsu" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0052 int
				zb0052, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "ClearStateProgram")
					return
				}
				if zb0052 > config.MaxAvailableAppProgramLen {
					err = msgp.ErrOverflow(uint64(zb0052), uint64(config.MaxAvailableAppProgramLen))
					return
				}
				(*z).ApplicationCallTxnFields.ClearStateProgram, bts, err = msgp.ReadBytesBytes(bts, (*z).ApplicationCallTxnFields.ClearStateProgram)
				if err != nil {
					err = msgp.WrapError(err, "ClearStateProgram")
					return
				}
				zb0009 = "apsu"
			case "apep":
				if validate && zb0010 && "apep" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				(*z).ApplicationCallTxnFields.ExtraProgramPages, bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ExtraProgramPages")
					return
				}
				zb0009 = "apep"
			case "sptype":
				if validate && zb0010 && "sptype" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).StateProofTxnFields.StateProofType.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "StateProofType")
					return
				}
				zb0009 = "sptype"
			case "sp":
				if validate && zb0010 && "sp" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).StateProofTxnFields.StateProof.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "StateProof")
					return
				}
				zb0009 = "sp"
			case "spmsg":
				if validate && zb0010 && "spmsg" < zb0009 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				bts, err = (*z).StateProofTxnFields.Message.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Message")
					return
				}
				zb0009 = "spmsg"
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
			zb0010 = true
		}
	}
	o = bts
	return
}

func (z *Transaction) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, false)
}
func (z *Transaction) UnmarshalValidateMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, true)
}
func (_ *Transaction) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*Transaction)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Transaction) Msgsize() (s int) {
	s = 3 + 5 + (*z).Type.Msgsize() + 4 + (*z).Header.Sender.Msgsize() + 4 + (*z).Header.Fee.Msgsize() + 3 + (*z).Header.FirstValid.Msgsize() + 3 + (*z).Header.LastValid.Msgsize() + 5 + msgp.BytesPrefixSize + len((*z).Header.Note) + 4 + msgp.StringPrefixSize + len((*z).Header.GenesisID) + 3 + (*z).Header.GenesisHash.Msgsize() + 4 + (*z).Header.Group.Msgsize() + 3 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 6 + (*z).Header.RekeyTo.Msgsize() + 8 + (*z).KeyregTxnFields.VotePK.Msgsize() + 7 + (*z).KeyregTxnFields.SelectionPK.Msgsize() + 8 + (*z).KeyregTxnFields.StateProofPK.Msgsize() + 8 + (*z).KeyregTxnFields.VoteFirst.Msgsize() + 8 + (*z).KeyregTxnFields.VoteLast.Msgsize() + 7 + msgp.Uint64Size + 8 + msgp.BoolSize + 4 + (*z).PaymentTxnFields.Receiver.Msgsize() + 4 + (*z).PaymentTxnFields.Amount.Msgsize() + 6 + (*z).PaymentTxnFields.CloseRemainderTo.Msgsize() + 5 + (*z).AssetConfigTxnFields.ConfigAsset.Msgsize() + 5 + (*z).AssetConfigTxnFields.AssetParams.Msgsize() + 5 + (*z).AssetTransferTxnFields.XferAsset.Msgsize() + 5 + msgp.Uint64Size + 5 + (*z).AssetTransferTxnFields.AssetSender.Msgsize() + 5 + (*z).AssetTransferTxnFields.AssetReceiver.Msgsize() + 7 + (*z).AssetTransferTxnFields.AssetCloseTo.Msgsize() + 5 + (*z).AssetFreezeTxnFields.FreezeAccount.Msgsize() + 5 + (*z).AssetFreezeTxnFields.FreezeAsset.Msgsize() + 5 + msgp.BoolSize + 5 + (*z).ApplicationCallTxnFields.ApplicationID.Msgsize() + 5 + msgp.Uint64Size + 5 + msgp.ArrayHeaderSize
	for zb0002 := range (*z).ApplicationCallTxnFields.ApplicationArgs {
		s += msgp.BytesPrefixSize + len((*z).ApplicationCallTxnFields.ApplicationArgs[zb0002])
	}
	s += 5 + msgp.ArrayHeaderSize
	for zb0003 := range (*z).ApplicationCallTxnFields.Accounts {
		s += (*z).ApplicationCallTxnFields.Accounts[zb0003].Msgsize()
	}
	s += 5 + msgp.ArrayHeaderSize
	for zb0004 := range (*z).ApplicationCallTxnFields.ForeignApps {
		s += (*z).ApplicationCallTxnFields.ForeignApps[zb0004].Msgsize()
	}
	s += 5 + msgp.ArrayHeaderSize
	for zb0005 := range (*z).ApplicationCallTxnFields.Boxes {
		s += 1 + 2 + msgp.Uint64Size + 2 + msgp.BytesPrefixSize + len((*z).ApplicationCallTxnFields.Boxes[zb0005].Name)
	}
	s += 5 + msgp.ArrayHeaderSize
	for zb0006 := range (*z).ApplicationCallTxnFields.ForeignAssets {
		s += (*z).ApplicationCallTxnFields.ForeignAssets[zb0006].Msgsize()
	}
	s += 5 + (*z).ApplicationCallTxnFields.LocalStateSchema.Msgsize() + 5 + (*z).ApplicationCallTxnFields.GlobalStateSchema.Msgsize() + 5 + msgp.BytesPrefixSize + len((*z).ApplicationCallTxnFields.ApprovalProgram) + 5 + msgp.BytesPrefixSize + len((*z).ApplicationCallTxnFields.ClearStateProgram) + 5 + msgp.Uint32Size + 7 + (*z).StateProofTxnFields.StateProofType.Msgsize() + 3 + (*z).StateProofTxnFields.StateProof.Msgsize() + 6 + (*z).StateProofTxnFields.Message.Msgsize()
	return
}

// MsgIsZero returns whether this is a zero value
func (z *Transaction) MsgIsZero() bool {
	return ((*z).Type.MsgIsZero()) && ((*z).Header.Sender.MsgIsZero()) && ((*z).Header.Fee.MsgIsZero()) && ((*z).Header.FirstValid.MsgIsZero()) && ((*z).Header.LastValid.MsgIsZero()) && (len((*z).Header.Note) == 0) && ((*z).Header.GenesisID == "") && ((*z).Header.GenesisHash.MsgIsZero()) && ((*z).Header.Group.MsgIsZero()) && ((*z).Header.Lease == ([32]byte{})) && ((*z).Header.RekeyTo.MsgIsZero()) && ((*z).KeyregTxnFields.VotePK.MsgIsZero()) && ((*z).KeyregTxnFields.SelectionPK.MsgIsZero()) && ((*z).KeyregTxnFields.StateProofPK.MsgIsZero()) && ((*z).KeyregTxnFields.VoteFirst.MsgIsZero()) && ((*z).KeyregTxnFields.VoteLast.MsgIsZero()) && ((*z).KeyregTxnFields.VoteKeyDilution == 0) && ((*z).KeyregTxnFields.Nonparticipation == false) && ((*z).PaymentTxnFields.Receiver.MsgIsZero()) && ((*z).PaymentTxnFields.Amount.MsgIsZero()) && ((*z).PaymentTxnFields.CloseRemainderTo.MsgIsZero()) && ((*z).AssetConfigTxnFields.ConfigAsset.MsgIsZero()) && ((*z).AssetConfigTxnFields.AssetParams.MsgIsZero()) && ((*z).AssetTransferTxnFields.XferAsset.MsgIsZero()) && ((*z).AssetTransferTxnFields.AssetAmount == 0) && ((*z).AssetTransferTxnFields.AssetSender.MsgIsZero()) && ((*z).AssetTransferTxnFields.AssetReceiver.MsgIsZero()) && ((*z).AssetTransferTxnFields.AssetCloseTo.MsgIsZero()) && ((*z).AssetFreezeTxnFields.FreezeAccount.MsgIsZero()) && ((*z).AssetFreezeTxnFields.FreezeAsset.MsgIsZero()) && ((*z).AssetFreezeTxnFields.AssetFrozen == false) && ((*z).ApplicationCallTxnFields.ApplicationID.MsgIsZero()) && ((*z).ApplicationCallTxnFields.OnCompletion == 0) && (len((*z).ApplicationCallTxnFields.ApplicationArgs) == 0) && (len((*z).ApplicationCallTxnFields.Accounts) == 0) && (len((*z).ApplicationCallTxnFields.ForeignApps) == 0) && (len((*z).ApplicationCallTxnFields.Boxes) == 0) && (len((*z).ApplicationCallTxnFields.ForeignAssets) == 0) && ((*z).ApplicationCallTxnFields.LocalStateSchema.MsgIsZero()) && ((*z).ApplicationCallTxnFields.GlobalStateSchema.MsgIsZero()) && (len((*z).ApplicationCallTxnFields.ApprovalProgram) == 0) && (len((*z).ApplicationCallTxnFields.ClearStateProgram) == 0) && ((*z).ApplicationCallTxnFields.ExtraProgramPages == 0) && ((*z).StateProofTxnFields.StateProofType.MsgIsZero()) && ((*z).StateProofTxnFields.StateProof.MsgIsZero()) && ((*z).StateProofTxnFields.Message.MsgIsZero())
}

// MaxSize returns a maximum valid message size for this message type
func TransactionMaxSize() (s int) {
	s = 3 + 5 + protocol.TxTypeMaxSize() + 4 + basics.AddressMaxSize() + 4 + basics.MicroAlgosMaxSize() + 3 + basics.RoundMaxSize() + 3 + basics.RoundMaxSize() + 5 + msgp.BytesPrefixSize + config.MaxTxnNoteBytes + 4 + msgp.StringPrefixSize + config.MaxGenesisIDLen + 3 + crypto.DigestMaxSize() + 4 + crypto.DigestMaxSize() + 3
	// Calculating size of array: z.Header.Lease
	s += msgp.ArrayHeaderSize + ((32) * (msgp.ByteSize))
	s += 6 + basics.AddressMaxSize() + 8 + crypto.OneTimeSignatureVerifierMaxSize() + 7 + crypto.VRFVerifierMaxSize() + 8 + merklesignature.CommitmentMaxSize() + 8 + basics.RoundMaxSize() + 8 + basics.RoundMaxSize() + 7 + msgp.Uint64Size + 8 + msgp.BoolSize + 4 + basics.AddressMaxSize() + 4 + basics.MicroAlgosMaxSize() + 6 + basics.AddressMaxSize() + 5 + basics.AssetIndexMaxSize() + 5 + basics.AssetParamsMaxSize() + 5 + basics.AssetIndexMaxSize() + 5 + msgp.Uint64Size + 5 + basics.AddressMaxSize() + 5 + basics.AddressMaxSize() + 7 + basics.AddressMaxSize() + 5 + basics.AddressMaxSize() + 5 + basics.AssetIndexMaxSize() + 5 + msgp.BoolSize + 5 + basics.AppIndexMaxSize() + 5 + msgp.Uint64Size + 5
	// Calculating size of slice: z.ApplicationCallTxnFields.ApplicationArgs
	s += msgp.ArrayHeaderSize + config.MaxAppTotalArgLen + 5
	// Calculating size of slice: z.ApplicationCallTxnFields.Accounts
	s += msgp.ArrayHeaderSize + ((encodedMaxAccounts) * (basics.AddressMaxSize()))
	s += 5
	// Calculating size of slice: z.ApplicationCallTxnFields.ForeignApps
	s += msgp.ArrayHeaderSize + ((encodedMaxForeignApps) * (basics.AppIndexMaxSize()))
	s += 5
	// Calculating size of slice: z.ApplicationCallTxnFields.Boxes
	s += msgp.ArrayHeaderSize + ((encodedMaxBoxes) * (BoxRefMaxSize()))
	s += 5
	// Calculating size of slice: z.ApplicationCallTxnFields.ForeignAssets
	s += msgp.ArrayHeaderSize + ((encodedMaxForeignAssets) * (basics.AssetIndexMaxSize()))
	s += 5 + basics.StateSchemaMaxSize() + 5 + basics.StateSchemaMaxSize() + 5 + msgp.BytesPrefixSize + config.MaxAvailableAppProgramLen + 5 + msgp.BytesPrefixSize + config.MaxAvailableAppProgramLen + 5 + msgp.Uint32Size + 7 + protocol.StateProofTypeMaxSize() + 3 + stateproof.StateProofMaxSize() + 6 + stateproofmsg.MessageMaxSize()
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TxGroup) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0002Len := uint32(1)
	var zb0002Mask uint8 /* 2 bits */
	if len((*z).TxGroupHashes) == 0 {
		zb0002Len--
		zb0002Mask |= 0x2
	}
	// variable map header, size zb0002Len
	o = append(o, 0x80|uint8(zb0002Len))
	if zb0002Len != 0 {
		if (zb0002Mask & 0x2) == 0 { // if not empty
			// string "txlist"
			o = append(o, 0xa6, 0x74, 0x78, 0x6c, 0x69, 0x73, 0x74)
			if (*z).TxGroupHashes == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendArrayHeader(o, uint32(len((*z).TxGroupHashes)))
			}
			for zb0001 := range (*z).TxGroupHashes {
				o = (*z).TxGroupHashes[zb0001].MarshalMsg(o)
			}
		}
	}
	return
}

func (_ *TxGroup) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*TxGroup)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TxGroup) unmarshalMsg(bts []byte, validate bool) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0002 int
	var zb0004 string
	var zb0005 bool
	var zb0003 bool
	_ = zb0004
	_ = zb0005
	zb0002, zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0002, zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if validate {
			err = &msgp.ErrNonCanonical{}
			return
		}
		if zb0002 > 0 {
			zb0002--
			var zb0006 int
			var zb0007 bool
			zb0006, zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "TxGroupHashes")
				return
			}
			if zb0006 > config.MaxTxGroupSize {
				err = msgp.ErrOverflow(uint64(zb0006), uint64(config.MaxTxGroupSize))
				err = msgp.WrapError(err, "struct-from-array", "TxGroupHashes")
				return
			}
			if zb0007 {
				(*z).TxGroupHashes = nil
			} else if (*z).TxGroupHashes != nil && cap((*z).TxGroupHashes) >= zb0006 {
				(*z).TxGroupHashes = ((*z).TxGroupHashes)[:zb0006]
			} else {
				(*z).TxGroupHashes = make([]crypto.Digest, zb0006)
			}
			for zb0001 := range (*z).TxGroupHashes {
				bts, err = (*z).TxGroupHashes[zb0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "struct-from-array", "TxGroupHashes", zb0001)
					return
				}
			}
		}
		if zb0002 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0002)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0003 {
			(*z) = TxGroup{}
		}
		for zb0002 > 0 {
			zb0002--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "txlist":
				if validate && zb0005 && "txlist" < zb0004 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0008 int
				var zb0009 bool
				zb0008, zb0009, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TxGroupHashes")
					return
				}
				if zb0008 > config.MaxTxGroupSize {
					err = msgp.ErrOverflow(uint64(zb0008), uint64(config.MaxTxGroupSize))
					err = msgp.WrapError(err, "TxGroupHashes")
					return
				}
				if zb0009 {
					(*z).TxGroupHashes = nil
				} else if (*z).TxGroupHashes != nil && cap((*z).TxGroupHashes) >= zb0008 {
					(*z).TxGroupHashes = ((*z).TxGroupHashes)[:zb0008]
				} else {
					(*z).TxGroupHashes = make([]crypto.Digest, zb0008)
				}
				for zb0001 := range (*z).TxGroupHashes {
					bts, err = (*z).TxGroupHashes[zb0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "TxGroupHashes", zb0001)
						return
					}
				}
				zb0004 = "txlist"
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
			zb0005 = true
		}
	}
	o = bts
	return
}

func (z *TxGroup) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, false)
}
func (z *TxGroup) UnmarshalValidateMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, true)
}
func (_ *TxGroup) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*TxGroup)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TxGroup) Msgsize() (s int) {
	s = 1 + 7 + msgp.ArrayHeaderSize
	for zb0001 := range (*z).TxGroupHashes {
		s += (*z).TxGroupHashes[zb0001].Msgsize()
	}
	return
}

// MsgIsZero returns whether this is a zero value
func (z *TxGroup) MsgIsZero() bool {
	return (len((*z).TxGroupHashes) == 0)
}

// MaxSize returns a maximum valid message size for this message type
func TxGroupMaxSize() (s int) {
	s = 1 + 7
	// Calculating size of slice: z.TxGroupHashes
	s += msgp.ArrayHeaderSize + ((config.MaxTxGroupSize) * (crypto.DigestMaxSize()))
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Txid) MarshalMsg(b []byte) []byte {
	return ((*(crypto.Digest))(z)).MarshalMsg(b)
}
func (_ *Txid) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*Txid)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Txid) UnmarshalMsg(bts []byte) ([]byte, error) {
	return ((*(crypto.Digest))(z)).UnmarshalMsg(bts)
}
func (z *Txid) UnmarshalValidateMsg(bts []byte) ([]byte, error) {
	return ((*(crypto.Digest))(z)).UnmarshalValidateMsg(bts)
}
func (_ *Txid) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*Txid)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Txid) Msgsize() int {
	return ((*(crypto.Digest))(z)).Msgsize()
}

// MsgIsZero returns whether this is a zero value
func (z *Txid) MsgIsZero() bool {
	return ((*(crypto.Digest))(z)).MsgIsZero()
}

// MaxSize returns a maximum valid message size for this message type
func TxidMaxSize() int {
	return crypto.DigestMaxSize()
}
