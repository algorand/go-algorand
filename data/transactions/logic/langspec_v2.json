{
  "Version": 2,
  "LogicSigVersion": 10,
  "NamedTypes": [
    {
      "Name": "[32]byte",
      "Abbreviation": "3",
      "Bound": [
        32,
        32
      ],
      "AVMType": "[]byte"
    },
    {
      "Name": "[64]byte",
      "Abbreviation": "6",
      "Bound": [
        64,
        64
      ],
      "AVMType": "[]byte"
    },
    {
      "Name": "[80]byte",
      "Abbreviation": "8",
      "Bound": [
        80,
        80
      ],
      "AVMType": "[]byte"
    },
    {
      "Name": "[]byte",
      "Abbreviation": "b",
      "Bound": [
        0,
        4096
      ],
      "AVMType": "[]byte"
    },
    {
      "Name": "address",
      "Abbreviation": "A",
      "Bound": [
        32,
        32
      ],
      "AVMType": "[]byte"
    },
    {
      "Name": "any",
      "Abbreviation": "a",
      "Bound": [
        0,
        0
      ],
      "AVMType": "any"
    },
    {
      "Name": "bigint",
      "Abbreviation": "I",
      "Bound": [
        0,
        64
      ],
      "AVMType": "[]byte"
    },
    {
      "Name": "bool",
      "Abbreviation": "T",
      "Bound": [
        0,
        1
      ],
      "AVMType": "uint64"
    },
    {
      "Name": "boxName",
      "Abbreviation": "N",
      "Bound": [
        1,
        64
      ],
      "AVMType": "[]byte"
    },
    {
      "Name": "method",
      "Abbreviation": "M",
      "Bound": [
        4,
        4
      ],
      "AVMType": "[]byte"
    },
    {
      "Name": "none",
      "Abbreviation": "x",
      "Bound": [
        0,
        0
      ],
      "AVMType": "none"
    },
    {
      "Name": "stateKey",
      "Abbreviation": "K",
      "Bound": [
        0,
        64
      ],
      "AVMType": "[]byte"
    },
    {
      "Name": "uint64",
      "Abbreviation": "i",
      "Bound": [
        0,
        18446744073709551615
      ],
      "AVMType": "uint64"
    }
  ],
  "Ops": [
    {
      "Opcode": 0,
      "Name": "err",
      "Size": 1,
      "DocCost": "1",
      "Doc": "Fail immediately.",
      "IntroducedVersion": 1,
      "Groups": [
        "Flow Control"
      ]
    },
    {
      "Opcode": 1,
      "Name": "sha256",
      "Args": [
        "[]byte"
      ],
      "Returns": [
        "[32]byte"
      ],
      "Size": 1,
      "DocCost": "35",
      "Doc": "SHA256 hash of value A, yields [32]byte",
      "IntroducedVersion": 1,
      "Groups": [
        "Cryptography"
      ]
    },
    {
      "Opcode": 2,
      "Name": "keccak256",
      "Args": [
        "[]byte"
      ],
      "Returns": [
        "[32]byte"
      ],
      "Size": 1,
      "DocCost": "130",
      "Doc": "Keccak256 hash of value A, yields [32]byte",
      "IntroducedVersion": 1,
      "Groups": [
        "Cryptography"
      ]
    },
    {
      "Opcode": 3,
      "Name": "sha512_256",
      "Args": [
        "[]byte"
      ],
      "Returns": [
        "[32]byte"
      ],
      "Size": 1,
      "DocCost": "45",
      "Doc": "SHA512_256 hash of value A, yields [32]byte",
      "IntroducedVersion": 1,
      "Groups": [
        "Cryptography"
      ]
    },
    {
      "Opcode": 4,
      "Name": "ed25519verify",
      "Args": [
        "[]byte",
        "[64]byte",
        "[32]byte"
      ],
      "Returns": [
        "bool"
      ],
      "Size": 1,
      "DocCost": "1900",
      "Doc": "for (data A, signature B, pubkey C) verify the signature of (\"ProgData\" || program_hash || data) against the pubkey =\u003e {0 or 1}",
      "DocExtra": "The 32 byte public key is the last element on the stack, preceded by the 64 byte signature at the second-to-last element on the stack, preceded by the data which was signed at the third-to-last element on the stack.",
      "IntroducedVersion": 1,
      "Groups": [
        "Cryptography"
      ]
    },
    {
      "Opcode": 8,
      "Name": "+",
      "Args": [
        "uint64",
        "uint64"
      ],
      "Returns": [
        "uint64"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "A plus B. Fail on overflow.",
      "DocExtra": "Overflow is an error condition which halts execution and fails the transaction. Full precision is available from `addw`.",
      "IntroducedVersion": 1,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 9,
      "Name": "-",
      "Args": [
        "uint64",
        "uint64"
      ],
      "Returns": [
        "uint64"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "A minus B. Fail if B \u003e A.",
      "IntroducedVersion": 1,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 10,
      "Name": "/",
      "Args": [
        "uint64",
        "uint64"
      ],
      "Returns": [
        "uint64"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "A divided by B (truncated division). Fail if B == 0.",
      "DocExtra": "`divmodw` is available to divide the two-element values produced by `mulw` and `addw`.",
      "IntroducedVersion": 1,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 11,
      "Name": "*",
      "Args": [
        "uint64",
        "uint64"
      ],
      "Returns": [
        "uint64"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "A times B. Fail on overflow.",
      "DocExtra": "Overflow is an error condition which halts execution and fails the transaction. Full precision is available from `mulw`.",
      "IntroducedVersion": 1,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 12,
      "Name": "\u003c",
      "Args": [
        "uint64",
        "uint64"
      ],
      "Returns": [
        "bool"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "A less than B =\u003e {0 or 1}",
      "IntroducedVersion": 1,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 13,
      "Name": "\u003e",
      "Args": [
        "uint64",
        "uint64"
      ],
      "Returns": [
        "bool"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "A greater than B =\u003e {0 or 1}",
      "IntroducedVersion": 1,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 14,
      "Name": "\u003c=",
      "Args": [
        "uint64",
        "uint64"
      ],
      "Returns": [
        "bool"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "A less than or equal to B =\u003e {0 or 1}",
      "IntroducedVersion": 1,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 15,
      "Name": "\u003e=",
      "Args": [
        "uint64",
        "uint64"
      ],
      "Returns": [
        "bool"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "A greater than or equal to B =\u003e {0 or 1}",
      "IntroducedVersion": 1,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 16,
      "Name": "\u0026\u0026",
      "Args": [
        "uint64",
        "uint64"
      ],
      "Returns": [
        "bool"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "A is not zero and B is not zero =\u003e {0 or 1}",
      "IntroducedVersion": 1,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 17,
      "Name": "||",
      "Args": [
        "uint64",
        "uint64"
      ],
      "Returns": [
        "bool"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "A is not zero or B is not zero =\u003e {0 or 1}",
      "IntroducedVersion": 1,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 18,
      "Name": "==",
      "Args": [
        "any",
        "any"
      ],
      "Returns": [
        "bool"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "A is equal to B =\u003e {0 or 1}",
      "IntroducedVersion": 1,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 19,
      "Name": "!=",
      "Args": [
        "any",
        "any"
      ],
      "Returns": [
        "bool"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "A is not equal to B =\u003e {0 or 1}",
      "IntroducedVersion": 1,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 20,
      "Name": "!",
      "Args": [
        "uint64"
      ],
      "Returns": [
        "uint64"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "A == 0 yields 1; else 0",
      "IntroducedVersion": 1,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 21,
      "Name": "len",
      "Args": [
        "[]byte"
      ],
      "Returns": [
        "uint64"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "yields length of byte value A",
      "IntroducedVersion": 1,
      "Groups": [
        "Byte Array Manipulation"
      ]
    },
    {
      "Opcode": 22,
      "Name": "itob",
      "Args": [
        "uint64"
      ],
      "Returns": [
        "[]byte"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "converts uint64 A to big-endian byte array, always of length 8",
      "IntroducedVersion": 1,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 23,
      "Name": "btoi",
      "Args": [
        "[]byte"
      ],
      "Returns": [
        "uint64"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "converts big-endian byte array A to uint64. Fails if len(A) \u003e 8. Padded by leading 0s if len(A) \u003c 8.",
      "DocExtra": "`btoi` fails if the input is longer than 8 bytes.",
      "IntroducedVersion": 1,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 24,
      "Name": "%",
      "Args": [
        "uint64",
        "uint64"
      ],
      "Returns": [
        "uint64"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "A modulo B. Fail if B == 0.",
      "IntroducedVersion": 1,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 25,
      "Name": "|",
      "Args": [
        "uint64",
        "uint64"
      ],
      "Returns": [
        "uint64"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "A bitwise-or B",
      "IntroducedVersion": 1,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 26,
      "Name": "\u0026",
      "Args": [
        "uint64",
        "uint64"
      ],
      "Returns": [
        "uint64"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "A bitwise-and B",
      "IntroducedVersion": 1,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 27,
      "Name": "^",
      "Args": [
        "uint64",
        "uint64"
      ],
      "Returns": [
        "uint64"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "A bitwise-xor B",
      "IntroducedVersion": 1,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 28,
      "Name": "~",
      "Args": [
        "uint64"
      ],
      "Returns": [
        "uint64"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "bitwise invert value A",
      "IntroducedVersion": 1,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 29,
      "Name": "mulw",
      "Args": [
        "uint64",
        "uint64"
      ],
      "Returns": [
        "uint64",
        "uint64"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "A times B as a 128-bit result in two uint64s. X is the high 64 bits, Y is the low",
      "IntroducedVersion": 1,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 30,
      "Name": "addw",
      "Args": [
        "uint64",
        "uint64"
      ],
      "Returns": [
        "uint64",
        "uint64"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "A plus B as a 128-bit result. X is the carry-bit, Y is the low-order 64 bits.",
      "IntroducedVersion": 2,
      "Groups": [
        "Arithmetic"
      ]
    },
    {
      "Opcode": 32,
      "Name": "intcblock",
      "Size": 0,
      "DocCost": "1",
      "Doc": "prepare block of uint64 constants for use by intc",
      "DocExtra": "`intcblock` loads following program bytes into an array of integer constants in the evaluator. These integer constants can be referred to by `intc` and `intc_*` which will push the value onto the stack. Subsequent calls to `intcblock` reset and replace the integer constants available to the script.",
      "ImmediateNote": [
        {
          "Comment": "a block of int constant values",
          "Encoding": "varuint count, [varuint ...]",
          "Name": "UINT ..."
        }
      ],
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 33,
      "Name": "intc",
      "Returns": [
        "uint64"
      ],
      "Size": 2,
      "DocCost": "1",
      "Doc": "Ith constant from intcblock",
      "ImmediateNote": [
        {
          "Comment": "an index in the intcblock",
          "Encoding": "uint8",
          "Name": "I"
        }
      ],
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 34,
      "Name": "intc_0",
      "Returns": [
        "uint64"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "constant 0 from intcblock",
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 35,
      "Name": "intc_1",
      "Returns": [
        "uint64"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "constant 1 from intcblock",
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 36,
      "Name": "intc_2",
      "Returns": [
        "uint64"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "constant 2 from intcblock",
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 37,
      "Name": "intc_3",
      "Returns": [
        "uint64"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "constant 3 from intcblock",
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 38,
      "Name": "bytecblock",
      "Size": 0,
      "DocCost": "1",
      "Doc": "prepare block of byte-array constants for use by bytec",
      "DocExtra": "`bytecblock` loads the following program bytes into an array of byte-array constants in the evaluator. These constants can be referred to by `bytec` and `bytec_*` which will push the value onto the stack. Subsequent calls to `bytecblock` reset and replace the bytes constants available to the script.",
      "ImmediateNote": [
        {
          "Comment": "a block of byte constant values",
          "Encoding": "varuint count, [varuint length, bytes ...]",
          "Name": "BYTES ..."
        }
      ],
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 39,
      "Name": "bytec",
      "Returns": [
        "[]byte"
      ],
      "Size": 2,
      "DocCost": "1",
      "Doc": "Ith constant from bytecblock",
      "ImmediateNote": [
        {
          "Comment": "an index in the bytecblock",
          "Encoding": "uint8",
          "Name": "I"
        }
      ],
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 40,
      "Name": "bytec_0",
      "Returns": [
        "[]byte"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "constant 0 from bytecblock",
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 41,
      "Name": "bytec_1",
      "Returns": [
        "[]byte"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "constant 1 from bytecblock",
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 42,
      "Name": "bytec_2",
      "Returns": [
        "[]byte"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "constant 2 from bytecblock",
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 43,
      "Name": "bytec_3",
      "Returns": [
        "[]byte"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "constant 3 from bytecblock",
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 44,
      "Name": "arg",
      "Returns": [
        "[]byte"
      ],
      "Size": 2,
      "DocCost": "1",
      "Doc": "Nth LogicSig argument",
      "ImmediateNote": [
        {
          "Comment": "an arg index",
          "Encoding": "uint8",
          "Name": "N"
        }
      ],
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 45,
      "Name": "arg_0",
      "Returns": [
        "[]byte"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "LogicSig argument 0",
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 46,
      "Name": "arg_1",
      "Returns": [
        "[]byte"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "LogicSig argument 1",
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 47,
      "Name": "arg_2",
      "Returns": [
        "[]byte"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "LogicSig argument 2",
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 48,
      "Name": "arg_3",
      "Returns": [
        "[]byte"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "LogicSig argument 3",
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 49,
      "Name": "txn",
      "Returns": [
        "any"
      ],
      "Size": 2,
      "ArgEnum": [
        "Sender",
        "Fee",
        "FirstValid",
        "LastValid",
        "Note",
        "Lease",
        "Receiver",
        "Amount",
        "CloseRemainderTo",
        "VotePK",
        "SelectionPK",
        "VoteFirst",
        "VoteLast",
        "VoteKeyDilution",
        "Type",
        "TypeEnum",
        "XferAsset",
        "AssetAmount",
        "AssetSender",
        "AssetReceiver",
        "AssetCloseTo",
        "GroupIndex",
        "TxID",
        "ApplicationID",
        "OnCompletion",
        "ApplicationArgs",
        "NumAppArgs",
        "Accounts",
        "NumAccounts",
        "ApprovalProgram",
        "ClearStateProgram",
        "RekeyTo",
        "ConfigAsset",
        "ConfigAssetTotal",
        "ConfigAssetDecimals",
        "ConfigAssetDefaultFrozen",
        "ConfigAssetUnitName",
        "ConfigAssetName",
        "ConfigAssetURL",
        "ConfigAssetMetadataHash",
        "ConfigAssetManager",
        "ConfigAssetReserve",
        "ConfigAssetFreeze",
        "ConfigAssetClawback",
        "FreezeAsset",
        "FreezeAssetAccount",
        "FreezeAssetFrozen"
      ],
      "ArgEnumTypes": [
        "address",
        "uint64",
        "uint64",
        "uint64",
        "[]byte",
        "[32]byte",
        "address",
        "uint64",
        "address",
        "[32]byte",
        "[32]byte",
        "uint64",
        "uint64",
        "uint64",
        "[]byte",
        "uint64",
        "uint64",
        "uint64",
        "address",
        "address",
        "address",
        "uint64",
        "[32]byte",
        "uint64",
        "uint64",
        "[]byte",
        "uint64",
        "address",
        "uint64",
        "[]byte",
        "[]byte",
        "address",
        "uint64",
        "uint64",
        "uint64",
        "bool",
        "[]byte",
        "[]byte",
        "[]byte",
        "[32]byte",
        "address",
        "address",
        "address",
        "address",
        "uint64",
        "address",
        "bool"
      ],
      "DocCost": "1",
      "Doc": "field F of current transaction",
      "ImmediateNote": [
        {
          "Comment": "transaction field index",
          "Encoding": "uint8",
          "Name": "F",
          "Reference": "txn"
        }
      ],
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 50,
      "Name": "global",
      "Returns": [
        "any"
      ],
      "Size": 2,
      "ArgEnum": [
        "MinTxnFee",
        "MinBalance",
        "MaxTxnLife",
        "ZeroAddress",
        "GroupSize",
        "LogicSigVersion",
        "Round",
        "LatestTimestamp",
        "CurrentApplicationID"
      ],
      "ArgEnumTypes": [
        "uint64",
        "uint64",
        "uint64",
        "address",
        "uint64",
        "uint64",
        "uint64",
        "uint64",
        "uint64"
      ],
      "DocCost": "1",
      "Doc": "global field F",
      "ImmediateNote": [
        {
          "Comment": "a global field index",
          "Encoding": "uint8",
          "Name": "F",
          "Reference": "global"
        }
      ],
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 51,
      "Name": "gtxn",
      "Returns": [
        "any"
      ],
      "Size": 3,
      "ArgEnum": [
        "Sender",
        "Fee",
        "FirstValid",
        "LastValid",
        "Note",
        "Lease",
        "Receiver",
        "Amount",
        "CloseRemainderTo",
        "VotePK",
        "SelectionPK",
        "VoteFirst",
        "VoteLast",
        "VoteKeyDilution",
        "Type",
        "TypeEnum",
        "XferAsset",
        "AssetAmount",
        "AssetSender",
        "AssetReceiver",
        "AssetCloseTo",
        "GroupIndex",
        "TxID",
        "ApplicationID",
        "OnCompletion",
        "ApplicationArgs",
        "NumAppArgs",
        "Accounts",
        "NumAccounts",
        "ApprovalProgram",
        "ClearStateProgram",
        "RekeyTo",
        "ConfigAsset",
        "ConfigAssetTotal",
        "ConfigAssetDecimals",
        "ConfigAssetDefaultFrozen",
        "ConfigAssetUnitName",
        "ConfigAssetName",
        "ConfigAssetURL",
        "ConfigAssetMetadataHash",
        "ConfigAssetManager",
        "ConfigAssetReserve",
        "ConfigAssetFreeze",
        "ConfigAssetClawback",
        "FreezeAsset",
        "FreezeAssetAccount",
        "FreezeAssetFrozen"
      ],
      "ArgEnumTypes": [
        "address",
        "uint64",
        "uint64",
        "uint64",
        "[]byte",
        "[32]byte",
        "address",
        "uint64",
        "address",
        "[32]byte",
        "[32]byte",
        "uint64",
        "uint64",
        "uint64",
        "[]byte",
        "uint64",
        "uint64",
        "uint64",
        "address",
        "address",
        "address",
        "uint64",
        "[32]byte",
        "uint64",
        "uint64",
        "[]byte",
        "uint64",
        "address",
        "uint64",
        "[]byte",
        "[]byte",
        "address",
        "uint64",
        "uint64",
        "uint64",
        "bool",
        "[]byte",
        "[]byte",
        "[]byte",
        "[32]byte",
        "address",
        "address",
        "address",
        "address",
        "uint64",
        "address",
        "bool"
      ],
      "DocCost": "1",
      "Doc": "field F of the Tth transaction in the current group",
      "DocExtra": "for notes on transaction fields available, see `txn`. If this transaction is _i_ in the group, `gtxn i field` is equivalent to `txn field`.",
      "ImmediateNote": [
        {
          "Comment": "transaction group index",
          "Encoding": "uint8",
          "Name": "T"
        },
        {
          "Comment": "transaction field index",
          "Encoding": "uint8",
          "Name": "F",
          "Reference": "txn"
        }
      ],
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 52,
      "Name": "load",
      "Returns": [
        "any"
      ],
      "Size": 2,
      "DocCost": "1",
      "Doc": "Ith scratch space value. All scratch spaces are 0 at program start.",
      "ImmediateNote": [
        {
          "Comment": "position in scratch space to load from",
          "Encoding": "uint8",
          "Name": "I"
        }
      ],
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 53,
      "Name": "store",
      "Args": [
        "any"
      ],
      "Size": 2,
      "DocCost": "1",
      "Doc": "store A to the Ith scratch space",
      "ImmediateNote": [
        {
          "Comment": "position in scratch space to store to",
          "Encoding": "uint8",
          "Name": "I"
        }
      ],
      "IntroducedVersion": 1,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 54,
      "Name": "txna",
      "Returns": [
        "any"
      ],
      "Size": 3,
      "ArgEnum": [
        "ApplicationArgs",
        "Accounts"
      ],
      "ArgEnumTypes": [
        "[]byte",
        "address"
      ],
      "DocCost": "1",
      "Doc": "Ith value of the array field F of the current transaction\n`txna` can be called using `txn` with 2 immediates.",
      "ImmediateNote": [
        {
          "Comment": "transaction field index",
          "Encoding": "uint8",
          "Name": "F",
          "Reference": "txna"
        },
        {
          "Comment": "transaction field array index",
          "Encoding": "uint8",
          "Name": "I"
        }
      ],
      "IntroducedVersion": 2,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 55,
      "Name": "gtxna",
      "Returns": [
        "any"
      ],
      "Size": 4,
      "ArgEnum": [
        "ApplicationArgs",
        "Accounts"
      ],
      "ArgEnumTypes": [
        "[]byte",
        "address"
      ],
      "DocCost": "1",
      "Doc": "Ith value of the array field F from the Tth transaction in the current group\n`gtxna` can be called using `gtxn` with 3 immediates.",
      "ImmediateNote": [
        {
          "Comment": "transaction group index",
          "Encoding": "uint8",
          "Name": "T"
        },
        {
          "Comment": "transaction field index",
          "Encoding": "uint8",
          "Name": "F",
          "Reference": "txna"
        },
        {
          "Comment": "transaction field array index",
          "Encoding": "uint8",
          "Name": "I"
        }
      ],
      "IntroducedVersion": 2,
      "Groups": [
        "Loading Values"
      ]
    },
    {
      "Opcode": 64,
      "Name": "bnz",
      "Args": [
        "uint64"
      ],
      "Size": 3,
      "DocCost": "1",
      "Doc": "branch to TARGET if value A is not zero",
      "DocExtra": "The `bnz` instruction opcode 0x40 is followed by two immediate data bytes which are a high byte first and low byte second which together form a 16 bit offset which the instruction may branch to. For a bnz instruction at `pc`, if the last element of the stack is not zero then branch to instruction at `pc + 3 + N`, else proceed to next instruction at `pc + 3`. Branch targets must be aligned instructions. (e.g. Branching to the second byte of a 2 byte op will be rejected.) Starting at v4, the offset is treated as a signed 16 bit integer allowing for backward branches and looping. In prior version (v1 to v3), branch offsets are limited to forward branches only, 0-0x7fff.\n\nAt v2 it became allowed to branch to the end of the program exactly after the last instruction: bnz to byte N (with 0-indexing) was illegal for a TEAL program with N bytes before v2, and is legal after it. This change eliminates the need for a last instruction of no-op as a branch target at the end. (Branching beyond the end--in other words, to a byte larger than N--is still illegal and will cause the program to fail.)",
      "ImmediateNote": [
        {
          "Comment": "branch offset",
          "Encoding": "int16 (big-endian)",
          "Name": "TARGET"
        }
      ],
      "IntroducedVersion": 1,
      "Groups": [
        "Flow Control"
      ]
    },
    {
      "Opcode": 65,
      "Name": "bz",
      "Args": [
        "uint64"
      ],
      "Size": 3,
      "DocCost": "1",
      "Doc": "branch to TARGET if value A is zero",
      "DocExtra": "See `bnz` for details on how branches work. `bz` inverts the behavior of `bnz`.",
      "ImmediateNote": [
        {
          "Comment": "branch offset",
          "Encoding": "int16 (big-endian)",
          "Name": "TARGET"
        }
      ],
      "IntroducedVersion": 2,
      "Groups": [
        "Flow Control"
      ]
    },
    {
      "Opcode": 66,
      "Name": "b",
      "Size": 3,
      "DocCost": "1",
      "Doc": "branch unconditionally to TARGET",
      "DocExtra": "See `bnz` for details on how branches work. `b` always jumps to the offset.",
      "ImmediateNote": [
        {
          "Comment": "branch offset",
          "Encoding": "int16 (big-endian)",
          "Name": "TARGET"
        }
      ],
      "IntroducedVersion": 2,
      "Groups": [
        "Flow Control"
      ]
    },
    {
      "Opcode": 67,
      "Name": "return",
      "Args": [
        "uint64"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "use A as success value; end",
      "IntroducedVersion": 2,
      "Groups": [
        "Flow Control"
      ]
    },
    {
      "Opcode": 72,
      "Name": "pop",
      "Args": [
        "any"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "discard A",
      "IntroducedVersion": 1,
      "Groups": [
        "Flow Control"
      ]
    },
    {
      "Opcode": 73,
      "Name": "dup",
      "Args": [
        "any"
      ],
      "Returns": [
        "any",
        "any"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "duplicate A",
      "IntroducedVersion": 1,
      "Groups": [
        "Flow Control"
      ]
    },
    {
      "Opcode": 74,
      "Name": "dup2",
      "Args": [
        "any",
        "any"
      ],
      "Returns": [
        "any",
        "any",
        "any",
        "any"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "duplicate A and B",
      "IntroducedVersion": 2,
      "Groups": [
        "Flow Control"
      ]
    },
    {
      "Opcode": 80,
      "Name": "concat",
      "Args": [
        "[]byte",
        "[]byte"
      ],
      "Returns": [
        "[]byte"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "join A and B",
      "DocExtra": "`concat` fails if the result would be greater than 4096 bytes.",
      "IntroducedVersion": 2,
      "Groups": [
        "Byte Array Manipulation"
      ]
    },
    {
      "Opcode": 81,
      "Name": "substring",
      "Args": [
        "[]byte"
      ],
      "Returns": [
        "[]byte"
      ],
      "Size": 3,
      "DocCost": "1",
      "Doc": "A range of bytes from A starting at S up to but not including E. If E \u003c S, or either is larger than the array length, the program fails",
      "ImmediateNote": [
        {
          "Comment": "start position",
          "Encoding": "uint8",
          "Name": "S"
        },
        {
          "Comment": "end position",
          "Encoding": "uint8",
          "Name": "E"
        }
      ],
      "IntroducedVersion": 2,
      "Groups": [
        "Byte Array Manipulation"
      ]
    },
    {
      "Opcode": 82,
      "Name": "substring3",
      "Args": [
        "[]byte",
        "uint64",
        "uint64"
      ],
      "Returns": [
        "[]byte"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "A range of bytes from A starting at B up to but not including C. If C \u003c B, or either is larger than the array length, the program fails",
      "IntroducedVersion": 2,
      "Groups": [
        "Byte Array Manipulation"
      ]
    },
    {
      "Opcode": 96,
      "Name": "balance",
      "Args": [
        "uint64"
      ],
      "Returns": [
        "uint64"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "balance for account A, in microalgos. The balance is observed after the effects of previous transactions in the group, and after the fee for the current transaction is deducted. Changes caused by inner transactions are observable immediately following `itxn_submit`",
      "DocExtra": "params: Txn.Accounts offset (or, since v4, an _available_ account address), _available_ application id (or, since v4, a Txn.ForeignApps offset). Return: value.",
      "IntroducedVersion": 2,
      "Groups": [
        "State Access"
      ]
    },
    {
      "Opcode": 97,
      "Name": "app_opted_in",
      "Args": [
        "uint64",
        "uint64"
      ],
      "Returns": [
        "bool"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "1 if account A is opted in to application B, else 0",
      "DocExtra": "params: Txn.Accounts offset (or, since v4, an _available_ account address), _available_ application id (or, since v4, a Txn.ForeignApps offset). Return: 1 if opted in and 0 otherwise.",
      "IntroducedVersion": 2,
      "Groups": [
        "State Access"
      ]
    },
    {
      "Opcode": 98,
      "Name": "app_local_get",
      "Args": [
        "uint64",
        "[]byte"
      ],
      "Returns": [
        "any"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "local state of the key B in the current application in account A",
      "DocExtra": "params: Txn.Accounts offset (or, since v4, an _available_ account address), state key. Return: value. The value is zero (of type uint64) if the key does not exist.",
      "IntroducedVersion": 2,
      "Groups": [
        "State Access"
      ]
    },
    {
      "Opcode": 99,
      "Name": "app_local_get_ex",
      "Args": [
        "uint64",
        "uint64",
        "[]byte"
      ],
      "Returns": [
        "any",
        "bool"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "X is the local state of application B, key C in account A. Y is 1 if key existed, else 0",
      "DocExtra": "params: Txn.Accounts offset (or, since v4, an _available_ account address), _available_ application id (or, since v4, a Txn.ForeignApps offset), state key. Return: did_exist flag (top of the stack, 1 if the application and key existed and 0 otherwise), value. The value is zero (of type uint64) if the key does not exist.",
      "IntroducedVersion": 2,
      "Groups": [
        "State Access"
      ]
    },
    {
      "Opcode": 100,
      "Name": "app_global_get",
      "Args": [
        "[]byte"
      ],
      "Returns": [
        "any"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "global state of the key A in the current application",
      "DocExtra": "params: state key. Return: value. The value is zero (of type uint64) if the key does not exist.",
      "IntroducedVersion": 2,
      "Groups": [
        "State Access"
      ]
    },
    {
      "Opcode": 101,
      "Name": "app_global_get_ex",
      "Args": [
        "uint64",
        "[]byte"
      ],
      "Returns": [
        "any",
        "bool"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "X is the global state of application A, key B. Y is 1 if key existed, else 0",
      "DocExtra": "params: Txn.ForeignApps offset (or, since v4, an _available_ application id), state key. Return: did_exist flag (top of the stack, 1 if the application and key existed and 0 otherwise), value. The value is zero (of type uint64) if the key does not exist.",
      "IntroducedVersion": 2,
      "Groups": [
        "State Access"
      ]
    },
    {
      "Opcode": 102,
      "Name": "app_local_put",
      "Args": [
        "uint64",
        "[]byte",
        "any"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "write C to key B in account A's local state of the current application",
      "DocExtra": "params: Txn.Accounts offset (or, since v4, an _available_ account address), state key, value.",
      "IntroducedVersion": 2,
      "Groups": [
        "State Access"
      ]
    },
    {
      "Opcode": 103,
      "Name": "app_global_put",
      "Args": [
        "[]byte",
        "any"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "write B to key A in the global state of the current application",
      "IntroducedVersion": 2,
      "Groups": [
        "State Access"
      ]
    },
    {
      "Opcode": 104,
      "Name": "app_local_del",
      "Args": [
        "uint64",
        "[]byte"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "delete key B from account A's local state of the current application",
      "DocExtra": "params: Txn.Accounts offset (or, since v4, an _available_ account address), state key.\n\nDeleting a key which is already absent has no effect on the application local state. (In particular, it does _not_ cause the program to fail.)",
      "IntroducedVersion": 2,
      "Groups": [
        "State Access"
      ]
    },
    {
      "Opcode": 105,
      "Name": "app_global_del",
      "Args": [
        "[]byte"
      ],
      "Size": 1,
      "DocCost": "1",
      "Doc": "delete key A from the global state of the current application",
      "DocExtra": "params: state key.\n\nDeleting a key which is already absent has no effect on the application global state. (In particular, it does _not_ cause the program to fail.)",
      "IntroducedVersion": 2,
      "Groups": [
        "State Access"
      ]
    },
    {
      "Opcode": 112,
      "Name": "asset_holding_get",
      "Args": [
        "uint64",
        "uint64"
      ],
      "Returns": [
        "any",
        "bool"
      ],
      "Size": 2,
      "ArgEnum": [
        "AssetBalance",
        "AssetFrozen"
      ],
      "ArgEnumTypes": [
        "uint64",
        "bool"
      ],
      "DocCost": "1",
      "Doc": "X is field F from account A's holding of asset B. Y is 1 if A is opted into B, else 0",
      "DocExtra": "params: Txn.Accounts offset (or, since v4, an _available_ address), asset id (or, since v4, a Txn.ForeignAssets offset). Return: did_exist flag (1 if the asset existed and 0 otherwise), value.",
      "ImmediateNote": [
        {
          "Comment": "asset holding field index",
          "Encoding": "uint8",
          "Name": "F",
          "Reference": "asset_holding"
        }
      ],
      "IntroducedVersion": 2,
      "Groups": [
        "State Access"
      ]
    },
    {
      "Opcode": 113,
      "Name": "asset_params_get",
      "Args": [
        "uint64"
      ],
      "Returns": [
        "any",
        "bool"
      ],
      "Size": 2,
      "ArgEnum": [
        "AssetTotal",
        "AssetDecimals",
        "AssetDefaultFrozen",
        "AssetUnitName",
        "AssetName",
        "AssetURL",
        "AssetMetadataHash",
        "AssetManager",
        "AssetReserve",
        "AssetFreeze",
        "AssetClawback"
      ],
      "ArgEnumTypes": [
        "uint64",
        "uint64",
        "bool",
        "[]byte",
        "[]byte",
        "[]byte",
        "[32]byte",
        "address",
        "address",
        "address",
        "address"
      ],
      "DocCost": "1",
      "Doc": "X is field F from asset A. Y is 1 if A exists, else 0",
      "DocExtra": "params: Txn.ForeignAssets offset (or, since v4, an _available_ asset id. Return: did_exist flag (1 if the asset existed and 0 otherwise), value.",
      "ImmediateNote": [
        {
          "Comment": "asset params field index",
          "Encoding": "uint8",
          "Name": "F",
          "Reference": "asset_params"
        }
      ],
      "IntroducedVersion": 2,
      "Groups": [
        "State Access"
      ]
    }
  ]
}
