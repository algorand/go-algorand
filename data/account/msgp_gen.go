package account

// Code generated by github.com/algorand/msgp DO NOT EDIT.

import (
	"github.com/algorand/msgp/msgp"
)

// The following msgp objects are implemented in this file:
// participationIDData
//          |-----> (*) MarshalMsg
//          |-----> (*) CanMarshalMsg
//          |-----> (*) UnmarshalMsg
//          |-----> (*) CanUnmarshalMsg
//          |-----> (*) Msgsize
//          |-----> (*) MsgIsZero
//

// MarshalMsg implements msgp.Marshaler
func (z *participationIDData) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "FirstValid"
	o = append(o, 0x85, 0xaa, 0x46, 0x69, 0x72, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64)
	o = (*z).FirstValid.MarshalMsg(o)
	// string "KeyDilution"
	o = append(o, 0xab, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendUint64(o, (*z).KeyDilution)
	// string "LastValid"
	o = append(o, 0xa9, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64)
	o = (*z).LastValid.MarshalMsg(o)
	// string "Parent"
	o = append(o, 0xa6, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74)
	o = (*z).Parent.MarshalMsg(o)
	// string "VRF"
	o = append(o, 0xa3, 0x56, 0x52, 0x46)
	o = (*z).VRF.MarshalMsg(o)
	return
}

func (_ *participationIDData) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*participationIDData)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *participationIDData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0002 bool
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).Parent.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "Parent")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).VRF.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VRF")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).FirstValid.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FirstValid")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			bts, err = (*z).LastValid.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LastValid")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).KeyDilution, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "KeyDilution")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = participationIDData{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "Parent":
				bts, err = (*z).Parent.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Parent")
					return
				}
			case "VRF":
				bts, err = (*z).VRF.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "VRF")
					return
				}
			case "FirstValid":
				bts, err = (*z).FirstValid.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "FirstValid")
					return
				}
			case "LastValid":
				bts, err = (*z).LastValid.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "LastValid")
					return
				}
			case "KeyDilution":
				(*z).KeyDilution, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "KeyDilution")
					return
				}
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
		}
	}
	o = bts
	return
}

func (_ *participationIDData) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*participationIDData)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *participationIDData) Msgsize() (s int) {
	s = 1 + 7 + (*z).Parent.Msgsize() + 4 + (*z).VRF.Msgsize() + 11 + (*z).FirstValid.Msgsize() + 10 + (*z).LastValid.Msgsize() + 12 + msgp.Uint64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z *participationIDData) MsgIsZero() bool {
	return ((*z).Parent.MsgIsZero()) && ((*z).VRF.MsgIsZero()) && ((*z).FirstValid.MsgIsZero()) && ((*z).LastValid.MsgIsZero()) && ((*z).KeyDilution == 0)
}
