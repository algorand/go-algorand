package stateproofmsg

// Code generated by github.com/algorand/msgp DO NOT EDIT.

import (
	"github.com/algorand/msgp/msgp"

	"github.com/algorand/go-algorand/crypto"
)

// The following msgp objects are implemented in this file:
// Message
//    |-----> (*) MarshalMsg
//    |-----> (*) CanMarshalMsg
//    |-----> (*) UnmarshalMsg
//    |-----> (*) UnmarshalValidateMsg
//    |-----> (*) CanUnmarshalMsg
//    |-----> (*) Msgsize
//    |-----> (*) MsgIsZero
//    |-----> MessageMaxSize()
//

// MarshalMsg implements msgp.Marshaler
func (z *Message) MarshalMsg(b []byte) (o []byte) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(5)
	var zb0001Mask uint8 /* 6 bits */
	if (*z).LnProvenWeight == 0 {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if len((*z).BlockHeadersCommitment) == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if (*z).FirstAttestedRound == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if (*z).LastAttestedRound == 0 {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if len((*z).VotersCommitment) == 0 {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not empty
			// string "P"
			o = append(o, 0xa1, 0x50)
			o = msgp.AppendUint64(o, (*z).LnProvenWeight)
		}
		if (zb0001Mask & 0x4) == 0 { // if not empty
			// string "b"
			o = append(o, 0xa1, 0x62)
			o = msgp.AppendBytes(o, (*z).BlockHeadersCommitment)
		}
		if (zb0001Mask & 0x8) == 0 { // if not empty
			// string "f"
			o = append(o, 0xa1, 0x66)
			o = msgp.AppendUint64(o, (*z).FirstAttestedRound)
		}
		if (zb0001Mask & 0x10) == 0 { // if not empty
			// string "l"
			o = append(o, 0xa1, 0x6c)
			o = msgp.AppendUint64(o, (*z).LastAttestedRound)
		}
		if (zb0001Mask & 0x20) == 0 { // if not empty
			// string "v"
			o = append(o, 0xa1, 0x76)
			o = msgp.AppendBytes(o, (*z).VotersCommitment)
		}
	}
	return
}

func (_ *Message) CanMarshalMsg(z interface{}) bool {
	_, ok := (z).(*Message)
	return ok
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Message) unmarshalMsg(bts []byte, validate bool) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 int
	var zb0003 string
	var zb0004 bool
	var zb0002 bool
	_ = zb0003
	_ = zb0004
	zb0001, zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if _, ok := err.(msgp.TypeError); ok {
		zb0001, zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if validate {
			err = &msgp.ErrNonCanonical{}
			return
		}
		if zb0001 > 0 {
			zb0001--
			var zb0005 int
			zb0005, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "BlockHeadersCommitment")
				return
			}
			if zb0005 > crypto.Sha256Size {
				err = msgp.ErrOverflow(uint64(zb0005), uint64(crypto.Sha256Size))
				return
			}
			(*z).BlockHeadersCommitment, bts, err = msgp.ReadBytesBytes(bts, (*z).BlockHeadersCommitment)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "BlockHeadersCommitment")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			var zb0006 int
			zb0006, err = msgp.ReadBytesBytesHeader(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VotersCommitment")
				return
			}
			if zb0006 > crypto.SumhashDigestSize {
				err = msgp.ErrOverflow(uint64(zb0006), uint64(crypto.SumhashDigestSize))
				return
			}
			(*z).VotersCommitment, bts, err = msgp.ReadBytesBytes(bts, (*z).VotersCommitment)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "VotersCommitment")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).LnProvenWeight, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LnProvenWeight")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).FirstAttestedRound, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "FirstAttestedRound")
				return
			}
		}
		if zb0001 > 0 {
			zb0001--
			(*z).LastAttestedRound, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array", "LastAttestedRound")
				return
			}
		}
		if zb0001 > 0 {
			err = msgp.ErrTooManyArrayFields(zb0001)
			if err != nil {
				err = msgp.WrapError(err, "struct-from-array")
				return
			}
		}
	} else {
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0002 {
			(*z) = Message{}
		}
		for zb0001 > 0 {
			zb0001--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch string(field) {
			case "b":
				if validate && zb0004 && "b" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0007 int
				zb0007, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "BlockHeadersCommitment")
					return
				}
				if zb0007 > crypto.Sha256Size {
					err = msgp.ErrOverflow(uint64(zb0007), uint64(crypto.Sha256Size))
					return
				}
				(*z).BlockHeadersCommitment, bts, err = msgp.ReadBytesBytes(bts, (*z).BlockHeadersCommitment)
				if err != nil {
					err = msgp.WrapError(err, "BlockHeadersCommitment")
					return
				}
				zb0003 = "b"
			case "v":
				if validate && zb0004 && "v" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				var zb0008 int
				zb0008, err = msgp.ReadBytesBytesHeader(bts)
				if err != nil {
					err = msgp.WrapError(err, "VotersCommitment")
					return
				}
				if zb0008 > crypto.SumhashDigestSize {
					err = msgp.ErrOverflow(uint64(zb0008), uint64(crypto.SumhashDigestSize))
					return
				}
				(*z).VotersCommitment, bts, err = msgp.ReadBytesBytes(bts, (*z).VotersCommitment)
				if err != nil {
					err = msgp.WrapError(err, "VotersCommitment")
					return
				}
				zb0003 = "v"
			case "P":
				if validate && zb0004 && "P" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				(*z).LnProvenWeight, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LnProvenWeight")
					return
				}
				zb0003 = "P"
			case "f":
				if validate && zb0004 && "f" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				(*z).FirstAttestedRound, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "FirstAttestedRound")
					return
				}
				zb0003 = "f"
			case "l":
				if validate && zb0004 && "l" < zb0003 {
					err = &msgp.ErrNonCanonical{}
					return
				}
				(*z).LastAttestedRound, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LastAttestedRound")
					return
				}
				zb0003 = "l"
			default:
				err = msgp.ErrNoField(string(field))
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}
			zb0004 = true
		}
	}
	o = bts
	return
}

func (z *Message) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, false)
}
func (z *Message) UnmarshalValidateMsg(bts []byte) (o []byte, err error) {
	return z.unmarshalMsg(bts, true)
}
func (_ *Message) CanUnmarshalMsg(z interface{}) bool {
	_, ok := (z).(*Message)
	return ok
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Message) Msgsize() (s int) {
	s = 1 + 2 + msgp.BytesPrefixSize + len((*z).BlockHeadersCommitment) + 2 + msgp.BytesPrefixSize + len((*z).VotersCommitment) + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size
	return
}

// MsgIsZero returns whether this is a zero value
func (z *Message) MsgIsZero() bool {
	return (len((*z).BlockHeadersCommitment) == 0) && (len((*z).VotersCommitment) == 0) && ((*z).LnProvenWeight == 0) && ((*z).FirstAttestedRound == 0) && ((*z).LastAttestedRound == 0)
}

// MaxSize returns a maximum valid message size for this message type
func MessageMaxSize() (s int) {
	s = 1 + 2 + msgp.BytesPrefixSize + crypto.Sha256Size + 2 + msgp.BytesPrefixSize + crypto.SumhashDigestSize + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size
	return
}
