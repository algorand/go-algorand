set export
set shell := ["zsh", "-cu"]

NETWORKS := `echo $HOME` + "/networks"
NAME := "niftynetwork"
TEMP_NETWORK := NETWORKS + "/" + NAME
GO_ALGORAND := "../../.."
NODE_TEMPLATE := GO_ALGORAND + "/test/testdata/nettemplates/OneNodeFuture.json"
ALGORAND_DATA := TEMP_NETWORK + "/Primary"
BOXES_TEAL := "boxes.teal"

# STATUS := `goal node status && echo 'running'`
# FUNDER := `goal account list | awk '{print $2}' || echo ""`

# list all available commands
default:
    just --list

# echo all variables
@echo:
    echo NETWORKS: $NETWORKS
    echo NAME: $NAME
    echo TEMP_NETWORK: $TEMP_NETWORK
    echo GO_ALGORAND: $GO_ALGORAND
    echo NODE_TEMPLATE: $NODE_TEMPLATE
    echo ALGORAND_DATA: $ALGORAND_DATA
    echo BOXES_TEAL: $BOXES_TEAL

# pre-reqs

# calculate an app's address using the python SDK
app-address *ARGS:
    #!/usr/bin/env python3
    from algosdk import logic
    print(logic.get_application_address({{ ARGS }}))

# networks / node

# create and then start (error if already created)
@create_and_start: create start status
    sleep 5
    just status

# stop and tear down the node network
@stop_and_nuke: stop nuke

# create a private network with one node (error if already created)
@create:
	mkdir -p $NETWORKS
	goal network create -n $NAME -r $TEMP_NETWORK -t $NODE_TEMPLATE

# start a the network (error if already running or not created)
@start:
	goal node start

# status of network node
@status:
	goal node status && echo "running" || echo "not running"

# stop the running node (error if not running)
@stop:
	goal node stop

@nuke:
    echo "deleting $TEMP_NETWORK"
    rm -rf $TEMP_NETWORK

# accounts

# list all associated accounts
@list:
	goal account list

# funding account's address
@funder:
    just list | awk '{print $2}'
    

@info $ACCOUNT=`just funder`:
    goal account info --address {{ACCOUNT}}

@balance $ACCOUNT=`just funder`:
    goal account balance --address {{ACCOUNT}}

@last-app-id:
    just info | grep ID | tail -n 1 | cut -d "," -f1 | awk '{print $2}'

@last-app-address:
    just app-address `just last-app-id`

# apps

# print out the boxes teal program
@boxes_teal:
    cat $BOXES_TEAL

@programs:
    echo "--approval-prog $BOXES_TEAL --clear-prog clear.teal"

@app-vars:
    echo "--global-byteslices 0 --global-ints 0 --local-byteslices 0 --local-ints 0"

@app-create:
    goal app create --creator `just funder` `just programs` `just app-vars`


# clerk

@app-fund $AMOUNT=`echo 1000000`:
    goal clerk send --from `just funder` --to `just last-app-address`  --amount {{AMOUNT}}

# polyglot: python js perl sh ruby

# python:
#   #!/usr/bin/env python3
#   print('Hello from python!')

# js:
#   #!/usr/bin/env node
#   console.log('Greetings from JavaScript!')

# perl:
#   #!/usr/bin/env perl
#   print "Larry Wall says Hi!\n";

# sh:
#   #!/usr/bin/env sh
#   hello='Yo'
#   echo "$hello from a shell script!"

# ruby:
#   #!/usr/bin/env ruby
#   puts "Hello from ruby!"