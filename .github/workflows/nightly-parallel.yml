name: Nightly Tests
on:
  # Uncomment to enable on push/PR:
  # push:
  #   branches: 
  #     - master
  #     - 'rel/**'
  pull_request:
    branches:
      - master
  workflow_dispatch:
  issue_comment:
    types: [created]

env:
  CODECOV_TOKEN: "8b4a1f91-f154-4c26-b84c-c9aaa90159c6"  # Same public token from CircleCI config
  ALGORAND_DEADLOCK: enable
  KMD_NOUSB: True
  BUILD_TYPE: integration
  ALGOTEST: 1

# Allow one concurrent run per platform/test combination
# concurrency:
#   group: ${{ github.workflow }}-${{ github.event.issue.number || github.ref }}-${{ matrix.platform }}-${{ matrix.test_type }}
#   cancel-in-progress: true
  
permissions:
  pull-requests: read
  contents: read

jobs:
  build:
    # Build job - runs before tests
    strategy:
      matrix:
        # platform: [ubuntu-24.04, ubuntu-24.04-arm, macos-14]
        platform: [ubuntu-24.04]
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Get Go version
      id: go_version
      run: echo "GO_VERSION=$(./scripts/get_golang_version.sh)" >> $GITHUB_ENV
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    - name: Cache libsodium
      uses: actions/cache@v4
      with:
        path: crypto/libs
        key: libsodium-${{ matrix.platform }}-${{ hashFiles('crypto/libsodium-fork/**') }}
    - name: Build
      run: |
        scripts/travis/build.sh --make_debug
    - name: Create workspace archive
      run: |
        tar -czf /tmp/workspace-${{ matrix.platform }}.tar.gz .
      shell: bash
    - name: Upload workspace archive
      uses: actions/upload-artifact@v4
      with:
        name: workspace-${{ matrix.platform }}-${{ github.run_id }}
        path: /tmp/workspace-${{ matrix.platform }}.tar.gz
        retention-days: 1

  # Test nightly jobs that run in parallel splits
  test_nightly:
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        # platform: ["ubuntu-24.04", "ubuntu-24.04-arm", "macos-14"]
        platform: ["ubuntu-24.04"]
        partition_id: [0, 1, 2, 3, 4, 5, 6, 7] # set PARITION_TOTAL below to match
    runs-on: ${{ matrix.platform }}
    env:
      PARTITION_ID: ${{ matrix.partition_id }}
      PARTITION_TOTAL: 8
      CIRCLECI: true
    steps:
      - name: Download workspace archive
        uses: actions/download-artifact@v4
        with:
          name: workspace-${{ matrix.platform }}-${{ github.run_id }}
          path: /tmp/
      - name: Extract workspace archive
        run: |
          tar -xzf /tmp/workspace-${{ matrix.platform }}.tar.gz
          rm -f /tmp/workspace-${{ matrix.platform }}.tar.gz
        shell: bash
      - name: Get Go version
        id: go_version
        run: echo "GO_VERSION=$(./scripts/get_golang_version.sh)" >> $GITHUB_ENV
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Run tests
        run: |
          ./scripts/configure_dev.sh
          ./scripts/buildtools/install_buildtools.sh -o "gotest.tools/gotestsum"
          PACKAGES="$(go list ./... | grep -v /go-algorand/test/)"
          export PACKAGE_NAMES=$(echo $PACKAGES | tr -d '\n')          
          mkdir -p test_results/${{ matrix.platform }}_test_nightly/${PARTITION_ID}
          gotestsum --format standard-verbose \
            --junitfile ~/test_results/${{ matrix.platform }}_test_nightly/${PARTITION_ID}/results.xml \
            --jsonfile ~/test_results/${{ matrix.platform }}_test_nightly/${PARTITION_ID}/testresults.json \
            -- --tags "sqlite_unlock_notify sqlite_omit_load_extension" \
            -race -timeout 1h -coverprofile=coverage.txt -covermode=atomic -p 1 \
            $PACKAGE_NAMES
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.platform }}-${{ github.run_id }}-${{ matrix.partition_id }}
          path: ~/test_results
          retention-days: 7

      # - name: Upload coverage
      #   uses: codecov/codecov-action@v4
      #   with:
      #     token: ${{ env.CODECOV_TOKEN }}
      #     file: ./coverage.txt
      #     fail_ci_if_error: false

  # Integration nightly jobs that run in parallel splits
  integration_nightly:
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        # platform: ["ubuntu-24.04", "ubuntu-24.04-arm", "macos-14"]
        platform: ["ubuntu-24.04"]
        partition_id: [0, 1, 2, 3, 4, 5, 6, 7] # set PARTITION_TOTAL below to match
    runs-on: ${{ matrix.platform }}
    env:
      CIRCLECI: true
      PARTITION_ID: ${{ matrix.partition_id }}
      PARTITION_TOTAL: 8
      E2E_TEST_FILTER: GO
      PARALLEL_FLAG: "-p 1"
    steps:
      - name: Download workspace archive
        uses: actions/download-artifact@v4
        with:
          name: workspace-${{ matrix.platform }}-${{ github.run_id }}
          path: /tmp/
      - name: Extract workspace archive
        run: |
          tar -xzf /tmp/workspace-${{ matrix.platform }}.tar.gz
          rm -f /tmp/workspace-${{ matrix.platform }}.tar.gz
        shell: bash
      - name: Get Go version
        id: go_version
        run: echo "GO_VERSION=$(./scripts/get_golang_version.sh)" >> $GITHUB_ENV  
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Run integration tests
        run: |
          ./scripts/configure_dev.sh
          ./scripts/buildtools/install_buildtools.sh -o "gotest.tools/gotestsum"
          mkdir -p ~/test_results/${{ matrix.platform }}_integration_nightly/${PARTITION_ID}
          TEST_RESULTS=~/test_results/${{ matrix.platform }}_integration_nightly/${PARTITION_ID} \
          test/scripts/run_integration_tests.sh
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: integration-results-${{ matrix.platform }}-${{ github.run_id }}-${{ matrix.partition_id }}
          path: ~/test_results
          retention-days: 7

  e2e_expect_nightly:
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        # platform: ["ubuntu-24.04", "ubuntu-24.04-arm", "macos-14"]
        platform: ["ubuntu-24.04"]
        partition_id: [0, 1]
    runs-on: ${{ matrix.platform }}
    env:
      CIRCLECI: true
      PARTITION_ID: ${{ matrix.partition_id }}
      PARTITION_TOTAL: 2
      E2E_TEST_FILTER: EXPECT
      PARALLEL_FLAG: "-p 1"
    steps:
      - name: Download workspace archive
        uses: actions/download-artifact@v4
        with:
          name: workspace-${{ matrix.platform }}-${{ github.run_id }}
          path: /tmp/
      - name: Extract workspace archive
        run: |
          tar -xzf /tmp/workspace-${{ matrix.platform }}.tar.gz
          rm -f /tmp/workspace-${{ matrix.platform }}.tar.gz
        shell: bash
      - name: Get Go version
        id: go_version
        run: echo "GO_VERSION=$(./scripts/get_golang_version.sh)" >> $GITHUB_ENV
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Run E2E expect tests
        run: |
          scripts/configure_dev.sh
          scripts/buildtools/install_buildtools.sh -o "gotest.tools/gotestsum"
          mkdir -p ~/test_results/${{ matrix.platform }}_e2e_expect_nightly/${PARTITION_ID}
          TEST_RESULTS=~/test_results/${{ matrix.platform }}_e2e_expect_nightly/${PARTITION_ID} \
          test/scripts/run_integration_tests.sh
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: e2e-expect-results-${{ matrix.platform }}-${{ github.run_id }}-${{ matrix.partition_id }}
          path: ~/test_results
          retention-days: 7

  e2e_subs_nightly:
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        # platform: ["ubuntu-24.04", "ubuntu-24.04-arm", "macos-14"]
        platform: ["ubuntu-24.04"]
    runs-on: ${{ matrix.platform }}
    env:
      E2E_TEST_FILTER: SCRIPTS
      CI_PLATFORM: ${{ matrix.platform }}
      CI_KEEP_TEMP_PLATFORM: amd64
    steps:
      - name: Download workspace archive
        uses: actions/download-artifact@v4
        with:
          name: workspace-${{ matrix.platform }}-${{ github.run_id }}
          path: /tmp/
      - name: Extract workspace archive
        run: |
          tar -xzf /tmp/workspace-${{ matrix.platform }}.tar.gz
          rm -f /tmp/workspace-${{ matrix.platform }}.tar.gz
        shell: bash
      - name: Get Go version
        id: go_version
        run: echo "GO_VERSION=$(./scripts/get_golang_version.sh)" >> $GITHUB_ENV
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Run E2E subs tests
        run: |
          scripts/configure_dev.sh
          scripts/buildtools/install_buildtools.sh -o "gotest.tools/gotestsum"
          mkdir -p ~/test_results/${{ matrix.platform }}_e2e_subs_nightly
          TEST_RESULTS=~/test_results/${{ matrix.platform }}_e2e_subs_nightly \
          test/scripts/run_integration_tests.sh
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: e2e-subs-results-${{ matrix.platform }}-${{ github.run_id }}
          path: ~/test_results
          retention-days: 7

  # # Verification jobs that run after test jobs complete
  # verify_test_nightly:
  #   needs: [test_nightly]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - uses: actions/download-artifact@v4
  #       with:
  #         pattern: test-results-${{ matrix.platform }}-${{ github.run_id }}-
  #         path: ~/test_results
  #         merge-multiple: true

  #     - name: Check test execution
  #       run: |
  #         python3 scripts/buildtools/check_tests.py \
  #           --tests-results-filepath test_results/${{ matrix.platform }}_test_nightly/combined_testresults.json \
  #           --ignored-tests \
  #             TestAlgodWithExpect \
  #             TestAlgohWithExpect \
  #             TestGoalWithExpect \
  #             TestTealdbgWithExpect

  # verify_integration_nightly:
  #   needs: [integration_nightly] 
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - uses: actions/download-artifact@v4
  #       with:
  #         pattern: integration-results-${{ matrix.platform }}-${{ github.run_id }}-*
  #         path: test_results
  #         merge-multiple: true

  #     - name: Check test execution
  #       run: |
  #         python3 scripts/buildtools/check_tests.py \
  #           --tests-results-filepath test_results/${{ matrix.platform }}_integration_nightly/combined_testresults.json \
  #           --ignored-tests \
  #             TestAlgodWithExpect \
  #             TestAlgohWithExpect \
  #             TestGoalWithExpect \
  #             TestTealdbgWithExpect

  # verify_e2e_expect_nightly:
  #   needs: [e2e_expect_nightly]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - uses: actions/download-artifact@v4
  #       with:
  #         pattern: e2e-expect-results-${{ matrix.platform }}-${{ github.run_id }}-*
  #         path: test_results
  #         merge-multiple: true

  #     - name: Check test execution  
  #       run: |
  #         python3 scripts/buildtools/check_tests.py \
  #           --tests-results-filepath test_results/${{ matrix.platform }}_e2e_expect_nightly/combined_testresults.json \
  #           --ignored-tests \
  #             TestAlgodWithExpect \
  #             TestAlgohWithExpect \
  #             TestGoalWithExpect \
  #             TestTealdbgWithExpect
