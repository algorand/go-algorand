name: Nightly Tests
on:
  # Uncomment to enable on push/PR:
  # push:
  #   branches: 
  #     - master
  #     - 'rel/**'
  # pull_request:
  #   branches:
  #     - master
  # workflow_dispatch:
  issue_comment:
    types: [created]

env:
  CODECOV_TOKEN: "8b4a1f91-f154-4c26-b84c-c9aaa90159c6"  # Same public token from CircleCI config
  ALGORAND_DEADLOCK: enable
  KMD_NOUSB: True
  BUILD_TYPE: integration
  ALGOTEST: 1

# Allow one concurrent run per platform/test combination
# concurrency:
#   group: ${{ github.workflow }}-${{ github.event.issue.number || github.ref }}-${{ matrix.platform }}-${{ matrix.test_type }}
#   cancel-in-progress: true
  
permissions:
  pull-requests: read  # Only need to read comments
  contents: read

jobs:
  # Job to check if we should run tests based on PR comment
  check_comments:
    if: github.event_name == 'issue_comment'
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      platform: ${{ steps.check.outputs.platform }}
      test_type: ${{ steps.check.outputs.test_type }}
    steps:
      - id: check
        run: |
          COMMENT="${{ github.event.comment.body }}"
          AUTHOR_ASSOC="${{ github.event.comment.author_association }}"
          echo "Author association: $AUTHOR_ASSOC"
          
          if [ "$AUTHOR_ASSOC" != "OWNER" ] && [ "$AUTHOR_ASSOC" != "MEMBER" ]; then
            echo "Comment author must be repository OWNER or MEMBER to trigger builds"
            echo "should_run=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [[ "$COMMENT" =~ ^/run\ (amd64|arm64|mac_arm64)_(test|integration|e2e_expect|e2e_subs)_nightly$ ]]; then
            echo "Comment matches pattern"
            PLATFORM=$(echo $COMMENT | cut -d'_' -f1)
            TEST_TYPE=$(echo $COMMENT | cut -d'_' -f2)
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "platform=$PLATFORM" >> $GITHUB_OUTPUT 
            echo "test_type=$TEST_TYPE" >> $GITHUB_OUTPUT
          else
            echo "Comment does not match pattern"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi
      - id: debug
        run: |
          echo "Received comment: $COMMENT"
          echo "Should run: ${{ steps.check.outputs.should_run }}"
          echo "Platform: ${{ steps.check.outputs.platform }}"
          echo "Test type: ${{ steps.check.outputs.test_type }}"

  # Build job - runs before tests
  build:
    needs: check_comments
    if: needs.check_comments.outputs.should_run == 'true'
    strategy:
      matrix:
        platform: ["${{ needs.check_comments.outputs.platform }}"]
        include:
          - platform: amd64
            runner: ubuntu-latest
          - platform: arm64
            runner: ubuntu-latest
            extra_flags: ""
          - platform: mac_arm64 
            runner: macos-14
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get Go version
        id: go_version
        run: echo "GO_VERSION=$(./scripts/get_golang_version.sh)" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache libsodium
        uses: actions/cache@v4
        with:
          path: crypto/libs
          key: libsodium-${{ runner.os }}-${{ hashFiles('crypto/libsodium-fork/**') }}

      - name: Build
        run: |
          scripts/travis/build.sh --make_debug

      - name: Upload workspace
        uses: actions/upload-artifact@v4
        with:
          name: workspace-${{ matrix.platform }}
          path: |
            .
            !.git/**/*
          retention-days: 1

  # Test jobs that run in parallel splits
  test_nightly:
    needs: [check_comments, build] 
    if: needs.check_comments.outputs.should_run == 'true' && needs.check_comments.outputs.test_type == 'test'
    strategy:
      fail-fast: false
      matrix:
        platform: ["${{ needs.check_comments.outputs.platform }}"]
        partition_id: [0, 1, 2, 3, 4, 5, 6, 7]
        include:
          - platform: amd64
            runner: ubuntu-latest
          - platform: arm64
            runner: ubuntu-latest
          - platform: mac_arm64
            runner: macos-14
    runs-on: ${{ matrix.runner }}
    env:
      PARTITION_ID: ${{ matrix.partition_id }}
      PARTITION_TOTAL: 8
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace-${{ matrix.platform }}
          path: .

      - name: Set up Go 
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Run build tests  
        run: |
          set -e
          set -x
          export PATH=$(echo "$PATH" | sed -e "s|:${HOME}/\.go_workspace/bin||g" | sed -e 's|:/usr/local/go/bin||g')
          export KMD_NOUSB=True
          export GOPATH="${GITHUB_WORKSPACE}/go"
          export PATH="${PATH}:${GOPATH}/bin"
          export ALGORAND_DEADLOCK=enable
          
          GOLANG_VERSION=$(./scripts/get_golang_version.sh)
          scripts/configure_dev.sh
          scripts/buildtools/install_buildtools.sh -o "gotest.tools/gotestsum"
          
          PACKAGES="$(go list ./... | grep -v /go-algorand/test/)"
          export PACKAGE_NAMES=$(echo $PACKAGES | tr -d '\n')
          
          mkdir -p test_results/${{ matrix.platform }}_test_nightly/${PARTITION_ID}
          touch test_results/${{ matrix.platform }}_test_nightly/${PARTITION_ID}/results.xml
          touch test_results/${{ matrix.platform }}_test_nightly/${PARTITION_ID}/testresults.json
          
          gotestsum --format standard-verbose \
            --junitfile test_results/${{ matrix.platform }}_test_nightly/${PARTITION_ID}/results.xml \
            --jsonfile test_results/${{ matrix.platform }}_test_nightly/${PARTITION_ID}/testresults.json \
            -- --tags "sqlite_unlock_notify sqlite_omit_load_extension" \
            -race -timeout 1h -coverprofile=coverage.txt -covermode=atomic -p 1 \
            $PACKAGE_NAMES

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.platform }}-${{ matrix.partition_id }}
          path: test_results
          retention-days: 7

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ env.CODECOV_TOKEN }}
          file: ./coverage.txt
          fail_ci_if_error: false

  integration_nightly:
    needs: [check_comments, build]
    if: needs.check_comments.outputs.should_run == 'true' && needs.check_comments.outputs.test_type == 'integration'
    strategy:
      fail-fast: false  
      matrix:
        platform: ["${{ needs.check_comments.outputs.platform }}"]
        partition_id: [0, 1, 2, 3, 4, 5, 6, 7]
        include:
          - platform: amd64
            runner: ubuntu-latest
          - platform: arm64  
            runner: ubuntu-latest
          - platform: mac_arm64
            runner: macos-14
    runs-on: ${{ matrix.runner }}
    env:
      PARTITION_ID: ${{ matrix.partition_id }}
      PARTITION_TOTAL: 8
      E2E_TEST_FILTER: GO
      PARALLEL_FLAG: "-p 1"
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace-${{ matrix.platform }}
          path: .

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Run integration tests
        run: |
          scripts/configure_dev.sh
          scripts/buildtools/install_buildtools.sh -o "gotest.tools/gotestsum"
          
          mkdir -p test_results/${{ matrix.platform }}_integration_nightly/${PARTITION_ID}
          
          TEST_RESULTS=test_results/${{ matrix.platform }}_integration_nightly/${PARTITION_ID} \
          test/scripts/run_integration_tests.sh

      - name: Upload test results  
        uses: actions/upload-artifact@v4
        with:
          name: integration-results-${{ matrix.platform }}-${{ matrix.partition_id }}
          path: test_results
          retention-days: 7

  e2e_expect_nightly:
    needs: [check_comments, build]
    if: needs.check_comments.outputs.should_run == 'true' && needs.check_comments.outputs.test_type == 'e2e_expect'
    strategy:
      fail-fast: false
      matrix:
        platform: ["${{ needs.check_comments.outputs.platform }}"]
        partition_id: [0, 1] 
        include:
          - platform: amd64
            runner: ubuntu-latest
          - platform: arm64
            runner: ubuntu-latest
          - platform: mac_arm64
            runner: macos-14
    runs-on: ${{ matrix.runner }}
    env:
      PARTITION_ID: ${{ matrix.partition_id }}
      PARTITION_TOTAL: 2
      E2E_TEST_FILTER: EXPECT
      PARALLEL_FLAG: "-p 1"
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace-${{ matrix.platform }}
          path: .

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Run integration tests
        run: |
          set -x
          export CI_E2E_FILENAME="${GITHUB_REF_NAME/\//-}"
          export PATH=$(echo "$PATH" | sed -e "s|:${HOME}/\.go_workspace/bin||g" | sed -e 's|:/usr/local/go/bin||g')
          export KMD_NOUSB=True
          export GOPATH="${GITHUB_WORKSPACE}/go"
          export PATH="${PATH}:${GOPATH}/bin"
          export ALGORAND_DEADLOCK=enable
          export BUILD_TYPE=integration
          
          GOLANG_VERSION=$(./scripts/get_golang_version.sh)
          scripts/configure_dev.sh
          scripts/buildtools/install_buildtools.sh -o "gotest.tools/gotestsum"
          
          mkdir -p test_results/${{ matrix.platform }}_e2e_expect_nightly/${PARTITION_ID}
          touch test_results/${{ matrix.platform }}_e2e_expect_nightly/${PARTITION_ID}/results.xml
          touch test_results/${{ matrix.platform }}_e2e_expect_nightly/${PARTITION_ID}/testresults.json
          
          export ALGOTEST=1
          export TEST_RESULTS=test_results/${{ matrix.platform }}_e2e_expect_nightly/${PARTITION_ID}
          export PARALLEL_FLAG="-p 1"
          test/scripts/run_integration_tests.sh

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: e2e-expect-results-${{ matrix.platform }}-${{ matrix.partition_id }}
          path: test_results
          retention-days: 7

  e2e_subs_nightly:
    needs: [check_comments, build]
    if: needs.check_comments.outputs.should_run == 'true' && needs.check_comments.outputs.test_type == 'e2e_subs'
    strategy:
      matrix:
        platform: ["${{ needs.check_comments.outputs.platform }}"]
        include:
          - platform: amd64
            runner: ubuntu-latest
          - platform: arm64
            runner: ubuntu-latest
          - platform: mac_arm64
            runner: macos-14
    runs-on: ${{ matrix.runner }}
    env:
      E2E_TEST_FILTER: SCRIPTS
      CI_PLATFORM: ${{ matrix.platform }}
      CI_KEEP_TEMP_PLATFORM: amd64
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace-${{ matrix.platform }}
          path: .

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Run E2E subs tests
        run: |
          scripts/configure_dev.sh
          scripts/buildtools/install_buildtools.sh -o "gotest.tools/gotestsum"
          
          mkdir -p test_results/${{ matrix.platform }}_e2e_subs_nightly
          
          TEST_RESULTS=test_results/${{ matrix.platform }}_e2e_subs_nightly \
          test/scripts/run_integration_tests.sh

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: e2e-subs-results-${{ matrix.platform }}
          path: test_results
          retention-days: 7

  # Verification jobs that run after test jobs complete
  verify_test_nightly:
    needs: [test_nightly]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: test_results
          merge-multiple: true

      - name: Check test execution
        run: |
          python3 scripts/buildtools/check_tests.py \
            --tests-results-filepath test_results/${{ needs.check_comments.outputs.platform }}_test_nightly/combined_testresults.json \
            --ignored-tests \
              TestAlgodWithExpect \
              TestAlgohWithExpect \
              TestGoalWithExpect \
              TestTealdbgWithExpect

  verify_integration_nightly:
    needs: [integration_nightly] 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          pattern: integration-results-*
          path: test_results
          merge-multiple: true

      - name: Check test execution
        run: |
          python3 scripts/buildtools/check_tests.py \
            --tests-results-filepath test_results/${{ needs.check_comments.outputs.platform }}_integration_nightly/combined_testresults.json \
            --ignored-tests \
              TestAlgodWithExpect \
              TestAlgohWithExpect \
              TestGoalWithExpect \
              TestTealdbgWithExpect

  verify_e2e_expect_nightly:
    needs: [e2e_expect_nightly]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          pattern: e2e-expect-results-*
          path: test_results
          merge-multiple: true

      - name: Check test execution  
        run: |
          python3 scripts/buildtools/check_tests.py \
            --tests-results-filepath test_results/${{ needs.check_comments.outputs.platform }}_e2e_expect_nightly/combined_testresults.json \
            --ignored-tests \
              TestAlgodWithExpect \
              TestAlgohWithExpect \
              TestGoalWithExpect \
              TestTealdbgWithExpect